
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e148  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800e208  0800e208  0000f208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec88  0800ec88  000104e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ec88  0800ec88  0000fc88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec90  0800ec90  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec90  0800ec90  0000fc90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec94  0800ec94  0000fc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e0  20000000  0800ec98  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008f4  200004e0  0800f178  000104e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dd4  0800f178  00010dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002246e  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cf0  00000000  00000000  00032976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00037668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001387  00000000  00000000  00038fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016a6d  00000000  00000000  0003a337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008a7f  00000000  00000000  00050da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00059823  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000059e4  00000000  00000000  00059868  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005f24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004e0 	.word	0x200004e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e1dc 	.word	0x0800e1dc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004e4 	.word	0x200004e4
 8000104:	0800e1dc 	.word	0x0800e1dc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e05f      	b.n	800051a <Initialise_Preset_Arrays+0xce>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d112      	bne.n	8000488 <Initialise_Preset_Arrays+0x3c>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b31      	ldr	r3, [pc, #196]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4931      	ldr	r1, [pc, #196]	@ (8000530 <Initialise_Preset_Arrays+0xe4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b30      	ldr	r3, [pc, #192]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4930      	ldr	r1, [pc, #192]	@ (8000538 <Initialise_Preset_Arrays+0xec>)
 8000478:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_0;
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	492f      	ldr	r1, [pc, #188]	@ (8000540 <Initialise_Preset_Arrays+0xf4>)
 8000484:	50d1      	str	r1, [r2, r3]
 8000486:	e043      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 1){
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d112      	bne.n	80004b6 <Initialise_Preset_Arrays+0x6a>
			factory_presets_array[i] = &factory_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	492a      	ldr	r1, [pc, #168]	@ (8000544 <Initialise_Preset_Arrays+0xf8>)
 800049a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	4928      	ldr	r1, [pc, #160]	@ (8000548 <Initialise_Preset_Arrays+0xfc>)
 80004a6:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_1;
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	4926      	ldr	r1, [pc, #152]	@ (800054c <Initialise_Preset_Arrays+0x100>)
 80004b2:	50d1      	str	r1, [r2, r3]
 80004b4:	e02c      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 2){
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d112      	bne.n	80004e4 <Initialise_Preset_Arrays+0x98>
			factory_presets_array[i] = &factory_preset_2;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <Initialise_Preset_Arrays+0x104>)
 80004c8:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	4920      	ldr	r1, [pc, #128]	@ (8000554 <Initialise_Preset_Arrays+0x108>)
 80004d4:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_2;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	491e      	ldr	r1, [pc, #120]	@ (8000558 <Initialise_Preset_Arrays+0x10c>)
 80004e0:	50d1      	str	r1, [r2, r3]
 80004e2:	e015      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 3){
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d111      	bne.n	8000510 <Initialise_Preset_Arrays+0xc4>
			factory_presets_array[i] = &factory_preset_3;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	4919      	ldr	r1, [pc, #100]	@ (800055c <Initialise_Preset_Arrays+0x110>)
 80004f6:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	4917      	ldr	r1, [pc, #92]	@ (8000560 <Initialise_Preset_Arrays+0x114>)
 8000502:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_3;
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	4915      	ldr	r1, [pc, #84]	@ (8000564 <Initialise_Preset_Arrays+0x118>)
 800050e:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d99b      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200004fc 	.word	0x200004fc
 8000530:	0800e218 	.word	0x0800e218
 8000534:	2000050c 	.word	0x2000050c
 8000538:	20000000 	.word	0x20000000
 800053c:	20000544 	.word	0x20000544
 8000540:	20000558 	.word	0x20000558
 8000544:	0800e220 	.word	0x0800e220
 8000548:	20000008 	.word	0x20000008
 800054c:	20000560 	.word	0x20000560
 8000550:	0800e228 	.word	0x0800e228
 8000554:	20000010 	.word	0x20000010
 8000558:	20000568 	.word	0x20000568
 800055c:	0800e230 	.word	0x0800e230
 8000560:	20000018 	.word	0x20000018
 8000564:	20000570 	.word	0x20000570

08000568 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 800056c:	4b68      	ldr	r3, [pc, #416]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000576:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b66      	ldr	r3, [pc, #408]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800057e:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000580:	4b66      	ldr	r3, [pc, #408]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 800058a:	4b62      	ldr	r3, [pc, #392]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800058c:	891b      	ldrh	r3, [r3, #8]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000592:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000594:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800059e:	4b5d      	ldr	r3, [pc, #372]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005a0:	7a9b      	ldrb	r3, [r3, #10]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a6:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80005a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 80005b2:	4b58      	ldr	r3, [pc, #352]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ba:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 80005bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d104      	bne.n	80005d0 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80005c6:	4b53      	ldr	r3, [pc, #332]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b52      	ldr	r3, [pc, #328]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 80005d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d10e      	bne.n	80005f8 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005da:	4b54      	ldr	r3, [pc, #336]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	0013      	movs	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4a51      	ldr	r2, [pc, #324]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005ec:	189b      	adds	r3, r3, r2
 80005ee:	4a4a      	ldr	r2, [pc, #296]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f8fd 	bl	80007f2 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005f8:	4b48      	ldr	r3, [pc, #288]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d10e      	bne.n	8000620 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000602:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	0013      	movs	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	189b      	adds	r3, r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4a47      	ldr	r2, [pc, #284]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000614:	189b      	adds	r3, r3, r2
 8000616:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f8f8 	bl	8000810 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b03      	cmp	r3, #3
 8000628:	d10e      	bne.n	8000648 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800062a:	4b40      	ldr	r3, [pc, #256]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	0013      	movs	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	189b      	adds	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800063c:	189b      	adds	r3, r3, r2
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f8f3 	bl	800082e <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000648:	4b36      	ldr	r3, [pc, #216]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b03      	cmp	r3, #3
 8000650:	d10e      	bne.n	8000670 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000652:	4b36      	ldr	r3, [pc, #216]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	0013      	movs	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	189b      	adds	r3, r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000664:	189b      	adds	r3, r3, r2
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f8ee 	bl	800084c <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b03      	cmp	r3, #3
 8000678:	d10e      	bne.n	8000698 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	0013      	movs	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	189b      	adds	r3, r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800068c:	189b      	adds	r3, r3, r2
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8e9 	bl	800086a <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d105      	bne.n	80006ae <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd15 	bl	80010d8 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d105      	bne.n	80006c4 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fd2f 	bl	8001122 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <Update_Params_Based_On_Mode_Selected+0x1d4>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd3d 	bl	8001154 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fd45 	bl	800117a <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fd53 	bl	80011ac <Update_Phase_with_CC_Value>
	}

	return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000438 	.word	0x20000438
 8000714:	20000d44 	.word	0x20000d44
 8000718:	20000d20 	.word	0x20000d20
 800071c:	20000430 	.word	0x20000430
 8000720:	20000434 	.word	0x20000434
 8000724:	2000043c 	.word	0x2000043c
 8000728:	20000440 	.word	0x20000440
 800072c:	20000554 	.word	0x20000554
 8000730:	2000051c 	.word	0x2000051c
 8000734:	2000057c 	.word	0x2000057c
 8000738:	2000057d 	.word	0x2000057d
 800073c:	2000057e 	.word	0x2000057e
 8000740:	2000057f 	.word	0x2000057f
 8000744:	20000580 	.word	0x20000580

08000748 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	b29a      	uxth	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	18db      	adds	r3, r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	b29a      	uxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}

0800079a <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a9b      	ldrb	r3, [r3, #10]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80007dc:	b29b      	uxth	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	711a      	strb	r2, [r3, #4]

	return 1;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]

	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	719a      	strb	r2, [r3, #6]

	return 1;
 8000806:	2301      	movs	r3, #1
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	885b      	ldrh	r3, [r3, #2]
 800081e:	b29a      	uxth	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	811a      	strh	r2, [r3, #8]

	return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	729a      	strb	r2, [r3, #10]

	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	b29a      	uxth	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	819a      	strh	r2, [r3, #12]

	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	891b      	ldrh	r3, [r3, #8]
 8000878:	b29a      	uxth	r2, r3
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 8000892:	2000      	movs	r0, #0
 8000894:	2100      	movs	r1, #0
 8000896:	61b8      	str	r0, [r7, #24]
 8000898:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 800089a:	210f      	movs	r1, #15
 800089c:	2008      	movs	r0, #8
 800089e:	1809      	adds	r1, r1, r0
 80008a0:	19c9      	adds	r1, r1, r7
 80008a2:	2000      	movs	r0, #0
 80008a4:	7008      	strb	r0, [r1, #0]
 80008a6:	e037      	b.n	8000918 <Pack_Preset_Into_Doubleword+0x90>

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 80008a8:	260f      	movs	r6, #15
 80008aa:	2108      	movs	r1, #8
 80008ac:	1870      	adds	r0, r6, r1
 80008ae:	19c1      	adds	r1, r0, r7
 80008b0:	7809      	ldrb	r1, [r1, #0]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	1841      	adds	r1, r0, r1
 80008b6:	7809      	ldrb	r1, [r1, #0]
 80008b8:	000c      	movs	r4, r1
 80008ba:	2100      	movs	r1, #0
 80008bc:	000d      	movs	r5, r1
 80008be:	2108      	movs	r1, #8
 80008c0:	1871      	adds	r1, r6, r1
 80008c2:	19c9      	adds	r1, r1, r7
 80008c4:	7809      	ldrb	r1, [r1, #0]
 80008c6:	00c9      	lsls	r1, r1, #3
 80008c8:	0008      	movs	r0, r1
 80008ca:	3820      	subs	r0, #32
 80008cc:	2800      	cmp	r0, #0
 80008ce:	db03      	blt.n	80008d8 <Pack_Preset_Into_Doubleword+0x50>
 80008d0:	0026      	movs	r6, r4
 80008d2:	4086      	lsls	r6, r0
 80008d4:	0033      	movs	r3, r6
 80008d6:	e008      	b.n	80008ea <Pack_Preset_Into_Doubleword+0x62>
 80008d8:	2020      	movs	r0, #32
 80008da:	1a40      	subs	r0, r0, r1
 80008dc:	0026      	movs	r6, r4
 80008de:	40c6      	lsrs	r6, r0
 80008e0:	0030      	movs	r0, r6
 80008e2:	002e      	movs	r6, r5
 80008e4:	408e      	lsls	r6, r1
 80008e6:	0033      	movs	r3, r6
 80008e8:	4303      	orrs	r3, r0
 80008ea:	0020      	movs	r0, r4
 80008ec:	4088      	lsls	r0, r1
 80008ee:	0002      	movs	r2, r0
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	4311      	orrs	r1, r2
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	69f9      	ldr	r1, [r7, #28]
 80008f8:	4319      	orrs	r1, r3
 80008fa:	6079      	str	r1, [r7, #4]
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	61b8      	str	r0, [r7, #24]
 8000902:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000904:	260f      	movs	r6, #15
 8000906:	2108      	movs	r1, #8
 8000908:	1870      	adds	r0, r6, r1
 800090a:	19c1      	adds	r1, r0, r7
 800090c:	7808      	ldrb	r0, [r1, #0]
 800090e:	2108      	movs	r1, #8
 8000910:	1871      	adds	r1, r6, r1
 8000912:	19c9      	adds	r1, r1, r7
 8000914:	3001      	adds	r0, #1
 8000916:	7008      	strb	r0, [r1, #0]
 8000918:	210f      	movs	r1, #15
 800091a:	2008      	movs	r0, #8
 800091c:	1809      	adds	r1, r1, r0
 800091e:	19c9      	adds	r1, r1, r7
 8000920:	7809      	ldrb	r1, [r1, #0]
 8000922:	2904      	cmp	r1, #4
 8000924:	d9c0      	bls.n	80008a8 <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	600a      	str	r2, [r1, #0]
 800092e:	604b      	str	r3, [r1, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b009      	add	sp, #36	@ 0x24
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800093a <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800094c:	2317      	movs	r3, #23
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e020      	b.n	8000998 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000956:	2117      	movs	r1, #23
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	da06      	bge.n	8000976 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	227f      	movs	r2, #127	@ 0x7f
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e00a      	b.n	800098c <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000976:	2117      	movs	r1, #23
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	68f9      	ldr	r1, [r7, #12]
 8000986:	18cb      	adds	r3, r1, r3
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800098c:	2117      	movs	r1, #23
 800098e:	187b      	adds	r3, r7, r1
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	187b      	adds	r3, r7, r1
 8000994:	3201      	adds	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	2317      	movs	r3, #23
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d9d9      	bls.n	8000956 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b006      	add	sp, #24
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6678      	str	r0, [r7, #100]	@ 0x64
 80009b4:	6639      	str	r1, [r7, #96]	@ 0x60
 80009b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009b8:	65bb      	str	r3, [r7, #88]	@ 0x58

	//This function will break if presets are bigger than 5

	uint64_t packed = 0;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2300      	movs	r3, #0
 80009be:	673a      	str	r2, [r7, #112]	@ 0x70
 80009c0:	677b      	str	r3, [r7, #116]	@ 0x74

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 80009c2:	2317      	movs	r3, #23
 80009c4:	2258      	movs	r2, #88	@ 0x58
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	19da      	adds	r2, r3, r7
 80009ca:	2300      	movs	r3, #0
 80009cc:	7013      	strb	r3, [r2, #0]
 80009ce:	e039      	b.n	8000a44 <Pack_Misc_Into_Doubleword+0x98>

		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 80009d0:	2117      	movs	r1, #23
 80009d2:	2358      	movs	r3, #88	@ 0x58
 80009d4:	18cb      	adds	r3, r1, r3
 80009d6:	19db      	adds	r3, r3, r7
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009e8:	2358      	movs	r3, #88	@ 0x58
 80009ea:	18cb      	adds	r3, r1, r3
 80009ec:	19db      	adds	r3, r3, r7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	00da      	lsls	r2, r3, #3
 80009f2:	0013      	movs	r3, r2
 80009f4:	3b20      	subs	r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db03      	blt.n	8000a02 <Pack_Misc_Into_Doubleword+0x56>
 80009fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80009fc:	4099      	lsls	r1, r3
 80009fe:	000d      	movs	r5, r1
 8000a00:	e009      	b.n	8000a16 <Pack_Misc_Into_Doubleword+0x6a>
 8000a02:	2320      	movs	r3, #32
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a0a:	0006      	movs	r6, r0
 8000a0c:	40de      	lsrs	r6, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000d      	movs	r5, r1
 8000a14:	431d      	orrs	r5, r3
 8000a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a24:	432b      	orrs	r3, r5
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	673a      	str	r2, [r7, #112]	@ 0x70
 8000a2e:	677b      	str	r3, [r7, #116]	@ 0x74
	for(uint8_t i = 0; i < num_presets; i++){
 8000a30:	2217      	movs	r2, #23
 8000a32:	2358      	movs	r3, #88	@ 0x58
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	19db      	adds	r3, r3, r7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2158      	movs	r1, #88	@ 0x58
 8000a3c:	1852      	adds	r2, r2, r1
 8000a3e:	19d2      	adds	r2, r2, r7
 8000a40:	3301      	adds	r3, #1
 8000a42:	7013      	strb	r3, [r2, #0]
 8000a44:	2317      	movs	r3, #23
 8000a46:	2258      	movs	r2, #88	@ 0x58
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	19da      	adds	r2, r3, r7
 8000a4c:	2630      	movs	r6, #48	@ 0x30
 8000a4e:	2308      	movs	r3, #8
 8000a50:	18f1      	adds	r1, r6, r3
 8000a52:	2358      	movs	r3, #88	@ 0x58
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	18cb      	adds	r3, r1, r3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3b7      	bcc.n	80009d0 <Pack_Misc_Into_Doubleword+0x24>
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a60:	2516      	movs	r5, #22
 8000a62:	2358      	movs	r3, #88	@ 0x58
 8000a64:	18eb      	adds	r3, r5, r3
 8000a66:	19dc      	adds	r4, r3, r7
 8000a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 ffa1 	bl	80069b4 <Get_Status_Bit>
 8000a72:	0003      	movs	r3, r0
 8000a74:	7023      	strb	r3, [r4, #0]

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 8000a76:	2115      	movs	r1, #21
 8000a78:	2358      	movs	r3, #88	@ 0x58
 8000a7a:	18cb      	adds	r3, r1, r3
 8000a7c:	19da      	adds	r2, r3, r7
 8000a7e:	2308      	movs	r3, #8
 8000a80:	18f3      	adds	r3, r6, r3
 8000a82:	2058      	movs	r0, #88	@ 0x58
 8000a84:	4684      	mov	ip, r0
 8000a86:	44bc      	add	ip, r7
 8000a88:	4463      	add	r3, ip
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	7013      	strb	r3, [r2, #0]
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 8000a90:	2358      	movs	r3, #88	@ 0x58
 8000a92:	18eb      	adds	r3, r5, r3
 8000a94:	19db      	adds	r3, r3, r7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000aa0:	2358      	movs	r3, #88	@ 0x58
 8000aa2:	18cb      	adds	r3, r1, r3
 8000aa4:	19db      	adds	r3, r3, r7
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	3b20      	subs	r3, #32
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db03      	blt.n	8000ab8 <Pack_Misc_Into_Doubleword+0x10c>
 8000ab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ab2:	4099      	lsls	r1, r3
 8000ab4:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ab6:	e00b      	b.n	8000ad0 <Pack_Misc_Into_Doubleword+0x124>
 8000ab8:	2320      	movs	r3, #32
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000abe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac0:	0004      	movs	r4, r0
 8000ac2:	40dc      	lsrs	r4, r3
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	6579      	str	r1, [r7, #84]	@ 0x54
 8000aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000acc:	4319      	orrs	r1, r3
 8000ace:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ad8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000ada:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000adc:	0008      	movs	r0, r1
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	6138      	str	r0, [r7, #16]
 8000ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	617a      	str	r2, [r7, #20]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	697c      	ldr	r4, [r7, #20]
 8000aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8000aee:	677c      	str	r4, [r7, #116]	@ 0x74

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000af0:	2514      	movs	r5, #20
 8000af2:	2358      	movs	r3, #88	@ 0x58
 8000af4:	18eb      	adds	r3, r5, r3
 8000af6:	19dc      	adds	r4, r3, r7
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	00da      	lsls	r2, r3, #3
 8000afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f005 ff57 	bl	80069b4 <Get_Status_Bit>
 8000b06:	0003      	movs	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 8000b0a:	2358      	movs	r3, #88	@ 0x58
 8000b0c:	18eb      	adds	r3, r5, r3
 8000b0e:	19db      	adds	r3, r3, r7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	2258      	movs	r2, #88	@ 0x58
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	19db      	adds	r3, r3, r7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3308      	adds	r3, #8
 8000b26:	001a      	movs	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	3b20      	subs	r3, #32
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db03      	blt.n	8000b38 <Pack_Misc_Into_Doubleword+0x18c>
 8000b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b32:	4099      	lsls	r1, r3
 8000b34:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b36:	e00b      	b.n	8000b50 <Pack_Misc_Into_Doubleword+0x1a4>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b40:	0004      	movs	r4, r0
 8000b42:	40dc      	lsrs	r4, r3
 8000b44:	0023      	movs	r3, r4
 8000b46:	4091      	lsls	r1, r2
 8000b48:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000b4c:	4319      	orrs	r1, r3
 8000b4e:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b52:	4093      	lsls	r3, r2
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4318      	orrs	r0, r3
 8000b60:	60b8      	str	r0, [r7, #8]
 8000b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b64:	431a      	orrs	r2, r3
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	68fc      	ldr	r4, [r7, #12]
 8000b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b6e:	677c      	str	r4, [r7, #116]	@ 0x74

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	2315      	movs	r3, #21
 8000b7e:	2258      	movs	r2, #88	@ 0x58
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	19db      	adds	r3, r3, r7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3310      	adds	r3, #16
 8000b88:	001a      	movs	r2, r3
 8000b8a:	3a20      	subs	r2, #32
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	db03      	blt.n	8000b98 <Pack_Misc_Into_Doubleword+0x1ec>
 8000b90:	6a39      	ldr	r1, [r7, #32]
 8000b92:	4091      	lsls	r1, r2
 8000b94:	6479      	str	r1, [r7, #68]	@ 0x44
 8000b96:	e00b      	b.n	8000bb0 <Pack_Misc_Into_Doubleword+0x204>
 8000b98:	2220      	movs	r2, #32
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	6a38      	ldr	r0, [r7, #32]
 8000b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ba0:	0004      	movs	r4, r0
 8000ba2:	40d4      	lsrs	r4, r2
 8000ba4:	0022      	movs	r2, r4
 8000ba6:	4099      	lsls	r1, r3
 8000ba8:	6479      	str	r1, [r7, #68]	@ 0x44
 8000baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000bac:	4311      	orrs	r1, r2
 8000bae:	6479      	str	r1, [r7, #68]	@ 0x44
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8000bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	4318      	orrs	r0, r3
 8000bc0:	6038      	str	r0, [r7, #0]
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	687c      	ldr	r4, [r7, #4]
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bce:	677c      	str	r4, [r7, #116]	@ 0x74

	*Doubleword_ptr = packed;
 8000bd0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000bd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	604b      	str	r3, [r1, #4]

	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b01f      	add	sp, #124	@ 0x7c
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be4 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	000a      	movs	r2, r1
 8000bee:	1cfb      	adds	r3, r7, #3
 8000bf0:	701a      	strb	r2, [r3, #0]

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000bf4:	4a8f      	ldr	r2, [pc, #572]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f7ff fe9e 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000bfe:	4b8e      	ldr	r3, [pc, #568]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c00:	4a8e      	ldr	r2, [pc, #568]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f7ff fe98 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c0c:	4a8d      	ldr	r2, [pc, #564]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f7ff fe92 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000c16:	4b8c      	ldr	r3, [pc, #560]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000c18:	4a8c      	ldr	r2, [pc, #560]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f7ff fe8c 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
 8000c22:	2200      	movs	r2, #0
 8000c24:	2300      	movs	r3, #0
 8000c26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint64_t misc_packed = 0;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623a      	str	r2, [r7, #32]
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t errors = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 8000c36:	250c      	movs	r5, #12
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	4a85      	ldr	r2, [pc, #532]	@ (8000e50 <Store_Single_Preset_In_Flash+0x26c>)
 8000c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8000c44:	f007 fe46 	bl	80088d4 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 8000c48:	231c      	movs	r3, #28
 8000c4a:	18fa      	adds	r2, r7, r3
 8000c4c:	197b      	adds	r3, r7, r5
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f007 fef3 	bl	8008a3c <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 8000c56:	1cfb      	adds	r3, r7, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d131      	bne.n	8000cc2 <Store_Single_Preset_In_Flash+0xde>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000c5e:	2428      	movs	r4, #40	@ 0x28
 8000c60:	193a      	adds	r2, r7, r4
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe0e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c70:	4970      	ldr	r1, [pc, #448]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000c72:	2001      	movs	r0, #1
 8000c74:	f007 fde0 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fe02 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c88:	496c      	ldr	r1, [pc, #432]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 fdd4 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fdf6 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	4968      	ldr	r1, [pc, #416]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f007 fdc8 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	4b67      	ldr	r3, [pc, #412]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fdea 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb8:	4964      	ldr	r1, [pc, #400]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f007 fdbc 	bl	8008838 <HAL_FLASH_Program>
 8000cc0:	e0a0      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 1){
 8000cc2:	1cfb      	adds	r3, r7, #3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d131      	bne.n	8000d2e <Store_Single_Preset_In_Flash+0x14a>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000cca:	2428      	movs	r4, #40	@ 0x28
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fdd8 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cdc:	4957      	ldr	r1, [pc, #348]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f007 fdaa 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000ce4:	193a      	adds	r2, r7, r4
 8000ce6:	4b52      	ldr	r3, [pc, #328]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fdcc 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf4:	494f      	ldr	r1, [pc, #316]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f007 fd9e 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000cfc:	193a      	adds	r2, r7, r4
 8000cfe:	4b50      	ldr	r3, [pc, #320]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fdc0 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0c:	494d      	ldr	r1, [pc, #308]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f007 fd92 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fdb4 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	4949      	ldr	r1, [pc, #292]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d26:	2001      	movs	r0, #1
 8000d28:	f007 fd86 	bl	8008838 <HAL_FLASH_Program>
 8000d2c:	e06a      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 2){
 8000d2e:	1cfb      	adds	r3, r7, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d131      	bne.n	8000d9a <Store_Single_Preset_In_Flash+0x1b6>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000d36:	2428      	movs	r4, #40	@ 0x28
 8000d38:	193a      	adds	r2, r7, r4
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fda2 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d48:	493e      	ldr	r1, [pc, #248]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f007 fd74 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000d50:	193a      	adds	r2, r7, r4
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fd96 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000d62:	2001      	movs	r0, #1
 8000d64:	f007 fd68 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fd8a 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d78:	4930      	ldr	r1, [pc, #192]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f007 fd5c 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d80:	193a      	adds	r2, r7, r4
 8000d82:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fd7e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	492e      	ldr	r1, [pc, #184]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d92:	2001      	movs	r0, #1
 8000d94:	f007 fd50 	bl	8008838 <HAL_FLASH_Program>
 8000d98:	e034      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 3){
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d130      	bne.n	8000e04 <Store_Single_Preset_In_Flash+0x220>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000da2:	2428      	movs	r4, #40	@ 0x28
 8000da4:	193a      	adds	r2, r7, r4
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fd6c 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db4:	4925      	ldr	r1, [pc, #148]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000db6:	2001      	movs	r0, #1
 8000db8:	f007 fd3e 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000dbc:	193a      	adds	r2, r7, r4
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff fd60 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	4919      	ldr	r1, [pc, #100]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 fd32 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fd54 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	4915      	ldr	r1, [pc, #84]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000de6:	2001      	movs	r0, #1
 8000de8:	f007 fd26 	bl	8008838 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000dec:	193a      	adds	r2, r7, r4
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fd48 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	4911      	ldr	r1, [pc, #68]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f007 fd1a 	bl	8008838 <HAL_FLASH_Program>
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 8000e04:	2320      	movs	r3, #32
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <Store_Single_Preset_In_Flash+0x270>)
 8000e0a:	4913      	ldr	r1, [pc, #76]	@ (8000e58 <Store_Single_Preset_In_Flash+0x274>)
 8000e0c:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <Store_Single_Preset_In_Flash+0x278>)
 8000e0e:	2404      	movs	r4, #4
 8000e10:	9400      	str	r4, [sp, #0]
 8000e12:	f7ff fdcb 	bl	80009ac <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	4911      	ldr	r1, [pc, #68]	@ (8000e60 <Store_Single_Preset_In_Flash+0x27c>)
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 fd0b 	bl	8008838 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000e22:	f007 fd7b 	bl	800891c <HAL_FLASH_Lock>

	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b00c      	add	sp, #48	@ 0x30
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	20000558 	.word	0x20000558
 8000e34:	0800f800 	.word	0x0800f800
 8000e38:	20000560 	.word	0x20000560
 8000e3c:	0800f808 	.word	0x0800f808
 8000e40:	20000568 	.word	0x20000568
 8000e44:	0800f810 	.word	0x0800f810
 8000e48:	20000570 	.word	0x20000570
 8000e4c:	0800f818 	.word	0x0800f818
 8000e50:	0800e208 	.word	0x0800e208
 8000e54:	20000582 	.word	0x20000582
 8000e58:	20000d00 	.word	0x20000d00
 8000e5c:	20000578 	.word	0x20000578
 8000e60:	0800f820 	.word	0x0800f820

08000e64 <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 8000e76:	2316      	movs	r3, #22
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000e7e:	231f      	movs	r3, #31
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e02c      	b.n	8000ee2 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 8000e88:	211f      	movs	r1, #31
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	2016      	movs	r0, #22
 8000e96:	183b      	adds	r3, r7, r0
 8000e98:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d106      	bne.n	8000eb2 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e011      	b.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000eb2:	2216      	movs	r2, #22
 8000eb4:	18bb      	adds	r3, r7, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d004      	beq.n	8000ec8 <Read_and_Interpret_Misc_From_Flash+0x64>
 8000ebe:	18bb      	adds	r3, r7, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000ec8:	231f      	movs	r3, #31
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000ed6:	211f      	movs	r1, #31
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	3201      	adds	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	18fa      	adds	r2, r7, r3
 8000ee6:	2128      	movs	r1, #40	@ 0x28
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3ca      	bcc.n	8000e88 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	2116      	movs	r1, #22
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0018      	movs	r0, r3
 8000f12:	f005 fd75 	bl	8006a00 <Clear_Status_Bit>
 8000f16:	e00f      	b.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000f18:	2216      	movs	r2, #22
 8000f1a:	18bb      	adds	r3, r7, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d004      	beq.n	8000f2e <Read_and_Interpret_Misc_From_Flash+0xca>
 8000f24:	18bb      	adds	r3, r7, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2bff      	cmp	r3, #255	@ 0xff
 8000f2c:	d104      	bne.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0018      	movs	r0, r3
 8000f34:	f005 fd52 	bl	80069dc <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000f38:	2328      	movs	r3, #40	@ 0x28
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	2116      	movs	r1, #22
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d107      	bne.n	8000f66 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	00da      	lsls	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f005 fd3c 	bl	80069dc <Set_Status_Bit>
 8000f64:	e011      	b.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000f66:	2216      	movs	r2, #22
 8000f68:	18bb      	adds	r3, r7, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <Read_and_Interpret_Misc_From_Flash+0x118>
 8000f72:	18bb      	adds	r3, r7, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d106      	bne.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	00da      	lsls	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f005 fd3b 	bl	8006a00 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000f8a:	2328      	movs	r3, #40	@ 0x28
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3302      	adds	r3, #2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	2116      	movs	r1, #22
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d908      	bls.n	8000fba <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000fa8:	2117      	movs	r1, #23
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	e005      	b.n	8000fc6 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000fba:	2316      	movs	r3, #22
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b008      	add	sp, #32
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000fde:	2317      	movs	r3, #23
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e03c      	b.n	8001062 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000fe8:	2117      	movs	r1, #23
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d112      	bne.n	8001020 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	187b      	adds	r3, r7, r1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	0013      	movs	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	001a      	movs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	189b      	adds	r3, r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	f7ff fb95 	bl	8000748 <Convert_All_Preset_Values>
 800101e:	e01a      	b.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8001020:	2117      	movs	r1, #23
 8001022:	187b      	adds	r3, r7, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d111      	bne.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8001032:	187b      	adds	r3, r7, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	0013      	movs	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	189b      	adds	r3, r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	001a      	movs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	189b      	adds	r3, r3, r2
 8001050:	0019      	movs	r1, r3
 8001052:	f7ff fb79 	bl	8000748 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8001056:	2117      	movs	r1, #23
 8001058:	187b      	adds	r3, r7, r1
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	3201      	adds	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	2317      	movs	r3, #23
 8001064:	18fa      	adds	r2, r7, r3
 8001066:	2320      	movs	r3, #32
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3ba      	bcc.n	8000fe8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}

0800107c <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f7ff fc57 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8001090:	0019      	movs	r1, r3
 8001092:	0010      	movs	r0, r2
 8001094:	f7ff fc51 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 800109a:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 800109c:	0019      	movs	r1, r3
 800109e:	0010      	movs	r0, r2
 80010a0:	f7ff fc4b 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 80010a8:	0019      	movs	r1, r3
 80010aa:	0010      	movs	r0, r2
 80010ac:	f7ff fc45 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	0800f800 	.word	0x0800f800
 80010c0:	20000008 	.word	0x20000008
 80010c4:	0800f808 	.word	0x0800f808
 80010c8:	20000010 	.word	0x20000010
 80010cc:	0800f810 	.word	0x0800f810
 80010d0:	20000018 	.word	0x20000018
 80010d4:	0800f818 	.word	0x0800f818

080010d8 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80010ea:	d803      	bhi.n	80010f4 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	719a      	strb	r2, [r3, #6]
 80010f2:	e011      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b55      	cmp	r3, #85	@ 0x55
 80010fc:	d803      	bhi.n	8001106 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	719a      	strb	r2, [r3, #6]
 8001104:	e008      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	db02      	blt.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	210e      	movs	r1, #14
 8001134:	187b      	adds	r3, r7, r1
 8001136:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8001138:	187b      	adds	r3, r7, r1
 800113a:	187a      	adds	r2, r7, r1
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	187a      	adds	r2, r7, r1
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	811a      	strh	r2, [r3, #8]

	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bd80      	pop	{r7, pc}

08001154 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	187a      	adds	r2, r7, r1
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	729a      	strb	r2, [r3, #10]

	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 800118e:	187a      	adds	r2, r7, r1
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	18db      	adds	r3, r3, r3
 8001196:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	819a      	strh	r2, [r3, #12]

	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 80011fe:	701a      	strb	r2, [r3, #0]

	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000438 	.word	0x20000438
 8001210:	2000057c 	.word	0x2000057c

08001214 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001224:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8001232:	705a      	strb	r2, [r3, #1]

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	20000430 	.word	0x20000430
 8001244:	2000057c 	.word	0x2000057c

08001248 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001258:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8001266:	709a      	strb	r2, [r3, #2]

	return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000434 	.word	0x20000434
 8001278:	2000057c 	.word	0x2000057c

0800127c <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 800128c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 800129a:	70da      	strb	r2, [r3, #3]

	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	2000043c 	.word	0x2000043c
 80012ac:	2000057c 	.word	0x2000057c

080012b0 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c0:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 80012ce:	711a      	strb	r2, [r3, #4]

	return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000440 	.word	0x20000440
 80012e0:	2000057c 	.word	0x2000057c

080012e4 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001300:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001310:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001314:	2203      	movs	r2, #3
 8001316:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001320:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001324:	2203      	movs	r2, #3
 8001326:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001330:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]

	return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000438 	.word	0x20000438
 8001344:	20000430 	.word	0x20000430
 8001348:	20000434 	.word	0x20000434
 800134c:	2000043c 	.word	0x2000043c
 8001350:	20000440 	.word	0x20000440

08001354 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	240f      	movs	r4, #15
 8001362:	193b      	adds	r3, r7, r4
 8001364:	1c02      	adds	r2, r0, #0
 8001366:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8001368:	2117      	movs	r1, #23
 800136a:	187b      	adds	r3, r7, r1
 800136c:	193a      	adds	r2, r7, r4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	3a01      	subs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fa02 	bl	800079a <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800139e:	2404      	movs	r4, #4
 80013a0:	9400      	str	r4, [sp, #0]
 80013a2:	f7ff fe15 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b007      	add	sp, #28
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <Set_to_PC_Mode>:

uint8_t Set_to_PC_Mode(enum Preset_Selected preset){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	0002      	movs	r2, r0
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	701a      	strb	r2, [r3, #0]

	preset_selected = preset;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <Set_to_PC_Mode+0x30>)
 80013be:	1dfa      	adds	r2, r7, #7
 80013c0:	7812      	ldrb	r2, [r2, #0]
 80013c2:	701a      	strb	r2, [r3, #0]
	Set_All_Pots_to_PC_Mode();
 80013c4:	f7ff ff8e 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
	Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <Set_to_PC_Mode+0x34>)
 80013ca:	2108      	movs	r1, #8
 80013cc:	0018      	movs	r0, r3
 80013ce:	f005 fb17 	bl	8006a00 <Clear_Status_Bit>
	Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 80013d2:	f7ff f8c9 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	return 1;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b002      	add	sp, #8
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20000554 	.word	0x20000554
 80013e4:	20000d00 	.word	0x20000d00

080013e8 <Set_LED_to_State>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t Set_LED_to_State(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	000a      	movs	r2, r1
 80013f2:	1cfb      	adds	r3, r7, #3
 80013f4:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM)
 80013f6:	1cfb      	adds	r3, r7, #3
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	2b07      	cmp	r3, #7
 80013fc:	d114      	bne.n	8001428 <Set_LED_to_State+0x40>
	{
		if(LED_fsm.current_state != LED_CONFIRM)
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <Set_LED_to_State+0xd0>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	b2db      	uxtb	r3, r3
 8001404:	2b07      	cmp	r3, #7
 8001406:	d026      	beq.n	8001456 <Set_LED_to_State+0x6e>
		{
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001408:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <Set_LED_to_State+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8001410:	4b2b      	ldr	r3, [pc, #172]	@ (80014c0 <Set_LED_to_State+0xd8>)
 8001412:	2296      	movs	r2, #150	@ 0x96
 8001414:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001416:	4b2b      	ldr	r3, [pc, #172]	@ (80014c4 <Set_LED_to_State+0xdc>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 800141c:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <Set_LED_to_State+0xd4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a27      	ldr	r2, [pc, #156]	@ (80014c0 <Set_LED_to_State+0xd8>)
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	635a      	str	r2, [r3, #52]	@ 0x34
 8001426:	e016      	b.n	8001456 <Set_LED_to_State+0x6e>
		}
	}
	else
	{
		if(LED_FSM_ptr->current_state != desired_state)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	1cfa      	adds	r2, r7, #3
 8001430:	7812      	ldrb	r2, [r2, #0]
 8001432:	429a      	cmp	r2, r3
 8001434:	d00f      	beq.n	8001456 <Set_LED_to_State+0x6e>
		{
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8001436:	4b21      	ldr	r3, [pc, #132]	@ (80014bc <Set_LED_to_State+0xd4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2200      	movs	r2, #0
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <Set_LED_to_State+0xd8>)
 8001440:	2296      	movs	r2, #150	@ 0x96
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <Set_LED_to_State+0xdc>)
 8001448:	2200      	movs	r2, #0
 800144a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <Set_LED_to_State+0xd4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a1b      	ldr	r2, [pc, #108]	@ (80014c0 <Set_LED_to_State+0xd8>)
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	if((desired_state != LED_OFF)
 8001456:	1cfb      	adds	r3, r7, #3
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d107      	bne.n	800146e <Set_LED_to_State+0x86>
			|| (desired_state != LED_ON)
 800145e:	1cfb      	adds	r3, r7, #3
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d103      	bne.n	800146e <Set_LED_to_State+0x86>
			|| (desired_state != LED_CONFIRM))
 8001466:	1cfb      	adds	r3, r7, #3
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b07      	cmp	r3, #7
 800146c:	d015      	beq.n	800149a <Set_LED_to_State+0xb2>
	{
		if(!((LED_fsm.prev_state == LED_OFF) || (LED_fsm.prev_state == LED_ON) || (LED_fsm.prev_state == LED_NONE)))
 800146e:	4b12      	ldr	r3, [pc, #72]	@ (80014b8 <Set_LED_to_State+0xd0>)
 8001470:	785b      	ldrb	r3, [r3, #1]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d010      	beq.n	800149a <Set_LED_to_State+0xb2>
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <Set_LED_to_State+0xd0>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d00b      	beq.n	800149a <Set_LED_to_State+0xb2>
 8001482:	4b0d      	ldr	r3, [pc, #52]	@ (80014b8 <Set_LED_to_State+0xd0>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b00      	cmp	r3, #0
 800148a:	d006      	beq.n	800149a <Set_LED_to_State+0xb2>
		{

			Set_Status_Bit(&statuses, LED_Pause_Timer_Is_Running);
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	01da      	lsls	r2, r3, #7
 8001490:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <Set_LED_to_State+0xe0>)
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f005 faa1 	bl	80069dc <Set_Status_Bit>
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1cfa      	adds	r2, r7, #3
 80014a8:	7812      	ldrb	r2, [r2, #0]
 80014aa:	701a      	strb	r2, [r3, #0]

	return 1;
 80014ac:	2301      	movs	r3, #1
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	20000448 	.word	0x20000448
 80014bc:	20000698 	.word	0x20000698
 80014c0:	20000020 	.word	0x20000020
 80014c4:	20000581 	.word	0x20000581
 80014c8:	20000d00 	.word	0x20000d00

080014cc <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 80014d4:	210f      	movs	r1, #15
 80014d6:	187b      	adds	r3, r7, r1
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	7812      	ldrb	r2, [r2, #0]
 80014dc:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	187a      	adds	r2, r7, r1
 80014e2:	7812      	ldrb	r2, [r2, #0]
 80014e4:	09d2      	lsrs	r2, r2, #7
 80014e6:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 80014e8:	187b      	adds	r3, r7, r1
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 80014f4:	2300      	movs	r3, #0
	}
}
 80014f6:	0018      	movs	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	b004      	add	sp, #16
 80014fc:	bd80      	pop	{r7, pc}

080014fe <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 80014fe:	b580      	push	{r7, lr}
 8001500:	b084      	sub	sp, #16
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8001506:	210f      	movs	r1, #15
 8001508:	187b      	adds	r3, r7, r1
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8001510:	187b      	adds	r3, r7, r1
 8001512:	187a      	adds	r2, r7, r1
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	09d2      	lsrs	r2, r2, #7
 8001518:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 800151a:	187b      	adds	r3, r7, r1
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8001526:	2301      	movs	r3, #1
	}
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}

08001530 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8001538:	210f      	movs	r1, #15
 800153a:	187b      	adds	r3, r7, r1
 800153c:	220c      	movs	r2, #12
 800153e:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	200e      	movs	r0, #14
 8001548:	183b      	adds	r3, r7, r0
 800154a:	0912      	lsrs	r2, r2, #4
 800154c:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 800154e:	183a      	adds	r2, r7, r0
 8001550:	187b      	adds	r3, r7, r1
 8001552:	7812      	ldrb	r2, [r2, #0]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d101      	bne.n	800155e <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 800155e:	2300      	movs	r3, #0
	}
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b004      	add	sp, #16
 8001566:	bd80      	pop	{r7, pc}

08001568 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8001570:	210f      	movs	r1, #15
 8001572:	187b      	adds	r3, r7, r1
 8001574:	220b      	movs	r2, #11
 8001576:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	200e      	movs	r0, #14
 8001580:	183b      	adds	r3, r7, r0
 8001582:	0912      	lsrs	r2, r2, #4
 8001584:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8001586:	183a      	adds	r2, r7, r0
 8001588:	187b      	adds	r3, r7, r1
 800158a:	7812      	ldrb	r2, [r2, #0]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d101      	bne.n	8001596 <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8001596:	2300      	movs	r3, #0
	}
}
 8001598:	0018      	movs	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	b004      	add	sp, #16
 800159e:	bd80      	pop	{r7, pc}

080015a0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b77      	cmp	r3, #119	@ 0x77
 80015b0:	d91d      	bls.n	80015ee <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b79      	cmp	r3, #121	@ 0x79
 80015ba:	d101      	bne.n	80015c0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 80015bc:	2301      	movs	r3, #1
 80015be:	e017      	b.n	80015f0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b7a      	cmp	r3, #122	@ 0x7a
 80015c8:	d101      	bne.n	80015ce <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e010      	b.n	80015f0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b7d      	cmp	r3, #125	@ 0x7d
 80015d6:	d101      	bne.n	80015dc <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 80015d8:	2301      	movs	r3, #1
 80015da:	e009      	b.n	80015f0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b7c      	cmp	r3, #124	@ 0x7c
 80015e4:	d101      	bne.n	80015ea <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e002      	b.n	80015f0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 80015ea:	2300      	movs	r3, #0
 80015ec:	e000      	b.n	80015f0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 80015ee:	2300      	movs	r3, #0
	}
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b77      	cmp	r3, #119	@ 0x77
 8001608:	d901      	bls.n	800160e <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 800160a:	2300      	movs	r3, #0
 800160c:	e023      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b14      	cmp	r3, #20
 8001616:	d101      	bne.n	800161c <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8001618:	2301      	movs	r3, #1
 800161a:	e01c      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b15      	cmp	r3, #21
 8001624:	d101      	bne.n	800162a <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8001626:	2301      	movs	r3, #1
 8001628:	e015      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b16      	cmp	r3, #22
 8001632:	d101      	bne.n	8001638 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8001634:	2301      	movs	r3, #1
 8001636:	e00e      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b17      	cmp	r3, #23
 8001640:	d101      	bne.n	8001646 <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8001642:	2301      	movs	r3, #1
 8001644:	e007      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b18      	cmp	r3, #24
 800164e:	d101      	bne.n	8001654 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8001654:	2300      	movs	r3, #0
		}
	}
}
 8001656:	0018      	movs	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	b002      	add	sp, #8
 800165c:	bd80      	pop	{r7, pc}

0800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b79      	cmp	r3, #121	@ 0x79
 8001670:	d108      	bne.n	8001684 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 800167c:	2301      	movs	r3, #1
 800167e:	e031      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001680:	2300      	movs	r3, #0
 8001682:	e02f      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	2b7a      	cmp	r3, #122	@ 0x7a
 800168c:	d10d      	bne.n	80016aa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a0:	d101      	bne.n	80016a6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e01e      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80016a6:	2300      	movs	r3, #0
 80016a8:	e01c      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b7c      	cmp	r3, #124	@ 0x7c
 80016b2:	d108      	bne.n	80016c6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 80016be:	2301      	movs	r3, #1
 80016c0:	e010      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e00e      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b7d      	cmp	r3, #125	@ 0x7d
 80016ce:	d108      	bne.n	80016e2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 80016da:	2301      	movs	r3, #1
 80016dc:	e002      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 80016e2:	2300      	movs	r3, #0
	}
}
 80016e4:	0018      	movs	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b002      	add	sp, #8
 80016ea:	bd80      	pop	{r7, pc}

080016ec <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2bf0      	cmp	r3, #240	@ 0xf0
 80016fc:	d101      	bne.n	8001702 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 80016fe:	2301      	movs	r3, #1
 8001700:	e000      	b.n	8001704 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001702:	2300      	movs	r3, #0
	}
}
 8001704:	0018      	movs	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	b002      	add	sp, #8
 800170a:	bd80      	pop	{r7, pc}

0800170c <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	000a      	movs	r2, r1
 8001716:	1cfb      	adds	r3, r7, #3
 8001718:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	200f      	movs	r0, #15
 8001722:	183b      	adds	r3, r7, r0
 8001724:	210f      	movs	r1, #15
 8001726:	400a      	ands	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800172a:	210e      	movs	r1, #14
 800172c:	187b      	adds	r3, r7, r1
 800172e:	1cfa      	adds	r2, r7, #3
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001734:	183a      	adds	r2, r7, r0
 8001736:	187b      	adds	r3, r7, r1
 8001738:	7812      	ldrb	r2, [r2, #0]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	d101      	bne.n	8001744 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001740:	2301      	movs	r3, #1
 8001742:	e000      	b.n	8001746 <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001744:	2300      	movs	r3, #0
	}
}
 8001746:	0018      	movs	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	b004      	add	sp, #16
 800174c:	bd80      	pop	{r7, pc}

0800174e <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 8001756:	230e      	movs	r3, #14
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	2200      	movs	r2, #0
 800175c:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800175e:	230d      	movs	r3, #13
 8001760:	18fb      	adds	r3, r7, r3
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	e011      	b.n	800178c <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 8001768:	200d      	movs	r0, #13
 800176a:	183b      	adds	r3, r7, r0
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	0019      	movs	r1, r3
 8001776:	220e      	movs	r2, #14
 8001778:	18bb      	adds	r3, r7, r2
 800177a:	18ba      	adds	r2, r7, r2
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	188a      	adds	r2, r1, r2
 8001780:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001782:	183b      	adds	r3, r7, r0
 8001784:	781a      	ldrb	r2, [r3, #0]
 8001786:	183b      	adds	r3, r7, r0
 8001788:	3201      	adds	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
 800178c:	230d      	movs	r3, #13
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d9e8      	bls.n	8001768 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 8001796:	230e      	movs	r3, #14
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80017a4:	2300      	movs	r3, #0
	}
}
 80017a6:	0018      	movs	r0, r3
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}

080017ae <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80017b6:	230f      	movs	r3, #15
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
 80017be:	e00a      	b.n	80017d6 <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 80017c0:	200f      	movs	r0, #15
 80017c2:	183b      	adds	r3, r7, r0
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	2100      	movs	r1, #0
 80017ca:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80017cc:	183b      	adds	r3, r7, r0
 80017ce:	781a      	ldrb	r2, [r3, #0]
 80017d0:	183b      	adds	r3, r7, r0
 80017d2:	3201      	adds	r2, #1
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	230f      	movs	r3, #15
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b09      	cmp	r3, #9
 80017de:	d9ef      	bls.n	80017c0 <Clear_Data_Buffer+0x12>
	}

	return 1;
 80017e0:	2301      	movs	r3, #1
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b004      	add	sp, #16
 80017e8:	bd80      	pop	{r7, pc}

080017ea <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	000a      	movs	r2, r1
 80017f4:	1cfb      	adds	r3, r7, #3
 80017f6:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	1cfa      	adds	r2, r7, #3
 8001800:	7812      	ldrb	r2, [r2, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d901      	bls.n	800180a <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800180a:	2300      	movs	r3, #0
	}
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b002      	add	sp, #8
 8001812:	bd80      	pop	{r7, pc}

08001814 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2bf8      	cmp	r3, #248	@ 0xf8
 8001824:	d101      	bne.n	800182a <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 8001826:	2301      	movs	r3, #1
 8001828:	e023      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2bfa      	cmp	r3, #250	@ 0xfa
 8001832:	d101      	bne.n	8001838 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001834:	2301      	movs	r3, #1
 8001836:	e01c      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001840:	d101      	bne.n	8001846 <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001842:	2301      	movs	r3, #1
 8001844:	e015      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2bfc      	cmp	r3, #252	@ 0xfc
 800184e:	d101      	bne.n	8001854 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001850:	2301      	movs	r3, #1
 8001852:	e00e      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2bfe      	cmp	r3, #254	@ 0xfe
 800185c:	d101      	bne.n	8001862 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 800185e:	2301      	movs	r3, #1
 8001860:	e007      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2bff      	cmp	r3, #255	@ 0xff
 800186a:	d101      	bne.n	8001870 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 800186c:	2301      	movs	r3, #1
 800186e:	e000      	b.n	8001872 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001870:	2300      	movs	r3, #0
	}
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}

0800187a <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800187a:	b5b0      	push	{r4, r5, r7, lr}
 800187c:	b084      	sub	sp, #16
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001882:	250f      	movs	r5, #15
 8001884:	197c      	adds	r4, r7, r5
 8001886:	2380      	movs	r3, #128	@ 0x80
 8001888:	00da      	lsls	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	0011      	movs	r1, r2
 800188e:	0018      	movs	r0, r3
 8001890:	f005 f890 	bl	80069b4 <Get_Status_Bit>
 8001894:	0003      	movs	r3, r0
 8001896:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 8001898:	197b      	adds	r3, r7, r5
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80018a4:	2300      	movs	r3, #0
	}
}
 80018a6:	0018      	movs	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bdb0      	pop	{r4, r5, r7, pc}

080018ae <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	005a      	lsls	r2, r3, #1
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	0011      	movs	r1, r2
 80018c0:	0018      	movs	r0, r3
 80018c2:	f005 f89d 	bl	8006a00 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	009a      	lsls	r2, r3, #2
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	0011      	movs	r1, r2
 80018ce:	0018      	movs	r0, r3
 80018d0:	f005 f896 	bl	8006a00 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]

	return 1;
 80018da:	2301      	movs	r3, #1
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <Reset_All_Controllers+0x9c>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <Reset_All_Controllers+0x9c>)
 80018f6:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80018f8:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <Reset_All_Controllers+0xa0>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4b21      	ldr	r3, [pc, #132]	@ (8001984 <Reset_All_Controllers+0xa0>)
 8001900:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001902:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <Reset_All_Controllers+0xa4>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <Reset_All_Controllers+0xa4>)
 800190a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <Reset_All_Controllers+0xa8>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4b1e      	ldr	r3, [pc, #120]	@ (800198c <Reset_All_Controllers+0xa8>)
 8001914:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001916:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <Reset_All_Controllers+0xac>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	b2da      	uxtb	r2, r3
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <Reset_All_Controllers+0xac>)
 800191e:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001920:	4b17      	ldr	r3, [pc, #92]	@ (8001980 <Reset_All_Controllers+0x9c>)
 8001922:	2202      	movs	r2, #2
 8001924:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001926:	4b17      	ldr	r3, [pc, #92]	@ (8001984 <Reset_All_Controllers+0xa0>)
 8001928:	2202      	movs	r2, #2
 800192a:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <Reset_All_Controllers+0xa4>)
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001932:	4b16      	ldr	r3, [pc, #88]	@ (800198c <Reset_All_Controllers+0xa8>)
 8001934:	2202      	movs	r2, #2
 8001936:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 8001938:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <Reset_All_Controllers+0xac>)
 800193a:	2202      	movs	r2, #2
 800193c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 800193e:	230e      	movs	r3, #14
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	223f      	movs	r2, #63	@ 0x3f
 8001944:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001946:	230f      	movs	r3, #15
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	2200      	movs	r2, #0
 800194c:	701a      	strb	r2, [r3, #0]
 800194e:	e00c      	b.n	800196a <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001950:	200f      	movs	r0, #15
 8001952:	183b      	adds	r3, r7, r0
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	4a0f      	ldr	r2, [pc, #60]	@ (8001994 <Reset_All_Controllers+0xb0>)
 8001958:	210e      	movs	r1, #14
 800195a:	1879      	adds	r1, r7, r1
 800195c:	7809      	ldrb	r1, [r1, #0]
 800195e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001960:	183b      	adds	r3, r7, r0
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	183b      	adds	r3, r7, r0
 8001966:	3201      	adds	r2, #1
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	230f      	movs	r3, #15
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b04      	cmp	r3, #4
 8001972:	d9ed      	bls.n	8001950 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b004      	add	sp, #16
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	20000438 	.word	0x20000438
 8001984:	20000430 	.word	0x20000430
 8001988:	20000434 	.word	0x20000434
 800198c:	2000043c 	.word	0x2000043c
 8001990:	20000440 	.word	0x20000440
 8001994:	2000057c 	.word	0x2000057c

08001998 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800199c:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <Set_Local_Control+0x5c>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <Set_Local_Control+0x5c>)
 80019a4:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <Set_Local_Control+0x60>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	b2da      	uxtb	r2, r3
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <Set_Local_Control+0x60>)
 80019ae:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80019b0:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <Set_Local_Control+0x64>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <Set_Local_Control+0x64>)
 80019b8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80019ba:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <Set_Local_Control+0x68>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <Set_Local_Control+0x68>)
 80019c2:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a04 <Set_Local_Control+0x6c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001a04 <Set_Local_Control+0x6c>)
 80019cc:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <Set_Local_Control+0x5c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <Set_Local_Control+0x60>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <Set_Local_Control+0x64>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 80019e0:	4b07      	ldr	r3, [pc, #28]	@ (8001a00 <Set_Local_Control+0x68>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <Set_Local_Control+0x6c>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	701a      	strb	r2, [r3, #0]

	return 1;
 80019ec:	2301      	movs	r3, #1
}
 80019ee:	0018      	movs	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000438 	.word	0x20000438
 80019f8:	20000430 	.word	0x20000430
 80019fc:	20000434 	.word	0x20000434
 8001a00:	2000043c 	.word	0x2000043c
 8001a04:	20000440 	.word	0x20000440

08001a08 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	00da      	lsls	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	0011      	movs	r1, r2
 8001a18:	0018      	movs	r0, r3
 8001a1a:	f004 fff1 	bl	8006a00 <Clear_Status_Bit>

	return 1;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	00da      	lsls	r2, r3, #3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0011      	movs	r1, r2
 8001a38:	0018      	movs	r0, r3
 8001a3a:	f004 ffcf 	bl	80069dc <Set_Status_Bit>

	return 1;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	0018      	movs	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	b002      	add	sp, #8
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001a4c:	4904      	ldr	r1, [pc, #16]	@ (8001a60 <Start_UART_Receive+0x18>)
 8001a4e:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <Start_UART_Receive+0x1c>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	0018      	movs	r0, r3
 8001a54:	f00b f86a 	bl	800cb2c <HAL_UART_Receive_DMA>

	return 1;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000594 	.word	0x20000594
 8001a64:	20000b00 	.word	0x20000b00

08001a68 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	000a      	movs	r2, r1
 8001a72:	1cfb      	adds	r3, r7, #3
 8001a74:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 8001a86:	2117      	movs	r1, #23
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 8001a96:	1cfb      	adds	r3, r7, #3
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d10d      	bne.n	8001aba <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c54 <Pot_Check+0x1ec>)
 8001aa0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001aa2:	4b6d      	ldr	r3, [pc, #436]	@ (8001c58 <Pot_Check+0x1f0>)
 8001aa4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8001aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8001c5c <Pot_Check+0x1f4>)
 8001aa8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	2264      	movs	r2, #100	@ 0x64
 8001ab2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c60 <Pot_Check+0x1f8>)
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	e04e      	b.n	8001b58 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8001aba:	1cfb      	adds	r3, r7, #3
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10f      	bne.n	8001ae2 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001ac2:	4b68      	ldr	r3, [pc, #416]	@ (8001c64 <Pot_Check+0x1fc>)
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001ac6:	4b68      	ldr	r3, [pc, #416]	@ (8001c68 <Pot_Check+0x200>)
 8001ac8:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001aca:	4b68      	ldr	r3, [pc, #416]	@ (8001c6c <Pot_Check+0x204>)
 8001acc:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001ad4:	2317      	movs	r3, #23
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	2264      	movs	r2, #100	@ 0x64
 8001ada:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001adc:	4b64      	ldr	r3, [pc, #400]	@ (8001c70 <Pot_Check+0x208>)
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	e03a      	b.n	8001b58 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001ae2:	1cfb      	adds	r3, r7, #3
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d10f      	bne.n	8001b0a <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8001aea:	4b62      	ldr	r3, [pc, #392]	@ (8001c74 <Pot_Check+0x20c>)
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8001aee:	4b62      	ldr	r3, [pc, #392]	@ (8001c78 <Pot_Check+0x210>)
 8001af0:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001af2:	4b62      	ldr	r3, [pc, #392]	@ (8001c7c <Pot_Check+0x214>)
 8001af4:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3304      	adds	r3, #4
 8001afa:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001afc:	2317      	movs	r3, #23
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	2264      	movs	r2, #100	@ 0x64
 8001b02:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001b04:	4b5e      	ldr	r3, [pc, #376]	@ (8001c80 <Pot_Check+0x218>)
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	e026      	b.n	8001b58 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8001b0a:	1cfb      	adds	r3, r7, #3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d10f      	bne.n	8001b32 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001b12:	4b5c      	ldr	r3, [pc, #368]	@ (8001c84 <Pot_Check+0x21c>)
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001b16:	4b5c      	ldr	r3, [pc, #368]	@ (8001c88 <Pot_Check+0x220>)
 8001b18:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8001b1a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c8c <Pot_Check+0x224>)
 8001b1c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3306      	adds	r3, #6
 8001b22:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001b24:	2317      	movs	r3, #23
 8001b26:	18fb      	adds	r3, r7, r3
 8001b28:	2264      	movs	r2, #100	@ 0x64
 8001b2a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001b2c:	4b58      	ldr	r3, [pc, #352]	@ (8001c90 <Pot_Check+0x228>)
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	e012      	b.n	8001b58 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001b32:	1cfb      	adds	r3, r7, #3
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d10e      	bne.n	8001b58 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 8001b3a:	4b56      	ldr	r3, [pc, #344]	@ (8001c94 <Pot_Check+0x22c>)
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001b3e:	4b56      	ldr	r3, [pc, #344]	@ (8001c98 <Pot_Check+0x230>)
 8001b40:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001b42:	4b56      	ldr	r3, [pc, #344]	@ (8001c9c <Pot_Check+0x234>)
 8001b44:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001b4c:	2317      	movs	r3, #23
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2264      	movs	r2, #100	@ 0x64
 8001b52:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001b54:	4b52      	ldr	r3, [pc, #328]	@ (8001ca0 <Pot_Check+0x238>)
 8001b56:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881a      	ldrh	r2, [r3, #0]
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	701a      	strb	r2, [r3, #0]
 8001b78:	e066      	b.n	8001c48 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10b      	bne.n	8001b9c <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	881a      	ldrh	r2, [r3, #0]
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	701a      	strb	r2, [r3, #0]
 8001b9a:	e055      	b.n	8001c48 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d150      	bne.n	8001c48 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001bac:	200a      	movs	r0, #10
 8001bae:	183b      	adds	r3, r7, r0
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	881a      	ldrh	r2, [r3, #0]
 8001bb8:	6a3b      	ldr	r3, [r7, #32]
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d907      	bls.n	8001bd0 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	8819      	ldrh	r1, [r3, #0]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	183b      	adds	r3, r7, r0
 8001bca:	1a8a      	subs	r2, r1, r2
 8001bcc:	801a      	strh	r2, [r3, #0]
 8001bce:	e00d      	b.n	8001bec <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001bd0:	6a3b      	ldr	r3, [r7, #32]
 8001bd2:	881a      	ldrh	r2, [r3, #0]
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d907      	bls.n	8001bec <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	8819      	ldrh	r1, [r3, #0]
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	230a      	movs	r3, #10
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	1a8a      	subs	r2, r1, r2
 8001bea:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001bec:	2317      	movs	r3, #23
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	220a      	movs	r2, #10
 8001bf6:	18ba      	adds	r2, r7, r2
 8001bf8:	8812      	ldrh	r2, [r2, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d924      	bls.n	8001c48 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
 8001c14:	e018      	b.n	8001c48 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d015      	beq.n	8001c48 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2201      	movs	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <Pot_Check+0x23c>)
 8001c2c:	2120      	movs	r1, #32
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f004 fee6 	bl	8006a00 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001c34:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca4 <Pot_Check+0x23c>)
 8001c36:	2140      	movs	r1, #64	@ 0x40
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f004 fee1 	bl	8006a00 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001c3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <Pot_Check+0x23c>)
 8001c40:	2108      	movs	r1, #8
 8001c42:	0018      	movs	r0, r3
 8001c44:	f004 fedc 	bl	8006a00 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001c48:	2301      	movs	r3, #1
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b00a      	add	sp, #40	@ 0x28
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			@ (mov r8, r8)
 8001c54:	2000059c 	.word	0x2000059c
 8001c58:	2000059e 	.word	0x2000059e
 8001c5c:	20000595 	.word	0x20000595
 8001c60:	20000438 	.word	0x20000438
 8001c64:	200005a0 	.word	0x200005a0
 8001c68:	200005a2 	.word	0x200005a2
 8001c6c:	20000596 	.word	0x20000596
 8001c70:	20000430 	.word	0x20000430
 8001c74:	200005a4 	.word	0x200005a4
 8001c78:	200005a6 	.word	0x200005a6
 8001c7c:	20000597 	.word	0x20000597
 8001c80:	20000434 	.word	0x20000434
 8001c84:	200005a8 	.word	0x200005a8
 8001c88:	200005aa 	.word	0x200005aa
 8001c8c:	20000598 	.word	0x20000598
 8001c90:	2000043c 	.word	0x2000043c
 8001c94:	200005ac 	.word	0x200005ac
 8001c98:	200005ae 	.word	0x200005ae
 8001c9c:	20000599 	.word	0x20000599
 8001ca0:	20000440 	.word	0x20000440
 8001ca4:	20000d00 	.word	0x20000d00

08001ca8 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001cb0:	250f      	movs	r5, #15
 8001cb2:	197c      	adds	r4, r7, r5
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	00da      	lsls	r2, r3, #3
 8001cb8:	23a0      	movs	r3, #160	@ 0xa0
 8001cba:	05db      	lsls	r3, r3, #23
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f007 f8c4 	bl	8008e4c <HAL_GPIO_ReadPin>
 8001cc4:	0003      	movs	r3, r0
 8001cc6:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001cc8:	197b      	adds	r3, r7, r5
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d01e      	beq.n	8001d16 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001cd8:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ce2:	701a      	strb	r2, [r3, #0]
 8001ce4:	e017      	b.n	8001d16 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001ce6:	4b16      	ldr	r3, [pc, #88]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b0e      	cmp	r3, #14
 8001cec:	d013      	beq.n	8001d16 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d109      	bne.n	8001d0a <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001d00:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	e005      	b.n	8001d16 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001d14:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001d16:	4b0a      	ldr	r3, [pc, #40]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e006      	b.n	8001d34 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001d26:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <Check_Tap_Tempo_Switch_State+0x98>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b0e      	cmp	r3, #14
 8001d2c:	d102      	bne.n	8001d34 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001d34:	2301      	movs	r3, #1
}
 8001d36:	0018      	movs	r0, r3
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3e:	46c0      	nop			@ (mov r8, r8)
 8001d40:	20000024 	.word	0x20000024
 8001d44:	200005b0 	.word	0x200005b0

08001d48 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b093      	sub	sp, #76	@ 0x4c
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	2410      	movs	r4, #16
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	0018      	movs	r0, r3
 8001d54:	2338      	movs	r3, #56	@ 0x38
 8001d56:	001a      	movs	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f00c fa09 	bl	800e170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5e:	003b      	movs	r3, r7
 8001d60:	0018      	movs	r0, r3
 8001d62:	2310      	movs	r3, #16
 8001d64:	001a      	movs	r2, r3
 8001d66:	2100      	movs	r1, #0
 8001d68:	f00c fa02 	bl	800e170 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	0018      	movs	r0, r3
 8001d72:	f007 fcdd 	bl	8009730 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d76:	193b      	adds	r3, r7, r4
 8001d78:	2202      	movs	r2, #2
 8001d7a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d7c:	193b      	adds	r3, r7, r4
 8001d7e:	2280      	movs	r2, #128	@ 0x80
 8001d80:	0052      	lsls	r2, r2, #1
 8001d82:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d84:	0021      	movs	r1, r4
 8001d86:	187b      	adds	r3, r7, r1
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d8c:	187b      	adds	r3, r7, r1
 8001d8e:	2240      	movs	r2, #64	@ 0x40
 8001d90:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d92:	187b      	adds	r3, r7, r1
 8001d94:	2202      	movs	r2, #2
 8001d96:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2200      	movs	r2, #0
 8001da2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2208      	movs	r2, #8
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	0292      	lsls	r2, r2, #10
 8001db0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001db2:	187b      	adds	r3, r7, r1
 8001db4:	22c0      	movs	r2, #192	@ 0xc0
 8001db6:	04d2      	lsls	r2, r2, #19
 8001db8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dba:	187b      	adds	r3, r7, r1
 8001dbc:	2280      	movs	r2, #128	@ 0x80
 8001dbe:	0592      	lsls	r2, r2, #22
 8001dc0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f007 fcff 	bl	80097c8 <HAL_RCC_OscConfig>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d001      	beq.n	8001dd2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001dce:	f000 fdcb 	bl	8002968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd2:	003b      	movs	r3, r7
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dd8:	003b      	movs	r3, r7
 8001dda:	2202      	movs	r2, #2
 8001ddc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dde:	003b      	movs	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de4:	003b      	movs	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dea:	003b      	movs	r3, r7
 8001dec:	2102      	movs	r1, #2
 8001dee:	0018      	movs	r0, r3
 8001df0:	f008 f804 	bl	8009dfc <HAL_RCC_ClockConfig>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001df8:	f000 fdb6 	bl	8002968 <Error_Handler>
  }
}
 8001dfc:	46c0      	nop			@ (mov r8, r8)
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b013      	add	sp, #76	@ 0x4c
 8001e02:	bd90      	pop	{r4, r7, pc}

08001e04 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	230c      	movs	r3, #12
 8001e10:	001a      	movs	r2, r3
 8001e12:	2100      	movs	r1, #0
 8001e14:	f00c f9ac 	bl	800e170 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e18:	4b54      	ldr	r3, [pc, #336]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e1a:	4a55      	ldr	r2, [pc, #340]	@ (8001f70 <MX_ADC1_Init+0x16c>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e1e:	4b53      	ldr	r3, [pc, #332]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e20:	2280      	movs	r2, #128	@ 0x80
 8001e22:	05d2      	lsls	r2, r2, #23
 8001e24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e26:	4b51      	ldr	r3, [pc, #324]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001e32:	4b4e      	ldr	r3, [pc, #312]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e34:	2280      	movs	r2, #128	@ 0x80
 8001e36:	0392      	lsls	r2, r2, #14
 8001e38:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001e3a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001e40:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001e46:	4b49      	ldr	r3, [pc, #292]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e4c:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001e52:	4b46      	ldr	r3, [pc, #280]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e54:	2205      	movs	r2, #5
 8001e56:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e58:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e60:	4b42      	ldr	r3, [pc, #264]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e66:	4b41      	ldr	r3, [pc, #260]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e6e:	222c      	movs	r2, #44	@ 0x2c
 8001e70:	2100      	movs	r1, #0
 8001e72:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e74:	4b3d      	ldr	r3, [pc, #244]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001e80:	4b3a      	ldr	r3, [pc, #232]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001e86:	4b39      	ldr	r3, [pc, #228]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e88:	223c      	movs	r2, #60	@ 0x3c
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001e8e:	4b37      	ldr	r3, [pc, #220]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e94:	4b35      	ldr	r3, [pc, #212]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f004 ffe0 	bl	8006e5c <HAL_ADC_Init>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001ea0:	f000 fd62 	bl	8002968 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2200      	movs	r2, #0
 8001eae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eb6:	1d3a      	adds	r2, r7, #4
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f005 fb51 	bl	8007564 <HAL_ADC_ConfigChannel>
 8001ec2:	1e03      	subs	r3, r0, #0
 8001ec4:	d001      	beq.n	8001eca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001ec6:	f000 fd4f 	bl	8002968 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eca:	1d3b      	adds	r3, r7, #4
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <MX_ADC1_Init+0x170>)
 8001ece:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2204      	movs	r2, #4
 8001ed4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ed6:	1d3b      	adds	r3, r7, #4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001edc:	1d3a      	adds	r2, r7, #4
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001ee0:	0011      	movs	r1, r2
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	f005 fb3e 	bl	8007564 <HAL_ADC_ConfigChannel>
 8001ee8:	1e03      	subs	r3, r0, #0
 8001eea:	d001      	beq.n	8001ef0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001eec:	f000 fd3c 	bl	8002968 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <MX_ADC1_Init+0x174>)
 8001ef4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2208      	movs	r2, #8
 8001efa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f02:	1d3a      	adds	r2, r7, #4
 8001f04:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001f06:	0011      	movs	r1, r2
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f005 fb2b 	bl	8007564 <HAL_ADC_ConfigChannel>
 8001f0e:	1e03      	subs	r3, r0, #0
 8001f10:	d001      	beq.n	8001f16 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001f12:	f000 fd29 	bl	8002968 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <MX_ADC1_Init+0x178>)
 8001f1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	220c      	movs	r2, #12
 8001f20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f28:	1d3a      	adds	r2, r7, #4
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001f2c:	0011      	movs	r1, r2
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f005 fb18 	bl	8007564 <HAL_ADC_ConfigChannel>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d001      	beq.n	8001f3c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001f38:	f000 fd16 	bl	8002968 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4a10      	ldr	r2, [pc, #64]	@ (8001f80 <MX_ADC1_Init+0x17c>)
 8001f40:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2210      	movs	r2, #16
 8001f46:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f4e:	1d3a      	adds	r2, r7, #4
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_ADC1_Init+0x168>)
 8001f52:	0011      	movs	r1, r2
 8001f54:	0018      	movs	r0, r3
 8001f56:	f005 fb05 	bl	8007564 <HAL_ADC_ConfigChannel>
 8001f5a:	1e03      	subs	r3, r0, #0
 8001f5c:	d001      	beq.n	8001f62 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001f5e:	f000 fd03 	bl	8002968 <Error_Handler>
  }
}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	200005b4 	.word	0x200005b4
 8001f70:	40012400 	.word	0x40012400
 8001f74:	04000002 	.word	0x04000002
 8001f78:	10000010 	.word	0x10000010
 8001f7c:	14000020 	.word	0x14000020
 8001f80:	18000040 	.word	0x18000040

08001f84 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b094      	sub	sp, #80	@ 0x50
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f8a:	2334      	movs	r3, #52	@ 0x34
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	0018      	movs	r0, r3
 8001f90:	231c      	movs	r3, #28
 8001f92:	001a      	movs	r2, r3
 8001f94:	2100      	movs	r1, #0
 8001f96:	f00c f8eb 	bl	800e170 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f9a:	003b      	movs	r3, r7
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	2334      	movs	r3, #52	@ 0x34
 8001fa0:	001a      	movs	r2, r3
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f00c f8e4 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001faa:	4a3b      	ldr	r2, [pc, #236]	@ (8002098 <MX_TIM16_Init+0x114>)
 8001fac:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001fae:	4b39      	ldr	r3, [pc, #228]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb4:	4b37      	ldr	r3, [pc, #220]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001fba:	4b36      	ldr	r3, [pc, #216]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fbc:	22ff      	movs	r2, #255	@ 0xff
 8001fbe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001fc0:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fc2:	2280      	movs	r2, #128	@ 0x80
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fc8:	4b32      	ldr	r3, [pc, #200]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fce:	4b31      	ldr	r3, [pc, #196]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f008 fa34 	bl	800a444 <HAL_TIM_Base_Init>
 8001fdc:	1e03      	subs	r3, r0, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001fe0:	f000 fcc2 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <MX_TIM16_Init+0x110>)
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	f008 fb32 	bl	800a650 <HAL_TIM_OC_Init>
 8001fec:	1e03      	subs	r3, r0, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001ff0:	f000 fcba 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001ff4:	2134      	movs	r1, #52	@ 0x34
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001ffc:	187b      	adds	r3, r7, r1
 8001ffe:	22ff      	movs	r2, #255	@ 0xff
 8002000:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002002:	187b      	adds	r3, r7, r1
 8002004:	2200      	movs	r2, #0
 8002006:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002008:	187b      	adds	r3, r7, r1
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2200      	movs	r2, #0
 8002012:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2200      	movs	r2, #0
 8002018:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800201a:	187b      	adds	r3, r7, r1
 800201c:	2200      	movs	r2, #0
 800201e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002020:	1879      	adds	r1, r7, r1
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <MX_TIM16_Init+0x110>)
 8002024:	2200      	movs	r2, #0
 8002026:	0018      	movs	r0, r3
 8002028:	f009 f986 	bl	800b338 <HAL_TIM_OC_ConfigChannel>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8002030:	f000 fc9a 	bl	8002968 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <MX_TIM16_Init+0x110>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_TIM16_Init+0x110>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2108      	movs	r1, #8
 8002040:	438a      	bics	r2, r1
 8002042:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002044:	003b      	movs	r3, r7
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800204a:	003b      	movs	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002050:	003b      	movs	r3, r7
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002056:	003b      	movs	r3, r7
 8002058:	2200      	movs	r2, #0
 800205a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800205c:	003b      	movs	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002062:	003b      	movs	r3, r7
 8002064:	2280      	movs	r2, #128	@ 0x80
 8002066:	0192      	lsls	r2, r2, #6
 8002068:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800206a:	003b      	movs	r3, r7
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002070:	003b      	movs	r3, r7
 8002072:	2200      	movs	r2, #0
 8002074:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002076:	003a      	movs	r2, r7
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <MX_TIM16_Init+0x110>)
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f00a fb81 	bl	800c784 <HAL_TIMEx_ConfigBreakDeadTime>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d001      	beq.n	800208a <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8002086:	f000 fc6f 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b014      	add	sp, #80	@ 0x50
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	20000810 	.word	0x20000810
 8002098:	40014400 	.word	0x40014400

0800209c <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	@ 0x30
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020a2:	2320      	movs	r3, #32
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	0018      	movs	r0, r3
 80020a8:	2310      	movs	r3, #16
 80020aa:	001a      	movs	r2, r3
 80020ac:	2100      	movs	r1, #0
 80020ae:	f00c f85f 	bl	800e170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	2314      	movs	r3, #20
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	0018      	movs	r0, r3
 80020b8:	230c      	movs	r3, #12
 80020ba:	001a      	movs	r2, r3
 80020bc:	2100      	movs	r1, #0
 80020be:	f00c f857 	bl	800e170 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020c2:	1d3b      	adds	r3, r7, #4
 80020c4:	0018      	movs	r0, r3
 80020c6:	2310      	movs	r3, #16
 80020c8:	001a      	movs	r2, r3
 80020ca:	2100      	movs	r1, #0
 80020cc:	f00c f850 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020d2:	2280      	movs	r2, #128	@ 0x80
 80020d4:	05d2      	lsls	r2, r2, #23
 80020d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 80020d8:	4b2c      	ldr	r3, [pc, #176]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020da:	223f      	movs	r2, #63	@ 0x3f
 80020dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80020e4:	4b29      	ldr	r3, [pc, #164]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002190 <MX_TIM2_Init+0xf4>)
 80020e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80020ea:	4b28      	ldr	r3, [pc, #160]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f2:	4b26      	ldr	r3, [pc, #152]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020f4:	2280      	movs	r2, #128	@ 0x80
 80020f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020f8:	4b24      	ldr	r3, [pc, #144]	@ (800218c <MX_TIM2_Init+0xf0>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f008 f9a2 	bl	800a444 <HAL_TIM_Base_Init>
 8002100:	1e03      	subs	r3, r0, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002104:	f000 fc30 	bl	8002968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002108:	2120      	movs	r1, #32
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2280      	movs	r2, #128	@ 0x80
 800210e:	0152      	lsls	r2, r2, #5
 8002110:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002112:	187a      	adds	r2, r7, r1
 8002114:	4b1d      	ldr	r3, [pc, #116]	@ (800218c <MX_TIM2_Init+0xf0>)
 8002116:	0011      	movs	r1, r2
 8002118:	0018      	movs	r0, r3
 800211a:	f009 fb11 	bl	800b740 <HAL_TIM_ConfigClockSource>
 800211e:	1e03      	subs	r3, r0, #0
 8002120:	d001      	beq.n	8002126 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002122:	f000 fc21 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002126:	4b19      	ldr	r3, [pc, #100]	@ (800218c <MX_TIM2_Init+0xf0>)
 8002128:	0018      	movs	r0, r3
 800212a:	f008 fe3d 	bl	800ada8 <HAL_TIM_IC_Init>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d001      	beq.n	8002136 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002132:	f000 fc19 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002136:	2114      	movs	r1, #20
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002144:	187a      	adds	r2, r7, r1
 8002146:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_TIM2_Init+0xf0>)
 8002148:	0011      	movs	r1, r2
 800214a:	0018      	movs	r0, r3
 800214c:	f00a fab2 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	1e03      	subs	r3, r0, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002154:	f000 fc08 	bl	8002968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800215e:	1d3b      	adds	r3, r7, #4
 8002160:	2201      	movs	r2, #1
 8002162:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 800216a:	1d3b      	adds	r3, r7, #4
 800216c:	220f      	movs	r2, #15
 800216e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002170:	1d39      	adds	r1, r7, #4
 8002172:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_TIM2_Init+0xf0>)
 8002174:	2200      	movs	r2, #0
 8002176:	0018      	movs	r0, r3
 8002178:	f009 f93e 	bl	800b3f8 <HAL_TIM_IC_ConfigChannel>
 800217c:	1e03      	subs	r3, r0, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002180:	f000 fbf2 	bl	8002968 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	b00c      	add	sp, #48	@ 0x30
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200008cc 	.word	0x200008cc
 8002190:	001fffff 	.word	0x001fffff

08002194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08e      	sub	sp, #56	@ 0x38
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	2328      	movs	r3, #40	@ 0x28
 800219c:	18fb      	adds	r3, r7, r3
 800219e:	0018      	movs	r0, r3
 80021a0:	2310      	movs	r3, #16
 80021a2:	001a      	movs	r2, r3
 80021a4:	2100      	movs	r1, #0
 80021a6:	f00b ffe3 	bl	800e170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021aa:	231c      	movs	r3, #28
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	0018      	movs	r0, r3
 80021b0:	230c      	movs	r3, #12
 80021b2:	001a      	movs	r2, r3
 80021b4:	2100      	movs	r1, #0
 80021b6:	f00b ffdb 	bl	800e170 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ba:	003b      	movs	r3, r7
 80021bc:	0018      	movs	r0, r3
 80021be:	231c      	movs	r3, #28
 80021c0:	001a      	movs	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	f00b ffd4 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021ca:	4a33      	ldr	r2, [pc, #204]	@ (8002298 <MX_TIM3_Init+0x104>)
 80021cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 80021ce:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021d0:	4a32      	ldr	r2, [pc, #200]	@ (800229c <MX_TIM3_Init+0x108>)
 80021d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 80021da:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021dc:	4a30      	ldr	r2, [pc, #192]	@ (80022a0 <MX_TIM3_Init+0x10c>)
 80021de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021e2:	2280      	movs	r2, #128	@ 0x80
 80021e4:	0092      	lsls	r2, r2, #2
 80021e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021e8:	4b2a      	ldr	r3, [pc, #168]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021ea:	2280      	movs	r2, #128	@ 0x80
 80021ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021ee:	4b29      	ldr	r3, [pc, #164]	@ (8002294 <MX_TIM3_Init+0x100>)
 80021f0:	0018      	movs	r0, r3
 80021f2:	f008 f927 	bl	800a444 <HAL_TIM_Base_Init>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80021fa:	f000 fbb5 	bl	8002968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fe:	2128      	movs	r1, #40	@ 0x28
 8002200:	187b      	adds	r3, r7, r1
 8002202:	2280      	movs	r2, #128	@ 0x80
 8002204:	0152      	lsls	r2, r2, #5
 8002206:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002208:	187a      	adds	r2, r7, r1
 800220a:	4b22      	ldr	r3, [pc, #136]	@ (8002294 <MX_TIM3_Init+0x100>)
 800220c:	0011      	movs	r1, r2
 800220e:	0018      	movs	r0, r3
 8002210:	f009 fa96 	bl	800b740 <HAL_TIM_ConfigClockSource>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d001      	beq.n	800221c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002218:	f000 fba6 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800221c:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <MX_TIM3_Init+0x100>)
 800221e:	0018      	movs	r0, r3
 8002220:	f008 fa16 	bl	800a650 <HAL_TIM_OC_Init>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d001      	beq.n	800222c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002228:	f000 fb9e 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	211c      	movs	r1, #28
 800222e:	187b      	adds	r3, r7, r1
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002234:	187b      	adds	r3, r7, r1
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800223a:	187a      	adds	r2, r7, r1
 800223c:	4b15      	ldr	r3, [pc, #84]	@ (8002294 <MX_TIM3_Init+0x100>)
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f00a fa37 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002246:	1e03      	subs	r3, r0, #0
 8002248:	d001      	beq.n	800224e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800224a:	f000 fb8d 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800224e:	003b      	movs	r3, r7
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002254:	003b      	movs	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800225a:	003b      	movs	r3, r7
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002260:	003b      	movs	r3, r7
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002266:	0039      	movs	r1, r7
 8002268:	4b0a      	ldr	r3, [pc, #40]	@ (8002294 <MX_TIM3_Init+0x100>)
 800226a:	2200      	movs	r2, #0
 800226c:	0018      	movs	r0, r3
 800226e:	f009 f863 	bl	800b338 <HAL_TIM_OC_ConfigChannel>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d001      	beq.n	800227a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8002276:	f000 fb77 	bl	8002968 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 800227a:	4b06      	ldr	r3, [pc, #24]	@ (8002294 <MX_TIM3_Init+0x100>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699a      	ldr	r2, [r3, #24]
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <MX_TIM3_Init+0x100>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2108      	movs	r1, #8
 8002286:	438a      	bics	r2, r1
 8002288:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	46bd      	mov	sp, r7
 800228e:	b00e      	add	sp, #56	@ 0x38
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	20000988 	.word	0x20000988
 8002298:	40000400 	.word	0x40000400
 800229c:	00007fff 	.word	0x00007fff
 80022a0:	00000fff 	.word	0x00000fff

080022a4 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b09c      	sub	sp, #112	@ 0x70
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022aa:	2360      	movs	r3, #96	@ 0x60
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	0018      	movs	r0, r3
 80022b0:	2310      	movs	r3, #16
 80022b2:	001a      	movs	r2, r3
 80022b4:	2100      	movs	r1, #0
 80022b6:	f00b ff5b 	bl	800e170 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ba:	2354      	movs	r3, #84	@ 0x54
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	0018      	movs	r0, r3
 80022c0:	230c      	movs	r3, #12
 80022c2:	001a      	movs	r2, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	f00b ff53 	bl	800e170 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ca:	2338      	movs	r3, #56	@ 0x38
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	0018      	movs	r0, r3
 80022d0:	231c      	movs	r3, #28
 80022d2:	001a      	movs	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	f00b ff4b 	bl	800e170 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022da:	1d3b      	adds	r3, r7, #4
 80022dc:	0018      	movs	r0, r3
 80022de:	2334      	movs	r3, #52	@ 0x34
 80022e0:	001a      	movs	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f00b ff44 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80022ea:	4a60      	ldr	r2, [pc, #384]	@ (800246c <MX_TIM1_Init+0x1c8>)
 80022ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f4:	4b5c      	ldr	r3, [pc, #368]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 80022fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80022fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002470 <MX_TIM1_Init+0x1cc>)
 80022fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	0052      	lsls	r2, r2, #1
 8002306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002308:	4b57      	ldr	r3, [pc, #348]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 800230a:	2200      	movs	r2, #0
 800230c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800230e:	4b56      	ldr	r3, [pc, #344]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002314:	4b54      	ldr	r3, [pc, #336]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002316:	0018      	movs	r0, r3
 8002318:	f008 f894 	bl	800a444 <HAL_TIM_Base_Init>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8002320:	f000 fb22 	bl	8002968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002324:	2160      	movs	r1, #96	@ 0x60
 8002326:	187b      	adds	r3, r7, r1
 8002328:	2280      	movs	r2, #128	@ 0x80
 800232a:	0152      	lsls	r2, r2, #5
 800232c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800232e:	187a      	adds	r2, r7, r1
 8002330:	4b4d      	ldr	r3, [pc, #308]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002332:	0011      	movs	r1, r2
 8002334:	0018      	movs	r0, r3
 8002336:	f009 fa03 	bl	800b740 <HAL_TIM_ConfigClockSource>
 800233a:	1e03      	subs	r3, r0, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800233e:	f000 fb13 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002342:	4b49      	ldr	r3, [pc, #292]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002344:	0018      	movs	r0, r3
 8002346:	f008 fbe3 	bl	800ab10 <HAL_TIM_PWM_Init>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 800234e:	f000 fb0b 	bl	8002968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002352:	2154      	movs	r1, #84	@ 0x54
 8002354:	187b      	adds	r3, r7, r1
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800235a:	187b      	adds	r3, r7, r1
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002360:	187b      	adds	r3, r7, r1
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002366:	187a      	adds	r2, r7, r1
 8002368:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 800236a:	0011      	movs	r1, r2
 800236c:	0018      	movs	r0, r3
 800236e:	f00a f9a1 	bl	800c6b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002372:	1e03      	subs	r3, r0, #0
 8002374:	d001      	beq.n	800237a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002376:	f000 faf7 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800237a:	2138      	movs	r1, #56	@ 0x38
 800237c:	187b      	adds	r3, r7, r1
 800237e:	2260      	movs	r2, #96	@ 0x60
 8002380:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002382:	187b      	adds	r3, r7, r1
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002388:	187b      	adds	r3, r7, r1
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800238e:	187b      	adds	r3, r7, r1
 8002390:	2200      	movs	r2, #0
 8002392:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002394:	187b      	adds	r3, r7, r1
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800239a:	187b      	adds	r3, r7, r1
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023a6:	1879      	adds	r1, r7, r1
 80023a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023aa:	2204      	movs	r2, #4
 80023ac:	0018      	movs	r0, r3
 80023ae:	f009 f8c7 	bl	800b540 <HAL_TIM_PWM_ConfigChannel>
 80023b2:	1e03      	subs	r3, r0, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80023b6:	f000 fad7 	bl	8002968 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	4b29      	ldr	r3, [pc, #164]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	492b      	ldr	r1, [pc, #172]	@ (8002474 <MX_TIM1_Init+0x1d0>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ca:	2338      	movs	r3, #56	@ 0x38
 80023cc:	18f9      	adds	r1, r7, r3
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023d0:	220c      	movs	r2, #12
 80023d2:	0018      	movs	r0, r3
 80023d4:	f009 f8b4 	bl	800b540 <HAL_TIM_PWM_ConfigChannel>
 80023d8:	1e03      	subs	r3, r0, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80023dc:	f000 fac4 	bl	8002968 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 80023e0:	4b21      	ldr	r3, [pc, #132]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69da      	ldr	r2, [r3, #28]
 80023e6:	4b20      	ldr	r3, [pc, #128]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4922      	ldr	r1, [pc, #136]	@ (8002474 <MX_TIM1_Init+0x1d0>)
 80023ec:	400a      	ands	r2, r1
 80023ee:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023f6:	1d3b      	adds	r3, r7, #4
 80023f8:	2200      	movs	r2, #0
 80023fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023fc:	1d3b      	adds	r3, r7, #4
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002402:	1d3b      	adds	r3, r7, #4
 8002404:	2200      	movs	r2, #0
 8002406:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002408:	1d3b      	adds	r3, r7, #4
 800240a:	2200      	movs	r2, #0
 800240c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800240e:	1d3b      	adds	r3, r7, #4
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	0192      	lsls	r2, r2, #6
 8002414:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2200      	movs	r2, #0
 8002420:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002422:	1d3b      	adds	r3, r7, #4
 8002424:	2200      	movs	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2280      	movs	r2, #128	@ 0x80
 800242c:	0492      	lsls	r2, r2, #18
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	2200      	movs	r2, #0
 800243a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243c:	1d3b      	adds	r3, r7, #4
 800243e:	2200      	movs	r2, #0
 8002440:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002442:	1d3a      	adds	r2, r7, #4
 8002444:	4b08      	ldr	r3, [pc, #32]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002446:	0011      	movs	r1, r2
 8002448:	0018      	movs	r0, r3
 800244a:	f00a f99b 	bl	800c784 <HAL_TIMEx_ConfigBreakDeadTime>
 800244e:	1e03      	subs	r3, r0, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8002452:	f000 fa89 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002456:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <MX_TIM1_Init+0x1c4>)
 8002458:	0018      	movs	r0, r3
 800245a:	f003 fc57 	bl	8005d0c <HAL_TIM_MspPostInit>

}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	46bd      	mov	sp, r7
 8002462:	b01c      	add	sp, #112	@ 0x70
 8002464:	bd80      	pop	{r7, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	20000a44 	.word	0x20000a44
 800246c:	40012c00 	.word	0x40012c00
 8002470:	000003ff 	.word	0x000003ff
 8002474:	fffff7ff 	.word	0xfffff7ff

08002478 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b094      	sub	sp, #80	@ 0x50
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800247e:	2334      	movs	r3, #52	@ 0x34
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	0018      	movs	r0, r3
 8002484:	231c      	movs	r3, #28
 8002486:	001a      	movs	r2, r3
 8002488:	2100      	movs	r1, #0
 800248a:	f00b fe71 	bl	800e170 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800248e:	003b      	movs	r3, r7
 8002490:	0018      	movs	r0, r3
 8002492:	2334      	movs	r3, #52	@ 0x34
 8002494:	001a      	movs	r2, r3
 8002496:	2100      	movs	r1, #0
 8002498:	f00b fe6a 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800249c:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <MX_TIM17_Init+0x110>)
 800249e:	4a3b      	ldr	r2, [pc, #236]	@ (800258c <MX_TIM17_Init+0x114>)
 80024a0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002590 <MX_TIM17_Init+0x118>)
 80024a6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a8:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 80024ae:	4b36      	ldr	r3, [pc, #216]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024b0:	4a38      	ldr	r2, [pc, #224]	@ (8002594 <MX_TIM17_Init+0x11c>)
 80024b2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80024b4:	4b34      	ldr	r3, [pc, #208]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024bc:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024be:	2200      	movs	r2, #0
 80024c0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024c2:	4b31      	ldr	r3, [pc, #196]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024c4:	2280      	movs	r2, #128	@ 0x80
 80024c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024ca:	0018      	movs	r0, r3
 80024cc:	f007 ffba 	bl	800a444 <HAL_TIM_Base_Init>
 80024d0:	1e03      	subs	r3, r0, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80024d4:	f000 fa48 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 80024d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <MX_TIM17_Init+0x110>)
 80024da:	0018      	movs	r0, r3
 80024dc:	f008 f8b8 	bl	800a650 <HAL_TIM_OC_Init>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80024e4:	f000 fa40 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80024e8:	2134      	movs	r1, #52	@ 0x34
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	4a29      	ldr	r2, [pc, #164]	@ (8002598 <MX_TIM17_Init+0x120>)
 80024f4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	2200      	movs	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024fc:	187b      	adds	r3, r7, r1
 80024fe:	2200      	movs	r2, #0
 8002500:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002508:	187b      	adds	r3, r7, r1
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002514:	1879      	adds	r1, r7, r1
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <MX_TIM17_Init+0x110>)
 8002518:	2200      	movs	r2, #0
 800251a:	0018      	movs	r0, r3
 800251c:	f008 ff0c 	bl	800b338 <HAL_TIM_OC_ConfigChannel>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8002524:	f000 fa20 	bl	8002968 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <MX_TIM17_Init+0x110>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	699a      	ldr	r2, [r3, #24]
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <MX_TIM17_Init+0x110>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2108      	movs	r1, #8
 8002534:	430a      	orrs	r2, r1
 8002536:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002538:	003b      	movs	r3, r7
 800253a:	2200      	movs	r2, #0
 800253c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800253e:	003b      	movs	r3, r7
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002544:	003b      	movs	r3, r7
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800254a:	003b      	movs	r3, r7
 800254c:	2200      	movs	r2, #0
 800254e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002550:	003b      	movs	r3, r7
 8002552:	2200      	movs	r2, #0
 8002554:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002556:	003b      	movs	r3, r7
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	0192      	lsls	r2, r2, #6
 800255c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800255e:	003b      	movs	r3, r7
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002564:	003b      	movs	r3, r7
 8002566:	2200      	movs	r2, #0
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800256a:	003a      	movs	r2, r7
 800256c:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <MX_TIM17_Init+0x110>)
 800256e:	0011      	movs	r1, r2
 8002570:	0018      	movs	r0, r3
 8002572:	f00a f907 	bl	800c784 <HAL_TIMEx_ConfigBreakDeadTime>
 8002576:	1e03      	subs	r3, r0, #0
 8002578:	d001      	beq.n	800257e <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 800257a:	f000 f9f5 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b014      	add	sp, #80	@ 0x50
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000754 	.word	0x20000754
 800258c:	40014800 	.word	0x40014800
 8002590:	00007fff 	.word	0x00007fff
 8002594:	000003ff 	.word	0x000003ff
 8002598:	000001ff 	.word	0x000001ff

0800259c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025a2:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <MX_LPTIM1_Init+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 80025ac:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025ae:	22e0      	movs	r2, #224	@ 0xe0
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025b6:	4a14      	ldr	r2, [pc, #80]	@ (8002608 <MX_LPTIM1_Init+0x6c>)
 80025b8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	03d2      	lsls	r2, r2, #15
 80025c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80025c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <MX_LPTIM1_Init+0x64>)
 80025dc:	0018      	movs	r0, r3
 80025de:	f006 fc99 	bl	8008f14 <HAL_LPTIM_Init>
 80025e2:	1e03      	subs	r3, r0, #0
 80025e4:	d001      	beq.n	80025ea <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 80025e6:	f000 f9bf 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 80025ea:	2202      	movs	r2, #2
 80025ec:	2102      	movs	r1, #2
 80025ee:	2011      	movs	r0, #17
 80025f0:	f005 fdc2 	bl	8008178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80025f4:	2011      	movs	r0, #17
 80025f6:	f005 fdd4 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 80025fa:	46c0      	nop			@ (mov r8, r8)
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20000c84 	.word	0x20000c84
 8002604:	40007c00 	.word	0x40007c00
 8002608:	0000ffff 	.word	0x0000ffff

0800260c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	0018      	movs	r0, r3
 8002616:	231c      	movs	r3, #28
 8002618:	001a      	movs	r2, r3
 800261a:	2100      	movs	r1, #0
 800261c:	f00b fda8 	bl	800e170 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002620:	4b1f      	ldr	r3, [pc, #124]	@ (80026a0 <MX_TIM14_Init+0x94>)
 8002622:	4a20      	ldr	r2, [pc, #128]	@ (80026a4 <MX_TIM14_Init+0x98>)
 8002624:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8002626:	4b1e      	ldr	r3, [pc, #120]	@ (80026a0 <MX_TIM14_Init+0x94>)
 8002628:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <MX_TIM14_Init+0x9c>)
 800262a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262c:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <MX_TIM14_Init+0x94>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8002632:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <MX_TIM14_Init+0xa0>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b1a      	ldr	r3, [pc, #104]	@ (80026a0 <MX_TIM14_Init+0x94>)
 8002638:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <MX_TIM14_Init+0x94>)
 800263c:	2280      	movs	r2, #128	@ 0x80
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b17      	ldr	r3, [pc, #92]	@ (80026a0 <MX_TIM14_Init+0x94>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002648:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <MX_TIM14_Init+0x94>)
 800264a:	0018      	movs	r0, r3
 800264c:	f007 fefa 	bl	800a444 <HAL_TIM_Base_Init>
 8002650:	1e03      	subs	r3, r0, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002654:	f000 f988 	bl	8002968 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8002658:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <MX_TIM14_Init+0x94>)
 800265a:	0018      	movs	r0, r3
 800265c:	f007 fff8 	bl	800a650 <HAL_TIM_OC_Init>
 8002660:	1e03      	subs	r3, r0, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002664:	f000 f980 	bl	8002968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 800266e:	4b0f      	ldr	r3, [pc, #60]	@ (80026ac <MX_TIM14_Init+0xa0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800267e:	1d3b      	adds	r3, r7, #4
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002684:	1d39      	adds	r1, r7, #4
 8002686:	4b06      	ldr	r3, [pc, #24]	@ (80026a0 <MX_TIM14_Init+0x94>)
 8002688:	2200      	movs	r2, #0
 800268a:	0018      	movs	r0, r3
 800268c:	f008 fe54 	bl	800b338 <HAL_TIM_OC_ConfigChannel>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002694:	f000 f968 	bl	8002968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002698:	46c0      	nop			@ (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b008      	add	sp, #32
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20000698 	.word	0x20000698
 80026a4:	40002000 	.word	0x40002000
 80026a8:	00007fff 	.word	0x00007fff
 80026ac:	20000020 	.word	0x20000020

080026b0 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 80026b4:	4b15      	ldr	r3, [pc, #84]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026b6:	4a16      	ldr	r2, [pc, #88]	@ (8002710 <MX_USART2_UART_Init+0x60>)
 80026b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026bc:	4a15      	ldr	r2, [pc, #84]	@ (8002714 <MX_USART2_UART_Init+0x64>)
 80026be:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026c6:	4b11      	ldr	r3, [pc, #68]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026cc:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026d4:	220c      	movs	r2, #12
 80026d6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d8:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026de:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026e4:	4b09      	ldr	r3, [pc, #36]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026f0:	4b06      	ldr	r3, [pc, #24]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <MX_USART2_UART_Init+0x5c>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f00a f8ff 	bl	800c8fc <HAL_UART_Init>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002702:	f000 f931 	bl	8002968 <Error_Handler>
  }
}
 8002706:	46c0      	nop			@ (mov r8, r8)
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000b00 	.word	0x20000b00
 8002710:	40004400 	.word	0x40004400
 8002714:	00007a12 	.word	0x00007a12

08002718 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <MX_DMA_Init+0x48>)
 8002720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002722:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <MX_DMA_Init+0x48>)
 8002724:	2101      	movs	r1, #1
 8002726:	430a      	orrs	r2, r1
 8002728:	639a      	str	r2, [r3, #56]	@ 0x38
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <MX_DMA_Init+0x48>)
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002736:	2200      	movs	r2, #0
 8002738:	2100      	movs	r1, #0
 800273a:	2009      	movs	r0, #9
 800273c:	f005 fd1c 	bl	8008178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002740:	2009      	movs	r0, #9
 8002742:	f005 fd2e 	bl	80081a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8002746:	2202      	movs	r2, #2
 8002748:	2102      	movs	r1, #2
 800274a:	200a      	movs	r0, #10
 800274c:	f005 fd14 	bl	8008178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002750:	200a      	movs	r0, #10
 8002752:	f005 fd26 	bl	80081a2 <HAL_NVIC_EnableIRQ>

}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	40021000 	.word	0x40021000

08002764 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002764:	b590      	push	{r4, r7, lr}
 8002766:	b08b      	sub	sp, #44	@ 0x2c
 8002768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276a:	2414      	movs	r4, #20
 800276c:	193b      	adds	r3, r7, r4
 800276e:	0018      	movs	r0, r3
 8002770:	2314      	movs	r3, #20
 8002772:	001a      	movs	r2, r3
 8002774:	2100      	movs	r1, #0
 8002776:	f00b fcfb 	bl	800e170 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800277a:	4b77      	ldr	r3, [pc, #476]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 800277c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800277e:	4b76      	ldr	r3, [pc, #472]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 8002780:	2104      	movs	r1, #4
 8002782:	430a      	orrs	r2, r1
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34
 8002786:	4b74      	ldr	r3, [pc, #464]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 8002788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800278a:	2204      	movs	r2, #4
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002792:	4b71      	ldr	r3, [pc, #452]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 8002794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002796:	4b70      	ldr	r3, [pc, #448]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 8002798:	2120      	movs	r1, #32
 800279a:	430a      	orrs	r2, r1
 800279c:	635a      	str	r2, [r3, #52]	@ 0x34
 800279e:	4b6e      	ldr	r3, [pc, #440]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a2:	2220      	movs	r2, #32
 80027a4:	4013      	ands	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027aa:	4b6b      	ldr	r3, [pc, #428]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027b0:	2101      	movs	r1, #1
 80027b2:	430a      	orrs	r2, r1
 80027b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80027b6:	4b68      	ldr	r3, [pc, #416]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ba:	2201      	movs	r2, #1
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027c6:	4b64      	ldr	r3, [pc, #400]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027c8:	2102      	movs	r1, #2
 80027ca:	430a      	orrs	r2, r1
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80027ce:	4b62      	ldr	r3, [pc, #392]	@ (8002958 <MX_GPIO_Init+0x1f4>)
 80027d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d2:	2202      	movs	r2, #2
 80027d4:	4013      	ands	r3, r2
 80027d6:	607b      	str	r3, [r7, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80027da:	4b60      	ldr	r3, [pc, #384]	@ (800295c <MX_GPIO_Init+0x1f8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	2140      	movs	r1, #64	@ 0x40
 80027e0:	0018      	movs	r0, r3
 80027e2:	f006 fb50 	bl	8008e86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	2204      	movs	r2, #4
 80027ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ec:	193b      	adds	r3, r7, r4
 80027ee:	2288      	movs	r2, #136	@ 0x88
 80027f0:	0352      	lsls	r2, r2, #13
 80027f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f4:	193b      	adds	r3, r7, r4
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80027fa:	193b      	adds	r3, r7, r4
 80027fc:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <MX_GPIO_Init+0x1fc>)
 80027fe:	0019      	movs	r1, r3
 8002800:	0010      	movs	r0, r2
 8002802:	f006 f9bf 	bl	8008b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8002806:	0021      	movs	r1, r4
 8002808:	193b      	adds	r3, r7, r4
 800280a:	2280      	movs	r2, #128	@ 0x80
 800280c:	0092      	lsls	r2, r2, #2
 800280e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002810:	000c      	movs	r4, r1
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2201      	movs	r2, #1
 8002816:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2200      	movs	r2, #0
 800281c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	2200      	movs	r2, #0
 8002822:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002824:	193a      	adds	r2, r7, r4
 8002826:	23a0      	movs	r3, #160	@ 0xa0
 8002828:	05db      	lsls	r3, r3, #23
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f006 f9a9 	bl	8008b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002832:	193b      	adds	r3, r7, r4
 8002834:	2240      	movs	r2, #64	@ 0x40
 8002836:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002838:	193b      	adds	r3, r7, r4
 800283a:	2201      	movs	r2, #1
 800283c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283e:	193b      	adds	r3, r7, r4
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002844:	193b      	adds	r3, r7, r4
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800284a:	193b      	adds	r3, r7, r4
 800284c:	4a43      	ldr	r2, [pc, #268]	@ (800295c <MX_GPIO_Init+0x1f8>)
 800284e:	0019      	movs	r1, r3
 8002850:	0010      	movs	r0, r2
 8002852:	f006 f997 	bl	8008b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 8002856:	193b      	adds	r3, r7, r4
 8002858:	2280      	movs	r2, #128	@ 0x80
 800285a:	00d2      	lsls	r2, r2, #3
 800285c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800285e:	193b      	adds	r3, r7, r4
 8002860:	2200      	movs	r2, #0
 8002862:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002864:	193b      	adds	r3, r7, r4
 8002866:	2201      	movs	r2, #1
 8002868:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800286a:	193a      	adds	r2, r7, r4
 800286c:	23a0      	movs	r3, #160	@ 0xa0
 800286e:	05db      	lsls	r3, r3, #23
 8002870:	0011      	movs	r1, r2
 8002872:	0018      	movs	r0, r3
 8002874:	f006 f986 	bl	8008b84 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 8002878:	193b      	adds	r3, r7, r4
 800287a:	2240      	movs	r2, #64	@ 0x40
 800287c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800287e:	193b      	adds	r3, r7, r4
 8002880:	2201      	movs	r2, #1
 8002882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	193b      	adds	r3, r7, r4
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288a:	193b      	adds	r3, r7, r4
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002890:	193b      	adds	r3, r7, r4
 8002892:	4a34      	ldr	r2, [pc, #208]	@ (8002964 <MX_GPIO_Init+0x200>)
 8002894:	0019      	movs	r1, r3
 8002896:	0010      	movs	r0, r2
 8002898:	f006 f974 	bl	8008b84 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 800289c:	193b      	adds	r3, r7, r4
 800289e:	2210      	movs	r2, #16
 80028a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a2:	193b      	adds	r3, r7, r4
 80028a4:	2201      	movs	r2, #1
 80028a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	193b      	adds	r3, r7, r4
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	193b      	adds	r3, r7, r4
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 80028b4:	193b      	adds	r3, r7, r4
 80028b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002964 <MX_GPIO_Init+0x200>)
 80028b8:	0019      	movs	r1, r3
 80028ba:	0010      	movs	r0, r2
 80028bc:	f006 f962 	bl	8008b84 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80028c0:	0021      	movs	r1, r4
 80028c2:	187b      	adds	r3, r7, r1
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80028c8:	187b      	adds	r3, r7, r1
 80028ca:	22c4      	movs	r2, #196	@ 0xc4
 80028cc:	0392      	lsls	r2, r2, #14
 80028ce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80028d0:	000c      	movs	r4, r1
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	2202      	movs	r2, #2
 80028d6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80028de:	193b      	adds	r3, r7, r4
 80028e0:	4a20      	ldr	r2, [pc, #128]	@ (8002964 <MX_GPIO_Init+0x200>)
 80028e2:	0019      	movs	r1, r3
 80028e4:	0010      	movs	r0, r2
 80028e6:	f006 f94d 	bl	8008b84 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 80028ea:	0021      	movs	r1, r4
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	2280      	movs	r2, #128	@ 0x80
 80028f0:	0152      	lsls	r2, r2, #5
 80028f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f4:	000c      	movs	r4, r1
 80028f6:	193b      	adds	r3, r7, r4
 80028f8:	2201      	movs	r2, #1
 80028fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	193b      	adds	r3, r7, r4
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002902:	193b      	adds	r3, r7, r4
 8002904:	2200      	movs	r2, #0
 8002906:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002908:	193a      	adds	r2, r7, r4
 800290a:	23a0      	movs	r3, #160	@ 0xa0
 800290c:	05db      	lsls	r3, r3, #23
 800290e:	0011      	movs	r1, r2
 8002910:	0018      	movs	r0, r3
 8002912:	f006 f937 	bl	8008b84 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002916:	0021      	movs	r1, r4
 8002918:	187b      	adds	r3, r7, r1
 800291a:	2280      	movs	r2, #128	@ 0x80
 800291c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291e:	187b      	adds	r3, r7, r1
 8002920:	2201      	movs	r2, #1
 8002922:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	187b      	adds	r3, r7, r1
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 8002930:	187a      	adds	r2, r7, r1
 8002932:	23a0      	movs	r3, #160	@ 0xa0
 8002934:	05db      	lsls	r3, r3, #23
 8002936:	0011      	movs	r1, r2
 8002938:	0018      	movs	r0, r3
 800293a:	f006 f923 	bl	8008b84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800293e:	2202      	movs	r2, #2
 8002940:	2102      	movs	r1, #2
 8002942:	2007      	movs	r0, #7
 8002944:	f005 fc18 	bl	8008178 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002948:	2007      	movs	r0, #7
 800294a:	f005 fc2a 	bl	80081a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b00b      	add	sp, #44	@ 0x2c
 8002954:	bd90      	pop	{r4, r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	40021000 	.word	0x40021000
 800295c:	50000800 	.word	0x50000800
 8002960:	50001400 	.word	0x50001400
 8002964:	50000400 	.word	0x50000400

08002968 <Error_Handler>:

void Error_Handler(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002970:	46c0      	nop			@ (mov r8, r8)
 8002972:	e7fd      	b.n	8002970 <Error_Handler+0x8>

08002974 <System_Init>:
  {

  }
}

void System_Init(void){
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002978:	f004 f880 	bl	8006a7c <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800297c:	f7ff f9e4 	bl	8001d48 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002980:	f7ff fef0 	bl	8002764 <MX_GPIO_Init>
	MX_DMA_Init();
 8002984:	f7ff fec8 	bl	8002718 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002988:	f7ff fe92 	bl	80026b0 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800298c:	f7ff fa3a 	bl	8001e04 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002990:	f7ff faf8 	bl	8001f84 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002994:	f7ff fb82 	bl	800209c <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002998:	f7ff fbfc 	bl	8002194 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800299c:	f7ff fc82 	bl	80022a4 <MX_TIM1_Init>
	MX_TIM17_Init();
 80029a0:	f7ff fd6a 	bl	8002478 <MX_TIM17_Init>
	MX_TIM14_Init();
 80029a4:	f7ff fe32 	bl	800260c <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80029a8:	f7ff fdf8 	bl	800259c <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80029ac:	4b21      	ldr	r3, [pc, #132]	@ (8002a34 <System_Init+0xc0>)
 80029ae:	0018      	movs	r0, r3
 80029b0:	f005 fa00 	bl	8007db4 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80029b4:	4a20      	ldr	r2, [pc, #128]	@ (8002a38 <System_Init+0xc4>)
 80029b6:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <System_Init+0xc8>)
 80029b8:	210e      	movs	r1, #14
 80029ba:	0018      	movs	r0, r3
 80029bc:	f009 f81a 	bl	800b9f4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80029c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a40 <System_Init+0xcc>)
 80029c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <System_Init+0xc0>)
 80029c4:	2100      	movs	r1, #0
 80029c6:	0018      	movs	r0, r3
 80029c8:	f004 fc20 	bl	800720c <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80029cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <System_Init+0xd0>)
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <System_Init+0xd4>)
 80029d0:	2112      	movs	r1, #18
 80029d2:	0018      	movs	r0, r3
 80029d4:	f009 f80e 	bl	800b9f4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 80029d8:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <System_Init+0xd8>)
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <System_Init+0xd4>)
 80029dc:	210e      	movs	r1, #14
 80029de:	0018      	movs	r0, r3
 80029e0:	f009 f808 	bl	800b9f4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 80029e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a50 <System_Init+0xdc>)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <System_Init+0xe0>)
 80029e8:	2114      	movs	r1, #20
 80029ea:	0018      	movs	r0, r3
 80029ec:	f009 f802 	bl	800b9f4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 80029f0:	4a19      	ldr	r2, [pc, #100]	@ (8002a58 <System_Init+0xe4>)
 80029f2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a5c <System_Init+0xe8>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	0018      	movs	r0, r3
 80029f8:	f009 ffe8 	bl	800c9cc <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 80029fc:	4a18      	ldr	r2, [pc, #96]	@ (8002a60 <System_Init+0xec>)
 80029fe:	4b17      	ldr	r3, [pc, #92]	@ (8002a5c <System_Init+0xe8>)
 8002a00:	2103      	movs	r1, #3
 8002a02:	0018      	movs	r0, r3
 8002a04:	f009 ffe2 	bl	800c9cc <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002a08:	4a16      	ldr	r2, [pc, #88]	@ (8002a64 <System_Init+0xf0>)
 8002a0a:	4b17      	ldr	r3, [pc, #92]	@ (8002a68 <System_Init+0xf4>)
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f006 fca6 	bl	8009360 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002a14:	4a15      	ldr	r2, [pc, #84]	@ (8002a6c <System_Init+0xf8>)
 8002a16:	4b16      	ldr	r3, [pc, #88]	@ (8002a70 <System_Init+0xfc>)
 8002a18:	2114      	movs	r1, #20
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f008 ffea 	bl	800b9f4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 8002a20:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <System_Init+0x100>)
 8002a22:	4b15      	ldr	r3, [pc, #84]	@ (8002a78 <System_Init+0x104>)
 8002a24:	2114      	movs	r1, #20
 8002a26:	0018      	movs	r0, r3
 8002a28:	f008 ffe4 	bl	800b9f4 <HAL_TIM_RegisterCallback>
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	200005b4 	.word	0x200005b4
 8002a38:	08002a7d 	.word	0x08002a7d
 8002a3c:	20000810 	.word	0x20000810
 8002a40:	08002ad1 	.word	0x08002ad1
 8002a44:	08002b65 	.word	0x08002b65
 8002a48:	200008cc 	.word	0x200008cc
 8002a4c:	08002c81 	.word	0x08002c81
 8002a50:	08002d8d 	.word	0x08002d8d
 8002a54:	20000988 	.word	0x20000988
 8002a58:	08002ec9 	.word	0x08002ec9
 8002a5c:	20000b00 	.word	0x20000b00
 8002a60:	08002ed9 	.word	0x08002ed9
 8002a64:	080042b9 	.word	0x080042b9
 8002a68:	20000c84 	.word	0x20000c84
 8002a6c:	080049e9 	.word	0x080049e9
 8002a70:	20000754 	.word	0x20000754
 8002a74:	080049f9 	.word	0x080049f9
 8002a78:	20000698 	.word	0x20000698

08002a7c <TIM16_callback>:
#include "custom_callbacks.h"

volatile enum Validate save_or_preset_mode_engaged = NO;

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002a84:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <TIM16_callback+0x40>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f002 fbd8 	bl	800523c <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002abc <TIM16_callback+0x40>)
 8002a8e:	2100      	movs	r1, #0
 8002a90:	0018      	movs	r0, r3
 8002a92:	f002 fbff 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002a96:	4a0a      	ldr	r2, [pc, #40]	@ (8002ac0 <TIM16_callback+0x44>)
 8002a98:	4b08      	ldr	r3, [pc, #32]	@ (8002abc <TIM16_callback+0x40>)
 8002a9a:	0011      	movs	r1, r2
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f002 fcef 	bl	8005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002aa2:	4b08      	ldr	r3, [pc, #32]	@ (8002ac4 <TIM16_callback+0x48>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	001a      	movs	r2, r3
 8002aa8:	4907      	ldr	r1, [pc, #28]	@ (8002ac8 <TIM16_callback+0x4c>)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <TIM16_callback+0x50>)
 8002aac:	0018      	movs	r0, r3
 8002aae:	f004 fc39 	bl	8007324 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b002      	add	sp, #8
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			@ (mov r8, r8)
 8002abc:	20000d20 	.word	0x20000d20
 8002ac0:	20000028 	.word	0x20000028
 8002ac4:	0800ea38 	.word	0x0800ea38
 8002ac8:	20000d14 	.word	0x20000d14
 8002acc:	200005b4 	.word	0x200005b4

08002ad0 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f004 fcb0 	bl	8007440 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b50 <ADC_DMA_conversion_complete_callback+0x80>)
 8002ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b54 <ADC_DMA_conversion_complete_callback+0x84>)
 8002ae4:	0011      	movs	r1, r2
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	f002 fd60 	bl	80055ac <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002aec:	f7fd fd3c 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002af0:	250f      	movs	r5, #15
 8002af2:	197c      	adds	r4, r7, r5
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <ADC_DMA_conversion_complete_callback+0x88>)
 8002af6:	2108      	movs	r1, #8
 8002af8:	0018      	movs	r0, r3
 8002afa:	f003 ff5b 	bl	80069b4 <Get_Status_Bit>
 8002afe:	0003      	movs	r3, r0
 8002b00:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002b02:	197b      	adds	r3, r7, r5
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10a      	bne.n	8002b20 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <ADC_DMA_conversion_complete_callback+0x8c>)
 8002b0c:	8a5b      	ldrh	r3, [r3, #18]
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	4b13      	ldr	r3, [pc, #76]	@ (8002b60 <ADC_DMA_conversion_complete_callback+0x90>)
 8002b12:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <ADC_DMA_conversion_complete_callback+0x8c>)
 8002b16:	8b5b      	ldrh	r3, [r3, #26]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	4b11      	ldr	r3, [pc, #68]	@ (8002b60 <ADC_DMA_conversion_complete_callback+0x90>)
 8002b1c:	835a      	strh	r2, [r3, #26]
 8002b1e:	e003      	b.n	8002b28 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002b20:	4b0f      	ldr	r3, [pc, #60]	@ (8002b60 <ADC_DMA_conversion_complete_callback+0x90>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f002 fb54 	bl	80051d0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002b28:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <ADC_DMA_conversion_complete_callback+0x90>)
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f003 fab4 	bl	8006098 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002b30:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <ADC_DMA_conversion_complete_callback+0x88>)
 8002b32:	2110      	movs	r1, #16
 8002b34:	0018      	movs	r0, r3
 8002b36:	f003 ff3d 	bl	80069b4 <Get_Status_Bit>
 8002b3a:	1e03      	subs	r3, r0, #0
 8002b3c:	d104      	bne.n	8002b48 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <ADC_DMA_conversion_complete_callback+0x88>)
 8002b40:	2110      	movs	r1, #16
 8002b42:	0018      	movs	r0, r3
 8002b44:	f003 ff4a 	bl	80069dc <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002b48:	46c0      	nop			@ (mov r8, r8)
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	b004      	add	sp, #16
 8002b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002b50:	20000d14 	.word	0x20000d14
 8002b54:	20000d44 	.word	0x20000d44
 8002b58:	20000d00 	.word	0x20000d00
 8002b5c:	20000d8c 	.word	0x20000d8c
 8002b60:	20000d20 	.word	0x20000d20

08002b64 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	0018      	movs	r0, r3
 8002b72:	f008 febb 	bl	800b8ec <HAL_TIM_ReadCapturedValue>
 8002b76:	0002      	movs	r2, r0
 8002b78:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <TIM2_ch1_IP_capture_callback+0x100>)
 8002b7a:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002b7c:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <TIM2_ch1_IP_capture_callback+0x100>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0a5b      	lsrs	r3, r3, #9
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b38      	ldr	r3, [pc, #224]	@ (8002c68 <TIM2_ch1_IP_capture_callback+0x104>)
 8002b86:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002b88:	4b38      	ldr	r3, [pc, #224]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d108      	bne.n	8002ba4 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002b92:	f002 fa0d 	bl	8004fb0 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002b96:	4b35      	ldr	r3, [pc, #212]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8002b9c:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002ba2:	e05b      	b.n	8002c5c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002ba4:	4b31      	ldr	r3, [pc, #196]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d124      	bne.n	8002bf8 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8002bae:	4b2e      	ldr	r3, [pc, #184]	@ (8002c68 <TIM2_ch1_IP_capture_callback+0x104>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b80      	cmp	r3, #128	@ 0x80
 8002bb6:	d951      	bls.n	8002c5c <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002bb8:	f002 f9dc 	bl	8004f74 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002bc8:	4a29      	ldr	r2, [pc, #164]	@ (8002c70 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002bca:	4b2a      	ldr	r3, [pc, #168]	@ (8002c74 <TIM2_ch1_IP_capture_callback+0x110>)
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f002 f9be 	bl	8004f50 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002bd4:	4b28      	ldr	r3, [pc, #160]	@ (8002c78 <TIM2_ch1_IP_capture_callback+0x114>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b05      	cmp	r3, #5
 8002bdc:	d004      	beq.n	8002be8 <TIM2_ch1_IP_capture_callback+0x84>
 8002bde:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <TIM2_ch1_IP_capture_callback+0x114>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b07      	cmp	r3, #7
 8002be6:	d101      	bne.n	8002bec <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002be8:	f002 fe2c 	bl	8005844 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002bec:	4b23      	ldr	r3, [pc, #140]	@ (8002c7c <TIM2_ch1_IP_capture_callback+0x118>)
 8002bee:	2104      	movs	r1, #4
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f003 fef3 	bl	80069dc <Set_Status_Bit>
}
 8002bf6:	e031      	b.n	8002c5c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d108      	bne.n	8002c14 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002c02:	f002 f9d5 	bl	8004fb0 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002c06:	4b19      	ldr	r3, [pc, #100]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002c08:	2203      	movs	r2, #3
 8002c0a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002c0e:	2202      	movs	r2, #2
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	e023      	b.n	8002c5c <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002c14:	4b15      	ldr	r3, [pc, #84]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	d11e      	bne.n	8002c5c <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002c1e:	f002 f9a9 	bl	8004f74 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002c24:	2202      	movs	r2, #2
 8002c26:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002c28:	4b10      	ldr	r3, [pc, #64]	@ (8002c6c <TIM2_ch1_IP_capture_callback+0x108>)
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002c2e:	4a10      	ldr	r2, [pc, #64]	@ (8002c70 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002c30:	4b10      	ldr	r3, [pc, #64]	@ (8002c74 <TIM2_ch1_IP_capture_callback+0x110>)
 8002c32:	0011      	movs	r1, r2
 8002c34:	0018      	movs	r0, r3
 8002c36:	f002 f98b 	bl	8004f50 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <TIM2_ch1_IP_capture_callback+0x114>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d004      	beq.n	8002c4e <TIM2_ch1_IP_capture_callback+0xea>
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <TIM2_ch1_IP_capture_callback+0x114>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b07      	cmp	r3, #7
 8002c4c:	d101      	bne.n	8002c52 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002c4e:	f002 fdf9 	bl	8005844 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <TIM2_ch1_IP_capture_callback+0x118>)
 8002c54:	2104      	movs	r1, #4
 8002c56:	0018      	movs	r0, r3
 8002c58:	f003 fec0 	bl	80069dc <Set_Status_Bit>
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b002      	add	sp, #8
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20000cf8 	.word	0x20000cf8
 8002c68:	20000cfc 	.word	0x20000cfc
 8002c6c:	20000444 	.word	0x20000444
 8002c70:	20000d68 	.word	0x20000d68
 8002c74:	20000d20 	.word	0x20000d20
 8002c78:	20000430 	.word	0x20000430
 8002c7c:	20000d00 	.word	0x20000d00

08002c80 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002c88:	240c      	movs	r4, #12
 8002c8a:	193b      	adds	r3, r7, r4
 8002c8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002c8e:	7852      	ldrb	r2, [r2, #1]
 8002c90:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d131      	bne.n	8002d00 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 8002c9c:	4b37      	ldr	r3, [pc, #220]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002ca2:	4b36      	ldr	r3, [pc, #216]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002ca8:	4b35      	ldr	r3, [pc, #212]	@ (8002d80 <TIM2_ch1_overflow_callback+0x100>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002cae:	4b35      	ldr	r3, [pc, #212]	@ (8002d84 <TIM2_ch1_overflow_callback+0x104>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002cb4:	2380      	movs	r3, #128	@ 0x80
 8002cb6:	0099      	lsls	r1, r3, #2
 8002cb8:	23a0      	movs	r3, #160	@ 0xa0
 8002cba:	05db      	lsls	r3, r3, #23
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	0018      	movs	r0, r3
 8002cc0:	f006 f8e1 	bl	8008e86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002cc4:	4b30      	ldr	r3, [pc, #192]	@ (8002d88 <TIM2_ch1_overflow_callback+0x108>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2140      	movs	r1, #64	@ 0x40
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f006 f8db 	bl	8008e86 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cd0:	4b29      	ldr	r3, [pc, #164]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d049      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002cda:	4b27      	ldr	r3, [pc, #156]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b06      	cmp	r3, #6
 8002ce2:	d044      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
 8002ce4:	4b24      	ldr	r3, [pc, #144]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d03f      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8002cee:	4b22      	ldr	r3, [pc, #136]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002cf0:	4a21      	ldr	r2, [pc, #132]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002cf2:	7812      	ldrb	r2, [r2, #0]
 8002cf4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002cf6:	4b20      	ldr	r3, [pc, #128]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002cf8:	193a      	adds	r2, r7, r4
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002cfe:	e036      	b.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002d00:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d131      	bne.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <TIM2_ch1_overflow_callback+0xfc>)
 8002d12:	2203      	movs	r2, #3
 8002d14:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	@ (8002d80 <TIM2_ch1_overflow_callback+0x100>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <TIM2_ch1_overflow_callback+0x104>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	0099      	lsls	r1, r3, #2
 8002d26:	23a0      	movs	r3, #160	@ 0xa0
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f006 f8aa 	bl	8008e86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d32:	4b15      	ldr	r3, [pc, #84]	@ (8002d88 <TIM2_ch1_overflow_callback+0x108>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f006 f8a4 	bl	8008e86 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d012      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002d48:	4b0b      	ldr	r3, [pc, #44]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d00d      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d008      	beq.n	8002d6e <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d5e:	4a06      	ldr	r2, [pc, #24]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <TIM2_ch1_overflow_callback+0xf8>)
 8002d66:	220c      	movs	r2, #12
 8002d68:	18ba      	adds	r2, r7, r2
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	701a      	strb	r2, [r3, #0]
}
 8002d6e:	46c0      	nop			@ (mov r8, r8)
 8002d70:	46bd      	mov	sp, r7
 8002d72:	b005      	add	sp, #20
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	20000430 	.word	0x20000430
 8002d7c:	20000444 	.word	0x20000444
 8002d80:	20000db0 	.word	0x20000db0
 8002d84:	20000cfe 	.word	0x20000cfe
 8002d88:	50000800 	.word	0x50000800

08002d8c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d94:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b0b      	cmp	r3, #11
 8002d9c:	d01c      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b0c      	cmp	r3, #12
 8002da6:	d017      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002da8:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b0d      	cmp	r3, #13
 8002db0:	d012      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002db2:	4b3a      	ldr	r3, [pc, #232]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b10      	cmp	r3, #16
 8002dba:	d00d      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002dbc:	4b37      	ldr	r3, [pc, #220]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b11      	cmp	r3, #17
 8002dc4:	d008      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002dc6:	4b35      	ldr	r3, [pc, #212]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002dcc:	2b12      	cmp	r3, #18
 8002dce:	d003      	beq.n	8002dd8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002dd0:	4b33      	ldr	r3, [pc, #204]	@ (8002ea0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f002 fa32 	bl	800523c <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002dd8:	4b32      	ldr	r3, [pc, #200]	@ (8002ea4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	0018      	movs	r0, r3
 8002dde:	f003 fd82 	bl	80068e6 <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d106      	bne.n	8002dfa <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002dec:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002df2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002df4:	2202      	movs	r2, #2
 8002df6:	705a      	strb	r2, [r3, #1]
 8002df8:	e00a      	b.n	8002e10 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d105      	bne.n	8002e10 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002e0a:	4b27      	ldr	r3, [pc, #156]	@ (8002ea8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002e10:	4b22      	ldr	r3, [pc, #136]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b0b      	cmp	r3, #11
 8002e18:	d03c      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002e1a:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d037      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002e24:	4b1d      	ldr	r3, [pc, #116]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b0d      	cmp	r3, #13
 8002e2c:	d032      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b10      	cmp	r3, #16
 8002e36:	d02d      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002e38:	4b18      	ldr	r3, [pc, #96]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b11      	cmp	r3, #17
 8002e40:	d028      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002e42:	4b16      	ldr	r3, [pc, #88]	@ (8002e9c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002e48:	2b12      	cmp	r3, #18
 8002e4a:	d023      	beq.n	8002e94 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002e4c:	4a17      	ldr	r2, [pc, #92]	@ (8002eac <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002e4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e50:	0011      	movs	r1, r2
 8002e52:	0018      	movs	r0, r3
 8002e54:	f002 f87c 	bl	8004f50 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002e58:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f002 f876 	bl	8004f50 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002e66:	2108      	movs	r1, #8
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f003 fdb7 	bl	80069dc <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e70:	2100      	movs	r1, #0
 8002e72:	0018      	movs	r0, r3
 8002e74:	f002 fa0e 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002e78:	4a0f      	ldr	r2, [pc, #60]	@ (8002eb8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f002 fafe 	bl	8005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002e84:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	001a      	movs	r2, r3
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f004 fa48 	bl	8007324 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	20000430 	.word	0x20000430
 8002ea0:	20000d68 	.word	0x20000d68
 8002ea4:	20000988 	.word	0x20000988
 8002ea8:	20000444 	.word	0x20000444
 8002eac:	20000d8c 	.word	0x20000d8c
 8002eb0:	20000d20 	.word	0x20000d20
 8002eb4:	20000d00 	.word	0x20000d00
 8002eb8:	20000028 	.word	0x20000028
 8002ebc:	0800ea38 	.word	0x0800ea38
 8002ec0:	20000d14 	.word	0x20000d14
 8002ec4:	200005b4 	.word	0x200005b4

08002ec8 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002ee0:	4bbe      	ldr	r3, [pc, #760]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7fe fc96 	bl	8001814 <Is_System_Real_Time_Status_Byte>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <UART2_RX_transfer_complete_callback+0x1a>
 8002eee:	f000 fc0c 	bl	800370a <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002ef2:	4bbb      	ldr	r3, [pc, #748]	@ (80031e0 <UART2_RX_transfer_complete_callback+0x308>)
 8002ef4:	2180      	movs	r1, #128	@ 0x80
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f003 fd5c 	bl	80069b4 <Get_Status_Bit>
 8002efc:	0003      	movs	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d001      	beq.n	8002f06 <UART2_RX_transfer_complete_callback+0x2e>
 8002f02:	f001 f895 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002f06:	4bb7      	ldr	r3, [pc, #732]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d159      	bne.n	8002fc4 <UART2_RX_transfer_complete_callback+0xec>
 8002f10:	4bb5      	ldr	r3, [pc, #724]	@ (80031e8 <UART2_RX_transfer_complete_callback+0x310>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d154      	bne.n	8002fc4 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002f1a:	4bb4      	ldr	r3, [pc, #720]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d013      	beq.n	8002f4c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002f24:	4bb1      	ldr	r3, [pc, #708]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d00e      	beq.n	8002f4c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002f2e:	4baf      	ldr	r3, [pc, #700]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b06      	cmp	r3, #6
 8002f36:	d009      	beq.n	8002f4c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002f38:	4bac      	ldr	r3, [pc, #688]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d004      	beq.n	8002f4c <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002f42:	4baa      	ldr	r3, [pc, #680]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d13b      	bne.n	8002fc4 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f4c:	4ba3      	ldr	r3, [pc, #652]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f54:	d10b      	bne.n	8002f6e <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f56:	4ba5      	ldr	r3, [pc, #660]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f58:	4aa4      	ldr	r2, [pc, #656]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f5a:	7812      	ldrb	r2, [r2, #0]
 8002f5c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002f5e:	4ba3      	ldr	r3, [pc, #652]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f60:	2209      	movs	r2, #9
 8002f62:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f64:	4ba2      	ldr	r3, [pc, #648]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f6a:	f001 f85e 	bl	800402a <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f6e:	4b9b      	ldr	r3, [pc, #620]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f76:	d001      	beq.n	8002f7c <UART2_RX_transfer_complete_callback+0xa4>
 8002f78:	f001 f857 	bl	800402a <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002f7c:	4b9b      	ldr	r3, [pc, #620]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f7e:	4a9b      	ldr	r2, [pc, #620]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002f84:	4b99      	ldr	r3, [pc, #612]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002f86:	220b      	movs	r2, #11
 8002f88:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f8a:	4b99      	ldr	r3, [pc, #612]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2200      	movs	r2, #0
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f005 ff73 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fa0:	4b94      	ldr	r3, [pc, #592]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	2140      	movs	r1, #64	@ 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f005 ff6d 	bl	8008e86 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002fac:	4b8d      	ldr	r3, [pc, #564]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002fae:	2201      	movs	r2, #1
 8002fb0:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fb2:	4b8f      	ldr	r3, [pc, #572]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b8c      	ldr	r3, [pc, #560]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8002fbe:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002fc0:	f001 f833 	bl	800402a <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002fc4:	4b89      	ldr	r3, [pc, #548]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	d123      	bne.n	8003016 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fce:	4b83      	ldr	r3, [pc, #524]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fd6:	d001      	beq.n	8002fdc <UART2_RX_transfer_complete_callback+0x104>
 8002fd8:	f001 f82a 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fdc:	2380      	movs	r3, #128	@ 0x80
 8002fde:	0099      	lsls	r1, r3, #2
 8002fe0:	23a0      	movs	r3, #160	@ 0xa0
 8002fe2:	05db      	lsls	r3, r3, #23
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	f005 ff4d 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fec:	4b81      	ldr	r3, [pc, #516]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	2140      	movs	r1, #64	@ 0x40
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f005 ff47 	bl	8008e86 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002ff8:	4b7a      	ldr	r3, [pc, #488]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	4b79      	ldr	r3, [pc, #484]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 800300a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 800300c:	4b77      	ldr	r3, [pc, #476]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 800300e:	220a      	movs	r2, #10
 8003010:	701a      	strb	r2, [r3, #0]
 8003012:	f001 f80d 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8003016:	4b75      	ldr	r3, [pc, #468]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b0a      	cmp	r3, #10
 800301e:	d145      	bne.n	80030ac <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003020:	4b6e      	ldr	r3, [pc, #440]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2bf8      	cmp	r3, #248	@ 0xf8
 8003028:	d001      	beq.n	800302e <UART2_RX_transfer_complete_callback+0x156>
 800302a:	f001 f801 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800302e:	4b6d      	ldr	r3, [pc, #436]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003034:	4b6e      	ldr	r3, [pc, #440]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3301      	adds	r3, #1
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b6c      	ldr	r3, [pc, #432]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003040:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003042:	4b6b      	ldr	r3, [pc, #428]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b0b      	cmp	r3, #11
 800304a:	d80f      	bhi.n	800306c <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800304c:	2380      	movs	r3, #128	@ 0x80
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	23a0      	movs	r3, #160	@ 0xa0
 8003052:	05db      	lsls	r3, r3, #23
 8003054:	2200      	movs	r2, #0
 8003056:	0018      	movs	r0, r3
 8003058:	f005 ff15 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800305c:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 800305e:	2201      	movs	r2, #1
 8003060:	2140      	movs	r1, #64	@ 0x40
 8003062:	0018      	movs	r0, r3
 8003064:	f005 ff0f 	bl	8008e86 <HAL_GPIO_WritePin>
 8003068:	f000 ffe2 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800306c:	4b60      	ldr	r3, [pc, #384]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b18      	cmp	r3, #24
 8003074:	d80f      	bhi.n	8003096 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	0099      	lsls	r1, r3, #2
 800307a:	23a0      	movs	r3, #160	@ 0xa0
 800307c:	05db      	lsls	r3, r3, #23
 800307e:	2201      	movs	r2, #1
 8003080:	0018      	movs	r0, r3
 8003082:	f005 ff00 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003086:	4b5b      	ldr	r3, [pc, #364]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 8003088:	2200      	movs	r2, #0
 800308a:	2140      	movs	r1, #64	@ 0x40
 800308c:	0018      	movs	r0, r3
 800308e:	f005 fefa 	bl	8008e86 <HAL_GPIO_WritePin>
 8003092:	f000 ffcd 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8003096:	4b55      	ldr	r3, [pc, #340]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8003098:	220a      	movs	r2, #10
 800309a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800309c:	4b53      	ldr	r3, [pc, #332]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 800309e:	2208      	movs	r2, #8
 80030a0:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80030a2:	4b53      	ldr	r3, [pc, #332]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
 80030a8:	f000 ffc2 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80030ac:	4b4f      	ldr	r3, [pc, #316]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b0b      	cmp	r3, #11
 80030b4:	d142      	bne.n	800313c <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80030b6:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2bf8      	cmp	r3, #248	@ 0xf8
 80030be:	d001      	beq.n	80030c4 <UART2_RX_transfer_complete_callback+0x1ec>
 80030c0:	f000 ffb6 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80030c4:	4b47      	ldr	r3, [pc, #284]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80030ca:	4b49      	ldr	r3, [pc, #292]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	3301      	adds	r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b46      	ldr	r3, [pc, #280]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 80030d6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80030d8:	4b45      	ldr	r3, [pc, #276]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b0b      	cmp	r3, #11
 80030e0:	d80f      	bhi.n	8003102 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80030e2:	2380      	movs	r3, #128	@ 0x80
 80030e4:	0099      	lsls	r1, r3, #2
 80030e6:	23a0      	movs	r3, #160	@ 0xa0
 80030e8:	05db      	lsls	r3, r3, #23
 80030ea:	2200      	movs	r2, #0
 80030ec:	0018      	movs	r0, r3
 80030ee:	f005 feca 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80030f2:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 80030f4:	2201      	movs	r2, #1
 80030f6:	2140      	movs	r1, #64	@ 0x40
 80030f8:	0018      	movs	r0, r3
 80030fa:	f005 fec4 	bl	8008e86 <HAL_GPIO_WritePin>
 80030fe:	f000 ff97 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003102:	4b3b      	ldr	r3, [pc, #236]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b18      	cmp	r3, #24
 800310a:	d80f      	bhi.n	800312c <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800310c:	2380      	movs	r3, #128	@ 0x80
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	23a0      	movs	r3, #160	@ 0xa0
 8003112:	05db      	lsls	r3, r3, #23
 8003114:	2201      	movs	r2, #1
 8003116:	0018      	movs	r0, r3
 8003118:	f005 feb5 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800311c:	4b35      	ldr	r3, [pc, #212]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 800311e:	2200      	movs	r2, #0
 8003120:	2140      	movs	r1, #64	@ 0x40
 8003122:	0018      	movs	r0, r3
 8003124:	f005 feaf 	bl	8008e86 <HAL_GPIO_WritePin>
 8003128:	f000 ff82 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800312c:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 800312e:	2201      	movs	r2, #1
 8003130:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8003132:	4b2e      	ldr	r3, [pc, #184]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 8003134:	220c      	movs	r2, #12
 8003136:	701a      	strb	r2, [r3, #0]
 8003138:	f000 ff7a 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 800313c:	4b2b      	ldr	r3, [pc, #172]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b0c      	cmp	r3, #12
 8003144:	d158      	bne.n	80031f8 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003146:	4b25      	ldr	r3, [pc, #148]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2bf8      	cmp	r3, #248	@ 0xf8
 800314e:	d138      	bne.n	80031c2 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003150:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <UART2_RX_transfer_complete_callback+0x30c>)
 8003152:	2201      	movs	r2, #1
 8003154:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003156:	4b26      	ldr	r3, [pc, #152]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	b2da      	uxtb	r2, r3
 8003160:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003162:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003164:	4b22      	ldr	r3, [pc, #136]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b0b      	cmp	r3, #11
 800316c:	d80f      	bhi.n	800318e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	0099      	lsls	r1, r3, #2
 8003172:	23a0      	movs	r3, #160	@ 0xa0
 8003174:	05db      	lsls	r3, r3, #23
 8003176:	2200      	movs	r2, #0
 8003178:	0018      	movs	r0, r3
 800317a:	f005 fe84 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800317e:	4b1d      	ldr	r3, [pc, #116]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 8003180:	2201      	movs	r2, #1
 8003182:	2140      	movs	r1, #64	@ 0x40
 8003184:	0018      	movs	r0, r3
 8003186:	f005 fe7e 	bl	8008e86 <HAL_GPIO_WritePin>
 800318a:	f000 ff51 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800318e:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b18      	cmp	r3, #24
 8003196:	d80f      	bhi.n	80031b8 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	23a0      	movs	r3, #160	@ 0xa0
 800319e:	05db      	lsls	r3, r3, #23
 80031a0:	2201      	movs	r2, #1
 80031a2:	0018      	movs	r0, r3
 80031a4:	f005 fe6f 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <UART2_RX_transfer_complete_callback+0x31c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	2140      	movs	r1, #64	@ 0x40
 80031ae:	0018      	movs	r0, r3
 80031b0:	f005 fe69 	bl	8008e86 <HAL_GPIO_WritePin>
 80031b4:	f000 ff3c 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80031b8:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <UART2_RX_transfer_complete_callback+0x318>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
 80031be:	f000 ff37 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <UART2_RX_transfer_complete_callback+0x304>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2bfa      	cmp	r3, #250	@ 0xfa
 80031ca:	d001      	beq.n	80031d0 <UART2_RX_transfer_complete_callback+0x2f8>
 80031cc:	f000 ff30 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 80031d0:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <UART2_RX_transfer_complete_callback+0x314>)
 80031d2:	220d      	movs	r2, #13
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	f000 ff2b 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	20000594 	.word	0x20000594
 80031e0:	20000d00 	.word	0x20000d00
 80031e4:	20000db0 	.word	0x20000db0
 80031e8:	20000444 	.word	0x20000444
 80031ec:	20000430 	.word	0x20000430
 80031f0:	20000cfe 	.word	0x20000cfe
 80031f4:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 80031f8:	4bdc      	ldr	r3, [pc, #880]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b0d      	cmp	r3, #13
 8003200:	d160      	bne.n	80032c4 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003202:	4bdb      	ldr	r3, [pc, #876]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2bf8      	cmp	r3, #248	@ 0xf8
 800320a:	d001      	beq.n	8003210 <UART2_RX_transfer_complete_callback+0x338>
 800320c:	f000 ff10 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003210:	4bd8      	ldr	r3, [pc, #864]	@ (8003574 <UART2_RX_transfer_complete_callback+0x69c>)
 8003212:	0018      	movs	r0, r3
 8003214:	f002 f812 	bl	800523c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	0099      	lsls	r1, r3, #2
 800321c:	23a0      	movs	r3, #160	@ 0xa0
 800321e:	05db      	lsls	r3, r3, #23
 8003220:	2201      	movs	r2, #1
 8003222:	0018      	movs	r0, r3
 8003224:	f005 fe2f 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003228:	4bd3      	ldr	r3, [pc, #844]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 800322a:	2200      	movs	r2, #0
 800322c:	2140      	movs	r1, #64	@ 0x40
 800322e:	0018      	movs	r0, r3
 8003230:	f005 fe29 	bl	8008e86 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003234:	2380      	movs	r3, #128	@ 0x80
 8003236:	0099      	lsls	r1, r3, #2
 8003238:	23a0      	movs	r3, #160	@ 0xa0
 800323a:	05db      	lsls	r3, r3, #23
 800323c:	2200      	movs	r2, #0
 800323e:	0018      	movs	r0, r3
 8003240:	f005 fe21 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003244:	4bcc      	ldr	r3, [pc, #816]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003246:	2201      	movs	r2, #1
 8003248:	2140      	movs	r1, #64	@ 0x40
 800324a:	0018      	movs	r0, r3
 800324c:	f005 fe1b 	bl	8008e86 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003250:	4bca      	ldr	r3, [pc, #808]	@ (800357c <UART2_RX_transfer_complete_callback+0x6a4>)
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8003256:	4bca      	ldr	r3, [pc, #808]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003258:	2201      	movs	r2, #1
 800325a:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 800325c:	4bc3      	ldr	r3, [pc, #780]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 800325e:	220d      	movs	r2, #13
 8003260:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003262:	4bc2      	ldr	r3, [pc, #776]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 8003264:	2208      	movs	r2, #8
 8003266:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8003268:	4bc6      	ldr	r3, [pc, #792]	@ (8003584 <UART2_RX_transfer_complete_callback+0x6ac>)
 800326a:	2100      	movs	r1, #0
 800326c:	0018      	movs	r0, r3
 800326e:	f003 fb3a 	bl	80068e6 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8003272:	4bc5      	ldr	r3, [pc, #788]	@ (8003588 <UART2_RX_transfer_complete_callback+0x6b0>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8003278:	4ac4      	ldr	r2, [pc, #784]	@ (800358c <UART2_RX_transfer_complete_callback+0x6b4>)
 800327a:	4bbe      	ldr	r3, [pc, #760]	@ (8003574 <UART2_RX_transfer_complete_callback+0x69c>)
 800327c:	0011      	movs	r1, r2
 800327e:	0018      	movs	r0, r3
 8003280:	f001 fe66 	bl	8004f50 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8003284:	4ac2      	ldr	r2, [pc, #776]	@ (8003590 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003286:	4bbb      	ldr	r3, [pc, #748]	@ (8003574 <UART2_RX_transfer_complete_callback+0x69c>)
 8003288:	0011      	movs	r1, r2
 800328a:	0018      	movs	r0, r3
 800328c:	f001 fe60 	bl	8004f50 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003290:	4bc0      	ldr	r3, [pc, #768]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003292:	2108      	movs	r1, #8
 8003294:	0018      	movs	r0, r3
 8003296:	f003 fba1 	bl	80069dc <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800329a:	4bbd      	ldr	r3, [pc, #756]	@ (8003590 <UART2_RX_transfer_complete_callback+0x6b8>)
 800329c:	2100      	movs	r1, #0
 800329e:	0018      	movs	r0, r3
 80032a0:	f001 fff8 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80032a4:	4abc      	ldr	r2, [pc, #752]	@ (8003598 <UART2_RX_transfer_complete_callback+0x6c0>)
 80032a6:	4bba      	ldr	r3, [pc, #744]	@ (8003590 <UART2_RX_transfer_complete_callback+0x6b8>)
 80032a8:	0011      	movs	r1, r2
 80032aa:	0018      	movs	r0, r3
 80032ac:	f002 f8e8 	bl	8005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80032b0:	4bba      	ldr	r3, [pc, #744]	@ (800359c <UART2_RX_transfer_complete_callback+0x6c4>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	001a      	movs	r2, r3
 80032b6:	49ba      	ldr	r1, [pc, #744]	@ (80035a0 <UART2_RX_transfer_complete_callback+0x6c8>)
 80032b8:	4bba      	ldr	r3, [pc, #744]	@ (80035a4 <UART2_RX_transfer_complete_callback+0x6cc>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f004 f832 	bl	8007324 <HAL_ADC_Start_DMA>
 80032c0:	f000 feb6 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 80032c4:	4ba9      	ldr	r3, [pc, #676]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d146      	bne.n	800335c <UART2_RX_transfer_complete_callback+0x484>
 80032ce:	4bb1      	ldr	r3, [pc, #708]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 80032d0:	2120      	movs	r1, #32
 80032d2:	0018      	movs	r0, r3
 80032d4:	f003 fb6e 	bl	80069b4 <Get_Status_Bit>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d13f      	bne.n	800335c <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032dc:	4ba4      	ldr	r3, [pc, #656]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2bf8      	cmp	r3, #248	@ 0xf8
 80032e4:	d001      	beq.n	80032ea <UART2_RX_transfer_complete_callback+0x412>
 80032e6:	f000 fea3 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80032ea:	4ba4      	ldr	r3, [pc, #656]	@ (800357c <UART2_RX_transfer_complete_callback+0x6a4>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80032f0:	4ba3      	ldr	r3, [pc, #652]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	3301      	adds	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4ba1      	ldr	r3, [pc, #644]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032fc:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80032fe:	4ba0      	ldr	r3, [pc, #640]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b0b      	cmp	r3, #11
 8003306:	d80f      	bhi.n	8003328 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003308:	2380      	movs	r3, #128	@ 0x80
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	23a0      	movs	r3, #160	@ 0xa0
 800330e:	05db      	lsls	r3, r3, #23
 8003310:	2200      	movs	r2, #0
 8003312:	0018      	movs	r0, r3
 8003314:	f005 fdb7 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003318:	4b97      	ldr	r3, [pc, #604]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 800331a:	2201      	movs	r2, #1
 800331c:	2140      	movs	r1, #64	@ 0x40
 800331e:	0018      	movs	r0, r3
 8003320:	f005 fdb1 	bl	8008e86 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003324:	f000 fe84 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003328:	4b95      	ldr	r3, [pc, #596]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b18      	cmp	r3, #24
 8003330:	d80f      	bhi.n	8003352 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003332:	2380      	movs	r3, #128	@ 0x80
 8003334:	0099      	lsls	r1, r3, #2
 8003336:	23a0      	movs	r3, #160	@ 0xa0
 8003338:	05db      	lsls	r3, r3, #23
 800333a:	2201      	movs	r2, #1
 800333c:	0018      	movs	r0, r3
 800333e:	f005 fda2 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003342:	4b8d      	ldr	r3, [pc, #564]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003344:	2200      	movs	r2, #0
 8003346:	2140      	movs	r1, #64	@ 0x40
 8003348:	0018      	movs	r0, r3
 800334a:	f005 fd9c 	bl	8008e86 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800334e:	f000 fe6f 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003352:	4b8b      	ldr	r3, [pc, #556]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003354:	2201      	movs	r2, #1
 8003356:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003358:	f000 fe6a 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800335c:	4b83      	ldr	r3, [pc, #524]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b08      	cmp	r3, #8
 8003364:	d14c      	bne.n	8003400 <UART2_RX_transfer_complete_callback+0x528>
 8003366:	4b88      	ldr	r3, [pc, #544]	@ (8003588 <UART2_RX_transfer_complete_callback+0x6b0>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d147      	bne.n	8003400 <UART2_RX_transfer_complete_callback+0x528>
 8003370:	4b88      	ldr	r3, [pc, #544]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003372:	2120      	movs	r1, #32
 8003374:	0018      	movs	r0, r3
 8003376:	f003 fb1d 	bl	80069b4 <Get_Status_Bit>
 800337a:	0003      	movs	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d13f      	bne.n	8003400 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003380:	4b7b      	ldr	r3, [pc, #492]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2bf8      	cmp	r3, #248	@ 0xf8
 8003388:	d11e      	bne.n	80033c8 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 800338a:	4b7d      	ldr	r3, [pc, #500]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003390:	4b7b      	ldr	r3, [pc, #492]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	3301      	adds	r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	4b79      	ldr	r3, [pc, #484]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800339c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 800339e:	4b77      	ldr	r3, [pc, #476]	@ (800357c <UART2_RX_transfer_complete_callback+0x6a4>)
 80033a0:	2201      	movs	r2, #1
 80033a2:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 80033a4:	4b71      	ldr	r3, [pc, #452]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80033a6:	2210      	movs	r2, #16
 80033a8:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80033aa:	4b70      	ldr	r3, [pc, #448]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80033ac:	2208      	movs	r2, #8
 80033ae:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80033b0:	4b78      	ldr	r3, [pc, #480]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 80033b2:	2120      	movs	r1, #32
 80033b4:	0018      	movs	r0, r3
 80033b6:	f003 fb23 	bl	8006a00 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033ba:	4b76      	ldr	r3, [pc, #472]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 80033bc:	2140      	movs	r1, #64	@ 0x40
 80033be:	0018      	movs	r0, r3
 80033c0:	f003 fb1e 	bl	8006a00 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033c4:	f000 fe33 	bl	800402e <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80033c8:	4b69      	ldr	r3, [pc, #420]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2bfa      	cmp	r3, #250	@ 0xfa
 80033d0:	d001      	beq.n	80033d6 <UART2_RX_transfer_complete_callback+0x4fe>
 80033d2:	f000 fe2c 	bl	800402e <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 80033d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 80033dc:	4b63      	ldr	r3, [pc, #396]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80033de:	220e      	movs	r2, #14
 80033e0:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80033e2:	4b62      	ldr	r3, [pc, #392]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80033e4:	2208      	movs	r2, #8
 80033e6:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80033e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 80033ea:	2120      	movs	r1, #32
 80033ec:	0018      	movs	r0, r3
 80033ee:	f003 fb07 	bl	8006a00 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033f2:	4b68      	ldr	r3, [pc, #416]	@ (8003594 <UART2_RX_transfer_complete_callback+0x6bc>)
 80033f4:	2140      	movs	r1, #64	@ 0x40
 80033f6:	0018      	movs	r0, r3
 80033f8:	f003 fb02 	bl	8006a00 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033fc:	f000 fe17 	bl	800402e <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8003400:	4b5a      	ldr	r3, [pc, #360]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b0e      	cmp	r3, #14
 8003408:	d123      	bne.n	8003452 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800340a:	4b59      	ldr	r3, [pc, #356]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2bf8      	cmp	r3, #248	@ 0xf8
 8003412:	d001      	beq.n	8003418 <UART2_RX_transfer_complete_callback+0x540>
 8003414:	f000 fe0c 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	0099      	lsls	r1, r3, #2
 800341c:	23a0      	movs	r3, #160	@ 0xa0
 800341e:	05db      	lsls	r3, r3, #23
 8003420:	2200      	movs	r2, #0
 8003422:	0018      	movs	r0, r3
 8003424:	f005 fd2f 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003428:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 800342a:	2201      	movs	r2, #1
 800342c:	2140      	movs	r1, #64	@ 0x40
 800342e:	0018      	movs	r0, r3
 8003430:	f005 fd29 	bl	8008e86 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8003434:	4b51      	ldr	r3, [pc, #324]	@ (800357c <UART2_RX_transfer_complete_callback+0x6a4>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800343a:	4b51      	ldr	r3, [pc, #324]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b4e      	ldr	r3, [pc, #312]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003446:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8003448:	4b48      	ldr	r3, [pc, #288]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 800344a:	220f      	movs	r2, #15
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	f000 fdef 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8003452:	4b46      	ldr	r3, [pc, #280]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d142      	bne.n	80034e2 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800345c:	4b44      	ldr	r3, [pc, #272]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2bf8      	cmp	r3, #248	@ 0xf8
 8003464:	d001      	beq.n	800346a <UART2_RX_transfer_complete_callback+0x592>
 8003466:	f000 fde3 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 800346a:	4b45      	ldr	r3, [pc, #276]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b42      	ldr	r3, [pc, #264]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003476:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003478:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b0b      	cmp	r3, #11
 8003480:	d80f      	bhi.n	80034a2 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	0099      	lsls	r1, r3, #2
 8003486:	23a0      	movs	r3, #160	@ 0xa0
 8003488:	05db      	lsls	r3, r3, #23
 800348a:	2200      	movs	r2, #0
 800348c:	0018      	movs	r0, r3
 800348e:	f005 fcfa 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003492:	4b39      	ldr	r3, [pc, #228]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003494:	2201      	movs	r2, #1
 8003496:	2140      	movs	r1, #64	@ 0x40
 8003498:	0018      	movs	r0, r3
 800349a:	f005 fcf4 	bl	8008e86 <HAL_GPIO_WritePin>
 800349e:	f000 fdc7 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80034a2:	4b37      	ldr	r3, [pc, #220]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	d80f      	bhi.n	80034cc <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80034ac:	2380      	movs	r3, #128	@ 0x80
 80034ae:	0099      	lsls	r1, r3, #2
 80034b0:	23a0      	movs	r3, #160	@ 0xa0
 80034b2:	05db      	lsls	r3, r3, #23
 80034b4:	2201      	movs	r2, #1
 80034b6:	0018      	movs	r0, r3
 80034b8:	f005 fce5 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80034bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 80034be:	2200      	movs	r2, #0
 80034c0:	2140      	movs	r1, #64	@ 0x40
 80034c2:	0018      	movs	r0, r3
 80034c4:	f005 fcdf 	bl	8008e86 <HAL_GPIO_WritePin>
 80034c8:	f000 fdb2 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 80034cc:	4b27      	ldr	r3, [pc, #156]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80034ce:	220f      	movs	r2, #15
 80034d0:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80034d2:	4b26      	ldr	r3, [pc, #152]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80034d4:	2208      	movs	r2, #8
 80034d6:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80034d8:	4b29      	ldr	r3, [pc, #164]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034da:	2201      	movs	r2, #1
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	f000 fda7 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 80034e2:	4b22      	ldr	r3, [pc, #136]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b10      	cmp	r3, #16
 80034ea:	d15d      	bne.n	80035a8 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80034ec:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <UART2_RX_transfer_complete_callback+0x698>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2bf8      	cmp	r3, #248	@ 0xf8
 80034f4:	d001      	beq.n	80034fa <UART2_RX_transfer_complete_callback+0x622>
 80034f6:	f000 fd9b 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 80034fa:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	3301      	adds	r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003506:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003508:	4b1d      	ldr	r3, [pc, #116]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b0b      	cmp	r3, #11
 8003510:	d80f      	bhi.n	8003532 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003512:	2380      	movs	r3, #128	@ 0x80
 8003514:	0099      	lsls	r1, r3, #2
 8003516:	23a0      	movs	r3, #160	@ 0xa0
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	2200      	movs	r2, #0
 800351c:	0018      	movs	r0, r3
 800351e:	f005 fcb2 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003522:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003524:	2201      	movs	r2, #1
 8003526:	2140      	movs	r1, #64	@ 0x40
 8003528:	0018      	movs	r0, r3
 800352a:	f005 fcac 	bl	8008e86 <HAL_GPIO_WritePin>
 800352e:	f000 fd7f 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003532:	4b13      	ldr	r3, [pc, #76]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b18      	cmp	r3, #24
 800353a:	d80f      	bhi.n	800355c <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800353c:	2380      	movs	r3, #128	@ 0x80
 800353e:	0099      	lsls	r1, r3, #2
 8003540:	23a0      	movs	r3, #160	@ 0xa0
 8003542:	05db      	lsls	r3, r3, #23
 8003544:	2201      	movs	r2, #1
 8003546:	0018      	movs	r0, r3
 8003548:	f005 fc9d 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <UART2_RX_transfer_complete_callback+0x6a0>)
 800354e:	2200      	movs	r2, #0
 8003550:	2140      	movs	r1, #64	@ 0x40
 8003552:	0018      	movs	r0, r3
 8003554:	f005 fc97 	bl	8008e86 <HAL_GPIO_WritePin>
 8003558:	f000 fd6a 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 800355c:	4b03      	ldr	r3, [pc, #12]	@ (800356c <UART2_RX_transfer_complete_callback+0x694>)
 800355e:	2211      	movs	r2, #17
 8003560:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8003562:	4b07      	ldr	r3, [pc, #28]	@ (8003580 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003564:	2201      	movs	r2, #1
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	f000 fd62 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
 800356c:	20000430 	.word	0x20000430
 8003570:	20000594 	.word	0x20000594
 8003574:	20000d68 	.word	0x20000d68
 8003578:	50000800 	.word	0x50000800
 800357c:	20000db0 	.word	0x20000db0
 8003580:	20000cfe 	.word	0x20000cfe
 8003584:	20000988 	.word	0x20000988
 8003588:	20000444 	.word	0x20000444
 800358c:	20000d8c 	.word	0x20000d8c
 8003590:	20000d20 	.word	0x20000d20
 8003594:	20000d00 	.word	0x20000d00
 8003598:	20000028 	.word	0x20000028
 800359c:	0800ea38 	.word	0x0800ea38
 80035a0:	20000d14 	.word	0x20000d14
 80035a4:	200005b4 	.word	0x200005b4
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 80035a8:	4bed      	ldr	r3, [pc, #948]	@ (8003960 <UART2_RX_transfer_complete_callback+0xa88>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b11      	cmp	r3, #17
 80035b0:	d146      	bne.n	8003640 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80035b2:	4bec      	ldr	r3, [pc, #944]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2bf8      	cmp	r3, #248	@ 0xf8
 80035ba:	d135      	bne.n	8003628 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 80035bc:	4bea      	ldr	r3, [pc, #936]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4be8      	ldr	r3, [pc, #928]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 80035c8:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80035ca:	4be7      	ldr	r3, [pc, #924]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b0b      	cmp	r3, #11
 80035d2:	d80f      	bhi.n	80035f4 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	0099      	lsls	r1, r3, #2
 80035d8:	23a0      	movs	r3, #160	@ 0xa0
 80035da:	05db      	lsls	r3, r3, #23
 80035dc:	2200      	movs	r2, #0
 80035de:	0018      	movs	r0, r3
 80035e0:	f005 fc51 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80035e4:	4be1      	ldr	r3, [pc, #900]	@ (800396c <UART2_RX_transfer_complete_callback+0xa94>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	2140      	movs	r1, #64	@ 0x40
 80035ea:	0018      	movs	r0, r3
 80035ec:	f005 fc4b 	bl	8008e86 <HAL_GPIO_WritePin>
 80035f0:	f000 fd1e 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80035f4:	4bdc      	ldr	r3, [pc, #880]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b18      	cmp	r3, #24
 80035fc:	d80f      	bhi.n	800361e <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80035fe:	2380      	movs	r3, #128	@ 0x80
 8003600:	0099      	lsls	r1, r3, #2
 8003602:	23a0      	movs	r3, #160	@ 0xa0
 8003604:	05db      	lsls	r3, r3, #23
 8003606:	2201      	movs	r2, #1
 8003608:	0018      	movs	r0, r3
 800360a:	f005 fc3c 	bl	8008e86 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800360e:	4bd7      	ldr	r3, [pc, #860]	@ (800396c <UART2_RX_transfer_complete_callback+0xa94>)
 8003610:	2200      	movs	r2, #0
 8003612:	2140      	movs	r1, #64	@ 0x40
 8003614:	0018      	movs	r0, r3
 8003616:	f005 fc36 	bl	8008e86 <HAL_GPIO_WritePin>
 800361a:	f000 fd09 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800361e:	4bd2      	ldr	r3, [pc, #840]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 8003620:	2201      	movs	r2, #1
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	f000 fd04 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003628:	4bce      	ldr	r3, [pc, #824]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2bfa      	cmp	r3, #250	@ 0xfa
 8003630:	d001      	beq.n	8003636 <UART2_RX_transfer_complete_callback+0x75e>
 8003632:	f000 fcfd 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8003636:	4bca      	ldr	r3, [pc, #808]	@ (8003960 <UART2_RX_transfer_complete_callback+0xa88>)
 8003638:	2212      	movs	r2, #18
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	f000 fcf8 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8003640:	4bc7      	ldr	r3, [pc, #796]	@ (8003960 <UART2_RX_transfer_complete_callback+0xa88>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b12      	cmp	r3, #18
 8003648:	d001      	beq.n	800364e <UART2_RX_transfer_complete_callback+0x776>
 800364a:	f000 fcf1 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800364e:	4bc5      	ldr	r3, [pc, #788]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2bf8      	cmp	r3, #248	@ 0xf8
 8003656:	d001      	beq.n	800365c <UART2_RX_transfer_complete_callback+0x784>
 8003658:	f000 fcea 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 800365c:	4bc4      	ldr	r3, [pc, #784]	@ (8003970 <UART2_RX_transfer_complete_callback+0xa98>)
 800365e:	0018      	movs	r0, r3
 8003660:	f001 fdec 	bl	800523c <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	0099      	lsls	r1, r3, #2
 8003668:	23a0      	movs	r3, #160	@ 0xa0
 800366a:	05db      	lsls	r3, r3, #23
 800366c:	2201      	movs	r2, #1
 800366e:	0018      	movs	r0, r3
 8003670:	f005 fc09 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003674:	4bbd      	ldr	r3, [pc, #756]	@ (800396c <UART2_RX_transfer_complete_callback+0xa94>)
 8003676:	2200      	movs	r2, #0
 8003678:	2140      	movs	r1, #64	@ 0x40
 800367a:	0018      	movs	r0, r3
 800367c:	f005 fc03 	bl	8008e86 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003680:	2380      	movs	r3, #128	@ 0x80
 8003682:	0099      	lsls	r1, r3, #2
 8003684:	23a0      	movs	r3, #160	@ 0xa0
 8003686:	05db      	lsls	r3, r3, #23
 8003688:	2200      	movs	r2, #0
 800368a:	0018      	movs	r0, r3
 800368c:	f005 fbfb 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003690:	4bb6      	ldr	r3, [pc, #728]	@ (800396c <UART2_RX_transfer_complete_callback+0xa94>)
 8003692:	2201      	movs	r2, #1
 8003694:	2140      	movs	r1, #64	@ 0x40
 8003696:	0018      	movs	r0, r3
 8003698:	f005 fbf5 	bl	8008e86 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800369c:	4bb0      	ldr	r3, [pc, #704]	@ (8003960 <UART2_RX_transfer_complete_callback+0xa88>)
 800369e:	2212      	movs	r2, #18
 80036a0:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80036a2:	4baf      	ldr	r3, [pc, #700]	@ (8003960 <UART2_RX_transfer_complete_callback+0xa88>)
 80036a4:	2208      	movs	r2, #8
 80036a6:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 80036a8:	4baf      	ldr	r3, [pc, #700]	@ (8003968 <UART2_RX_transfer_complete_callback+0xa90>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80036ae:	4bb1      	ldr	r3, [pc, #708]	@ (8003974 <UART2_RX_transfer_complete_callback+0xa9c>)
 80036b0:	2100      	movs	r1, #0
 80036b2:	0018      	movs	r0, r3
 80036b4:	f003 f917 	bl	80068e6 <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80036b8:	4baf      	ldr	r3, [pc, #700]	@ (8003978 <UART2_RX_transfer_complete_callback+0xaa0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80036be:	4aaf      	ldr	r2, [pc, #700]	@ (800397c <UART2_RX_transfer_complete_callback+0xaa4>)
 80036c0:	4bab      	ldr	r3, [pc, #684]	@ (8003970 <UART2_RX_transfer_complete_callback+0xa98>)
 80036c2:	0011      	movs	r1, r2
 80036c4:	0018      	movs	r0, r3
 80036c6:	f001 fc43 	bl	8004f50 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 80036ca:	4aad      	ldr	r2, [pc, #692]	@ (8003980 <UART2_RX_transfer_complete_callback+0xaa8>)
 80036cc:	4ba8      	ldr	r3, [pc, #672]	@ (8003970 <UART2_RX_transfer_complete_callback+0xa98>)
 80036ce:	0011      	movs	r1, r2
 80036d0:	0018      	movs	r0, r3
 80036d2:	f001 fc3d 	bl	8004f50 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 80036d6:	4bab      	ldr	r3, [pc, #684]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 80036d8:	2108      	movs	r1, #8
 80036da:	0018      	movs	r0, r3
 80036dc:	f003 f97e 	bl	80069dc <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80036e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003980 <UART2_RX_transfer_complete_callback+0xaa8>)
 80036e2:	2100      	movs	r1, #0
 80036e4:	0018      	movs	r0, r3
 80036e6:	f001 fdd5 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80036ea:	4aa7      	ldr	r2, [pc, #668]	@ (8003988 <UART2_RX_transfer_complete_callback+0xab0>)
 80036ec:	4ba4      	ldr	r3, [pc, #656]	@ (8003980 <UART2_RX_transfer_complete_callback+0xaa8>)
 80036ee:	0011      	movs	r1, r2
 80036f0:	0018      	movs	r0, r3
 80036f2:	f001 fec5 	bl	8005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80036f6:	4ba5      	ldr	r3, [pc, #660]	@ (800398c <UART2_RX_transfer_complete_callback+0xab4>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	001a      	movs	r2, r3
 80036fc:	49a4      	ldr	r1, [pc, #656]	@ (8003990 <UART2_RX_transfer_complete_callback+0xab8>)
 80036fe:	4ba5      	ldr	r3, [pc, #660]	@ (8003994 <UART2_RX_transfer_complete_callback+0xabc>)
 8003700:	0018      	movs	r0, r3
 8003702:	f003 fe0f 	bl	8007324 <HAL_ADC_Start_DMA>
 8003706:	f000 fc93 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800370a:	4ba3      	ldr	r3, [pc, #652]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d000      	beq.n	8003716 <UART2_RX_transfer_complete_callback+0x83e>
 8003714:	e29e      	b.n	8003c54 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8003716:	4ba1      	ldr	r3, [pc, #644]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d000      	beq.n	8003722 <UART2_RX_transfer_complete_callback+0x84a>
 8003720:	e0a3      	b.n	800386a <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003722:	4b9f      	ldr	r3, [pc, #636]	@ (80039a0 <UART2_RX_transfer_complete_callback+0xac8>)
 8003724:	0018      	movs	r0, r3
 8003726:	f7fe f812 	bl	800174e <Is_Data_Buffer_Empty>
 800372a:	0003      	movs	r3, r0
 800372c:	2b01      	cmp	r3, #1
 800372e:	d001      	beq.n	8003734 <UART2_RX_transfer_complete_callback+0x85c>
 8003730:	f000 fc7e 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003734:	4b8b      	ldr	r3, [pc, #556]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003736:	0018      	movs	r0, r3
 8003738:	f7fd fec8 	bl	80014cc <Is_Status_Byte>
 800373c:	0003      	movs	r3, r0
 800373e:	2b01      	cmp	r3, #1
 8003740:	d001      	beq.n	8003746 <UART2_RX_transfer_complete_callback+0x86e>
 8003742:	f000 fc75 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003746:	4b87      	ldr	r3, [pc, #540]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003748:	0018      	movs	r0, r3
 800374a:	f7fd fef1 	bl	8001530 <Is_PC_Status_Byte>
 800374e:	0003      	movs	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d134      	bne.n	80037be <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003754:	4b83      	ldr	r3, [pc, #524]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4b90      	ldr	r3, [pc, #576]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 800375c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800375e:	4b91      	ldr	r3, [pc, #580]	@ (80039a4 <UART2_RX_transfer_complete_callback+0xacc>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	4b7f      	ldr	r3, [pc, #508]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003766:	0011      	movs	r1, r2
 8003768:	0018      	movs	r0, r3
 800376a:	f7fd ffcf 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800376e:	0003      	movs	r3, r0
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10d      	bne.n	8003790 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 8003774:	4b7b      	ldr	r3, [pc, #492]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4b87      	ldr	r3, [pc, #540]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 800377c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	005a      	lsls	r2, r3, #1
 8003782:	4b80      	ldr	r3, [pc, #512]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f003 f928 	bl	80069dc <Set_Status_Bit>
 800378c:	f000 fc50 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003790:	4b7c      	ldr	r3, [pc, #496]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 8003792:	0018      	movs	r0, r3
 8003794:	f7fe f871 	bl	800187a <Is_OMNI_On>
 8003798:	0003      	movs	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d001      	beq.n	80037a2 <UART2_RX_transfer_complete_callback+0x8ca>
 800379e:	f000 fc47 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80037a2:	4b70      	ldr	r3, [pc, #448]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	4b7b      	ldr	r3, [pc, #492]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 80037aa:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037ac:	2380      	movs	r3, #128	@ 0x80
 80037ae:	005a      	lsls	r2, r3, #1
 80037b0:	4b74      	ldr	r3, [pc, #464]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f003 f911 	bl	80069dc <Set_Status_Bit>
 80037ba:	f000 fc39 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80037be:	4b69      	ldr	r3, [pc, #420]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037c0:	0018      	movs	r0, r3
 80037c2:	f7fd fed1 	bl	8001568 <Is_CC_Status_Byte>
 80037c6:	0003      	movs	r3, r0
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d134      	bne.n	8003836 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80037cc:	4b65      	ldr	r3, [pc, #404]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	4b72      	ldr	r3, [pc, #456]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 80037d4:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80037d6:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <UART2_RX_transfer_complete_callback+0xacc>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	4b61      	ldr	r3, [pc, #388]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd ff93 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80037e6:	0003      	movs	r3, r0
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d10d      	bne.n	8003808 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 80037ec:	4b5d      	ldr	r3, [pc, #372]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4b69      	ldr	r3, [pc, #420]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 80037f4:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	005a      	lsls	r2, r3, #1
 80037fa:	4b62      	ldr	r3, [pc, #392]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f003 f8ec 	bl	80069dc <Set_Status_Bit>
 8003804:	f000 fc14 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003808:	4b5e      	ldr	r3, [pc, #376]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 800380a:	0018      	movs	r0, r3
 800380c:	f7fe f835 	bl	800187a <Is_OMNI_On>
 8003810:	0003      	movs	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d001      	beq.n	800381a <UART2_RX_transfer_complete_callback+0x942>
 8003816:	f000 fc0b 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800381a:	4b52      	ldr	r3, [pc, #328]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b5d      	ldr	r3, [pc, #372]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 8003822:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	005a      	lsls	r2, r3, #1
 8003828:	4b56      	ldr	r3, [pc, #344]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 800382a:	0011      	movs	r1, r2
 800382c:	0018      	movs	r0, r3
 800382e:	f003 f8d5 	bl	80069dc <Set_Status_Bit>
 8003832:	f000 fbfd 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003836:	4b4b      	ldr	r3, [pc, #300]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003838:	0018      	movs	r0, r3
 800383a:	f7fd ff57 	bl	80016ec <Is_Sysex_Start_Status_Byte>
 800383e:	0003      	movs	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d001      	beq.n	8003848 <UART2_RX_transfer_complete_callback+0x970>
 8003844:	f000 fbf4 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003848:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	4b52      	ldr	r3, [pc, #328]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 8003850:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 8003852:	4b52      	ldr	r3, [pc, #328]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003858:	2380      	movs	r3, #128	@ 0x80
 800385a:	005a      	lsls	r2, r3, #1
 800385c:	4b49      	ldr	r3, [pc, #292]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f003 f8bb 	bl	80069dc <Set_Status_Bit>
 8003866:	f000 fbe3 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 800386a:	4b4c      	ldr	r3, [pc, #304]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <UART2_RX_transfer_complete_callback+0x9a0>
 8003874:	f000 fbdc 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 8003878:	4b3a      	ldr	r3, [pc, #232]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 800387a:	0018      	movs	r0, r3
 800387c:	f7fd fe3f 	bl	80014fe <Is_Data_Byte>
 8003880:	0003      	movs	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d000      	beq.n	8003888 <UART2_RX_transfer_complete_callback+0x9b0>
 8003886:	e151      	b.n	8003b2c <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003888:	2380      	movs	r3, #128	@ 0x80
 800388a:	005a      	lsls	r2, r3, #1
 800388c:	4b3d      	ldr	r3, [pc, #244]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f003 f8a3 	bl	80069dc <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8003896:	4b41      	ldr	r3, [pc, #260]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 8003898:	0018      	movs	r0, r3
 800389a:	f7fd fe49 	bl	8001530 <Is_PC_Status_Byte>
 800389e:	0003      	movs	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d143      	bne.n	800392c <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80038a4:	4b3f      	ldr	r3, [pc, #252]	@ (80039a4 <UART2_RX_transfer_complete_callback+0xacc>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b3c      	ldr	r3, [pc, #240]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 80038ac:	0011      	movs	r1, r2
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fd ff2c 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80038b4:	0003      	movs	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d008      	beq.n	80038cc <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80038ba:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 80038bc:	0018      	movs	r0, r3
 80038be:	f7fd ffdc 	bl	800187a <Is_OMNI_On>
 80038c2:	0003      	movs	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d001      	beq.n	80038cc <UART2_RX_transfer_complete_callback+0x9f4>
 80038c8:	f000 fbb2 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80038cc:	4b34      	ldr	r3, [pc, #208]	@ (80039a0 <UART2_RX_transfer_complete_callback+0xac8>)
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fd ff3d 	bl	800174e <Is_Data_Buffer_Empty>
 80038d4:	0003      	movs	r3, r0
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d001      	beq.n	80038de <UART2_RX_transfer_complete_callback+0xa06>
 80038da:	f000 fba9 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80038de:	4b21      	ldr	r3, [pc, #132]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80038e0:	2104      	movs	r1, #4
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fd ff81 	bl	80017ea <Is_Program_Change_Data_Byte_In_Range>
 80038e8:	0003      	movs	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d10f      	bne.n	800390e <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 80038ee:	f7fd fcf9 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80038f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	3301      	adds	r3, #1
 80038fa:	b2da      	uxtb	r2, r3
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <UART2_RX_transfer_complete_callback+0xad0>)
 80038fe:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003900:	f7fc fe32 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003904:	4b1f      	ldr	r3, [pc, #124]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 8003906:	2108      	movs	r1, #8
 8003908:	0018      	movs	r0, r3
 800390a:	f003 f879 	bl	8006a00 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800390e:	4b24      	ldr	r3, [pc, #144]	@ (80039a0 <UART2_RX_transfer_complete_callback+0xac8>)
 8003910:	0018      	movs	r0, r3
 8003912:	f7fd ff4c 	bl	80017ae <Clear_Data_Buffer>
								active_status_byte = 0;
 8003916:	4b20      	ldr	r3, [pc, #128]	@ (8003998 <UART2_RX_transfer_complete_callback+0xac0>)
 8003918:	2200      	movs	r2, #0
 800391a:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800391c:	4a19      	ldr	r2, [pc, #100]	@ (8003984 <UART2_RX_transfer_complete_callback+0xaac>)
 800391e:	4b23      	ldr	r3, [pc, #140]	@ (80039ac <UART2_RX_transfer_complete_callback+0xad4>)
 8003920:	0011      	movs	r1, r2
 8003922:	0018      	movs	r0, r3
 8003924:	f7fd ffc3 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>
 8003928:	f000 fb82 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 800392c:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <UART2_RX_transfer_complete_callback+0xac4>)
 800392e:	0018      	movs	r0, r3
 8003930:	f7fd fe1a 	bl	8001568 <Is_CC_Status_Byte>
 8003934:	0003      	movs	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <UART2_RX_transfer_complete_callback+0xa66>
 800393a:	f000 fb79 	bl	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800393e:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <UART2_RX_transfer_complete_callback+0xac8>)
 8003940:	0018      	movs	r0, r3
 8003942:	f7fd ff04 	bl	800174e <Is_Data_Buffer_Empty>
 8003946:	0003      	movs	r3, r0
 8003948:	2b01      	cmp	r3, #1
 800394a:	d131      	bne.n	80039b0 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800394c:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <UART2_RX_transfer_complete_callback+0xa8c>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	b2da      	uxtb	r2, r3
 8003952:	4b13      	ldr	r3, [pc, #76]	@ (80039a0 <UART2_RX_transfer_complete_callback+0xac8>)
 8003954:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <UART2_RX_transfer_complete_callback+0xad4>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	e368      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	20000430 	.word	0x20000430
 8003964:	20000594 	.word	0x20000594
 8003968:	20000cfe 	.word	0x20000cfe
 800396c:	50000800 	.word	0x50000800
 8003970:	20000d68 	.word	0x20000d68
 8003974:	20000988 	.word	0x20000988
 8003978:	20000444 	.word	0x20000444
 800397c:	20000d8c 	.word	0x20000d8c
 8003980:	20000d20 	.word	0x20000d20
 8003984:	20000d00 	.word	0x20000d00
 8003988:	20000028 	.word	0x20000028
 800398c:	0800ea38 	.word	0x0800ea38
 8003990:	20000d14 	.word	0x20000d14
 8003994:	200005b4 	.word	0x200005b4
 8003998:	20000583 	.word	0x20000583
 800399c:	20000584 	.word	0x20000584
 80039a0:	20000588 	.word	0x20000588
 80039a4:	20000582 	.word	0x20000582
 80039a8:	20000554 	.word	0x20000554
 80039ac:	20000d08 	.word	0x20000d08

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80039b0:	4bd6      	ldr	r3, [pc, #856]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	4bd6      	ldr	r3, [pc, #856]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 80039b8:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80039ba:	4ad6      	ldr	r2, [pc, #856]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039bc:	4bd6      	ldr	r3, [pc, #856]	@ (8003d18 <UART2_RX_transfer_complete_callback+0xe40>)
 80039be:	0011      	movs	r1, r2
 80039c0:	0018      	movs	r0, r3
 80039c2:	f7fd ff74 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80039c6:	4bd2      	ldr	r3, [pc, #840]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7fd fde9 	bl	80015a0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80039ce:	0003      	movs	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d14c      	bne.n	8003a6e <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 80039d4:	4bd1      	ldr	r3, [pc, #836]	@ (8003d1c <UART2_RX_transfer_complete_callback+0xe44>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4bd1      	ldr	r3, [pc, #836]	@ (8003d20 <UART2_RX_transfer_complete_callback+0xe48>)
 80039dc:	0011      	movs	r1, r2
 80039de:	0018      	movs	r0, r3
 80039e0:	f7fd fe94 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80039e4:	0003      	movs	r3, r0
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d139      	bne.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80039ea:	4ace      	ldr	r2, [pc, #824]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 80039ec:	4bc8      	ldr	r3, [pc, #800]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 80039ee:	0011      	movs	r1, r2
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fd fe34 	bl	800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80039f6:	0003      	movs	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d130      	bne.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80039fc:	4bc4      	ldr	r3, [pc, #784]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 80039fe:	785b      	ldrb	r3, [r3, #1]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b79      	cmp	r3, #121	@ 0x79
 8003a04:	d10b      	bne.n	8003a1e <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003a06:	4ac8      	ldr	r2, [pc, #800]	@ (8003d28 <UART2_RX_transfer_complete_callback+0xe50>)
 8003a08:	4bc8      	ldr	r3, [pc, #800]	@ (8003d2c <UART2_RX_transfer_complete_callback+0xe54>)
 8003a0a:	0011      	movs	r1, r2
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f7fd ff69 	bl	80018e4 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003a12:	4bc0      	ldr	r3, [pc, #768]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a14:	2108      	movs	r1, #8
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 fff2 	bl	8006a00 <Clear_Status_Bit>
 8003a1c:	e01f      	b.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003a1e:	4bbc      	ldr	r3, [pc, #752]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a20:	785b      	ldrb	r3, [r3, #1]
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b7a      	cmp	r3, #122	@ 0x7a
 8003a26:	d107      	bne.n	8003a38 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8003a28:	f7fd ffb6 	bl	8001998 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003a2c:	4bb9      	ldr	r3, [pc, #740]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a2e:	2108      	movs	r1, #8
 8003a30:	0018      	movs	r0, r3
 8003a32:	f002 ffe5 	bl	8006a00 <Clear_Status_Bit>
 8003a36:	e012      	b.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003a38:	4bb5      	ldr	r3, [pc, #724]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b7c      	cmp	r3, #124	@ 0x7c
 8003a40:	d104      	bne.n	8003a4c <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 8003a42:	4bb4      	ldr	r3, [pc, #720]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a44:	0018      	movs	r0, r3
 8003a46:	f7fd ffdf 	bl	8001a08 <Set_OMNI_Off>
 8003a4a:	e008      	b.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003a4c:	4bb0      	ldr	r3, [pc, #704]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a4e:	785b      	ldrb	r3, [r3, #1]
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b7d      	cmp	r3, #125	@ 0x7d
 8003a54:	d103      	bne.n	8003a5e <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003a56:	4baf      	ldr	r3, [pc, #700]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a58:	0018      	movs	r0, r3
 8003a5a:	f7fd ffe5 	bl	8001a28 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 8003a5e:	4bb4      	ldr	r3, [pc, #720]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003a64:	4baa      	ldr	r3, [pc, #680]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f7fd fea1 	bl	80017ae <Clear_Data_Buffer>
 8003a6c:	e2e0      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003a6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fd fdc1 	bl	80015f8 <Is_Utilised_CC_First_Data_Byte>
 8003a76:	0003      	movs	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d14f      	bne.n	8003b1c <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003a7c:	4ba7      	ldr	r3, [pc, #668]	@ (8003d1c <UART2_RX_transfer_complete_callback+0xe44>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4ba7      	ldr	r3, [pc, #668]	@ (8003d20 <UART2_RX_transfer_complete_callback+0xe48>)
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fd fe40 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d006      	beq.n	8003aa0 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003a92:	4ba0      	ldr	r3, [pc, #640]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7fd fef0 	bl	800187a <Is_OMNI_On>
 8003a9a:	0003      	movs	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d135      	bne.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003aa0:	4b9b      	ldr	r3, [pc, #620]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b14      	cmp	r3, #20
 8003aa8:	d104      	bne.n	8003ab4 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003aac:	0018      	movs	r0, r3
 8003aae:	f7fd fb97 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003ab2:	e02b      	b.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003ab4:	4b96      	ldr	r3, [pc, #600]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b15      	cmp	r3, #21
 8003abc:	d109      	bne.n	8003ad2 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003abe:	4b99      	ldr	r3, [pc, #612]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003ac0:	0018      	movs	r0, r3
 8003ac2:	f7fd fba7 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003ac6:	4b93      	ldr	r3, [pc, #588]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ac8:	2108      	movs	r1, #8
 8003aca:	0018      	movs	r0, r3
 8003acc:	f002 ff98 	bl	8006a00 <Clear_Status_Bit>
 8003ad0:	e01c      	b.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003ad2:	4b8f      	ldr	r3, [pc, #572]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b16      	cmp	r3, #22
 8003ada:	d104      	bne.n	8003ae6 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003adc:	4b91      	ldr	r3, [pc, #580]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003ade:	0018      	movs	r0, r3
 8003ae0:	f7fd fbb2 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003ae4:	e012      	b.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003ae6:	4b8a      	ldr	r3, [pc, #552]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b17      	cmp	r3, #23
 8003aee:	d104      	bne.n	8003afa <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003af0:	4b8c      	ldr	r3, [pc, #560]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7fd fbc2 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003af8:	e008      	b.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003afa:	4b85      	ldr	r3, [pc, #532]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b18      	cmp	r3, #24
 8003b02:	d103      	bne.n	8003b0c <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003b04:	4b87      	ldr	r3, [pc, #540]	@ (8003d24 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fd fbd2 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003b0c:	4b88      	ldr	r3, [pc, #544]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003b12:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7fd fe4a 	bl	80017ae <Clear_Data_Buffer>
 8003b1a:	e289      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003b1c:	4b84      	ldr	r3, [pc, #528]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003b22:	4b7b      	ldr	r3, [pc, #492]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7fd fe42 	bl	80017ae <Clear_Data_Buffer>
 8003b2a:	e281      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003b2c:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f7fd fe3d 	bl	80017ae <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003b34:	4a77      	ldr	r2, [pc, #476]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b36:	4b78      	ldr	r3, [pc, #480]	@ (8003d18 <UART2_RX_transfer_complete_callback+0xe40>)
 8003b38:	0011      	movs	r1, r2
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fd feb7 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003b40:	4b72      	ldr	r3, [pc, #456]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7fd fcf4 	bl	8001530 <Is_PC_Status_Byte>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d131      	bne.n	8003bb2 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b4e:	4b6f      	ldr	r3, [pc, #444]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	4b72      	ldr	r3, [pc, #456]	@ (8003d20 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b56:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b58:	4b70      	ldr	r3, [pc, #448]	@ (8003d1c <UART2_RX_transfer_complete_callback+0xe44>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b6b      	ldr	r3, [pc, #428]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7fd fdd2 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d10c      	bne.n	8003b88 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b6e:	4b67      	ldr	r3, [pc, #412]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	4b6e      	ldr	r3, [pc, #440]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b76:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	005a      	lsls	r2, r3, #1
 8003b7c:	4b65      	ldr	r3, [pc, #404]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b7e:	0011      	movs	r1, r2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f002 ff2b 	bl	80069dc <Set_Status_Bit>
 8003b86:	e253      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003b88:	4b62      	ldr	r3, [pc, #392]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7fd fe75 	bl	800187a <Is_OMNI_On>
 8003b90:	0003      	movs	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d000      	beq.n	8003b98 <UART2_RX_transfer_complete_callback+0xcc0>
 8003b96:	e24b      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003b98:	4b5c      	ldr	r3, [pc, #368]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	4b64      	ldr	r3, [pc, #400]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ba0:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003ba2:	2380      	movs	r3, #128	@ 0x80
 8003ba4:	005a      	lsls	r2, r3, #1
 8003ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f002 ff16 	bl	80069dc <Set_Status_Bit>
 8003bb0:	e23e      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003bb2:	4b56      	ldr	r3, [pc, #344]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f7fd fcd7 	bl	8001568 <Is_CC_Status_Byte>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d131      	bne.n	8003c24 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003bc0:	4b52      	ldr	r3, [pc, #328]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	4b56      	ldr	r3, [pc, #344]	@ (8003d20 <UART2_RX_transfer_complete_callback+0xe48>)
 8003bc8:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003bca:	4b54      	ldr	r3, [pc, #336]	@ (8003d1c <UART2_RX_transfer_complete_callback+0xe44>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003bd2:	0011      	movs	r1, r2
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	f7fd fd99 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003bda:	0003      	movs	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d10c      	bne.n	8003bfa <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003be0:	4b4a      	ldr	r3, [pc, #296]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	4b52      	ldr	r3, [pc, #328]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003be8:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bea:	2380      	movs	r3, #128	@ 0x80
 8003bec:	005a      	lsls	r2, r3, #1
 8003bee:	4b49      	ldr	r3, [pc, #292]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f002 fef2 	bl	80069dc <Set_Status_Bit>
 8003bf8:	e21a      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003bfa:	4b46      	ldr	r3, [pc, #280]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fd fe3c 	bl	800187a <Is_OMNI_On>
 8003c02:	0003      	movs	r3, r0
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d000      	beq.n	8003c0a <UART2_RX_transfer_complete_callback+0xd32>
 8003c08:	e212      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003c0a:	4b40      	ldr	r3, [pc, #256]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b2da      	uxtb	r2, r3
 8003c10:	4b47      	ldr	r3, [pc, #284]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c12:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003c14:	2380      	movs	r3, #128	@ 0x80
 8003c16:	005a      	lsls	r2, r3, #1
 8003c18:	4b3e      	ldr	r3, [pc, #248]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c1a:	0011      	movs	r1, r2
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f002 fedd 	bl	80069dc <Set_Status_Bit>
 8003c22:	e205      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c26:	0018      	movs	r0, r3
 8003c28:	f7fd fd60 	bl	80016ec <Is_Sysex_Start_Status_Byte>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d000      	beq.n	8003c34 <UART2_RX_transfer_complete_callback+0xd5c>
 8003c32:	e1fd      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003c34:	4b35      	ldr	r3, [pc, #212]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c3c:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003c3e:	4b38      	ldr	r3, [pc, #224]	@ (8003d20 <UART2_RX_transfer_complete_callback+0xe48>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003c44:	2380      	movs	r3, #128	@ 0x80
 8003c46:	005a      	lsls	r2, r3, #1
 8003c48:	4b32      	ldr	r3, [pc, #200]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c4a:	0011      	movs	r1, r2
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f002 fec5 	bl	80069dc <Set_Status_Bit>
 8003c52:	e1ed      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003c54:	4b36      	ldr	r3, [pc, #216]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d100      	bne.n	8003c60 <UART2_RX_transfer_complete_callback+0xd88>
 8003c5e:	e1e7      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003c60:	2380      	movs	r3, #128	@ 0x80
 8003c62:	009a      	lsls	r2, r3, #2
 8003c64:	4b2b      	ldr	r3, [pc, #172]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c66:	0011      	movs	r1, r2
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f002 fea3 	bl	80069b4 <Get_Status_Bit>
 8003c6e:	0003      	movs	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10d      	bne.n	8003c90 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003c74:	4b2e      	ldr	r3, [pc, #184]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003c7a:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7fd fd96 	bl	80017ae <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003c82:	4a24      	ldr	r2, [pc, #144]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c84:	4b24      	ldr	r3, [pc, #144]	@ (8003d18 <UART2_RX_transfer_complete_callback+0xe40>)
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7fd fe10 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>
 8003c8e:	e1cf      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003c90:	4b1e      	ldr	r3, [pc, #120]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7fd fc33 	bl	80014fe <Is_Data_Byte>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d000      	beq.n	8003ca0 <UART2_RX_transfer_complete_callback+0xdc8>
 8003c9e:	e133      	b.n	8003f08 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7fd fc44 	bl	8001530 <Is_PC_Status_Byte>
 8003ca8:	0003      	movs	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d144      	bne.n	8003d38 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fd fd4c 	bl	800174e <Is_Data_Buffer_Empty>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d000      	beq.n	8003cbe <UART2_RX_transfer_complete_callback+0xde6>
 8003cbc:	e1b8      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003cbe:	4b13      	ldr	r3, [pc, #76]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003cc0:	2104      	movs	r1, #4
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7fd fd91 	bl	80017ea <Is_Program_Change_Data_Byte_In_Range>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10f      	bne.n	8003cee <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8003cce:	f7fd fb09 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <UART2_RX_transfer_complete_callback+0xe34>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	3301      	adds	r3, #1
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	4b15      	ldr	r3, [pc, #84]	@ (8003d34 <UART2_RX_transfer_complete_callback+0xe5c>)
 8003cde:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003ce0:	f7fc fc42 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ce6:	2108      	movs	r1, #8
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f002 fe89 	bl	8006a00 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003cee:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <UART2_RX_transfer_complete_callback+0xe38>)
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7fd fd5c 	bl	80017ae <Clear_Data_Buffer>
							active_status_byte = 0;
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <UART2_RX_transfer_complete_callback+0xe58>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003cfc:	4a05      	ldr	r2, [pc, #20]	@ (8003d14 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <UART2_RX_transfer_complete_callback+0xe40>)
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fd fdd3 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>
 8003d08:	e192      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	20000594 	.word	0x20000594
 8003d10:	20000588 	.word	0x20000588
 8003d14:	20000d00 	.word	0x20000d00
 8003d18:	20000d08 	.word	0x20000d08
 8003d1c:	20000582 	.word	0x20000582
 8003d20:	20000584 	.word	0x20000584
 8003d24:	20000589 	.word	0x20000589
 8003d28:	20000028 	.word	0x20000028
 8003d2c:	20000d20 	.word	0x20000d20
 8003d30:	20000583 	.word	0x20000583
 8003d34:	20000554 	.word	0x20000554

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003d38:	4bc4      	ldr	r3, [pc, #784]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f7fd fc14 	bl	8001568 <Is_CC_Status_Byte>
 8003d40:	0003      	movs	r3, r0
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d000      	beq.n	8003d48 <UART2_RX_transfer_complete_callback+0xe70>
 8003d46:	e0d2      	b.n	8003eee <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003d48:	4bc1      	ldr	r3, [pc, #772]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f7fd fcff 	bl	800174e <Is_Data_Buffer_Empty>
 8003d50:	0003      	movs	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d108      	bne.n	8003d68 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003d56:	4bbf      	ldr	r3, [pc, #764]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	4bbc      	ldr	r3, [pc, #752]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d5e:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003d60:	4bbd      	ldr	r3, [pc, #756]	@ (8004058 <UART2_RX_transfer_complete_callback+0x1180>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
 8003d66:	e163      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003d68:	4bba      	ldr	r3, [pc, #744]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4bb8      	ldr	r3, [pc, #736]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d70:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003d72:	4aba      	ldr	r2, [pc, #744]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003d74:	4bb8      	ldr	r3, [pc, #736]	@ (8004058 <UART2_RX_transfer_complete_callback+0x1180>)
 8003d76:	0011      	movs	r1, r2
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fd fd98 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d7e:	4bb7      	ldr	r3, [pc, #732]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003d80:	2108      	movs	r1, #8
 8003d82:	0018      	movs	r0, r3
 8003d84:	f002 fe3c 	bl	8006a00 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003d88:	4bb1      	ldr	r3, [pc, #708]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7fd fc08 	bl	80015a0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003d90:	0003      	movs	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d14c      	bne.n	8003e30 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003d96:	4bb2      	ldr	r3, [pc, #712]	@ (8004060 <UART2_RX_transfer_complete_callback+0x1188>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b2da      	uxtb	r2, r3
 8003d9c:	4bab      	ldr	r3, [pc, #684]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003d9e:	0011      	movs	r1, r2
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fd fcb3 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003da6:	0003      	movs	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d139      	bne.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003dac:	4aad      	ldr	r2, [pc, #692]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003dae:	4ba8      	ldr	r3, [pc, #672]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003db0:	0011      	movs	r1, r2
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fd fc53 	bl	800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003db8:	0003      	movs	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d130      	bne.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003dbe:	4ba4      	ldr	r3, [pc, #656]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b79      	cmp	r3, #121	@ 0x79
 8003dc6:	d10b      	bne.n	8003de0 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003dc8:	4aa7      	ldr	r2, [pc, #668]	@ (8004068 <UART2_RX_transfer_complete_callback+0x1190>)
 8003dca:	4ba8      	ldr	r3, [pc, #672]	@ (800406c <UART2_RX_transfer_complete_callback+0x1194>)
 8003dcc:	0011      	movs	r1, r2
 8003dce:	0018      	movs	r0, r3
 8003dd0:	f7fd fd88 	bl	80018e4 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003dd4:	4ba1      	ldr	r3, [pc, #644]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003dd6:	2108      	movs	r1, #8
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f002 fe11 	bl	8006a00 <Clear_Status_Bit>
 8003dde:	e01f      	b.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003de0:	4b9b      	ldr	r3, [pc, #620]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b7a      	cmp	r3, #122	@ 0x7a
 8003de8:	d107      	bne.n	8003dfa <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003dea:	f7fd fdd5 	bl	8001998 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003dee:	4b9b      	ldr	r3, [pc, #620]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003df0:	2108      	movs	r1, #8
 8003df2:	0018      	movs	r0, r3
 8003df4:	f002 fe04 	bl	8006a00 <Clear_Status_Bit>
 8003df8:	e012      	b.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003dfa:	4b95      	ldr	r3, [pc, #596]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b7c      	cmp	r3, #124	@ 0x7c
 8003e02:	d104      	bne.n	8003e0e <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003e04:	4b95      	ldr	r3, [pc, #596]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7fd fdfe 	bl	8001a08 <Set_OMNI_Off>
 8003e0c:	e008      	b.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003e0e:	4b90      	ldr	r3, [pc, #576]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e10:	785b      	ldrb	r3, [r3, #1]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b7d      	cmp	r3, #125	@ 0x7d
 8003e16:	d103      	bne.n	8003e20 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003e18:	4b90      	ldr	r3, [pc, #576]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	f7fd fe04 	bl	8001a28 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003e20:	4b8a      	ldr	r3, [pc, #552]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e26:	4b8a      	ldr	r3, [pc, #552]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fd fcc0 	bl	80017ae <Clear_Data_Buffer>
 8003e2e:	e0ff      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003e30:	4b87      	ldr	r3, [pc, #540]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e32:	0018      	movs	r0, r3
 8003e34:	f7fd fbe0 	bl	80015f8 <Is_Utilised_CC_First_Data_Byte>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d14f      	bne.n	8003ede <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003e3e:	4b88      	ldr	r3, [pc, #544]	@ (8004060 <UART2_RX_transfer_complete_callback+0x1188>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	4b81      	ldr	r3, [pc, #516]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003e46:	0011      	movs	r1, r2
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fd fc5f 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d006      	beq.n	8003e62 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003e54:	4b81      	ldr	r3, [pc, #516]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd fd0f 	bl	800187a <Is_OMNI_On>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d135      	bne.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003e62:	4b7b      	ldr	r3, [pc, #492]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b14      	cmp	r3, #20
 8003e6a:	d104      	bne.n	8003e76 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e6c:	4b7d      	ldr	r3, [pc, #500]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7fd f9b6 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003e74:	e02b      	b.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003e76:	4b76      	ldr	r3, [pc, #472]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b15      	cmp	r3, #21
 8003e7e:	d109      	bne.n	8003e94 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e80:	4b78      	ldr	r3, [pc, #480]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fd f9c6 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003e88:	4b74      	ldr	r3, [pc, #464]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003e8a:	2108      	movs	r1, #8
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f002 fdb7 	bl	8006a00 <Clear_Status_Bit>
 8003e92:	e01c      	b.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003e94:	4b6e      	ldr	r3, [pc, #440]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b16      	cmp	r3, #22
 8003e9c:	d104      	bne.n	8003ea8 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e9e:	4b71      	ldr	r3, [pc, #452]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f7fd f9d1 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003ea6:	e012      	b.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003ea8:	4b69      	ldr	r3, [pc, #420]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b17      	cmp	r3, #23
 8003eb0:	d104      	bne.n	8003ebc <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003eb2:	4b6c      	ldr	r3, [pc, #432]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f7fd f9e1 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003eba:	e008      	b.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003ebc:	4b64      	ldr	r3, [pc, #400]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b18      	cmp	r3, #24
 8003ec4:	d103      	bne.n	8003ece <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003ec6:	4b67      	ldr	r3, [pc, #412]	@ (8004064 <UART2_RX_transfer_complete_callback+0x118c>)
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fd f9f1 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003ece:	4b5f      	ldr	r3, [pc, #380]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003ed4:	4b5e      	ldr	r3, [pc, #376]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fd fc69 	bl	80017ae <Clear_Data_Buffer>
 8003edc:	e0a8      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003ede:	4b5b      	ldr	r3, [pc, #364]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003ee4:	4b5a      	ldr	r3, [pc, #360]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fc61 	bl	80017ae <Clear_Data_Buffer>
 8003eec:	e0a0      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003eee:	4b57      	ldr	r3, [pc, #348]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fd fbfb 	bl	80016ec <Is_Sysex_Start_Status_Byte>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d000      	beq.n	8003efe <UART2_RX_transfer_complete_callback+0x1026>
 8003efc:	e098      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003efe:	4b54      	ldr	r3, [pc, #336]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fd fc24 	bl	800174e <Is_Data_Buffer_Empty>
 8003f06:	e093      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003f08:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <UART2_RX_transfer_complete_callback+0x1178>)
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fd fc4f 	bl	80017ae <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003f10:	4a52      	ldr	r2, [pc, #328]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003f12:	4b51      	ldr	r3, [pc, #324]	@ (8004058 <UART2_RX_transfer_complete_callback+0x1180>)
 8003f14:	0011      	movs	r1, r2
 8003f16:	0018      	movs	r0, r3
 8003f18:	f7fd fcc9 	bl	80018ae <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f1e:	0018      	movs	r0, r3
 8003f20:	f7fd fb06 	bl	8001530 <Is_PC_Status_Byte>
 8003f24:	0003      	movs	r3, r0
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d130      	bne.n	8003f8c <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	4b4f      	ldr	r3, [pc, #316]	@ (8004070 <UART2_RX_transfer_complete_callback+0x1198>)
 8003f32:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003f34:	4b4a      	ldr	r3, [pc, #296]	@ (8004060 <UART2_RX_transfer_complete_callback+0x1188>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	4b46      	ldr	r3, [pc, #280]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7fd fbe4 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003f44:	0003      	movs	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d10c      	bne.n	8003f64 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003f4a:	4b42      	ldr	r3, [pc, #264]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	4b3e      	ldr	r3, [pc, #248]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003f52:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f54:	2380      	movs	r3, #128	@ 0x80
 8003f56:	005a      	lsls	r2, r3, #1
 8003f58:	4b40      	ldr	r3, [pc, #256]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003f5a:	0011      	movs	r1, r2
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f002 fd3d 	bl	80069dc <Set_Status_Bit>
 8003f62:	e065      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f64:	4b3d      	ldr	r3, [pc, #244]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7fd fc87 	bl	800187a <Is_OMNI_On>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d15e      	bne.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f72:	4b38      	ldr	r3, [pc, #224]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b34      	ldr	r3, [pc, #208]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003f7a:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f7c:	2380      	movs	r3, #128	@ 0x80
 8003f7e:	005a      	lsls	r2, r3, #1
 8003f80:	4b36      	ldr	r3, [pc, #216]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003f82:	0011      	movs	r1, r2
 8003f84:	0018      	movs	r0, r3
 8003f86:	f002 fd29 	bl	80069dc <Set_Status_Bit>
 8003f8a:	e051      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003f8c:	4b31      	ldr	r3, [pc, #196]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f7fd faea 	bl	8001568 <Is_CC_Status_Byte>
 8003f94:	0003      	movs	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d130      	bne.n	8003ffc <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8003f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	4b33      	ldr	r3, [pc, #204]	@ (8004070 <UART2_RX_transfer_complete_callback+0x1198>)
 8003fa2:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8004060 <UART2_RX_transfer_complete_callback+0x1188>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4b2a      	ldr	r3, [pc, #168]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fac:	0011      	movs	r1, r2
 8003fae:	0018      	movs	r0, r3
 8003fb0:	f7fd fbac 	bl	800170c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10c      	bne.n	8003fd4 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8003fba:	4b26      	ldr	r3, [pc, #152]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	4b22      	ldr	r3, [pc, #136]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003fc2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	005a      	lsls	r2, r3, #1
 8003fc8:	4b24      	ldr	r3, [pc, #144]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003fca:	0011      	movs	r1, r2
 8003fcc:	0018      	movs	r0, r3
 8003fce:	f002 fd05 	bl	80069dc <Set_Status_Bit>
 8003fd2:	e02d      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003fd4:	4b21      	ldr	r3, [pc, #132]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fd fc4f 	bl	800187a <Is_OMNI_On>
 8003fdc:	0003      	movs	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d126      	bne.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	4b18      	ldr	r3, [pc, #96]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8003fea:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003fec:	2380      	movs	r3, #128	@ 0x80
 8003fee:	005a      	lsls	r2, r3, #1
 8003ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f002 fcf1 	bl	80069dc <Set_Status_Bit>
 8003ffa:	e019      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003ffc:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7fd fb74 	bl	80016ec <Is_Sysex_Start_Status_Byte>
 8004004:	0003      	movs	r3, r0
 8004006:	2b01      	cmp	r3, #1
 8004008:	d112      	bne.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <UART2_RX_transfer_complete_callback+0x1174>)
 8004012:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8004014:	4b16      	ldr	r3, [pc, #88]	@ (8004070 <UART2_RX_transfer_complete_callback+0x1198>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800401a:	2380      	movs	r3, #128	@ 0x80
 800401c:	005a      	lsls	r2, r3, #1
 800401e:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <UART2_RX_transfer_complete_callback+0x1184>)
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f002 fcda 	bl	80069dc <Set_Status_Bit>
 8004028:	e002      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800402a:	46c0      	nop			@ (mov r8, r8)
 800402c:	e000      	b.n	8004030 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800402e:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8004030:	4b08      	ldr	r3, [pc, #32]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8004036:	4907      	ldr	r1, [pc, #28]	@ (8004054 <UART2_RX_transfer_complete_callback+0x117c>)
 8004038:	4b0e      	ldr	r3, [pc, #56]	@ (8004074 <UART2_RX_transfer_complete_callback+0x119c>)
 800403a:	2201      	movs	r2, #1
 800403c:	0018      	movs	r0, r3
 800403e:	f008 fd75 	bl	800cb2c <HAL_UART_Receive_DMA>
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b002      	add	sp, #8
 8004048:	bd80      	pop	{r7, pc}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	20000583 	.word	0x20000583
 8004050:	20000588 	.word	0x20000588
 8004054:	20000594 	.word	0x20000594
 8004058:	20000d08 	.word	0x20000d08
 800405c:	20000d00 	.word	0x20000d00
 8004060:	20000582 	.word	0x20000582
 8004064:	20000589 	.word	0x20000589
 8004068:	20000028 	.word	0x20000028
 800406c:	20000d20 	.word	0x20000d20
 8004070:	20000584 	.word	0x20000584
 8004074:	20000b00 	.word	0x20000b00

08004078 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	0002      	movs	r2, r0
 8004080:	1dbb      	adds	r3, r7, #6
 8004082:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8004084:	1dbb      	adds	r3, r7, #6
 8004086:	881b      	ldrh	r3, [r3, #0]
 8004088:	2b80      	cmp	r3, #128	@ 0x80
 800408a:	d117      	bne.n	80040bc <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800408c:	4b0d      	ldr	r3, [pc, #52]	@ (80040c4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b06      	cmp	r3, #6
 8004094:	d004      	beq.n	80040a0 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b07      	cmp	r3, #7
 800409e:	d10d      	bne.n	80040bc <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	23a0      	movs	r3, #160	@ 0xa0
 80040a6:	05db      	lsls	r3, r3, #23
 80040a8:	2201      	movs	r2, #1
 80040aa:	0018      	movs	r0, r3
 80040ac:	f004 feeb 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80040b0:	4b05      	ldr	r3, [pc, #20]	@ (80040c8 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	2140      	movs	r1, #64	@ 0x40
 80040b6:	0018      	movs	r0, r3
 80040b8:	f004 fee5 	bl	8008e86 <HAL_GPIO_WritePin>
		}
	}
}
 80040bc:	46c0      	nop			@ (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	b002      	add	sp, #8
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000430 	.word	0x20000430
 80040c8:	50000800 	.word	0x50000800

080040cc <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	0002      	movs	r2, r0
 80040d4:	1dbb      	adds	r3, r7, #6
 80040d6:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 80040d8:	1dbb      	adds	r3, r7, #6
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d000      	beq.n	80040e2 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 80040e0:	e0dd      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 80040e2:	4b71      	ldr	r3, [pc, #452]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d114      	bne.n	8004116 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040ec:	2380      	movs	r3, #128	@ 0x80
 80040ee:	0099      	lsls	r1, r3, #2
 80040f0:	23a0      	movs	r3, #160	@ 0xa0
 80040f2:	05db      	lsls	r3, r3, #23
 80040f4:	2200      	movs	r2, #0
 80040f6:	0018      	movs	r0, r3
 80040f8:	f004 fec5 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040fc:	4b6b      	ldr	r3, [pc, #428]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040fe:	2201      	movs	r2, #1
 8004100:	2140      	movs	r1, #64	@ 0x40
 8004102:	0018      	movs	r0, r3
 8004104:	f004 febf 	bl	8008e86 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8004108:	4b67      	ldr	r3, [pc, #412]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800410a:	2201      	movs	r2, #1
 800410c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800410e:	4b66      	ldr	r3, [pc, #408]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004110:	2207      	movs	r2, #7
 8004112:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8004114:	e0c3      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8004116:	4b64      	ldr	r3, [pc, #400]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b03      	cmp	r3, #3
 800411e:	d114      	bne.n	800414a <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004120:	2380      	movs	r3, #128	@ 0x80
 8004122:	0099      	lsls	r1, r3, #2
 8004124:	23a0      	movs	r3, #160	@ 0xa0
 8004126:	05db      	lsls	r3, r3, #23
 8004128:	2200      	movs	r2, #0
 800412a:	0018      	movs	r0, r3
 800412c:	f004 feab 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004130:	4b5e      	ldr	r3, [pc, #376]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004132:	2201      	movs	r2, #1
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	0018      	movs	r0, r3
 8004138:	f004 fea5 	bl	8008e86 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 800413c:	4b5a      	ldr	r3, [pc, #360]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800413e:	2203      	movs	r2, #3
 8004140:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004142:	4b59      	ldr	r3, [pc, #356]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004144:	2207      	movs	r2, #7
 8004146:	701a      	strb	r2, [r3, #0]
}
 8004148:	e0a9      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 800414a:	4b57      	ldr	r3, [pc, #348]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d114      	bne.n	800417e <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004154:	2380      	movs	r3, #128	@ 0x80
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	23a0      	movs	r3, #160	@ 0xa0
 800415a:	05db      	lsls	r3, r3, #23
 800415c:	2200      	movs	r2, #0
 800415e:	0018      	movs	r0, r3
 8004160:	f004 fe91 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004164:	4b51      	ldr	r3, [pc, #324]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004166:	2201      	movs	r2, #1
 8004168:	2140      	movs	r1, #64	@ 0x40
 800416a:	0018      	movs	r0, r3
 800416c:	f004 fe8b 	bl	8008e86 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8004170:	4b4d      	ldr	r3, [pc, #308]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004172:	2202      	movs	r2, #2
 8004174:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004176:	4b4c      	ldr	r3, [pc, #304]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004178:	2207      	movs	r2, #7
 800417a:	701a      	strb	r2, [r3, #0]
}
 800417c:	e08f      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 800417e:	4b4a      	ldr	r3, [pc, #296]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b04      	cmp	r3, #4
 8004186:	d12b      	bne.n	80041e0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004188:	4b49      	ldr	r3, [pc, #292]	@ (80042b0 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d126      	bne.n	80041e0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004192:	4b48      	ldr	r3, [pc, #288]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004194:	2120      	movs	r1, #32
 8004196:	0018      	movs	r0, r3
 8004198:	f002 fc0c 	bl	80069b4 <Get_Status_Bit>
 800419c:	0003      	movs	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d11e      	bne.n	80041e0 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	0099      	lsls	r1, r3, #2
 80041a6:	23a0      	movs	r3, #160	@ 0xa0
 80041a8:	05db      	lsls	r3, r3, #23
 80041aa:	2200      	movs	r2, #0
 80041ac:	0018      	movs	r0, r3
 80041ae:	f004 fe6a 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041b2:	4b3e      	ldr	r3, [pc, #248]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	2140      	movs	r1, #64	@ 0x40
 80041b8:	0018      	movs	r0, r3
 80041ba:	f004 fe64 	bl	8008e86 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 80041be:	4b3a      	ldr	r3, [pc, #232]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041c0:	2204      	movs	r2, #4
 80041c2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80041c4:	4b38      	ldr	r3, [pc, #224]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041c6:	2207      	movs	r2, #7
 80041c8:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041ca:	4b3a      	ldr	r3, [pc, #232]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041cc:	2120      	movs	r1, #32
 80041ce:	0018      	movs	r0, r3
 80041d0:	f002 fc16 	bl	8006a00 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041d4:	4b37      	ldr	r3, [pc, #220]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041d6:	2140      	movs	r1, #64	@ 0x40
 80041d8:	0018      	movs	r0, r3
 80041da:	f002 fc11 	bl	8006a00 <Clear_Status_Bit>
 80041de:	e05e      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80041e0:	4b31      	ldr	r3, [pc, #196]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d12b      	bne.n	8004242 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80041ea:	4b31      	ldr	r3, [pc, #196]	@ (80042b0 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d126      	bne.n	8004242 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80041f4:	4b2f      	ldr	r3, [pc, #188]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041f6:	2120      	movs	r1, #32
 80041f8:	0018      	movs	r0, r3
 80041fa:	f002 fbdb 	bl	80069b4 <Get_Status_Bit>
 80041fe:	0003      	movs	r3, r0
 8004200:	2b01      	cmp	r3, #1
 8004202:	d11e      	bne.n	8004242 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004204:	2380      	movs	r3, #128	@ 0x80
 8004206:	0099      	lsls	r1, r3, #2
 8004208:	23a0      	movs	r3, #160	@ 0xa0
 800420a:	05db      	lsls	r3, r3, #23
 800420c:	2200      	movs	r2, #0
 800420e:	0018      	movs	r0, r3
 8004210:	f004 fe39 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004214:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004216:	2201      	movs	r2, #1
 8004218:	2140      	movs	r1, #64	@ 0x40
 800421a:	0018      	movs	r0, r3
 800421c:	f004 fe33 	bl	8008e86 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8004220:	4b21      	ldr	r3, [pc, #132]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004222:	2208      	movs	r2, #8
 8004224:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004226:	4b20      	ldr	r3, [pc, #128]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004228:	2207      	movs	r2, #7
 800422a:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800422c:	4b21      	ldr	r3, [pc, #132]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800422e:	2120      	movs	r1, #32
 8004230:	0018      	movs	r0, r3
 8004232:	f002 fbe5 	bl	8006a00 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004236:	4b1f      	ldr	r3, [pc, #124]	@ (80042b4 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004238:	2140      	movs	r1, #64	@ 0x40
 800423a:	0018      	movs	r0, r3
 800423c:	f002 fbe0 	bl	8006a00 <Clear_Status_Bit>
 8004240:	e02d      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8004242:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b07      	cmp	r3, #7
 800424a:	d114      	bne.n	8004276 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	0099      	lsls	r1, r3, #2
 8004250:	23a0      	movs	r3, #160	@ 0xa0
 8004252:	05db      	lsls	r3, r3, #23
 8004254:	2200      	movs	r2, #0
 8004256:	0018      	movs	r0, r3
 8004258:	f004 fe15 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800425c:	4b13      	ldr	r3, [pc, #76]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800425e:	2201      	movs	r2, #1
 8004260:	2140      	movs	r1, #64	@ 0x40
 8004262:	0018      	movs	r0, r3
 8004264:	f004 fe0f 	bl	8008e86 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004268:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800426a:	2207      	movs	r2, #7
 800426c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800426e:	4b0e      	ldr	r3, [pc, #56]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004270:	2206      	movs	r2, #6
 8004272:	701a      	strb	r2, [r3, #0]
}
 8004274:	e013      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8004276:	4b0c      	ldr	r3, [pc, #48]	@ (80042a8 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b06      	cmp	r3, #6
 800427e:	d10e      	bne.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	0099      	lsls	r1, r3, #2
 8004284:	23a0      	movs	r3, #160	@ 0xa0
 8004286:	05db      	lsls	r3, r3, #23
 8004288:	2200      	movs	r2, #0
 800428a:	0018      	movs	r0, r3
 800428c:	f004 fdfb 	bl	8008e86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004290:	4b06      	ldr	r3, [pc, #24]	@ (80042ac <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004292:	2201      	movs	r2, #1
 8004294:	2140      	movs	r1, #64	@ 0x40
 8004296:	0018      	movs	r0, r3
 8004298:	f004 fdf5 	bl	8008e86 <HAL_GPIO_WritePin>
}
 800429c:	e7ff      	b.n	800429e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	46bd      	mov	sp, r7
 80042a2:	b002      	add	sp, #8
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	20000430 	.word	0x20000430
 80042ac:	50000800 	.word	0x50000800
 80042b0:	20000444 	.word	0x20000444
 80042b4:	20000d00 	.word	0x20000d00

080042b8 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 80042b8:	b5b0      	push	{r4, r5, r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]
	static volatile enum Validate preset_save_mode_is_active = NO;
	static volatile enum Validate preset_select_mode_is_active = NO;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 80042c0:	250f      	movs	r5, #15
 80042c2:	197c      	adds	r4, r7, r5
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	00da      	lsls	r2, r3, #3
 80042c8:	23a0      	movs	r3, #160	@ 0xa0
 80042ca:	05db      	lsls	r3, r3, #23
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f004 fdbc 	bl	8008e4c <HAL_GPIO_ReadPin>
 80042d4:	0003      	movs	r3, r0
 80042d6:	7023      	strb	r3, [r4, #0]

	if(save_or_preset_mode_engaged == NO){
 80042d8:	4bc2      	ldr	r3, [pc, #776]	@ (80045e4 <LPTIM1_callback+0x32c>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d000      	beq.n	80042e4 <LPTIM1_callback+0x2c>
 80042e2:	e1a2      	b.n	800462a <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 80042e4:	4bc0      	ldr	r3, [pc, #768]	@ (80045e8 <LPTIM1_callback+0x330>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10a      	bne.n	8004304 <LPTIM1_callback+0x4c>
 80042ee:	197b      	adds	r3, r7, r5
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d106      	bne.n	8004304 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042f6:	4bbc      	ldr	r3, [pc, #752]	@ (80045e8 <LPTIM1_callback+0x330>)
 80042f8:	2205      	movs	r2, #5
 80042fa:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80042fc:	4bba      	ldr	r3, [pc, #744]	@ (80045e8 <LPTIM1_callback+0x330>)
 80042fe:	2201      	movs	r2, #1
 8004300:	705a      	strb	r2, [r3, #1]
 8004302:	e070      	b.n	80043e6 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8004304:	4bb8      	ldr	r3, [pc, #736]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d10b      	bne.n	8004326 <LPTIM1_callback+0x6e>
 800430e:	230f      	movs	r3, #15
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d106      	bne.n	8004326 <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8004318:	4bb3      	ldr	r3, [pc, #716]	@ (80045e8 <LPTIM1_callback+0x330>)
 800431a:	2205      	movs	r2, #5
 800431c:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 800431e:	4bb2      	ldr	r3, [pc, #712]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004320:	2202      	movs	r2, #2
 8004322:	705a      	strb	r2, [r3, #1]
 8004324:	e05f      	b.n	80043e6 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8004326:	4bb0      	ldr	r3, [pc, #704]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b03      	cmp	r3, #3
 800432e:	d10b      	bne.n	8004348 <LPTIM1_callback+0x90>
 8004330:	230f      	movs	r3, #15
 8004332:	18fb      	adds	r3, r7, r3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 800433a:	4bab      	ldr	r3, [pc, #684]	@ (80045e8 <LPTIM1_callback+0x330>)
 800433c:	2205      	movs	r2, #5
 800433e:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 8004340:	4ba9      	ldr	r3, [pc, #676]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004342:	2203      	movs	r2, #3
 8004344:	705a      	strb	r2, [r3, #1]
 8004346:	e04e      	b.n	80043e6 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004348:	4ba7      	ldr	r3, [pc, #668]	@ (80045e8 <LPTIM1_callback+0x330>)
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b06      	cmp	r3, #6
 8004350:	d122      	bne.n	8004398 <LPTIM1_callback+0xe0>
 8004352:	230f      	movs	r3, #15
 8004354:	18fb      	adds	r3, r7, r3
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d11d      	bne.n	8004398 <LPTIM1_callback+0xe0>
 800435c:	4ba3      	ldr	r3, [pc, #652]	@ (80045ec <LPTIM1_callback+0x334>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d118      	bne.n	8004398 <LPTIM1_callback+0xe0>
 8004366:	4ba2      	ldr	r3, [pc, #648]	@ (80045f0 <LPTIM1_callback+0x338>)
 8004368:	2120      	movs	r1, #32
 800436a:	0018      	movs	r0, r3
 800436c:	f002 fb22 	bl	80069b4 <Get_Status_Bit>
 8004370:	0003      	movs	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d110      	bne.n	8004398 <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8004376:	4b9c      	ldr	r3, [pc, #624]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004378:	2205      	movs	r2, #5
 800437a:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 800437c:	4b9a      	ldr	r3, [pc, #616]	@ (80045e8 <LPTIM1_callback+0x330>)
 800437e:	2206      	movs	r2, #6
 8004380:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004382:	4b9b      	ldr	r3, [pc, #620]	@ (80045f0 <LPTIM1_callback+0x338>)
 8004384:	2120      	movs	r1, #32
 8004386:	0018      	movs	r0, r3
 8004388:	f002 fb3a 	bl	8006a00 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800438c:	4b98      	ldr	r3, [pc, #608]	@ (80045f0 <LPTIM1_callback+0x338>)
 800438e:	2140      	movs	r1, #64	@ 0x40
 8004390:	0018      	movs	r0, r3
 8004392:	f002 fb35 	bl	8006a00 <Clear_Status_Bit>
 8004396:	e026      	b.n	80043e6 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004398:	4b93      	ldr	r3, [pc, #588]	@ (80045e8 <LPTIM1_callback+0x330>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d121      	bne.n	80043e6 <LPTIM1_callback+0x12e>
 80043a2:	230f      	movs	r3, #15
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d11c      	bne.n	80043e6 <LPTIM1_callback+0x12e>
 80043ac:	4b8f      	ldr	r3, [pc, #572]	@ (80045ec <LPTIM1_callback+0x334>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d117      	bne.n	80043e6 <LPTIM1_callback+0x12e>
 80043b6:	4b8e      	ldr	r3, [pc, #568]	@ (80045f0 <LPTIM1_callback+0x338>)
 80043b8:	2120      	movs	r1, #32
 80043ba:	0018      	movs	r0, r3
 80043bc:	f002 fafa 	bl	80069b4 <Get_Status_Bit>
 80043c0:	0003      	movs	r3, r0
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d10f      	bne.n	80043e6 <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80043c6:	4b88      	ldr	r3, [pc, #544]	@ (80045e8 <LPTIM1_callback+0x330>)
 80043c8:	2205      	movs	r2, #5
 80043ca:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80043cc:	4b86      	ldr	r3, [pc, #536]	@ (80045e8 <LPTIM1_callback+0x330>)
 80043ce:	2208      	movs	r2, #8
 80043d0:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80043d2:	4b87      	ldr	r3, [pc, #540]	@ (80045f0 <LPTIM1_callback+0x338>)
 80043d4:	2120      	movs	r1, #32
 80043d6:	0018      	movs	r0, r3
 80043d8:	f002 fb12 	bl	8006a00 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80043dc:	4b84      	ldr	r3, [pc, #528]	@ (80045f0 <LPTIM1_callback+0x338>)
 80043de:	2140      	movs	r1, #64	@ 0x40
 80043e0:	0018      	movs	r0, r3
 80043e2:	f002 fb0d 	bl	8006a00 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 80043e6:	4b80      	ldr	r3, [pc, #512]	@ (80045e8 <LPTIM1_callback+0x330>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d004      	beq.n	80043fa <LPTIM1_callback+0x142>
 80043f0:	4b7d      	ldr	r3, [pc, #500]	@ (80045e8 <LPTIM1_callback+0x330>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d11a      	bne.n	8004430 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 80043fa:	4b7e      	ldr	r3, [pc, #504]	@ (80045f4 <LPTIM1_callback+0x33c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d108      	bne.n	8004416 <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004404:	2380      	movs	r3, #128	@ 0x80
 8004406:	0099      	lsls	r1, r3, #2
 8004408:	23a0      	movs	r3, #160	@ 0xa0
 800440a:	05db      	lsls	r3, r3, #23
 800440c:	2200      	movs	r2, #0
 800440e:	0018      	movs	r0, r3
 8004410:	f004 fd39 	bl	8008e86 <HAL_GPIO_WritePin>
 8004414:	e00c      	b.n	8004430 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8004416:	4b77      	ldr	r3, [pc, #476]	@ (80045f4 <LPTIM1_callback+0x33c>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d107      	bne.n	8004430 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8004420:	2380      	movs	r3, #128	@ 0x80
 8004422:	0099      	lsls	r1, r3, #2
 8004424:	23a0      	movs	r3, #160	@ 0xa0
 8004426:	05db      	lsls	r3, r3, #23
 8004428:	2201      	movs	r2, #1
 800442a:	0018      	movs	r0, r3
 800442c:	f004 fd2b 	bl	8008e86 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8004430:	2380      	movs	r3, #128	@ 0x80
 8004432:	011a      	lsls	r2, r3, #4
 8004434:	4b6e      	ldr	r3, [pc, #440]	@ (80045f0 <LPTIM1_callback+0x338>)
 8004436:	0011      	movs	r1, r2
 8004438:	0018      	movs	r0, r3
 800443a:	f002 fabb 	bl	80069b4 <Get_Status_Bit>
 800443e:	0003      	movs	r3, r0
 8004440:	2b01      	cmp	r3, #1
 8004442:	d000      	beq.n	8004446 <LPTIM1_callback+0x18e>
 8004444:	e0c0      	b.n	80045c8 <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	011a      	lsls	r2, r3, #4
 800444a:	4b69      	ldr	r3, [pc, #420]	@ (80045f0 <LPTIM1_callback+0x338>)
 800444c:	0011      	movs	r1, r2
 800444e:	0018      	movs	r0, r3
 8004450:	f002 fad6 	bl	8006a00 <Clear_Status_Bit>

			pots_counter = 0;
 8004454:	4b68      	ldr	r3, [pc, #416]	@ (80045f8 <LPTIM1_callback+0x340>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 800445a:	4b63      	ldr	r3, [pc, #396]	@ (80045e8 <LPTIM1_callback+0x330>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d004      	beq.n	800446e <LPTIM1_callback+0x1b6>
 8004464:	4b60      	ldr	r3, [pc, #384]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d105      	bne.n	800447a <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 800446e:	4b63      	ldr	r3, [pc, #396]	@ (80045fc <LPTIM1_callback+0x344>)
 8004470:	2101      	movs	r1, #1
 8004472:	0018      	movs	r0, r3
 8004474:	f7fd faf8 	bl	8001a68 <Pot_Check>
 8004478:	e069      	b.n	800454e <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 800447a:	4b5b      	ldr	r3, [pc, #364]	@ (80045e8 <LPTIM1_callback+0x330>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b06      	cmp	r3, #6
 8004482:	d117      	bne.n	80044b4 <LPTIM1_callback+0x1fc>
 8004484:	4b59      	ldr	r3, [pc, #356]	@ (80045ec <LPTIM1_callback+0x334>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d112      	bne.n	80044b4 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800448e:	4b58      	ldr	r3, [pc, #352]	@ (80045f0 <LPTIM1_callback+0x338>)
 8004490:	2140      	movs	r1, #64	@ 0x40
 8004492:	0018      	movs	r0, r3
 8004494:	f002 faa2 	bl	80069dc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004498:	4b55      	ldr	r3, [pc, #340]	@ (80045f0 <LPTIM1_callback+0x338>)
 800449a:	2120      	movs	r1, #32
 800449c:	0018      	movs	r0, r3
 800449e:	f002 fa89 	bl	80069b4 <Get_Status_Bit>
 80044a2:	0003      	movs	r3, r0
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d152      	bne.n	800454e <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044a8:	4b54      	ldr	r3, [pc, #336]	@ (80045fc <LPTIM1_callback+0x344>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	0018      	movs	r0, r3
 80044ae:	f7fd fadb 	bl	8001a68 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044b2:	e04c      	b.n	800454e <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80044b4:	4b4c      	ldr	r3, [pc, #304]	@ (80045e8 <LPTIM1_callback+0x330>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d12b      	bne.n	8004516 <LPTIM1_callback+0x25e>
 80044be:	4b4b      	ldr	r3, [pc, #300]	@ (80045ec <LPTIM1_callback+0x334>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d126      	bne.n	8004516 <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80044c8:	4b49      	ldr	r3, [pc, #292]	@ (80045f0 <LPTIM1_callback+0x338>)
 80044ca:	2140      	movs	r1, #64	@ 0x40
 80044cc:	0018      	movs	r0, r3
 80044ce:	f002 fa85 	bl	80069dc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044d2:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <LPTIM1_callback+0x338>)
 80044d4:	2120      	movs	r1, #32
 80044d6:	0018      	movs	r0, r3
 80044d8:	f002 fa6c 	bl	80069b4 <Get_Status_Bit>
 80044dc:	0003      	movs	r3, r0
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d135      	bne.n	800454e <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	0099      	lsls	r1, r3, #2
 80044e6:	23a0      	movs	r3, #160	@ 0xa0
 80044e8:	05db      	lsls	r3, r3, #23
 80044ea:	2201      	movs	r2, #1
 80044ec:	0018      	movs	r0, r3
 80044ee:	f004 fcca 	bl	8008e86 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80044f2:	4b43      	ldr	r3, [pc, #268]	@ (8004600 <LPTIM1_callback+0x348>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	2140      	movs	r1, #64	@ 0x40
 80044f8:	0018      	movs	r0, r3
 80044fa:	f004 fcc4 	bl	8008e86 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 80044fe:	4b41      	ldr	r3, [pc, #260]	@ (8004604 <LPTIM1_callback+0x34c>)
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8004504:	4b40      	ldr	r3, [pc, #256]	@ (8004608 <LPTIM1_callback+0x350>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 800450a:	4b3c      	ldr	r3, [pc, #240]	@ (80045fc <LPTIM1_callback+0x344>)
 800450c:	2101      	movs	r1, #1
 800450e:	0018      	movs	r0, r3
 8004510:	f7fd faaa 	bl	8001a68 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004514:	e01b      	b.n	800454e <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8004516:	4b34      	ldr	r3, [pc, #208]	@ (80045e8 <LPTIM1_callback+0x330>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b04      	cmp	r3, #4
 800451e:	d116      	bne.n	800454e <LPTIM1_callback+0x296>
 8004520:	4b32      	ldr	r3, [pc, #200]	@ (80045ec <LPTIM1_callback+0x334>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d111      	bne.n	800454e <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800452a:	4b31      	ldr	r3, [pc, #196]	@ (80045f0 <LPTIM1_callback+0x338>)
 800452c:	2140      	movs	r1, #64	@ 0x40
 800452e:	0018      	movs	r0, r3
 8004530:	f002 fa54 	bl	80069dc <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004534:	4b2e      	ldr	r3, [pc, #184]	@ (80045f0 <LPTIM1_callback+0x338>)
 8004536:	2120      	movs	r1, #32
 8004538:	0018      	movs	r0, r3
 800453a:	f002 fa3b 	bl	80069b4 <Get_Status_Bit>
 800453e:	0003      	movs	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d104      	bne.n	800454e <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8004544:	4b2d      	ldr	r3, [pc, #180]	@ (80045fc <LPTIM1_callback+0x344>)
 8004546:	2101      	movs	r1, #1
 8004548:	0018      	movs	r0, r3
 800454a:	f7fd fa8d 	bl	8001a68 <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 800454e:	4b2f      	ldr	r3, [pc, #188]	@ (800460c <LPTIM1_callback+0x354>)
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b03      	cmp	r3, #3
 8004556:	d004      	beq.n	8004562 <LPTIM1_callback+0x2aa>
 8004558:	4b2c      	ldr	r3, [pc, #176]	@ (800460c <LPTIM1_callback+0x354>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d104      	bne.n	800456c <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8004562:	4b26      	ldr	r3, [pc, #152]	@ (80045fc <LPTIM1_callback+0x344>)
 8004564:	2100      	movs	r1, #0
 8004566:	0018      	movs	r0, r3
 8004568:	f7fd fa7e 	bl	8001a68 <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 800456c:	4b28      	ldr	r3, [pc, #160]	@ (8004610 <LPTIM1_callback+0x358>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b03      	cmp	r3, #3
 8004574:	d004      	beq.n	8004580 <LPTIM1_callback+0x2c8>
 8004576:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <LPTIM1_callback+0x358>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d104      	bne.n	800458a <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8004580:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <LPTIM1_callback+0x344>)
 8004582:	2102      	movs	r1, #2
 8004584:	0018      	movs	r0, r3
 8004586:	f7fd fa6f 	bl	8001a68 <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 800458a:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <LPTIM1_callback+0x35c>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b03      	cmp	r3, #3
 8004592:	d004      	beq.n	800459e <LPTIM1_callback+0x2e6>
 8004594:	4b1f      	ldr	r3, [pc, #124]	@ (8004614 <LPTIM1_callback+0x35c>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d104      	bne.n	80045a8 <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 800459e:	4b17      	ldr	r3, [pc, #92]	@ (80045fc <LPTIM1_callback+0x344>)
 80045a0:	2103      	movs	r1, #3
 80045a2:	0018      	movs	r0, r3
 80045a4:	f7fd fa60 	bl	8001a68 <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 80045a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <LPTIM1_callback+0x360>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d004      	beq.n	80045bc <LPTIM1_callback+0x304>
 80045b2:	4b19      	ldr	r3, [pc, #100]	@ (8004618 <LPTIM1_callback+0x360>)
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d136      	bne.n	800462a <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 80045bc:	4b0f      	ldr	r3, [pc, #60]	@ (80045fc <LPTIM1_callback+0x344>)
 80045be:	2104      	movs	r1, #4
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fd fa51 	bl	8001a68 <Pot_Check>
 80045c6:	e030      	b.n	800462a <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 80045c8:	4b0b      	ldr	r3, [pc, #44]	@ (80045f8 <LPTIM1_callback+0x340>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d124      	bne.n	800461c <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 80045d2:	2380      	movs	r3, #128	@ 0x80
 80045d4:	011a      	lsls	r2, r3, #4
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <LPTIM1_callback+0x338>)
 80045d8:	0011      	movs	r1, r2
 80045da:	0018      	movs	r0, r3
 80045dc:	f002 f9fe 	bl	80069dc <Set_Status_Bit>
 80045e0:	e023      	b.n	800462a <LPTIM1_callback+0x372>
 80045e2:	46c0      	nop			@ (mov r8, r8)
 80045e4:	20000ce0 	.word	0x20000ce0
 80045e8:	20000430 	.word	0x20000430
 80045ec:	20000444 	.word	0x20000444
 80045f0:	20000d00 	.word	0x20000d00
 80045f4:	20000ce4 	.word	0x20000ce4
 80045f8:	2000059a 	.word	0x2000059a
 80045fc:	20000d14 	.word	0x20000d14
 8004600:	50000800 	.word	0x50000800
 8004604:	20000db0 	.word	0x20000db0
 8004608:	20000cfe 	.word	0x20000cfe
 800460c:	20000438 	.word	0x20000438
 8004610:	20000434 	.word	0x20000434
 8004614:	2000043c 	.word	0x2000043c
 8004618:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 800461c:	4bc3      	ldr	r3, [pc, #780]	@ (800492c <LPTIM1_callback+0x674>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	3301      	adds	r3, #1
 8004624:	b2da      	uxtb	r2, r3
 8004626:	4bc1      	ldr	r3, [pc, #772]	@ (800492c <LPTIM1_callback+0x674>)
 8004628:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 800462a:	4bc1      	ldr	r3, [pc, #772]	@ (8004930 <LPTIM1_callback+0x678>)
 800462c:	0018      	movs	r0, r3
 800462e:	f7fd fb3b 	bl	8001ca8 <Check_Tap_Tempo_Switch_State>
	static uint64_t depressed_num;
	static enum Preset_Selected preset = PRESET_ONE;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 8004632:	230e      	movs	r3, #14
 8004634:	18fb      	adds	r3, r7, r3
 8004636:	4abf      	ldr	r2, [pc, #764]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	701a      	strb	r2, [r3, #0]

	//if preset save timer has timed out, come out of preset save mode
	if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Select_Timer_Has_Timed_Out) == YES){
 800463c:	2380      	movs	r3, #128	@ 0x80
 800463e:	019a      	lsls	r2, r3, #6
 8004640:	4bbd      	ldr	r3, [pc, #756]	@ (8004938 <LPTIM1_callback+0x680>)
 8004642:	0011      	movs	r1, r2
 8004644:	0018      	movs	r0, r3
 8004646:	f002 f9b5 	bl	80069b4 <Get_Status_Bit>
 800464a:	0003      	movs	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d121      	bne.n	8004694 <LPTIM1_callback+0x3dc>

		Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Select_Timer_Has_Timed_Out);
 8004650:	2380      	movs	r3, #128	@ 0x80
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	4bb8      	ldr	r3, [pc, #736]	@ (8004938 <LPTIM1_callback+0x680>)
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f002 f9d1 	bl	8006a00 <Clear_Status_Bit>

		preset = PRESET_ONE;
 800465e:	4bb7      	ldr	r3, [pc, #732]	@ (800493c <LPTIM1_callback+0x684>)
 8004660:	2201      	movs	r2, #1
 8004662:	701a      	strb	r2, [r3, #0]
		preset_save_mode_is_active = NO;
 8004664:	4bb6      	ldr	r3, [pc, #728]	@ (8004940 <LPTIM1_callback+0x688>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
		preset_select_mode_is_active = NO;
 800466a:	4bb6      	ldr	r3, [pc, #728]	@ (8004944 <LPTIM1_callback+0x68c>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
		save_or_preset_mode_engaged = NO;
 8004670:	4bb5      	ldr	r3, [pc, #724]	@ (8004948 <LPTIM1_callback+0x690>)
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
		LED_fsm.prev_state = LED_fsm.current_state;
 8004676:	4baf      	ldr	r3, [pc, #700]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4bad      	ldr	r3, [pc, #692]	@ (8004934 <LPTIM1_callback+0x67c>)
 800467e:	705a      	strb	r2, [r3, #1]
		LED_fsm.current_state = led_state_saved;
 8004680:	4bb2      	ldr	r3, [pc, #712]	@ (800494c <LPTIM1_callback+0x694>)
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	4bab      	ldr	r3, [pc, #684]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004686:	701a      	strb	r2, [r3, #0]
		depressed_num = 0;
 8004688:	49b1      	ldr	r1, [pc, #708]	@ (8004950 <LPTIM1_callback+0x698>)
 800468a:	2200      	movs	r2, #0
 800468c:	2300      	movs	r3, #0
 800468e:	600a      	str	r2, [r1, #0]
 8004690:	604b      	str	r3, [r1, #4]
 8004692:	e194      	b.n	80049be <LPTIM1_callback+0x706>

	}
	else{

		if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8004694:	4ba6      	ldr	r3, [pc, #664]	@ (8004930 <LPTIM1_callback+0x678>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d000      	beq.n	80046a0 <LPTIM1_callback+0x3e8>
 800469e:	e172      	b.n	8004986 <LPTIM1_callback+0x6ce>

			if((preset_save_mode_is_active == NO) && (preset_select_mode_is_active == NO)){
 80046a0:	4ba7      	ldr	r3, [pc, #668]	@ (8004940 <LPTIM1_callback+0x688>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d000      	beq.n	80046ac <LPTIM1_callback+0x3f4>
 80046aa:	e08a      	b.n	80047c2 <LPTIM1_callback+0x50a>
 80046ac:	4ba5      	ldr	r3, [pc, #660]	@ (8004944 <LPTIM1_callback+0x68c>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d000      	beq.n	80046b8 <LPTIM1_callback+0x400>
 80046b6:	e084      	b.n	80047c2 <LPTIM1_callback+0x50a>

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num <  TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX)){
 80046b8:	4ba5      	ldr	r3, [pc, #660]	@ (8004950 <LPTIM1_callback+0x698>)
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <LPTIM1_callback+0x414>
 80046c2:	d113      	bne.n	80046ec <LPTIM1_callback+0x434>
 80046c4:	21fa      	movs	r1, #250	@ 0xfa
 80046c6:	00c9      	lsls	r1, r1, #3
 80046c8:	428a      	cmp	r2, r1
 80046ca:	d30f      	bcc.n	80046ec <LPTIM1_callback+0x434>
 80046cc:	4ba0      	ldr	r3, [pc, #640]	@ (8004950 <LPTIM1_callback+0x698>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <LPTIM1_callback+0x434>
 80046d6:	d102      	bne.n	80046de <LPTIM1_callback+0x426>
 80046d8:	499e      	ldr	r1, [pc, #632]	@ (8004954 <LPTIM1_callback+0x69c>)
 80046da:	428a      	cmp	r2, r1
 80046dc:	d806      	bhi.n	80046ec <LPTIM1_callback+0x434>

					preset_select_mode_is_active = YES;
 80046de:	4b99      	ldr	r3, [pc, #612]	@ (8004944 <LPTIM1_callback+0x68c>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 80046e4:	4b98      	ldr	r3, [pc, #608]	@ (8004948 <LPTIM1_callback+0x690>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e01b      	b.n	8004724 <LPTIM1_callback+0x46c>

				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT_MAX)){
 80046ec:	4b98      	ldr	r3, [pc, #608]	@ (8004950 <LPTIM1_callback+0x698>)
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <LPTIM1_callback+0x446>
 80046f6:	d115      	bne.n	8004724 <LPTIM1_callback+0x46c>
 80046f8:	4997      	ldr	r1, [pc, #604]	@ (8004958 <LPTIM1_callback+0x6a0>)
 80046fa:	428a      	cmp	r2, r1
 80046fc:	d912      	bls.n	8004724 <LPTIM1_callback+0x46c>
 80046fe:	4b94      	ldr	r3, [pc, #592]	@ (8004950 <LPTIM1_callback+0x698>)
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d10a      	bne.n	800471e <LPTIM1_callback+0x466>
 8004708:	d102      	bne.n	8004710 <LPTIM1_callback+0x458>
 800470a:	4994      	ldr	r1, [pc, #592]	@ (800495c <LPTIM1_callback+0x6a4>)
 800470c:	428a      	cmp	r2, r1
 800470e:	d806      	bhi.n	800471e <LPTIM1_callback+0x466>

					preset_save_mode_is_active = YES;
 8004710:	4b8b      	ldr	r3, [pc, #556]	@ (8004940 <LPTIM1_callback+0x688>)
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = YES;
 8004716:	4b8c      	ldr	r3, [pc, #560]	@ (8004948 <LPTIM1_callback+0x690>)
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e002      	b.n	8004724 <LPTIM1_callback+0x46c>
				}
				else if((depressed_num >= TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_FACTORY_RESET_COUNT_MAX)){
 800471e:	4b8c      	ldr	r3, [pc, #560]	@ (8004950 <LPTIM1_callback+0x698>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]

					//@TODO Factory Reset Presets and user preset used array in flash
				}
				if(save_or_preset_mode_engaged == YES){
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <LPTIM1_callback+0x690>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b01      	cmp	r3, #1
 800472c:	d000      	beq.n	8004730 <LPTIM1_callback+0x478>
 800472e:	e123      	b.n	8004978 <LPTIM1_callback+0x6c0>

					//start counter
					Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Select_Timer_Is_Running);
 8004730:	2380      	movs	r3, #128	@ 0x80
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	4b80      	ldr	r3, [pc, #512]	@ (8004938 <LPTIM1_callback+0x680>)
 8004736:	0011      	movs	r1, r2
 8004738:	0018      	movs	r0, r3
 800473a:	f002 f94f 	bl	80069dc <Set_Status_Bit>
					//reset counter
					preset_save_select_idle_counter = 0;
 800473e:	4b88      	ldr	r3, [pc, #544]	@ (8004960 <LPTIM1_callback+0x6a8>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

					depressed_num = 0;
 8004744:	4982      	ldr	r1, [pc, #520]	@ (8004950 <LPTIM1_callback+0x698>)
 8004746:	2200      	movs	r2, #0
 8004748:	2300      	movs	r3, #0
 800474a:	600a      	str	r2, [r1, #0]
 800474c:	604b      	str	r3, [r1, #4]

					led_state_saved = led_state;
 800474e:	4b7f      	ldr	r3, [pc, #508]	@ (800494c <LPTIM1_callback+0x694>)
 8004750:	220e      	movs	r2, #14
 8004752:	18ba      	adds	r2, r7, r2
 8004754:	7812      	ldrb	r2, [r2, #0]
 8004756:	701a      	strb	r2, [r3, #0]

					if(preset == PRESET_ONE){
 8004758:	4b78      	ldr	r3, [pc, #480]	@ (800493c <LPTIM1_callback+0x684>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d108      	bne.n	8004772 <LPTIM1_callback+0x4ba>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 8004760:	4b74      	ldr	r3, [pc, #464]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004762:	2103      	movs	r1, #3
 8004764:	0018      	movs	r0, r3
 8004766:	f7fc fe3f 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_TWO;
 800476a:	4b74      	ldr	r3, [pc, #464]	@ (800493c <LPTIM1_callback+0x684>)
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 8004770:	e102      	b.n	8004978 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_TWO){
 8004772:	4b72      	ldr	r3, [pc, #456]	@ (800493c <LPTIM1_callback+0x684>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d108      	bne.n	800478c <LPTIM1_callback+0x4d4>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 800477a:	4b6e      	ldr	r3, [pc, #440]	@ (8004934 <LPTIM1_callback+0x67c>)
 800477c:	2104      	movs	r1, #4
 800477e:	0018      	movs	r0, r3
 8004780:	f7fc fe32 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_THREE;
 8004784:	4b6d      	ldr	r3, [pc, #436]	@ (800493c <LPTIM1_callback+0x684>)
 8004786:	2203      	movs	r2, #3
 8004788:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 800478a:	e0f5      	b.n	8004978 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_THREE){
 800478c:	4b6b      	ldr	r3, [pc, #428]	@ (800493c <LPTIM1_callback+0x684>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d108      	bne.n	80047a6 <LPTIM1_callback+0x4ee>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 8004794:	4b67      	ldr	r3, [pc, #412]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004796:	2105      	movs	r1, #5
 8004798:	0018      	movs	r0, r3
 800479a:	f7fc fe25 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_FOUR;
 800479e:	4b67      	ldr	r3, [pc, #412]	@ (800493c <LPTIM1_callback+0x684>)
 80047a0:	2204      	movs	r2, #4
 80047a2:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80047a4:	e0e8      	b.n	8004978 <LPTIM1_callback+0x6c0>
					}
					else if(preset == PRESET_FOUR){
 80047a6:	4b65      	ldr	r3, [pc, #404]	@ (800493c <LPTIM1_callback+0x684>)
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	2b04      	cmp	r3, #4
 80047ac:	d000      	beq.n	80047b0 <LPTIM1_callback+0x4f8>
 80047ae:	e0e3      	b.n	8004978 <LPTIM1_callback+0x6c0>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 80047b0:	4b60      	ldr	r3, [pc, #384]	@ (8004934 <LPTIM1_callback+0x67c>)
 80047b2:	2106      	movs	r1, #6
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7fc fe17 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_ONE;
 80047ba:	4b60      	ldr	r3, [pc, #384]	@ (800493c <LPTIM1_callback+0x684>)
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
				if(save_or_preset_mode_engaged == YES){
 80047c0:	e0da      	b.n	8004978 <LPTIM1_callback+0x6c0>
					}
				}
			}
			else{ //at least one of preset_save and preset_select active

				if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT_MAX)){
 80047c2:	4b63      	ldr	r3, [pc, #396]	@ (8004950 <LPTIM1_callback+0x698>)
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <LPTIM1_callback+0x51a>
 80047cc:	d166      	bne.n	800489c <LPTIM1_callback+0x5e4>
 80047ce:	2a95      	cmp	r2, #149	@ 0x95
 80047d0:	d964      	bls.n	800489c <LPTIM1_callback+0x5e4>
 80047d2:	4b5f      	ldr	r3, [pc, #380]	@ (8004950 <LPTIM1_callback+0x698>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d15f      	bne.n	800489c <LPTIM1_callback+0x5e4>
 80047dc:	d103      	bne.n	80047e6 <LPTIM1_callback+0x52e>
 80047de:	21fa      	movs	r1, #250	@ 0xfa
 80047e0:	0049      	lsls	r1, r1, #1
 80047e2:	428a      	cmp	r2, r1
 80047e4:	d25a      	bcs.n	800489c <LPTIM1_callback+0x5e4>

					//get correct preset, as it will be 'off by one'
					if(preset == PRESET_ONE){
 80047e6:	4b55      	ldr	r3, [pc, #340]	@ (800493c <LPTIM1_callback+0x684>)
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d103      	bne.n	80047f6 <LPTIM1_callback+0x53e>

						preset = PRESET_FOUR;
 80047ee:	4b53      	ldr	r3, [pc, #332]	@ (800493c <LPTIM1_callback+0x684>)
 80047f0:	2204      	movs	r2, #4
 80047f2:	701a      	strb	r2, [r3, #0]
 80047f4:	e016      	b.n	8004824 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_TWO){
 80047f6:	4b51      	ldr	r3, [pc, #324]	@ (800493c <LPTIM1_callback+0x684>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d103      	bne.n	8004806 <LPTIM1_callback+0x54e>

						preset = PRESET_ONE;
 80047fe:	4b4f      	ldr	r3, [pc, #316]	@ (800493c <LPTIM1_callback+0x684>)
 8004800:	2201      	movs	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e00e      	b.n	8004824 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_THREE){
 8004806:	4b4d      	ldr	r3, [pc, #308]	@ (800493c <LPTIM1_callback+0x684>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d103      	bne.n	8004816 <LPTIM1_callback+0x55e>

						preset = PRESET_TWO;
 800480e:	4b4b      	ldr	r3, [pc, #300]	@ (800493c <LPTIM1_callback+0x684>)
 8004810:	2202      	movs	r2, #2
 8004812:	701a      	strb	r2, [r3, #0]
 8004814:	e006      	b.n	8004824 <LPTIM1_callback+0x56c>
					}
					else if(preset == PRESET_FOUR){
 8004816:	4b49      	ldr	r3, [pc, #292]	@ (800493c <LPTIM1_callback+0x684>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d102      	bne.n	8004824 <LPTIM1_callback+0x56c>

						preset = PRESET_THREE;
 800481e:	4b47      	ldr	r3, [pc, #284]	@ (800493c <LPTIM1_callback+0x684>)
 8004820:	2203      	movs	r2, #3
 8004822:	701a      	strb	r2, [r3, #0]
					}

					if(preset_save_mode_is_active == YES){
 8004824:	4b46      	ldr	r3, [pc, #280]	@ (8004940 <LPTIM1_callback+0x688>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b01      	cmp	r3, #1
 800482c:	d11b      	bne.n	8004866 <LPTIM1_callback+0x5ae>

						//convert running params to preset, and update user preset and user preset used
						Store_Params_as_User_Preset(preset,
 800482e:	4b43      	ldr	r3, [pc, #268]	@ (800493c <LPTIM1_callback+0x684>)
 8004830:	7818      	ldrb	r0, [r3, #0]
 8004832:	4c4c      	ldr	r4, [pc, #304]	@ (8004964 <LPTIM1_callback+0x6ac>)
 8004834:	4a4c      	ldr	r2, [pc, #304]	@ (8004968 <LPTIM1_callback+0x6b0>)
 8004836:	494d      	ldr	r1, [pc, #308]	@ (800496c <LPTIM1_callback+0x6b4>)
 8004838:	4b4d      	ldr	r3, [pc, #308]	@ (8004970 <LPTIM1_callback+0x6b8>)
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	4b4d      	ldr	r3, [pc, #308]	@ (8004974 <LPTIM1_callback+0x6bc>)
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	0023      	movs	r3, r4
 8004842:	f7fc fd87 	bl	8001354 <Store_Params_as_User_Preset>
													user_presets_array,
													factory_presets_array,
													presets_converted_array);

						//store presets in flash
						Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset - 1)], (uint8_t)(preset - 1));
 8004846:	4b3d      	ldr	r3, [pc, #244]	@ (800493c <LPTIM1_callback+0x684>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	3b01      	subs	r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	001a      	movs	r2, r3
 8004850:	4b44      	ldr	r3, [pc, #272]	@ (8004964 <LPTIM1_callback+0x6ac>)
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	58d2      	ldr	r2, [r2, r3]
 8004856:	4b39      	ldr	r3, [pc, #228]	@ (800493c <LPTIM1_callback+0x684>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	3b01      	subs	r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	0019      	movs	r1, r3
 8004860:	0010      	movs	r0, r2
 8004862:	f7fc f9bf 	bl	8000be4 <Store_Single_Preset_In_Flash>
					}

					Set_to_PC_Mode(preset);
 8004866:	4b35      	ldr	r3, [pc, #212]	@ (800493c <LPTIM1_callback+0x684>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	0018      	movs	r0, r3
 800486c:	f7fc fda0 	bl	80013b0 <Set_to_PC_Mode>

					//led confirm - overwrite prev state with saved state
					Set_LED_to_State(&LED_fsm, LED_CONFIRM);
 8004870:	4b30      	ldr	r3, [pc, #192]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004872:	2107      	movs	r1, #7
 8004874:	0018      	movs	r0, r3
 8004876:	f7fc fdb7 	bl	80013e8 <Set_LED_to_State>
					LED_fsm.prev_state = led_state_saved;
 800487a:	4b34      	ldr	r3, [pc, #208]	@ (800494c <LPTIM1_callback+0x694>)
 800487c:	781a      	ldrb	r2, [r3, #0]
 800487e:	4b2d      	ldr	r3, [pc, #180]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004880:	705a      	strb	r2, [r3, #1]

					preset = PRESET_ONE;
 8004882:	4b2e      	ldr	r3, [pc, #184]	@ (800493c <LPTIM1_callback+0x684>)
 8004884:	2201      	movs	r2, #1
 8004886:	701a      	strb	r2, [r3, #0]
					preset_save_mode_is_active = NO;
 8004888:	4b2d      	ldr	r3, [pc, #180]	@ (8004940 <LPTIM1_callback+0x688>)
 800488a:	2200      	movs	r2, #0
 800488c:	701a      	strb	r2, [r3, #0]
					preset_select_mode_is_active = NO;
 800488e:	4b2d      	ldr	r3, [pc, #180]	@ (8004944 <LPTIM1_callback+0x68c>)
 8004890:	2200      	movs	r2, #0
 8004892:	701a      	strb	r2, [r3, #0]
					save_or_preset_mode_engaged = NO;
 8004894:	4b2c      	ldr	r3, [pc, #176]	@ (8004948 <LPTIM1_callback+0x690>)
 8004896:	2200      	movs	r2, #0
 8004898:	701a      	strb	r2, [r3, #0]
 800489a:	e06e      	b.n	800497a <LPTIM1_callback+0x6c2>

				}
				else if(((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MIN) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SELECT_MODE_ADVANCE_COUNT_MAX))){
 800489c:	4b2c      	ldr	r3, [pc, #176]	@ (8004950 <LPTIM1_callback+0x698>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <LPTIM1_callback+0x5fa>
 80048a6:	d000      	beq.n	80048aa <LPTIM1_callback+0x5f2>
 80048a8:	e067      	b.n	800497a <LPTIM1_callback+0x6c2>
 80048aa:	21fa      	movs	r1, #250	@ 0xfa
 80048ac:	00c9      	lsls	r1, r1, #3
 80048ae:	428a      	cmp	r2, r1
 80048b0:	d363      	bcc.n	800497a <LPTIM1_callback+0x6c2>
 80048b2:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <LPTIM1_callback+0x698>)
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d15e      	bne.n	800497a <LPTIM1_callback+0x6c2>
 80048bc:	d102      	bne.n	80048c4 <LPTIM1_callback+0x60c>
 80048be:	4925      	ldr	r1, [pc, #148]	@ (8004954 <LPTIM1_callback+0x69c>)
 80048c0:	428a      	cmp	r2, r1
 80048c2:	d85a      	bhi.n	800497a <LPTIM1_callback+0x6c2>

					//we want to have advancing through LED blinks, in either preset save or preset select mode, to
					//advance by PRESET_SELECT_MODE_ADVANCE_COUNT

					if(preset == PRESET_ONE){
 80048c4:	4b1d      	ldr	r3, [pc, #116]	@ (800493c <LPTIM1_callback+0x684>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d108      	bne.n	80048de <LPTIM1_callback+0x626>

						Set_LED_to_State(&LED_fsm, LED_ONE_BLINK);
 80048cc:	4b19      	ldr	r3, [pc, #100]	@ (8004934 <LPTIM1_callback+0x67c>)
 80048ce:	2103      	movs	r1, #3
 80048d0:	0018      	movs	r0, r3
 80048d2:	f7fc fd89 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_TWO;
 80048d6:	4b19      	ldr	r3, [pc, #100]	@ (800493c <LPTIM1_callback+0x684>)
 80048d8:	2202      	movs	r2, #2
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e04d      	b.n	800497a <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_TWO){
 80048de:	4b17      	ldr	r3, [pc, #92]	@ (800493c <LPTIM1_callback+0x684>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d108      	bne.n	80048f8 <LPTIM1_callback+0x640>

						Set_LED_to_State(&LED_fsm, LED_TWO_BLINK);
 80048e6:	4b13      	ldr	r3, [pc, #76]	@ (8004934 <LPTIM1_callback+0x67c>)
 80048e8:	2104      	movs	r1, #4
 80048ea:	0018      	movs	r0, r3
 80048ec:	f7fc fd7c 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_THREE;
 80048f0:	4b12      	ldr	r3, [pc, #72]	@ (800493c <LPTIM1_callback+0x684>)
 80048f2:	2203      	movs	r2, #3
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e040      	b.n	800497a <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_THREE){
 80048f8:	4b10      	ldr	r3, [pc, #64]	@ (800493c <LPTIM1_callback+0x684>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b03      	cmp	r3, #3
 80048fe:	d108      	bne.n	8004912 <LPTIM1_callback+0x65a>

						Set_LED_to_State(&LED_fsm, LED_THREE_BLINK);
 8004900:	4b0c      	ldr	r3, [pc, #48]	@ (8004934 <LPTIM1_callback+0x67c>)
 8004902:	2105      	movs	r1, #5
 8004904:	0018      	movs	r0, r3
 8004906:	f7fc fd6f 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_FOUR;
 800490a:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <LPTIM1_callback+0x684>)
 800490c:	2204      	movs	r2, #4
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e033      	b.n	800497a <LPTIM1_callback+0x6c2>
					}
					else if(preset == PRESET_FOUR){
 8004912:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <LPTIM1_callback+0x684>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d12f      	bne.n	800497a <LPTIM1_callback+0x6c2>

						Set_LED_to_State(&LED_fsm, LED_FOUR_BLINK);
 800491a:	4b06      	ldr	r3, [pc, #24]	@ (8004934 <LPTIM1_callback+0x67c>)
 800491c:	2106      	movs	r1, #6
 800491e:	0018      	movs	r0, r3
 8004920:	f7fc fd62 	bl	80013e8 <Set_LED_to_State>
						preset = PRESET_ONE;
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <LPTIM1_callback+0x684>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e026      	b.n	800497a <LPTIM1_callback+0x6c2>
 800492c:	2000059a 	.word	0x2000059a
 8004930:	20000ce4 	.word	0x20000ce4
 8004934:	20000448 	.word	0x20000448
 8004938:	20000d00 	.word	0x20000d00
 800493c:	20000025 	.word	0x20000025
 8004940:	20000ce6 	.word	0x20000ce6
 8004944:	20000ce7 	.word	0x20000ce7
 8004948:	20000ce0 	.word	0x20000ce0
 800494c:	20000ce8 	.word	0x20000ce8
 8004950:	20000cf0 	.word	0x20000cf0
 8004954:	00000dab 	.word	0x00000dab
 8004958:	00001387 	.word	0x00001387
 800495c:	00001b57 	.word	0x00001b57
 8004960:	20000d0c 	.word	0x20000d0c
 8004964:	2000050c 	.word	0x2000050c
 8004968:	20000578 	.word	0x20000578
 800496c:	20000d20 	.word	0x20000d20
 8004970:	2000051c 	.word	0x2000051c
 8004974:	200004fc 	.word	0x200004fc
				if(save_or_preset_mode_engaged == YES){
 8004978:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			depressed_num = 0;
 800497a:	4916      	ldr	r1, [pc, #88]	@ (80049d4 <LPTIM1_callback+0x71c>)
 800497c:	2200      	movs	r2, #0
 800497e:	2300      	movs	r3, #0
 8004980:	600a      	str	r2, [r1, #0]
 8004982:	604b      	str	r3, [r1, #4]
 8004984:	e01b      	b.n	80049be <LPTIM1_callback+0x706>
		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004986:	4b14      	ldr	r3, [pc, #80]	@ (80049d8 <LPTIM1_callback+0x720>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	2b01      	cmp	r3, #1
 800498e:	d116      	bne.n	80049be <LPTIM1_callback+0x706>

			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Select_Timer_Is_Running) == YES){
 8004990:	2380      	movs	r3, #128	@ 0x80
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	4b11      	ldr	r3, [pc, #68]	@ (80049dc <LPTIM1_callback+0x724>)
 8004996:	0011      	movs	r1, r2
 8004998:	0018      	movs	r0, r3
 800499a:	f002 f80b 	bl	80069b4 <Get_Status_Bit>
 800499e:	0003      	movs	r3, r0
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d102      	bne.n	80049aa <LPTIM1_callback+0x6f2>

				preset_save_select_idle_counter = 0;
 80049a4:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <LPTIM1_callback+0x728>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
			}

			depressed_num++;
 80049aa:	4b0a      	ldr	r3, [pc, #40]	@ (80049d4 <LPTIM1_callback+0x71c>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2001      	movs	r0, #1
 80049b2:	2100      	movs	r1, #0
 80049b4:	1812      	adds	r2, r2, r0
 80049b6:	414b      	adcs	r3, r1
 80049b8:	4906      	ldr	r1, [pc, #24]	@ (80049d4 <LPTIM1_callback+0x71c>)
 80049ba:	600a      	str	r2, [r1, #0]
 80049bc:	604b      	str	r3, [r1, #4]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80049be:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <LPTIM1_callback+0x72c>)
 80049c0:	22fa      	movs	r2, #250	@ 0xfa
 80049c2:	21fa      	movs	r1, #250	@ 0xfa
 80049c4:	0018      	movs	r0, r3
 80049c6:	f004 fb55 	bl	8009074 <HAL_LPTIM_SetOnce_Start_IT>

}
 80049ca:	46c0      	nop			@ (mov r8, r8)
 80049cc:	46bd      	mov	sp, r7
 80049ce:	b004      	add	sp, #16
 80049d0:	bdb0      	pop	{r4, r5, r7, pc}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	20000cf0 	.word	0x20000cf0
 80049d8:	20000ce4 	.word	0x20000ce4
 80049dc:	20000d00 	.word	0x20000d00
 80049e0:	20000d0c 	.word	0x20000d0c
 80049e4:	20000c84 	.word	0x20000c84

080049e8 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]


}
 80049f0:	46c0      	nop			@ (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b002      	add	sp, #8
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]

	if(Get_Status_Bit(&statuses, LED_Pause_Timer_Is_Running) == YES){
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	01da      	lsls	r2, r3, #7
 8004a04:	4bcd      	ldr	r3, [pc, #820]	@ (8004d3c <TIM14_callback+0x344>)
 8004a06:	0011      	movs	r1, r2
 8004a08:	0018      	movs	r0, r3
 8004a0a:	f001 ffd3 	bl	80069b4 <Get_Status_Bit>
 8004a0e:	0003      	movs	r3, r0
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d109      	bne.n	8004a28 <TIM14_callback+0x30>

		LED_counter = 0;
 8004a14:	4bca      	ldr	r3, [pc, #808]	@ (8004d40 <TIM14_callback+0x348>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a1a:	4bca      	ldr	r3, [pc, #808]	@ (8004d44 <TIM14_callback+0x34c>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2140      	movs	r1, #64	@ 0x40
 8004a20:	0018      	movs	r0, r3
 8004a22:	f004 fa30 	bl	8008e86 <HAL_GPIO_WritePin>
					Set_LED_to_State(&LED_fsm, prev);
				}
			}
		}
	}
}
 8004a26:	e1d2      	b.n	8004dce <TIM14_callback+0x3d6>
		if(LED_fsm.current_state == LED_ON){
 8004a28:	4bc7      	ldr	r3, [pc, #796]	@ (8004d48 <TIM14_callback+0x350>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d106      	bne.n	8004a40 <TIM14_callback+0x48>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004a32:	4bc4      	ldr	r3, [pc, #784]	@ (8004d44 <TIM14_callback+0x34c>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	2140      	movs	r1, #64	@ 0x40
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f004 fa24 	bl	8008e86 <HAL_GPIO_WritePin>
}
 8004a3e:	e1c6      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_OFF){
 8004a40:	4bc1      	ldr	r3, [pc, #772]	@ (8004d48 <TIM14_callback+0x350>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d106      	bne.n	8004a58 <TIM14_callback+0x60>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a4a:	4bbe      	ldr	r3, [pc, #760]	@ (8004d44 <TIM14_callback+0x34c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	2140      	movs	r1, #64	@ 0x40
 8004a50:	0018      	movs	r0, r3
 8004a52:	f004 fa18 	bl	8008e86 <HAL_GPIO_WritePin>
}
 8004a56:	e1ba      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_ONE_BLINK){
 8004a58:	4bbb      	ldr	r3, [pc, #748]	@ (8004d48 <TIM14_callback+0x350>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d133      	bne.n	8004aca <TIM14_callback+0xd2>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004a62:	4bba      	ldr	r3, [pc, #744]	@ (8004d4c <TIM14_callback+0x354>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24
			if(LED_counter == 0){
 8004a6a:	4bb5      	ldr	r3, [pc, #724]	@ (8004d40 <TIM14_callback+0x348>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <TIM14_callback+0x98>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004a74:	4bb3      	ldr	r3, [pc, #716]	@ (8004d44 <TIM14_callback+0x34c>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	2140      	movs	r1, #64	@ 0x40
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f004 fa03 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004a80:	4baf      	ldr	r3, [pc, #700]	@ (8004d40 <TIM14_callback+0x348>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	3301      	adds	r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	4bad      	ldr	r3, [pc, #692]	@ (8004d40 <TIM14_callback+0x348>)
 8004a8c:	701a      	strb	r2, [r3, #0]
}
 8004a8e:	e19e      	b.n	8004dce <TIM14_callback+0x3d6>
			else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 8004a90:	4bab      	ldr	r3, [pc, #684]	@ (8004d40 <TIM14_callback+0x348>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d900      	bls.n	8004a9c <TIM14_callback+0xa4>
 8004a9a:	e198      	b.n	8004dce <TIM14_callback+0x3d6>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a9c:	4ba9      	ldr	r3, [pc, #676]	@ (8004d44 <TIM14_callback+0x34c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2140      	movs	r1, #64	@ 0x40
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f004 f9ef 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004aa8:	4ba5      	ldr	r3, [pc, #660]	@ (8004d40 <TIM14_callback+0x348>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	3301      	adds	r3, #1
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	4ba3      	ldr	r3, [pc, #652]	@ (8004d40 <TIM14_callback+0x348>)
 8004ab4:	701a      	strb	r2, [r3, #0]
				if(LED_counter == LED_COUNT_OFF_TIME + 1){
 8004ab6:	4ba2      	ldr	r3, [pc, #648]	@ (8004d40 <TIM14_callback+0x348>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b05      	cmp	r3, #5
 8004abe:	d000      	beq.n	8004ac2 <TIM14_callback+0xca>
 8004ac0:	e185      	b.n	8004dce <TIM14_callback+0x3d6>
					LED_counter = 0;
 8004ac2:	4b9f      	ldr	r3, [pc, #636]	@ (8004d40 <TIM14_callback+0x348>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
}
 8004ac8:	e181      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_TWO_BLINK){
 8004aca:	4b9f      	ldr	r3, [pc, #636]	@ (8004d48 <TIM14_callback+0x350>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d156      	bne.n	8004b82 <TIM14_callback+0x18a>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8004d4c <TIM14_callback+0x354>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	625a      	str	r2, [r3, #36]	@ 0x24
			if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004adc:	4b98      	ldr	r3, [pc, #608]	@ (8004d40 <TIM14_callback+0x348>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d815      	bhi.n	8004b12 <TIM14_callback+0x11a>
 8004ae6:	4b96      	ldr	r3, [pc, #600]	@ (8004d40 <TIM14_callback+0x348>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2201      	movs	r2, #1
 8004aee:	4013      	ands	r3, r2
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10d      	bne.n	8004b12 <TIM14_callback+0x11a>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004af6:	4b93      	ldr	r3, [pc, #588]	@ (8004d44 <TIM14_callback+0x34c>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	2140      	movs	r1, #64	@ 0x40
 8004afc:	0018      	movs	r0, r3
 8004afe:	f004 f9c2 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004b02:	4b8f      	ldr	r3, [pc, #572]	@ (8004d40 <TIM14_callback+0x348>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	4b8c      	ldr	r3, [pc, #560]	@ (8004d40 <TIM14_callback+0x348>)
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	e15d      	b.n	8004dce <TIM14_callback+0x3d6>
			else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004b12:	4b8b      	ldr	r3, [pc, #556]	@ (8004d40 <TIM14_callback+0x348>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d815      	bhi.n	8004b48 <TIM14_callback+0x150>
 8004b1c:	4b88      	ldr	r3, [pc, #544]	@ (8004d40 <TIM14_callback+0x348>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2201      	movs	r2, #1
 8004b24:	4013      	ands	r3, r2
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d10d      	bne.n	8004b48 <TIM14_callback+0x150>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b2c:	4b85      	ldr	r3, [pc, #532]	@ (8004d44 <TIM14_callback+0x34c>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2140      	movs	r1, #64	@ 0x40
 8004b32:	0018      	movs	r0, r3
 8004b34:	f004 f9a7 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004b38:	4b81      	ldr	r3, [pc, #516]	@ (8004d40 <TIM14_callback+0x348>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	4b7f      	ldr	r3, [pc, #508]	@ (8004d40 <TIM14_callback+0x348>)
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	e142      	b.n	8004dce <TIM14_callback+0x3d6>
			else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004b48:	4b7d      	ldr	r3, [pc, #500]	@ (8004d40 <TIM14_callback+0x348>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b06      	cmp	r3, #6
 8004b50:	d900      	bls.n	8004b54 <TIM14_callback+0x15c>
 8004b52:	e13c      	b.n	8004dce <TIM14_callback+0x3d6>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b54:	4b7b      	ldr	r3, [pc, #492]	@ (8004d44 <TIM14_callback+0x34c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	2140      	movs	r1, #64	@ 0x40
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f004 f993 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004b60:	4b77      	ldr	r3, [pc, #476]	@ (8004d40 <TIM14_callback+0x348>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4b75      	ldr	r3, [pc, #468]	@ (8004d40 <TIM14_callback+0x348>)
 8004b6c:	701a      	strb	r2, [r3, #0]
				if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004b6e:	4b74      	ldr	r3, [pc, #464]	@ (8004d40 <TIM14_callback+0x348>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b07      	cmp	r3, #7
 8004b76:	d000      	beq.n	8004b7a <TIM14_callback+0x182>
 8004b78:	e129      	b.n	8004dce <TIM14_callback+0x3d6>
					LED_counter = 0;
 8004b7a:	4b71      	ldr	r3, [pc, #452]	@ (8004d40 <TIM14_callback+0x348>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
}
 8004b80:	e125      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004b82:	4b71      	ldr	r3, [pc, #452]	@ (8004d48 <TIM14_callback+0x350>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d156      	bne.n	8004c3a <TIM14_callback+0x242>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004b8c:	4b6f      	ldr	r3, [pc, #444]	@ (8004d4c <TIM14_callback+0x354>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2200      	movs	r2, #0
 8004b92:	625a      	str	r2, [r3, #36]	@ 0x24
			if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004b94:	4b6a      	ldr	r3, [pc, #424]	@ (8004d40 <TIM14_callback+0x348>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d815      	bhi.n	8004bca <TIM14_callback+0x1d2>
 8004b9e:	4b68      	ldr	r3, [pc, #416]	@ (8004d40 <TIM14_callback+0x348>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <TIM14_callback+0x1d2>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004bae:	4b65      	ldr	r3, [pc, #404]	@ (8004d44 <TIM14_callback+0x34c>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	2140      	movs	r1, #64	@ 0x40
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f004 f966 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004bba:	4b61      	ldr	r3, [pc, #388]	@ (8004d40 <TIM14_callback+0x348>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	4b5e      	ldr	r3, [pc, #376]	@ (8004d40 <TIM14_callback+0x348>)
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e101      	b.n	8004dce <TIM14_callback+0x3d6>
			else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004bca:	4b5d      	ldr	r3, [pc, #372]	@ (8004d40 <TIM14_callback+0x348>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d815      	bhi.n	8004c00 <TIM14_callback+0x208>
 8004bd4:	4b5a      	ldr	r3, [pc, #360]	@ (8004d40 <TIM14_callback+0x348>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4013      	ands	r3, r2
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10d      	bne.n	8004c00 <TIM14_callback+0x208>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004be4:	4b57      	ldr	r3, [pc, #348]	@ (8004d44 <TIM14_callback+0x34c>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	2140      	movs	r1, #64	@ 0x40
 8004bea:	0018      	movs	r0, r3
 8004bec:	f004 f94b 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004bf0:	4b53      	ldr	r3, [pc, #332]	@ (8004d40 <TIM14_callback+0x348>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	4b51      	ldr	r3, [pc, #324]	@ (8004d40 <TIM14_callback+0x348>)
 8004bfc:	701a      	strb	r2, [r3, #0]
 8004bfe:	e0e6      	b.n	8004dce <TIM14_callback+0x3d6>
			else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8004c00:	4b4f      	ldr	r3, [pc, #316]	@ (8004d40 <TIM14_callback+0x348>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b08      	cmp	r3, #8
 8004c08:	d900      	bls.n	8004c0c <TIM14_callback+0x214>
 8004c0a:	e0e0      	b.n	8004dce <TIM14_callback+0x3d6>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8004d44 <TIM14_callback+0x34c>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2140      	movs	r1, #64	@ 0x40
 8004c12:	0018      	movs	r0, r3
 8004c14:	f004 f937 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004c18:	4b49      	ldr	r3, [pc, #292]	@ (8004d40 <TIM14_callback+0x348>)
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	4b47      	ldr	r3, [pc, #284]	@ (8004d40 <TIM14_callback+0x348>)
 8004c24:	701a      	strb	r2, [r3, #0]
				if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004c26:	4b46      	ldr	r3, [pc, #280]	@ (8004d40 <TIM14_callback+0x348>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	d000      	beq.n	8004c32 <TIM14_callback+0x23a>
 8004c30:	e0cd      	b.n	8004dce <TIM14_callback+0x3d6>
					LED_counter = 0;
 8004c32:	4b43      	ldr	r3, [pc, #268]	@ (8004d40 <TIM14_callback+0x348>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	701a      	strb	r2, [r3, #0]
}
 8004c38:	e0c9      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004c3a:	4b43      	ldr	r3, [pc, #268]	@ (8004d48 <TIM14_callback+0x350>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b06      	cmp	r3, #6
 8004c42:	d156      	bne.n	8004cf2 <TIM14_callback+0x2fa>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <TIM14_callback+0x354>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	625a      	str	r2, [r3, #36]	@ 0x24
			if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8004d40 <TIM14_callback+0x348>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b06      	cmp	r3, #6
 8004c54:	d815      	bhi.n	8004c82 <TIM14_callback+0x28a>
 8004c56:	4b3a      	ldr	r3, [pc, #232]	@ (8004d40 <TIM14_callback+0x348>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	4013      	ands	r3, r2
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10d      	bne.n	8004c82 <TIM14_callback+0x28a>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004c66:	4b37      	ldr	r3, [pc, #220]	@ (8004d44 <TIM14_callback+0x34c>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	2140      	movs	r1, #64	@ 0x40
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f004 f90a 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004c72:	4b33      	ldr	r3, [pc, #204]	@ (8004d40 <TIM14_callback+0x348>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	4b30      	ldr	r3, [pc, #192]	@ (8004d40 <TIM14_callback+0x348>)
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e0a5      	b.n	8004dce <TIM14_callback+0x3d6>
			else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004c82:	4b2f      	ldr	r3, [pc, #188]	@ (8004d40 <TIM14_callback+0x348>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b06      	cmp	r3, #6
 8004c8a:	d815      	bhi.n	8004cb8 <TIM14_callback+0x2c0>
 8004c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8004d40 <TIM14_callback+0x348>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10d      	bne.n	8004cb8 <TIM14_callback+0x2c0>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c9c:	4b29      	ldr	r3, [pc, #164]	@ (8004d44 <TIM14_callback+0x34c>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	0018      	movs	r0, r3
 8004ca4:	f004 f8ef 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004ca8:	4b25      	ldr	r3, [pc, #148]	@ (8004d40 <TIM14_callback+0x348>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	4b23      	ldr	r3, [pc, #140]	@ (8004d40 <TIM14_callback+0x348>)
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e08a      	b.n	8004dce <TIM14_callback+0x3d6>
			else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004cb8:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <TIM14_callback+0x348>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b0a      	cmp	r3, #10
 8004cc0:	d900      	bls.n	8004cc4 <TIM14_callback+0x2cc>
 8004cc2:	e084      	b.n	8004dce <TIM14_callback+0x3d6>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8004d44 <TIM14_callback+0x34c>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f004 f8db 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <TIM14_callback+0x348>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	b2da      	uxtb	r2, r3
 8004cda:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <TIM14_callback+0x348>)
 8004cdc:	701a      	strb	r2, [r3, #0]
				if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <TIM14_callback+0x348>)
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b0b      	cmp	r3, #11
 8004ce6:	d000      	beq.n	8004cea <TIM14_callback+0x2f2>
 8004ce8:	e071      	b.n	8004dce <TIM14_callback+0x3d6>
					LED_counter = 0;
 8004cea:	4b15      	ldr	r3, [pc, #84]	@ (8004d40 <TIM14_callback+0x348>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	701a      	strb	r2, [r3, #0]
}
 8004cf0:	e06d      	b.n	8004dce <TIM14_callback+0x3d6>
		else if(LED_fsm.current_state == LED_CONFIRM){
 8004cf2:	4b15      	ldr	r3, [pc, #84]	@ (8004d48 <TIM14_callback+0x350>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b07      	cmp	r3, #7
 8004cfa:	d168      	bne.n	8004dce <TIM14_callback+0x3d6>
			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004cfc:	4b13      	ldr	r3, [pc, #76]	@ (8004d4c <TIM14_callback+0x354>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2200      	movs	r2, #0
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24
			if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004d04:	4b0e      	ldr	r3, [pc, #56]	@ (8004d40 <TIM14_callback+0x348>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b06      	cmp	r3, #6
 8004d0c:	d820      	bhi.n	8004d50 <TIM14_callback+0x358>
 8004d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <TIM14_callback+0x348>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2201      	movs	r2, #1
 8004d16:	4013      	ands	r3, r2
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d118      	bne.n	8004d50 <TIM14_callback+0x358>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004d1e:	4b09      	ldr	r3, [pc, #36]	@ (8004d44 <TIM14_callback+0x34c>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	2140      	movs	r1, #64	@ 0x40
 8004d24:	0018      	movs	r0, r3
 8004d26:	f004 f8ae 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004d2a:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <TIM14_callback+0x348>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	4b02      	ldr	r3, [pc, #8]	@ (8004d40 <TIM14_callback+0x348>)
 8004d36:	701a      	strb	r2, [r3, #0]
 8004d38:	e049      	b.n	8004dce <TIM14_callback+0x3d6>
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	20000d00 	.word	0x20000d00
 8004d40:	20000581 	.word	0x20000581
 8004d44:	50000800 	.word	0x50000800
 8004d48:	20000448 	.word	0x20000448
 8004d4c:	20000698 	.word	0x20000698
			else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b06      	cmp	r3, #6
 8004d58:	d815      	bhi.n	8004d86 <TIM14_callback+0x38e>
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2201      	movs	r2, #1
 8004d62:	4013      	ands	r3, r2
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d10d      	bne.n	8004d86 <TIM14_callback+0x38e>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ddc <TIM14_callback+0x3e4>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2140      	movs	r1, #64	@ 0x40
 8004d70:	0018      	movs	r0, r3
 8004d72:	f004 f888 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004d76:	4b18      	ldr	r3, [pc, #96]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	4b15      	ldr	r3, [pc, #84]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d82:	701a      	strb	r2, [r3, #0]
 8004d84:	e023      	b.n	8004dce <TIM14_callback+0x3d6>
			else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004d86:	4b14      	ldr	r3, [pc, #80]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	2b0a      	cmp	r3, #10
 8004d8e:	d81e      	bhi.n	8004dce <TIM14_callback+0x3d6>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004d90:	4b12      	ldr	r3, [pc, #72]	@ (8004ddc <TIM14_callback+0x3e4>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	2140      	movs	r1, #64	@ 0x40
 8004d96:	0018      	movs	r0, r3
 8004d98:	f004 f875 	bl	8008e86 <HAL_GPIO_WritePin>
				LED_counter++;
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	3301      	adds	r3, #1
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004da8:	701a      	strb	r2, [r3, #0]
				if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004daa:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd8 <TIM14_callback+0x3e0>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	2b0b      	cmp	r3, #11
 8004db2:	d10c      	bne.n	8004dce <TIM14_callback+0x3d6>
					enum LED_States prev = LED_fsm.prev_state;
 8004db4:	210f      	movs	r1, #15
 8004db6:	187b      	adds	r3, r7, r1
 8004db8:	4a09      	ldr	r2, [pc, #36]	@ (8004de0 <TIM14_callback+0x3e8>)
 8004dba:	7852      	ldrb	r2, [r2, #1]
 8004dbc:	701a      	strb	r2, [r3, #0]
					Set_LED_to_State(&LED_fsm, prev);
 8004dbe:	187b      	adds	r3, r7, r1
 8004dc0:	781a      	ldrb	r2, [r3, #0]
 8004dc2:	4b07      	ldr	r3, [pc, #28]	@ (8004de0 <TIM14_callback+0x3e8>)
 8004dc4:	0011      	movs	r1, r2
 8004dc6:	0018      	movs	r0, r3
 8004dc8:	f7fc fb0e 	bl	80013e8 <Set_LED_to_State>
}
 8004dcc:	e7ff      	b.n	8004dce <TIM14_callback+0x3d6>
 8004dce:	46c0      	nop			@ (mov r8, r8)
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	b004      	add	sp, #16
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	20000581 	.word	0x20000581
 8004ddc:	50000800 	.word	0x50000800
 8004de0:	20000448 	.word	0x20000448

08004de4 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	0002      	movs	r2, r0
 8004dec:	6039      	str	r1, [r7, #0]
 8004dee:	1dbb      	adds	r3, r7, #6
 8004df0:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004df2:	4b34      	ldr	r3, [pc, #208]	@ (8004ec4 <Input_Capture_Processing+0xe0>)
 8004df4:	2104      	movs	r1, #4
 8004df6:	0018      	movs	r0, r3
 8004df8:	f001 fe02 	bl	8006a00 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004dfc:	1dbb      	adds	r3, r7, #6
 8004dfe:	881b      	ldrh	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	0018      	movs	r0, r3
 8004e04:	f001 fd8b 	bl	800691e <isPrime>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d106      	bne.n	8004e1c <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004e0e:	1dbb      	adds	r3, r7, #6
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3301      	adds	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	1dbb      	adds	r3, r7, #6
 8004e1a:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	019b      	lsls	r3, r3, #6
 8004e24:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004e26:	2317      	movs	r3, #23
 8004e28:	18fb      	adds	r3, r7, r3
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e02d      	b.n	8004e8c <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004e30:	2317      	movs	r3, #23
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2280      	movs	r2, #128	@ 0x80
 8004e3a:	0052      	lsls	r2, r2, #1
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004e44:	1dbb      	adds	r3, r7, #6
 8004e46:	881b      	ldrh	r3, [r3, #0]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	001a      	movs	r2, r3
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	0011      	movs	r1, r2
 8004e50:	0018      	movs	r0, r3
 8004e52:	f7fb f9df 	bl	8000214 <__aeabi_uidivmod>
 8004e56:	000b      	movs	r3, r1
 8004e58:	001a      	movs	r2, r3
 8004e5a:	210e      	movs	r1, #14
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	881b      	ldrh	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004e68:	1dbb      	adds	r3, r7, #6
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	0019      	movs	r1, r3
 8004e70:	6938      	ldr	r0, [r7, #16]
 8004e72:	f7fb f949 	bl	8000108 <__udivsi3>
 8004e76:	0003      	movs	r3, r0
 8004e78:	b29a      	uxth	r2, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	835a      	strh	r2, [r3, #26]
			break;
 8004e7e:	e00a      	b.n	8004e96 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004e80:	2117      	movs	r1, #23
 8004e82:	187b      	adds	r3, r7, r1
 8004e84:	781a      	ldrb	r2, [r3, #0]
 8004e86:	187b      	adds	r3, r7, r1
 8004e88:	3201      	adds	r2, #1
 8004e8a:	701a      	strb	r2, [r3, #0]
 8004e8c:	2317      	movs	r3, #23
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b80      	cmp	r3, #128	@ 0x80
 8004e94:	d9cc      	bls.n	8004e30 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004e96:	1dbb      	adds	r3, r7, #6
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	2280      	movs	r2, #128	@ 0x80
 8004e9e:	0052      	lsls	r2, r2, #1
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2101      	movs	r1, #1
 8004eac:	0018      	movs	r0, r3
 8004eae:	f000 f9f1 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f001 f8ef 	bl	8006098 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8004eba:	2301      	movs	r3, #1
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b006      	add	sp, #24
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000d00 	.word	0x20000d00

08004ec8 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004ec8:	b590      	push	{r4, r7, lr}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004ece:	1dfc      	adds	r4, r7, #7
 8004ed0:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <Start_Input_Capture_Timer+0x30>)
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	0018      	movs	r0, r3
 8004ed6:	f000 f811 	bl	8004efc <Start_IC_TIM>
 8004eda:	0003      	movs	r3, r0
 8004edc:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004ede:	1dfb      	adds	r3, r7, #7
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8004ee6:	f7fd fd3f 	bl	8002968 <Error_Handler>
	}

	return ok;
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	781b      	ldrb	r3, [r3, #0]
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b003      	add	sp, #12
 8004ef4:	bd90      	pop	{r4, r7, pc}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	200008cc 	.word	0x200008cc

08004efc <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004efc:	b5b0      	push	{r4, r5, r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8004f06:	250f      	movs	r5, #15
 8004f08:	197c      	adds	r4, r7, r5
 8004f0a:	4b10      	ldr	r3, [pc, #64]	@ (8004f4c <Start_IC_TIM+0x50>)
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f005 fb4b 	bl	800a5a8 <HAL_TIM_Base_Start_IT>
 8004f12:	0003      	movs	r3, r0
 8004f14:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <Start_IC_TIM+0x50>)
 8004f1a:	0011      	movs	r1, r2
 8004f1c:	0018      	movs	r0, r3
 8004f1e:	f005 ffb1 	bl	800ae84 <HAL_TIM_IC_Start_IT>
 8004f22:	0003      	movs	r3, r0
 8004f24:	0019      	movs	r1, r3
 8004f26:	197b      	adds	r3, r7, r5
 8004f28:	197a      	adds	r2, r7, r5
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004f30:	197b      	adds	r3, r7, r5
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <Start_IC_TIM+0x40>

		Error_Handler();
 8004f38:	f7fd fd16 	bl	8002968 <Error_Handler>
	}

	return ok_AND;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	18fb      	adds	r3, r7, r3
 8004f40:	781b      	ldrb	r3, [r3, #0]
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b004      	add	sp, #16
 8004f48:	bdb0      	pop	{r4, r5, r7, pc}
 8004f4a:	46c0      	nop			@ (mov r8, r8)
 8004f4c:	200008cc 	.word	0x200008cc

08004f50 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	0010      	movs	r0, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	2324      	movs	r3, #36	@ 0x24
 8004f64:	001a      	movs	r2, r3
 8004f66:	f009 f92f 	bl	800e1c8 <memcpy>

	return 1;
 8004f6a:	2301      	movs	r3, #1
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004f78:	4b0b      	ldr	r3, [pc, #44]	@ (8004fa8 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f001 fcb2 	bl	80068e6 <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004f82:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2200      	movs	r2, #0
 8004f88:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004f8a:	4b08      	ldr	r3, [pc, #32]	@ (8004fac <Start_Measurement_Reelapse_Timer+0x38>)
 8004f8c:	881b      	ldrh	r3, [r3, #0]
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	4b05      	ldr	r3, [pc, #20]	@ (8004fa8 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004f96:	4b04      	ldr	r3, [pc, #16]	@ (8004fa8 <Start_Measurement_Reelapse_Timer+0x34>)
 8004f98:	2100      	movs	r1, #0
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f001 fc87 	bl	80068ae <Start_OC_TIM>

	return 1;
 8004fa0:	2301      	movs	r3, #1
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000988 	.word	0x20000988
 8004fac:	20000cfc 	.word	0x20000cfc

08004fb0 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <Begin_Input_Capture_Measurement+0x14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004fbc:	2301      	movs	r3, #1
}
 8004fbe:	0018      	movs	r0, r3
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	200008cc 	.word	0x200008cc

08004fc8 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004fcc:	f7fd fcd2 	bl	8002974 <System_Init>

	//STARTUP
	Startup();
 8004fd0:	f000 fb56 	bl	8005680 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004fd4:	4b48      	ldr	r3, [pc, #288]	@ (80050f8 <main+0x130>)
 8004fd6:	2104      	movs	r1, #4
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f001 fceb 	bl	80069b4 <Get_Status_Bit>
 8004fde:	0003      	movs	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d107      	bne.n	8004ff4 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004fe4:	4b45      	ldr	r3, [pc, #276]	@ (80050fc <main+0x134>)
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	4a45      	ldr	r2, [pc, #276]	@ (8005100 <main+0x138>)
 8004fec:	0011      	movs	r1, r2
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7ff fef8 	bl	8004de4 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004ff4:	4b40      	ldr	r3, [pc, #256]	@ (80050f8 <main+0x130>)
 8004ff6:	2140      	movs	r1, #64	@ 0x40
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f001 fcdb 	bl	80069b4 <Get_Status_Bit>
 8004ffe:	0003      	movs	r3, r0
 8005000:	2b01      	cmp	r3, #1
 8005002:	d12b      	bne.n	800505c <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8005004:	4b3f      	ldr	r3, [pc, #252]	@ (8005104 <main+0x13c>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	23fa      	movs	r3, #250	@ 0xfa
 800500a:	01db      	lsls	r3, r3, #7
 800500c:	429a      	cmp	r2, r3
 800500e:	d218      	bcs.n	8005042 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8005010:	4b3d      	ldr	r3, [pc, #244]	@ (8005108 <main+0x140>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00d      	beq.n	8005036 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800501a:	4b37      	ldr	r3, [pc, #220]	@ (80050f8 <main+0x130>)
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	0018      	movs	r0, r3
 8005020:	f001 fcee 	bl	8006a00 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8005024:	4b34      	ldr	r3, [pc, #208]	@ (80050f8 <main+0x130>)
 8005026:	2120      	movs	r1, #32
 8005028:	0018      	movs	r0, r3
 800502a:	f001 fce9 	bl	8006a00 <Clear_Status_Bit>
					idle_counter = 0;
 800502e:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <main+0x13c>)
 8005030:	2200      	movs	r2, #0
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e012      	b.n	800505c <main+0x94>
				}
				else{

					idle_counter++;
 8005036:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <main+0x13c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	1c5a      	adds	r2, r3, #1
 800503c:	4b31      	ldr	r3, [pc, #196]	@ (8005104 <main+0x13c>)
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e00c      	b.n	800505c <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8005042:	4b2d      	ldr	r3, [pc, #180]	@ (80050f8 <main+0x130>)
 8005044:	2140      	movs	r1, #64	@ 0x40
 8005046:	0018      	movs	r0, r3
 8005048:	f001 fcda 	bl	8006a00 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800504c:	4b2a      	ldr	r3, [pc, #168]	@ (80050f8 <main+0x130>)
 800504e:	2120      	movs	r1, #32
 8005050:	0018      	movs	r0, r3
 8005052:	f001 fcc3 	bl	80069dc <Set_Status_Bit>
				idle_counter = 0;
 8005056:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <main+0x13c>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 800505c:	2380      	movs	r3, #128	@ 0x80
 800505e:	005a      	lsls	r2, r3, #1
 8005060:	4b25      	ldr	r3, [pc, #148]	@ (80050f8 <main+0x130>)
 8005062:	0011      	movs	r1, r2
 8005064:	0018      	movs	r0, r3
 8005066:	f001 fca5 	bl	80069b4 <Get_Status_Bit>
 800506a:	0003      	movs	r3, r0
 800506c:	2b01      	cmp	r3, #1
 800506e:	d122      	bne.n	80050b6 <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8005070:	4b26      	ldr	r3, [pc, #152]	@ (800510c <main+0x144>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a26      	ldr	r2, [pc, #152]	@ (8005110 <main+0x148>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d805      	bhi.n	8005086 <main+0xbe>

				midi_counter++;
 800507a:	4b24      	ldr	r3, [pc, #144]	@ (800510c <main+0x144>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	4b22      	ldr	r3, [pc, #136]	@ (800510c <main+0x144>)
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	e017      	b.n	80050b6 <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8005086:	2380      	movs	r3, #128	@ 0x80
 8005088:	005a      	lsls	r2, r3, #1
 800508a:	4b1b      	ldr	r3, [pc, #108]	@ (80050f8 <main+0x130>)
 800508c:	0011      	movs	r1, r2
 800508e:	0018      	movs	r0, r3
 8005090:	f001 fcb6 	bl	8006a00 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8005094:	2380      	movs	r3, #128	@ 0x80
 8005096:	009a      	lsls	r2, r3, #2
 8005098:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <main+0x130>)
 800509a:	0011      	movs	r1, r2
 800509c:	0018      	movs	r0, r3
 800509e:	f001 fc9d 	bl	80069dc <Set_Status_Bit>
				active_status_byte = 0;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005114 <main+0x14c>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80050a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005118 <main+0x150>)
 80050aa:	0018      	movs	r0, r3
 80050ac:	f7fc fb7f 	bl	80017ae <Clear_Data_Buffer>
				midi_counter = 0;
 80050b0:	4b16      	ldr	r3, [pc, #88]	@ (800510c <main+0x144>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, LED_Pause_Timer_Is_Running) == YES){
 80050b6:	2380      	movs	r3, #128	@ 0x80
 80050b8:	01da      	lsls	r2, r3, #7
 80050ba:	4b0f      	ldr	r3, [pc, #60]	@ (80050f8 <main+0x130>)
 80050bc:	0011      	movs	r1, r2
 80050be:	0018      	movs	r0, r3
 80050c0:	f001 fc78 	bl	80069b4 <Get_Status_Bit>
 80050c4:	0003      	movs	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d184      	bne.n	8004fd4 <main+0xc>

			if(led_pause_counter < LED_PAUSE_COUNT){
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <main+0x154>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a14      	ldr	r2, [pc, #80]	@ (8005120 <main+0x158>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d805      	bhi.n	80050e0 <main+0x118>

				led_pause_counter++;
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <main+0x154>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	4b10      	ldr	r3, [pc, #64]	@ (800511c <main+0x154>)
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e779      	b.n	8004fd4 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, LED_Pause_Timer_Is_Running);
 80050e0:	2380      	movs	r3, #128	@ 0x80
 80050e2:	01da      	lsls	r2, r3, #7
 80050e4:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <main+0x130>)
 80050e6:	0011      	movs	r1, r2
 80050e8:	0018      	movs	r0, r3
 80050ea:	f001 fc89 	bl	8006a00 <Clear_Status_Bit>
				led_pause_counter = 0;
 80050ee:	4b0b      	ldr	r3, [pc, #44]	@ (800511c <main+0x154>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80050f4:	e76e      	b.n	8004fd4 <main+0xc>
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	20000d00 	.word	0x20000d00
 80050fc:	20000cfc 	.word	0x20000cfc
 8005100:	20000d68 	.word	0x20000d68
 8005104:	20000d04 	.word	0x20000d04
 8005108:	20000444 	.word	0x20000444
 800510c:	20000d08 	.word	0x20000d08
 8005110:	00030d3f 	.word	0x00030d3f
 8005114:	20000583 	.word	0x20000583
 8005118:	20000588 	.word	0x20000588
 800511c:	20000d10 	.word	0x20000d10
 8005120:	0002ab97 	.word	0x0002ab97

08005124 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8005124:	b590      	push	{r4, r7, lr}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8005130:	2417      	movs	r4, #23
 8005132:	193b      	adds	r3, r7, r4
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	0018      	movs	r0, r3
 800513c:	f005 f9e8 	bl	800a510 <HAL_TIM_Base_Start>
 8005140:	0003      	movs	r3, r0
 8005142:	0019      	movs	r1, r3
 8005144:	193b      	adds	r3, r7, r4
 8005146:	193a      	adds	r2, r7, r4
 8005148:	7812      	ldrb	r2, [r2, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f005 fd49 	bl	800abec <HAL_TIM_PWM_Start>
 800515a:	0003      	movs	r3, r0
 800515c:	0019      	movs	r1, r3
 800515e:	193b      	adds	r3, r7, r4
 8005160:	193a      	adds	r2, r7, r4
 8005162:	7812      	ldrb	r2, [r2, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	0011      	movs	r1, r2
 800516e:	0018      	movs	r0, r3
 8005170:	f005 fd3c 	bl	800abec <HAL_TIM_PWM_Start>
 8005174:	0003      	movs	r3, r0
 8005176:	0019      	movs	r1, r3
 8005178:	193b      	adds	r3, r7, r4
 800517a:	193a      	adds	r2, r7, r4
 800517c:	7812      	ldrb	r2, [r2, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8005182:	193b      	adds	r3, r7, r4
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 800518a:	f7fd fbed 	bl	8002968 <Error_Handler>
	}

	return ok_OR;
 800518e:	2317      	movs	r3, #23
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	781b      	ldrb	r3, [r3, #0]
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	b007      	add	sp, #28
 800519a:	bd90      	pop	{r4, r7, pc}

0800519c <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80051a2:	1dfc      	adds	r4, r7, #7
 80051a4:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <Start_Freq_Gen_Timer+0x30>)
 80051a6:	2100      	movs	r1, #0
 80051a8:	0018      	movs	r0, r3
 80051aa:	f001 fb80 	bl	80068ae <Start_OC_TIM>
 80051ae:	0003      	movs	r3, r0
 80051b0:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80051b2:	1dfb      	adds	r3, r7, #7
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 80051ba:	f7fd fbd5 	bl	8002968 <Error_Handler>
	}

	return ok;
 80051be:	1dfb      	adds	r3, r7, #7
 80051c0:	781b      	ldrb	r3, [r3, #0]
}
 80051c2:	0018      	movs	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b003      	add	sp, #12
 80051c8:	bd90      	pop	{r4, r7, pc}
 80051ca:	46c0      	nop			@ (mov r8, r8)
 80051cc:	20000810 	.word	0x20000810

080051d0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 80051d8:	2300      	movs	r3, #0
 80051da:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 80051dc:	210b      	movs	r1, #11
 80051de:	187b      	adds	r3, r7, r1
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	891b      	ldrh	r3, [r3, #8]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	001a      	movs	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	189b      	adds	r3, r3, r2
 80051f2:	019b      	lsls	r3, r3, #6
 80051f4:	189b      	adds	r3, r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	189b      	adds	r3, r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	0a9b      	lsrs	r3, r3, #10
 8005200:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	09da      	lsrs	r2, r3, #7
 8005206:	187b      	adds	r3, r7, r1
 8005208:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	b29a      	uxth	r2, r3
 800520e:	187b      	adds	r3, r7, r1
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b29b      	uxth	r3, r3
 8005214:	01db      	lsls	r3, r3, #7
 8005216:	b29b      	uxth	r3, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	b29a      	uxth	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8005220:	187b      	adds	r3, r7, r1
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2280      	movs	r2, #128	@ 0x80
 8005226:	00d2      	lsls	r2, r2, #3
 8005228:	411a      	asrs	r2, r3
 800522a:	0013      	movs	r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	835a      	strh	r2, [r3, #26]

    return 1;
 8005232:	2301      	movs	r3, #1
}
 8005234:	0018      	movs	r0, r3
 8005236:	46bd      	mov	sp, r7
 8005238:	b004      	add	sp, #16
 800523a:	bd80      	pop	{r7, pc}

0800523c <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8b1b      	ldrh	r3, [r3, #24]
 8005248:	b29a      	uxth	r2, r3
 800524a:	4b10      	ldr	r3, [pc, #64]	@ (800528c <Set_Oscillator_Values+0x50>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	8b1b      	ldrh	r3, [r3, #24]
 8005254:	b29b      	uxth	r3, r3
 8005256:	001a      	movs	r2, r3
 8005258:	4b0c      	ldr	r3, [pc, #48]	@ (800528c <Set_Oscillator_Values+0x50>)
 800525a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8bdb      	ldrh	r3, [r3, #30]
 8005260:	b29a      	uxth	r2, r3
 8005262:	4b0a      	ldr	r3, [pc, #40]	@ (800528c <Set_Oscillator_Values+0x50>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	885b      	ldrh	r3, [r3, #2]
 800526c:	b29a      	uxth	r2, r3
 800526e:	4b08      	ldr	r3, [pc, #32]	@ (8005290 <Set_Oscillator_Values+0x54>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	889b      	ldrh	r3, [r3, #4]
 8005278:	b29a      	uxth	r2, r3
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <Set_Oscillator_Values+0x54>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8005280:	2301      	movs	r3, #1
}
 8005282:	0018      	movs	r0, r3
 8005284:	46bd      	mov	sp, r7
 8005286:	b002      	add	sp, #8
 8005288:	bd80      	pop	{r7, pc}
 800528a:	46c0      	nop			@ (mov r8, r8)
 800528c:	20000810 	.word	0x20000810
 8005290:	20000a44 	.word	0x20000a44

08005294 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	000a      	movs	r2, r1
 800529e:	1cfb      	adds	r3, r7, #3
 80052a0:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80052a2:	1cfb      	adds	r3, r7, #3
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d144      	bne.n	8005334 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	89db      	ldrh	r3, [r3, #14]
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	3301      	adds	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	89db      	ldrh	r3, [r3, #14]
 80052bc:	b29a      	uxth	r2, r3
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d102      	bne.n	80052cc <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	89db      	ldrh	r3, [r3, #14]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	741a      	strb	r2, [r3, #16]
 80052e2:	e05a      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	89db      	ldrh	r3, [r3, #14]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	2b80      	cmp	r3, #128	@ 0x80
 80052ec:	d106      	bne.n	80052fc <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	741a      	strb	r2, [r3, #16]
 80052fa:	e04e      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	89db      	ldrh	r3, [r3, #14]
 8005300:	b29a      	uxth	r2, r3
 8005302:	2380      	movs	r3, #128	@ 0x80
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	429a      	cmp	r2, r3
 8005308:	d106      	bne.n	8005318 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	741a      	strb	r2, [r3, #16]
 8005316:	e040      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	89db      	ldrh	r3, [r3, #14]
 800531c:	b29a      	uxth	r2, r3
 800531e:	23c0      	movs	r3, #192	@ 0xc0
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	429a      	cmp	r2, r3
 8005324:	d139      	bne.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	741a      	strb	r2, [r3, #16]
 8005332:	e032      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8005334:	1cfb      	adds	r3, r7, #3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11f      	bne.n	800537c <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	799b      	ldrb	r3, [r3, #6]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d004      	beq.n	8005350 <Calculate_Next_Main_Oscillator_Values+0xbc>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	799b      	ldrb	r3, [r3, #6]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	22a7      	movs	r2, #167	@ 0xa7
 8005354:	0052      	lsls	r2, r2, #1
 8005356:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	741a      	strb	r2, [r3, #16]
 8005364:	e019      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2280      	movs	r2, #128	@ 0x80
 800536a:	0052      	lsls	r2, r2, #1
 800536c:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	741a      	strb	r2, [r3, #16]
 800537a:	e00e      	b.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 800537c:	1cfb      	adds	r3, r7, #3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d10a      	bne.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	89db      	ldrh	r3, [r3, #14]
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d105      	bne.n	800539a <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	799b      	ldrb	r3, [r3, #6]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d109      	bne.n	80053b8 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	89db      	ldrh	r3, [r3, #14]
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	001a      	movs	r2, r3
 80053ac:	4b31      	ldr	r3, [pc, #196]	@ (8005474 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 80053ae:	0052      	lsls	r2, r2, #1
 80053b0:	5ad2      	ldrh	r2, [r2, r3]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	e029      	b.n	800540c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	799b      	ldrb	r3, [r3, #6]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d109      	bne.n	80053d6 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	89db      	ldrh	r3, [r3, #14]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	001a      	movs	r2, r3
 80053ca:	4b2b      	ldr	r3, [pc, #172]	@ (8005478 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 80053cc:	0052      	lsls	r2, r2, #1
 80053ce:	5ad2      	ldrh	r2, [r2, r3]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	e01a      	b.n	800540c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	799b      	ldrb	r3, [r3, #6]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b02      	cmp	r3, #2
 80053de:	d108      	bne.n	80053f2 <Calculate_Next_Main_Oscillator_Values+0x15e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	89db      	ldrh	r3, [r3, #14]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2bff      	cmp	r3, #255	@ 0xff
 80053e8:	d803      	bhi.n	80053f2 <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a23      	ldr	r2, [pc, #140]	@ (800547c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e00c      	b.n	800540c <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	799b      	ldrb	r3, [r3, #6]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d107      	bne.n	800540c <Calculate_Next_Main_Oscillator_Values+0x178>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	89db      	ldrh	r3, [r3, #14]
 8005400:	b29b      	uxth	r3, r3
 8005402:	2bff      	cmp	r3, #255	@ 0xff
 8005404:	d902      	bls.n	800540c <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	7a9b      	ldrb	r3, [r3, #10]
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b7f      	cmp	r3, #127	@ 0x7f
 8005414:	d108      	bne.n	8005428 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	4a17      	ldr	r2, [pc, #92]	@ (800547c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	b29a      	uxth	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e01b      	b.n	8005460 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	7a9b      	ldrb	r3, [r3, #10]
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d013      	beq.n	800545a <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 8005432:	2300      	movs	r3, #0
 8005434:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	001a      	movs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7a9b      	ldrb	r3, [r3, #10]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4353      	muls	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	b29b      	uxth	r3, r3
 800544e:	4a0b      	ldr	r2, [pc, #44]	@ (800547c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	b29a      	uxth	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e002      	b.n	8005460 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a07      	ldr	r2, [pc, #28]	@ (800547c <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800545e:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	805a      	strh	r2, [r3, #2]

	return 1;
 800546a:	2301      	movs	r3, #1
}
 800546c:	0018      	movs	r0, r3
 800546e:	46bd      	mov	sp, r7
 8005470:	b004      	add	sp, #16
 8005472:	bd80      	pop	{r7, pc}
 8005474:	0800e638 	.word	0x0800e638
 8005478:	0800e238 	.word	0x0800e238
 800547c:	000003ff 	.word	0x000003ff

08005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	4a44      	ldr	r2, [pc, #272]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800548e:	5a9b      	ldrh	r3, [r3, r2]
 8005490:	b29b      	uxth	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	4a41      	ldr	r2, [pc, #260]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800549a:	5a9b      	ldrh	r3, [r3, r2]
 800549c:	b29b      	uxth	r3, r3
 800549e:	1e5a      	subs	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b299      	uxth	r1, r3
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	0052      	lsls	r2, r2, #1
 80054aa:	52d1      	strh	r1, [r2, r3]
 80054ac:	e006      	b.n	80054bc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b299      	uxth	r1, r3
 80054b4:	683a      	ldr	r2, [r7, #0]
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	4a38      	ldr	r2, [pc, #224]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054c0:	5a9b      	ldrh	r3, [r3, r2]
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10e      	bne.n	80054e6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	4a35      	ldr	r2, [pc, #212]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054cc:	2180      	movs	r1, #128	@ 0x80
 80054ce:	0089      	lsls	r1, r1, #2
 80054d0:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	4a33      	ldr	r2, [pc, #204]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054d6:	5a9b      	ldrh	r3, [r3, r2]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b299      	uxth	r1, r3
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	4a30      	ldr	r2, [pc, #192]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054e2:	5299      	strh	r1, [r3, r2]
 80054e4:	e026      	b.n	8005534 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	4a2e      	ldr	r2, [pc, #184]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054ea:	5a9b      	ldrh	r3, [r3, r2]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10e      	bne.n	8005510 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	4a2b      	ldr	r2, [pc, #172]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80054f6:	2180      	movs	r1, #128	@ 0x80
 80054f8:	0089      	lsls	r1, r1, #2
 80054fa:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4a28      	ldr	r2, [pc, #160]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005500:	5a9b      	ldrh	r3, [r3, r2]
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b299      	uxth	r1, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	4a25      	ldr	r2, [pc, #148]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800550c:	5299      	strh	r1, [r3, r2]
 800550e:	e011      	b.n	8005534 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	4a23      	ldr	r2, [pc, #140]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005514:	5a9b      	ldrh	r3, [r3, r2]
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b299      	uxth	r1, r3
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	4a20      	ldr	r2, [pc, #128]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005520:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005526:	5a9b      	ldrh	r3, [r3, r2]
 8005528:	b29b      	uxth	r3, r3
 800552a:	3b01      	subs	r3, #1
 800552c:	b299      	uxth	r1, r3
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	4a1c      	ldr	r2, [pc, #112]	@ (80055a4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005532:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005538:	5a9b      	ldrh	r3, [r3, r2]
 800553a:	b29b      	uxth	r3, r3
 800553c:	001a      	movs	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005542:	b29b      	uxth	r3, r3
 8005544:	18d2      	adds	r2, r2, r3
 8005546:	2380      	movs	r3, #128	@ 0x80
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	429a      	cmp	r2, r3
 800554c:	dd13      	ble.n	8005576 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4913      	ldr	r1, [pc, #76]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005554:	5a5b      	ldrh	r3, [r3, r1]
 8005556:	b29b      	uxth	r3, r3
 8005558:	0019      	movs	r1, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800555e:	b29b      	uxth	r3, r3
 8005560:	18cb      	adds	r3, r1, r3
 8005562:	4911      	ldr	r1, [pc, #68]	@ (80055a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8005564:	468c      	mov	ip, r1
 8005566:	4463      	add	r3, ip
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	18d3      	adds	r3, r2, r3
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	809a      	strh	r2, [r3, #4]
 8005574:	e00f      	b.n	8005596 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8005576:	683a      	ldr	r2, [r7, #0]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	4909      	ldr	r1, [pc, #36]	@ (80055a0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800557c:	5a5b      	ldrh	r3, [r3, r1]
 800557e:	b29b      	uxth	r3, r3
 8005580:	0019      	movs	r1, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005586:	b29b      	uxth	r3, r3
 8005588:	18cb      	adds	r3, r1, r3
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	18d3      	adds	r3, r2, r3
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8005596:	2301      	movs	r3, #1
}
 8005598:	0018      	movs	r0, r3
 800559a:	46bd      	mov	sp, r7
 800559c:	b002      	add	sp, #8
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	00000402 	.word	0x00000402
 80055a4:	00000404 	.word	0x00000404
 80055a8:	7ffffe00 	.word	0x7ffffe00

080055ac <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	2116      	movs	r1, #22
 80055be:	187b      	adds	r3, r7, r1
 80055c0:	0952      	lsrs	r2, r2, #5
 80055c2:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 80055c4:	187b      	adds	r3, r7, r1
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80055ca:	d803      	bhi.n	80055d4 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	719a      	strb	r2, [r3, #6]
 80055d2:	e010      	b.n	80055f6 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 80055d4:	2316      	movs	r3, #22
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	2b55      	cmp	r3, #85	@ 0x55
 80055dc:	d803      	bhi.n	80055e6 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	719a      	strb	r2, [r3, #6]
 80055e4:	e007      	b.n	80055f6 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 80055e6:	2316      	movs	r3, #22
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ee:	d802      	bhi.n	80055f6 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	3302      	adds	r3, #2
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	2114      	movs	r1, #20
 8005600:	187b      	adds	r3, r7, r1
 8005602:	0952      	lsrs	r2, r2, #5
 8005604:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8005606:	187b      	adds	r3, r7, r1
 8005608:	187a      	adds	r2, r7, r1
 800560a:	8812      	ldrh	r2, [r2, #0]
 800560c:	00d2      	lsls	r2, r2, #3
 800560e:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	187a      	adds	r2, r7, r1
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	3304      	adds	r3, #4
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	b29a      	uxth	r2, r3
 8005624:	2113      	movs	r1, #19
 8005626:	187b      	adds	r3, r7, r1
 8005628:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	187a      	adds	r2, r7, r1
 800562e:	7812      	ldrb	r2, [r2, #0]
 8005630:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3306      	adds	r3, #6
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29a      	uxth	r2, r3
 800563a:	2110      	movs	r1, #16
 800563c:	187b      	adds	r3, r7, r1
 800563e:	0952      	lsrs	r2, r2, #5
 8005640:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8005642:	187a      	adds	r2, r7, r1
 8005644:	187b      	adds	r3, r7, r1
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	18db      	adds	r3, r3, r3
 800564a:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	187a      	adds	r2, r7, r1
 8005650:	8812      	ldrh	r2, [r2, #0]
 8005652:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	3308      	adds	r3, #8
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29a      	uxth	r2, r3
 800565c:	210e      	movs	r1, #14
 800565e:	187b      	adds	r3, r7, r1
 8005660:	0952      	lsrs	r2, r2, #5
 8005662:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8005664:	187b      	adds	r3, r7, r1
 8005666:	187a      	adds	r2, r7, r1
 8005668:	8812      	ldrh	r2, [r2, #0]
 800566a:	0092      	lsls	r2, r2, #2
 800566c:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	187a      	adds	r2, r7, r1
 8005672:	8812      	ldrh	r2, [r2, #0]
 8005674:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8005676:	2301      	movs	r3, #1
}
 8005678:	0018      	movs	r0, r3
 800567a:	46bd      	mov	sp, r7
 800567c:	b006      	add	sp, #24
 800567e:	bd80      	pop	{r7, pc}

08005680 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8005680:	b590      	push	{r4, r7, lr}
 8005682:	b085      	sub	sp, #20
 8005684:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8005686:	2007      	movs	r0, #7
 8005688:	f002 fd9b 	bl	80081c2 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 800568c:	4b5a      	ldr	r3, [pc, #360]	@ (80057f8 <Startup+0x178>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68da      	ldr	r2, [r3, #12]
 8005692:	4b59      	ldr	r3, [pc, #356]	@ (80057f8 <Startup+0x178>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2101      	movs	r1, #1
 8005698:	430a      	orrs	r2, r1
 800569a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 800569c:	4b57      	ldr	r3, [pc, #348]	@ (80057fc <Startup+0x17c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	4b56      	ldr	r3, [pc, #344]	@ (80057fc <Startup+0x17c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2101      	movs	r1, #1
 80056a8:	430a      	orrs	r2, r1
 80056aa:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80056ac:	2380      	movs	r3, #128	@ 0x80
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	23a0      	movs	r3, #160	@ 0xa0
 80056b2:	05db      	lsls	r3, r3, #23
 80056b4:	2201      	movs	r2, #1
 80056b6:	0018      	movs	r0, r3
 80056b8:	f003 fbe5 	bl	8008e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	0159      	lsls	r1, r3, #5
 80056c0:	23a0      	movs	r3, #160	@ 0xa0
 80056c2:	05db      	lsls	r3, r3, #23
 80056c4:	2201      	movs	r2, #1
 80056c6:	0018      	movs	r0, r3
 80056c8:	f003 fbdd 	bl	8008e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 80056cc:	23a0      	movs	r3, #160	@ 0xa0
 80056ce:	05db      	lsls	r3, r3, #23
 80056d0:	2200      	movs	r2, #0
 80056d2:	2180      	movs	r1, #128	@ 0x80
 80056d4:	0018      	movs	r0, r3
 80056d6:	f003 fbd6 	bl	8008e86 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 80056da:	f7fa feb7 	bl	800044c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 80056de:	f7fb fccd 	bl	800107c <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 80056e2:	4b47      	ldr	r3, [pc, #284]	@ (8005800 <Startup+0x180>)
 80056e4:	4a47      	ldr	r2, [pc, #284]	@ (8005804 <Startup+0x184>)
 80056e6:	4948      	ldr	r1, [pc, #288]	@ (8005808 <Startup+0x188>)
 80056e8:	4c48      	ldr	r4, [pc, #288]	@ (800580c <Startup+0x18c>)
 80056ea:	2004      	movs	r0, #4
 80056ec:	9000      	str	r0, [sp, #0]
 80056ee:	0020      	movs	r0, r4
 80056f0:	f7fb fbb8 	bl	8000e64 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 80056f4:	4b46      	ldr	r3, [pc, #280]	@ (8005810 <Startup+0x190>)
 80056f6:	4a47      	ldr	r2, [pc, #284]	@ (8005814 <Startup+0x194>)
 80056f8:	4943      	ldr	r1, [pc, #268]	@ (8005808 <Startup+0x188>)
 80056fa:	4847      	ldr	r0, [pc, #284]	@ (8005818 <Startup+0x198>)
 80056fc:	2404      	movs	r4, #4
 80056fe:	9400      	str	r4, [sp, #0]
 8005700:	f7fb fc66 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8005704:	4b45      	ldr	r3, [pc, #276]	@ (800581c <Startup+0x19c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	001a      	movs	r2, r3
 800570a:	4945      	ldr	r1, [pc, #276]	@ (8005820 <Startup+0x1a0>)
 800570c:	4b45      	ldr	r3, [pc, #276]	@ (8005824 <Startup+0x1a4>)
 800570e:	0018      	movs	r0, r3
 8005710:	f001 fe08 	bl	8007324 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8005714:	46c0      	nop			@ (mov r8, r8)
 8005716:	4b3b      	ldr	r3, [pc, #236]	@ (8005804 <Startup+0x184>)
 8005718:	2110      	movs	r1, #16
 800571a:	0018      	movs	r0, r3
 800571c:	f001 f94a 	bl	80069b4 <Get_Status_Bit>
 8005720:	1e03      	subs	r3, r0, #0
 8005722:	d0f8      	beq.n	8005716 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8005724:	1dbb      	adds	r3, r7, #6
 8005726:	2200      	movs	r2, #0
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	e02c      	b.n	8005786 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 800572c:	4b3e      	ldr	r3, [pc, #248]	@ (8005828 <Startup+0x1a8>)
 800572e:	799b      	ldrb	r3, [r3, #6]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d111      	bne.n	800575a <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8005736:	4b3c      	ldr	r3, [pc, #240]	@ (8005828 <Startup+0x1a8>)
 8005738:	7a9b      	ldrb	r3, [r3, #10]
 800573a:	b2db      	uxtb	r3, r3
 800573c:	001a      	movs	r2, r3
 800573e:	0013      	movs	r3, r2
 8005740:	029b      	lsls	r3, r3, #10
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	11db      	asrs	r3, r3, #7
 8005746:	b29b      	uxth	r3, r3
 8005748:	1dba      	adds	r2, r7, #6
 800574a:	8812      	ldrh	r2, [r2, #0]
 800574c:	4937      	ldr	r1, [pc, #220]	@ (800582c <Startup+0x1ac>)
 800574e:	1acb      	subs	r3, r1, r3
 8005750:	b299      	uxth	r1, r3
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <Startup+0x1b0>)
 8005754:	0052      	lsls	r2, r2, #1
 8005756:	52d1      	strh	r1, [r2, r3]
 8005758:	e010      	b.n	800577c <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 800575a:	4b33      	ldr	r3, [pc, #204]	@ (8005828 <Startup+0x1a8>)
 800575c:	7a9b      	ldrb	r3, [r3, #10]
 800575e:	b2db      	uxtb	r3, r3
 8005760:	001a      	movs	r2, r3
 8005762:	0013      	movs	r3, r2
 8005764:	029b      	lsls	r3, r3, #10
 8005766:	1a9b      	subs	r3, r3, r2
 8005768:	121b      	asrs	r3, r3, #8
 800576a:	b29b      	uxth	r3, r3
 800576c:	1dba      	adds	r2, r7, #6
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	492e      	ldr	r1, [pc, #184]	@ (800582c <Startup+0x1ac>)
 8005772:	1acb      	subs	r3, r1, r3
 8005774:	b299      	uxth	r1, r3
 8005776:	4b2e      	ldr	r3, [pc, #184]	@ (8005830 <Startup+0x1b0>)
 8005778:	0052      	lsls	r2, r2, #1
 800577a:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 800577c:	1dbb      	adds	r3, r7, #6
 800577e:	881a      	ldrh	r2, [r3, #0]
 8005780:	1dbb      	adds	r3, r7, #6
 8005782:	3201      	adds	r2, #1
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	1dbb      	adds	r3, r7, #6
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	2380      	movs	r3, #128	@ 0x80
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	429a      	cmp	r2, r3
 8005790:	d9cc      	bls.n	800572c <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8005792:	4b25      	ldr	r3, [pc, #148]	@ (8005828 <Startup+0x1a8>)
 8005794:	2102      	movs	r1, #2
 8005796:	0018      	movs	r0, r3
 8005798:	f7ff fd7c 	bl	8005294 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800579c:	4a24      	ldr	r2, [pc, #144]	@ (8005830 <Startup+0x1b0>)
 800579e:	4b22      	ldr	r3, [pc, #136]	@ (8005828 <Startup+0x1a8>)
 80057a0:	0011      	movs	r1, r2
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff fe6c 	bl	8005480 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80057a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005828 <Startup+0x1a8>)
 80057aa:	0018      	movs	r0, r3
 80057ac:	f7ff fd46 	bl	800523c <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80057b0:	4b20      	ldr	r3, [pc, #128]	@ (8005834 <Startup+0x1b4>)
 80057b2:	220c      	movs	r2, #12
 80057b4:	2104      	movs	r1, #4
 80057b6:	0018      	movs	r0, r3
 80057b8:	f7ff fcb4 	bl	8005124 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80057bc:	f7ff fcee 	bl	800519c <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80057c0:	f7fc f942 	bl	8001a48 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80057c4:	f7ff fb80 	bl	8004ec8 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80057c8:	f001 f8ec 	bl	80069a4 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80057cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <Startup+0x1b8>)
 80057ce:	22fa      	movs	r2, #250	@ 0xfa
 80057d0:	21fa      	movs	r1, #250	@ 0xfa
 80057d2:	0018      	movs	r0, r3
 80057d4:	f003 fc4e 	bl	8009074 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 80057d8:	4b18      	ldr	r3, [pc, #96]	@ (800583c <Startup+0x1bc>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 80057de:	4b18      	ldr	r3, [pc, #96]	@ (8005840 <Startup+0x1c0>)
 80057e0:	2100      	movs	r1, #0
 80057e2:	0018      	movs	r0, r3
 80057e4:	f001 f863 	bl	80068ae <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80057e8:	2007      	movs	r0, #7
 80057ea:	f002 fcda 	bl	80081a2 <HAL_NVIC_EnableIRQ>

	return 1;
 80057ee:	2301      	movs	r3, #1
}
 80057f0:	0018      	movs	r0, r3
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b003      	add	sp, #12
 80057f6:	bd90      	pop	{r4, r7, pc}
 80057f8:	200008cc 	.word	0x200008cc
 80057fc:	20000810 	.word	0x20000810
 8005800:	20000582 	.word	0x20000582
 8005804:	20000d00 	.word	0x20000d00
 8005808:	20000578 	.word	0x20000578
 800580c:	0800f820 	.word	0x0800f820
 8005810:	2000050c 	.word	0x2000050c
 8005814:	200004fc 	.word	0x200004fc
 8005818:	2000051c 	.word	0x2000051c
 800581c:	0800ea38 	.word	0x0800ea38
 8005820:	20000d14 	.word	0x20000d14
 8005824:	200005b4 	.word	0x200005b4
 8005828:	20000d20 	.word	0x20000d20
 800582c:	000003ff 	.word	0x000003ff
 8005830:	20000028 	.word	0x20000028
 8005834:	20000a44 	.word	0x20000a44
 8005838:	20000c84 	.word	0x20000c84
 800583c:	20000448 	.word	0x20000448
 8005840:	20000698 	.word	0x20000698

08005844 <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8005844:	b580      	push	{r7, lr}
 8005846:	b082      	sub	sp, #8
 8005848:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800584a:	1d3b      	adds	r3, r7, #4
 800584c:	4a12      	ldr	r2, [pc, #72]	@ (8005898 <Advance_Pending_States+0x54>)
 800584e:	7812      	ldrb	r2, [r2, #0]
 8005850:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8005852:	4b11      	ldr	r3, [pc, #68]	@ (8005898 <Advance_Pending_States+0x54>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b05      	cmp	r3, #5
 800585a:	d103      	bne.n	8005864 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 800585c:	4b0e      	ldr	r3, [pc, #56]	@ (8005898 <Advance_Pending_States+0x54>)
 800585e:	2204      	movs	r2, #4
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e007      	b.n	8005874 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8005864:	4b0c      	ldr	r3, [pc, #48]	@ (8005898 <Advance_Pending_States+0x54>)
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b07      	cmp	r3, #7
 800586c:	d102      	bne.n	8005874 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 800586e:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <Advance_Pending_States+0x54>)
 8005870:	2206      	movs	r2, #6
 8005872:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8005874:	1d3b      	adds	r3, r7, #4
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b06      	cmp	r3, #6
 800587a:	d007      	beq.n	800588c <Advance_Pending_States+0x48>
 800587c:	1d3b      	adds	r3, r7, #4
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b04      	cmp	r3, #4
 8005882:	d003      	beq.n	800588c <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8005884:	4b04      	ldr	r3, [pc, #16]	@ (8005898 <Advance_Pending_States+0x54>)
 8005886:	1d3a      	adds	r2, r7, #4
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 800588c:	2301      	movs	r3, #1
}
 800588e:	0018      	movs	r0, r3
 8005890:	46bd      	mov	sp, r7
 8005892:	b002      	add	sp, #8
 8005894:	bd80      	pop	{r7, pc}
 8005896:	46c0      	nop			@ (mov r8, r8)
 8005898:	20000430 	.word	0x20000430

0800589c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058a2:	4b0f      	ldr	r3, [pc, #60]	@ (80058e0 <HAL_MspInit+0x44>)
 80058a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058a6:	4b0e      	ldr	r3, [pc, #56]	@ (80058e0 <HAL_MspInit+0x44>)
 80058a8:	2101      	movs	r1, #1
 80058aa:	430a      	orrs	r2, r1
 80058ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80058ae:	4b0c      	ldr	r3, [pc, #48]	@ (80058e0 <HAL_MspInit+0x44>)
 80058b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b2:	2201      	movs	r2, #1
 80058b4:	4013      	ands	r3, r2
 80058b6:	607b      	str	r3, [r7, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <HAL_MspInit+0x44>)
 80058bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058be:	4b08      	ldr	r3, [pc, #32]	@ (80058e0 <HAL_MspInit+0x44>)
 80058c0:	2180      	movs	r1, #128	@ 0x80
 80058c2:	0549      	lsls	r1, r1, #21
 80058c4:	430a      	orrs	r2, r1
 80058c6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80058c8:	4b05      	ldr	r3, [pc, #20]	@ (80058e0 <HAL_MspInit+0x44>)
 80058ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058cc:	2380      	movs	r3, #128	@ 0x80
 80058ce:	055b      	lsls	r3, r3, #21
 80058d0:	4013      	ands	r3, r2
 80058d2:	603b      	str	r3, [r7, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	46bd      	mov	sp, r7
 80058da:	b002      	add	sp, #8
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	40021000 	.word	0x40021000

080058e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b08b      	sub	sp, #44	@ 0x2c
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058ec:	2414      	movs	r4, #20
 80058ee:	193b      	adds	r3, r7, r4
 80058f0:	0018      	movs	r0, r3
 80058f2:	2314      	movs	r3, #20
 80058f4:	001a      	movs	r2, r3
 80058f6:	2100      	movs	r1, #0
 80058f8:	f008 fc3a 	bl	800e170 <memset>
  if(hadc->Instance==ADC1)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2e      	ldr	r2, [pc, #184]	@ (80059bc <HAL_ADC_MspInit+0xd8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d155      	bne.n	80059b2 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005906:	4b2e      	ldr	r3, [pc, #184]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 8005908:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800590a:	4b2d      	ldr	r3, [pc, #180]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 800590c:	2180      	movs	r1, #128	@ 0x80
 800590e:	0349      	lsls	r1, r1, #13
 8005910:	430a      	orrs	r2, r1
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40
 8005914:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 8005916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005918:	2380      	movs	r3, #128	@ 0x80
 800591a:	035b      	lsls	r3, r3, #13
 800591c:	4013      	ands	r3, r2
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005922:	4b27      	ldr	r3, [pc, #156]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 8005924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005926:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 8005928:	2101      	movs	r1, #1
 800592a:	430a      	orrs	r2, r1
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34
 800592e:	4b24      	ldr	r3, [pc, #144]	@ (80059c0 <HAL_ADC_MspInit+0xdc>)
 8005930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005932:	2201      	movs	r2, #1
 8005934:	4013      	ands	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800593a:	193b      	adds	r3, r7, r4
 800593c:	2273      	movs	r2, #115	@ 0x73
 800593e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005940:	193b      	adds	r3, r7, r4
 8005942:	2203      	movs	r2, #3
 8005944:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005946:	193b      	adds	r3, r7, r4
 8005948:	2200      	movs	r2, #0
 800594a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594c:	193a      	adds	r2, r7, r4
 800594e:	23a0      	movs	r3, #160	@ 0xa0
 8005950:	05db      	lsls	r3, r3, #23
 8005952:	0011      	movs	r1, r2
 8005954:	0018      	movs	r0, r3
 8005956:	f003 f915 	bl	8008b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800595a:	4b1a      	ldr	r3, [pc, #104]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 800595c:	4a1a      	ldr	r2, [pc, #104]	@ (80059c8 <HAL_ADC_MspInit+0xe4>)
 800595e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005960:	4b18      	ldr	r3, [pc, #96]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005962:	2205      	movs	r2, #5
 8005964:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005966:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005968:	2200      	movs	r2, #0
 800596a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800596c:	4b15      	ldr	r3, [pc, #84]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 800596e:	2200      	movs	r2, #0
 8005970:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005972:	4b14      	ldr	r3, [pc, #80]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005974:	2280      	movs	r2, #128	@ 0x80
 8005976:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005978:	4b12      	ldr	r3, [pc, #72]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 800597a:	2280      	movs	r2, #128	@ 0x80
 800597c:	0052      	lsls	r2, r2, #1
 800597e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005982:	2280      	movs	r2, #128	@ 0x80
 8005984:	00d2      	lsls	r2, r2, #3
 8005986:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8005988:	4b0e      	ldr	r3, [pc, #56]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 800598a:	2200      	movs	r2, #0
 800598c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800598e:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005990:	2280      	movs	r2, #128	@ 0x80
 8005992:	0192      	lsls	r2, r2, #6
 8005994:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005996:	4b0b      	ldr	r3, [pc, #44]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 8005998:	0018      	movs	r0, r3
 800599a:	f002 fc2f 	bl	80081fc <HAL_DMA_Init>
 800599e:	1e03      	subs	r3, r0, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80059a2:	f7fc ffe1 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a06      	ldr	r2, [pc, #24]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 80059aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80059ac:	4b05      	ldr	r3, [pc, #20]	@ (80059c4 <HAL_ADC_MspInit+0xe0>)
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	46bd      	mov	sp, r7
 80059b6:	b00b      	add	sp, #44	@ 0x2c
 80059b8:	bd90      	pop	{r4, r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	40012400 	.word	0x40012400
 80059c0:	40021000 	.word	0x40021000
 80059c4:	2000063c 	.word	0x2000063c
 80059c8:	40020008 	.word	0x40020008

080059cc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80059cc:	b590      	push	{r4, r7, lr}
 80059ce:	b097      	sub	sp, #92	@ 0x5c
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059d4:	2344      	movs	r3, #68	@ 0x44
 80059d6:	18fb      	adds	r3, r7, r3
 80059d8:	0018      	movs	r0, r3
 80059da:	2314      	movs	r3, #20
 80059dc:	001a      	movs	r2, r3
 80059de:	2100      	movs	r1, #0
 80059e0:	f008 fbc6 	bl	800e170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80059e4:	241c      	movs	r4, #28
 80059e6:	193b      	adds	r3, r7, r4
 80059e8:	0018      	movs	r0, r3
 80059ea:	2328      	movs	r3, #40	@ 0x28
 80059ec:	001a      	movs	r2, r3
 80059ee:	2100      	movs	r1, #0
 80059f0:	f008 fbbe 	bl	800e170 <memset>
  if(hlptim->Instance==LPTIM1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a46      	ldr	r2, [pc, #280]	@ (8005b14 <HAL_LPTIM_MspInit+0x148>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d13e      	bne.n	8005a7c <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80059fe:	193b      	adds	r3, r7, r4
 8005a00:	2280      	movs	r2, #128	@ 0x80
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8005a06:	193b      	adds	r3, r7, r4
 8005a08:	2200      	movs	r2, #0
 8005a0a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	0018      	movs	r0, r3
 8005a10:	f004 fb9e 	bl	800a150 <HAL_RCCEx_PeriphCLKConfig>
 8005a14:	1e03      	subs	r3, r0, #0
 8005a16:	d001      	beq.n	8005a1c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8005a18:	f7fc ffa6 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8005a1c:	4b3e      	ldr	r3, [pc, #248]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a20:	4b3d      	ldr	r3, [pc, #244]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a22:	2180      	movs	r1, #128	@ 0x80
 8005a24:	0609      	lsls	r1, r1, #24
 8005a26:	430a      	orrs	r2, r1
 8005a28:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a2e:	0fdb      	lsrs	r3, r3, #31
 8005a30:	07db      	lsls	r3, r3, #31
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a36:	4b38      	ldr	r3, [pc, #224]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3a:	4b37      	ldr	r3, [pc, #220]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a3c:	2102      	movs	r1, #2
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a42:	4b35      	ldr	r3, [pc, #212]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a46:	2202      	movs	r2, #2
 8005a48:	4013      	ands	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005a4e:	2144      	movs	r1, #68	@ 0x44
 8005a50:	187b      	adds	r3, r7, r1
 8005a52:	2201      	movs	r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a56:	187b      	adds	r3, r7, r1
 8005a58:	2202      	movs	r2, #2
 8005a5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	2200      	movs	r2, #0
 8005a66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	2205      	movs	r2, #5
 8005a6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a6e:	187b      	adds	r3, r7, r1
 8005a70:	4a2a      	ldr	r2, [pc, #168]	@ (8005b1c <HAL_LPTIM_MspInit+0x150>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f003 f885 	bl	8008b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8005a7a:	e046      	b.n	8005b0a <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <HAL_LPTIM_MspInit+0x154>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d141      	bne.n	8005b0a <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 8005a86:	211c      	movs	r1, #28
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	2280      	movs	r2, #128	@ 0x80
 8005a8c:	00d2      	lsls	r2, r2, #3
 8005a8e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005a90:	187b      	adds	r3, r7, r1
 8005a92:	2200      	movs	r2, #0
 8005a94:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	0018      	movs	r0, r3
 8005a9a:	f004 fb59 	bl	800a150 <HAL_RCCEx_PeriphCLKConfig>
 8005a9e:	1e03      	subs	r3, r0, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 8005aa2:	f7fc ff61 	bl	8002968 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005aac:	2180      	movs	r1, #128	@ 0x80
 8005aae:	05c9      	lsls	r1, r1, #23
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ab4:	4b18      	ldr	r3, [pc, #96]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ab8:	2380      	movs	r3, #128	@ 0x80
 8005aba:	05db      	lsls	r3, r3, #23
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ac2:	4b15      	ldr	r3, [pc, #84]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ac6:	4b14      	ldr	r3, [pc, #80]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005ac8:	2101      	movs	r1, #1
 8005aca:	430a      	orrs	r2, r1
 8005acc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ace:	4b12      	ldr	r3, [pc, #72]	@ (8005b18 <HAL_LPTIM_MspInit+0x14c>)
 8005ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005ada:	2144      	movs	r1, #68	@ 0x44
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	2280      	movs	r2, #128	@ 0x80
 8005ae0:	0052      	lsls	r2, r2, #1
 8005ae2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae4:	187b      	adds	r3, r7, r1
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aea:	187b      	adds	r3, r7, r1
 8005aec:	2200      	movs	r2, #0
 8005aee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	2200      	movs	r2, #0
 8005af4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 8005af6:	187b      	adds	r3, r7, r1
 8005af8:	2205      	movs	r2, #5
 8005afa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005afc:	187a      	adds	r2, r7, r1
 8005afe:	23a0      	movs	r3, #160	@ 0xa0
 8005b00:	05db      	lsls	r3, r3, #23
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f003 f83d 	bl	8008b84 <HAL_GPIO_Init>
}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	b017      	add	sp, #92	@ 0x5c
 8005b10:	bd90      	pop	{r4, r7, pc}
 8005b12:	46c0      	nop			@ (mov r8, r8)
 8005b14:	40007c00 	.word	0x40007c00
 8005b18:	40021000 	.word	0x40021000
 8005b1c:	50000400 	.word	0x50000400
 8005b20:	40009400 	.word	0x40009400

08005b24 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b099      	sub	sp, #100	@ 0x64
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b2c:	234c      	movs	r3, #76	@ 0x4c
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	0018      	movs	r0, r3
 8005b32:	2314      	movs	r3, #20
 8005b34:	001a      	movs	r2, r3
 8005b36:	2100      	movs	r1, #0
 8005b38:	f008 fb1a 	bl	800e170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005b3c:	2424      	movs	r4, #36	@ 0x24
 8005b3e:	193b      	adds	r3, r7, r4
 8005b40:	0018      	movs	r0, r3
 8005b42:	2328      	movs	r3, #40	@ 0x28
 8005b44:	001a      	movs	r2, r3
 8005b46:	2100      	movs	r1, #0
 8005b48:	f008 fb12 	bl	800e170 <memset>
  if(htim_base->Instance==TIM1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a68      	ldr	r2, [pc, #416]	@ (8005cf4 <HAL_TIM_Base_MspInit+0x1d0>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d11d      	bne.n	8005b92 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8005b56:	193b      	adds	r3, r7, r4
 8005b58:	2280      	movs	r2, #128	@ 0x80
 8005b5a:	0392      	lsls	r2, r2, #14
 8005b5c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005b5e:	193b      	adds	r3, r7, r4
 8005b60:	2200      	movs	r2, #0
 8005b62:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b64:	193b      	adds	r3, r7, r4
 8005b66:	0018      	movs	r0, r3
 8005b68:	f004 faf2 	bl	800a150 <HAL_RCCEx_PeriphCLKConfig>
 8005b6c:	1e03      	subs	r3, r0, #0
 8005b6e:	d001      	beq.n	8005b74 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005b70:	f7fc fefa 	bl	8002968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005b74:	4b60      	ldr	r3, [pc, #384]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b78:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b7a:	2180      	movs	r1, #128	@ 0x80
 8005b7c:	0109      	lsls	r1, r1, #4
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b82:	4b5d      	ldr	r3, [pc, #372]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b86:	2380      	movs	r3, #128	@ 0x80
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005b90:	e0ab      	b.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	2380      	movs	r3, #128	@ 0x80
 8005b98:	05db      	lsls	r3, r3, #23
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d138      	bne.n	8005c10 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005b9e:	4b56      	ldr	r3, [pc, #344]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ba0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ba2:	4b55      	ldr	r3, [pc, #340]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005baa:	4b53      	ldr	r3, [pc, #332]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	2201      	movs	r2, #1
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	61fb      	str	r3, [r7, #28]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb6:	4b50      	ldr	r3, [pc, #320]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bba:	4b4f      	ldr	r3, [pc, #316]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8005bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4013      	ands	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
 8005bcc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8005bce:	214c      	movs	r1, #76	@ 0x4c
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	2280      	movs	r2, #128	@ 0x80
 8005bd4:	0212      	lsls	r2, r2, #8
 8005bd6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bd8:	187b      	adds	r3, r7, r1
 8005bda:	2202      	movs	r2, #2
 8005bdc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8005bde:	187b      	adds	r3, r7, r1
 8005be0:	2201      	movs	r2, #1
 8005be2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005be4:	187b      	adds	r3, r7, r1
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	2202      	movs	r2, #2
 8005bee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8005bf0:	187a      	adds	r2, r7, r1
 8005bf2:	23a0      	movs	r3, #160	@ 0xa0
 8005bf4:	05db      	lsls	r3, r3, #23
 8005bf6:	0011      	movs	r1, r2
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f002 ffc3 	bl	8008b84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8005bfe:	2202      	movs	r2, #2
 8005c00:	2102      	movs	r1, #2
 8005c02:	200f      	movs	r0, #15
 8005c04:	f002 fab8 	bl	8008178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c08:	200f      	movs	r0, #15
 8005c0a:	f002 faca 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 8005c0e:	e06c      	b.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a39      	ldr	r2, [pc, #228]	@ (8005cfc <HAL_TIM_Base_MspInit+0x1d8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d114      	bne.n	8005c44 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005c1a:	4b37      	ldr	r3, [pc, #220]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c1e:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c20:	2102      	movs	r1, #2
 8005c22:	430a      	orrs	r2, r1
 8005c24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005c26:	4b34      	ldr	r3, [pc, #208]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005c32:	2200      	movs	r2, #0
 8005c34:	2100      	movs	r1, #0
 8005c36:	2010      	movs	r0, #16
 8005c38:	f002 fa9e 	bl	8008178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005c3c:	2010      	movs	r0, #16
 8005c3e:	f002 fab0 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 8005c42:	e052      	b.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a2d      	ldr	r2, [pc, #180]	@ (8005d00 <HAL_TIM_Base_MspInit+0x1dc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d116      	bne.n	8005c7c <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c52:	4b29      	ldr	r3, [pc, #164]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c54:	2180      	movs	r1, #128	@ 0x80
 8005c56:	0289      	lsls	r1, r1, #10
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c5c:	4b26      	ldr	r3, [pc, #152]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c60:	2380      	movs	r3, #128	@ 0x80
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	4013      	ands	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	2015      	movs	r0, #21
 8005c70:	f002 fa82 	bl	8008178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005c74:	2015      	movs	r0, #21
 8005c76:	f002 fa94 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 8005c7a:	e036      	b.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a20      	ldr	r2, [pc, #128]	@ (8005d04 <HAL_TIM_Base_MspInit+0x1e0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d116      	bne.n	8005cb4 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8005c86:	4b1c      	ldr	r3, [pc, #112]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c8c:	2180      	movs	r1, #128	@ 0x80
 8005c8e:	02c9      	lsls	r1, r1, #11
 8005c90:	430a      	orrs	r2, r1
 8005c92:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c94:	4b18      	ldr	r3, [pc, #96]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	02db      	lsls	r3, r3, #11
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	2103      	movs	r1, #3
 8005ca6:	2016      	movs	r0, #22
 8005ca8:	f002 fa66 	bl	8008178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005cac:	2016      	movs	r0, #22
 8005cae:	f002 fa78 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 8005cb2:	e01a      	b.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	@ (8005d08 <HAL_TIM_Base_MspInit+0x1e4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d115      	bne.n	8005cea <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	0209      	lsls	r1, r1, #8
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	641a      	str	r2, [r3, #64]	@ 0x40
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <HAL_TIM_Base_MspInit+0x1d4>)
 8005cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cd0:	2380      	movs	r3, #128	@ 0x80
 8005cd2:	021b      	lsls	r3, r3, #8
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8005cda:	2203      	movs	r2, #3
 8005cdc:	2103      	movs	r1, #3
 8005cde:	2013      	movs	r0, #19
 8005ce0:	f002 fa4a 	bl	8008178 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8005ce4:	2013      	movs	r0, #19
 8005ce6:	f002 fa5c 	bl	80081a2 <HAL_NVIC_EnableIRQ>
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	46bd      	mov	sp, r7
 8005cee:	b019      	add	sp, #100	@ 0x64
 8005cf0:	bd90      	pop	{r4, r7, pc}
 8005cf2:	46c0      	nop			@ (mov r8, r8)
 8005cf4:	40012c00 	.word	0x40012c00
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40014400 	.word	0x40014400
 8005d04:	40014800 	.word	0x40014800
 8005d08:	40002000 	.word	0x40002000

08005d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b08b      	sub	sp, #44	@ 0x2c
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d14:	2414      	movs	r4, #20
 8005d16:	193b      	adds	r3, r7, r4
 8005d18:	0018      	movs	r0, r3
 8005d1a:	2314      	movs	r3, #20
 8005d1c:	001a      	movs	r2, r3
 8005d1e:	2100      	movs	r1, #0
 8005d20:	f008 fa26 	bl	800e170 <memset>
  if(htim->Instance==TIM1)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a25      	ldr	r2, [pc, #148]	@ (8005dc0 <HAL_TIM_MspPostInit+0xb4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d144      	bne.n	8005db8 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2e:	4b25      	ldr	r3, [pc, #148]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d32:	4b24      	ldr	r3, [pc, #144]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d34:	2101      	movs	r1, #1
 8005d36:	430a      	orrs	r2, r1
 8005d38:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d3a:	4b22      	ldr	r3, [pc, #136]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4013      	ands	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
 8005d44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d46:	4b1f      	ldr	r3, [pc, #124]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d4c:	2102      	movs	r1, #2
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d52:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc4 <HAL_TIM_MspPostInit+0xb8>)
 8005d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d56:	2202      	movs	r2, #2
 8005d58:	4013      	ands	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005d5e:	193b      	adds	r3, r7, r4
 8005d60:	2280      	movs	r2, #128	@ 0x80
 8005d62:	0112      	lsls	r2, r2, #4
 8005d64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d66:	193b      	adds	r3, r7, r4
 8005d68:	2202      	movs	r2, #2
 8005d6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6c:	193b      	adds	r3, r7, r4
 8005d6e:	2200      	movs	r2, #0
 8005d70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d72:	193b      	adds	r3, r7, r4
 8005d74:	2200      	movs	r2, #0
 8005d76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005d78:	193b      	adds	r3, r7, r4
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005d7e:	193a      	adds	r2, r7, r4
 8005d80:	23a0      	movs	r3, #160	@ 0xa0
 8005d82:	05db      	lsls	r3, r3, #23
 8005d84:	0011      	movs	r1, r2
 8005d86:	0018      	movs	r0, r3
 8005d88:	f002 fefc 	bl	8008b84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005d8c:	0021      	movs	r1, r4
 8005d8e:	187b      	adds	r3, r7, r1
 8005d90:	2208      	movs	r2, #8
 8005d92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d94:	187b      	adds	r3, r7, r1
 8005d96:	2202      	movs	r2, #2
 8005d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9a:	187b      	adds	r3, r7, r1
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005da0:	187b      	adds	r3, r7, r1
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005da6:	187b      	adds	r3, r7, r1
 8005da8:	2201      	movs	r2, #1
 8005daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	4a06      	ldr	r2, [pc, #24]	@ (8005dc8 <HAL_TIM_MspPostInit+0xbc>)
 8005db0:	0019      	movs	r1, r3
 8005db2:	0010      	movs	r0, r2
 8005db4:	f002 fee6 	bl	8008b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b00b      	add	sp, #44	@ 0x2c
 8005dbe:	bd90      	pop	{r4, r7, pc}
 8005dc0:	40012c00 	.word	0x40012c00
 8005dc4:	40021000 	.word	0x40021000
 8005dc8:	50000400 	.word	0x50000400

08005dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005dcc:	b590      	push	{r4, r7, lr}
 8005dce:	b08b      	sub	sp, #44	@ 0x2c
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd4:	2414      	movs	r4, #20
 8005dd6:	193b      	adds	r3, r7, r4
 8005dd8:	0018      	movs	r0, r3
 8005dda:	2314      	movs	r3, #20
 8005ddc:	001a      	movs	r2, r3
 8005dde:	2100      	movs	r1, #0
 8005de0:	f008 f9c6 	bl	800e170 <memset>
  if(huart->Instance==USART2)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a4a      	ldr	r2, [pc, #296]	@ (8005f14 <HAL_UART_MspInit+0x148>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d000      	beq.n	8005df0 <HAL_UART_MspInit+0x24>
 8005dee:	e08d      	b.n	8005f0c <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005df0:	4b49      	ldr	r3, [pc, #292]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005df4:	4b48      	ldr	r3, [pc, #288]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005df6:	2180      	movs	r1, #128	@ 0x80
 8005df8:	0289      	lsls	r1, r1, #10
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005dfe:	4b46      	ldr	r3, [pc, #280]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e02:	2380      	movs	r3, #128	@ 0x80
 8005e04:	029b      	lsls	r3, r3, #10
 8005e06:	4013      	ands	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e0c:	4b42      	ldr	r3, [pc, #264]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e10:	4b41      	ldr	r3, [pc, #260]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005e12:	2101      	movs	r1, #1
 8005e14:	430a      	orrs	r2, r1
 8005e16:	635a      	str	r2, [r3, #52]	@ 0x34
 8005e18:	4b3f      	ldr	r3, [pc, #252]	@ (8005f18 <HAL_UART_MspInit+0x14c>)
 8005e1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	4013      	ands	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8005e24:	0021      	movs	r1, r4
 8005e26:	187b      	adds	r3, r7, r1
 8005e28:	220c      	movs	r2, #12
 8005e2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2c:	187b      	adds	r3, r7, r1
 8005e2e:	2202      	movs	r2, #2
 8005e30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005e32:	187b      	adds	r3, r7, r1
 8005e34:	2201      	movs	r2, #1
 8005e36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005e3e:	187b      	adds	r3, r7, r1
 8005e40:	2201      	movs	r2, #1
 8005e42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e44:	187a      	adds	r2, r7, r1
 8005e46:	23a0      	movs	r3, #160	@ 0xa0
 8005e48:	05db      	lsls	r3, r3, #23
 8005e4a:	0011      	movs	r1, r2
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	f002 fe99 	bl	8008b84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8005e52:	4b32      	ldr	r3, [pc, #200]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e54:	4a32      	ldr	r2, [pc, #200]	@ (8005f20 <HAL_UART_MspInit+0x154>)
 8005e56:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005e58:	4b30      	ldr	r3, [pc, #192]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e5a:	2234      	movs	r2, #52	@ 0x34
 8005e5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e64:	4b2d      	ldr	r3, [pc, #180]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005e70:	4b2a      	ldr	r3, [pc, #168]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e72:	2200      	movs	r2, #0
 8005e74:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005e76:	4b29      	ldr	r3, [pc, #164]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005e7c:	4b27      	ldr	r3, [pc, #156]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005e82:	4b26      	ldr	r3, [pc, #152]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e84:	2280      	movs	r2, #128	@ 0x80
 8005e86:	0152      	lsls	r2, r2, #5
 8005e88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005e8a:	4b24      	ldr	r3, [pc, #144]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f002 f9b5 	bl	80081fc <HAL_DMA_Init>
 8005e92:	1e03      	subs	r3, r0, #0
 8005e94:	d001      	beq.n	8005e9a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005e96:	f7fc fd67 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2180      	movs	r1, #128	@ 0x80
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005ea0:	505a      	str	r2, [r3, r1]
 8005ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8005f1c <HAL_UART_MspInit+0x150>)
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005ea8:	4b1e      	ldr	r3, [pc, #120]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8005f28 <HAL_UART_MspInit+0x15c>)
 8005eac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005eae:	4b1d      	ldr	r3, [pc, #116]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005eb0:	2235      	movs	r2, #53	@ 0x35
 8005eb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005eb6:	2210      	movs	r2, #16
 8005eb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eba:	4b1a      	ldr	r3, [pc, #104]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ec0:	4b18      	ldr	r3, [pc, #96]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ec2:	2280      	movs	r2, #128	@ 0x80
 8005ec4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ec6:	4b17      	ldr	r3, [pc, #92]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ecc:	4b15      	ldr	r3, [pc, #84]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ece:	2200      	movs	r2, #0
 8005ed0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005ed2:	4b14      	ldr	r3, [pc, #80]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ed8:	4b12      	ldr	r3, [pc, #72]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005eda:	2280      	movs	r2, #128	@ 0x80
 8005edc:	0152      	lsls	r2, r2, #5
 8005ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005ee0:	4b10      	ldr	r3, [pc, #64]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f002 f98a 	bl	80081fc <HAL_DMA_Init>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8005eec:	f7fc fd3c 	bl	8002968 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ef4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <HAL_UART_MspInit+0x158>)
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8005efc:	2201      	movs	r2, #1
 8005efe:	2101      	movs	r1, #1
 8005f00:	201c      	movs	r0, #28
 8005f02:	f002 f939 	bl	8008178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005f06:	201c      	movs	r0, #28
 8005f08:	f002 f94b 	bl	80081a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005f0c:	46c0      	nop			@ (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b00b      	add	sp, #44	@ 0x2c
 8005f12:	bd90      	pop	{r4, r7, pc}
 8005f14:	40004400 	.word	0x40004400
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	20000bcc 	.word	0x20000bcc
 8005f20:	4002001c 	.word	0x4002001c
 8005f24:	20000c28 	.word	0x20000c28
 8005f28:	40020030 	.word	0x40020030

08005f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005f30:	46c0      	nop			@ (mov r8, r8)
 8005f32:	e7fd      	b.n	8005f30 <NMI_Handler+0x4>

08005f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f38:	46c0      	nop			@ (mov r8, r8)
 8005f3a:	e7fd      	b.n	8005f38 <HardFault_Handler+0x4>

08005f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f54:	f000 fdfc 	bl	8006b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f58:	46c0      	nop			@ (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005f62:	2080      	movs	r0, #128	@ 0x80
 8005f64:	f002 ffac 	bl	8008ec0 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005f68:	46c0      	nop			@ (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
	...

08005f70 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005f74:	4b03      	ldr	r3, [pc, #12]	@ (8005f84 <DMA1_Channel1_IRQHandler+0x14>)
 8005f76:	0018      	movs	r0, r3
 8005f78:	f002 fb1c 	bl	80085b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005f7c:	46c0      	nop			@ (mov r8, r8)
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	2000063c 	.word	0x2000063c

08005f88 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005f8c:	4b05      	ldr	r3, [pc, #20]	@ (8005fa4 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f002 fb10 	bl	80085b4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005f94:	4b04      	ldr	r3, [pc, #16]	@ (8005fa8 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005f96:	0018      	movs	r0, r3
 8005f98:	f002 fb0c 	bl	80085b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005f9c:	46c0      	nop			@ (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	20000bcc 	.word	0x20000bcc
 8005fa8:	20000c28 	.word	0x20000c28

08005fac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005fb0:	4b03      	ldr	r3, [pc, #12]	@ (8005fc0 <TIM2_IRQHandler+0x14>)
 8005fb2:	0018      	movs	r0, r3
 8005fb4:	f005 f896 	bl	800b0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005fb8:	46c0      	nop			@ (mov r8, r8)
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	46c0      	nop			@ (mov r8, r8)
 8005fc0:	200008cc 	.word	0x200008cc

08005fc4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005fc8:	4b03      	ldr	r3, [pc, #12]	@ (8005fd8 <TIM3_IRQHandler+0x14>)
 8005fca:	0018      	movs	r0, r3
 8005fcc:	f005 f88a 	bl	800b0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005fd0:	46c0      	nop			@ (mov r8, r8)
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	20000988 	.word	0x20000988

08005fdc <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005fe0:	4b03      	ldr	r3, [pc, #12]	@ (8005ff0 <TIM16_IRQHandler+0x14>)
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f005 f87e 	bl	800b0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005fe8:	46c0      	nop			@ (mov r8, r8)
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	46c0      	nop			@ (mov r8, r8)
 8005ff0:	20000810 	.word	0x20000810

08005ff4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ff8:	4b03      	ldr	r3, [pc, #12]	@ (8006008 <USART2_IRQHandler+0x14>)
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f006 fdf4 	bl	800cbe8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8006000:	46c0      	nop			@ (mov r8, r8)
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	46c0      	nop			@ (mov r8, r8)
 8006008:	20000b00 	.word	0x20000b00

0800600c <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006010:	4b03      	ldr	r3, [pc, #12]	@ (8006020 <LPTIM1_IRQHandler+0x14>)
 8006012:	0018      	movs	r0, r3
 8006014:	f003 f8c2 	bl	800919c <HAL_LPTIM_IRQHandler>
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	20000c84 	.word	0x20000c84

08006024 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8006028:	4b03      	ldr	r3, [pc, #12]	@ (8006038 <TIM17_IRQHandler+0x14>)
 800602a:	0018      	movs	r0, r3
 800602c:	f005 f85a 	bl	800b0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8006030:	46c0      	nop			@ (mov r8, r8)
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	20000754 	.word	0x20000754

0800603c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006040:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <TIM14_IRQHandler+0x14>)
 8006042:	0018      	movs	r0, r3
 8006044:	f005 f84e 	bl	800b0e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8006048:	46c0      	nop			@ (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	20000698 	.word	0x20000698

08006054 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2220      	movs	r2, #32
 8006060:	5c9b      	ldrb	r3, [r3, r2]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d107      	bne.n	8006078 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8b5b      	ldrh	r3, [r3, #26]
 800606c:	b29b      	uxth	r3, r3
 800606e:	18db      	adds	r3, r3, r3
 8006070:	b29a      	uxth	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	839a      	strh	r2, [r3, #28]
 8006076:	e00a      	b.n	800608e <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	5c9b      	ldrb	r3, [r3, r2]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d104      	bne.n	800608e <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8b5b      	ldrh	r3, [r3, #26]
 8006088:	b29a      	uxth	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 800608e:	2301      	movs	r3, #1
}
 8006090:	0018      	movs	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	b002      	add	sp, #8
 8006096:	bd80      	pop	{r7, pc}

08006098 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8006098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80060a0:	2317      	movs	r3, #23
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80060a8:	2316      	movs	r3, #22
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 80060b0:	2315      	movs	r3, #21
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2200      	movs	r2, #0
 80060b6:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 80060b8:	2114      	movs	r1, #20
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	2200      	movs	r2, #0
 80060be:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	899b      	ldrh	r3, [r3, #12]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80060c8:	d803      	bhi.n	80060d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 80060ca:	187b      	adds	r3, r7, r1
 80060cc:	2200      	movs	r2, #0
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	e003      	b.n	80060da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 80060d2:	2314      	movs	r3, #20
 80060d4:	18fb      	adds	r3, r7, r3
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	799b      	ldrb	r3, [r3, #6]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d004      	beq.n	80060ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	799b      	ldrb	r3, [r3, #6]
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d146      	bne.n	800617c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	7c1b      	ldrb	r3, [r3, #16]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d104      	bne.n	8006102 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	7c5b      	ldrb	r3, [r3, #17]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d009      	beq.n	8006116 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	7c1b      	ldrb	r3, [r3, #16]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b01      	cmp	r3, #1
 800610a:	d113      	bne.n	8006134 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	7c5b      	ldrb	r3, [r3, #17]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b01      	cmp	r3, #1
 8006114:	d10e      	bne.n	8006134 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8006116:	2314      	movs	r3, #20
 8006118:	18fb      	adds	r3, r7, r3
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8006120:	2316      	movs	r3, #22
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8006128:	e027      	b.n	800617a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 800612a:	2316      	movs	r3, #22
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8006132:	e022      	b.n	800617a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	7c1b      	ldrb	r3, [r3, #16]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d104      	bne.n	8006148 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	7c5b      	ldrb	r3, [r3, #17]
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b01      	cmp	r3, #1
 8006146:	d009      	beq.n	800615c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	7c1b      	ldrb	r3, [r3, #16]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	d13c      	bne.n	80061cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	7c5b      	ldrb	r3, [r3, #17]
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d137      	bne.n	80061cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 800615c:	2314      	movs	r3, #20
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8006166:	2316      	movs	r3, #22
 8006168:	18fb      	adds	r3, r7, r3
 800616a:	2200      	movs	r2, #0
 800616c:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 800616e:	e02d      	b.n	80061cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8006170:	2316      	movs	r3, #22
 8006172:	18fb      	adds	r3, r7, r3
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8006178:	e028      	b.n	80061cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800617a:	e027      	b.n	80061cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	799b      	ldrb	r3, [r3, #6]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d123      	bne.n	80061ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	7c1b      	ldrb	r3, [r3, #16]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10e      	bne.n	80061ae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8006190:	2314      	movs	r3, #20
 8006192:	18fb      	adds	r3, r7, r3
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d104      	bne.n	80061a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 800619a:	2316      	movs	r3, #22
 800619c:	18fb      	adds	r3, r7, r3
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e014      	b.n	80061ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80061a4:	2316      	movs	r3, #22
 80061a6:	18fb      	adds	r3, r7, r3
 80061a8:	2200      	movs	r2, #0
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e00f      	b.n	80061ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80061ae:	2314      	movs	r3, #20
 80061b0:	18fb      	adds	r3, r7, r3
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d104      	bne.n	80061c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 80061b8:	2316      	movs	r3, #22
 80061ba:	18fb      	adds	r3, r7, r3
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
 80061c0:	e005      	b.n	80061ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80061c2:	2316      	movs	r3, #22
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	2201      	movs	r2, #1
 80061c8:	701a      	strb	r2, [r3, #0]
 80061ca:	e000      	b.n	80061ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80061cc:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 80061ce:	2314      	movs	r3, #20
 80061d0:	18fb      	adds	r3, r7, r3
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d109      	bne.n	80061ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	899b      	ldrh	r3, [r3, #12]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	2315      	movs	r3, #21
 80061e2:	18fb      	adds	r3, r7, r3
 80061e4:	217f      	movs	r1, #127	@ 0x7f
 80061e6:	1a8a      	subs	r2, r1, r2
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	e007      	b.n	80061fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	899b      	ldrh	r3, [r3, #12]
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	2315      	movs	r3, #21
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	3a80      	subs	r2, #128	@ 0x80
 80061fa:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	8a5b      	ldrh	r3, [r3, #18]
 8006200:	b29a      	uxth	r2, r3
 8006202:	200e      	movs	r0, #14
 8006204:	183b      	adds	r3, r7, r0
 8006206:	2180      	movs	r1, #128	@ 0x80
 8006208:	0049      	lsls	r1, r1, #1
 800620a:	1a8a      	subs	r2, r1, r2
 800620c:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 800620e:	0001      	movs	r1, r0
 8006210:	187b      	adds	r3, r7, r1
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	2215      	movs	r2, #21
 8006216:	18ba      	adds	r2, r7, r2
 8006218:	7812      	ldrb	r2, [r2, #0]
 800621a:	435a      	muls	r2, r3
 800621c:	0013      	movs	r3, r2
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	189b      	adds	r3, r3, r2
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	10da      	asrs	r2, r3, #3
 8006226:	240c      	movs	r4, #12
 8006228:	193b      	adds	r3, r7, r4
 800622a:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 800622c:	250a      	movs	r5, #10
 800622e:	197b      	adds	r3, r7, r5
 8006230:	193a      	adds	r2, r7, r4
 8006232:	8812      	ldrh	r2, [r2, #0]
 8006234:	0a12      	lsrs	r2, r2, #8
 8006236:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8006238:	2312      	movs	r3, #18
 800623a:	18fb      	adds	r3, r7, r3
 800623c:	0008      	movs	r0, r1
 800623e:	1879      	adds	r1, r7, r1
 8006240:	197a      	adds	r2, r7, r5
 8006242:	8809      	ldrh	r1, [r1, #0]
 8006244:	8812      	ldrh	r2, [r2, #0]
 8006246:	1a8a      	subs	r2, r1, r2
 8006248:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800624a:	2610      	movs	r6, #16
 800624c:	19bb      	adds	r3, r7, r6
 800624e:	1839      	adds	r1, r7, r0
 8006250:	197a      	adds	r2, r7, r5
 8006252:	8809      	ldrh	r1, [r1, #0]
 8006254:	8812      	ldrh	r2, [r2, #0]
 8006256:	188a      	adds	r2, r1, r2
 8006258:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800625a:	19bb      	adds	r3, r7, r6
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	2bff      	cmp	r3, #255	@ 0xff
 8006260:	d90f      	bls.n	8006282 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8006262:	19bb      	adds	r3, r7, r6
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	2380      	movs	r3, #128	@ 0x80
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	429a      	cmp	r2, r3
 800626c:	d000      	beq.n	8006270 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 800626e:	e0b0      	b.n	80063d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8006270:	193b      	adds	r3, r7, r4
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	2108      	movs	r1, #8
 8006276:	0018      	movs	r0, r3
 8006278:	f000 fb80 	bl	800697c <unsigned_bitwise_modulo>
 800627c:	1e03      	subs	r3, r0, #0
 800627e:	d000      	beq.n	8006282 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8006280:	e0a7      	b.n	80063d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006282:	230c      	movs	r3, #12
 8006284:	18fb      	adds	r3, r7, r3
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	2108      	movs	r1, #8
 800628a:	0018      	movs	r0, r3
 800628c:	f000 fb76 	bl	800697c <unsigned_bitwise_modulo>
 8006290:	0003      	movs	r3, r0
 8006292:	2b80      	cmp	r3, #128	@ 0x80
 8006294:	d117      	bne.n	80062c6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8006296:	2316      	movs	r3, #22
 8006298:	18fb      	adds	r3, r7, r3
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80062a0:	2317      	movs	r3, #23
 80062a2:	18fb      	adds	r3, r7, r3
 80062a4:	2202      	movs	r2, #2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	e008      	b.n	80062bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80062aa:	2316      	movs	r3, #22
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d103      	bne.n	80062bc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80062b4:	2317      	movs	r3, #23
 80062b6:	18fb      	adds	r3, r7, r3
 80062b8:	2201      	movs	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	2100      	movs	r1, #0
 80062c2:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80062c4:	e21f      	b.n	8006706 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80062c6:	230c      	movs	r3, #12
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	881b      	ldrh	r3, [r3, #0]
 80062cc:	2108      	movs	r1, #8
 80062ce:	0018      	movs	r0, r3
 80062d0:	f000 fb54 	bl	800697c <unsigned_bitwise_modulo>
 80062d4:	1e03      	subs	r3, r0, #0
 80062d6:	d121      	bne.n	800631c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80062d8:	2212      	movs	r2, #18
 80062da:	18bb      	adds	r3, r7, r2
 80062dc:	18ba      	adds	r2, r7, r2
 80062de:	8812      	ldrh	r2, [r2, #0]
 80062e0:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80062e2:	2210      	movs	r2, #16
 80062e4:	18bb      	adds	r3, r7, r2
 80062e6:	18ba      	adds	r2, r7, r2
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80062ec:	2316      	movs	r3, #22
 80062ee:	18fb      	adds	r3, r7, r3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062f6:	2317      	movs	r3, #23
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2200      	movs	r2, #0
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	e008      	b.n	8006312 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006300:	2316      	movs	r3, #22
 8006302:	18fb      	adds	r3, r7, r3
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d103      	bne.n	8006312 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800630a:	2317      	movs	r3, #23
 800630c:	18fb      	adds	r3, r7, r3
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2220      	movs	r2, #32
 8006316:	2100      	movs	r1, #0
 8006318:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800631a:	e1f4      	b.n	8006706 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 800631c:	230c      	movs	r3, #12
 800631e:	18fb      	adds	r3, r7, r3
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	2108      	movs	r1, #8
 8006324:	0018      	movs	r0, r3
 8006326:	f000 fb29 	bl	800697c <unsigned_bitwise_modulo>
 800632a:	0003      	movs	r3, r0
 800632c:	2b7f      	cmp	r3, #127	@ 0x7f
 800632e:	d821      	bhi.n	8006374 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8006330:	2212      	movs	r2, #18
 8006332:	18bb      	adds	r3, r7, r2
 8006334:	18ba      	adds	r2, r7, r2
 8006336:	8812      	ldrh	r2, [r2, #0]
 8006338:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800633a:	2210      	movs	r2, #16
 800633c:	18bb      	adds	r3, r7, r2
 800633e:	18ba      	adds	r2, r7, r2
 8006340:	8812      	ldrh	r2, [r2, #0]
 8006342:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8006344:	2316      	movs	r3, #22
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800634e:	2317      	movs	r3, #23
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e008      	b.n	800636a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006358:	2316      	movs	r3, #22
 800635a:	18fb      	adds	r3, r7, r3
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d103      	bne.n	800636a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006362:	2317      	movs	r3, #23
 8006364:	18fb      	adds	r3, r7, r3
 8006366:	2200      	movs	r2, #0
 8006368:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	2100      	movs	r1, #0
 8006370:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006372:	e1c8      	b.n	8006706 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8006374:	230c      	movs	r3, #12
 8006376:	18fb      	adds	r3, r7, r3
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	2108      	movs	r1, #8
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fafd 	bl	800697c <unsigned_bitwise_modulo>
 8006382:	0003      	movs	r3, r0
 8006384:	2b80      	cmp	r3, #128	@ 0x80
 8006386:	d800      	bhi.n	800638a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8006388:	e1bd      	b.n	8006706 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800638a:	2212      	movs	r2, #18
 800638c:	18bb      	adds	r3, r7, r2
 800638e:	18ba      	adds	r2, r7, r2
 8006390:	8812      	ldrh	r2, [r2, #0]
 8006392:	3a01      	subs	r2, #1
 8006394:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006396:	2210      	movs	r2, #16
 8006398:	18bb      	adds	r3, r7, r2
 800639a:	18ba      	adds	r2, r7, r2
 800639c:	8812      	ldrh	r2, [r2, #0]
 800639e:	3201      	adds	r2, #1
 80063a0:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80063a2:	2316      	movs	r3, #22
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063ac:	2317      	movs	r3, #23
 80063ae:	18fb      	adds	r3, r7, r3
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]
 80063b4:	e008      	b.n	80063c8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80063b6:	2316      	movs	r3, #22
 80063b8:	18fb      	adds	r3, r7, r3
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d103      	bne.n	80063c8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063c0:	2317      	movs	r3, #23
 80063c2:	18fb      	adds	r3, r7, r3
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2220      	movs	r2, #32
 80063cc:	2100      	movs	r1, #0
 80063ce:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80063d0:	e199      	b.n	8006706 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 80063d2:	2110      	movs	r1, #16
 80063d4:	187b      	adds	r3, r7, r1
 80063d6:	881a      	ldrh	r2, [r3, #0]
 80063d8:	2380      	movs	r3, #128	@ 0x80
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	429a      	cmp	r2, r3
 80063de:	d810      	bhi.n	8006402 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80063e0:	187b      	adds	r3, r7, r1
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	2380      	movs	r3, #128	@ 0x80
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d000      	beq.n	80063ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80063ec:	e18c      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80063ee:	230c      	movs	r3, #12
 80063f0:	18fb      	adds	r3, r7, r3
 80063f2:	881b      	ldrh	r3, [r3, #0]
 80063f4:	2108      	movs	r1, #8
 80063f6:	0018      	movs	r0, r3
 80063f8:	f000 fac0 	bl	800697c <unsigned_bitwise_modulo>
 80063fc:	1e03      	subs	r3, r0, #0
 80063fe:	d100      	bne.n	8006402 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006400:	e182      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006402:	230c      	movs	r3, #12
 8006404:	18fb      	adds	r3, r7, r3
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	2108      	movs	r1, #8
 800640a:	0018      	movs	r0, r3
 800640c:	f000 fab6 	bl	800697c <unsigned_bitwise_modulo>
 8006410:	0003      	movs	r3, r0
 8006412:	2b80      	cmp	r3, #128	@ 0x80
 8006414:	d159      	bne.n	80064ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8006416:	2212      	movs	r2, #18
 8006418:	18bb      	adds	r3, r7, r2
 800641a:	18ba      	adds	r2, r7, r2
 800641c:	8812      	ldrh	r2, [r2, #0]
 800641e:	3a01      	subs	r2, #1
 8006420:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006422:	2110      	movs	r1, #16
 8006424:	187b      	adds	r3, r7, r1
 8006426:	187a      	adds	r2, r7, r1
 8006428:	8812      	ldrh	r2, [r2, #0]
 800642a:	3201      	adds	r2, #1
 800642c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800642e:	000c      	movs	r4, r1
 8006430:	187b      	adds	r3, r7, r1
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	2101      	movs	r1, #1
 8006436:	0018      	movs	r0, r3
 8006438:	f000 faa0 	bl	800697c <unsigned_bitwise_modulo>
 800643c:	1e03      	subs	r3, r0, #0
 800643e:	d121      	bne.n	8006484 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006440:	193b      	adds	r3, r7, r4
 8006442:	193a      	adds	r2, r7, r4
 8006444:	8812      	ldrh	r2, [r2, #0]
 8006446:	0852      	lsrs	r2, r2, #1
 8006448:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800644a:	2316      	movs	r3, #22
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d108      	bne.n	8006466 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006454:	2317      	movs	r3, #23
 8006456:	18fb      	adds	r3, r7, r3
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	2100      	movs	r1, #0
 8006462:	5499      	strb	r1, [r3, r2]
 8006464:	e150      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006466:	2316      	movs	r3, #22
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d000      	beq.n	8006472 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8006470:	e14a      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006472:	2317      	movs	r3, #23
 8006474:	18fb      	adds	r3, r7, r3
 8006476:	2200      	movs	r2, #0
 8006478:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	2101      	movs	r1, #1
 8006480:	5499      	strb	r1, [r3, r2]
 8006482:	e141      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006484:	2210      	movs	r2, #16
 8006486:	18bb      	adds	r3, r7, r2
 8006488:	18ba      	adds	r2, r7, r2
 800648a:	8812      	ldrh	r2, [r2, #0]
 800648c:	0852      	lsrs	r2, r2, #1
 800648e:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006490:	2316      	movs	r3, #22
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800649a:	2317      	movs	r3, #23
 800649c:	18fb      	adds	r3, r7, r3
 800649e:	2200      	movs	r2, #0
 80064a0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	2100      	movs	r1, #0
 80064a8:	5499      	strb	r1, [r3, r2]
 80064aa:	e12d      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80064ac:	2316      	movs	r3, #22
 80064ae:	18fb      	adds	r3, r7, r3
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d000      	beq.n	80064b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80064b6:	e127      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80064b8:	2317      	movs	r3, #23
 80064ba:	18fb      	adds	r3, r7, r3
 80064bc:	2201      	movs	r2, #1
 80064be:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2220      	movs	r2, #32
 80064c4:	2101      	movs	r1, #1
 80064c6:	5499      	strb	r1, [r3, r2]
 80064c8:	e11e      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80064ca:	230c      	movs	r3, #12
 80064cc:	18fb      	adds	r3, r7, r3
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	2108      	movs	r1, #8
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 fa52 	bl	800697c <unsigned_bitwise_modulo>
 80064d8:	1e03      	subs	r3, r0, #0
 80064da:	d152      	bne.n	8006582 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80064dc:	2212      	movs	r2, #18
 80064de:	18bb      	adds	r3, r7, r2
 80064e0:	18ba      	adds	r2, r7, r2
 80064e2:	8812      	ldrh	r2, [r2, #0]
 80064e4:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80064e6:	2410      	movs	r4, #16
 80064e8:	193b      	adds	r3, r7, r4
 80064ea:	881b      	ldrh	r3, [r3, #0]
 80064ec:	2101      	movs	r1, #1
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 fa44 	bl	800697c <unsigned_bitwise_modulo>
 80064f4:	1e03      	subs	r3, r0, #0
 80064f6:	d121      	bne.n	800653c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80064f8:	193b      	adds	r3, r7, r4
 80064fa:	193a      	adds	r2, r7, r4
 80064fc:	8812      	ldrh	r2, [r2, #0]
 80064fe:	0852      	lsrs	r2, r2, #1
 8006500:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006502:	2316      	movs	r3, #22
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800650c:	2317      	movs	r3, #23
 800650e:	18fb      	adds	r3, r7, r3
 8006510:	2200      	movs	r2, #0
 8006512:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2220      	movs	r2, #32
 8006518:	2100      	movs	r1, #0
 800651a:	5499      	strb	r1, [r3, r2]
 800651c:	e0f4      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800651e:	2316      	movs	r3, #22
 8006520:	18fb      	adds	r3, r7, r3
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b01      	cmp	r3, #1
 8006526:	d000      	beq.n	800652a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8006528:	e0ee      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800652a:	2317      	movs	r3, #23
 800652c:	18fb      	adds	r3, r7, r3
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	2101      	movs	r1, #1
 8006538:	5499      	strb	r1, [r3, r2]
 800653a:	e0e5      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800653c:	2210      	movs	r2, #16
 800653e:	18bb      	adds	r3, r7, r2
 8006540:	18ba      	adds	r2, r7, r2
 8006542:	8812      	ldrh	r2, [r2, #0]
 8006544:	0852      	lsrs	r2, r2, #1
 8006546:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006548:	2316      	movs	r3, #22
 800654a:	18fb      	adds	r3, r7, r3
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d108      	bne.n	8006564 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006552:	2317      	movs	r3, #23
 8006554:	18fb      	adds	r3, r7, r3
 8006556:	2200      	movs	r2, #0
 8006558:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	2100      	movs	r1, #0
 8006560:	5499      	strb	r1, [r3, r2]
 8006562:	e0d1      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006564:	2316      	movs	r3, #22
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d000      	beq.n	8006570 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 800656e:	e0cb      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006570:	2317      	movs	r3, #23
 8006572:	18fb      	adds	r3, r7, r3
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	2101      	movs	r1, #1
 800657e:	5499      	strb	r1, [r3, r2]
 8006580:	e0c2      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8006582:	230c      	movs	r3, #12
 8006584:	18fb      	adds	r3, r7, r3
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	2108      	movs	r1, #8
 800658a:	0018      	movs	r0, r3
 800658c:	f000 f9f6 	bl	800697c <unsigned_bitwise_modulo>
 8006590:	0003      	movs	r3, r0
 8006592:	2b7f      	cmp	r3, #127	@ 0x7f
 8006594:	d856      	bhi.n	8006644 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8006596:	2212      	movs	r2, #18
 8006598:	18bb      	adds	r3, r7, r2
 800659a:	18ba      	adds	r2, r7, r2
 800659c:	8812      	ldrh	r2, [r2, #0]
 800659e:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80065a0:	2410      	movs	r4, #16
 80065a2:	193b      	adds	r3, r7, r4
 80065a4:	193a      	adds	r2, r7, r4
 80065a6:	8812      	ldrh	r2, [r2, #0]
 80065a8:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80065aa:	193b      	adds	r3, r7, r4
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	0018      	movs	r0, r3
 80065b2:	f000 f9e3 	bl	800697c <unsigned_bitwise_modulo>
 80065b6:	1e03      	subs	r3, r0, #0
 80065b8:	d121      	bne.n	80065fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065ba:	193b      	adds	r3, r7, r4
 80065bc:	193a      	adds	r2, r7, r4
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	0852      	lsrs	r2, r2, #1
 80065c2:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80065c4:	2316      	movs	r3, #22
 80065c6:	18fb      	adds	r3, r7, r3
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065ce:	2317      	movs	r3, #23
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	2200      	movs	r2, #0
 80065d4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]
 80065de:	e093      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80065e0:	2316      	movs	r3, #22
 80065e2:	18fb      	adds	r3, r7, r3
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d000      	beq.n	80065ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 80065ea:	e08d      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065ec:	2317      	movs	r3, #23
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	2101      	movs	r1, #1
 80065fa:	5499      	strb	r1, [r3, r2]
 80065fc:	e084      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065fe:	2210      	movs	r2, #16
 8006600:	18bb      	adds	r3, r7, r2
 8006602:	18ba      	adds	r2, r7, r2
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	0852      	lsrs	r2, r2, #1
 8006608:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800660a:	2316      	movs	r3, #22
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d108      	bne.n	8006626 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006614:	2317      	movs	r3, #23
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	2100      	movs	r1, #0
 8006622:	5499      	strb	r1, [r3, r2]
 8006624:	e070      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006626:	2316      	movs	r3, #22
 8006628:	18fb      	adds	r3, r7, r3
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d000      	beq.n	8006632 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8006630:	e06a      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006632:	2317      	movs	r3, #23
 8006634:	18fb      	adds	r3, r7, r3
 8006636:	2201      	movs	r2, #1
 8006638:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2220      	movs	r2, #32
 800663e:	2101      	movs	r1, #1
 8006640:	5499      	strb	r1, [r3, r2]
 8006642:	e061      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8006644:	230c      	movs	r3, #12
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2108      	movs	r1, #8
 800664c:	0018      	movs	r0, r3
 800664e:	f000 f995 	bl	800697c <unsigned_bitwise_modulo>
 8006652:	0003      	movs	r3, r0
 8006654:	2b80      	cmp	r3, #128	@ 0x80
 8006656:	d957      	bls.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8006658:	2212      	movs	r2, #18
 800665a:	18bb      	adds	r3, r7, r2
 800665c:	18ba      	adds	r2, r7, r2
 800665e:	8812      	ldrh	r2, [r2, #0]
 8006660:	3a01      	subs	r2, #1
 8006662:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8006664:	2410      	movs	r4, #16
 8006666:	193b      	adds	r3, r7, r4
 8006668:	193a      	adds	r2, r7, r4
 800666a:	8812      	ldrh	r2, [r2, #0]
 800666c:	3201      	adds	r2, #1
 800666e:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006670:	193b      	adds	r3, r7, r4
 8006672:	881b      	ldrh	r3, [r3, #0]
 8006674:	2101      	movs	r1, #1
 8006676:	0018      	movs	r0, r3
 8006678:	f000 f980 	bl	800697c <unsigned_bitwise_modulo>
 800667c:	1e03      	subs	r3, r0, #0
 800667e:	d120      	bne.n	80066c2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006680:	193b      	adds	r3, r7, r4
 8006682:	193a      	adds	r2, r7, r4
 8006684:	8812      	ldrh	r2, [r2, #0]
 8006686:	0852      	lsrs	r2, r2, #1
 8006688:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800668a:	2316      	movs	r3, #22
 800668c:	18fb      	adds	r3, r7, r3
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d108      	bne.n	80066a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006694:	2317      	movs	r3, #23
 8006696:	18fb      	adds	r3, r7, r3
 8006698:	2200      	movs	r2, #0
 800669a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	2100      	movs	r1, #0
 80066a2:	5499      	strb	r1, [r3, r2]
 80066a4:	e030      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80066a6:	2316      	movs	r3, #22
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d12b      	bne.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80066b0:	2317      	movs	r3, #23
 80066b2:	18fb      	adds	r3, r7, r3
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2220      	movs	r2, #32
 80066bc:	2101      	movs	r1, #1
 80066be:	5499      	strb	r1, [r3, r2]
 80066c0:	e022      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80066c2:	2210      	movs	r2, #16
 80066c4:	18bb      	adds	r3, r7, r2
 80066c6:	18ba      	adds	r2, r7, r2
 80066c8:	8812      	ldrh	r2, [r2, #0]
 80066ca:	0852      	lsrs	r2, r2, #1
 80066cc:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80066ce:	2316      	movs	r3, #22
 80066d0:	18fb      	adds	r3, r7, r3
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d108      	bne.n	80066ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80066d8:	2317      	movs	r3, #23
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2200      	movs	r2, #0
 80066de:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	2100      	movs	r1, #0
 80066e6:	5499      	strb	r1, [r3, r2]
 80066e8:	e00e      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80066ea:	2316      	movs	r3, #22
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d109      	bne.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80066f4:	2317      	movs	r3, #23
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	2201      	movs	r2, #1
 80066fa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	2101      	movs	r1, #1
 8006702:	5499      	strb	r1, [r3, r2]
 8006704:	e000      	b.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006706:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8006708:	2316      	movs	r3, #22
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d152      	bne.n	80067b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8006712:	2317      	movs	r3, #23
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d109      	bne.n	8006730 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800671c:	2312      	movs	r3, #18
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	2280      	movs	r2, #128	@ 0x80
 8006724:	0052      	lsls	r2, r2, #1
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	b29a      	uxth	r2, r3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	829a      	strh	r2, [r3, #20]
 800672e:	e099      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006730:	2317      	movs	r3, #23
 8006732:	18fb      	adds	r3, r7, r3
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d11b      	bne.n	8006772 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	89db      	ldrh	r3, [r3, #14]
 800673e:	b29b      	uxth	r3, r3
 8006740:	2101      	movs	r1, #1
 8006742:	0018      	movs	r0, r3
 8006744:	f000 f91a 	bl	800697c <unsigned_bitwise_modulo>
 8006748:	1e03      	subs	r3, r0, #0
 800674a:	d109      	bne.n	8006760 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 800674c:	2312      	movs	r3, #18
 800674e:	18fb      	adds	r3, r7, r3
 8006750:	881b      	ldrh	r3, [r3, #0]
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	0052      	lsls	r2, r2, #1
 8006756:	1ad3      	subs	r3, r2, r3
 8006758:	b29a      	uxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	829a      	strh	r2, [r3, #20]
 800675e:	e081      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006760:	2312      	movs	r3, #18
 8006762:	18fb      	adds	r3, r7, r3
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	22ff      	movs	r2, #255	@ 0xff
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	b29a      	uxth	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	829a      	strh	r2, [r3, #20]
 8006770:	e078      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006772:	2317      	movs	r3, #23
 8006774:	18fb      	adds	r3, r7, r3
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b02      	cmp	r3, #2
 800677a:	d000      	beq.n	800677e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 800677c:	e072      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	89db      	ldrh	r3, [r3, #14]
 8006782:	b29b      	uxth	r3, r3
 8006784:	2101      	movs	r1, #1
 8006786:	0018      	movs	r0, r3
 8006788:	f000 f8f8 	bl	800697c <unsigned_bitwise_modulo>
 800678c:	1e03      	subs	r3, r0, #0
 800678e:	d109      	bne.n	80067a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006790:	2312      	movs	r3, #18
 8006792:	18fb      	adds	r3, r7, r3
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	2280      	movs	r2, #128	@ 0x80
 8006798:	0052      	lsls	r2, r2, #1
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	829a      	strh	r2, [r3, #20]
 80067a2:	e05f      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80067a4:	2312      	movs	r3, #18
 80067a6:	18fb      	adds	r3, r7, r3
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	2202      	movs	r2, #2
 80067ac:	32ff      	adds	r2, #255	@ 0xff
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	829a      	strh	r2, [r3, #20]
 80067b6:	e055      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80067b8:	2316      	movs	r3, #22
 80067ba:	18fb      	adds	r3, r7, r3
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d150      	bne.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80067c2:	2317      	movs	r3, #23
 80067c4:	18fb      	adds	r3, r7, r3
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d109      	bne.n	80067e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80067cc:	2310      	movs	r3, #16
 80067ce:	18fb      	adds	r3, r7, r3
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	2280      	movs	r2, #128	@ 0x80
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	829a      	strh	r2, [r3, #20]
 80067de:	e041      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 80067e0:	2317      	movs	r3, #23
 80067e2:	18fb      	adds	r3, r7, r3
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d11b      	bne.n	8006822 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	89db      	ldrh	r3, [r3, #14]
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2101      	movs	r1, #1
 80067f2:	0018      	movs	r0, r3
 80067f4:	f000 f8c2 	bl	800697c <unsigned_bitwise_modulo>
 80067f8:	1e03      	subs	r3, r0, #0
 80067fa:	d109      	bne.n	8006810 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80067fc:	2310      	movs	r3, #16
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	2280      	movs	r2, #128	@ 0x80
 8006804:	0052      	lsls	r2, r2, #1
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	829a      	strh	r2, [r3, #20]
 800680e:	e029      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8006810:	2310      	movs	r3, #16
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	22ff      	movs	r2, #255	@ 0xff
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	b29a      	uxth	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	829a      	strh	r2, [r3, #20]
 8006820:	e020      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8006822:	2317      	movs	r3, #23
 8006824:	18fb      	adds	r3, r7, r3
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b02      	cmp	r3, #2
 800682a:	d11b      	bne.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	89db      	ldrh	r3, [r3, #14]
 8006830:	b29b      	uxth	r3, r3
 8006832:	2101      	movs	r1, #1
 8006834:	0018      	movs	r0, r3
 8006836:	f000 f8a1 	bl	800697c <unsigned_bitwise_modulo>
 800683a:	1e03      	subs	r3, r0, #0
 800683c:	d109      	bne.n	8006852 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 800683e:	2310      	movs	r3, #16
 8006840:	18fb      	adds	r3, r7, r3
 8006842:	881b      	ldrh	r3, [r3, #0]
 8006844:	2280      	movs	r2, #128	@ 0x80
 8006846:	0052      	lsls	r2, r2, #1
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	b29a      	uxth	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	829a      	strh	r2, [r3, #20]
 8006850:	e008      	b.n	8006864 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8006852:	2310      	movs	r3, #16
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	2202      	movs	r2, #2
 800685a:	32ff      	adds	r2, #255	@ 0xff
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	b29a      	uxth	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	0018      	movs	r0, r3
 8006868:	f7ff fbf4 	bl	8006054 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8a9b      	ldrh	r3, [r3, #20]
 8006870:	b29b      	uxth	r3, r3
 8006872:	2280      	movs	r2, #128	@ 0x80
 8006874:	0052      	lsls	r2, r2, #1
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	b29a      	uxth	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8adb      	ldrh	r3, [r3, #22]
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8b9b      	ldrh	r3, [r3, #28]
 8006890:	b29b      	uxth	r3, r3
 8006892:	3b01      	subs	r3, #1
 8006894:	b29a      	uxth	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	83da      	strh	r2, [r3, #30]

    return 1;
 800689a:	2301      	movs	r3, #1
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b007      	add	sp, #28
 80068a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080068a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068a8:	46c0      	nop			@ (mov r8, r8)
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80068ae:	b5b0      	push	{r4, r5, r7, lr}
 80068b0:	b084      	sub	sp, #16
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80068b8:	250f      	movs	r5, #15
 80068ba:	197c      	adds	r4, r7, r5
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0011      	movs	r1, r2
 80068c2:	0018      	movs	r0, r3
 80068c4:	f003 ff32 	bl	800a72c <HAL_TIM_OC_Start_IT>
 80068c8:	0003      	movs	r3, r0
 80068ca:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 80068cc:	197b      	adds	r3, r7, r5
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d001      	beq.n	80068d8 <Start_OC_TIM+0x2a>

		Error_Handler();
 80068d4:	f7fc f848 	bl	8002968 <Error_Handler>
	}

	return ok;
 80068d8:	230f      	movs	r3, #15
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	781b      	ldrb	r3, [r3, #0]
}
 80068de:	0018      	movs	r0, r3
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b004      	add	sp, #16
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80068e6:	b5b0      	push	{r4, r5, r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 80068f0:	250f      	movs	r5, #15
 80068f2:	197c      	adds	r4, r7, r5
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f004 f83a 	bl	800a974 <HAL_TIM_OC_Stop_IT>
 8006900:	0003      	movs	r3, r0
 8006902:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8006904:	197b      	adds	r3, r7, r5
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <Stop_OC_TIM+0x2a>

		Error_Handler();
 800690c:	f7fc f82c 	bl	8002968 <Error_Handler>
	}

	return ok;
 8006910:	230f      	movs	r3, #15
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	781b      	ldrb	r3, [r3, #0]
}
 8006916:	0018      	movs	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	b004      	add	sp, #16
 800691c:	bdb0      	pop	{r4, r5, r7, pc}

0800691e <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	0002      	movs	r2, r0
 8006926:	1dbb      	adds	r3, r7, #6
 8006928:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800692a:	230e      	movs	r3, #14
 800692c:	18fb      	adds	r3, r7, r3
 800692e:	2202      	movs	r2, #2
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e014      	b.n	800695e <isPrime+0x40>
        if (x % d == 0)
 8006934:	1dba      	adds	r2, r7, #6
 8006936:	230e      	movs	r3, #14
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	8812      	ldrh	r2, [r2, #0]
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	0019      	movs	r1, r3
 8006940:	0010      	movs	r0, r2
 8006942:	f7f9 fc67 	bl	8000214 <__aeabi_uidivmod>
 8006946:	000b      	movs	r3, r1
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <isPrime+0x34>
            return NO;
 800694e:	2300      	movs	r3, #0
 8006950:	e010      	b.n	8006974 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8006952:	210e      	movs	r1, #14
 8006954:	187b      	adds	r3, r7, r1
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	187b      	adds	r3, r7, r1
 800695a:	3201      	adds	r2, #1
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	220e      	movs	r2, #14
 8006960:	18bb      	adds	r3, r7, r2
 8006962:	881b      	ldrh	r3, [r3, #0]
 8006964:	18ba      	adds	r2, r7, r2
 8006966:	8812      	ldrh	r2, [r2, #0]
 8006968:	435a      	muls	r2, r3
 800696a:	1dbb      	adds	r3, r7, #6
 800696c:	881b      	ldrh	r3, [r3, #0]
 800696e:	429a      	cmp	r2, r3
 8006970:	dde0      	ble.n	8006934 <isPrime+0x16>
    }
    return YES;
 8006972:	2301      	movs	r3, #1
}
 8006974:	0018      	movs	r0, r3
 8006976:	46bd      	mov	sp, r7
 8006978:	b004      	add	sp, #16
 800697a:	bd80      	pop	{r7, pc}

0800697c <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	000a      	movs	r2, r1
 8006986:	1cfb      	adds	r3, r7, #3
 8006988:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 800698a:	1cfb      	adds	r3, r7, #3
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2201      	movs	r2, #1
 8006990:	409a      	lsls	r2, r3
 8006992:	0013      	movs	r3, r2
 8006994:	3b01      	subs	r3, #1
 8006996:	001a      	movs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4013      	ands	r3, r2
}
 800699c:	0018      	movs	r0, r3
 800699e:	46bd      	mov	sp, r7
 80069a0:	b002      	add	sp, #8
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80069a8:	b662      	cpsie	i
}
 80069aa:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80069ac:	2301      	movs	r3, #1
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	000a      	movs	r2, r1
 80069be:	1cbb      	adds	r3, r7, #2
 80069c0:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	1cba      	adds	r2, r7, #2
 80069c8:	8812      	ldrh	r2, [r2, #0]
 80069ca:	4013      	ands	r3, r2
 80069cc:	d001      	beq.n	80069d2 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e000      	b.n	80069d4 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80069d2:	2300      	movs	r3, #0
    }
}
 80069d4:	0018      	movs	r0, r3
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	000a      	movs	r2, r1
 80069e6:	1cbb      	adds	r3, r7, #2
 80069e8:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	1cbb      	adds	r3, r7, #2
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
}
 80069f8:	46c0      	nop			@ (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	b002      	add	sp, #8
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	000a      	movs	r2, r1
 8006a0a:	1cbb      	adds	r3, r7, #2
 8006a0c:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	1cba      	adds	r2, r7, #2
 8006a14:	8812      	ldrh	r2, [r2, #0]
 8006a16:	43d2      	mvns	r2, r2
 8006a18:	401a      	ands	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	601a      	str	r2, [r3, #0]
}
 8006a1e:	46c0      	nop			@ (mov r8, r8)
 8006a20:	46bd      	mov	sp, r7
 8006a22:	b002      	add	sp, #8
 8006a24:	bd80      	pop	{r7, pc}
	...

08006a28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a28:	480d      	ldr	r0, [pc, #52]	@ (8006a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a2c:	f7ff ff3a 	bl	80068a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8006a30:	480c      	ldr	r0, [pc, #48]	@ (8006a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8006a32:	490d      	ldr	r1, [pc, #52]	@ (8006a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006a34:	4a0d      	ldr	r2, [pc, #52]	@ (8006a6c <LoopForever+0xe>)
  movs r3, #0
 8006a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a38:	e002      	b.n	8006a40 <LoopCopyDataInit>

08006a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a3e:	3304      	adds	r3, #4

08006a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a44:	d3f9      	bcc.n	8006a3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a46:	4a0a      	ldr	r2, [pc, #40]	@ (8006a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006a48:	4c0a      	ldr	r4, [pc, #40]	@ (8006a74 <LoopForever+0x16>)
  movs r3, #0
 8006a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a4c:	e001      	b.n	8006a52 <LoopFillZerobss>

08006a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a50:	3204      	adds	r2, #4

08006a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a54:	d3fb      	bcc.n	8006a4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006a56:	f007 fb93 	bl	800e180 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006a5a:	f7fe fab5 	bl	8004fc8 <main>

08006a5e <LoopForever>:

LoopForever:
  b LoopForever
 8006a5e:	e7fe      	b.n	8006a5e <LoopForever>
  ldr   r0, =_estack
 8006a60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8006a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a68:	200004e0 	.word	0x200004e0
  ldr r2, =_sidata
 8006a6c:	0800ec98 	.word	0x0800ec98
  ldr r2, =_sbss
 8006a70:	200004e0 	.word	0x200004e0
  ldr r4, =_ebss
 8006a74:	20000dd4 	.word	0x20000dd4

08006a78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006a78:	e7fe      	b.n	8006a78 <ADC1_IRQHandler>
	...

08006a7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006a82:	1dfb      	adds	r3, r7, #7
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <HAL_Init+0x3c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <HAL_Init+0x3c>)
 8006a8e:	2180      	movs	r1, #128	@ 0x80
 8006a90:	0049      	lsls	r1, r1, #1
 8006a92:	430a      	orrs	r2, r1
 8006a94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a96:	2000      	movs	r0, #0
 8006a98:	f000 f810 	bl	8006abc <HAL_InitTick>
 8006a9c:	1e03      	subs	r3, r0, #0
 8006a9e:	d003      	beq.n	8006aa8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006aa0:	1dfb      	adds	r3, r7, #7
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	701a      	strb	r2, [r3, #0]
 8006aa6:	e001      	b.n	8006aac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006aa8:	f7fe fef8 	bl	800589c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006aac:	1dfb      	adds	r3, r7, #7
 8006aae:	781b      	ldrb	r3, [r3, #0]
}
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b002      	add	sp, #8
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40022000 	.word	0x40022000

08006abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006abc:	b590      	push	{r4, r7, lr}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006ac4:	230f      	movs	r3, #15
 8006ac6:	18fb      	adds	r3, r7, r3
 8006ac8:	2200      	movs	r2, #0
 8006aca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006acc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b44 <HAL_InitTick+0x88>)
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02b      	beq.n	8006b2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8006ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b48 <HAL_InitTick+0x8c>)
 8006ad6:	681c      	ldr	r4, [r3, #0]
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b44 <HAL_InitTick+0x88>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	0019      	movs	r1, r3
 8006ade:	23fa      	movs	r3, #250	@ 0xfa
 8006ae0:	0098      	lsls	r0, r3, #2
 8006ae2:	f7f9 fb11 	bl	8000108 <__udivsi3>
 8006ae6:	0003      	movs	r3, r0
 8006ae8:	0019      	movs	r1, r3
 8006aea:	0020      	movs	r0, r4
 8006aec:	f7f9 fb0c 	bl	8000108 <__udivsi3>
 8006af0:	0003      	movs	r3, r0
 8006af2:	0018      	movs	r0, r3
 8006af4:	f001 fb75 	bl	80081e2 <HAL_SYSTICK_Config>
 8006af8:	1e03      	subs	r3, r0, #0
 8006afa:	d112      	bne.n	8006b22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d80a      	bhi.n	8006b18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	2301      	movs	r3, #1
 8006b06:	425b      	negs	r3, r3
 8006b08:	2200      	movs	r2, #0
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f001 fb34 	bl	8008178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b10:	4b0e      	ldr	r3, [pc, #56]	@ (8006b4c <HAL_InitTick+0x90>)
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e00d      	b.n	8006b34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8006b18:	230f      	movs	r3, #15
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e008      	b.n	8006b34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b22:	230f      	movs	r3, #15
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	2201      	movs	r2, #1
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	e003      	b.n	8006b34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b2c:	230f      	movs	r3, #15
 8006b2e:	18fb      	adds	r3, r7, r3
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8006b34:	230f      	movs	r3, #15
 8006b36:	18fb      	adds	r3, r7, r3
 8006b38:	781b      	ldrb	r3, [r3, #0]
}
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	b005      	add	sp, #20
 8006b40:	bd90      	pop	{r4, r7, pc}
 8006b42:	46c0      	nop			@ (mov r8, r8)
 8006b44:	20000454 	.word	0x20000454
 8006b48:	2000044c 	.word	0x2000044c
 8006b4c:	20000450 	.word	0x20000450

08006b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006b54:	4b05      	ldr	r3, [pc, #20]	@ (8006b6c <HAL_IncTick+0x1c>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	001a      	movs	r2, r3
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_IncTick+0x20>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	18d2      	adds	r2, r2, r3
 8006b60:	4b03      	ldr	r3, [pc, #12]	@ (8006b70 <HAL_IncTick+0x20>)
 8006b62:	601a      	str	r2, [r3, #0]
}
 8006b64:	46c0      	nop			@ (mov r8, r8)
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	46c0      	nop			@ (mov r8, r8)
 8006b6c:	20000454 	.word	0x20000454
 8006b70:	20000db4 	.word	0x20000db4

08006b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  return uwTick;
 8006b78:	4b02      	ldr	r3, [pc, #8]	@ (8006b84 <HAL_GetTick+0x10>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
}
 8006b7c:	0018      	movs	r0, r3
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	46c0      	nop			@ (mov r8, r8)
 8006b84:	20000db4 	.word	0x20000db4

08006b88 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a05      	ldr	r2, [pc, #20]	@ (8006bac <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006b98:	401a      	ands	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
}
 8006ba2:	46c0      	nop			@ (mov r8, r8)
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	b002      	add	sp, #8
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	fe3fffff 	.word	0xfe3fffff

08006bb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b082      	sub	sp, #8
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	23e0      	movs	r3, #224	@ 0xe0
 8006bbe:	045b      	lsls	r3, r3, #17
 8006bc0:	4013      	ands	r3, r2
}
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b002      	add	sp, #8
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b084      	sub	sp, #16
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	60f8      	str	r0, [r7, #12]
 8006bd2:	60b9      	str	r1, [r7, #8]
 8006bd4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	2104      	movs	r1, #4
 8006bde:	400a      	ands	r2, r1
 8006be0:	2107      	movs	r1, #7
 8006be2:	4091      	lsls	r1, r2
 8006be4:	000a      	movs	r2, r1
 8006be6:	43d2      	mvns	r2, r2
 8006be8:	401a      	ands	r2, r3
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2104      	movs	r1, #4
 8006bee:	400b      	ands	r3, r1
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	4099      	lsls	r1, r3
 8006bf4:	000b      	movs	r3, r1
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8006bfc:	46c0      	nop			@ (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b004      	add	sp, #16
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	2104      	movs	r1, #4
 8006c16:	400a      	ands	r2, r1
 8006c18:	2107      	movs	r1, #7
 8006c1a:	4091      	lsls	r1, r2
 8006c1c:	000a      	movs	r2, r1
 8006c1e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2104      	movs	r1, #4
 8006c24:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8006c26:	40da      	lsrs	r2, r3
 8006c28:	0013      	movs	r3, r2
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}

08006c32 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006c32:	b580      	push	{r7, lr}
 8006c34:	b082      	sub	sp, #8
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	23c0      	movs	r3, #192	@ 0xc0
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	4013      	ands	r3, r2
 8006c44:	d101      	bne.n	8006c4a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	b002      	add	sp, #8
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	211f      	movs	r1, #31
 8006c68:	400a      	ands	r2, r1
 8006c6a:	210f      	movs	r1, #15
 8006c6c:	4091      	lsls	r1, r2
 8006c6e:	000a      	movs	r2, r1
 8006c70:	43d2      	mvns	r2, r2
 8006c72:	401a      	ands	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	0e9b      	lsrs	r3, r3, #26
 8006c78:	210f      	movs	r1, #15
 8006c7a:	4019      	ands	r1, r3
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	201f      	movs	r0, #31
 8006c80:	4003      	ands	r3, r0
 8006c82:	4099      	lsls	r1, r3
 8006c84:	000b      	movs	r3, r1
 8006c86:	431a      	orrs	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006c8c:	46c0      	nop			@ (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b004      	add	sp, #16
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	035b      	lsls	r3, r3, #13
 8006ca6:	0b5b      	lsrs	r3, r3, #13
 8006ca8:	431a      	orrs	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006cae:	46c0      	nop			@ (mov r8, r8)
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	b002      	add	sp, #8
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	0352      	lsls	r2, r2, #13
 8006cc8:	0b52      	lsrs	r2, r2, #13
 8006cca:	43d2      	mvns	r2, r2
 8006ccc:	401a      	ands	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	b002      	add	sp, #8
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	695b      	ldr	r3, [r3, #20]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	0212      	lsls	r2, r2, #8
 8006cf0:	43d2      	mvns	r2, r2
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	021b      	lsls	r3, r3, #8
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	400b      	ands	r3, r1
 8006cfc:	4904      	ldr	r1, [pc, #16]	@ (8006d10 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006cfe:	400b      	ands	r3, r1
 8006d00:	431a      	orrs	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8006d06:	46c0      	nop			@ (mov r8, r8)
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	b004      	add	sp, #16
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	46c0      	nop			@ (mov r8, r8)
 8006d10:	07ffff00 	.word	0x07ffff00

08006d14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a05      	ldr	r2, [pc, #20]	@ (8006d38 <LL_ADC_EnableInternalRegulator+0x24>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	2280      	movs	r2, #128	@ 0x80
 8006d26:	0552      	lsls	r2, r2, #21
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d2e:	46c0      	nop			@ (mov r8, r8)
 8006d30:	46bd      	mov	sp, r7
 8006d32:	b002      	add	sp, #8
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	6fffffe8 	.word	0x6fffffe8

08006d3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689a      	ldr	r2, [r3, #8]
 8006d48:	2380      	movs	r3, #128	@ 0x80
 8006d4a:	055b      	lsls	r3, r3, #21
 8006d4c:	401a      	ands	r2, r3
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	055b      	lsls	r3, r3, #21
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d101      	bne.n	8006d5a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006d56:	2301      	movs	r3, #1
 8006d58:	e000      	b.n	8006d5c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b002      	add	sp, #8
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <LL_ADC_Enable+0x20>)
 8006d72:	4013      	ands	r3, r2
 8006d74:	2201      	movs	r2, #1
 8006d76:	431a      	orrs	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d7c:	46c0      	nop			@ (mov r8, r8)
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	b002      	add	sp, #8
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	7fffffe8 	.word	0x7fffffe8

08006d88 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a04      	ldr	r2, [pc, #16]	@ (8006da8 <LL_ADC_Disable+0x20>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	2202      	movs	r2, #2
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006da0:	46c0      	nop			@ (mov r8, r8)
 8006da2:	46bd      	mov	sp, r7
 8006da4:	b002      	add	sp, #8
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	7fffffe8 	.word	0x7fffffe8

08006dac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	2201      	movs	r2, #1
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <LL_ADC_IsEnabled+0x18>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <LL_ADC_IsEnabled+0x1a>
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b002      	add	sp, #8
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d101      	bne.n	8006de6 <LL_ADC_IsDisableOngoing+0x18>
 8006de2:	2301      	movs	r3, #1
 8006de4:	e000      	b.n	8006de8 <LL_ADC_IsDisableOngoing+0x1a>
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	0018      	movs	r0, r3
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	4a04      	ldr	r2, [pc, #16]	@ (8006e10 <LL_ADC_REG_StartConversion+0x20>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	2204      	movs	r2, #4
 8006e02:	431a      	orrs	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e08:	46c0      	nop			@ (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	7fffffe8 	.word	0x7fffffe8

08006e14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4a04      	ldr	r2, [pc, #16]	@ (8006e34 <LL_ADC_REG_StopConversion+0x20>)
 8006e22:	4013      	ands	r3, r2
 8006e24:	2210      	movs	r2, #16
 8006e26:	431a      	orrs	r2, r3
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8006e2c:	46c0      	nop			@ (mov r8, r8)
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	7fffffe8 	.word	0x7fffffe8

08006e38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2204      	movs	r2, #4
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d101      	bne.n	8006e50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e000      	b.n	8006e52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	0018      	movs	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	b002      	add	sp, #8
 8006e58:	bd80      	pop	{r7, pc}
	...

08006e5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e64:	231f      	movs	r3, #31
 8006e66:	18fb      	adds	r3, r7, r3
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e19f      	b.n	80071c2 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d12a      	bne.n	8006ee0 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4acf      	ldr	r2, [pc, #828]	@ (80071cc <HAL_ADC_Init+0x370>)
 8006e8e:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4acf      	ldr	r2, [pc, #828]	@ (80071d0 <HAL_ADC_Init+0x374>)
 8006e94:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4ace      	ldr	r2, [pc, #824]	@ (80071d4 <HAL_ADC_Init+0x378>)
 8006e9a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4ace      	ldr	r2, [pc, #824]	@ (80071d8 <HAL_ADC_Init+0x37c>)
 8006ea0:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4acd      	ldr	r2, [pc, #820]	@ (80071dc <HAL_ADC_Init+0x380>)
 8006ea6:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4acd      	ldr	r2, [pc, #820]	@ (80071e0 <HAL_ADC_Init+0x384>)
 8006eac:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4acc      	ldr	r2, [pc, #816]	@ (80071e4 <HAL_ADC_Init+0x388>)
 8006eb2:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2280      	movs	r2, #128	@ 0x80
 8006eb8:	589b      	ldr	r3, [r3, r2]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d103      	bne.n	8006ec6 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2180      	movs	r1, #128	@ 0x80
 8006ec2:	4ac9      	ldr	r2, [pc, #804]	@ (80071e8 <HAL_ADC_Init+0x38c>)
 8006ec4:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2280      	movs	r2, #128	@ 0x80
 8006eca:	589b      	ldr	r3, [r3, r2]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	0010      	movs	r0, r2
 8006ed0:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2254      	movs	r2, #84	@ 0x54
 8006edc:	2100      	movs	r1, #0
 8006ede:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f7ff ff29 	bl	8006d3c <LL_ADC_IsInternalRegulatorEnabled>
 8006eea:	1e03      	subs	r3, r0, #0
 8006eec:	d115      	bne.n	8006f1a <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	0018      	movs	r0, r3
 8006ef4:	f7ff ff0e 	bl	8006d14 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ef8:	4bbc      	ldr	r3, [pc, #752]	@ (80071ec <HAL_ADC_Init+0x390>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	49bc      	ldr	r1, [pc, #752]	@ (80071f0 <HAL_ADC_Init+0x394>)
 8006efe:	0018      	movs	r0, r3
 8006f00:	f7f9 f902 	bl	8000108 <__udivsi3>
 8006f04:	0003      	movs	r3, r0
 8006f06:	3301      	adds	r3, #1
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f0c:	e002      	b.n	8006f14 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1f9      	bne.n	8006f0e <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f7ff ff0c 	bl	8006d3c <LL_ADC_IsInternalRegulatorEnabled>
 8006f24:	1e03      	subs	r3, r0, #0
 8006f26:	d10f      	bne.n	8006f48 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f2c:	2210      	movs	r2, #16
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f38:	2201      	movs	r2, #1
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006f40:	231f      	movs	r3, #31
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	2201      	movs	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7ff ff73 	bl	8006e38 <LL_ADC_REG_IsConversionOngoing>
 8006f52:	0003      	movs	r3, r0
 8006f54:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5a:	2210      	movs	r2, #16
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	d000      	beq.n	8006f62 <HAL_ADC_Init+0x106>
 8006f60:	e122      	b.n	80071a8 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d000      	beq.n	8006f6a <HAL_ADC_Init+0x10e>
 8006f68:	e11e      	b.n	80071a8 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6e:	4aa1      	ldr	r2, [pc, #644]	@ (80071f4 <HAL_ADC_Init+0x398>)
 8006f70:	4013      	ands	r3, r2
 8006f72:	2202      	movs	r2, #2
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	0018      	movs	r0, r3
 8006f80:	f7ff ff14 	bl	8006dac <LL_ADC_IsEnabled>
 8006f84:	1e03      	subs	r3, r0, #0
 8006f86:	d000      	beq.n	8006f8a <HAL_ADC_Init+0x12e>
 8006f88:	e0ad      	b.n	80070e6 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	7e1b      	ldrb	r3, [r3, #24]
 8006f92:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006f94:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	7e5b      	ldrb	r3, [r3, #25]
 8006f9a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006f9c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7e9b      	ldrb	r3, [r3, #26]
 8006fa2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8006fa4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <HAL_ADC_Init+0x158>
 8006fae:	2380      	movs	r3, #128	@ 0x80
 8006fb0:	015b      	lsls	r3, r3, #5
 8006fb2:	e000      	b.n	8006fb6 <HAL_ADC_Init+0x15a>
 8006fb4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006fb6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006fbc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da04      	bge.n	8006fd0 <HAL_ADC_Init+0x174>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	005b      	lsls	r3, r3, #1
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	e001      	b.n	8006fd4 <HAL_ADC_Init+0x178>
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8006fd4:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	212c      	movs	r1, #44	@ 0x2c
 8006fda:	5c5b      	ldrb	r3, [r3, r1]
 8006fdc:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006fde:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	5c9b      	ldrb	r3, [r3, r2]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d115      	bne.n	800701c <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7e9b      	ldrb	r3, [r3, #26]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2280      	movs	r2, #128	@ 0x80
 8006ffc:	0252      	lsls	r2, r2, #9
 8006ffe:	4313      	orrs	r3, r2
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e00b      	b.n	800701c <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007008:	2220      	movs	r2, #32
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007014:	2201      	movs	r2, #1
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00a      	beq.n	800703a <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007028:	23e0      	movs	r3, #224	@ 0xe0
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007032:	4313      	orrs	r3, r2
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	4313      	orrs	r3, r2
 8007038:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	4a6d      	ldr	r2, [pc, #436]	@ (80071f8 <HAL_ADC_Init+0x39c>)
 8007042:	4013      	ands	r3, r2
 8007044:	0019      	movs	r1, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	430a      	orrs	r2, r1
 800704e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	0f9b      	lsrs	r3, r3, #30
 8007056:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800705c:	4313      	orrs	r3, r2
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	4313      	orrs	r3, r2
 8007062:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	223c      	movs	r2, #60	@ 0x3c
 8007068:	5c9b      	ldrb	r3, [r3, r2]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d111      	bne.n	8007092 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	0f9b      	lsrs	r3, r3, #30
 8007074:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800707a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8007080:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8007086:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	2201      	movs	r2, #1
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	4a58      	ldr	r2, [pc, #352]	@ (80071fc <HAL_ADC_Init+0x3a0>)
 800709a:	4013      	ands	r3, r2
 800709c:	0019      	movs	r1, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	697a      	ldr	r2, [r7, #20]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	23c0      	movs	r3, #192	@ 0xc0
 80070ae:	061b      	lsls	r3, r3, #24
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d018      	beq.n	80070e6 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80070b8:	2380      	movs	r3, #128	@ 0x80
 80070ba:	05db      	lsls	r3, r3, #23
 80070bc:	429a      	cmp	r2, r3
 80070be:	d012      	beq.n	80070e6 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80070c4:	2380      	movs	r3, #128	@ 0x80
 80070c6:	061b      	lsls	r3, r3, #24
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d00c      	beq.n	80070e6 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80070cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007200 <HAL_ADC_Init+0x3a4>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a4c      	ldr	r2, [pc, #304]	@ (8007204 <HAL_ADC_Init+0x3a8>)
 80070d2:	4013      	ands	r3, r2
 80070d4:	0019      	movs	r1, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	23f0      	movs	r3, #240	@ 0xf0
 80070dc:	039b      	lsls	r3, r3, #14
 80070de:	401a      	ands	r2, r3
 80070e0:	4b47      	ldr	r3, [pc, #284]	@ (8007200 <HAL_ADC_Init+0x3a4>)
 80070e2:	430a      	orrs	r2, r1
 80070e4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6818      	ldr	r0, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80070ee:	001a      	movs	r2, r3
 80070f0:	2100      	movs	r1, #0
 80070f2:	f7ff fd6a 	bl	8006bca <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fe:	4942      	ldr	r1, [pc, #264]	@ (8007208 <HAL_ADC_Init+0x3ac>)
 8007100:	001a      	movs	r2, r3
 8007102:	f7ff fd62 	bl	8006bca <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d109      	bne.n	8007122 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2110      	movs	r1, #16
 800711a:	4249      	negs	r1, r1
 800711c:	430a      	orrs	r2, r1
 800711e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007120:	e018      	b.n	8007154 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	2380      	movs	r3, #128	@ 0x80
 8007128:	039b      	lsls	r3, r3, #14
 800712a:	429a      	cmp	r2, r3
 800712c:	d112      	bne.n	8007154 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	3b01      	subs	r3, #1
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	221c      	movs	r2, #28
 800713e:	4013      	ands	r3, r2
 8007140:	2210      	movs	r2, #16
 8007142:	4252      	negs	r2, r2
 8007144:	409a      	lsls	r2, r3
 8007146:	0011      	movs	r1, r2
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2100      	movs	r1, #0
 800715a:	0018      	movs	r0, r3
 800715c:	f7ff fd52 	bl	8006c04 <LL_ADC_GetSamplingTimeCommonChannels>
 8007160:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007166:	429a      	cmp	r2, r3
 8007168:	d10b      	bne.n	8007182 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007174:	2203      	movs	r2, #3
 8007176:	4393      	bics	r3, r2
 8007178:	2201      	movs	r2, #1
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007180:	e01c      	b.n	80071bc <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007186:	2212      	movs	r2, #18
 8007188:	4393      	bics	r3, r2
 800718a:	2210      	movs	r2, #16
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007196:	2201      	movs	r2, #1
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800719e:	231f      	movs	r3, #31
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80071a6:	e009      	b.n	80071bc <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ac:	2210      	movs	r2, #16
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80071b4:	231f      	movs	r3, #31
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80071bc:	231f      	movs	r3, #31
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	781b      	ldrb	r3, [r3, #0]
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b008      	add	sp, #32
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	46c0      	nop			@ (mov r8, r8)
 80071cc:	08007525 	.word	0x08007525
 80071d0:	08007535 	.word	0x08007535
 80071d4:	08007545 	.word	0x08007545
 80071d8:	08007555 	.word	0x08007555
 80071dc:	08007fad 	.word	0x08007fad
 80071e0:	08007fbd 	.word	0x08007fbd
 80071e4:	08007fcd 	.word	0x08007fcd
 80071e8:	080058e5 	.word	0x080058e5
 80071ec:	2000044c 	.word	0x2000044c
 80071f0:	00030d40 	.word	0x00030d40
 80071f4:	fffffefd 	.word	0xfffffefd
 80071f8:	ffde0201 	.word	0xffde0201
 80071fc:	1ffffc02 	.word	0x1ffffc02
 8007200:	40012708 	.word	0x40012708
 8007204:	ffc3ffff 	.word	0xffc3ffff
 8007208:	07ffff04 	.word	0x07ffff04

0800720c <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	607a      	str	r2, [r7, #4]
 8007216:	230b      	movs	r3, #11
 8007218:	18fb      	adds	r3, r7, r3
 800721a:	1c0a      	adds	r2, r1, #0
 800721c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800721e:	2317      	movs	r3, #23
 8007220:	18fb      	adds	r3, r7, r3
 8007222:	2200      	movs	r2, #0
 8007224:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d107      	bne.n	800723c <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007230:	2210      	movs	r2, #16
 8007232:	431a      	orrs	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e06d      	b.n	8007318 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007240:	2201      	movs	r2, #1
 8007242:	4013      	ands	r3, r2
 8007244:	d03a      	beq.n	80072bc <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8007246:	230b      	movs	r3, #11
 8007248:	18fb      	adds	r3, r7, r3
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b0a      	cmp	r3, #10
 800724e:	d82a      	bhi.n	80072a6 <HAL_ADC_RegisterCallback+0x9a>
 8007250:	009a      	lsls	r2, r3, #2
 8007252:	4b33      	ldr	r3, [pc, #204]	@ (8007320 <HAL_ADC_RegisterCallback+0x114>)
 8007254:	18d3      	adds	r3, r2, r3
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007260:	e057      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007268:	e053      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007270:	e04f      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007278:	e04b      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007280:	e047      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007288:	e043      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007290:	e03f      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2180      	movs	r1, #128	@ 0x80
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	505a      	str	r2, [r3, r1]
        break;
 800729a:	e03a      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2184      	movs	r1, #132	@ 0x84
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	505a      	str	r2, [r3, r1]
        break;
 80072a4:	e035      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072aa:	2210      	movs	r2, #16
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80072b2:	2317      	movs	r3, #23
 80072b4:	18fb      	adds	r3, r7, r3
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
        break;
 80072ba:	e02a      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11c      	bne.n	80072fe <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 80072c4:	230b      	movs	r3, #11
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b09      	cmp	r3, #9
 80072cc:	d002      	beq.n	80072d4 <HAL_ADC_RegisterCallback+0xc8>
 80072ce:	2b0a      	cmp	r3, #10
 80072d0:	d005      	beq.n	80072de <HAL_ADC_RegisterCallback+0xd2>
 80072d2:	e009      	b.n	80072e8 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2180      	movs	r1, #128	@ 0x80
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	505a      	str	r2, [r3, r1]
        break;
 80072dc:	e019      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2184      	movs	r1, #132	@ 0x84
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	505a      	str	r2, [r3, r1]
        break;
 80072e6:	e014      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072ec:	2210      	movs	r2, #16
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80072f4:	2317      	movs	r3, #23
 80072f6:	18fb      	adds	r3, r7, r3
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
        break;
 80072fc:	e009      	b.n	8007312 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007302:	2210      	movs	r2, #16
 8007304:	431a      	orrs	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 800730a:	2317      	movs	r3, #23
 800730c:	18fb      	adds	r3, r7, r3
 800730e:	2201      	movs	r2, #1
 8007310:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007312:	2317      	movs	r3, #23
 8007314:	18fb      	adds	r3, r7, r3
 8007316:	781b      	ldrb	r3, [r3, #0]
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b006      	add	sp, #24
 800731e:	bd80      	pop	{r7, pc}
 8007320:	0800ea9c 	.word	0x0800ea9c

08007324 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	0018      	movs	r0, r3
 8007336:	f7ff fd7f 	bl	8006e38 <LL_ADC_REG_IsConversionOngoing>
 800733a:	1e03      	subs	r3, r0, #0
 800733c:	d16c      	bne.n	8007418 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2254      	movs	r2, #84	@ 0x54
 8007342:	5c9b      	ldrb	r3, [r3, r2]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d101      	bne.n	800734c <HAL_ADC_Start_DMA+0x28>
 8007348:	2302      	movs	r3, #2
 800734a:	e06c      	b.n	8007426 <HAL_ADC_Start_DMA+0x102>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2254      	movs	r2, #84	@ 0x54
 8007350:	2101      	movs	r1, #1
 8007352:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	4013      	ands	r3, r2
 800735e:	d113      	bne.n	8007388 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	0018      	movs	r0, r3
 8007366:	f7ff fd21 	bl	8006dac <LL_ADC_IsEnabled>
 800736a:	1e03      	subs	r3, r0, #0
 800736c:	d004      	beq.n	8007378 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	0018      	movs	r0, r3
 8007374:	f7ff fd08 	bl	8006d88 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2101      	movs	r1, #1
 8007384:	430a      	orrs	r2, r1
 8007386:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007388:	2517      	movs	r5, #23
 800738a:	197c      	adds	r4, r7, r5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	0018      	movs	r0, r3
 8007390:	f000 fb02 	bl	8007998 <ADC_Enable>
 8007394:	0003      	movs	r3, r0
 8007396:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007398:	002c      	movs	r4, r5
 800739a:	193b      	adds	r3, r7, r4
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d13e      	bne.n	8007420 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a6:	4a22      	ldr	r2, [pc, #136]	@ (8007430 <HAL_ADC_Start_DMA+0x10c>)
 80073a8:	4013      	ands	r3, r2
 80073aa:	2280      	movs	r2, #128	@ 0x80
 80073ac:	0052      	lsls	r2, r2, #1
 80073ae:	431a      	orrs	r2, r3
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073be:	4a1d      	ldr	r2, [pc, #116]	@ (8007434 <HAL_ADC_Start_DMA+0x110>)
 80073c0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007438 <HAL_ADC_Start_DMA+0x114>)
 80073c8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073ce:	4a1b      	ldr	r2, [pc, #108]	@ (800743c <HAL_ADC_Start_DMA+0x118>)
 80073d0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	221c      	movs	r2, #28
 80073d8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2254      	movs	r2, #84	@ 0x54
 80073de:	2100      	movs	r1, #0
 80073e0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2110      	movs	r1, #16
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3340      	adds	r3, #64	@ 0x40
 80073fc:	0019      	movs	r1, r3
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	193c      	adds	r4, r7, r4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f000 ff84 	bl	8008310 <HAL_DMA_Start_IT>
 8007408:	0003      	movs	r3, r0
 800740a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	0018      	movs	r0, r3
 8007412:	f7ff fced 	bl	8006df0 <LL_ADC_REG_StartConversion>
 8007416:	e003      	b.n	8007420 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8007418:	2317      	movs	r3, #23
 800741a:	18fb      	adds	r3, r7, r3
 800741c:	2202      	movs	r2, #2
 800741e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8007420:	2317      	movs	r3, #23
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	781b      	ldrb	r3, [r3, #0]
}
 8007426:	0018      	movs	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	b006      	add	sp, #24
 800742c:	bdb0      	pop	{r4, r5, r7, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	fffff0fe 	.word	0xfffff0fe
 8007434:	08007b61 	.word	0x08007b61
 8007438:	08007c2d 	.word	0x08007c2d
 800743c:	08007c4d 	.word	0x08007c4d

08007440 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8007440:	b5b0      	push	{r4, r5, r7, lr}
 8007442:	b084      	sub	sp, #16
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2254      	movs	r2, #84	@ 0x54
 800744c:	5c9b      	ldrb	r3, [r3, r2]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_ADC_Stop_DMA+0x16>
 8007452:	2302      	movs	r3, #2
 8007454:	e05f      	b.n	8007516 <HAL_ADC_Stop_DMA+0xd6>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2254      	movs	r2, #84	@ 0x54
 800745a:	2101      	movs	r1, #1
 800745c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800745e:	250f      	movs	r5, #15
 8007460:	197c      	adds	r4, r7, r5
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	0018      	movs	r0, r3
 8007466:	f000 fa55 	bl	8007914 <ADC_ConversionStop>
 800746a:	0003      	movs	r3, r0
 800746c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800746e:	0029      	movs	r1, r5
 8007470:	187b      	adds	r3, r7, r1
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d147      	bne.n	8007508 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800747c:	2225      	movs	r2, #37	@ 0x25
 800747e:	5c9b      	ldrb	r3, [r3, r2]
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d112      	bne.n	80074ac <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748a:	000d      	movs	r5, r1
 800748c:	187c      	adds	r4, r7, r1
 800748e:	0018      	movs	r0, r3
 8007490:	f000 ffc4 	bl	800841c <HAL_DMA_Abort>
 8007494:	0003      	movs	r3, r0
 8007496:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8007498:	197b      	adds	r3, r7, r5
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d005      	beq.n	80074ac <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074a4:	2240      	movs	r2, #64	@ 0x40
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2110      	movs	r1, #16
 80074b8:	438a      	bics	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80074bc:	220f      	movs	r2, #15
 80074be:	18bb      	adds	r3, r7, r2
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d107      	bne.n	80074d6 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80074c6:	18bc      	adds	r4, r7, r2
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	0018      	movs	r0, r3
 80074cc:	f000 faea 	bl	8007aa4 <ADC_Disable>
 80074d0:	0003      	movs	r3, r0
 80074d2:	7023      	strb	r3, [r4, #0]
 80074d4:	e003      	b.n	80074de <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	0018      	movs	r0, r3
 80074da:	f000 fae3 	bl	8007aa4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80074de:	230f      	movs	r3, #15
 80074e0:	18fb      	adds	r3, r7, r3
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d107      	bne.n	80074f8 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074ec:	4a0c      	ldr	r2, [pc, #48]	@ (8007520 <HAL_ADC_Stop_DMA+0xe0>)
 80074ee:	4013      	ands	r3, r2
 80074f0:	2201      	movs	r2, #1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68da      	ldr	r2, [r3, #12]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2101      	movs	r1, #1
 8007504:	438a      	bics	r2, r1
 8007506:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2254      	movs	r2, #84	@ 0x54
 800750c:	2100      	movs	r1, #0
 800750e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007510:	230f      	movs	r3, #15
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	781b      	ldrb	r3, [r3, #0]
}
 8007516:	0018      	movs	r0, r3
 8007518:	46bd      	mov	sp, r7
 800751a:	b004      	add	sp, #16
 800751c:	bdb0      	pop	{r4, r5, r7, pc}
 800751e:	46c0      	nop			@ (mov r8, r8)
 8007520:	fffffefe 	.word	0xfffffefe

08007524 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800752c:	46c0      	nop			@ (mov r8, r8)
 800752e:	46bd      	mov	sp, r7
 8007530:	b002      	add	sp, #8
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800753c:	46c0      	nop			@ (mov r8, r8)
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}

08007544 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800754c:	46c0      	nop			@ (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	b002      	add	sp, #8
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800755c:	46c0      	nop			@ (mov r8, r8)
 800755e:	46bd      	mov	sp, r7
 8007560:	b002      	add	sp, #8
 8007562:	bd80      	pop	{r7, pc}

08007564 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800756e:	2317      	movs	r3, #23
 8007570:	18fb      	adds	r3, r7, r3
 8007572:	2200      	movs	r2, #0
 8007574:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2254      	movs	r2, #84	@ 0x54
 800757e:	5c9b      	ldrb	r3, [r3, r2]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x24>
 8007584:	2302      	movs	r3, #2
 8007586:	e1c0      	b.n	800790a <HAL_ADC_ConfigChannel+0x3a6>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2254      	movs	r2, #84	@ 0x54
 800758c:	2101      	movs	r1, #1
 800758e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	0018      	movs	r0, r3
 8007596:	f7ff fc4f 	bl	8006e38 <LL_ADC_REG_IsConversionOngoing>
 800759a:	1e03      	subs	r3, r0, #0
 800759c:	d000      	beq.n	80075a0 <HAL_ADC_ConfigChannel+0x3c>
 800759e:	e1a3      	b.n	80078e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d100      	bne.n	80075aa <HAL_ADC_ConfigChannel+0x46>
 80075a8:	e143      	b.n	8007832 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	2380      	movs	r3, #128	@ 0x80
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d004      	beq.n	80075c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80075ba:	4ac1      	ldr	r2, [pc, #772]	@ (80078c0 <HAL_ADC_ConfigChannel+0x35c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d108      	bne.n	80075d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	0019      	movs	r1, r3
 80075ca:	0010      	movs	r0, r2
 80075cc:	f7ff fb62 	bl	8006c94 <LL_ADC_REG_SetSequencerChAdd>
 80075d0:	e0c9      	b.n	8007766 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	211f      	movs	r1, #31
 80075dc:	400b      	ands	r3, r1
 80075de:	210f      	movs	r1, #15
 80075e0:	4099      	lsls	r1, r3
 80075e2:	000b      	movs	r3, r1
 80075e4:	43db      	mvns	r3, r3
 80075e6:	4013      	ands	r3, r2
 80075e8:	0019      	movs	r1, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	035b      	lsls	r3, r3, #13
 80075f0:	0b5b      	lsrs	r3, r3, #13
 80075f2:	d105      	bne.n	8007600 <HAL_ADC_ConfigChannel+0x9c>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	0e9b      	lsrs	r3, r3, #26
 80075fa:	221f      	movs	r2, #31
 80075fc:	4013      	ands	r3, r2
 80075fe:	e098      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	4013      	ands	r3, r2
 8007608:	d000      	beq.n	800760c <HAL_ADC_ConfigChannel+0xa8>
 800760a:	e091      	b.n	8007730 <HAL_ADC_ConfigChannel+0x1cc>
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2202      	movs	r2, #2
 8007612:	4013      	ands	r3, r2
 8007614:	d000      	beq.n	8007618 <HAL_ADC_ConfigChannel+0xb4>
 8007616:	e089      	b.n	800772c <HAL_ADC_ConfigChannel+0x1c8>
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2204      	movs	r2, #4
 800761e:	4013      	ands	r3, r2
 8007620:	d000      	beq.n	8007624 <HAL_ADC_ConfigChannel+0xc0>
 8007622:	e081      	b.n	8007728 <HAL_ADC_ConfigChannel+0x1c4>
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2208      	movs	r2, #8
 800762a:	4013      	ands	r3, r2
 800762c:	d000      	beq.n	8007630 <HAL_ADC_ConfigChannel+0xcc>
 800762e:	e079      	b.n	8007724 <HAL_ADC_ConfigChannel+0x1c0>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2210      	movs	r2, #16
 8007636:	4013      	ands	r3, r2
 8007638:	d000      	beq.n	800763c <HAL_ADC_ConfigChannel+0xd8>
 800763a:	e071      	b.n	8007720 <HAL_ADC_ConfigChannel+0x1bc>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2220      	movs	r2, #32
 8007642:	4013      	ands	r3, r2
 8007644:	d000      	beq.n	8007648 <HAL_ADC_ConfigChannel+0xe4>
 8007646:	e069      	b.n	800771c <HAL_ADC_ConfigChannel+0x1b8>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2240      	movs	r2, #64	@ 0x40
 800764e:	4013      	ands	r3, r2
 8007650:	d000      	beq.n	8007654 <HAL_ADC_ConfigChannel+0xf0>
 8007652:	e061      	b.n	8007718 <HAL_ADC_ConfigChannel+0x1b4>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2280      	movs	r2, #128	@ 0x80
 800765a:	4013      	ands	r3, r2
 800765c:	d000      	beq.n	8007660 <HAL_ADC_ConfigChannel+0xfc>
 800765e:	e059      	b.n	8007714 <HAL_ADC_ConfigChannel+0x1b0>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	2380      	movs	r3, #128	@ 0x80
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	4013      	ands	r3, r2
 800766a:	d151      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x1ac>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4013      	ands	r3, r2
 8007676:	d149      	bne.n	800770c <HAL_ADC_ConfigChannel+0x1a8>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	2380      	movs	r3, #128	@ 0x80
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	4013      	ands	r3, r2
 8007682:	d141      	bne.n	8007708 <HAL_ADC_ConfigChannel+0x1a4>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	2380      	movs	r3, #128	@ 0x80
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	4013      	ands	r3, r2
 800768e:	d139      	bne.n	8007704 <HAL_ADC_ConfigChannel+0x1a0>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	2380      	movs	r3, #128	@ 0x80
 8007696:	015b      	lsls	r3, r3, #5
 8007698:	4013      	ands	r3, r2
 800769a:	d131      	bne.n	8007700 <HAL_ADC_ConfigChannel+0x19c>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	2380      	movs	r3, #128	@ 0x80
 80076a2:	019b      	lsls	r3, r3, #6
 80076a4:	4013      	ands	r3, r2
 80076a6:	d129      	bne.n	80076fc <HAL_ADC_ConfigChannel+0x198>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	2380      	movs	r3, #128	@ 0x80
 80076ae:	01db      	lsls	r3, r3, #7
 80076b0:	4013      	ands	r3, r2
 80076b2:	d121      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x194>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	2380      	movs	r3, #128	@ 0x80
 80076ba:	021b      	lsls	r3, r3, #8
 80076bc:	4013      	ands	r3, r2
 80076be:	d119      	bne.n	80076f4 <HAL_ADC_ConfigChannel+0x190>
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	2380      	movs	r3, #128	@ 0x80
 80076c6:	025b      	lsls	r3, r3, #9
 80076c8:	4013      	ands	r3, r2
 80076ca:	d111      	bne.n	80076f0 <HAL_ADC_ConfigChannel+0x18c>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	2380      	movs	r3, #128	@ 0x80
 80076d2:	029b      	lsls	r3, r3, #10
 80076d4:	4013      	ands	r3, r2
 80076d6:	d109      	bne.n	80076ec <HAL_ADC_ConfigChannel+0x188>
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	2380      	movs	r3, #128	@ 0x80
 80076de:	02db      	lsls	r3, r3, #11
 80076e0:	4013      	ands	r3, r2
 80076e2:	d001      	beq.n	80076e8 <HAL_ADC_ConfigChannel+0x184>
 80076e4:	2312      	movs	r3, #18
 80076e6:	e024      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076e8:	2300      	movs	r3, #0
 80076ea:	e022      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076ec:	2311      	movs	r3, #17
 80076ee:	e020      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076f0:	2310      	movs	r3, #16
 80076f2:	e01e      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076f4:	230f      	movs	r3, #15
 80076f6:	e01c      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076f8:	230e      	movs	r3, #14
 80076fa:	e01a      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 80076fc:	230d      	movs	r3, #13
 80076fe:	e018      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007700:	230c      	movs	r3, #12
 8007702:	e016      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007704:	230b      	movs	r3, #11
 8007706:	e014      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007708:	230a      	movs	r3, #10
 800770a:	e012      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 800770c:	2309      	movs	r3, #9
 800770e:	e010      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007710:	2308      	movs	r3, #8
 8007712:	e00e      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007714:	2307      	movs	r3, #7
 8007716:	e00c      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007718:	2306      	movs	r3, #6
 800771a:	e00a      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 800771c:	2305      	movs	r3, #5
 800771e:	e008      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007720:	2304      	movs	r3, #4
 8007722:	e006      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007724:	2303      	movs	r3, #3
 8007726:	e004      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007728:	2302      	movs	r3, #2
 800772a:	e002      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <HAL_ADC_ConfigChannel+0x1ce>
 8007730:	2300      	movs	r3, #0
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	6852      	ldr	r2, [r2, #4]
 8007736:	201f      	movs	r0, #31
 8007738:	4002      	ands	r2, r0
 800773a:	4093      	lsls	r3, r2
 800773c:	000a      	movs	r2, r1
 800773e:	431a      	orrs	r2, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	089b      	lsrs	r3, r3, #2
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	69db      	ldr	r3, [r3, #28]
 8007750:	429a      	cmp	r2, r3
 8007752:	d808      	bhi.n	8007766 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6818      	ldr	r0, [r3, #0]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	6859      	ldr	r1, [r3, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	001a      	movs	r2, r3
 8007762:	f7ff fa77 	bl	8006c54 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	6819      	ldr	r1, [r3, #0]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	001a      	movs	r2, r3
 8007774:	f7ff fab2 	bl	8006cdc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	db00      	blt.n	8007782 <HAL_ADC_ConfigChannel+0x21e>
 8007780:	e0bc      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007782:	4b50      	ldr	r3, [pc, #320]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 8007784:	0018      	movs	r0, r3
 8007786:	f7ff fa13 	bl	8006bb0 <LL_ADC_GetCommonPathInternalCh>
 800778a:	0003      	movs	r3, r0
 800778c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a4d      	ldr	r2, [pc, #308]	@ (80078c8 <HAL_ADC_ConfigChannel+0x364>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d122      	bne.n	80077de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	2380      	movs	r3, #128	@ 0x80
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077a0:	d11d      	bne.n	80077de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	2280      	movs	r2, #128	@ 0x80
 80077a6:	0412      	lsls	r2, r2, #16
 80077a8:	4313      	orrs	r3, r2
 80077aa:	4a46      	ldr	r2, [pc, #280]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 80077ac:	0019      	movs	r1, r3
 80077ae:	0010      	movs	r0, r2
 80077b0:	f7ff f9ea 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80077b4:	4b45      	ldr	r3, [pc, #276]	@ (80078cc <HAL_ADC_ConfigChannel+0x368>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4945      	ldr	r1, [pc, #276]	@ (80078d0 <HAL_ADC_ConfigChannel+0x36c>)
 80077ba:	0018      	movs	r0, r3
 80077bc:	f7f8 fca4 	bl	8000108 <__udivsi3>
 80077c0:	0003      	movs	r3, r0
 80077c2:	1c5a      	adds	r2, r3, #1
 80077c4:	0013      	movs	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	189b      	adds	r3, r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80077ce:	e002      	b.n	80077d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f9      	bne.n	80077d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80077dc:	e08e      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a3c      	ldr	r2, [pc, #240]	@ (80078d4 <HAL_ADC_ConfigChannel+0x370>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10e      	bne.n	8007806 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	2380      	movs	r3, #128	@ 0x80
 80077ec:	045b      	lsls	r3, r3, #17
 80077ee:	4013      	ands	r3, r2
 80077f0:	d109      	bne.n	8007806 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	2280      	movs	r2, #128	@ 0x80
 80077f6:	0452      	lsls	r2, r2, #17
 80077f8:	4313      	orrs	r3, r2
 80077fa:	4a32      	ldr	r2, [pc, #200]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 80077fc:	0019      	movs	r1, r3
 80077fe:	0010      	movs	r0, r2
 8007800:	f7ff f9c2 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
 8007804:	e07a      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a33      	ldr	r2, [pc, #204]	@ (80078d8 <HAL_ADC_ConfigChannel+0x374>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d000      	beq.n	8007812 <HAL_ADC_ConfigChannel+0x2ae>
 8007810:	e074      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007812:	693a      	ldr	r2, [r7, #16]
 8007814:	2380      	movs	r3, #128	@ 0x80
 8007816:	03db      	lsls	r3, r3, #15
 8007818:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800781a:	d000      	beq.n	800781e <HAL_ADC_ConfigChannel+0x2ba>
 800781c:	e06e      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	2280      	movs	r2, #128	@ 0x80
 8007822:	03d2      	lsls	r2, r2, #15
 8007824:	4313      	orrs	r3, r2
 8007826:	4a27      	ldr	r2, [pc, #156]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 8007828:	0019      	movs	r1, r3
 800782a:	0010      	movs	r0, r2
 800782c:	f7ff f9ac 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
 8007830:	e064      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691a      	ldr	r2, [r3, #16]
 8007836:	2380      	movs	r3, #128	@ 0x80
 8007838:	061b      	lsls	r3, r3, #24
 800783a:	429a      	cmp	r2, r3
 800783c:	d004      	beq.n	8007848 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007842:	4a1f      	ldr	r2, [pc, #124]	@ (80078c0 <HAL_ADC_ConfigChannel+0x35c>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d107      	bne.n	8007858 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	0019      	movs	r1, r3
 8007852:	0010      	movs	r0, r2
 8007854:	f7ff fa2f 	bl	8006cb6 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da4d      	bge.n	80078fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007860:	4b18      	ldr	r3, [pc, #96]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 8007862:	0018      	movs	r0, r3
 8007864:	f7ff f9a4 	bl	8006bb0 <LL_ADC_GetCommonPathInternalCh>
 8007868:	0003      	movs	r3, r0
 800786a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a15      	ldr	r2, [pc, #84]	@ (80078c8 <HAL_ADC_ConfigChannel+0x364>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d108      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4a18      	ldr	r2, [pc, #96]	@ (80078dc <HAL_ADC_ConfigChannel+0x378>)
 800787a:	4013      	ands	r3, r2
 800787c:	4a11      	ldr	r2, [pc, #68]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 800787e:	0019      	movs	r1, r3
 8007880:	0010      	movs	r0, r2
 8007882:	f7ff f981 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
 8007886:	e039      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a11      	ldr	r2, [pc, #68]	@ (80078d4 <HAL_ADC_ConfigChannel+0x370>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d108      	bne.n	80078a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4a12      	ldr	r2, [pc, #72]	@ (80078e0 <HAL_ADC_ConfigChannel+0x37c>)
 8007896:	4013      	ands	r3, r2
 8007898:	4a0a      	ldr	r2, [pc, #40]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 800789a:	0019      	movs	r1, r3
 800789c:	0010      	movs	r0, r2
 800789e:	f7ff f973 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
 80078a2:	e02b      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a0b      	ldr	r2, [pc, #44]	@ (80078d8 <HAL_ADC_ConfigChannel+0x374>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d126      	bne.n	80078fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	4a0c      	ldr	r2, [pc, #48]	@ (80078e4 <HAL_ADC_ConfigChannel+0x380>)
 80078b2:	4013      	ands	r3, r2
 80078b4:	4a03      	ldr	r2, [pc, #12]	@ (80078c4 <HAL_ADC_ConfigChannel+0x360>)
 80078b6:	0019      	movs	r1, r3
 80078b8:	0010      	movs	r0, r2
 80078ba:	f7ff f965 	bl	8006b88 <LL_ADC_SetCommonPathInternalCh>
 80078be:	e01d      	b.n	80078fc <HAL_ADC_ConfigChannel+0x398>
 80078c0:	80000004 	.word	0x80000004
 80078c4:	40012708 	.word	0x40012708
 80078c8:	b0001000 	.word	0xb0001000
 80078cc:	2000044c 	.word	0x2000044c
 80078d0:	00030d40 	.word	0x00030d40
 80078d4:	b8004000 	.word	0xb8004000
 80078d8:	b4002000 	.word	0xb4002000
 80078dc:	ff7fffff 	.word	0xff7fffff
 80078e0:	feffffff 	.word	0xfeffffff
 80078e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ec:	2220      	movs	r2, #32
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80078f4:	2317      	movs	r3, #23
 80078f6:	18fb      	adds	r3, r7, r3
 80078f8:	2201      	movs	r2, #1
 80078fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2254      	movs	r2, #84	@ 0x54
 8007900:	2100      	movs	r1, #0
 8007902:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007904:	2317      	movs	r3, #23
 8007906:	18fb      	adds	r3, r7, r3
 8007908:	781b      	ldrb	r3, [r3, #0]
}
 800790a:	0018      	movs	r0, r3
 800790c:	46bd      	mov	sp, r7
 800790e:	b006      	add	sp, #24
 8007910:	bd80      	pop	{r7, pc}
 8007912:	46c0      	nop			@ (mov r8, r8)

08007914 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	0018      	movs	r0, r3
 8007922:	f7ff fa89 	bl	8006e38 <LL_ADC_REG_IsConversionOngoing>
 8007926:	1e03      	subs	r3, r0, #0
 8007928:	d031      	beq.n	800798e <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	0018      	movs	r0, r3
 8007930:	f7ff fa4d 	bl	8006dce <LL_ADC_IsDisableOngoing>
 8007934:	1e03      	subs	r3, r0, #0
 8007936:	d104      	bne.n	8007942 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	0018      	movs	r0, r3
 800793e:	f7ff fa69 	bl	8006e14 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007942:	f7ff f917 	bl	8006b74 <HAL_GetTick>
 8007946:	0003      	movs	r3, r0
 8007948:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800794a:	e01a      	b.n	8007982 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800794c:	f7ff f912 	bl	8006b74 <HAL_GetTick>
 8007950:	0002      	movs	r2, r0
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b02      	cmp	r3, #2
 8007958:	d913      	bls.n	8007982 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	2204      	movs	r2, #4
 8007962:	4013      	ands	r3, r2
 8007964:	d00d      	beq.n	8007982 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800796a:	2210      	movs	r2, #16
 800796c:	431a      	orrs	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007976:	2201      	movs	r2, #1
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e006      	b.n	8007990 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2204      	movs	r2, #4
 800798a:	4013      	ands	r3, r2
 800798c:	d1de      	bne.n	800794c <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	0018      	movs	r0, r3
 8007992:	46bd      	mov	sp, r7
 8007994:	b004      	add	sp, #16
 8007996:	bd80      	pop	{r7, pc}

08007998 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	0018      	movs	r0, r3
 80079aa:	f7ff f9ff 	bl	8006dac <LL_ADC_IsEnabled>
 80079ae:	1e03      	subs	r3, r0, #0
 80079b0:	d000      	beq.n	80079b4 <ADC_Enable+0x1c>
 80079b2:	e069      	b.n	8007a88 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	4a36      	ldr	r2, [pc, #216]	@ (8007a94 <ADC_Enable+0xfc>)
 80079bc:	4013      	ands	r3, r2
 80079be:	d00d      	beq.n	80079dc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079c4:	2210      	movs	r2, #16
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079d0:	2201      	movs	r2, #1
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e056      	b.n	8007a8a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7ff f9bf 	bl	8006d64 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80079e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007a98 <ADC_Enable+0x100>)
 80079e8:	0018      	movs	r0, r3
 80079ea:	f7ff f8e1 	bl	8006bb0 <LL_ADC_GetCommonPathInternalCh>
 80079ee:	0002      	movs	r2, r0
 80079f0:	2380      	movs	r3, #128	@ 0x80
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	4013      	ands	r3, r2
 80079f6:	d00f      	beq.n	8007a18 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80079f8:	4b28      	ldr	r3, [pc, #160]	@ (8007a9c <ADC_Enable+0x104>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4928      	ldr	r1, [pc, #160]	@ (8007aa0 <ADC_Enable+0x108>)
 80079fe:	0018      	movs	r0, r3
 8007a00:	f7f8 fb82 	bl	8000108 <__udivsi3>
 8007a04:	0003      	movs	r3, r0
 8007a06:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8007a08:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007a0a:	e002      	b.n	8007a12 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	3b01      	subs	r3, #1
 8007a10:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1f9      	bne.n	8007a0c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	7e5b      	ldrb	r3, [r3, #25]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d033      	beq.n	8007a88 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8007a20:	f7ff f8a8 	bl	8006b74 <HAL_GetTick>
 8007a24:	0003      	movs	r3, r0
 8007a26:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a28:	e027      	b.n	8007a7a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f7ff f9bc 	bl	8006dac <LL_ADC_IsEnabled>
 8007a34:	1e03      	subs	r3, r0, #0
 8007a36:	d104      	bne.n	8007a42 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f7ff f991 	bl	8006d64 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007a42:	f7ff f897 	bl	8006b74 <HAL_GetTick>
 8007a46:	0002      	movs	r2, r0
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d914      	bls.n	8007a7a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2201      	movs	r2, #1
 8007a58:	4013      	ands	r3, r2
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d00d      	beq.n	8007a7a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a62:	2210      	movs	r2, #16
 8007a64:	431a      	orrs	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a6e:	2201      	movs	r2, #1
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e007      	b.n	8007a8a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2201      	movs	r2, #1
 8007a82:	4013      	ands	r3, r2
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d1d0      	bne.n	8007a2a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b004      	add	sp, #16
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	80000017 	.word	0x80000017
 8007a98:	40012708 	.word	0x40012708
 8007a9c:	2000044c 	.word	0x2000044c
 8007aa0:	00030d40 	.word	0x00030d40

08007aa4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	0018      	movs	r0, r3
 8007ab2:	f7ff f98c 	bl	8006dce <LL_ADC_IsDisableOngoing>
 8007ab6:	0003      	movs	r3, r0
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7ff f974 	bl	8006dac <LL_ADC_IsEnabled>
 8007ac4:	1e03      	subs	r3, r0, #0
 8007ac6:	d046      	beq.n	8007b56 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d143      	bne.n	8007b56 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2205      	movs	r2, #5
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d10d      	bne.n	8007af8 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	0018      	movs	r0, r3
 8007ae2:	f7ff f951 	bl	8006d88 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2203      	movs	r2, #3
 8007aec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007aee:	f7ff f841 	bl	8006b74 <HAL_GetTick>
 8007af2:	0003      	movs	r3, r0
 8007af4:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007af6:	e028      	b.n	8007b4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007afc:	2210      	movs	r2, #16
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b08:	2201      	movs	r2, #1
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e021      	b.n	8007b58 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007b14:	f7ff f82e 	bl	8006b74 <HAL_GetTick>
 8007b18:	0002      	movs	r2, r0
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d913      	bls.n	8007b4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	d00d      	beq.n	8007b4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b32:	2210      	movs	r2, #16
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b3e:	2201      	movs	r2, #1
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e006      	b.n	8007b58 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	2201      	movs	r2, #1
 8007b52:	4013      	ands	r3, r2
 8007b54:	d1de      	bne.n	8007b14 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	0018      	movs	r0, r3
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	b004      	add	sp, #16
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b72:	2250      	movs	r2, #80	@ 0x50
 8007b74:	4013      	ands	r3, r2
 8007b76:	d142      	bne.n	8007bfe <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7c:	2280      	movs	r2, #128	@ 0x80
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	431a      	orrs	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f7ff f851 	bl	8006c32 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007b90:	1e03      	subs	r3, r0, #0
 8007b92:	d02e      	beq.n	8007bf2 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	7e9b      	ldrb	r3, [r3, #26]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d12a      	bne.n	8007bf2 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2208      	movs	r2, #8
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	2b08      	cmp	r3, #8
 8007ba8:	d123      	bne.n	8007bf2 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	0018      	movs	r0, r3
 8007bb0:	f7ff f942 	bl	8006e38 <LL_ADC_REG_IsConversionOngoing>
 8007bb4:	1e03      	subs	r3, r0, #0
 8007bb6:	d110      	bne.n	8007bda <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	210c      	movs	r1, #12
 8007bc4:	438a      	bics	r2, r1
 8007bc6:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bcc:	4a16      	ldr	r2, [pc, #88]	@ (8007c28 <ADC_DMAConvCplt+0xc8>)
 8007bce:	4013      	ands	r3, r2
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	659a      	str	r2, [r3, #88]	@ 0x58
 8007bd8:	e00b      	b.n	8007bf2 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007bde:	2220      	movs	r2, #32
 8007be0:	431a      	orrs	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bea:	2201      	movs	r2, #1
 8007bec:	431a      	orrs	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	0010      	movs	r0, r2
 8007bfa:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007bfc:	e010      	b.n	8007c20 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c02:	2210      	movs	r2, #16
 8007c04:	4013      	ands	r3, r2
 8007c06:	d005      	beq.n	8007c14 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	0010      	movs	r0, r2
 8007c10:	4798      	blx	r3
}
 8007c12:	e005      	b.n	8007c20 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	0010      	movs	r0, r2
 8007c1e:	4798      	blx	r3
}
 8007c20:	46c0      	nop			@ (mov r8, r8)
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b004      	add	sp, #16
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	fffffefe 	.word	0xfffffefe

08007c2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	0010      	movs	r0, r2
 8007c42:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c44:	46c0      	nop			@ (mov r8, r8)
 8007c46:	46bd      	mov	sp, r7
 8007c48:	b004      	add	sp, #16
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c5e:	2240      	movs	r2, #64	@ 0x40
 8007c60:	431a      	orrs	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	431a      	orrs	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	0010      	movs	r0, r2
 8007c7a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c7c:	46c0      	nop			@ (mov r8, r8)
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	b004      	add	sp, #16
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <LL_ADC_GetCommonClock>:
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	23f0      	movs	r3, #240	@ 0xf0
 8007c92:	039b      	lsls	r3, r3, #14
 8007c94:	4013      	ands	r3, r2
}
 8007c96:	0018      	movs	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b002      	add	sp, #8
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <LL_ADC_GetClock>:
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b082      	sub	sp, #8
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	0f9b      	lsrs	r3, r3, #30
 8007cac:	079b      	lsls	r3, r3, #30
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <LL_ADC_SetCalibrationFactor>:
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	22b4      	movs	r2, #180	@ 0xb4
 8007cc4:	589b      	ldr	r3, [r3, r2]
 8007cc6:	227f      	movs	r2, #127	@ 0x7f
 8007cc8:	4393      	bics	r3, r2
 8007cca:	001a      	movs	r2, r3
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	21b4      	movs	r1, #180	@ 0xb4
 8007cd4:	505a      	str	r2, [r3, r1]
}
 8007cd6:	46c0      	nop			@ (mov r8, r8)
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	b002      	add	sp, #8
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <LL_ADC_GetCalibrationFactor>:
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	22b4      	movs	r2, #180	@ 0xb4
 8007cea:	589b      	ldr	r3, [r3, r2]
 8007cec:	227f      	movs	r2, #127	@ 0x7f
 8007cee:	4013      	ands	r3, r2
}
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	b002      	add	sp, #8
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <LL_ADC_Enable>:
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	4a04      	ldr	r2, [pc, #16]	@ (8007d18 <LL_ADC_Enable+0x20>)
 8007d06:	4013      	ands	r3, r2
 8007d08:	2201      	movs	r2, #1
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	609a      	str	r2, [r3, #8]
}
 8007d10:	46c0      	nop			@ (mov r8, r8)
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b002      	add	sp, #8
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	7fffffe8 	.word	0x7fffffe8

08007d1c <LL_ADC_Disable>:
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4a04      	ldr	r2, [pc, #16]	@ (8007d3c <LL_ADC_Disable+0x20>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	609a      	str	r2, [r3, #8]
}
 8007d34:	46c0      	nop			@ (mov r8, r8)
 8007d36:	46bd      	mov	sp, r7
 8007d38:	b002      	add	sp, #8
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	7fffffe8 	.word	0x7fffffe8

08007d40 <LL_ADC_IsEnabled>:
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	4013      	ands	r3, r2
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d101      	bne.n	8007d58 <LL_ADC_IsEnabled+0x18>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <LL_ADC_IsEnabled+0x1a>
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	0018      	movs	r0, r3
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	b002      	add	sp, #8
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <LL_ADC_StartCalibration>:
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	4a05      	ldr	r2, [pc, #20]	@ (8007d88 <LL_ADC_StartCalibration+0x24>)
 8007d72:	4013      	ands	r3, r2
 8007d74:	2280      	movs	r2, #128	@ 0x80
 8007d76:	0612      	lsls	r2, r2, #24
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b002      	add	sp, #8
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	46c0      	nop			@ (mov r8, r8)
 8007d88:	7fffffe8 	.word	0x7fffffe8

08007d8c <LL_ADC_IsCalibrationOnGoing>:
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	0fdb      	lsrs	r3, r3, #31
 8007d9a:	07da      	lsls	r2, r3, #31
 8007d9c:	2380      	movs	r3, #128	@ 0x80
 8007d9e:	061b      	lsls	r3, r3, #24
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d101      	bne.n	8007da8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b002      	add	sp, #8
 8007db0:	bd80      	pop	{r7, pc}
	...

08007db4 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8007db4:	b590      	push	{r4, r7, lr}
 8007db6:	b08b      	sub	sp, #44	@ 0x2c
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2254      	movs	r2, #84	@ 0x54
 8007dc8:	5c9b      	ldrb	r3, [r3, r2]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_ADCEx_Calibration_Start+0x1e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e0dd      	b.n	8007f8e <HAL_ADCEx_Calibration_Start+0x1da>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2254      	movs	r2, #84	@ 0x54
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007dda:	231f      	movs	r3, #31
 8007ddc:	18fc      	adds	r4, r7, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	0018      	movs	r0, r3
 8007de2:	f7ff fe5f 	bl	8007aa4 <ADC_Disable>
 8007de6:	0003      	movs	r3, r0
 8007de8:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	0018      	movs	r0, r3
 8007df0:	f7ff ffa6 	bl	8007d40 <LL_ADC_IsEnabled>
 8007df4:	1e03      	subs	r3, r0, #0
 8007df6:	d000      	beq.n	8007dfa <HAL_ADCEx_Calibration_Start+0x46>
 8007df8:	e0bc      	b.n	8007f74 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dfe:	4a66      	ldr	r2, [pc, #408]	@ (8007f98 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007e00:	4013      	ands	r3, r2
 8007e02:	2202      	movs	r2, #2
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	4a62      	ldr	r2, [pc, #392]	@ (8007f9c <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68da      	ldr	r2, [r3, #12]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	495f      	ldr	r1, [pc, #380]	@ (8007fa0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007e22:	400a      	ands	r2, r1
 8007e24:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007e26:	2300      	movs	r3, #0
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e2a:	e02d      	b.n	8007e88 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7ff ff97 	bl	8007d64 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007e36:	e014      	b.n	8007e62 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	4a58      	ldr	r2, [pc, #352]	@ (8007fa4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d90d      	bls.n	8007e62 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e4a:	2212      	movs	r2, #18
 8007e4c:	4393      	bics	r3, r2
 8007e4e:	2210      	movs	r2, #16
 8007e50:	431a      	orrs	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2254      	movs	r2, #84	@ 0x54
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e095      	b.n	8007f8e <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7ff ff90 	bl	8007d8c <LL_ADC_IsCalibrationOnGoing>
 8007e6c:	1e03      	subs	r3, r0, #0
 8007e6e:	d1e3      	bne.n	8007e38 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0018      	movs	r0, r3
 8007e76:	f7ff ff32 	bl	8007cde <LL_ADC_GetCalibrationFactor>
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	189b      	adds	r3, r3, r2
 8007e80:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e84:	3301      	adds	r3, #1
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	2b07      	cmp	r3, #7
 8007e8c:	d9ce      	bls.n	8007e2c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007e8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007e90:	6a38      	ldr	r0, [r7, #32]
 8007e92:	f7f8 f939 	bl	8000108 <__udivsi3>
 8007e96:	0003      	movs	r3, r0
 8007e98:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f7ff ff2a 	bl	8007cf8 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	0018      	movs	r0, r3
 8007eaa:	f7ff fef8 	bl	8007c9e <LL_ADC_GetClock>
 8007eae:	1e03      	subs	r3, r0, #0
 8007eb0:	d11b      	bne.n	8007eea <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8007fa8 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	f7ff fee5 	bl	8007c84 <LL_ADC_GetCommonClock>
 8007eba:	0003      	movs	r3, r0
 8007ebc:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	23e0      	movs	r3, #224	@ 0xe0
 8007ec2:	035b      	lsls	r3, r3, #13
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d310      	bcc.n	8007eea <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	0c9b      	lsrs	r3, r3, #18
 8007ecc:	3b03      	subs	r3, #3
 8007ece:	2201      	movs	r2, #1
 8007ed0:	409a      	lsls	r2, r3
 8007ed2:	0013      	movs	r3, r2
 8007ed4:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	085b      	lsrs	r3, r3, #1
 8007eda:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8007edc:	e002      	b.n	8007ee4 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1f9      	bne.n	8007ede <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	6a3a      	ldr	r2, [r7, #32]
 8007ef0:	0011      	movs	r1, r2
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f7ff fedf 	bl	8007cb6 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	0018      	movs	r0, r3
 8007efe:	f7ff ff0d 	bl	8007d1c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007f02:	f7fe fe37 	bl	8006b74 <HAL_GetTick>
 8007f06:	0003      	movs	r3, r0
 8007f08:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007f0a:	e01b      	b.n	8007f44 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007f0c:	f7fe fe32 	bl	8006b74 <HAL_GetTick>
 8007f10:	0002      	movs	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d914      	bls.n	8007f44 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	0018      	movs	r0, r3
 8007f20:	f7ff ff0e 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f24:	1e03      	subs	r3, r0, #0
 8007f26:	d00d      	beq.n	8007f44 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	431a      	orrs	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f38:	2201      	movs	r2, #1
 8007f3a:	431a      	orrs	r2, r3
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e024      	b.n	8007f8e <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	0018      	movs	r0, r3
 8007f4a:	f7ff fef9 	bl	8007d40 <LL_ADC_IsEnabled>
 8007f4e:	1e03      	subs	r3, r0, #0
 8007f50:	d1dc      	bne.n	8007f0c <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68d9      	ldr	r1, [r3, #12]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69ba      	ldr	r2, [r7, #24]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	2203      	movs	r2, #3
 8007f68:	4393      	bics	r3, r2
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	431a      	orrs	r2, r3
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f72:	e005      	b.n	8007f80 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f78:	2210      	movs	r2, #16
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2254      	movs	r2, #84	@ 0x54
 8007f84:	2100      	movs	r1, #0
 8007f86:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007f88:	231f      	movs	r3, #31
 8007f8a:	18fb      	adds	r3, r7, r3
 8007f8c:	781b      	ldrb	r3, [r3, #0]
}
 8007f8e:	0018      	movs	r0, r3
 8007f90:	46bd      	mov	sp, r7
 8007f92:	b00b      	add	sp, #44	@ 0x2c
 8007f94:	bd90      	pop	{r4, r7, pc}
 8007f96:	46c0      	nop			@ (mov r8, r8)
 8007f98:	fffffefd 	.word	0xfffffefd
 8007f9c:	00008003 	.word	0x00008003
 8007fa0:	ffff7ffc 	.word	0xffff7ffc
 8007fa4:	0002f1ff 	.word	0x0002f1ff
 8007fa8:	40012708 	.word	0x40012708

08007fac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007fb4:	46c0      	nop			@ (mov r8, r8)
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	b002      	add	sp, #8
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b082      	sub	sp, #8
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007fc4:	46c0      	nop			@ (mov r8, r8)
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	b002      	add	sp, #8
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007fd4:	46c0      	nop			@ (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	0002      	movs	r2, r0
 8007fe4:	1dfb      	adds	r3, r7, #7
 8007fe6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007fe8:	1dfb      	adds	r3, r7, #7
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8007fee:	d809      	bhi.n	8008004 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ff0:	1dfb      	adds	r3, r7, #7
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	001a      	movs	r2, r3
 8007ff6:	231f      	movs	r3, #31
 8007ff8:	401a      	ands	r2, r3
 8007ffa:	4b04      	ldr	r3, [pc, #16]	@ (800800c <__NVIC_EnableIRQ+0x30>)
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4091      	lsls	r1, r2
 8008000:	000a      	movs	r2, r1
 8008002:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8008004:	46c0      	nop			@ (mov r8, r8)
 8008006:	46bd      	mov	sp, r7
 8008008:	b002      	add	sp, #8
 800800a:	bd80      	pop	{r7, pc}
 800800c:	e000e100 	.word	0xe000e100

08008010 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	0002      	movs	r2, r0
 8008018:	1dfb      	adds	r3, r7, #7
 800801a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800801c:	1dfb      	adds	r3, r7, #7
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b7f      	cmp	r3, #127	@ 0x7f
 8008022:	d810      	bhi.n	8008046 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008024:	1dfb      	adds	r3, r7, #7
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	001a      	movs	r2, r3
 800802a:	231f      	movs	r3, #31
 800802c:	4013      	ands	r3, r2
 800802e:	4908      	ldr	r1, [pc, #32]	@ (8008050 <__NVIC_DisableIRQ+0x40>)
 8008030:	2201      	movs	r2, #1
 8008032:	409a      	lsls	r2, r3
 8008034:	0013      	movs	r3, r2
 8008036:	2280      	movs	r2, #128	@ 0x80
 8008038:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800803a:	f3bf 8f4f 	dsb	sy
}
 800803e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8008040:	f3bf 8f6f 	isb	sy
}
 8008044:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	46bd      	mov	sp, r7
 800804a:	b002      	add	sp, #8
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	e000e100 	.word	0xe000e100

08008054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	0002      	movs	r2, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	1dfb      	adds	r3, r7, #7
 8008060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008062:	1dfb      	adds	r3, r7, #7
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b7f      	cmp	r3, #127	@ 0x7f
 8008068:	d828      	bhi.n	80080bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800806a:	4a2f      	ldr	r2, [pc, #188]	@ (8008128 <__NVIC_SetPriority+0xd4>)
 800806c:	1dfb      	adds	r3, r7, #7
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	b25b      	sxtb	r3, r3
 8008072:	089b      	lsrs	r3, r3, #2
 8008074:	33c0      	adds	r3, #192	@ 0xc0
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	589b      	ldr	r3, [r3, r2]
 800807a:	1dfa      	adds	r2, r7, #7
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	0011      	movs	r1, r2
 8008080:	2203      	movs	r2, #3
 8008082:	400a      	ands	r2, r1
 8008084:	00d2      	lsls	r2, r2, #3
 8008086:	21ff      	movs	r1, #255	@ 0xff
 8008088:	4091      	lsls	r1, r2
 800808a:	000a      	movs	r2, r1
 800808c:	43d2      	mvns	r2, r2
 800808e:	401a      	ands	r2, r3
 8008090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	019b      	lsls	r3, r3, #6
 8008096:	22ff      	movs	r2, #255	@ 0xff
 8008098:	401a      	ands	r2, r3
 800809a:	1dfb      	adds	r3, r7, #7
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	0018      	movs	r0, r3
 80080a0:	2303      	movs	r3, #3
 80080a2:	4003      	ands	r3, r0
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080a8:	481f      	ldr	r0, [pc, #124]	@ (8008128 <__NVIC_SetPriority+0xd4>)
 80080aa:	1dfb      	adds	r3, r7, #7
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	b25b      	sxtb	r3, r3
 80080b0:	089b      	lsrs	r3, r3, #2
 80080b2:	430a      	orrs	r2, r1
 80080b4:	33c0      	adds	r3, #192	@ 0xc0
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80080ba:	e031      	b.n	8008120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80080bc:	4a1b      	ldr	r2, [pc, #108]	@ (800812c <__NVIC_SetPriority+0xd8>)
 80080be:	1dfb      	adds	r3, r7, #7
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	0019      	movs	r1, r3
 80080c4:	230f      	movs	r3, #15
 80080c6:	400b      	ands	r3, r1
 80080c8:	3b08      	subs	r3, #8
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	3306      	adds	r3, #6
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	18d3      	adds	r3, r2, r3
 80080d2:	3304      	adds	r3, #4
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	1dfa      	adds	r2, r7, #7
 80080d8:	7812      	ldrb	r2, [r2, #0]
 80080da:	0011      	movs	r1, r2
 80080dc:	2203      	movs	r2, #3
 80080de:	400a      	ands	r2, r1
 80080e0:	00d2      	lsls	r2, r2, #3
 80080e2:	21ff      	movs	r1, #255	@ 0xff
 80080e4:	4091      	lsls	r1, r2
 80080e6:	000a      	movs	r2, r1
 80080e8:	43d2      	mvns	r2, r2
 80080ea:	401a      	ands	r2, r3
 80080ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	019b      	lsls	r3, r3, #6
 80080f2:	22ff      	movs	r2, #255	@ 0xff
 80080f4:	401a      	ands	r2, r3
 80080f6:	1dfb      	adds	r3, r7, #7
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	0018      	movs	r0, r3
 80080fc:	2303      	movs	r3, #3
 80080fe:	4003      	ands	r3, r0
 8008100:	00db      	lsls	r3, r3, #3
 8008102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008104:	4809      	ldr	r0, [pc, #36]	@ (800812c <__NVIC_SetPriority+0xd8>)
 8008106:	1dfb      	adds	r3, r7, #7
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	001c      	movs	r4, r3
 800810c:	230f      	movs	r3, #15
 800810e:	4023      	ands	r3, r4
 8008110:	3b08      	subs	r3, #8
 8008112:	089b      	lsrs	r3, r3, #2
 8008114:	430a      	orrs	r2, r1
 8008116:	3306      	adds	r3, #6
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	18c3      	adds	r3, r0, r3
 800811c:	3304      	adds	r3, #4
 800811e:	601a      	str	r2, [r3, #0]
}
 8008120:	46c0      	nop			@ (mov r8, r8)
 8008122:	46bd      	mov	sp, r7
 8008124:	b003      	add	sp, #12
 8008126:	bd90      	pop	{r4, r7, pc}
 8008128:	e000e100 	.word	0xe000e100
 800812c:	e000ed00 	.word	0xe000ed00

08008130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	1e5a      	subs	r2, r3, #1
 800813c:	2380      	movs	r3, #128	@ 0x80
 800813e:	045b      	lsls	r3, r3, #17
 8008140:	429a      	cmp	r2, r3
 8008142:	d301      	bcc.n	8008148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008144:	2301      	movs	r3, #1
 8008146:	e010      	b.n	800816a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008148:	4b0a      	ldr	r3, [pc, #40]	@ (8008174 <SysTick_Config+0x44>)
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	3a01      	subs	r2, #1
 800814e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008150:	2301      	movs	r3, #1
 8008152:	425b      	negs	r3, r3
 8008154:	2103      	movs	r1, #3
 8008156:	0018      	movs	r0, r3
 8008158:	f7ff ff7c 	bl	8008054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800815c:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <SysTick_Config+0x44>)
 800815e:	2200      	movs	r2, #0
 8008160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008162:	4b04      	ldr	r3, [pc, #16]	@ (8008174 <SysTick_Config+0x44>)
 8008164:	2207      	movs	r2, #7
 8008166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008168:	2300      	movs	r3, #0
}
 800816a:	0018      	movs	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	b002      	add	sp, #8
 8008170:	bd80      	pop	{r7, pc}
 8008172:	46c0      	nop			@ (mov r8, r8)
 8008174:	e000e010 	.word	0xe000e010

08008178 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	210f      	movs	r1, #15
 8008184:	187b      	adds	r3, r7, r1
 8008186:	1c02      	adds	r2, r0, #0
 8008188:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	187b      	adds	r3, r7, r1
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b25b      	sxtb	r3, r3
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff ff5d 	bl	8008054 <__NVIC_SetPriority>
}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	46bd      	mov	sp, r7
 800819e:	b004      	add	sp, #16
 80081a0:	bd80      	pop	{r7, pc}

080081a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b082      	sub	sp, #8
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	0002      	movs	r2, r0
 80081aa:	1dfb      	adds	r3, r7, #7
 80081ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081ae:	1dfb      	adds	r3, r7, #7
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b25b      	sxtb	r3, r3
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7ff ff11 	bl	8007fdc <__NVIC_EnableIRQ>
}
 80081ba:	46c0      	nop			@ (mov r8, r8)
 80081bc:	46bd      	mov	sp, r7
 80081be:	b002      	add	sp, #8
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b082      	sub	sp, #8
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	0002      	movs	r2, r0
 80081ca:	1dfb      	adds	r3, r7, #7
 80081cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80081ce:	1dfb      	adds	r3, r7, #7
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	b25b      	sxtb	r3, r3
 80081d4:	0018      	movs	r0, r3
 80081d6:	f7ff ff1b 	bl	8008010 <__NVIC_DisableIRQ>
}
 80081da:	46c0      	nop			@ (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b002      	add	sp, #8
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b082      	sub	sp, #8
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	0018      	movs	r0, r3
 80081ee:	f7ff ff9f 	bl	8008130 <SysTick_Config>
 80081f2:	0003      	movs	r3, r0
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b002      	add	sp, #8
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	e077      	b.n	80082fe <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a3d      	ldr	r2, [pc, #244]	@ (8008308 <HAL_DMA_Init+0x10c>)
 8008214:	4694      	mov	ip, r2
 8008216:	4463      	add	r3, ip
 8008218:	2114      	movs	r1, #20
 800821a:	0018      	movs	r0, r3
 800821c:	f7f7 ff74 	bl	8000108 <__udivsi3>
 8008220:	0003      	movs	r3, r0
 8008222:	009a      	lsls	r2, r3, #2
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2225      	movs	r2, #37	@ 0x25
 800822c:	2102      	movs	r1, #2
 800822e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4934      	ldr	r1, [pc, #208]	@ (800830c <HAL_DMA_Init+0x110>)
 800823c:	400a      	ands	r2, r1
 800823e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	431a      	orrs	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	431a      	orrs	r2, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	431a      	orrs	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	431a      	orrs	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6a1b      	ldr	r3, [r3, #32]
 800826c:	431a      	orrs	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	0018      	movs	r0, r3
 800827a:	f000 fa8d 	bl	8008798 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689a      	ldr	r2, [r3, #8]
 8008282:	2380      	movs	r3, #128	@ 0x80
 8008284:	01db      	lsls	r3, r3, #7
 8008286:	429a      	cmp	r2, r3
 8008288:	d102      	bne.n	8008290 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008298:	213f      	movs	r1, #63	@ 0x3f
 800829a:	400a      	ands	r2, r1
 800829c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80082a6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d011      	beq.n	80082d4 <HAL_DMA_Init+0xd8>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d80d      	bhi.n	80082d4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	0018      	movs	r0, r3
 80082bc:	f000 fa98 	bl	80087f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	e008      	b.n	80082e6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2225      	movs	r2, #37	@ 0x25
 80082f0:	2101      	movs	r1, #1
 80082f2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2224      	movs	r2, #36	@ 0x24
 80082f8:	2100      	movs	r1, #0
 80082fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	0018      	movs	r0, r3
 8008300:	46bd      	mov	sp, r7
 8008302:	b002      	add	sp, #8
 8008304:	bd80      	pop	{r7, pc}
 8008306:	46c0      	nop			@ (mov r8, r8)
 8008308:	bffdfff8 	.word	0xbffdfff8
 800830c:	ffff800f 	.word	0xffff800f

08008310 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
 800831c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800831e:	2317      	movs	r3, #23
 8008320:	18fb      	adds	r3, r7, r3
 8008322:	2200      	movs	r2, #0
 8008324:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2224      	movs	r2, #36	@ 0x24
 800832a:	5c9b      	ldrb	r3, [r3, r2]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d101      	bne.n	8008334 <HAL_DMA_Start_IT+0x24>
 8008330:	2302      	movs	r3, #2
 8008332:	e06f      	b.n	8008414 <HAL_DMA_Start_IT+0x104>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2224      	movs	r2, #36	@ 0x24
 8008338:	2101      	movs	r1, #1
 800833a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2225      	movs	r2, #37	@ 0x25
 8008340:	5c9b      	ldrb	r3, [r3, r2]
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b01      	cmp	r3, #1
 8008346:	d157      	bne.n	80083f8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	2225      	movs	r2, #37	@ 0x25
 800834c:	2102      	movs	r1, #2
 800834e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2101      	movs	r1, #1
 8008362:	438a      	bics	r2, r1
 8008364:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f000 f9d3 	bl	8008718 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008376:	2b00      	cmp	r3, #0
 8008378:	d008      	beq.n	800838c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	210e      	movs	r1, #14
 8008386:	430a      	orrs	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e00f      	b.n	80083ac <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2104      	movs	r1, #4
 8008398:	438a      	bics	r2, r1
 800839a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	210a      	movs	r1, #10
 80083a8:	430a      	orrs	r2, r1
 80083aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	2380      	movs	r3, #128	@ 0x80
 80083b4:	025b      	lsls	r3, r3, #9
 80083b6:	4013      	ands	r3, r2
 80083b8:	d008      	beq.n	80083cc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c4:	2180      	movs	r1, #128	@ 0x80
 80083c6:	0049      	lsls	r1, r1, #1
 80083c8:	430a      	orrs	r2, r1
 80083ca:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d008      	beq.n	80083e6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083de:	2180      	movs	r1, #128	@ 0x80
 80083e0:	0049      	lsls	r1, r1, #1
 80083e2:	430a      	orrs	r2, r1
 80083e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2101      	movs	r1, #1
 80083f2:	430a      	orrs	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	e00a      	b.n	800840e <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2280      	movs	r2, #128	@ 0x80
 80083fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2224      	movs	r2, #36	@ 0x24
 8008402:	2100      	movs	r1, #0
 8008404:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8008406:	2317      	movs	r3, #23
 8008408:	18fb      	adds	r3, r7, r3
 800840a:	2201      	movs	r2, #1
 800840c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800840e:	2317      	movs	r3, #23
 8008410:	18fb      	adds	r3, r7, r3
 8008412:	781b      	ldrb	r3, [r3, #0]
}
 8008414:	0018      	movs	r0, r3
 8008416:	46bd      	mov	sp, r7
 8008418:	b006      	add	sp, #24
 800841a:	bd80      	pop	{r7, pc}

0800841c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e050      	b.n	80084d0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2225      	movs	r2, #37	@ 0x25
 8008432:	5c9b      	ldrb	r3, [r3, r2]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b02      	cmp	r3, #2
 8008438:	d008      	beq.n	800844c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2204      	movs	r2, #4
 800843e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	@ 0x24
 8008444:	2100      	movs	r1, #0
 8008446:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e041      	b.n	80084d0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	210e      	movs	r1, #14
 8008458:	438a      	bics	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008466:	491c      	ldr	r1, [pc, #112]	@ (80084d8 <HAL_DMA_Abort+0xbc>)
 8008468:	400a      	ands	r2, r1
 800846a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2101      	movs	r1, #1
 8008478:	438a      	bics	r2, r1
 800847a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800847c:	4b17      	ldr	r3, [pc, #92]	@ (80084dc <HAL_DMA_Abort+0xc0>)
 800847e:	6859      	ldr	r1, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	221c      	movs	r2, #28
 8008486:	4013      	ands	r3, r2
 8008488:	2201      	movs	r2, #1
 800848a:	409a      	lsls	r2, r3
 800848c:	4b13      	ldr	r3, [pc, #76]	@ (80084dc <HAL_DMA_Abort+0xc0>)
 800848e:	430a      	orrs	r2, r1
 8008490:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800849a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00c      	beq.n	80084be <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ae:	490a      	ldr	r1, [pc, #40]	@ (80084d8 <HAL_DMA_Abort+0xbc>)
 80084b0:	400a      	ands	r2, r1
 80084b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80084bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2225      	movs	r2, #37	@ 0x25
 80084c2:	2101      	movs	r1, #1
 80084c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2224      	movs	r2, #36	@ 0x24
 80084ca:	2100      	movs	r1, #0
 80084cc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b002      	add	sp, #8
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	fffffeff 	.word	0xfffffeff
 80084dc:	40020000 	.word	0x40020000

080084e0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e8:	210f      	movs	r1, #15
 80084ea:	187b      	adds	r3, r7, r1
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2225      	movs	r2, #37	@ 0x25
 80084f4:	5c9b      	ldrb	r3, [r3, r2]
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d006      	beq.n	800850a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2204      	movs	r2, #4
 8008500:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008502:	187b      	adds	r3, r7, r1
 8008504:	2201      	movs	r2, #1
 8008506:	701a      	strb	r2, [r3, #0]
 8008508:	e049      	b.n	800859e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	210e      	movs	r1, #14
 8008516:	438a      	bics	r2, r1
 8008518:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2101      	movs	r1, #1
 8008526:	438a      	bics	r2, r1
 8008528:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008534:	491d      	ldr	r1, [pc, #116]	@ (80085ac <HAL_DMA_Abort_IT+0xcc>)
 8008536:	400a      	ands	r2, r1
 8008538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800853a:	4b1d      	ldr	r3, [pc, #116]	@ (80085b0 <HAL_DMA_Abort_IT+0xd0>)
 800853c:	6859      	ldr	r1, [r3, #4]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008542:	221c      	movs	r2, #28
 8008544:	4013      	ands	r3, r2
 8008546:	2201      	movs	r2, #1
 8008548:	409a      	lsls	r2, r3
 800854a:	4b19      	ldr	r3, [pc, #100]	@ (80085b0 <HAL_DMA_Abort_IT+0xd0>)
 800854c:	430a      	orrs	r2, r1
 800854e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008558:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00c      	beq.n	800857c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800856c:	490f      	ldr	r1, [pc, #60]	@ (80085ac <HAL_DMA_Abort_IT+0xcc>)
 800856e:	400a      	ands	r2, r1
 8008570:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800857a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2225      	movs	r2, #37	@ 0x25
 8008580:	2101      	movs	r1, #1
 8008582:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2224      	movs	r2, #36	@ 0x24
 8008588:	2100      	movs	r1, #0
 800858a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008590:	2b00      	cmp	r3, #0
 8008592:	d004      	beq.n	800859e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	0010      	movs	r0, r2
 800859c:	4798      	blx	r3
    }
  }
  return status;
 800859e:	230f      	movs	r3, #15
 80085a0:	18fb      	adds	r3, r7, r3
 80085a2:	781b      	ldrb	r3, [r3, #0]
}
 80085a4:	0018      	movs	r0, r3
 80085a6:	46bd      	mov	sp, r7
 80085a8:	b004      	add	sp, #16
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	fffffeff 	.word	0xfffffeff
 80085b0:	40020000 	.word	0x40020000

080085b4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80085bc:	4b55      	ldr	r3, [pc, #340]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ce:	221c      	movs	r2, #28
 80085d0:	4013      	ands	r3, r2
 80085d2:	2204      	movs	r2, #4
 80085d4:	409a      	lsls	r2, r3
 80085d6:	0013      	movs	r3, r2
 80085d8:	68fa      	ldr	r2, [r7, #12]
 80085da:	4013      	ands	r3, r2
 80085dc:	d027      	beq.n	800862e <HAL_DMA_IRQHandler+0x7a>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2204      	movs	r2, #4
 80085e2:	4013      	ands	r3, r2
 80085e4:	d023      	beq.n	800862e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2220      	movs	r2, #32
 80085ee:	4013      	ands	r3, r2
 80085f0:	d107      	bne.n	8008602 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2104      	movs	r1, #4
 80085fe:	438a      	bics	r2, r1
 8008600:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8008602:	4b44      	ldr	r3, [pc, #272]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 8008604:	6859      	ldr	r1, [r3, #4]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	221c      	movs	r2, #28
 800860c:	4013      	ands	r3, r2
 800860e:	2204      	movs	r2, #4
 8008610:	409a      	lsls	r2, r3
 8008612:	4b40      	ldr	r3, [pc, #256]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	2b00      	cmp	r3, #0
 800861e:	d100      	bne.n	8008622 <HAL_DMA_IRQHandler+0x6e>
 8008620:	e073      	b.n	800870a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	0010      	movs	r0, r2
 800862a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800862c:	e06d      	b.n	800870a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008632:	221c      	movs	r2, #28
 8008634:	4013      	ands	r3, r2
 8008636:	2202      	movs	r2, #2
 8008638:	409a      	lsls	r2, r3
 800863a:	0013      	movs	r3, r2
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	4013      	ands	r3, r2
 8008640:	d02e      	beq.n	80086a0 <HAL_DMA_IRQHandler+0xec>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	2202      	movs	r2, #2
 8008646:	4013      	ands	r3, r2
 8008648:	d02a      	beq.n	80086a0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2220      	movs	r2, #32
 8008652:	4013      	ands	r3, r2
 8008654:	d10b      	bne.n	800866e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	210a      	movs	r1, #10
 8008662:	438a      	bics	r2, r1
 8008664:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2225      	movs	r2, #37	@ 0x25
 800866a:	2101      	movs	r1, #1
 800866c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800866e:	4b29      	ldr	r3, [pc, #164]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 8008670:	6859      	ldr	r1, [r3, #4]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008676:	221c      	movs	r2, #28
 8008678:	4013      	ands	r3, r2
 800867a:	2202      	movs	r2, #2
 800867c:	409a      	lsls	r2, r3
 800867e:	4b25      	ldr	r3, [pc, #148]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 8008680:	430a      	orrs	r2, r1
 8008682:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	@ 0x24
 8008688:	2100      	movs	r1, #0
 800868a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03a      	beq.n	800870a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	0010      	movs	r0, r2
 800869c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800869e:	e034      	b.n	800870a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086a4:	221c      	movs	r2, #28
 80086a6:	4013      	ands	r3, r2
 80086a8:	2208      	movs	r2, #8
 80086aa:	409a      	lsls	r2, r3
 80086ac:	0013      	movs	r3, r2
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4013      	ands	r3, r2
 80086b2:	d02b      	beq.n	800870c <HAL_DMA_IRQHandler+0x158>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2208      	movs	r2, #8
 80086b8:	4013      	ands	r3, r2
 80086ba:	d027      	beq.n	800870c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	210e      	movs	r1, #14
 80086c8:	438a      	bics	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80086cc:	4b11      	ldr	r3, [pc, #68]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 80086ce:	6859      	ldr	r1, [r3, #4]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086d4:	221c      	movs	r2, #28
 80086d6:	4013      	ands	r3, r2
 80086d8:	2201      	movs	r2, #1
 80086da:	409a      	lsls	r2, r3
 80086dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008714 <HAL_DMA_IRQHandler+0x160>)
 80086de:	430a      	orrs	r2, r1
 80086e0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2225      	movs	r2, #37	@ 0x25
 80086ec:	2101      	movs	r1, #1
 80086ee:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2224      	movs	r2, #36	@ 0x24
 80086f4:	2100      	movs	r1, #0
 80086f6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d005      	beq.n	800870c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	0010      	movs	r0, r2
 8008708:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800870a:	46c0      	nop			@ (mov r8, r8)
 800870c:	46c0      	nop			@ (mov r8, r8)
}
 800870e:	46bd      	mov	sp, r7
 8008710:	b004      	add	sp, #16
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40020000 	.word	0x40020000

08008718 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800872e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008740:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8008742:	4b14      	ldr	r3, [pc, #80]	@ (8008794 <DMA_SetConfig+0x7c>)
 8008744:	6859      	ldr	r1, [r3, #4]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800874a:	221c      	movs	r2, #28
 800874c:	4013      	ands	r3, r2
 800874e:	2201      	movs	r2, #1
 8008750:	409a      	lsls	r2, r3
 8008752:	4b10      	ldr	r3, [pc, #64]	@ (8008794 <DMA_SetConfig+0x7c>)
 8008754:	430a      	orrs	r2, r1
 8008756:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	689b      	ldr	r3, [r3, #8]
 8008764:	2b10      	cmp	r3, #16
 8008766:	d108      	bne.n	800877a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68ba      	ldr	r2, [r7, #8]
 8008776:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008778:	e007      	b.n	800878a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]
}
 800878a:	46c0      	nop			@ (mov r8, r8)
 800878c:	46bd      	mov	sp, r7
 800878e:	b004      	add	sp, #16
 8008790:	bd80      	pop	{r7, pc}
 8008792:	46c0      	nop			@ (mov r8, r8)
 8008794:	40020000 	.word	0x40020000

08008798 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a4:	089b      	lsrs	r3, r3, #2
 80087a6:	4a10      	ldr	r2, [pc, #64]	@ (80087e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80087a8:	4694      	mov	ip, r2
 80087aa:	4463      	add	r3, ip
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	001a      	movs	r2, r3
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	001a      	movs	r2, r3
 80087ba:	23ff      	movs	r3, #255	@ 0xff
 80087bc:	4013      	ands	r3, r2
 80087be:	3b08      	subs	r3, #8
 80087c0:	2114      	movs	r1, #20
 80087c2:	0018      	movs	r0, r3
 80087c4:	f7f7 fca0 	bl	8000108 <__udivsi3>
 80087c8:	0003      	movs	r3, r0
 80087ca:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	4a07      	ldr	r2, [pc, #28]	@ (80087ec <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80087d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	221f      	movs	r2, #31
 80087d6:	4013      	ands	r3, r2
 80087d8:	2201      	movs	r2, #1
 80087da:	409a      	lsls	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80087e0:	46c0      	nop			@ (mov r8, r8)
 80087e2:	46bd      	mov	sp, r7
 80087e4:	b004      	add	sp, #16
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	10008200 	.word	0x10008200
 80087ec:	40020880 	.word	0x40020880

080087f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	223f      	movs	r2, #63	@ 0x3f
 80087fe:	4013      	ands	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4a0a      	ldr	r2, [pc, #40]	@ (8008830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008806:	4694      	mov	ip, r2
 8008808:	4463      	add	r3, ip
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	001a      	movs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a07      	ldr	r2, [pc, #28]	@ (8008834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008816:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	3b01      	subs	r3, #1
 800881c:	2203      	movs	r2, #3
 800881e:	4013      	ands	r3, r2
 8008820:	2201      	movs	r2, #1
 8008822:	409a      	lsls	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8008828:	46c0      	nop			@ (mov r8, r8)
 800882a:	46bd      	mov	sp, r7
 800882c:	b004      	add	sp, #16
 800882e:	bd80      	pop	{r7, pc}
 8008830:	1000823f 	.word	0x1000823f
 8008834:	40020940 	.word	0x40020940

08008838 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008838:	b5b0      	push	{r4, r5, r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	603a      	str	r2, [r7, #0]
 8008844:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008846:	4b21      	ldr	r3, [pc, #132]	@ (80088cc <HAL_FLASH_Program+0x94>)
 8008848:	781b      	ldrb	r3, [r3, #0]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d101      	bne.n	8008852 <HAL_FLASH_Program+0x1a>
 800884e:	2302      	movs	r3, #2
 8008850:	e038      	b.n	80088c4 <HAL_FLASH_Program+0x8c>
 8008852:	4b1e      	ldr	r3, [pc, #120]	@ (80088cc <HAL_FLASH_Program+0x94>)
 8008854:	2201      	movs	r2, #1
 8008856:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008858:	4b1c      	ldr	r3, [pc, #112]	@ (80088cc <HAL_FLASH_Program+0x94>)
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800885e:	2517      	movs	r5, #23
 8008860:	197c      	adds	r4, r7, r5
 8008862:	23fa      	movs	r3, #250	@ 0xfa
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	0018      	movs	r0, r3
 8008868:	f000 f87a 	bl	8008960 <FLASH_WaitForLastOperation>
 800886c:	0003      	movs	r3, r0
 800886e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008870:	197b      	adds	r3, r7, r5
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d11f      	bne.n	80088b8 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b01      	cmp	r3, #1
 800887c:	d106      	bne.n	800888c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	0008      	movs	r0, r1
 8008886:	f000 f8b9 	bl	80089fc <FLASH_Program_DoubleWord>
 800888a:	e005      	b.n	8008898 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800888c:	683a      	ldr	r2, [r7, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	0011      	movs	r1, r2
 8008892:	0018      	movs	r0, r3
 8008894:	f005 fcb0 	bl	800e1f8 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008898:	2317      	movs	r3, #23
 800889a:	18fc      	adds	r4, r7, r3
 800889c:	23fa      	movs	r3, #250	@ 0xfa
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	0018      	movs	r0, r3
 80088a2:	f000 f85d 	bl	8008960 <FLASH_WaitForLastOperation>
 80088a6:	0003      	movs	r3, r0
 80088a8:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80088aa:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <HAL_FLASH_Program+0x98>)
 80088ac:	695a      	ldr	r2, [r3, #20]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	43d9      	mvns	r1, r3
 80088b2:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <HAL_FLASH_Program+0x98>)
 80088b4:	400a      	ands	r2, r1
 80088b6:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80088b8:	4b04      	ldr	r3, [pc, #16]	@ (80088cc <HAL_FLASH_Program+0x94>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80088be:	2317      	movs	r3, #23
 80088c0:	18fb      	adds	r3, r7, r3
 80088c2:	781b      	ldrb	r3, [r3, #0]
}
 80088c4:	0018      	movs	r0, r3
 80088c6:	46bd      	mov	sp, r7
 80088c8:	b006      	add	sp, #24
 80088ca:	bdb0      	pop	{r4, r5, r7, pc}
 80088cc:	20000db8 	.word	0x20000db8
 80088d0:	40022000 	.word	0x40022000

080088d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80088da:	1dfb      	adds	r3, r7, #7
 80088dc:	2200      	movs	r2, #0
 80088de:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80088e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008910 <HAL_FLASH_Unlock+0x3c>)
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	da0c      	bge.n	8008902 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80088e8:	4b09      	ldr	r3, [pc, #36]	@ (8008910 <HAL_FLASH_Unlock+0x3c>)
 80088ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008914 <HAL_FLASH_Unlock+0x40>)
 80088ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80088ee:	4b08      	ldr	r3, [pc, #32]	@ (8008910 <HAL_FLASH_Unlock+0x3c>)
 80088f0:	4a09      	ldr	r2, [pc, #36]	@ (8008918 <HAL_FLASH_Unlock+0x44>)
 80088f2:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80088f4:	4b06      	ldr	r3, [pc, #24]	@ (8008910 <HAL_FLASH_Unlock+0x3c>)
 80088f6:	695b      	ldr	r3, [r3, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	da02      	bge.n	8008902 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80088fc:	1dfb      	adds	r3, r7, #7
 80088fe:	2201      	movs	r2, #1
 8008900:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8008902:	1dfb      	adds	r3, r7, #7
 8008904:	781b      	ldrb	r3, [r3, #0]
}
 8008906:	0018      	movs	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	b002      	add	sp, #8
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			@ (mov r8, r8)
 8008910:	40022000 	.word	0x40022000
 8008914:	45670123 	.word	0x45670123
 8008918:	cdef89ab 	.word	0xcdef89ab

0800891c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8008922:	1dfb      	adds	r3, r7, #7
 8008924:	2201      	movs	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008928:	23fa      	movs	r3, #250	@ 0xfa
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	0018      	movs	r0, r3
 800892e:	f000 f817 	bl	8008960 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008932:	4b0a      	ldr	r3, [pc, #40]	@ (800895c <HAL_FLASH_Lock+0x40>)
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	4b09      	ldr	r3, [pc, #36]	@ (800895c <HAL_FLASH_Lock+0x40>)
 8008938:	2180      	movs	r1, #128	@ 0x80
 800893a:	0609      	lsls	r1, r1, #24
 800893c:	430a      	orrs	r2, r1
 800893e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8008940:	4b06      	ldr	r3, [pc, #24]	@ (800895c <HAL_FLASH_Lock+0x40>)
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	da02      	bge.n	800894e <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 8008948:	1dfb      	adds	r3, r7, #7
 800894a:	2200      	movs	r2, #0
 800894c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800894e:	1dfb      	adds	r3, r7, #7
 8008950:	781b      	ldrb	r3, [r3, #0]
}
 8008952:	0018      	movs	r0, r3
 8008954:	46bd      	mov	sp, r7
 8008956:	b002      	add	sp, #8
 8008958:	bd80      	pop	{r7, pc}
 800895a:	46c0      	nop			@ (mov r8, r8)
 800895c:	40022000 	.word	0x40022000

08008960 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008968:	f7fe f904 	bl	8006b74 <HAL_GetTick>
 800896c:	0003      	movs	r3, r0
 800896e:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8008970:	2380      	movs	r3, #128	@ 0x80
 8008972:	025b      	lsls	r3, r3, #9
 8008974:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 8008976:	e00c      	b.n	8008992 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3301      	adds	r3, #1
 800897c:	d009      	beq.n	8008992 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 800897e:	f7fe f8f9 	bl	8006b74 <HAL_GetTick>
 8008982:	0002      	movs	r2, r0
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d801      	bhi.n	8008992 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e028      	b.n	80089e4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 8008992:	4b16      	ldr	r3, [pc, #88]	@ (80089ec <FLASH_WaitForLastOperation+0x8c>)
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	4013      	ands	r3, r2
 800899a:	d1ed      	bne.n	8008978 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800899c:	4b13      	ldr	r3, [pc, #76]	@ (80089ec <FLASH_WaitForLastOperation+0x8c>)
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	4a13      	ldr	r2, [pc, #76]	@ (80089f0 <FLASH_WaitForLastOperation+0x90>)
 80089a2:	4013      	ands	r3, r2
 80089a4:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80089a6:	4b11      	ldr	r3, [pc, #68]	@ (80089ec <FLASH_WaitForLastOperation+0x8c>)
 80089a8:	4a12      	ldr	r2, [pc, #72]	@ (80089f4 <FLASH_WaitForLastOperation+0x94>)
 80089aa:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d011      	beq.n	80089d6 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80089b2:	4b11      	ldr	r3, [pc, #68]	@ (80089f8 <FLASH_WaitForLastOperation+0x98>)
 80089b4:	68ba      	ldr	r2, [r7, #8]
 80089b6:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	e013      	b.n	80089e4 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	3301      	adds	r3, #1
 80089c0:	d009      	beq.n	80089d6 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80089c2:	f7fe f8d7 	bl	8006b74 <HAL_GetTick>
 80089c6:	0002      	movs	r2, r0
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d801      	bhi.n	80089d6 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e006      	b.n	80089e4 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80089d6:	4b05      	ldr	r3, [pc, #20]	@ (80089ec <FLASH_WaitForLastOperation+0x8c>)
 80089d8:	691a      	ldr	r2, [r3, #16]
 80089da:	2380      	movs	r3, #128	@ 0x80
 80089dc:	02db      	lsls	r3, r3, #11
 80089de:	4013      	ands	r3, r2
 80089e0:	d1ec      	bne.n	80089bc <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	0018      	movs	r0, r3
 80089e6:	46bd      	mov	sp, r7
 80089e8:	b004      	add	sp, #16
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	40022000 	.word	0x40022000
 80089f0:	0000c3fa 	.word	0x0000c3fa
 80089f4:	0000c3fb 	.word	0x0000c3fb
 80089f8:	20000db8 	.word	0x20000db8

080089fc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80089fc:	b5b0      	push	{r4, r5, r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	603a      	str	r2, [r7, #0]
 8008a06:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008a08:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <FLASH_Program_DoubleWord+0x3c>)
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <FLASH_Program_DoubleWord+0x3c>)
 8008a0e:	2101      	movs	r1, #1
 8008a10:	430a      	orrs	r2, r1
 8008a12:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008a1a:	f3bf 8f6f 	isb	sy
}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	001c      	movs	r4, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	001d      	movs	r5, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	0022      	movs	r2, r4
 8008a2e:	601a      	str	r2, [r3, #0]
}
 8008a30:	46c0      	nop			@ (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b004      	add	sp, #16
 8008a36:	bdb0      	pop	{r4, r5, r7, pc}
 8008a38:	40022000 	.word	0x40022000

08008a3c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008a3c:	b5b0      	push	{r4, r5, r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008a46:	4b35      	ldr	r3, [pc, #212]	@ (8008b1c <HAL_FLASHEx_Erase+0xe0>)
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d101      	bne.n	8008a52 <HAL_FLASHEx_Erase+0x16>
 8008a4e:	2302      	movs	r3, #2
 8008a50:	e05f      	b.n	8008b12 <HAL_FLASHEx_Erase+0xd6>
 8008a52:	4b32      	ldr	r3, [pc, #200]	@ (8008b1c <HAL_FLASHEx_Erase+0xe0>)
 8008a54:	2201      	movs	r2, #1
 8008a56:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008a58:	4b30      	ldr	r3, [pc, #192]	@ (8008b1c <HAL_FLASHEx_Erase+0xe0>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a5e:	250f      	movs	r5, #15
 8008a60:	197c      	adds	r4, r7, r5
 8008a62:	23fa      	movs	r3, #250	@ 0xfa
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	0018      	movs	r0, r3
 8008a68:	f7ff ff7a 	bl	8008960 <FLASH_WaitForLastOperation>
 8008a6c:	0003      	movs	r3, r0
 8008a6e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8008a70:	002c      	movs	r4, r5
 8008a72:	193b      	adds	r3, r7, r4
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d145      	bne.n	8008b06 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2204      	movs	r2, #4
 8008a7e:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b04      	cmp	r3, #4
 8008a86:	d10d      	bne.n	8008aa4 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	0018      	movs	r0, r3
 8008a8e:	f000 f849 	bl	8008b24 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008a92:	193c      	adds	r4, r7, r4
 8008a94:	23fa      	movs	r3, #250	@ 0xfa
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	0018      	movs	r0, r3
 8008a9a:	f7ff ff61 	bl	8008960 <FLASH_WaitForLastOperation>
 8008a9e:	0003      	movs	r3, r0
 8008aa0:	7023      	strb	r3, [r4, #0]
 8008aa2:	e030      	b.n	8008b06 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	4252      	negs	r2, r2
 8008aaa:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	60bb      	str	r3, [r7, #8]
 8008ab2:	e01a      	b.n	8008aea <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	0011      	movs	r1, r2
 8008abc:	0018      	movs	r0, r3
 8008abe:	f000 f845 	bl	8008b4c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ac2:	250f      	movs	r5, #15
 8008ac4:	197c      	adds	r4, r7, r5
 8008ac6:	23fa      	movs	r3, #250	@ 0xfa
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	0018      	movs	r0, r3
 8008acc:	f7ff ff48 	bl	8008960 <FLASH_WaitForLastOperation>
 8008ad0:	0003      	movs	r3, r0
 8008ad2:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8008ad4:	197b      	adds	r3, r7, r5
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	601a      	str	r2, [r3, #0]
          break;
 8008ae2:	e00a      	b.n	8008afa <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60bb      	str	r3, [r7, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	18d3      	adds	r3, r2, r3
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d3dc      	bcc.n	8008ab4 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008afa:	4b09      	ldr	r3, [pc, #36]	@ (8008b20 <HAL_FLASHEx_Erase+0xe4>)
 8008afc:	695a      	ldr	r2, [r3, #20]
 8008afe:	4b08      	ldr	r3, [pc, #32]	@ (8008b20 <HAL_FLASHEx_Erase+0xe4>)
 8008b00:	2102      	movs	r1, #2
 8008b02:	438a      	bics	r2, r1
 8008b04:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_FLASHEx_Erase+0xe0>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008b0c:	230f      	movs	r3, #15
 8008b0e:	18fb      	adds	r3, r7, r3
 8008b10:	781b      	ldrb	r3, [r3, #0]
}
 8008b12:	0018      	movs	r0, r3
 8008b14:	46bd      	mov	sp, r7
 8008b16:	b004      	add	sp, #16
 8008b18:	bdb0      	pop	{r4, r5, r7, pc}
 8008b1a:	46c0      	nop			@ (mov r8, r8)
 8008b1c:	20000db8 	.word	0x20000db8
 8008b20:	40022000 	.word	0x40022000

08008b24 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8008b2c:	4b06      	ldr	r3, [pc, #24]	@ (8008b48 <FLASH_MassErase+0x24>)
 8008b2e:	695a      	ldr	r2, [r3, #20]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	431a      	orrs	r2, r3
 8008b34:	4b04      	ldr	r3, [pc, #16]	@ (8008b48 <FLASH_MassErase+0x24>)
 8008b36:	2180      	movs	r1, #128	@ 0x80
 8008b38:	0249      	lsls	r1, r1, #9
 8008b3a:	430a      	orrs	r2, r1
 8008b3c:	615a      	str	r2, [r3, #20]
}
 8008b3e:	46c0      	nop			@ (mov r8, r8)
 8008b40:	46bd      	mov	sp, r7
 8008b42:	b002      	add	sp, #8
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	40022000 	.word	0x40022000

08008b4c <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8008b56:	4b08      	ldr	r3, [pc, #32]	@ (8008b78 <FLASH_PageErase+0x2c>)
 8008b58:	695b      	ldr	r3, [r3, #20]
 8008b5a:	4a08      	ldr	r2, [pc, #32]	@ (8008b7c <FLASH_PageErase+0x30>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	00da      	lsls	r2, r3, #3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	4b03      	ldr	r3, [pc, #12]	@ (8008b78 <FLASH_PageErase+0x2c>)
 8008b6a:	4905      	ldr	r1, [pc, #20]	@ (8008b80 <FLASH_PageErase+0x34>)
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	615a      	str	r2, [r3, #20]
}
 8008b70:	46c0      	nop			@ (mov r8, r8)
 8008b72:	46bd      	mov	sp, r7
 8008b74:	b004      	add	sp, #16
 8008b76:	bd80      	pop	{r7, pc}
 8008b78:	40022000 	.word	0x40022000
 8008b7c:	ffffe007 	.word	0xffffe007
 8008b80:	00010002 	.word	0x00010002

08008b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b92:	e147      	b.n	8008e24 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2101      	movs	r1, #1
 8008b9a:	697a      	ldr	r2, [r7, #20]
 8008b9c:	4091      	lsls	r1, r2
 8008b9e:	000a      	movs	r2, r1
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d100      	bne.n	8008bac <HAL_GPIO_Init+0x28>
 8008baa:	e138      	b.n	8008e1e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	2203      	movs	r2, #3
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <HAL_GPIO_Init+0x40>
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2203      	movs	r2, #3
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d130      	bne.n	8008c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	2203      	movs	r2, #3
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	0013      	movs	r3, r2
 8008bd4:	43da      	mvns	r2, r3
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	409a      	lsls	r2, r3
 8008be6:	0013      	movs	r3, r2
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	409a      	lsls	r2, r3
 8008c00:	0013      	movs	r3, r2
 8008c02:	43da      	mvns	r2, r3
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	2201      	movs	r2, #1
 8008c12:	401a      	ands	r2, r3
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	409a      	lsls	r2, r3
 8008c18:	0013      	movs	r3, r2
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d017      	beq.n	8008c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	409a      	lsls	r2, r3
 8008c40:	0013      	movs	r3, r2
 8008c42:	43da      	mvns	r2, r3
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	4013      	ands	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	409a      	lsls	r2, r3
 8008c54:	0013      	movs	r3, r2
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2203      	movs	r2, #3
 8008c68:	4013      	ands	r3, r2
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d123      	bne.n	8008cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	08da      	lsrs	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3208      	adds	r2, #8
 8008c76:	0092      	lsls	r2, r2, #2
 8008c78:	58d3      	ldr	r3, [r2, r3]
 8008c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2207      	movs	r2, #7
 8008c80:	4013      	ands	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	220f      	movs	r2, #15
 8008c86:	409a      	lsls	r2, r3
 8008c88:	0013      	movs	r3, r2
 8008c8a:	43da      	mvns	r2, r3
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	2107      	movs	r1, #7
 8008c9a:	400b      	ands	r3, r1
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	409a      	lsls	r2, r3
 8008ca0:	0013      	movs	r3, r2
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	08da      	lsrs	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3208      	adds	r2, #8
 8008cb0:	0092      	lsls	r2, r2, #2
 8008cb2:	6939      	ldr	r1, [r7, #16]
 8008cb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	409a      	lsls	r2, r3
 8008cc4:	0013      	movs	r3, r2
 8008cc6:	43da      	mvns	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	2203      	movs	r2, #3
 8008cd4:	401a      	ands	r2, r3
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	409a      	lsls	r2, r3
 8008cdc:	0013      	movs	r3, r2
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	23c0      	movs	r3, #192	@ 0xc0
 8008cf0:	029b      	lsls	r3, r3, #10
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	d100      	bne.n	8008cf8 <HAL_GPIO_Init+0x174>
 8008cf6:	e092      	b.n	8008e1e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8008cf8:	4a50      	ldr	r2, [pc, #320]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	089b      	lsrs	r3, r3, #2
 8008cfe:	3318      	adds	r3, #24
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	589b      	ldr	r3, [r3, r2]
 8008d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	2203      	movs	r2, #3
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	00db      	lsls	r3, r3, #3
 8008d0e:	220f      	movs	r2, #15
 8008d10:	409a      	lsls	r2, r3
 8008d12:	0013      	movs	r3, r2
 8008d14:	43da      	mvns	r2, r3
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	23a0      	movs	r3, #160	@ 0xa0
 8008d20:	05db      	lsls	r3, r3, #23
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d013      	beq.n	8008d4e <HAL_GPIO_Init+0x1ca>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a45      	ldr	r2, [pc, #276]	@ (8008e40 <HAL_GPIO_Init+0x2bc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d00d      	beq.n	8008d4a <HAL_GPIO_Init+0x1c6>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a44      	ldr	r2, [pc, #272]	@ (8008e44 <HAL_GPIO_Init+0x2c0>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d007      	beq.n	8008d46 <HAL_GPIO_Init+0x1c2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a43      	ldr	r2, [pc, #268]	@ (8008e48 <HAL_GPIO_Init+0x2c4>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d101      	bne.n	8008d42 <HAL_GPIO_Init+0x1be>
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e006      	b.n	8008d50 <HAL_GPIO_Init+0x1cc>
 8008d42:	2305      	movs	r3, #5
 8008d44:	e004      	b.n	8008d50 <HAL_GPIO_Init+0x1cc>
 8008d46:	2302      	movs	r3, #2
 8008d48:	e002      	b.n	8008d50 <HAL_GPIO_Init+0x1cc>
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e000      	b.n	8008d50 <HAL_GPIO_Init+0x1cc>
 8008d4e:	2300      	movs	r3, #0
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	2103      	movs	r1, #3
 8008d54:	400a      	ands	r2, r1
 8008d56:	00d2      	lsls	r2, r2, #3
 8008d58:	4093      	lsls	r3, r2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008d60:	4936      	ldr	r1, [pc, #216]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	089b      	lsrs	r3, r3, #2
 8008d66:	3318      	adds	r3, #24
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d6e:	4b33      	ldr	r3, [pc, #204]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	43da      	mvns	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	2380      	movs	r3, #128	@ 0x80
 8008d84:	035b      	lsls	r3, r3, #13
 8008d86:	4013      	ands	r3, r2
 8008d88:	d003      	beq.n	8008d92 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8008d8a:	693a      	ldr	r2, [r7, #16]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d92:	4b2a      	ldr	r3, [pc, #168]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008d98:	4b28      	ldr	r3, [pc, #160]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	43da      	mvns	r2, r3
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	4013      	ands	r3, r2
 8008da6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	685a      	ldr	r2, [r3, #4]
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	039b      	lsls	r3, r3, #14
 8008db0:	4013      	ands	r3, r2
 8008db2:	d003      	beq.n	8008dbc <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008dc2:	4a1e      	ldr	r2, [pc, #120]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008dc4:	2384      	movs	r3, #132	@ 0x84
 8008dc6:	58d3      	ldr	r3, [r2, r3]
 8008dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	43da      	mvns	r2, r3
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	2380      	movs	r3, #128	@ 0x80
 8008dda:	029b      	lsls	r3, r3, #10
 8008ddc:	4013      	ands	r3, r2
 8008dde:	d003      	beq.n	8008de8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008de8:	4914      	ldr	r1, [pc, #80]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008dea:	2284      	movs	r2, #132	@ 0x84
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8008df0:	4a12      	ldr	r2, [pc, #72]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008df2:	2380      	movs	r3, #128	@ 0x80
 8008df4:	58d3      	ldr	r3, [r2, r3]
 8008df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	43da      	mvns	r2, r3
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	4013      	ands	r3, r2
 8008e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685a      	ldr	r2, [r3, #4]
 8008e06:	2380      	movs	r3, #128	@ 0x80
 8008e08:	025b      	lsls	r3, r3, #9
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	d003      	beq.n	8008e16 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e16:	4909      	ldr	r1, [pc, #36]	@ (8008e3c <HAL_GPIO_Init+0x2b8>)
 8008e18:	2280      	movs	r2, #128	@ 0x80
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	3301      	adds	r3, #1
 8008e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	40da      	lsrs	r2, r3
 8008e2c:	1e13      	subs	r3, r2, #0
 8008e2e:	d000      	beq.n	8008e32 <HAL_GPIO_Init+0x2ae>
 8008e30:	e6b0      	b.n	8008b94 <HAL_GPIO_Init+0x10>
  }
}
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	46c0      	nop			@ (mov r8, r8)
 8008e36:	46bd      	mov	sp, r7
 8008e38:	b006      	add	sp, #24
 8008e3a:	bd80      	pop	{r7, pc}
 8008e3c:	40021800 	.word	0x40021800
 8008e40:	50000400 	.word	0x50000400
 8008e44:	50000800 	.word	0x50000800
 8008e48:	50000c00 	.word	0x50000c00

08008e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b084      	sub	sp, #16
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	000a      	movs	r2, r1
 8008e56:	1cbb      	adds	r3, r7, #2
 8008e58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	1cba      	adds	r2, r7, #2
 8008e60:	8812      	ldrh	r2, [r2, #0]
 8008e62:	4013      	ands	r3, r2
 8008e64:	d004      	beq.n	8008e70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008e66:	230f      	movs	r3, #15
 8008e68:	18fb      	adds	r3, r7, r3
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	e003      	b.n	8008e78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e70:	230f      	movs	r3, #15
 8008e72:	18fb      	adds	r3, r7, r3
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008e78:	230f      	movs	r3, #15
 8008e7a:	18fb      	adds	r3, r7, r3
 8008e7c:	781b      	ldrb	r3, [r3, #0]
}
 8008e7e:	0018      	movs	r0, r3
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b004      	add	sp, #16
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b082      	sub	sp, #8
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
 8008e8e:	0008      	movs	r0, r1
 8008e90:	0011      	movs	r1, r2
 8008e92:	1cbb      	adds	r3, r7, #2
 8008e94:	1c02      	adds	r2, r0, #0
 8008e96:	801a      	strh	r2, [r3, #0]
 8008e98:	1c7b      	adds	r3, r7, #1
 8008e9a:	1c0a      	adds	r2, r1, #0
 8008e9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e9e:	1c7b      	adds	r3, r7, #1
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ea6:	1cbb      	adds	r3, r7, #2
 8008ea8:	881a      	ldrh	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008eae:	e003      	b.n	8008eb8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008eb0:	1cbb      	adds	r3, r7, #2
 8008eb2:	881a      	ldrh	r2, [r3, #0]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008eb8:	46c0      	nop			@ (mov r8, r8)
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b002      	add	sp, #8
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	0002      	movs	r2, r0
 8008ec8:	1dbb      	adds	r3, r7, #6
 8008eca:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008ecc:	4b10      	ldr	r3, [pc, #64]	@ (8008f10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	1dba      	adds	r2, r7, #6
 8008ed2:	8812      	ldrh	r2, [r2, #0]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	d008      	beq.n	8008eea <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8008f10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008eda:	1dba      	adds	r2, r7, #6
 8008edc:	8812      	ldrh	r2, [r2, #0]
 8008ede:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8008ee0:	1dbb      	adds	r3, r7, #6
 8008ee2:	881b      	ldrh	r3, [r3, #0]
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7fb f8f1 	bl	80040cc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008eea:	4b09      	ldr	r3, [pc, #36]	@ (8008f10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	1dba      	adds	r2, r7, #6
 8008ef0:	8812      	ldrh	r2, [r2, #0]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	d008      	beq.n	8008f08 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008ef6:	4b06      	ldr	r3, [pc, #24]	@ (8008f10 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008ef8:	1dba      	adds	r2, r7, #6
 8008efa:	8812      	ldrh	r2, [r2, #0]
 8008efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8008efe:	1dbb      	adds	r3, r7, #6
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7fb f8b8 	bl	8004078 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008f08:	46c0      	nop			@ (mov r8, r8)
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	b002      	add	sp, #8
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	40021800 	.word	0x40021800

08008f14 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b084      	sub	sp, #16
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8008f22:	2301      	movs	r3, #1
 8008f24:	e097      	b.n	8009056 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2236      	movs	r2, #54	@ 0x36
 8008f2a:	5c9b      	ldrb	r3, [r3, r2]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d113      	bne.n	8008f5a <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2235      	movs	r2, #53	@ 0x35
 8008f36:	2100      	movs	r1, #0
 8008f38:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 fa8f 	bl	8009460 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d102      	bne.n	8008f50 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a44      	ldr	r2, [pc, #272]	@ (8009060 <HAL_LPTIM_Init+0x14c>)
 8008f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	0010      	movs	r0, r2
 8008f58:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2236      	movs	r2, #54	@ 0x36
 8008f5e:	2102      	movs	r1, #2
 8008f60:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d005      	beq.n	8008f7e <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f76:	2380      	movs	r3, #128	@ 0x80
 8008f78:	041b      	lsls	r3, r3, #16
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d103      	bne.n	8008f86 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	221e      	movs	r2, #30
 8008f82:	4393      	bics	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	4a36      	ldr	r2, [pc, #216]	@ (8009064 <HAL_LPTIM_Init+0x150>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a35      	ldr	r2, [pc, #212]	@ (8009068 <HAL_LPTIM_Init+0x154>)
 8008f94:	4013      	ands	r3, r2
 8008f96:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4a34      	ldr	r2, [pc, #208]	@ (800906c <HAL_LPTIM_Init+0x158>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008fa8:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8008fae:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008fb4:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008fba:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d107      	bne.n	8008fda <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d005      	beq.n	8008fee <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008fe6:	2380      	movs	r3, #128	@ 0x80
 8008fe8:	041b      	lsls	r3, r3, #16
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d107      	bne.n	8008ffe <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	4a18      	ldr	r2, [pc, #96]	@ (8009064 <HAL_LPTIM_Init+0x150>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d00a      	beq.n	800901e <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009010:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8009016:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4a11      	ldr	r2, [pc, #68]	@ (8009070 <HAL_LPTIM_Init+0x15c>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d108      	bne.n	8009042 <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	625a      	str	r2, [r3, #36]	@ 0x24
 8009040:	e004      	b.n	800904c <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800904a:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2236      	movs	r2, #54	@ 0x36
 8009050:	2101      	movs	r1, #1
 8009052:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	0018      	movs	r0, r3
 8009058:	46bd      	mov	sp, r7
 800905a:	b004      	add	sp, #16
 800905c:	bd80      	pop	{r7, pc}
 800905e:	46c0      	nop			@ (mov r8, r8)
 8009060:	080059cd 	.word	0x080059cd
 8009064:	0000ffff 	.word	0x0000ffff
 8009068:	ffff1f3f 	.word	0xffff1f3f
 800906c:	ff19f1fe 	.word	0xff19f1fe
 8009070:	40007c00 	.word	0x40007c00

08009074 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2236      	movs	r2, #54	@ 0x36
 8009084:	2102      	movs	r1, #2
 8009086:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68da      	ldr	r2, [r3, #12]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2180      	movs	r1, #128	@ 0x80
 8009094:	0349      	lsls	r1, r1, #13
 8009096:	430a      	orrs	r2, r1
 8009098:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	691a      	ldr	r2, [r3, #16]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2101      	movs	r1, #1
 80090a6:	430a      	orrs	r2, r1
 80090a8:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	2210      	movs	r2, #16
 80090b0:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2110      	movs	r1, #16
 80090be:	0018      	movs	r0, r3
 80090c0:	f000 f9fa 	bl	80094b8 <LPTIM_WaitForFlag>
 80090c4:	0003      	movs	r3, r0
 80090c6:	2b03      	cmp	r3, #3
 80090c8:	d101      	bne.n	80090ce <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e060      	b.n	8009190 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2208      	movs	r2, #8
 80090d4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2108      	movs	r1, #8
 80090e2:	0018      	movs	r0, r3
 80090e4:	f000 f9e8 	bl	80094b8 <LPTIM_WaitForFlag>
 80090e8:	0003      	movs	r3, r0
 80090ea:	2b03      	cmp	r3, #3
 80090ec:	d101      	bne.n	80090f2 <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e04e      	b.n	8009190 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	0018      	movs	r0, r3
 80090f6:	f000 fa17 	bl	8009528 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	0018      	movs	r0, r3
 80090fe:	f000 f9a3 	bl	8009448 <HAL_LPTIM_GetState>
 8009102:	0003      	movs	r3, r0
 8009104:	2b03      	cmp	r3, #3
 8009106:	d101      	bne.n	800910c <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8009108:	2303      	movs	r3, #3
 800910a:	e041      	b.n	8009190 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2110      	movs	r1, #16
 8009118:	430a      	orrs	r2, r1
 800911a:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	689a      	ldr	r2, [r3, #8]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	2108      	movs	r1, #8
 8009128:	430a      	orrs	r2, r1
 800912a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2102      	movs	r1, #2
 8009138:	430a      	orrs	r2, r1
 800913a:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	2101      	movs	r1, #1
 8009148:	430a      	orrs	r2, r1
 800914a:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	695b      	ldr	r3, [r3, #20]
 8009150:	4a11      	ldr	r2, [pc, #68]	@ (8009198 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d007      	beq.n	8009166 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2104      	movs	r1, #4
 8009162:	430a      	orrs	r2, r1
 8009164:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	691a      	ldr	r2, [r3, #16]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2101      	movs	r1, #1
 8009172:	430a      	orrs	r2, r1
 8009174:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2102      	movs	r1, #2
 8009182:	430a      	orrs	r2, r1
 8009184:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	2236      	movs	r2, #54	@ 0x36
 800918a:	2101      	movs	r1, #1
 800918c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	0018      	movs	r0, r3
 8009192:	46bd      	mov	sp, r7
 8009194:	b004      	add	sp, #16
 8009196:	bd80      	pop	{r7, pc}
 8009198:	0000ffff 	.word	0x0000ffff

0800919c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	2201      	movs	r2, #1
 80091ac:	4013      	ands	r3, r2
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d10f      	bne.n	80091d2 <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	2201      	movs	r2, #1
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d108      	bne.n	80091d2 <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2201      	movs	r2, #1
 80091c6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	0010      	movs	r0, r2
 80091d0:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2202      	movs	r2, #2
 80091da:	4013      	ands	r3, r2
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d10f      	bne.n	8009200 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2202      	movs	r2, #2
 80091e8:	4013      	ands	r3, r2
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d108      	bne.n	8009200 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2202      	movs	r2, #2
 80091f4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	0010      	movs	r0, r2
 80091fe:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2204      	movs	r2, #4
 8009208:	4013      	ands	r3, r2
 800920a:	2b04      	cmp	r3, #4
 800920c:	d10f      	bne.n	800922e <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	2204      	movs	r2, #4
 8009216:	4013      	ands	r3, r2
 8009218:	2b04      	cmp	r3, #4
 800921a:	d108      	bne.n	800922e <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2204      	movs	r2, #4
 8009222:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	0010      	movs	r0, r2
 800922c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2208      	movs	r2, #8
 8009236:	4013      	ands	r3, r2
 8009238:	2b08      	cmp	r3, #8
 800923a:	d10f      	bne.n	800925c <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	2208      	movs	r2, #8
 8009244:	4013      	ands	r3, r2
 8009246:	2b08      	cmp	r3, #8
 8009248:	d108      	bne.n	800925c <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2208      	movs	r2, #8
 8009250:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	0010      	movs	r0, r2
 800925a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2210      	movs	r2, #16
 8009264:	4013      	ands	r3, r2
 8009266:	2b10      	cmp	r3, #16
 8009268:	d10f      	bne.n	800928a <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	2210      	movs	r2, #16
 8009272:	4013      	ands	r3, r2
 8009274:	2b10      	cmp	r3, #16
 8009276:	d108      	bne.n	800928a <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2210      	movs	r2, #16
 800927e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	0010      	movs	r0, r2
 8009288:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2220      	movs	r2, #32
 8009292:	4013      	ands	r3, r2
 8009294:	2b20      	cmp	r3, #32
 8009296:	d10f      	bne.n	80092b8 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	2220      	movs	r2, #32
 80092a0:	4013      	ands	r3, r2
 80092a2:	2b20      	cmp	r3, #32
 80092a4:	d108      	bne.n	80092b8 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2220      	movs	r2, #32
 80092ac:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	0010      	movs	r0, r2
 80092b6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2240      	movs	r2, #64	@ 0x40
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b40      	cmp	r3, #64	@ 0x40
 80092c4:	d10f      	bne.n	80092e6 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	2240      	movs	r2, #64	@ 0x40
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b40      	cmp	r3, #64	@ 0x40
 80092d2:	d108      	bne.n	80092e6 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2240      	movs	r2, #64	@ 0x40
 80092da:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	0010      	movs	r0, r2
 80092e4:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80092e6:	46c0      	nop			@ (mov r8, r8)
 80092e8:	46bd      	mov	sp, r7
 80092ea:	b002      	add	sp, #8
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80092f6:	46c0      	nop			@ (mov r8, r8)
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b002      	add	sp, #8
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b082      	sub	sp, #8
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8009306:	46c0      	nop			@ (mov r8, r8)
 8009308:	46bd      	mov	sp, r7
 800930a:	b002      	add	sp, #8
 800930c:	bd80      	pop	{r7, pc}

0800930e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b082      	sub	sp, #8
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009316:	46c0      	nop			@ (mov r8, r8)
 8009318:	46bd      	mov	sp, r7
 800931a:	b002      	add	sp, #8
 800931c:	bd80      	pop	{r7, pc}

0800931e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800931e:	b580      	push	{r7, lr}
 8009320:	b082      	sub	sp, #8
 8009322:	af00      	add	r7, sp, #0
 8009324:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009326:	46c0      	nop			@ (mov r8, r8)
 8009328:	46bd      	mov	sp, r7
 800932a:	b002      	add	sp, #8
 800932c:	bd80      	pop	{r7, pc}

0800932e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b082      	sub	sp, #8
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	46bd      	mov	sp, r7
 800933a:	b002      	add	sp, #8
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009346:	46c0      	nop			@ (mov r8, r8)
 8009348:	46bd      	mov	sp, r7
 800934a:	b002      	add	sp, #8
 800934c:	bd80      	pop	{r7, pc}

0800934e <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800934e:	b580      	push	{r7, lr}
 8009350:	b082      	sub	sp, #8
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009356:	46c0      	nop			@ (mov r8, r8)
 8009358:	46bd      	mov	sp, r7
 800935a:	b002      	add	sp, #8
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	607a      	str	r2, [r7, #4]
 800936a:	230b      	movs	r3, #11
 800936c:	18fb      	adds	r3, r7, r3
 800936e:	1c0a      	adds	r2, r1, #0
 8009370:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2317      	movs	r3, #23
 8009374:	18fb      	adds	r3, r7, r3
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8009380:	2301      	movs	r3, #1
 8009382:	e05a      	b.n	800943a <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2236      	movs	r2, #54	@ 0x36
 8009388:	5c9b      	ldrb	r3, [r3, r2]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	2b01      	cmp	r3, #1
 800938e:	d132      	bne.n	80093f6 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8009390:	230b      	movs	r3, #11
 8009392:	18fb      	adds	r3, r7, r3
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	2b08      	cmp	r3, #8
 8009398:	d828      	bhi.n	80093ec <HAL_LPTIM_RegisterCallback+0x8c>
 800939a:	009a      	lsls	r2, r3, #2
 800939c:	4b29      	ldr	r3, [pc, #164]	@ (8009444 <HAL_LPTIM_RegisterCallback+0xe4>)
 800939e:	18d3      	adds	r3, r2, r3
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80093aa:	e043      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80093b2:	e03f      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80093ba:	e03b      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80093c2:	e037      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80093ca:	e033      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80093d2:	e02f      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80093da:	e02b      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80093e2:	e027      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80093ea:	e023      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 80093ec:	2317      	movs	r3, #23
 80093ee:	18fb      	adds	r3, r7, r3
 80093f0:	2201      	movs	r2, #1
 80093f2:	701a      	strb	r2, [r3, #0]
        break;
 80093f4:	e01e      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2236      	movs	r2, #54	@ 0x36
 80093fa:	5c9b      	ldrb	r3, [r3, r2]
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d114      	bne.n	800942c <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8009402:	230b      	movs	r3, #11
 8009404:	18fb      	adds	r3, r7, r3
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <HAL_LPTIM_RegisterCallback+0xb2>
 800940c:	2b01      	cmp	r3, #1
 800940e:	d004      	beq.n	800941a <HAL_LPTIM_RegisterCallback+0xba>
 8009410:	e007      	b.n	8009422 <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8009418:	e00c      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8009420:	e008      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8009422:	2317      	movs	r3, #23
 8009424:	18fb      	adds	r3, r7, r3
 8009426:	2201      	movs	r2, #1
 8009428:	701a      	strb	r2, [r3, #0]
        break;
 800942a:	e003      	b.n	8009434 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800942c:	2317      	movs	r3, #23
 800942e:	18fb      	adds	r3, r7, r3
 8009430:	2201      	movs	r2, #1
 8009432:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8009434:	2317      	movs	r3, #23
 8009436:	18fb      	adds	r3, r7, r3
 8009438:	781b      	ldrb	r3, [r3, #0]
}
 800943a:	0018      	movs	r0, r3
 800943c:	46bd      	mov	sp, r7
 800943e:	b006      	add	sp, #24
 8009440:	bd80      	pop	{r7, pc}
 8009442:	46c0      	nop			@ (mov r8, r8)
 8009444:	0800eac8 	.word	0x0800eac8

08009448 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2236      	movs	r2, #54	@ 0x36
 8009454:	5c9b      	ldrb	r3, [r3, r2]
 8009456:	b2db      	uxtb	r3, r3
}
 8009458:	0018      	movs	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	b002      	add	sp, #8
 800945e:	bd80      	pop	{r7, pc}

08009460 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a0c      	ldr	r2, [pc, #48]	@ (800949c <LPTIM_ResetCallback+0x3c>)
 800946c:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a0b      	ldr	r2, [pc, #44]	@ (80094a0 <LPTIM_ResetCallback+0x40>)
 8009472:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4a0b      	ldr	r2, [pc, #44]	@ (80094a4 <LPTIM_ResetCallback+0x44>)
 8009478:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a0a      	ldr	r2, [pc, #40]	@ (80094a8 <LPTIM_ResetCallback+0x48>)
 800947e:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a0a      	ldr	r2, [pc, #40]	@ (80094ac <LPTIM_ResetCallback+0x4c>)
 8009484:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a09      	ldr	r2, [pc, #36]	@ (80094b0 <LPTIM_ResetCallback+0x50>)
 800948a:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	4a09      	ldr	r2, [pc, #36]	@ (80094b4 <LPTIM_ResetCallback+0x54>)
 8009490:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8009492:	46c0      	nop			@ (mov r8, r8)
 8009494:	46bd      	mov	sp, r7
 8009496:	b002      	add	sp, #8
 8009498:	bd80      	pop	{r7, pc}
 800949a:	46c0      	nop			@ (mov r8, r8)
 800949c:	080092ef 	.word	0x080092ef
 80094a0:	080092ff 	.word	0x080092ff
 80094a4:	0800930f 	.word	0x0800930f
 80094a8:	0800931f 	.word	0x0800931f
 80094ac:	0800932f 	.word	0x0800932f
 80094b0:	0800933f 	.word	0x0800933f
 80094b4:	0800934f 	.word	0x0800934f

080094b8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80094c2:	230f      	movs	r3, #15
 80094c4:	18fb      	adds	r3, r7, r3
 80094c6:	2200      	movs	r2, #0
 80094c8:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80094ca:	4b15      	ldr	r3, [pc, #84]	@ (8009520 <LPTIM_WaitForFlag+0x68>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4915      	ldr	r1, [pc, #84]	@ (8009524 <LPTIM_WaitForFlag+0x6c>)
 80094d0:	0018      	movs	r0, r3
 80094d2:	f7f6 fe19 	bl	8000108 <__udivsi3>
 80094d6:	0003      	movs	r3, r0
 80094d8:	001a      	movs	r2, r3
 80094da:	0013      	movs	r3, r2
 80094dc:	015b      	lsls	r3, r3, #5
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	189b      	adds	r3, r3, r2
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3b01      	subs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d103      	bne.n	80094fc <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80094f4:	230f      	movs	r3, #15
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	2203      	movs	r2, #3
 80094fa:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4013      	ands	r3, r2
 8009506:	683a      	ldr	r2, [r7, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d002      	beq.n	8009512 <LPTIM_WaitForFlag+0x5a>
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1ea      	bne.n	80094e8 <LPTIM_WaitForFlag+0x30>

  return result;
 8009512:	230f      	movs	r3, #15
 8009514:	18fb      	adds	r3, r7, r3
 8009516:	781b      	ldrb	r3, [r3, #0]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b004      	add	sp, #16
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2000044c 	.word	0x2000044c
 8009524:	00004e20 	.word	0x00004e20

08009528 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08c      	sub	sp, #48	@ 0x30
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009534:	f3ef 8310 	mrs	r3, PRIMASK
 8009538:	60fb      	str	r3, [r7, #12]
  return(result);
 800953a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800953c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800953e:	2301      	movs	r3, #1
 8009540:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	f383 8810 	msr	PRIMASK, r3
}
 8009548:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a72      	ldr	r2, [pc, #456]	@ (8009718 <LPTIM_Disable+0x1f0>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d003      	beq.n	800955c <LPTIM_Disable+0x34>
 8009554:	4a71      	ldr	r2, [pc, #452]	@ (800971c <LPTIM_Disable+0x1f4>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d007      	beq.n	800956a <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800955a:	e00d      	b.n	8009578 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800955c:	4b70      	ldr	r3, [pc, #448]	@ (8009720 <LPTIM_Disable+0x1f8>)
 800955e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009560:	23c0      	movs	r3, #192	@ 0xc0
 8009562:	031b      	lsls	r3, r3, #12
 8009564:	4013      	ands	r3, r2
 8009566:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8009568:	e006      	b.n	8009578 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800956a:	4b6d      	ldr	r3, [pc, #436]	@ (8009720 <LPTIM_Disable+0x1f8>)
 800956c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800956e:	23c0      	movs	r3, #192	@ 0xc0
 8009570:	039b      	lsls	r3, r3, #14
 8009572:	4013      	ands	r3, r2
 8009574:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8009576:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800959e:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a5c      	ldr	r2, [pc, #368]	@ (8009718 <LPTIM_Disable+0x1f0>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d003      	beq.n	80095b2 <LPTIM_Disable+0x8a>
 80095aa:	4a5c      	ldr	r2, [pc, #368]	@ (800971c <LPTIM_Disable+0x1f4>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d00e      	beq.n	80095ce <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80095b0:	e01b      	b.n	80095ea <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80095b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b6:	4b5a      	ldr	r3, [pc, #360]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095b8:	2180      	movs	r1, #128	@ 0x80
 80095ba:	0609      	lsls	r1, r1, #24
 80095bc:	430a      	orrs	r2, r1
 80095be:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80095c0:	4b57      	ldr	r3, [pc, #348]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095c4:	4b56      	ldr	r3, [pc, #344]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095c6:	0052      	lsls	r2, r2, #1
 80095c8:	0852      	lsrs	r2, r2, #1
 80095ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80095cc:	e00d      	b.n	80095ea <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80095ce:	4b54      	ldr	r3, [pc, #336]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d2:	4b53      	ldr	r3, [pc, #332]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095d4:	2180      	movs	r1, #128	@ 0x80
 80095d6:	05c9      	lsls	r1, r1, #23
 80095d8:	430a      	orrs	r2, r1
 80095da:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80095dc:	4b50      	ldr	r3, [pc, #320]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e0:	4b4f      	ldr	r3, [pc, #316]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80095e2:	4950      	ldr	r1, [pc, #320]	@ (8009724 <LPTIM_Disable+0x1fc>)
 80095e4:	400a      	ands	r2, r1
 80095e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80095e8:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <LPTIM_Disable+0xd0>
 80095f0:	69bb      	ldr	r3, [r7, #24]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d100      	bne.n	80095f8 <LPTIM_Disable+0xd0>
 80095f6:	e071      	b.n	80096dc <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a46      	ldr	r2, [pc, #280]	@ (8009718 <LPTIM_Disable+0x1f0>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d003      	beq.n	800960a <LPTIM_Disable+0xe2>
 8009602:	4a46      	ldr	r2, [pc, #280]	@ (800971c <LPTIM_Disable+0x1f4>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8009608:	e00d      	b.n	8009626 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800960a:	4b45      	ldr	r3, [pc, #276]	@ (8009720 <LPTIM_Disable+0x1f8>)
 800960c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800960e:	4b44      	ldr	r3, [pc, #272]	@ (8009720 <LPTIM_Disable+0x1f8>)
 8009610:	4945      	ldr	r1, [pc, #276]	@ (8009728 <LPTIM_Disable+0x200>)
 8009612:	400a      	ands	r2, r1
 8009614:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009616:	e006      	b.n	8009626 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8009618:	4b41      	ldr	r3, [pc, #260]	@ (8009720 <LPTIM_Disable+0x1f8>)
 800961a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800961c:	4b40      	ldr	r3, [pc, #256]	@ (8009720 <LPTIM_Disable+0x1f8>)
 800961e:	4943      	ldr	r1, [pc, #268]	@ (800972c <LPTIM_Disable+0x204>)
 8009620:	400a      	ands	r2, r1
 8009622:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8009624:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01b      	beq.n	8009664 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691a      	ldr	r2, [r3, #16]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2101      	movs	r1, #1
 8009638:	430a      	orrs	r2, r1
 800963a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69fa      	ldr	r2, [r7, #28]
 8009642:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2108      	movs	r1, #8
 8009648:	0018      	movs	r0, r3
 800964a:	f7ff ff35 	bl	80094b8 <LPTIM_WaitForFlag>
 800964e:	0003      	movs	r3, r0
 8009650:	2b03      	cmp	r3, #3
 8009652:	d103      	bne.n	800965c <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2236      	movs	r2, #54	@ 0x36
 8009658:	2103      	movs	r1, #3
 800965a:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2208      	movs	r2, #8
 8009662:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01b      	beq.n	80096a2 <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691a      	ldr	r2, [r3, #16]
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2101      	movs	r1, #1
 8009676:	430a      	orrs	r2, r1
 8009678:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2110      	movs	r1, #16
 8009686:	0018      	movs	r0, r3
 8009688:	f7ff ff16 	bl	80094b8 <LPTIM_WaitForFlag>
 800968c:	0003      	movs	r3, r0
 800968e:	2b03      	cmp	r3, #3
 8009690:	d103      	bne.n	800969a <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2236      	movs	r2, #54	@ 0x36
 8009696:	2103      	movs	r1, #3
 8009698:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2210      	movs	r2, #16
 80096a0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009718 <LPTIM_Disable+0x1f0>)
 80096a8:	4293      	cmp	r3, r2
 80096aa:	d003      	beq.n	80096b4 <LPTIM_Disable+0x18c>
 80096ac:	4a1b      	ldr	r2, [pc, #108]	@ (800971c <LPTIM_Disable+0x1f4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00a      	beq.n	80096c8 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80096b2:	e013      	b.n	80096dc <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80096b4:	4b1a      	ldr	r3, [pc, #104]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80096b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009728 <LPTIM_Disable+0x200>)
 80096ba:	4013      	ands	r3, r2
 80096bc:	0019      	movs	r1, r3
 80096be:	4b18      	ldr	r3, [pc, #96]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80096c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096c2:	430a      	orrs	r2, r1
 80096c4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80096c6:	e009      	b.n	80096dc <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80096c8:	4b15      	ldr	r3, [pc, #84]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80096ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096cc:	4a17      	ldr	r2, [pc, #92]	@ (800972c <LPTIM_Disable+0x204>)
 80096ce:	4013      	ands	r3, r2
 80096d0:	0019      	movs	r1, r3
 80096d2:	4b13      	ldr	r3, [pc, #76]	@ (8009720 <LPTIM_Disable+0x1f8>)
 80096d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d6:	430a      	orrs	r2, r1
 80096d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80096da:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	691a      	ldr	r2, [r3, #16]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2101      	movs	r1, #1
 80096e8:	438a      	bics	r2, r1
 80096ea:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096f2:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a3a      	ldr	r2, [r7, #32]
 80096fa:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	625a      	str	r2, [r3, #36]	@ 0x24
 8009704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009706:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f383 8810 	msr	PRIMASK, r3
}
 800970e:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009710:	46c0      	nop			@ (mov r8, r8)
 8009712:	46bd      	mov	sp, r7
 8009714:	b00c      	add	sp, #48	@ 0x30
 8009716:	bd80      	pop	{r7, pc}
 8009718:	40007c00 	.word	0x40007c00
 800971c:	40009400 	.word	0x40009400
 8009720:	40021000 	.word	0x40021000
 8009724:	bfffffff 	.word	0xbfffffff
 8009728:	fff3ffff 	.word	0xfff3ffff
 800972c:	ffcfffff 	.word	0xffcfffff

08009730 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8009738:	4b19      	ldr	r3, [pc, #100]	@ (80097a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a19      	ldr	r2, [pc, #100]	@ (80097a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800973e:	4013      	ands	r3, r2
 8009740:	0019      	movs	r1, r3
 8009742:	4b17      	ldr	r3, [pc, #92]	@ (80097a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	430a      	orrs	r2, r1
 8009748:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	2380      	movs	r3, #128	@ 0x80
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	429a      	cmp	r2, r3
 8009752:	d11f      	bne.n	8009794 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8009754:	4b14      	ldr	r3, [pc, #80]	@ (80097a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	0013      	movs	r3, r2
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	189b      	adds	r3, r3, r2
 800975e:	005b      	lsls	r3, r3, #1
 8009760:	4912      	ldr	r1, [pc, #72]	@ (80097ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8009762:	0018      	movs	r0, r3
 8009764:	f7f6 fcd0 	bl	8000108 <__udivsi3>
 8009768:	0003      	movs	r3, r0
 800976a:	3301      	adds	r3, #1
 800976c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800976e:	e008      	b.n	8009782 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d003      	beq.n	800977e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3b01      	subs	r3, #1
 800977a:	60fb      	str	r3, [r7, #12]
 800977c:	e001      	b.n	8009782 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e009      	b.n	8009796 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009782:	4b07      	ldr	r3, [pc, #28]	@ (80097a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009784:	695a      	ldr	r2, [r3, #20]
 8009786:	2380      	movs	r3, #128	@ 0x80
 8009788:	00db      	lsls	r3, r3, #3
 800978a:	401a      	ands	r2, r3
 800978c:	2380      	movs	r3, #128	@ 0x80
 800978e:	00db      	lsls	r3, r3, #3
 8009790:	429a      	cmp	r2, r3
 8009792:	d0ed      	beq.n	8009770 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	0018      	movs	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	b004      	add	sp, #16
 800979c:	bd80      	pop	{r7, pc}
 800979e:	46c0      	nop			@ (mov r8, r8)
 80097a0:	40007000 	.word	0x40007000
 80097a4:	fffff9ff 	.word	0xfffff9ff
 80097a8:	2000044c 	.word	0x2000044c
 80097ac:	000f4240 	.word	0x000f4240

080097b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80097b4:	4b03      	ldr	r3, [pc, #12]	@ (80097c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	23e0      	movs	r3, #224	@ 0xe0
 80097ba:	01db      	lsls	r3, r3, #7
 80097bc:	4013      	ands	r3, r2
}
 80097be:	0018      	movs	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	40021000 	.word	0x40021000

080097c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e2fe      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2201      	movs	r2, #1
 80097e0:	4013      	ands	r3, r2
 80097e2:	d100      	bne.n	80097e6 <HAL_RCC_OscConfig+0x1e>
 80097e4:	e07c      	b.n	80098e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097e6:	4bc3      	ldr	r3, [pc, #780]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	2238      	movs	r2, #56	@ 0x38
 80097ec:	4013      	ands	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80097f0:	4bc0      	ldr	r3, [pc, #768]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	2203      	movs	r2, #3
 80097f6:	4013      	ands	r3, r2
 80097f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d102      	bne.n	8009806 <HAL_RCC_OscConfig+0x3e>
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2b03      	cmp	r3, #3
 8009804:	d002      	beq.n	800980c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8009806:	69bb      	ldr	r3, [r7, #24]
 8009808:	2b08      	cmp	r3, #8
 800980a:	d10b      	bne.n	8009824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800980c:	4bb9      	ldr	r3, [pc, #740]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	2380      	movs	r3, #128	@ 0x80
 8009812:	029b      	lsls	r3, r3, #10
 8009814:	4013      	ands	r3, r2
 8009816:	d062      	beq.n	80098de <HAL_RCC_OscConfig+0x116>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d15e      	bne.n	80098de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e2d9      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	2380      	movs	r3, #128	@ 0x80
 800982a:	025b      	lsls	r3, r3, #9
 800982c:	429a      	cmp	r2, r3
 800982e:	d107      	bne.n	8009840 <HAL_RCC_OscConfig+0x78>
 8009830:	4bb0      	ldr	r3, [pc, #704]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	4baf      	ldr	r3, [pc, #700]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009836:	2180      	movs	r1, #128	@ 0x80
 8009838:	0249      	lsls	r1, r1, #9
 800983a:	430a      	orrs	r2, r1
 800983c:	601a      	str	r2, [r3, #0]
 800983e:	e020      	b.n	8009882 <HAL_RCC_OscConfig+0xba>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	685a      	ldr	r2, [r3, #4]
 8009844:	23a0      	movs	r3, #160	@ 0xa0
 8009846:	02db      	lsls	r3, r3, #11
 8009848:	429a      	cmp	r2, r3
 800984a:	d10e      	bne.n	800986a <HAL_RCC_OscConfig+0xa2>
 800984c:	4ba9      	ldr	r3, [pc, #676]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	4ba8      	ldr	r3, [pc, #672]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009852:	2180      	movs	r1, #128	@ 0x80
 8009854:	02c9      	lsls	r1, r1, #11
 8009856:	430a      	orrs	r2, r1
 8009858:	601a      	str	r2, [r3, #0]
 800985a:	4ba6      	ldr	r3, [pc, #664]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4ba5      	ldr	r3, [pc, #660]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009860:	2180      	movs	r1, #128	@ 0x80
 8009862:	0249      	lsls	r1, r1, #9
 8009864:	430a      	orrs	r2, r1
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e00b      	b.n	8009882 <HAL_RCC_OscConfig+0xba>
 800986a:	4ba2      	ldr	r3, [pc, #648]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	4ba1      	ldr	r3, [pc, #644]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009870:	49a1      	ldr	r1, [pc, #644]	@ (8009af8 <HAL_RCC_OscConfig+0x330>)
 8009872:	400a      	ands	r2, r1
 8009874:	601a      	str	r2, [r3, #0]
 8009876:	4b9f      	ldr	r3, [pc, #636]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	4b9e      	ldr	r3, [pc, #632]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800987c:	499f      	ldr	r1, [pc, #636]	@ (8009afc <HAL_RCC_OscConfig+0x334>)
 800987e:	400a      	ands	r2, r1
 8009880:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d014      	beq.n	80098b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800988a:	f7fd f973 	bl	8006b74 <HAL_GetTick>
 800988e:	0003      	movs	r3, r0
 8009890:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009892:	e008      	b.n	80098a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009894:	f7fd f96e 	bl	8006b74 <HAL_GetTick>
 8009898:	0002      	movs	r2, r0
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	2b64      	cmp	r3, #100	@ 0x64
 80098a0:	d901      	bls.n	80098a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e298      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098a6:	4b93      	ldr	r3, [pc, #588]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	2380      	movs	r3, #128	@ 0x80
 80098ac:	029b      	lsls	r3, r3, #10
 80098ae:	4013      	ands	r3, r2
 80098b0:	d0f0      	beq.n	8009894 <HAL_RCC_OscConfig+0xcc>
 80098b2:	e015      	b.n	80098e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098b4:	f7fd f95e 	bl	8006b74 <HAL_GetTick>
 80098b8:	0003      	movs	r3, r0
 80098ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098bc:	e008      	b.n	80098d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098be:	f7fd f959 	bl	8006b74 <HAL_GetTick>
 80098c2:	0002      	movs	r2, r0
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	2b64      	cmp	r3, #100	@ 0x64
 80098ca:	d901      	bls.n	80098d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e283      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80098d0:	4b88      	ldr	r3, [pc, #544]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	2380      	movs	r3, #128	@ 0x80
 80098d6:	029b      	lsls	r3, r3, #10
 80098d8:	4013      	ands	r3, r2
 80098da:	d1f0      	bne.n	80098be <HAL_RCC_OscConfig+0xf6>
 80098dc:	e000      	b.n	80098e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2202      	movs	r2, #2
 80098e6:	4013      	ands	r3, r2
 80098e8:	d100      	bne.n	80098ec <HAL_RCC_OscConfig+0x124>
 80098ea:	e099      	b.n	8009a20 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098ec:	4b81      	ldr	r3, [pc, #516]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2238      	movs	r2, #56	@ 0x38
 80098f2:	4013      	ands	r3, r2
 80098f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098f6:	4b7f      	ldr	r3, [pc, #508]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	2203      	movs	r2, #3
 80098fc:	4013      	ands	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	2b10      	cmp	r3, #16
 8009904:	d102      	bne.n	800990c <HAL_RCC_OscConfig+0x144>
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b02      	cmp	r3, #2
 800990a:	d002      	beq.n	8009912 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d135      	bne.n	800997e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009912:	4b78      	ldr	r3, [pc, #480]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	2380      	movs	r3, #128	@ 0x80
 8009918:	00db      	lsls	r3, r3, #3
 800991a:	4013      	ands	r3, r2
 800991c:	d005      	beq.n	800992a <HAL_RCC_OscConfig+0x162>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d101      	bne.n	800992a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8009926:	2301      	movs	r3, #1
 8009928:	e256      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800992a:	4b72      	ldr	r3, [pc, #456]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	4a74      	ldr	r2, [pc, #464]	@ (8009b00 <HAL_RCC_OscConfig+0x338>)
 8009930:	4013      	ands	r3, r2
 8009932:	0019      	movs	r1, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	021a      	lsls	r2, r3, #8
 800993a:	4b6e      	ldr	r3, [pc, #440]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800993c:	430a      	orrs	r2, r1
 800993e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d112      	bne.n	800996c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009946:	4b6b      	ldr	r3, [pc, #428]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a6e      	ldr	r2, [pc, #440]	@ (8009b04 <HAL_RCC_OscConfig+0x33c>)
 800994c:	4013      	ands	r3, r2
 800994e:	0019      	movs	r1, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	4b67      	ldr	r3, [pc, #412]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009956:	430a      	orrs	r2, r1
 8009958:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800995a:	4b66      	ldr	r3, [pc, #408]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	0adb      	lsrs	r3, r3, #11
 8009960:	2207      	movs	r2, #7
 8009962:	4013      	ands	r3, r2
 8009964:	4a68      	ldr	r2, [pc, #416]	@ (8009b08 <HAL_RCC_OscConfig+0x340>)
 8009966:	40da      	lsrs	r2, r3
 8009968:	4b68      	ldr	r3, [pc, #416]	@ (8009b0c <HAL_RCC_OscConfig+0x344>)
 800996a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800996c:	4b68      	ldr	r3, [pc, #416]	@ (8009b10 <HAL_RCC_OscConfig+0x348>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	0018      	movs	r0, r3
 8009972:	f7fd f8a3 	bl	8006abc <HAL_InitTick>
 8009976:	1e03      	subs	r3, r0, #0
 8009978:	d051      	beq.n	8009a1e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e22c      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68db      	ldr	r3, [r3, #12]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d030      	beq.n	80099e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009986:	4b5b      	ldr	r3, [pc, #364]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a5e      	ldr	r2, [pc, #376]	@ (8009b04 <HAL_RCC_OscConfig+0x33c>)
 800998c:	4013      	ands	r3, r2
 800998e:	0019      	movs	r1, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	691a      	ldr	r2, [r3, #16]
 8009994:	4b57      	ldr	r3, [pc, #348]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009996:	430a      	orrs	r2, r1
 8009998:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800999a:	4b56      	ldr	r3, [pc, #344]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	4b55      	ldr	r3, [pc, #340]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099a0:	2180      	movs	r1, #128	@ 0x80
 80099a2:	0049      	lsls	r1, r1, #1
 80099a4:	430a      	orrs	r2, r1
 80099a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a8:	f7fd f8e4 	bl	8006b74 <HAL_GetTick>
 80099ac:	0003      	movs	r3, r0
 80099ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099b0:	e008      	b.n	80099c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099b2:	f7fd f8df 	bl	8006b74 <HAL_GetTick>
 80099b6:	0002      	movs	r2, r0
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	2b02      	cmp	r3, #2
 80099be:	d901      	bls.n	80099c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e209      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099c4:	4b4b      	ldr	r3, [pc, #300]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	2380      	movs	r3, #128	@ 0x80
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	4013      	ands	r3, r2
 80099ce:	d0f0      	beq.n	80099b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099d0:	4b48      	ldr	r3, [pc, #288]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	4a4a      	ldr	r2, [pc, #296]	@ (8009b00 <HAL_RCC_OscConfig+0x338>)
 80099d6:	4013      	ands	r3, r2
 80099d8:	0019      	movs	r1, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	021a      	lsls	r2, r3, #8
 80099e0:	4b44      	ldr	r3, [pc, #272]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
 80099e6:	e01b      	b.n	8009a20 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80099e8:	4b42      	ldr	r3, [pc, #264]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	4b41      	ldr	r3, [pc, #260]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 80099ee:	4949      	ldr	r1, [pc, #292]	@ (8009b14 <HAL_RCC_OscConfig+0x34c>)
 80099f0:	400a      	ands	r2, r1
 80099f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099f4:	f7fd f8be 	bl	8006b74 <HAL_GetTick>
 80099f8:	0003      	movs	r3, r0
 80099fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099fc:	e008      	b.n	8009a10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099fe:	f7fd f8b9 	bl	8006b74 <HAL_GetTick>
 8009a02:	0002      	movs	r2, r0
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d901      	bls.n	8009a10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e1e3      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a10:	4b38      	ldr	r3, [pc, #224]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	2380      	movs	r3, #128	@ 0x80
 8009a16:	00db      	lsls	r3, r3, #3
 8009a18:	4013      	ands	r3, r2
 8009a1a:	d1f0      	bne.n	80099fe <HAL_RCC_OscConfig+0x236>
 8009a1c:	e000      	b.n	8009a20 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a1e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2208      	movs	r2, #8
 8009a26:	4013      	ands	r3, r2
 8009a28:	d047      	beq.n	8009aba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009a2a:	4b32      	ldr	r3, [pc, #200]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	2238      	movs	r2, #56	@ 0x38
 8009a30:	4013      	ands	r3, r2
 8009a32:	2b18      	cmp	r3, #24
 8009a34:	d10a      	bne.n	8009a4c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009a36:	4b2f      	ldr	r3, [pc, #188]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	d03c      	beq.n	8009aba <HAL_RCC_OscConfig+0x2f2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d138      	bne.n	8009aba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e1c5      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	699b      	ldr	r3, [r3, #24]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d019      	beq.n	8009a88 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009a54:	4b27      	ldr	r3, [pc, #156]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a56:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009a58:	4b26      	ldr	r3, [pc, #152]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a60:	f7fd f888 	bl	8006b74 <HAL_GetTick>
 8009a64:	0003      	movs	r3, r0
 8009a66:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a68:	e008      	b.n	8009a7c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a6a:	f7fd f883 	bl	8006b74 <HAL_GetTick>
 8009a6e:	0002      	movs	r2, r0
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d901      	bls.n	8009a7c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e1ad      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a80:	2202      	movs	r2, #2
 8009a82:	4013      	ands	r3, r2
 8009a84:	d0f1      	beq.n	8009a6a <HAL_RCC_OscConfig+0x2a2>
 8009a86:	e018      	b.n	8009aba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009a88:	4b1a      	ldr	r3, [pc, #104]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a8a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009a8c:	4b19      	ldr	r3, [pc, #100]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009a8e:	2101      	movs	r1, #1
 8009a90:	438a      	bics	r2, r1
 8009a92:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a94:	f7fd f86e 	bl	8006b74 <HAL_GetTick>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a9e:	f7fd f869 	bl	8006b74 <HAL_GetTick>
 8009aa2:	0002      	movs	r2, r0
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d901      	bls.n	8009ab0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e193      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009ab0:	4b10      	ldr	r3, [pc, #64]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	d1f1      	bne.n	8009a9e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2204      	movs	r2, #4
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	d100      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x2fe>
 8009ac4:	e0c6      	b.n	8009c54 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ac6:	231f      	movs	r3, #31
 8009ac8:	18fb      	adds	r3, r7, r3
 8009aca:	2200      	movs	r2, #0
 8009acc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009ace:	4b09      	ldr	r3, [pc, #36]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	2238      	movs	r2, #56	@ 0x38
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	2b20      	cmp	r3, #32
 8009ad8:	d11e      	bne.n	8009b18 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009ada:	4b06      	ldr	r3, [pc, #24]	@ (8009af4 <HAL_RCC_OscConfig+0x32c>)
 8009adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ade:	2202      	movs	r2, #2
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	d100      	bne.n	8009ae6 <HAL_RCC_OscConfig+0x31e>
 8009ae4:	e0b6      	b.n	8009c54 <HAL_RCC_OscConfig+0x48c>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d000      	beq.n	8009af0 <HAL_RCC_OscConfig+0x328>
 8009aee:	e0b1      	b.n	8009c54 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	e171      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
 8009af4:	40021000 	.word	0x40021000
 8009af8:	fffeffff 	.word	0xfffeffff
 8009afc:	fffbffff 	.word	0xfffbffff
 8009b00:	ffff80ff 	.word	0xffff80ff
 8009b04:	ffffc7ff 	.word	0xffffc7ff
 8009b08:	00f42400 	.word	0x00f42400
 8009b0c:	2000044c 	.word	0x2000044c
 8009b10:	20000450 	.word	0x20000450
 8009b14:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009b18:	4bb1      	ldr	r3, [pc, #708]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009b1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b1c:	2380      	movs	r3, #128	@ 0x80
 8009b1e:	055b      	lsls	r3, r3, #21
 8009b20:	4013      	ands	r3, r2
 8009b22:	d101      	bne.n	8009b28 <HAL_RCC_OscConfig+0x360>
 8009b24:	2301      	movs	r3, #1
 8009b26:	e000      	b.n	8009b2a <HAL_RCC_OscConfig+0x362>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d011      	beq.n	8009b52 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009b2e:	4bac      	ldr	r3, [pc, #688]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009b30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b32:	4bab      	ldr	r3, [pc, #684]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009b34:	2180      	movs	r1, #128	@ 0x80
 8009b36:	0549      	lsls	r1, r1, #21
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009b3c:	4ba8      	ldr	r3, [pc, #672]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009b3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b40:	2380      	movs	r3, #128	@ 0x80
 8009b42:	055b      	lsls	r3, r3, #21
 8009b44:	4013      	ands	r3, r2
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009b4a:	231f      	movs	r3, #31
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	2201      	movs	r2, #1
 8009b50:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b52:	4ba4      	ldr	r3, [pc, #656]	@ (8009de4 <HAL_RCC_OscConfig+0x61c>)
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	2380      	movs	r3, #128	@ 0x80
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	d11a      	bne.n	8009b94 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8009de4 <HAL_RCC_OscConfig+0x61c>)
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4ba0      	ldr	r3, [pc, #640]	@ (8009de4 <HAL_RCC_OscConfig+0x61c>)
 8009b64:	2180      	movs	r1, #128	@ 0x80
 8009b66:	0049      	lsls	r1, r1, #1
 8009b68:	430a      	orrs	r2, r1
 8009b6a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009b6c:	f7fd f802 	bl	8006b74 <HAL_GetTick>
 8009b70:	0003      	movs	r3, r0
 8009b72:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b74:	e008      	b.n	8009b88 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b76:	f7fc fffd 	bl	8006b74 <HAL_GetTick>
 8009b7a:	0002      	movs	r2, r0
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d901      	bls.n	8009b88 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e127      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b88:	4b96      	ldr	r3, [pc, #600]	@ (8009de4 <HAL_RCC_OscConfig+0x61c>)
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	2380      	movs	r3, #128	@ 0x80
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	4013      	ands	r3, r2
 8009b92:	d0f0      	beq.n	8009b76 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d106      	bne.n	8009baa <HAL_RCC_OscConfig+0x3e2>
 8009b9c:	4b90      	ldr	r3, [pc, #576]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009b9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ba0:	4b8f      	ldr	r3, [pc, #572]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009ba8:	e01c      	b.n	8009be4 <HAL_RCC_OscConfig+0x41c>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	689b      	ldr	r3, [r3, #8]
 8009bae:	2b05      	cmp	r3, #5
 8009bb0:	d10c      	bne.n	8009bcc <HAL_RCC_OscConfig+0x404>
 8009bb2:	4b8b      	ldr	r3, [pc, #556]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bb4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bb6:	4b8a      	ldr	r3, [pc, #552]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bb8:	2104      	movs	r1, #4
 8009bba:	430a      	orrs	r2, r1
 8009bbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009bbe:	4b88      	ldr	r3, [pc, #544]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bc2:	4b87      	ldr	r3, [pc, #540]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bc4:	2101      	movs	r1, #1
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009bca:	e00b      	b.n	8009be4 <HAL_RCC_OscConfig+0x41c>
 8009bcc:	4b84      	ldr	r3, [pc, #528]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bd0:	4b83      	ldr	r3, [pc, #524]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	438a      	bics	r2, r1
 8009bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009bd8:	4b81      	ldr	r3, [pc, #516]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bda:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bdc:	4b80      	ldr	r3, [pc, #512]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009bde:	2104      	movs	r1, #4
 8009be0:	438a      	bics	r2, r1
 8009be2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d014      	beq.n	8009c16 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bec:	f7fc ffc2 	bl	8006b74 <HAL_GetTick>
 8009bf0:	0003      	movs	r3, r0
 8009bf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009bf4:	e009      	b.n	8009c0a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bf6:	f7fc ffbd 	bl	8006b74 <HAL_GetTick>
 8009bfa:	0002      	movs	r2, r0
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	1ad3      	subs	r3, r2, r3
 8009c00:	4a79      	ldr	r2, [pc, #484]	@ (8009de8 <HAL_RCC_OscConfig+0x620>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d901      	bls.n	8009c0a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e0e6      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009c0a:	4b75      	ldr	r3, [pc, #468]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c0e:	2202      	movs	r2, #2
 8009c10:	4013      	ands	r3, r2
 8009c12:	d0f0      	beq.n	8009bf6 <HAL_RCC_OscConfig+0x42e>
 8009c14:	e013      	b.n	8009c3e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c16:	f7fc ffad 	bl	8006b74 <HAL_GetTick>
 8009c1a:	0003      	movs	r3, r0
 8009c1c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c1e:	e009      	b.n	8009c34 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c20:	f7fc ffa8 	bl	8006b74 <HAL_GetTick>
 8009c24:	0002      	movs	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	4a6f      	ldr	r2, [pc, #444]	@ (8009de8 <HAL_RCC_OscConfig+0x620>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d901      	bls.n	8009c34 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8009c30:	2303      	movs	r3, #3
 8009c32:	e0d1      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009c34:	4b6a      	ldr	r3, [pc, #424]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c38:	2202      	movs	r2, #2
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	d1f0      	bne.n	8009c20 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009c3e:	231f      	movs	r3, #31
 8009c40:	18fb      	adds	r3, r7, r3
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d105      	bne.n	8009c54 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009c48:	4b65      	ldr	r3, [pc, #404]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c4c:	4b64      	ldr	r3, [pc, #400]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c4e:	4967      	ldr	r1, [pc, #412]	@ (8009dec <HAL_RCC_OscConfig+0x624>)
 8009c50:	400a      	ands	r2, r1
 8009c52:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d100      	bne.n	8009c5e <HAL_RCC_OscConfig+0x496>
 8009c5c:	e0bb      	b.n	8009dd6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c5e:	4b60      	ldr	r3, [pc, #384]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	2238      	movs	r2, #56	@ 0x38
 8009c64:	4013      	ands	r3, r2
 8009c66:	2b10      	cmp	r3, #16
 8009c68:	d100      	bne.n	8009c6c <HAL_RCC_OscConfig+0x4a4>
 8009c6a:	e07b      	b.n	8009d64 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	69db      	ldr	r3, [r3, #28]
 8009c70:	2b02      	cmp	r3, #2
 8009c72:	d156      	bne.n	8009d22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009c74:	4b5a      	ldr	r3, [pc, #360]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4b59      	ldr	r3, [pc, #356]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c7a:	495d      	ldr	r1, [pc, #372]	@ (8009df0 <HAL_RCC_OscConfig+0x628>)
 8009c7c:	400a      	ands	r2, r1
 8009c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c80:	f7fc ff78 	bl	8006b74 <HAL_GetTick>
 8009c84:	0003      	movs	r3, r0
 8009c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c88:	e008      	b.n	8009c9c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009c8a:	f7fc ff73 	bl	8006b74 <HAL_GetTick>
 8009c8e:	0002      	movs	r2, r0
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e09d      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009c9c:	4b50      	ldr	r3, [pc, #320]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	2380      	movs	r3, #128	@ 0x80
 8009ca2:	049b      	lsls	r3, r3, #18
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	d1f0      	bne.n	8009c8a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009ca8:	4b4d      	ldr	r3, [pc, #308]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	4a51      	ldr	r2, [pc, #324]	@ (8009df4 <HAL_RCC_OscConfig+0x62c>)
 8009cae:	4013      	ands	r3, r2
 8009cb0:	0019      	movs	r1, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a1a      	ldr	r2, [r3, #32]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	431a      	orrs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cce:	431a      	orrs	r2, r3
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	4b42      	ldr	r3, [pc, #264]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009cd8:	430a      	orrs	r2, r1
 8009cda:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009cdc:	4b40      	ldr	r3, [pc, #256]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009ce2:	2180      	movs	r1, #128	@ 0x80
 8009ce4:	0449      	lsls	r1, r1, #17
 8009ce6:	430a      	orrs	r2, r1
 8009ce8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009cea:	4b3d      	ldr	r3, [pc, #244]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	4b3c      	ldr	r3, [pc, #240]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009cf0:	2180      	movs	r1, #128	@ 0x80
 8009cf2:	0549      	lsls	r1, r1, #21
 8009cf4:	430a      	orrs	r2, r1
 8009cf6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cf8:	f7fc ff3c 	bl	8006b74 <HAL_GetTick>
 8009cfc:	0003      	movs	r3, r0
 8009cfe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d00:	e008      	b.n	8009d14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d02:	f7fc ff37 	bl	8006b74 <HAL_GetTick>
 8009d06:	0002      	movs	r2, r0
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	1ad3      	subs	r3, r2, r3
 8009d0c:	2b02      	cmp	r3, #2
 8009d0e:	d901      	bls.n	8009d14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8009d10:	2303      	movs	r3, #3
 8009d12:	e061      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009d14:	4b32      	ldr	r3, [pc, #200]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	2380      	movs	r3, #128	@ 0x80
 8009d1a:	049b      	lsls	r3, r3, #18
 8009d1c:	4013      	ands	r3, r2
 8009d1e:	d0f0      	beq.n	8009d02 <HAL_RCC_OscConfig+0x53a>
 8009d20:	e059      	b.n	8009dd6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d22:	4b2f      	ldr	r3, [pc, #188]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	4b2e      	ldr	r3, [pc, #184]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d28:	4931      	ldr	r1, [pc, #196]	@ (8009df0 <HAL_RCC_OscConfig+0x628>)
 8009d2a:	400a      	ands	r2, r1
 8009d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2e:	f7fc ff21 	bl	8006b74 <HAL_GetTick>
 8009d32:	0003      	movs	r3, r0
 8009d34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d36:	e008      	b.n	8009d4a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d38:	f7fc ff1c 	bl	8006b74 <HAL_GetTick>
 8009d3c:	0002      	movs	r2, r0
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d901      	bls.n	8009d4a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e046      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d4a:	4b25      	ldr	r3, [pc, #148]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	2380      	movs	r3, #128	@ 0x80
 8009d50:	049b      	lsls	r3, r3, #18
 8009d52:	4013      	ands	r3, r2
 8009d54:	d1f0      	bne.n	8009d38 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009d56:	4b22      	ldr	r3, [pc, #136]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	4b21      	ldr	r3, [pc, #132]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d5c:	4926      	ldr	r1, [pc, #152]	@ (8009df8 <HAL_RCC_OscConfig+0x630>)
 8009d5e:	400a      	ands	r2, r1
 8009d60:	60da      	str	r2, [r3, #12]
 8009d62:	e038      	b.n	8009dd6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e033      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009d70:	4b1b      	ldr	r3, [pc, #108]	@ (8009de0 <HAL_RCC_OscConfig+0x618>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	2203      	movs	r2, #3
 8009d7a:	401a      	ands	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d126      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	2270      	movs	r2, #112	@ 0x70
 8009d88:	401a      	ands	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d11f      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	23fe      	movs	r3, #254	@ 0xfe
 8009d96:	01db      	lsls	r3, r3, #7
 8009d98:	401a      	ands	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d9e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d116      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009da4:	697a      	ldr	r2, [r7, #20]
 8009da6:	23f8      	movs	r3, #248	@ 0xf8
 8009da8:	039b      	lsls	r3, r3, #14
 8009daa:	401a      	ands	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d10e      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	23e0      	movs	r3, #224	@ 0xe0
 8009db8:	051b      	lsls	r3, r3, #20
 8009dba:	401a      	ands	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d106      	bne.n	8009dd2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	0f5b      	lsrs	r3, r3, #29
 8009dc8:	075a      	lsls	r2, r3, #29
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d001      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e000      	b.n	8009dd8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
}
 8009dd8:	0018      	movs	r0, r3
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	b008      	add	sp, #32
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	40021000 	.word	0x40021000
 8009de4:	40007000 	.word	0x40007000
 8009de8:	00001388 	.word	0x00001388
 8009dec:	efffffff 	.word	0xefffffff
 8009df0:	feffffff 	.word	0xfeffffff
 8009df4:	11c1808c 	.word	0x11c1808c
 8009df8:	eefefffc 	.word	0xeefefffc

08009dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d101      	bne.n	8009e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e0e9      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009e10:	4b76      	ldr	r3, [pc, #472]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2207      	movs	r2, #7
 8009e16:	4013      	ands	r3, r2
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d91e      	bls.n	8009e5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e1e:	4b73      	ldr	r3, [pc, #460]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2207      	movs	r2, #7
 8009e24:	4393      	bics	r3, r2
 8009e26:	0019      	movs	r1, r3
 8009e28:	4b70      	ldr	r3, [pc, #448]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009e2a:	683a      	ldr	r2, [r7, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009e30:	f7fc fea0 	bl	8006b74 <HAL_GetTick>
 8009e34:	0003      	movs	r3, r0
 8009e36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009e38:	e009      	b.n	8009e4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009e3a:	f7fc fe9b 	bl	8006b74 <HAL_GetTick>
 8009e3e:	0002      	movs	r2, r0
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	4a6a      	ldr	r2, [pc, #424]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d901      	bls.n	8009e4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009e4a:	2303      	movs	r3, #3
 8009e4c:	e0ca      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009e4e:	4b67      	ldr	r3, [pc, #412]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2207      	movs	r2, #7
 8009e54:	4013      	ands	r3, r2
 8009e56:	683a      	ldr	r2, [r7, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d1ee      	bne.n	8009e3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2202      	movs	r2, #2
 8009e62:	4013      	ands	r3, r2
 8009e64:	d015      	beq.n	8009e92 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2204      	movs	r2, #4
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	d006      	beq.n	8009e7e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8009e70:	4b60      	ldr	r3, [pc, #384]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	4b5f      	ldr	r3, [pc, #380]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009e76:	21e0      	movs	r1, #224	@ 0xe0
 8009e78:	01c9      	lsls	r1, r1, #7
 8009e7a:	430a      	orrs	r2, r1
 8009e7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009e7e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	4a5d      	ldr	r2, [pc, #372]	@ (8009ff8 <HAL_RCC_ClockConfig+0x1fc>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	0019      	movs	r1, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	689a      	ldr	r2, [r3, #8]
 8009e8c:	4b59      	ldr	r3, [pc, #356]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009e8e:	430a      	orrs	r2, r1
 8009e90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2201      	movs	r2, #1
 8009e98:	4013      	ands	r3, r2
 8009e9a:	d057      	beq.n	8009f4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d107      	bne.n	8009eb4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ea4:	4b53      	ldr	r3, [pc, #332]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	2380      	movs	r3, #128	@ 0x80
 8009eaa:	029b      	lsls	r3, r3, #10
 8009eac:	4013      	ands	r3, r2
 8009eae:	d12b      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	e097      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2b02      	cmp	r3, #2
 8009eba:	d107      	bne.n	8009ecc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ebc:	4b4d      	ldr	r3, [pc, #308]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	2380      	movs	r3, #128	@ 0x80
 8009ec2:	049b      	lsls	r3, r3, #18
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	d11f      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e08b      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d107      	bne.n	8009ee4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009ed4:	4b47      	ldr	r3, [pc, #284]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	2380      	movs	r3, #128	@ 0x80
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	4013      	ands	r3, r2
 8009ede:	d113      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e07f      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d106      	bne.n	8009efa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009eec:	4b41      	ldr	r3, [pc, #260]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	d108      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e074      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009efa:	4b3e      	ldr	r3, [pc, #248]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009efc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009efe:	2202      	movs	r2, #2
 8009f00:	4013      	ands	r3, r2
 8009f02:	d101      	bne.n	8009f08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e06d      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f08:	4b3a      	ldr	r3, [pc, #232]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2207      	movs	r2, #7
 8009f0e:	4393      	bics	r3, r2
 8009f10:	0019      	movs	r1, r3
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	4b37      	ldr	r3, [pc, #220]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009f18:	430a      	orrs	r2, r1
 8009f1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f1c:	f7fc fe2a 	bl	8006b74 <HAL_GetTick>
 8009f20:	0003      	movs	r3, r0
 8009f22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f24:	e009      	b.n	8009f3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f26:	f7fc fe25 	bl	8006b74 <HAL_GetTick>
 8009f2a:	0002      	movs	r2, r0
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	1ad3      	subs	r3, r2, r3
 8009f30:	4a2f      	ldr	r2, [pc, #188]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d901      	bls.n	8009f3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8009f36:	2303      	movs	r3, #3
 8009f38:	e054      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f3a:	4b2e      	ldr	r3, [pc, #184]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	2238      	movs	r2, #56	@ 0x38
 8009f40:	401a      	ands	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	00db      	lsls	r3, r3, #3
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d1ec      	bne.n	8009f26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009f4c:	4b27      	ldr	r3, [pc, #156]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2207      	movs	r2, #7
 8009f52:	4013      	ands	r3, r2
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d21e      	bcs.n	8009f98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f5a:	4b24      	ldr	r3, [pc, #144]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2207      	movs	r2, #7
 8009f60:	4393      	bics	r3, r2
 8009f62:	0019      	movs	r1, r3
 8009f64:	4b21      	ldr	r3, [pc, #132]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009f6c:	f7fc fe02 	bl	8006b74 <HAL_GetTick>
 8009f70:	0003      	movs	r3, r0
 8009f72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f74:	e009      	b.n	8009f8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f76:	f7fc fdfd 	bl	8006b74 <HAL_GetTick>
 8009f7a:	0002      	movs	r2, r0
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	1ad3      	subs	r3, r2, r3
 8009f80:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff0 <HAL_RCC_ClockConfig+0x1f4>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d901      	bls.n	8009f8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e02c      	b.n	8009fe4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8009f8a:	4b18      	ldr	r3, [pc, #96]	@ (8009fec <HAL_RCC_ClockConfig+0x1f0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2207      	movs	r2, #7
 8009f90:	4013      	ands	r3, r2
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d1ee      	bne.n	8009f76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2204      	movs	r2, #4
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	d009      	beq.n	8009fb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8009fa2:	4b14      	ldr	r3, [pc, #80]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	4a15      	ldr	r2, [pc, #84]	@ (8009ffc <HAL_RCC_ClockConfig+0x200>)
 8009fa8:	4013      	ands	r3, r2
 8009faa:	0019      	movs	r1, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68da      	ldr	r2, [r3, #12]
 8009fb0:	4b10      	ldr	r3, [pc, #64]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009fb6:	f000 f829 	bl	800a00c <HAL_RCC_GetSysClockFreq>
 8009fba:	0001      	movs	r1, r0
 8009fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8009ff4 <HAL_RCC_ClockConfig+0x1f8>)
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	0a1b      	lsrs	r3, r3, #8
 8009fc2:	220f      	movs	r2, #15
 8009fc4:	401a      	ands	r2, r3
 8009fc6:	4b0e      	ldr	r3, [pc, #56]	@ (800a000 <HAL_RCC_ClockConfig+0x204>)
 8009fc8:	0092      	lsls	r2, r2, #2
 8009fca:	58d3      	ldr	r3, [r2, r3]
 8009fcc:	221f      	movs	r2, #31
 8009fce:	4013      	ands	r3, r2
 8009fd0:	000a      	movs	r2, r1
 8009fd2:	40da      	lsrs	r2, r3
 8009fd4:	4b0b      	ldr	r3, [pc, #44]	@ (800a004 <HAL_RCC_ClockConfig+0x208>)
 8009fd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009fd8:	4b0b      	ldr	r3, [pc, #44]	@ (800a008 <HAL_RCC_ClockConfig+0x20c>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f7fc fd6d 	bl	8006abc <HAL_InitTick>
 8009fe2:	0003      	movs	r3, r0
}
 8009fe4:	0018      	movs	r0, r3
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	b004      	add	sp, #16
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	40022000 	.word	0x40022000
 8009ff0:	00001388 	.word	0x00001388
 8009ff4:	40021000 	.word	0x40021000
 8009ff8:	fffff0ff 	.word	0xfffff0ff
 8009ffc:	ffff8fff 	.word	0xffff8fff
 800a000:	0800ea3c 	.word	0x0800ea3c
 800a004:	2000044c 	.word	0x2000044c
 800a008:	20000450 	.word	0x20000450

0800a00c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b086      	sub	sp, #24
 800a010:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a012:	4b3c      	ldr	r3, [pc, #240]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	2238      	movs	r2, #56	@ 0x38
 800a018:	4013      	ands	r3, r2
 800a01a:	d10f      	bne.n	800a03c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a01c:	4b39      	ldr	r3, [pc, #228]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	0adb      	lsrs	r3, r3, #11
 800a022:	2207      	movs	r2, #7
 800a024:	4013      	ands	r3, r2
 800a026:	2201      	movs	r2, #1
 800a028:	409a      	lsls	r2, r3
 800a02a:	0013      	movs	r3, r2
 800a02c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a02e:	6839      	ldr	r1, [r7, #0]
 800a030:	4835      	ldr	r0, [pc, #212]	@ (800a108 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a032:	f7f6 f869 	bl	8000108 <__udivsi3>
 800a036:	0003      	movs	r3, r0
 800a038:	613b      	str	r3, [r7, #16]
 800a03a:	e05d      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a03c:	4b31      	ldr	r3, [pc, #196]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	2238      	movs	r2, #56	@ 0x38
 800a042:	4013      	ands	r3, r2
 800a044:	2b08      	cmp	r3, #8
 800a046:	d102      	bne.n	800a04e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a048:	4b30      	ldr	r3, [pc, #192]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x100>)
 800a04a:	613b      	str	r3, [r7, #16]
 800a04c:	e054      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a04e:	4b2d      	ldr	r3, [pc, #180]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	2238      	movs	r2, #56	@ 0x38
 800a054:	4013      	ands	r3, r2
 800a056:	2b10      	cmp	r3, #16
 800a058:	d138      	bne.n	800a0cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a05a:	4b2a      	ldr	r3, [pc, #168]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	2203      	movs	r2, #3
 800a060:	4013      	ands	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a064:	4b27      	ldr	r3, [pc, #156]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	091b      	lsrs	r3, r3, #4
 800a06a:	2207      	movs	r2, #7
 800a06c:	4013      	ands	r3, r2
 800a06e:	3301      	adds	r3, #1
 800a070:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d10d      	bne.n	800a094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	4824      	ldr	r0, [pc, #144]	@ (800a10c <HAL_RCC_GetSysClockFreq+0x100>)
 800a07c:	f7f6 f844 	bl	8000108 <__udivsi3>
 800a080:	0003      	movs	r3, r0
 800a082:	0019      	movs	r1, r3
 800a084:	4b1f      	ldr	r3, [pc, #124]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a086:	68db      	ldr	r3, [r3, #12]
 800a088:	0a1b      	lsrs	r3, r3, #8
 800a08a:	227f      	movs	r2, #127	@ 0x7f
 800a08c:	4013      	ands	r3, r2
 800a08e:	434b      	muls	r3, r1
 800a090:	617b      	str	r3, [r7, #20]
        break;
 800a092:	e00d      	b.n	800a0b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	481c      	ldr	r0, [pc, #112]	@ (800a108 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a098:	f7f6 f836 	bl	8000108 <__udivsi3>
 800a09c:	0003      	movs	r3, r0
 800a09e:	0019      	movs	r1, r3
 800a0a0:	4b18      	ldr	r3, [pc, #96]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	0a1b      	lsrs	r3, r3, #8
 800a0a6:	227f      	movs	r2, #127	@ 0x7f
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	434b      	muls	r3, r1
 800a0ac:	617b      	str	r3, [r7, #20]
        break;
 800a0ae:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a0b0:	4b14      	ldr	r3, [pc, #80]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	0f5b      	lsrs	r3, r3, #29
 800a0b6:	2207      	movs	r2, #7
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a0be:	6879      	ldr	r1, [r7, #4]
 800a0c0:	6978      	ldr	r0, [r7, #20]
 800a0c2:	f7f6 f821 	bl	8000108 <__udivsi3>
 800a0c6:	0003      	movs	r3, r0
 800a0c8:	613b      	str	r3, [r7, #16]
 800a0ca:	e015      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a0cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	2238      	movs	r2, #56	@ 0x38
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	2b20      	cmp	r3, #32
 800a0d6:	d103      	bne.n	800a0e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a0d8:	2380      	movs	r3, #128	@ 0x80
 800a0da:	021b      	lsls	r3, r3, #8
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	e00b      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a0e0:	4b08      	ldr	r3, [pc, #32]	@ (800a104 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2238      	movs	r2, #56	@ 0x38
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	2b18      	cmp	r3, #24
 800a0ea:	d103      	bne.n	800a0f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a0ec:	23fa      	movs	r3, #250	@ 0xfa
 800a0ee:	01db      	lsls	r3, r3, #7
 800a0f0:	613b      	str	r3, [r7, #16]
 800a0f2:	e001      	b.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a0f8:	693b      	ldr	r3, [r7, #16]
}
 800a0fa:	0018      	movs	r0, r3
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	b006      	add	sp, #24
 800a100:	bd80      	pop	{r7, pc}
 800a102:	46c0      	nop			@ (mov r8, r8)
 800a104:	40021000 	.word	0x40021000
 800a108:	00f42400 	.word	0x00f42400
 800a10c:	007a1200 	.word	0x007a1200

0800a110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a114:	4b02      	ldr	r3, [pc, #8]	@ (800a120 <HAL_RCC_GetHCLKFreq+0x10>)
 800a116:	681b      	ldr	r3, [r3, #0]
}
 800a118:	0018      	movs	r0, r3
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	46c0      	nop			@ (mov r8, r8)
 800a120:	2000044c 	.word	0x2000044c

0800a124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a124:	b5b0      	push	{r4, r5, r7, lr}
 800a126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a128:	f7ff fff2 	bl	800a110 <HAL_RCC_GetHCLKFreq>
 800a12c:	0004      	movs	r4, r0
 800a12e:	f7ff fb3f 	bl	80097b0 <LL_RCC_GetAPB1Prescaler>
 800a132:	0003      	movs	r3, r0
 800a134:	0b1a      	lsrs	r2, r3, #12
 800a136:	4b05      	ldr	r3, [pc, #20]	@ (800a14c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	58d3      	ldr	r3, [r2, r3]
 800a13c:	221f      	movs	r2, #31
 800a13e:	4013      	ands	r3, r2
 800a140:	40dc      	lsrs	r4, r3
 800a142:	0023      	movs	r3, r4
}
 800a144:	0018      	movs	r0, r3
 800a146:	46bd      	mov	sp, r7
 800a148:	bdb0      	pop	{r4, r5, r7, pc}
 800a14a:	46c0      	nop			@ (mov r8, r8)
 800a14c:	0800ea7c 	.word	0x0800ea7c

0800a150 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b086      	sub	sp, #24
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a158:	2313      	movs	r3, #19
 800a15a:	18fb      	adds	r3, r7, r3
 800a15c:	2200      	movs	r2, #0
 800a15e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a160:	2312      	movs	r3, #18
 800a162:	18fb      	adds	r3, r7, r3
 800a164:	2200      	movs	r2, #0
 800a166:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	2380      	movs	r3, #128	@ 0x80
 800a16e:	029b      	lsls	r3, r3, #10
 800a170:	4013      	ands	r3, r2
 800a172:	d100      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a174:	e0a3      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a176:	2011      	movs	r0, #17
 800a178:	183b      	adds	r3, r7, r0
 800a17a:	2200      	movs	r2, #0
 800a17c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a17e:	4ba5      	ldr	r3, [pc, #660]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a182:	2380      	movs	r3, #128	@ 0x80
 800a184:	055b      	lsls	r3, r3, #21
 800a186:	4013      	ands	r3, r2
 800a188:	d110      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a18a:	4ba2      	ldr	r3, [pc, #648]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a18c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a18e:	4ba1      	ldr	r3, [pc, #644]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a190:	2180      	movs	r1, #128	@ 0x80
 800a192:	0549      	lsls	r1, r1, #21
 800a194:	430a      	orrs	r2, r1
 800a196:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a198:	4b9e      	ldr	r3, [pc, #632]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a19a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a19c:	2380      	movs	r3, #128	@ 0x80
 800a19e:	055b      	lsls	r3, r3, #21
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60bb      	str	r3, [r7, #8]
 800a1a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a1a6:	183b      	adds	r3, r7, r0
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1ac:	4b9a      	ldr	r3, [pc, #616]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b99      	ldr	r3, [pc, #612]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a1b2:	2180      	movs	r1, #128	@ 0x80
 800a1b4:	0049      	lsls	r1, r1, #1
 800a1b6:	430a      	orrs	r2, r1
 800a1b8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1ba:	f7fc fcdb 	bl	8006b74 <HAL_GetTick>
 800a1be:	0003      	movs	r3, r0
 800a1c0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1c2:	e00b      	b.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1c4:	f7fc fcd6 	bl	8006b74 <HAL_GetTick>
 800a1c8:	0002      	movs	r2, r0
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	1ad3      	subs	r3, r2, r3
 800a1ce:	2b02      	cmp	r3, #2
 800a1d0:	d904      	bls.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a1d2:	2313      	movs	r3, #19
 800a1d4:	18fb      	adds	r3, r7, r3
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	701a      	strb	r2, [r3, #0]
        break;
 800a1da:	e005      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1dc:	4b8e      	ldr	r3, [pc, #568]	@ (800a418 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	2380      	movs	r3, #128	@ 0x80
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	d0ed      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a1e8:	2313      	movs	r3, #19
 800a1ea:	18fb      	adds	r3, r7, r3
 800a1ec:	781b      	ldrb	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d154      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a1f2:	4b88      	ldr	r3, [pc, #544]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a1f6:	23c0      	movs	r3, #192	@ 0xc0
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d019      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a208:	697a      	ldr	r2, [r7, #20]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d014      	beq.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a20e:	4b81      	ldr	r3, [pc, #516]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a212:	4a82      	ldr	r2, [pc, #520]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a214:	4013      	ands	r3, r2
 800a216:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a218:	4b7e      	ldr	r3, [pc, #504]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a21c:	4b7d      	ldr	r3, [pc, #500]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21e:	2180      	movs	r1, #128	@ 0x80
 800a220:	0249      	lsls	r1, r1, #9
 800a222:	430a      	orrs	r2, r1
 800a224:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a226:	4b7b      	ldr	r3, [pc, #492]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a228:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a22a:	4b7a      	ldr	r3, [pc, #488]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a22c:	497c      	ldr	r1, [pc, #496]	@ (800a420 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a22e:	400a      	ands	r2, r1
 800a230:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a232:	4b78      	ldr	r3, [pc, #480]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a234:	697a      	ldr	r2, [r7, #20]
 800a236:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	2201      	movs	r2, #1
 800a23c:	4013      	ands	r3, r2
 800a23e:	d016      	beq.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a240:	f7fc fc98 	bl	8006b74 <HAL_GetTick>
 800a244:	0003      	movs	r3, r0
 800a246:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a248:	e00c      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24a:	f7fc fc93 	bl	8006b74 <HAL_GetTick>
 800a24e:	0002      	movs	r2, r0
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	1ad3      	subs	r3, r2, r3
 800a254:	4a73      	ldr	r2, [pc, #460]	@ (800a424 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d904      	bls.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a25a:	2313      	movs	r3, #19
 800a25c:	18fb      	adds	r3, r7, r3
 800a25e:	2203      	movs	r2, #3
 800a260:	701a      	strb	r2, [r3, #0]
            break;
 800a262:	e004      	b.n	800a26e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a264:	4b6b      	ldr	r3, [pc, #428]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a268:	2202      	movs	r2, #2
 800a26a:	4013      	ands	r3, r2
 800a26c:	d0ed      	beq.n	800a24a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a26e:	2313      	movs	r3, #19
 800a270:	18fb      	adds	r3, r7, r3
 800a272:	781b      	ldrb	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10a      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a278:	4b66      	ldr	r3, [pc, #408]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a27a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a27c:	4a67      	ldr	r2, [pc, #412]	@ (800a41c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a27e:	4013      	ands	r3, r2
 800a280:	0019      	movs	r1, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a286:	4b63      	ldr	r3, [pc, #396]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a288:	430a      	orrs	r2, r1
 800a28a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a28c:	e00c      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a28e:	2312      	movs	r3, #18
 800a290:	18fb      	adds	r3, r7, r3
 800a292:	2213      	movs	r2, #19
 800a294:	18ba      	adds	r2, r7, r2
 800a296:	7812      	ldrb	r2, [r2, #0]
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	e005      	b.n	800a2a8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a29c:	2312      	movs	r3, #18
 800a29e:	18fb      	adds	r3, r7, r3
 800a2a0:	2213      	movs	r2, #19
 800a2a2:	18ba      	adds	r2, r7, r2
 800a2a4:	7812      	ldrb	r2, [r2, #0]
 800a2a6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a2a8:	2311      	movs	r3, #17
 800a2aa:	18fb      	adds	r3, r7, r3
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d105      	bne.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a2b2:	4b58      	ldr	r3, [pc, #352]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a2b6:	4b57      	ldr	r3, [pc, #348]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2b8:	495b      	ldr	r1, [pc, #364]	@ (800a428 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a2ba:	400a      	ands	r2, r1
 800a2bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	4013      	ands	r3, r2
 800a2c6:	d009      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a2c8:	4b52      	ldr	r3, [pc, #328]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2cc:	2203      	movs	r2, #3
 800a2ce:	4393      	bics	r3, r2
 800a2d0:	0019      	movs	r1, r3
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	685a      	ldr	r2, [r3, #4]
 800a2d6:	4b4f      	ldr	r3, [pc, #316]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2210      	movs	r2, #16
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	d009      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a2e6:	4b4b      	ldr	r3, [pc, #300]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2ea:	4a50      	ldr	r2, [pc, #320]	@ (800a42c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a2ec:	4013      	ands	r3, r2
 800a2ee:	0019      	movs	r1, r3
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	4b47      	ldr	r3, [pc, #284]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	2380      	movs	r3, #128	@ 0x80
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4013      	ands	r3, r2
 800a304:	d009      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a306:	4b43      	ldr	r3, [pc, #268]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a30a:	4a49      	ldr	r2, [pc, #292]	@ (800a430 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a30c:	4013      	ands	r3, r2
 800a30e:	0019      	movs	r1, r3
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	695a      	ldr	r2, [r3, #20]
 800a314:	4b3f      	ldr	r3, [pc, #252]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a316:	430a      	orrs	r2, r1
 800a318:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	2380      	movs	r3, #128	@ 0x80
 800a320:	00db      	lsls	r3, r3, #3
 800a322:	4013      	ands	r3, r2
 800a324:	d009      	beq.n	800a33a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a326:	4b3b      	ldr	r3, [pc, #236]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a32a:	4a42      	ldr	r2, [pc, #264]	@ (800a434 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a32c:	4013      	ands	r3, r2
 800a32e:	0019      	movs	r1, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	4b37      	ldr	r3, [pc, #220]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a336:	430a      	orrs	r2, r1
 800a338:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2220      	movs	r2, #32
 800a340:	4013      	ands	r3, r2
 800a342:	d009      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a344:	4b33      	ldr	r3, [pc, #204]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a348:	4a3b      	ldr	r2, [pc, #236]	@ (800a438 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a34a:	4013      	ands	r3, r2
 800a34c:	0019      	movs	r1, r3
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	68da      	ldr	r2, [r3, #12]
 800a352:	4b30      	ldr	r3, [pc, #192]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a354:	430a      	orrs	r2, r1
 800a356:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	2380      	movs	r3, #128	@ 0x80
 800a35e:	01db      	lsls	r3, r3, #7
 800a360:	4013      	ands	r3, r2
 800a362:	d015      	beq.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a364:	4b2b      	ldr	r3, [pc, #172]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	0899      	lsrs	r1, r3, #2
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	69da      	ldr	r2, [r3, #28]
 800a370:	4b28      	ldr	r3, [pc, #160]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a372:	430a      	orrs	r2, r1
 800a374:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	69da      	ldr	r2, [r3, #28]
 800a37a:	2380      	movs	r3, #128	@ 0x80
 800a37c:	05db      	lsls	r3, r3, #23
 800a37e:	429a      	cmp	r2, r3
 800a380:	d106      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a382:	4b24      	ldr	r3, [pc, #144]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	4b23      	ldr	r3, [pc, #140]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a388:	2180      	movs	r1, #128	@ 0x80
 800a38a:	0249      	lsls	r1, r1, #9
 800a38c:	430a      	orrs	r2, r1
 800a38e:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	2380      	movs	r3, #128	@ 0x80
 800a396:	039b      	lsls	r3, r3, #14
 800a398:	4013      	ands	r3, r2
 800a39a:	d016      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a39c:	4b1d      	ldr	r3, [pc, #116]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a39e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3a0:	4a26      	ldr	r2, [pc, #152]	@ (800a43c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	0019      	movs	r1, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6a1a      	ldr	r2, [r3, #32]
 800a3aa:	4b1a      	ldr	r3, [pc, #104]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a1a      	ldr	r2, [r3, #32]
 800a3b4:	2380      	movs	r3, #128	@ 0x80
 800a3b6:	03db      	lsls	r3, r3, #15
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d106      	bne.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a3bc:	4b15      	ldr	r3, [pc, #84]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3be:	68da      	ldr	r2, [r3, #12]
 800a3c0:	4b14      	ldr	r3, [pc, #80]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3c2:	2180      	movs	r1, #128	@ 0x80
 800a3c4:	0449      	lsls	r1, r1, #17
 800a3c6:	430a      	orrs	r2, r1
 800a3c8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681a      	ldr	r2, [r3, #0]
 800a3ce:	2380      	movs	r3, #128	@ 0x80
 800a3d0:	011b      	lsls	r3, r3, #4
 800a3d2:	4013      	ands	r3, r2
 800a3d4:	d016      	beq.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a3da:	4a19      	ldr	r2, [pc, #100]	@ (800a440 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a3dc:	4013      	ands	r3, r2
 800a3de:	0019      	movs	r1, r3
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	691a      	ldr	r2, [r3, #16]
 800a3e4:	4b0b      	ldr	r3, [pc, #44]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3e6:	430a      	orrs	r2, r1
 800a3e8:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	2380      	movs	r3, #128	@ 0x80
 800a3f0:	01db      	lsls	r3, r3, #7
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d106      	bne.n	800a404 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a3f6:	4b07      	ldr	r3, [pc, #28]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	4b06      	ldr	r3, [pc, #24]	@ (800a414 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a3fc:	2180      	movs	r1, #128	@ 0x80
 800a3fe:	0249      	lsls	r1, r1, #9
 800a400:	430a      	orrs	r2, r1
 800a402:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a404:	2312      	movs	r3, #18
 800a406:	18fb      	adds	r3, r7, r3
 800a408:	781b      	ldrb	r3, [r3, #0]
}
 800a40a:	0018      	movs	r0, r3
 800a40c:	46bd      	mov	sp, r7
 800a40e:	b006      	add	sp, #24
 800a410:	bd80      	pop	{r7, pc}
 800a412:	46c0      	nop			@ (mov r8, r8)
 800a414:	40021000 	.word	0x40021000
 800a418:	40007000 	.word	0x40007000
 800a41c:	fffffcff 	.word	0xfffffcff
 800a420:	fffeffff 	.word	0xfffeffff
 800a424:	00001388 	.word	0x00001388
 800a428:	efffffff 	.word	0xefffffff
 800a42c:	fffff3ff 	.word	0xfffff3ff
 800a430:	fff3ffff 	.word	0xfff3ffff
 800a434:	ffcfffff 	.word	0xffcfffff
 800a438:	ffffcfff 	.word	0xffffcfff
 800a43c:	ffbfffff 	.word	0xffbfffff
 800a440:	ffff3fff 	.word	0xffff3fff

0800a444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d101      	bne.n	800a456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e056      	b.n	800a504 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	223d      	movs	r2, #61	@ 0x3d
 800a45a:	5c9b      	ldrb	r3, [r3, r2]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d113      	bne.n	800a48a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	223c      	movs	r2, #60	@ 0x3c
 800a466:	2100      	movs	r1, #0
 800a468:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	0018      	movs	r0, r3
 800a46e:	f002 f8c5 	bl	800c5fc <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a476:	2b00      	cmp	r3, #0
 800a478:	d102      	bne.n	800a480 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a23      	ldr	r2, [pc, #140]	@ (800a50c <HAL_TIM_Base_Init+0xc8>)
 800a47e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	0010      	movs	r0, r2
 800a488:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	223d      	movs	r2, #61	@ 0x3d
 800a48e:	2102      	movs	r1, #2
 800a490:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	3304      	adds	r3, #4
 800a49a:	0019      	movs	r1, r3
 800a49c:	0010      	movs	r0, r2
 800a49e:	f001 fbaf 	bl	800bc00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2248      	movs	r2, #72	@ 0x48
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	223e      	movs	r2, #62	@ 0x3e
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	5499      	strb	r1, [r3, r2]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	223f      	movs	r2, #63	@ 0x3f
 800a4b6:	2101      	movs	r1, #1
 800a4b8:	5499      	strb	r1, [r3, r2]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2240      	movs	r2, #64	@ 0x40
 800a4be:	2101      	movs	r1, #1
 800a4c0:	5499      	strb	r1, [r3, r2]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2241      	movs	r2, #65	@ 0x41
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	5499      	strb	r1, [r3, r2]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2242      	movs	r2, #66	@ 0x42
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	5499      	strb	r1, [r3, r2]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2243      	movs	r2, #67	@ 0x43
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2244      	movs	r2, #68	@ 0x44
 800a4de:	2101      	movs	r1, #1
 800a4e0:	5499      	strb	r1, [r3, r2]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2245      	movs	r2, #69	@ 0x45
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	5499      	strb	r1, [r3, r2]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2246      	movs	r2, #70	@ 0x46
 800a4ee:	2101      	movs	r1, #1
 800a4f0:	5499      	strb	r1, [r3, r2]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2247      	movs	r2, #71	@ 0x47
 800a4f6:	2101      	movs	r1, #1
 800a4f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	223d      	movs	r2, #61	@ 0x3d
 800a4fe:	2101      	movs	r1, #1
 800a500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	0018      	movs	r0, r3
 800a506:	46bd      	mov	sp, r7
 800a508:	b002      	add	sp, #8
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	08005b25 	.word	0x08005b25

0800a510 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	223d      	movs	r2, #61	@ 0x3d
 800a51c:	5c9b      	ldrb	r3, [r3, r2]
 800a51e:	b2db      	uxtb	r3, r3
 800a520:	2b01      	cmp	r3, #1
 800a522:	d001      	beq.n	800a528 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e035      	b.n	800a594 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	223d      	movs	r2, #61	@ 0x3d
 800a52c:	2102      	movs	r1, #2
 800a52e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	4a19      	ldr	r2, [pc, #100]	@ (800a59c <HAL_TIM_Base_Start+0x8c>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d00a      	beq.n	800a550 <HAL_TIM_Base_Start+0x40>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	2380      	movs	r3, #128	@ 0x80
 800a540:	05db      	lsls	r3, r3, #23
 800a542:	429a      	cmp	r2, r3
 800a544:	d004      	beq.n	800a550 <HAL_TIM_Base_Start+0x40>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a15      	ldr	r2, [pc, #84]	@ (800a5a0 <HAL_TIM_Base_Start+0x90>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d116      	bne.n	800a57e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	4a13      	ldr	r2, [pc, #76]	@ (800a5a4 <HAL_TIM_Base_Start+0x94>)
 800a558:	4013      	ands	r3, r2
 800a55a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2b06      	cmp	r3, #6
 800a560:	d016      	beq.n	800a590 <HAL_TIM_Base_Start+0x80>
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	2380      	movs	r3, #128	@ 0x80
 800a566:	025b      	lsls	r3, r3, #9
 800a568:	429a      	cmp	r2, r3
 800a56a:	d011      	beq.n	800a590 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2101      	movs	r1, #1
 800a578:	430a      	orrs	r2, r1
 800a57a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a57c:	e008      	b.n	800a590 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2101      	movs	r1, #1
 800a58a:	430a      	orrs	r2, r1
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e000      	b.n	800a592 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a590:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	0018      	movs	r0, r3
 800a596:	46bd      	mov	sp, r7
 800a598:	b004      	add	sp, #16
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	40012c00 	.word	0x40012c00
 800a5a0:	40000400 	.word	0x40000400
 800a5a4:	00010007 	.word	0x00010007

0800a5a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	223d      	movs	r2, #61	@ 0x3d
 800a5b4:	5c9b      	ldrb	r3, [r3, r2]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d001      	beq.n	800a5c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e03d      	b.n	800a63c <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	223d      	movs	r2, #61	@ 0x3d
 800a5c4:	2102      	movs	r1, #2
 800a5c6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	430a      	orrs	r2, r1
 800a5d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a19      	ldr	r2, [pc, #100]	@ (800a644 <HAL_TIM_Base_Start_IT+0x9c>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d00a      	beq.n	800a5f8 <HAL_TIM_Base_Start_IT+0x50>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	2380      	movs	r3, #128	@ 0x80
 800a5e8:	05db      	lsls	r3, r3, #23
 800a5ea:	429a      	cmp	r2, r3
 800a5ec:	d004      	beq.n	800a5f8 <HAL_TIM_Base_Start_IT+0x50>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a15      	ldr	r2, [pc, #84]	@ (800a648 <HAL_TIM_Base_Start_IT+0xa0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d116      	bne.n	800a626 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	4a13      	ldr	r2, [pc, #76]	@ (800a64c <HAL_TIM_Base_Start_IT+0xa4>)
 800a600:	4013      	ands	r3, r2
 800a602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2b06      	cmp	r3, #6
 800a608:	d016      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x90>
 800a60a:	68fa      	ldr	r2, [r7, #12]
 800a60c:	2380      	movs	r3, #128	@ 0x80
 800a60e:	025b      	lsls	r3, r3, #9
 800a610:	429a      	cmp	r2, r3
 800a612:	d011      	beq.n	800a638 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2101      	movs	r1, #1
 800a620:	430a      	orrs	r2, r1
 800a622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a624:	e008      	b.n	800a638 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2101      	movs	r1, #1
 800a632:	430a      	orrs	r2, r1
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	e000      	b.n	800a63a <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a638:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b004      	add	sp, #16
 800a642:	bd80      	pop	{r7, pc}
 800a644:	40012c00 	.word	0x40012c00
 800a648:	40000400 	.word	0x40000400
 800a64c:	00010007 	.word	0x00010007

0800a650 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e056      	b.n	800a710 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	223d      	movs	r2, #61	@ 0x3d
 800a666:	5c9b      	ldrb	r3, [r3, r2]
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d113      	bne.n	800a696 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	223c      	movs	r2, #60	@ 0x3c
 800a672:	2100      	movs	r1, #0
 800a674:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	0018      	movs	r0, r3
 800a67a:	f001 ffbf 	bl	800c5fc <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a23      	ldr	r2, [pc, #140]	@ (800a718 <HAL_TIM_OC_Init+0xc8>)
 800a68a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	0010      	movs	r0, r2
 800a694:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	223d      	movs	r2, #61	@ 0x3d
 800a69a:	2102      	movs	r1, #2
 800a69c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	0019      	movs	r1, r3
 800a6a8:	0010      	movs	r0, r2
 800a6aa:	f001 faa9 	bl	800bc00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2248      	movs	r2, #72	@ 0x48
 800a6b2:	2101      	movs	r1, #1
 800a6b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	223e      	movs	r2, #62	@ 0x3e
 800a6ba:	2101      	movs	r1, #1
 800a6bc:	5499      	strb	r1, [r3, r2]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	223f      	movs	r2, #63	@ 0x3f
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	5499      	strb	r1, [r3, r2]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2240      	movs	r2, #64	@ 0x40
 800a6ca:	2101      	movs	r1, #1
 800a6cc:	5499      	strb	r1, [r3, r2]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2241      	movs	r2, #65	@ 0x41
 800a6d2:	2101      	movs	r1, #1
 800a6d4:	5499      	strb	r1, [r3, r2]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2242      	movs	r2, #66	@ 0x42
 800a6da:	2101      	movs	r1, #1
 800a6dc:	5499      	strb	r1, [r3, r2]
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2243      	movs	r2, #67	@ 0x43
 800a6e2:	2101      	movs	r1, #1
 800a6e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2244      	movs	r2, #68	@ 0x44
 800a6ea:	2101      	movs	r1, #1
 800a6ec:	5499      	strb	r1, [r3, r2]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2245      	movs	r2, #69	@ 0x45
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	5499      	strb	r1, [r3, r2]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2246      	movs	r2, #70	@ 0x46
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	5499      	strb	r1, [r3, r2]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2247      	movs	r2, #71	@ 0x47
 800a702:	2101      	movs	r1, #1
 800a704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	223d      	movs	r2, #61	@ 0x3d
 800a70a:	2101      	movs	r1, #1
 800a70c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	0018      	movs	r0, r3
 800a712:	46bd      	mov	sp, r7
 800a714:	b002      	add	sp, #8
 800a716:	bd80      	pop	{r7, pc}
 800a718:	0800a71d 	.word	0x0800a71d

0800a71c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b082      	sub	sp, #8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a724:	46c0      	nop			@ (mov r8, r8)
 800a726:	46bd      	mov	sp, r7
 800a728:	b002      	add	sp, #8
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a736:	230f      	movs	r3, #15
 800a738:	18fb      	adds	r3, r7, r3
 800a73a:	2200      	movs	r2, #0
 800a73c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d108      	bne.n	800a756 <HAL_TIM_OC_Start_IT+0x2a>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	223e      	movs	r2, #62	@ 0x3e
 800a748:	5c9b      	ldrb	r3, [r3, r2]
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	3b01      	subs	r3, #1
 800a74e:	1e5a      	subs	r2, r3, #1
 800a750:	4193      	sbcs	r3, r2
 800a752:	b2db      	uxtb	r3, r3
 800a754:	e037      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x9a>
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b04      	cmp	r3, #4
 800a75a:	d108      	bne.n	800a76e <HAL_TIM_OC_Start_IT+0x42>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	223f      	movs	r2, #63	@ 0x3f
 800a760:	5c9b      	ldrb	r3, [r3, r2]
 800a762:	b2db      	uxtb	r3, r3
 800a764:	3b01      	subs	r3, #1
 800a766:	1e5a      	subs	r2, r3, #1
 800a768:	4193      	sbcs	r3, r2
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	e02b      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x9a>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	2b08      	cmp	r3, #8
 800a772:	d108      	bne.n	800a786 <HAL_TIM_OC_Start_IT+0x5a>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2240      	movs	r2, #64	@ 0x40
 800a778:	5c9b      	ldrb	r3, [r3, r2]
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	3b01      	subs	r3, #1
 800a77e:	1e5a      	subs	r2, r3, #1
 800a780:	4193      	sbcs	r3, r2
 800a782:	b2db      	uxtb	r3, r3
 800a784:	e01f      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x9a>
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	2b0c      	cmp	r3, #12
 800a78a:	d108      	bne.n	800a79e <HAL_TIM_OC_Start_IT+0x72>
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2241      	movs	r2, #65	@ 0x41
 800a790:	5c9b      	ldrb	r3, [r3, r2]
 800a792:	b2db      	uxtb	r3, r3
 800a794:	3b01      	subs	r3, #1
 800a796:	1e5a      	subs	r2, r3, #1
 800a798:	4193      	sbcs	r3, r2
 800a79a:	b2db      	uxtb	r3, r3
 800a79c:	e013      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x9a>
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b10      	cmp	r3, #16
 800a7a2:	d108      	bne.n	800a7b6 <HAL_TIM_OC_Start_IT+0x8a>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2242      	movs	r2, #66	@ 0x42
 800a7a8:	5c9b      	ldrb	r3, [r3, r2]
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	1e5a      	subs	r2, r3, #1
 800a7b0:	4193      	sbcs	r3, r2
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	e007      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2243      	movs	r2, #67	@ 0x43
 800a7ba:	5c9b      	ldrb	r3, [r3, r2]
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	3b01      	subs	r3, #1
 800a7c0:	1e5a      	subs	r2, r3, #1
 800a7c2:	4193      	sbcs	r3, r2
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d001      	beq.n	800a7ce <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	e0c4      	b.n	800a958 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d104      	bne.n	800a7de <HAL_TIM_OC_Start_IT+0xb2>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	223e      	movs	r2, #62	@ 0x3e
 800a7d8:	2102      	movs	r1, #2
 800a7da:	5499      	strb	r1, [r3, r2]
 800a7dc:	e023      	b.n	800a826 <HAL_TIM_OC_Start_IT+0xfa>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b04      	cmp	r3, #4
 800a7e2:	d104      	bne.n	800a7ee <HAL_TIM_OC_Start_IT+0xc2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	223f      	movs	r2, #63	@ 0x3f
 800a7e8:	2102      	movs	r1, #2
 800a7ea:	5499      	strb	r1, [r3, r2]
 800a7ec:	e01b      	b.n	800a826 <HAL_TIM_OC_Start_IT+0xfa>
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	2b08      	cmp	r3, #8
 800a7f2:	d104      	bne.n	800a7fe <HAL_TIM_OC_Start_IT+0xd2>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2240      	movs	r2, #64	@ 0x40
 800a7f8:	2102      	movs	r1, #2
 800a7fa:	5499      	strb	r1, [r3, r2]
 800a7fc:	e013      	b.n	800a826 <HAL_TIM_OC_Start_IT+0xfa>
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b0c      	cmp	r3, #12
 800a802:	d104      	bne.n	800a80e <HAL_TIM_OC_Start_IT+0xe2>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2241      	movs	r2, #65	@ 0x41
 800a808:	2102      	movs	r1, #2
 800a80a:	5499      	strb	r1, [r3, r2]
 800a80c:	e00b      	b.n	800a826 <HAL_TIM_OC_Start_IT+0xfa>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	2b10      	cmp	r3, #16
 800a812:	d104      	bne.n	800a81e <HAL_TIM_OC_Start_IT+0xf2>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2242      	movs	r2, #66	@ 0x42
 800a818:	2102      	movs	r1, #2
 800a81a:	5499      	strb	r1, [r3, r2]
 800a81c:	e003      	b.n	800a826 <HAL_TIM_OC_Start_IT+0xfa>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2243      	movs	r2, #67	@ 0x43
 800a822:	2102      	movs	r1, #2
 800a824:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b0c      	cmp	r3, #12
 800a82a:	d02a      	beq.n	800a882 <HAL_TIM_OC_Start_IT+0x156>
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2b0c      	cmp	r3, #12
 800a830:	d830      	bhi.n	800a894 <HAL_TIM_OC_Start_IT+0x168>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	2b08      	cmp	r3, #8
 800a836:	d01b      	beq.n	800a870 <HAL_TIM_OC_Start_IT+0x144>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b08      	cmp	r3, #8
 800a83c:	d82a      	bhi.n	800a894 <HAL_TIM_OC_Start_IT+0x168>
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d003      	beq.n	800a84c <HAL_TIM_OC_Start_IT+0x120>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	2b04      	cmp	r3, #4
 800a848:	d009      	beq.n	800a85e <HAL_TIM_OC_Start_IT+0x132>
 800a84a:	e023      	b.n	800a894 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68da      	ldr	r2, [r3, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	2102      	movs	r1, #2
 800a858:	430a      	orrs	r2, r1
 800a85a:	60da      	str	r2, [r3, #12]
      break;
 800a85c:	e01f      	b.n	800a89e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	68da      	ldr	r2, [r3, #12]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2104      	movs	r1, #4
 800a86a:	430a      	orrs	r2, r1
 800a86c:	60da      	str	r2, [r3, #12]
      break;
 800a86e:	e016      	b.n	800a89e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68da      	ldr	r2, [r3, #12]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2108      	movs	r1, #8
 800a87c:	430a      	orrs	r2, r1
 800a87e:	60da      	str	r2, [r3, #12]
      break;
 800a880:	e00d      	b.n	800a89e <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	2110      	movs	r1, #16
 800a88e:	430a      	orrs	r2, r1
 800a890:	60da      	str	r2, [r3, #12]
      break;
 800a892:	e004      	b.n	800a89e <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800a894:	230f      	movs	r3, #15
 800a896:	18fb      	adds	r3, r7, r3
 800a898:	2201      	movs	r2, #1
 800a89a:	701a      	strb	r2, [r3, #0]
      break;
 800a89c:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a89e:	230f      	movs	r3, #15
 800a8a0:	18fb      	adds	r3, r7, r3
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d154      	bne.n	800a952 <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	0018      	movs	r0, r3
 800a8b2:	f001 fe7f 	bl	800c5b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a29      	ldr	r2, [pc, #164]	@ (800a960 <HAL_TIM_OC_Start_IT+0x234>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d009      	beq.n	800a8d4 <HAL_TIM_OC_Start_IT+0x1a8>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a27      	ldr	r2, [pc, #156]	@ (800a964 <HAL_TIM_OC_Start_IT+0x238>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d004      	beq.n	800a8d4 <HAL_TIM_OC_Start_IT+0x1a8>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a26      	ldr	r2, [pc, #152]	@ (800a968 <HAL_TIM_OC_Start_IT+0x23c>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIM_OC_Start_IT+0x1ac>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e000      	b.n	800a8da <HAL_TIM_OC_Start_IT+0x1ae>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d008      	beq.n	800a8f0 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2180      	movs	r1, #128	@ 0x80
 800a8ea:	0209      	lsls	r1, r1, #8
 800a8ec:	430a      	orrs	r2, r1
 800a8ee:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a1a      	ldr	r2, [pc, #104]	@ (800a960 <HAL_TIM_OC_Start_IT+0x234>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d00a      	beq.n	800a910 <HAL_TIM_OC_Start_IT+0x1e4>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	2380      	movs	r3, #128	@ 0x80
 800a900:	05db      	lsls	r3, r3, #23
 800a902:	429a      	cmp	r2, r3
 800a904:	d004      	beq.n	800a910 <HAL_TIM_OC_Start_IT+0x1e4>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a18      	ldr	r2, [pc, #96]	@ (800a96c <HAL_TIM_OC_Start_IT+0x240>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d116      	bne.n	800a93e <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	4a16      	ldr	r2, [pc, #88]	@ (800a970 <HAL_TIM_OC_Start_IT+0x244>)
 800a918:	4013      	ands	r3, r2
 800a91a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b06      	cmp	r3, #6
 800a920:	d016      	beq.n	800a950 <HAL_TIM_OC_Start_IT+0x224>
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	2380      	movs	r3, #128	@ 0x80
 800a926:	025b      	lsls	r3, r3, #9
 800a928:	429a      	cmp	r2, r3
 800a92a:	d011      	beq.n	800a950 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2101      	movs	r1, #1
 800a938:	430a      	orrs	r2, r1
 800a93a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a93c:	e008      	b.n	800a950 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	2101      	movs	r1, #1
 800a94a:	430a      	orrs	r2, r1
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e000      	b.n	800a952 <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a950:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a952:	230f      	movs	r3, #15
 800a954:	18fb      	adds	r3, r7, r3
 800a956:	781b      	ldrb	r3, [r3, #0]
}
 800a958:	0018      	movs	r0, r3
 800a95a:	46bd      	mov	sp, r7
 800a95c:	b004      	add	sp, #16
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	40012c00 	.word	0x40012c00
 800a964:	40014400 	.word	0x40014400
 800a968:	40014800 	.word	0x40014800
 800a96c:	40000400 	.word	0x40000400
 800a970:	00010007 	.word	0x00010007

0800a974 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a97e:	230f      	movs	r3, #15
 800a980:	18fb      	adds	r3, r7, r3
 800a982:	2200      	movs	r2, #0
 800a984:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b0c      	cmp	r3, #12
 800a98a:	d02a      	beq.n	800a9e2 <HAL_TIM_OC_Stop_IT+0x6e>
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	2b0c      	cmp	r3, #12
 800a990:	d830      	bhi.n	800a9f4 <HAL_TIM_OC_Stop_IT+0x80>
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	2b08      	cmp	r3, #8
 800a996:	d01b      	beq.n	800a9d0 <HAL_TIM_OC_Stop_IT+0x5c>
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	2b08      	cmp	r3, #8
 800a99c:	d82a      	bhi.n	800a9f4 <HAL_TIM_OC_Stop_IT+0x80>
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d003      	beq.n	800a9ac <HAL_TIM_OC_Stop_IT+0x38>
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d009      	beq.n	800a9be <HAL_TIM_OC_Stop_IT+0x4a>
 800a9aa:	e023      	b.n	800a9f4 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68da      	ldr	r2, [r3, #12]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2102      	movs	r1, #2
 800a9b8:	438a      	bics	r2, r1
 800a9ba:	60da      	str	r2, [r3, #12]
      break;
 800a9bc:	e01f      	b.n	800a9fe <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	68da      	ldr	r2, [r3, #12]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2104      	movs	r1, #4
 800a9ca:	438a      	bics	r2, r1
 800a9cc:	60da      	str	r2, [r3, #12]
      break;
 800a9ce:	e016      	b.n	800a9fe <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68da      	ldr	r2, [r3, #12]
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2108      	movs	r1, #8
 800a9dc:	438a      	bics	r2, r1
 800a9de:	60da      	str	r2, [r3, #12]
      break;
 800a9e0:	e00d      	b.n	800a9fe <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68da      	ldr	r2, [r3, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2110      	movs	r1, #16
 800a9ee:	438a      	bics	r2, r1
 800a9f0:	60da      	str	r2, [r3, #12]
      break;
 800a9f2:	e004      	b.n	800a9fe <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800a9f4:	230f      	movs	r3, #15
 800a9f6:	18fb      	adds	r3, r7, r3
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]
      break;
 800a9fc:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a9fe:	230f      	movs	r3, #15
 800aa00:	18fb      	adds	r3, r7, r3
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d000      	beq.n	800aa0a <HAL_TIM_OC_Stop_IT+0x96>
 800aa08:	e06e      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	2200      	movs	r2, #0
 800aa12:	0018      	movs	r0, r3
 800aa14:	f001 fdce 	bl	800c5b4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a36      	ldr	r2, [pc, #216]	@ (800aaf8 <HAL_TIM_OC_Stop_IT+0x184>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d009      	beq.n	800aa36 <HAL_TIM_OC_Stop_IT+0xc2>
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a35      	ldr	r2, [pc, #212]	@ (800aafc <HAL_TIM_OC_Stop_IT+0x188>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d004      	beq.n	800aa36 <HAL_TIM_OC_Stop_IT+0xc2>
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a33      	ldr	r2, [pc, #204]	@ (800ab00 <HAL_TIM_OC_Stop_IT+0x18c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d101      	bne.n	800aa3a <HAL_TIM_OC_Stop_IT+0xc6>
 800aa36:	2301      	movs	r3, #1
 800aa38:	e000      	b.n	800aa3c <HAL_TIM_OC_Stop_IT+0xc8>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d013      	beq.n	800aa68 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	4a2f      	ldr	r2, [pc, #188]	@ (800ab04 <HAL_TIM_OC_Stop_IT+0x190>)
 800aa48:	4013      	ands	r3, r2
 800aa4a:	d10d      	bne.n	800aa68 <HAL_TIM_OC_Stop_IT+0xf4>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	4a2d      	ldr	r2, [pc, #180]	@ (800ab08 <HAL_TIM_OC_Stop_IT+0x194>)
 800aa54:	4013      	ands	r3, r2
 800aa56:	d107      	bne.n	800aa68 <HAL_TIM_OC_Stop_IT+0xf4>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	492a      	ldr	r1, [pc, #168]	@ (800ab0c <HAL_TIM_OC_Stop_IT+0x198>)
 800aa64:	400a      	ands	r2, r1
 800aa66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	4a25      	ldr	r2, [pc, #148]	@ (800ab04 <HAL_TIM_OC_Stop_IT+0x190>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	d10d      	bne.n	800aa90 <HAL_TIM_OC_Stop_IT+0x11c>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	6a1b      	ldr	r3, [r3, #32]
 800aa7a:	4a23      	ldr	r2, [pc, #140]	@ (800ab08 <HAL_TIM_OC_Stop_IT+0x194>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	d107      	bne.n	800aa90 <HAL_TIM_OC_Stop_IT+0x11c>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2101      	movs	r1, #1
 800aa8c:	438a      	bics	r2, r1
 800aa8e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d104      	bne.n	800aaa0 <HAL_TIM_OC_Stop_IT+0x12c>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	223e      	movs	r2, #62	@ 0x3e
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	5499      	strb	r1, [r3, r2]
 800aa9e:	e023      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d104      	bne.n	800aab0 <HAL_TIM_OC_Stop_IT+0x13c>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	223f      	movs	r2, #63	@ 0x3f
 800aaaa:	2101      	movs	r1, #1
 800aaac:	5499      	strb	r1, [r3, r2]
 800aaae:	e01b      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b08      	cmp	r3, #8
 800aab4:	d104      	bne.n	800aac0 <HAL_TIM_OC_Stop_IT+0x14c>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2240      	movs	r2, #64	@ 0x40
 800aaba:	2101      	movs	r1, #1
 800aabc:	5499      	strb	r1, [r3, r2]
 800aabe:	e013      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	2b0c      	cmp	r3, #12
 800aac4:	d104      	bne.n	800aad0 <HAL_TIM_OC_Stop_IT+0x15c>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2241      	movs	r2, #65	@ 0x41
 800aaca:	2101      	movs	r1, #1
 800aacc:	5499      	strb	r1, [r3, r2]
 800aace:	e00b      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	2b10      	cmp	r3, #16
 800aad4:	d104      	bne.n	800aae0 <HAL_TIM_OC_Stop_IT+0x16c>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2242      	movs	r2, #66	@ 0x42
 800aada:	2101      	movs	r1, #1
 800aadc:	5499      	strb	r1, [r3, r2]
 800aade:	e003      	b.n	800aae8 <HAL_TIM_OC_Stop_IT+0x174>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2243      	movs	r2, #67	@ 0x43
 800aae4:	2101      	movs	r1, #1
 800aae6:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800aae8:	230f      	movs	r3, #15
 800aaea:	18fb      	adds	r3, r7, r3
 800aaec:	781b      	ldrb	r3, [r3, #0]
}
 800aaee:	0018      	movs	r0, r3
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	b004      	add	sp, #16
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	46c0      	nop			@ (mov r8, r8)
 800aaf8:	40012c00 	.word	0x40012c00
 800aafc:	40014400 	.word	0x40014400
 800ab00:	40014800 	.word	0x40014800
 800ab04:	00001111 	.word	0x00001111
 800ab08:	00000444 	.word	0x00000444
 800ab0c:	ffff7fff 	.word	0xffff7fff

0800ab10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e056      	b.n	800abd0 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	223d      	movs	r2, #61	@ 0x3d
 800ab26:	5c9b      	ldrb	r3, [r3, r2]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d113      	bne.n	800ab56 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	223c      	movs	r2, #60	@ 0x3c
 800ab32:	2100      	movs	r1, #0
 800ab34:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	0018      	movs	r0, r3
 800ab3a:	f001 fd5f 	bl	800c5fc <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d102      	bne.n	800ab4c <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	4a23      	ldr	r2, [pc, #140]	@ (800abd8 <HAL_TIM_PWM_Init+0xc8>)
 800ab4a:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	0010      	movs	r0, r2
 800ab54:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	223d      	movs	r2, #61	@ 0x3d
 800ab5a:	2102      	movs	r1, #2
 800ab5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	3304      	adds	r3, #4
 800ab66:	0019      	movs	r1, r3
 800ab68:	0010      	movs	r0, r2
 800ab6a:	f001 f849 	bl	800bc00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2248      	movs	r2, #72	@ 0x48
 800ab72:	2101      	movs	r1, #1
 800ab74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	223e      	movs	r2, #62	@ 0x3e
 800ab7a:	2101      	movs	r1, #1
 800ab7c:	5499      	strb	r1, [r3, r2]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	223f      	movs	r2, #63	@ 0x3f
 800ab82:	2101      	movs	r1, #1
 800ab84:	5499      	strb	r1, [r3, r2]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2240      	movs	r2, #64	@ 0x40
 800ab8a:	2101      	movs	r1, #1
 800ab8c:	5499      	strb	r1, [r3, r2]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2241      	movs	r2, #65	@ 0x41
 800ab92:	2101      	movs	r1, #1
 800ab94:	5499      	strb	r1, [r3, r2]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2242      	movs	r2, #66	@ 0x42
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	5499      	strb	r1, [r3, r2]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2243      	movs	r2, #67	@ 0x43
 800aba2:	2101      	movs	r1, #1
 800aba4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2244      	movs	r2, #68	@ 0x44
 800abaa:	2101      	movs	r1, #1
 800abac:	5499      	strb	r1, [r3, r2]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2245      	movs	r2, #69	@ 0x45
 800abb2:	2101      	movs	r1, #1
 800abb4:	5499      	strb	r1, [r3, r2]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2246      	movs	r2, #70	@ 0x46
 800abba:	2101      	movs	r1, #1
 800abbc:	5499      	strb	r1, [r3, r2]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2247      	movs	r2, #71	@ 0x47
 800abc2:	2101      	movs	r1, #1
 800abc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	223d      	movs	r2, #61	@ 0x3d
 800abca:	2101      	movs	r1, #1
 800abcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	0018      	movs	r0, r3
 800abd2:	46bd      	mov	sp, r7
 800abd4:	b002      	add	sp, #8
 800abd6:	bd80      	pop	{r7, pc}
 800abd8:	0800abdd 	.word	0x0800abdd

0800abdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abe4:	46c0      	nop			@ (mov r8, r8)
 800abe6:	46bd      	mov	sp, r7
 800abe8:	b002      	add	sp, #8
 800abea:	bd80      	pop	{r7, pc}

0800abec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d108      	bne.n	800ac0e <HAL_TIM_PWM_Start+0x22>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	223e      	movs	r2, #62	@ 0x3e
 800ac00:	5c9b      	ldrb	r3, [r3, r2]
 800ac02:	b2db      	uxtb	r3, r3
 800ac04:	3b01      	subs	r3, #1
 800ac06:	1e5a      	subs	r2, r3, #1
 800ac08:	4193      	sbcs	r3, r2
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	e037      	b.n	800ac7e <HAL_TIM_PWM_Start+0x92>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d108      	bne.n	800ac26 <HAL_TIM_PWM_Start+0x3a>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	223f      	movs	r2, #63	@ 0x3f
 800ac18:	5c9b      	ldrb	r3, [r3, r2]
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	1e5a      	subs	r2, r3, #1
 800ac20:	4193      	sbcs	r3, r2
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	e02b      	b.n	800ac7e <HAL_TIM_PWM_Start+0x92>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d108      	bne.n	800ac3e <HAL_TIM_PWM_Start+0x52>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2240      	movs	r2, #64	@ 0x40
 800ac30:	5c9b      	ldrb	r3, [r3, r2]
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	3b01      	subs	r3, #1
 800ac36:	1e5a      	subs	r2, r3, #1
 800ac38:	4193      	sbcs	r3, r2
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	e01f      	b.n	800ac7e <HAL_TIM_PWM_Start+0x92>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	2b0c      	cmp	r3, #12
 800ac42:	d108      	bne.n	800ac56 <HAL_TIM_PWM_Start+0x6a>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2241      	movs	r2, #65	@ 0x41
 800ac48:	5c9b      	ldrb	r3, [r3, r2]
 800ac4a:	b2db      	uxtb	r3, r3
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	1e5a      	subs	r2, r3, #1
 800ac50:	4193      	sbcs	r3, r2
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	e013      	b.n	800ac7e <HAL_TIM_PWM_Start+0x92>
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	2b10      	cmp	r3, #16
 800ac5a:	d108      	bne.n	800ac6e <HAL_TIM_PWM_Start+0x82>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2242      	movs	r2, #66	@ 0x42
 800ac60:	5c9b      	ldrb	r3, [r3, r2]
 800ac62:	b2db      	uxtb	r3, r3
 800ac64:	3b01      	subs	r3, #1
 800ac66:	1e5a      	subs	r2, r3, #1
 800ac68:	4193      	sbcs	r3, r2
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	e007      	b.n	800ac7e <HAL_TIM_PWM_Start+0x92>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2243      	movs	r2, #67	@ 0x43
 800ac72:	5c9b      	ldrb	r3, [r3, r2]
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	3b01      	subs	r3, #1
 800ac78:	1e5a      	subs	r2, r3, #1
 800ac7a:	4193      	sbcs	r3, r2
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d001      	beq.n	800ac86 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	e081      	b.n	800ad8a <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d104      	bne.n	800ac96 <HAL_TIM_PWM_Start+0xaa>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	223e      	movs	r2, #62	@ 0x3e
 800ac90:	2102      	movs	r1, #2
 800ac92:	5499      	strb	r1, [r3, r2]
 800ac94:	e023      	b.n	800acde <HAL_TIM_PWM_Start+0xf2>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b04      	cmp	r3, #4
 800ac9a:	d104      	bne.n	800aca6 <HAL_TIM_PWM_Start+0xba>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	223f      	movs	r2, #63	@ 0x3f
 800aca0:	2102      	movs	r1, #2
 800aca2:	5499      	strb	r1, [r3, r2]
 800aca4:	e01b      	b.n	800acde <HAL_TIM_PWM_Start+0xf2>
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	2b08      	cmp	r3, #8
 800acaa:	d104      	bne.n	800acb6 <HAL_TIM_PWM_Start+0xca>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2240      	movs	r2, #64	@ 0x40
 800acb0:	2102      	movs	r1, #2
 800acb2:	5499      	strb	r1, [r3, r2]
 800acb4:	e013      	b.n	800acde <HAL_TIM_PWM_Start+0xf2>
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	2b0c      	cmp	r3, #12
 800acba:	d104      	bne.n	800acc6 <HAL_TIM_PWM_Start+0xda>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2241      	movs	r2, #65	@ 0x41
 800acc0:	2102      	movs	r1, #2
 800acc2:	5499      	strb	r1, [r3, r2]
 800acc4:	e00b      	b.n	800acde <HAL_TIM_PWM_Start+0xf2>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	2b10      	cmp	r3, #16
 800acca:	d104      	bne.n	800acd6 <HAL_TIM_PWM_Start+0xea>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2242      	movs	r2, #66	@ 0x42
 800acd0:	2102      	movs	r1, #2
 800acd2:	5499      	strb	r1, [r3, r2]
 800acd4:	e003      	b.n	800acde <HAL_TIM_PWM_Start+0xf2>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2243      	movs	r2, #67	@ 0x43
 800acda:	2102      	movs	r1, #2
 800acdc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	2201      	movs	r2, #1
 800ace6:	0018      	movs	r0, r3
 800ace8:	f001 fc64 	bl	800c5b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a28      	ldr	r2, [pc, #160]	@ (800ad94 <HAL_TIM_PWM_Start+0x1a8>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d009      	beq.n	800ad0a <HAL_TIM_PWM_Start+0x11e>
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	4a27      	ldr	r2, [pc, #156]	@ (800ad98 <HAL_TIM_PWM_Start+0x1ac>)
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d004      	beq.n	800ad0a <HAL_TIM_PWM_Start+0x11e>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a25      	ldr	r2, [pc, #148]	@ (800ad9c <HAL_TIM_PWM_Start+0x1b0>)
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d101      	bne.n	800ad0e <HAL_TIM_PWM_Start+0x122>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e000      	b.n	800ad10 <HAL_TIM_PWM_Start+0x124>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d008      	beq.n	800ad26 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2180      	movs	r1, #128	@ 0x80
 800ad20:	0209      	lsls	r1, r1, #8
 800ad22:	430a      	orrs	r2, r1
 800ad24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a1a      	ldr	r2, [pc, #104]	@ (800ad94 <HAL_TIM_PWM_Start+0x1a8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d00a      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x15a>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681a      	ldr	r2, [r3, #0]
 800ad34:	2380      	movs	r3, #128	@ 0x80
 800ad36:	05db      	lsls	r3, r3, #23
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d004      	beq.n	800ad46 <HAL_TIM_PWM_Start+0x15a>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a17      	ldr	r2, [pc, #92]	@ (800ada0 <HAL_TIM_PWM_Start+0x1b4>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d116      	bne.n	800ad74 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	689b      	ldr	r3, [r3, #8]
 800ad4c:	4a15      	ldr	r2, [pc, #84]	@ (800ada4 <HAL_TIM_PWM_Start+0x1b8>)
 800ad4e:	4013      	ands	r3, r2
 800ad50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2b06      	cmp	r3, #6
 800ad56:	d016      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19a>
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	2380      	movs	r3, #128	@ 0x80
 800ad5c:	025b      	lsls	r3, r3, #9
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d011      	beq.n	800ad86 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	430a      	orrs	r2, r1
 800ad70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad72:	e008      	b.n	800ad86 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2101      	movs	r1, #1
 800ad80:	430a      	orrs	r2, r1
 800ad82:	601a      	str	r2, [r3, #0]
 800ad84:	e000      	b.n	800ad88 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad86:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	0018      	movs	r0, r3
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	b004      	add	sp, #16
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	46c0      	nop			@ (mov r8, r8)
 800ad94:	40012c00 	.word	0x40012c00
 800ad98:	40014400 	.word	0x40014400
 800ad9c:	40014800 	.word	0x40014800
 800ada0:	40000400 	.word	0x40000400
 800ada4:	00010007 	.word	0x00010007

0800ada8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e056      	b.n	800ae68 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	223d      	movs	r2, #61	@ 0x3d
 800adbe:	5c9b      	ldrb	r3, [r3, r2]
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d113      	bne.n	800adee <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	223c      	movs	r2, #60	@ 0x3c
 800adca:	2100      	movs	r1, #0
 800adcc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	0018      	movs	r0, r3
 800add2:	f001 fc13 	bl	800c5fc <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	4a23      	ldr	r2, [pc, #140]	@ (800ae70 <HAL_TIM_IC_Init+0xc8>)
 800ade2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ade8:	687a      	ldr	r2, [r7, #4]
 800adea:	0010      	movs	r0, r2
 800adec:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	223d      	movs	r2, #61	@ 0x3d
 800adf2:	2102      	movs	r1, #2
 800adf4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	3304      	adds	r3, #4
 800adfe:	0019      	movs	r1, r3
 800ae00:	0010      	movs	r0, r2
 800ae02:	f000 fefd 	bl	800bc00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2248      	movs	r2, #72	@ 0x48
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	223e      	movs	r2, #62	@ 0x3e
 800ae12:	2101      	movs	r1, #1
 800ae14:	5499      	strb	r1, [r3, r2]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	223f      	movs	r2, #63	@ 0x3f
 800ae1a:	2101      	movs	r1, #1
 800ae1c:	5499      	strb	r1, [r3, r2]
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2240      	movs	r2, #64	@ 0x40
 800ae22:	2101      	movs	r1, #1
 800ae24:	5499      	strb	r1, [r3, r2]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2241      	movs	r2, #65	@ 0x41
 800ae2a:	2101      	movs	r1, #1
 800ae2c:	5499      	strb	r1, [r3, r2]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2242      	movs	r2, #66	@ 0x42
 800ae32:	2101      	movs	r1, #1
 800ae34:	5499      	strb	r1, [r3, r2]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2243      	movs	r2, #67	@ 0x43
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2244      	movs	r2, #68	@ 0x44
 800ae42:	2101      	movs	r1, #1
 800ae44:	5499      	strb	r1, [r3, r2]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2245      	movs	r2, #69	@ 0x45
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	5499      	strb	r1, [r3, r2]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2246      	movs	r2, #70	@ 0x46
 800ae52:	2101      	movs	r1, #1
 800ae54:	5499      	strb	r1, [r3, r2]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2247      	movs	r2, #71	@ 0x47
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	223d      	movs	r2, #61	@ 0x3d
 800ae62:	2101      	movs	r1, #1
 800ae64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0800ae75 	.word	0x0800ae75

0800ae74 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800ae7c:	46c0      	nop			@ (mov r8, r8)
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b002      	add	sp, #8
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae8e:	230f      	movs	r3, #15
 800ae90:	18fb      	adds	r3, r7, r3
 800ae92:	2200      	movs	r2, #0
 800ae94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d104      	bne.n	800aea6 <HAL_TIM_IC_Start_IT+0x22>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	223e      	movs	r2, #62	@ 0x3e
 800aea0:	5c9b      	ldrb	r3, [r3, r2]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	e023      	b.n	800aeee <HAL_TIM_IC_Start_IT+0x6a>
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b04      	cmp	r3, #4
 800aeaa:	d104      	bne.n	800aeb6 <HAL_TIM_IC_Start_IT+0x32>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	223f      	movs	r2, #63	@ 0x3f
 800aeb0:	5c9b      	ldrb	r3, [r3, r2]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	e01b      	b.n	800aeee <HAL_TIM_IC_Start_IT+0x6a>
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	2b08      	cmp	r3, #8
 800aeba:	d104      	bne.n	800aec6 <HAL_TIM_IC_Start_IT+0x42>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2240      	movs	r2, #64	@ 0x40
 800aec0:	5c9b      	ldrb	r3, [r3, r2]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	e013      	b.n	800aeee <HAL_TIM_IC_Start_IT+0x6a>
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b0c      	cmp	r3, #12
 800aeca:	d104      	bne.n	800aed6 <HAL_TIM_IC_Start_IT+0x52>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2241      	movs	r2, #65	@ 0x41
 800aed0:	5c9b      	ldrb	r3, [r3, r2]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	e00b      	b.n	800aeee <HAL_TIM_IC_Start_IT+0x6a>
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	2b10      	cmp	r3, #16
 800aeda:	d104      	bne.n	800aee6 <HAL_TIM_IC_Start_IT+0x62>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2242      	movs	r2, #66	@ 0x42
 800aee0:	5c9b      	ldrb	r3, [r3, r2]
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	e003      	b.n	800aeee <HAL_TIM_IC_Start_IT+0x6a>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2243      	movs	r2, #67	@ 0x43
 800aeea:	5c9b      	ldrb	r3, [r3, r2]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	220e      	movs	r2, #14
 800aef0:	18ba      	adds	r2, r7, r2
 800aef2:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d104      	bne.n	800af04 <HAL_TIM_IC_Start_IT+0x80>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2244      	movs	r2, #68	@ 0x44
 800aefe:	5c9b      	ldrb	r3, [r3, r2]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	e013      	b.n	800af2c <HAL_TIM_IC_Start_IT+0xa8>
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	2b04      	cmp	r3, #4
 800af08:	d104      	bne.n	800af14 <HAL_TIM_IC_Start_IT+0x90>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2245      	movs	r2, #69	@ 0x45
 800af0e:	5c9b      	ldrb	r3, [r3, r2]
 800af10:	b2db      	uxtb	r3, r3
 800af12:	e00b      	b.n	800af2c <HAL_TIM_IC_Start_IT+0xa8>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b08      	cmp	r3, #8
 800af18:	d104      	bne.n	800af24 <HAL_TIM_IC_Start_IT+0xa0>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2246      	movs	r2, #70	@ 0x46
 800af1e:	5c9b      	ldrb	r3, [r3, r2]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	e003      	b.n	800af2c <HAL_TIM_IC_Start_IT+0xa8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2247      	movs	r2, #71	@ 0x47
 800af28:	5c9b      	ldrb	r3, [r3, r2]
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	210d      	movs	r1, #13
 800af2e:	187a      	adds	r2, r7, r1
 800af30:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800af32:	230e      	movs	r3, #14
 800af34:	18fb      	adds	r3, r7, r3
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d103      	bne.n	800af44 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800af3c:	187b      	adds	r3, r7, r1
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d001      	beq.n	800af48 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e0c3      	b.n	800b0d0 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d104      	bne.n	800af58 <HAL_TIM_IC_Start_IT+0xd4>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	223e      	movs	r2, #62	@ 0x3e
 800af52:	2102      	movs	r1, #2
 800af54:	5499      	strb	r1, [r3, r2]
 800af56:	e023      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x11c>
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	d104      	bne.n	800af68 <HAL_TIM_IC_Start_IT+0xe4>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	223f      	movs	r2, #63	@ 0x3f
 800af62:	2102      	movs	r1, #2
 800af64:	5499      	strb	r1, [r3, r2]
 800af66:	e01b      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x11c>
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2b08      	cmp	r3, #8
 800af6c:	d104      	bne.n	800af78 <HAL_TIM_IC_Start_IT+0xf4>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2240      	movs	r2, #64	@ 0x40
 800af72:	2102      	movs	r1, #2
 800af74:	5499      	strb	r1, [r3, r2]
 800af76:	e013      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x11c>
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b0c      	cmp	r3, #12
 800af7c:	d104      	bne.n	800af88 <HAL_TIM_IC_Start_IT+0x104>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2241      	movs	r2, #65	@ 0x41
 800af82:	2102      	movs	r1, #2
 800af84:	5499      	strb	r1, [r3, r2]
 800af86:	e00b      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x11c>
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	2b10      	cmp	r3, #16
 800af8c:	d104      	bne.n	800af98 <HAL_TIM_IC_Start_IT+0x114>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2242      	movs	r2, #66	@ 0x42
 800af92:	2102      	movs	r1, #2
 800af94:	5499      	strb	r1, [r3, r2]
 800af96:	e003      	b.n	800afa0 <HAL_TIM_IC_Start_IT+0x11c>
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2243      	movs	r2, #67	@ 0x43
 800af9c:	2102      	movs	r1, #2
 800af9e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <HAL_TIM_IC_Start_IT+0x12c>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2244      	movs	r2, #68	@ 0x44
 800afaa:	2102      	movs	r1, #2
 800afac:	5499      	strb	r1, [r3, r2]
 800afae:	e013      	b.n	800afd8 <HAL_TIM_IC_Start_IT+0x154>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	d104      	bne.n	800afc0 <HAL_TIM_IC_Start_IT+0x13c>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2245      	movs	r2, #69	@ 0x45
 800afba:	2102      	movs	r1, #2
 800afbc:	5499      	strb	r1, [r3, r2]
 800afbe:	e00b      	b.n	800afd8 <HAL_TIM_IC_Start_IT+0x154>
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	d104      	bne.n	800afd0 <HAL_TIM_IC_Start_IT+0x14c>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2246      	movs	r2, #70	@ 0x46
 800afca:	2102      	movs	r1, #2
 800afcc:	5499      	strb	r1, [r3, r2]
 800afce:	e003      	b.n	800afd8 <HAL_TIM_IC_Start_IT+0x154>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2247      	movs	r2, #71	@ 0x47
 800afd4:	2102      	movs	r1, #2
 800afd6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	2b0c      	cmp	r3, #12
 800afdc:	d02a      	beq.n	800b034 <HAL_TIM_IC_Start_IT+0x1b0>
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b0c      	cmp	r3, #12
 800afe2:	d830      	bhi.n	800b046 <HAL_TIM_IC_Start_IT+0x1c2>
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	2b08      	cmp	r3, #8
 800afe8:	d01b      	beq.n	800b022 <HAL_TIM_IC_Start_IT+0x19e>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b08      	cmp	r3, #8
 800afee:	d82a      	bhi.n	800b046 <HAL_TIM_IC_Start_IT+0x1c2>
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_TIM_IC_Start_IT+0x17a>
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d009      	beq.n	800b010 <HAL_TIM_IC_Start_IT+0x18c>
 800affc:	e023      	b.n	800b046 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2102      	movs	r1, #2
 800b00a:	430a      	orrs	r2, r1
 800b00c:	60da      	str	r2, [r3, #12]
      break;
 800b00e:	e01f      	b.n	800b050 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68da      	ldr	r2, [r3, #12]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	2104      	movs	r1, #4
 800b01c:	430a      	orrs	r2, r1
 800b01e:	60da      	str	r2, [r3, #12]
      break;
 800b020:	e016      	b.n	800b050 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2108      	movs	r1, #8
 800b02e:	430a      	orrs	r2, r1
 800b030:	60da      	str	r2, [r3, #12]
      break;
 800b032:	e00d      	b.n	800b050 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2110      	movs	r1, #16
 800b040:	430a      	orrs	r2, r1
 800b042:	60da      	str	r2, [r3, #12]
      break;
 800b044:	e004      	b.n	800b050 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800b046:	230f      	movs	r3, #15
 800b048:	18fb      	adds	r3, r7, r3
 800b04a:	2201      	movs	r2, #1
 800b04c:	701a      	strb	r2, [r3, #0]
      break;
 800b04e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800b050:	230f      	movs	r3, #15
 800b052:	18fb      	adds	r3, r7, r3
 800b054:	781b      	ldrb	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d137      	bne.n	800b0ca <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6839      	ldr	r1, [r7, #0]
 800b060:	2201      	movs	r2, #1
 800b062:	0018      	movs	r0, r3
 800b064:	f001 faa6 	bl	800c5b4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a1a      	ldr	r2, [pc, #104]	@ (800b0d8 <HAL_TIM_IC_Start_IT+0x254>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d00a      	beq.n	800b088 <HAL_TIM_IC_Start_IT+0x204>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	2380      	movs	r3, #128	@ 0x80
 800b078:	05db      	lsls	r3, r3, #23
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d004      	beq.n	800b088 <HAL_TIM_IC_Start_IT+0x204>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a16      	ldr	r2, [pc, #88]	@ (800b0dc <HAL_TIM_IC_Start_IT+0x258>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d116      	bne.n	800b0b6 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	4a14      	ldr	r2, [pc, #80]	@ (800b0e0 <HAL_TIM_IC_Start_IT+0x25c>)
 800b090:	4013      	ands	r3, r2
 800b092:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	2b06      	cmp	r3, #6
 800b098:	d016      	beq.n	800b0c8 <HAL_TIM_IC_Start_IT+0x244>
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	2380      	movs	r3, #128	@ 0x80
 800b09e:	025b      	lsls	r3, r3, #9
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d011      	beq.n	800b0c8 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2101      	movs	r1, #1
 800b0b0:	430a      	orrs	r2, r1
 800b0b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0b4:	e008      	b.n	800b0c8 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	430a      	orrs	r2, r1
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e000      	b.n	800b0ca <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0c8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800b0ca:	230f      	movs	r3, #15
 800b0cc:	18fb      	adds	r3, r7, r3
 800b0ce:	781b      	ldrb	r3, [r3, #0]
}
 800b0d0:	0018      	movs	r0, r3
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	b004      	add	sp, #16
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	40012c00 	.word	0x40012c00
 800b0dc:	40000400 	.word	0x40000400
 800b0e0:	00010007 	.word	0x00010007

0800b0e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2202      	movs	r2, #2
 800b100:	4013      	ands	r3, r2
 800b102:	d027      	beq.n	800b154 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2202      	movs	r2, #2
 800b108:	4013      	ands	r3, r2
 800b10a:	d023      	beq.n	800b154 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2203      	movs	r2, #3
 800b112:	4252      	negs	r2, r2
 800b114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2201      	movs	r2, #1
 800b11a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699b      	ldr	r3, [r3, #24]
 800b122:	2203      	movs	r2, #3
 800b124:	4013      	ands	r3, r2
 800b126:	d006      	beq.n	800b136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2294      	movs	r2, #148	@ 0x94
 800b12c:	589b      	ldr	r3, [r3, r2]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	0010      	movs	r0, r2
 800b132:	4798      	blx	r3
 800b134:	e00b      	b.n	800b14e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	229c      	movs	r2, #156	@ 0x9c
 800b13a:	589b      	ldr	r3, [r3, r2]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	0010      	movs	r0, r2
 800b140:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	22a0      	movs	r2, #160	@ 0xa0
 800b146:	589b      	ldr	r3, [r3, r2]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	0010      	movs	r0, r2
 800b14c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2204      	movs	r2, #4
 800b158:	4013      	ands	r3, r2
 800b15a:	d028      	beq.n	800b1ae <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2204      	movs	r2, #4
 800b160:	4013      	ands	r3, r2
 800b162:	d024      	beq.n	800b1ae <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2205      	movs	r2, #5
 800b16a:	4252      	negs	r2, r2
 800b16c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2202      	movs	r2, #2
 800b172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	699a      	ldr	r2, [r3, #24]
 800b17a:	23c0      	movs	r3, #192	@ 0xc0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4013      	ands	r3, r2
 800b180:	d006      	beq.n	800b190 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2294      	movs	r2, #148	@ 0x94
 800b186:	589b      	ldr	r3, [r3, r2]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	0010      	movs	r0, r2
 800b18c:	4798      	blx	r3
 800b18e:	e00b      	b.n	800b1a8 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	229c      	movs	r2, #156	@ 0x9c
 800b194:	589b      	ldr	r3, [r3, r2]
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	0010      	movs	r0, r2
 800b19a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	22a0      	movs	r2, #160	@ 0xa0
 800b1a0:	589b      	ldr	r3, [r3, r2]
 800b1a2:	687a      	ldr	r2, [r7, #4]
 800b1a4:	0010      	movs	r0, r2
 800b1a6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2208      	movs	r2, #8
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	d027      	beq.n	800b206 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	d023      	beq.n	800b206 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2209      	movs	r2, #9
 800b1c4:	4252      	negs	r2, r2
 800b1c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	2203      	movs	r2, #3
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	d006      	beq.n	800b1e8 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2294      	movs	r2, #148	@ 0x94
 800b1de:	589b      	ldr	r3, [r3, r2]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	0010      	movs	r0, r2
 800b1e4:	4798      	blx	r3
 800b1e6:	e00b      	b.n	800b200 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	229c      	movs	r2, #156	@ 0x9c
 800b1ec:	589b      	ldr	r3, [r3, r2]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	0010      	movs	r0, r2
 800b1f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	22a0      	movs	r2, #160	@ 0xa0
 800b1f8:	589b      	ldr	r3, [r3, r2]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	0010      	movs	r0, r2
 800b1fe:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2210      	movs	r2, #16
 800b20a:	4013      	ands	r3, r2
 800b20c:	d028      	beq.n	800b260 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2210      	movs	r2, #16
 800b212:	4013      	ands	r3, r2
 800b214:	d024      	beq.n	800b260 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2211      	movs	r2, #17
 800b21c:	4252      	negs	r2, r2
 800b21e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2208      	movs	r2, #8
 800b224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	69da      	ldr	r2, [r3, #28]
 800b22c:	23c0      	movs	r3, #192	@ 0xc0
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4013      	ands	r3, r2
 800b232:	d006      	beq.n	800b242 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2294      	movs	r2, #148	@ 0x94
 800b238:	589b      	ldr	r3, [r3, r2]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	0010      	movs	r0, r2
 800b23e:	4798      	blx	r3
 800b240:	e00b      	b.n	800b25a <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	229c      	movs	r2, #156	@ 0x9c
 800b246:	589b      	ldr	r3, [r3, r2]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	0010      	movs	r0, r2
 800b24c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	22a0      	movs	r2, #160	@ 0xa0
 800b252:	589b      	ldr	r3, [r3, r2]
 800b254:	687a      	ldr	r2, [r7, #4]
 800b256:	0010      	movs	r0, r2
 800b258:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2201      	movs	r2, #1
 800b264:	4013      	ands	r3, r2
 800b266:	d00e      	beq.n	800b286 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	4013      	ands	r3, r2
 800b26e:	d00a      	beq.n	800b286 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2202      	movs	r2, #2
 800b276:	4252      	negs	r2, r2
 800b278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2284      	movs	r2, #132	@ 0x84
 800b27e:	589b      	ldr	r3, [r3, r2]
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	0010      	movs	r0, r2
 800b284:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	2280      	movs	r2, #128	@ 0x80
 800b28a:	4013      	ands	r3, r2
 800b28c:	d104      	bne.n	800b298 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	2380      	movs	r3, #128	@ 0x80
 800b292:	019b      	lsls	r3, r3, #6
 800b294:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b296:	d00d      	beq.n	800b2b4 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	2280      	movs	r2, #128	@ 0x80
 800b29c:	4013      	ands	r3, r2
 800b29e:	d009      	beq.n	800b2b4 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a22      	ldr	r2, [pc, #136]	@ (800b330 <HAL_TIM_IRQHandler+0x24c>)
 800b2a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	22b4      	movs	r2, #180	@ 0xb4
 800b2ac:	589b      	ldr	r3, [r3, r2]
 800b2ae:	687a      	ldr	r2, [r7, #4]
 800b2b0:	0010      	movs	r0, r2
 800b2b2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	2380      	movs	r3, #128	@ 0x80
 800b2b8:	005b      	lsls	r3, r3, #1
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	d00d      	beq.n	800b2da <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2280      	movs	r2, #128	@ 0x80
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	d009      	beq.n	800b2da <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4a1a      	ldr	r2, [pc, #104]	@ (800b334 <HAL_TIM_IRQHandler+0x250>)
 800b2cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	22b8      	movs	r2, #184	@ 0xb8
 800b2d2:	589b      	ldr	r3, [r3, r2]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	0010      	movs	r0, r2
 800b2d8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2240      	movs	r2, #64	@ 0x40
 800b2de:	4013      	ands	r3, r2
 800b2e0:	d00e      	beq.n	800b300 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2240      	movs	r2, #64	@ 0x40
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	d00a      	beq.n	800b300 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	2241      	movs	r2, #65	@ 0x41
 800b2f0:	4252      	negs	r2, r2
 800b2f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	228c      	movs	r2, #140	@ 0x8c
 800b2f8:	589b      	ldr	r3, [r3, r2]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	0010      	movs	r0, r2
 800b2fe:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	2220      	movs	r2, #32
 800b304:	4013      	ands	r3, r2
 800b306:	d00e      	beq.n	800b326 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2220      	movs	r2, #32
 800b30c:	4013      	ands	r3, r2
 800b30e:	d00a      	beq.n	800b326 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2221      	movs	r2, #33	@ 0x21
 800b316:	4252      	negs	r2, r2
 800b318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	22ac      	movs	r2, #172	@ 0xac
 800b31e:	589b      	ldr	r3, [r3, r2]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	0010      	movs	r0, r2
 800b324:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b326:	46c0      	nop			@ (mov r8, r8)
 800b328:	46bd      	mov	sp, r7
 800b32a:	b004      	add	sp, #16
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	ffffdf7f 	.word	0xffffdf7f
 800b334:	fffffeff 	.word	0xfffffeff

0800b338 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	60b9      	str	r1, [r7, #8]
 800b342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b344:	2317      	movs	r3, #23
 800b346:	18fb      	adds	r3, r7, r3
 800b348:	2200      	movs	r2, #0
 800b34a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	223c      	movs	r2, #60	@ 0x3c
 800b350:	5c9b      	ldrb	r3, [r3, r2]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d101      	bne.n	800b35a <HAL_TIM_OC_ConfigChannel+0x22>
 800b356:	2302      	movs	r3, #2
 800b358:	e048      	b.n	800b3ec <HAL_TIM_OC_ConfigChannel+0xb4>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	223c      	movs	r2, #60	@ 0x3c
 800b35e:	2101      	movs	r1, #1
 800b360:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2b14      	cmp	r3, #20
 800b366:	d835      	bhi.n	800b3d4 <HAL_TIM_OC_ConfigChannel+0x9c>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	009a      	lsls	r2, r3, #2
 800b36c:	4b21      	ldr	r3, [pc, #132]	@ (800b3f4 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800b36e:	18d3      	adds	r3, r2, r3
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	0011      	movs	r1, r2
 800b37c:	0018      	movs	r0, r3
 800b37e:	f000 fcc3 	bl	800bd08 <TIM_OC1_SetConfig>
      break;
 800b382:	e02c      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68ba      	ldr	r2, [r7, #8]
 800b38a:	0011      	movs	r1, r2
 800b38c:	0018      	movs	r0, r3
 800b38e:	f000 fd3b 	bl	800be08 <TIM_OC2_SetConfig>
      break;
 800b392:	e024      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	68ba      	ldr	r2, [r7, #8]
 800b39a:	0011      	movs	r1, r2
 800b39c:	0018      	movs	r0, r3
 800b39e:	f000 fdb1 	bl	800bf04 <TIM_OC3_SetConfig>
      break;
 800b3a2:	e01c      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	0011      	movs	r1, r2
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f000 fe2b 	bl	800c008 <TIM_OC4_SetConfig>
      break;
 800b3b2:	e014      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	0011      	movs	r1, r2
 800b3bc:	0018      	movs	r0, r3
 800b3be:	f000 fe87 	bl	800c0d0 <TIM_OC5_SetConfig>
      break;
 800b3c2:	e00c      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	0011      	movs	r1, r2
 800b3cc:	0018      	movs	r0, r3
 800b3ce:	f000 fed9 	bl	800c184 <TIM_OC6_SetConfig>
      break;
 800b3d2:	e004      	b.n	800b3de <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800b3d4:	2317      	movs	r3, #23
 800b3d6:	18fb      	adds	r3, r7, r3
 800b3d8:	2201      	movs	r2, #1
 800b3da:	701a      	strb	r2, [r3, #0]
      break;
 800b3dc:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	223c      	movs	r2, #60	@ 0x3c
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	5499      	strb	r1, [r3, r2]

  return status;
 800b3e6:	2317      	movs	r3, #23
 800b3e8:	18fb      	adds	r3, r7, r3
 800b3ea:	781b      	ldrb	r3, [r3, #0]
}
 800b3ec:	0018      	movs	r0, r3
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	b006      	add	sp, #24
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	0800eaec 	.word	0x0800eaec

0800b3f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b404:	2317      	movs	r3, #23
 800b406:	18fb      	adds	r3, r7, r3
 800b408:	2200      	movs	r2, #0
 800b40a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	223c      	movs	r2, #60	@ 0x3c
 800b410:	5c9b      	ldrb	r3, [r3, r2]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d101      	bne.n	800b41a <HAL_TIM_IC_ConfigChannel+0x22>
 800b416:	2302      	movs	r3, #2
 800b418:	e08c      	b.n	800b534 <HAL_TIM_IC_ConfigChannel+0x13c>
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	223c      	movs	r2, #60	@ 0x3c
 800b41e:	2101      	movs	r1, #1
 800b420:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11b      	bne.n	800b460 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800b438:	f000 ff02 	bl	800c240 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	699a      	ldr	r2, [r3, #24]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	210c      	movs	r1, #12
 800b448:	438a      	bics	r2, r1
 800b44a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6999      	ldr	r1, [r3, #24]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	689a      	ldr	r2, [r3, #8]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	430a      	orrs	r2, r1
 800b45c:	619a      	str	r2, [r3, #24]
 800b45e:	e062      	b.n	800b526 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b04      	cmp	r3, #4
 800b464:	d11c      	bne.n	800b4a0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800b476:	f000 ff67 	bl	800c348 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	699a      	ldr	r2, [r3, #24]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	492d      	ldr	r1, [pc, #180]	@ (800b53c <HAL_TIM_IC_ConfigChannel+0x144>)
 800b486:	400a      	ands	r2, r1
 800b488:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	6999      	ldr	r1, [r3, #24]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	021a      	lsls	r2, r3, #8
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	430a      	orrs	r2, r1
 800b49c:	619a      	str	r2, [r3, #24]
 800b49e:	e042      	b.n	800b526 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b08      	cmp	r3, #8
 800b4a4:	d11b      	bne.n	800b4de <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800b4b6:	f000 ffbb 	bl	800c430 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	69da      	ldr	r2, [r3, #28]
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	210c      	movs	r1, #12
 800b4c6:	438a      	bics	r2, r1
 800b4c8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	69d9      	ldr	r1, [r3, #28]
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	689a      	ldr	r2, [r3, #8]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	61da      	str	r2, [r3, #28]
 800b4dc:	e023      	b.n	800b526 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2b0c      	cmp	r3, #12
 800b4e2:	d11c      	bne.n	800b51e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800b4f4:	f000 ffdc 	bl	800c4b0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69da      	ldr	r2, [r3, #28]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	490e      	ldr	r1, [pc, #56]	@ (800b53c <HAL_TIM_IC_ConfigChannel+0x144>)
 800b504:	400a      	ands	r2, r1
 800b506:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	69d9      	ldr	r1, [r3, #28]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	021a      	lsls	r2, r3, #8
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	430a      	orrs	r2, r1
 800b51a:	61da      	str	r2, [r3, #28]
 800b51c:	e003      	b.n	800b526 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800b51e:	2317      	movs	r3, #23
 800b520:	18fb      	adds	r3, r7, r3
 800b522:	2201      	movs	r2, #1
 800b524:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	223c      	movs	r2, #60	@ 0x3c
 800b52a:	2100      	movs	r1, #0
 800b52c:	5499      	strb	r1, [r3, r2]

  return status;
 800b52e:	2317      	movs	r3, #23
 800b530:	18fb      	adds	r3, r7, r3
 800b532:	781b      	ldrb	r3, [r3, #0]
}
 800b534:	0018      	movs	r0, r3
 800b536:	46bd      	mov	sp, r7
 800b538:	b006      	add	sp, #24
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	fffff3ff 	.word	0xfffff3ff

0800b540 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b086      	sub	sp, #24
 800b544:	af00      	add	r7, sp, #0
 800b546:	60f8      	str	r0, [r7, #12]
 800b548:	60b9      	str	r1, [r7, #8]
 800b54a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b54c:	2317      	movs	r3, #23
 800b54e:	18fb      	adds	r3, r7, r3
 800b550:	2200      	movs	r2, #0
 800b552:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	223c      	movs	r2, #60	@ 0x3c
 800b558:	5c9b      	ldrb	r3, [r3, r2]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d101      	bne.n	800b562 <HAL_TIM_PWM_ConfigChannel+0x22>
 800b55e:	2302      	movs	r3, #2
 800b560:	e0e5      	b.n	800b72e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	223c      	movs	r2, #60	@ 0x3c
 800b566:	2101      	movs	r1, #1
 800b568:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b14      	cmp	r3, #20
 800b56e:	d900      	bls.n	800b572 <HAL_TIM_PWM_ConfigChannel+0x32>
 800b570:	e0d1      	b.n	800b716 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	009a      	lsls	r2, r3, #2
 800b576:	4b70      	ldr	r3, [pc, #448]	@ (800b738 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800b578:	18d3      	adds	r3, r2, r3
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	0011      	movs	r1, r2
 800b586:	0018      	movs	r0, r3
 800b588:	f000 fbbe 	bl	800bd08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	699a      	ldr	r2, [r3, #24]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2108      	movs	r1, #8
 800b598:	430a      	orrs	r2, r1
 800b59a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	699a      	ldr	r2, [r3, #24]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	438a      	bics	r2, r1
 800b5aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	6999      	ldr	r1, [r3, #24]
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	691a      	ldr	r2, [r3, #16]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	619a      	str	r2, [r3, #24]
      break;
 800b5be:	e0af      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	0011      	movs	r1, r2
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	f000 fc1d 	bl	800be08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	699a      	ldr	r2, [r3, #24]
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2180      	movs	r1, #128	@ 0x80
 800b5da:	0109      	lsls	r1, r1, #4
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	699a      	ldr	r2, [r3, #24]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4954      	ldr	r1, [pc, #336]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b5ec:	400a      	ands	r2, r1
 800b5ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6999      	ldr	r1, [r3, #24]
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	021a      	lsls	r2, r3, #8
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	430a      	orrs	r2, r1
 800b602:	619a      	str	r2, [r3, #24]
      break;
 800b604:	e08c      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	0011      	movs	r1, r2
 800b60e:	0018      	movs	r0, r3
 800b610:	f000 fc78 	bl	800bf04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	69da      	ldr	r2, [r3, #28]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2108      	movs	r1, #8
 800b620:	430a      	orrs	r2, r1
 800b622:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	69da      	ldr	r2, [r3, #28]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	2104      	movs	r1, #4
 800b630:	438a      	bics	r2, r1
 800b632:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	69d9      	ldr	r1, [r3, #28]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	691a      	ldr	r2, [r3, #16]
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	430a      	orrs	r2, r1
 800b644:	61da      	str	r2, [r3, #28]
      break;
 800b646:	e06b      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	0011      	movs	r1, r2
 800b650:	0018      	movs	r0, r3
 800b652:	f000 fcd9 	bl	800c008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69da      	ldr	r2, [r3, #28]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2180      	movs	r1, #128	@ 0x80
 800b662:	0109      	lsls	r1, r1, #4
 800b664:	430a      	orrs	r2, r1
 800b666:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	69da      	ldr	r2, [r3, #28]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4932      	ldr	r1, [pc, #200]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b674:	400a      	ands	r2, r1
 800b676:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	69d9      	ldr	r1, [r3, #28]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	021a      	lsls	r2, r3, #8
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	430a      	orrs	r2, r1
 800b68a:	61da      	str	r2, [r3, #28]
      break;
 800b68c:	e048      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	0011      	movs	r1, r2
 800b696:	0018      	movs	r0, r3
 800b698:	f000 fd1a 	bl	800c0d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2108      	movs	r1, #8
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2104      	movs	r1, #4
 800b6b8:	438a      	bics	r2, r1
 800b6ba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	691a      	ldr	r2, [r3, #16]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b6ce:	e027      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68ba      	ldr	r2, [r7, #8]
 800b6d6:	0011      	movs	r1, r2
 800b6d8:	0018      	movs	r0, r3
 800b6da:	f000 fd53 	bl	800c184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	2180      	movs	r1, #128	@ 0x80
 800b6ea:	0109      	lsls	r1, r1, #4
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4910      	ldr	r1, [pc, #64]	@ (800b73c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b6fc:	400a      	ands	r2, r1
 800b6fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	021a      	lsls	r2, r3, #8
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	430a      	orrs	r2, r1
 800b712:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b714:	e004      	b.n	800b720 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b716:	2317      	movs	r3, #23
 800b718:	18fb      	adds	r3, r7, r3
 800b71a:	2201      	movs	r2, #1
 800b71c:	701a      	strb	r2, [r3, #0]
      break;
 800b71e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	223c      	movs	r2, #60	@ 0x3c
 800b724:	2100      	movs	r1, #0
 800b726:	5499      	strb	r1, [r3, r2]

  return status;
 800b728:	2317      	movs	r3, #23
 800b72a:	18fb      	adds	r3, r7, r3
 800b72c:	781b      	ldrb	r3, [r3, #0]
}
 800b72e:	0018      	movs	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	b006      	add	sp, #24
 800b734:	bd80      	pop	{r7, pc}
 800b736:	46c0      	nop			@ (mov r8, r8)
 800b738:	0800eb40 	.word	0x0800eb40
 800b73c:	fffffbff 	.word	0xfffffbff

0800b740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b74a:	230f      	movs	r3, #15
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	223c      	movs	r2, #60	@ 0x3c
 800b756:	5c9b      	ldrb	r3, [r3, r2]
 800b758:	2b01      	cmp	r3, #1
 800b75a:	d101      	bne.n	800b760 <HAL_TIM_ConfigClockSource+0x20>
 800b75c:	2302      	movs	r3, #2
 800b75e:	e0bc      	b.n	800b8da <HAL_TIM_ConfigClockSource+0x19a>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	223c      	movs	r2, #60	@ 0x3c
 800b764:	2101      	movs	r1, #1
 800b766:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	223d      	movs	r2, #61	@ 0x3d
 800b76c:	2102      	movs	r1, #2
 800b76e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	689b      	ldr	r3, [r3, #8]
 800b776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	4a5a      	ldr	r2, [pc, #360]	@ (800b8e4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b77c:	4013      	ands	r3, r2
 800b77e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	4a59      	ldr	r2, [pc, #356]	@ (800b8e8 <HAL_TIM_ConfigClockSource+0x1a8>)
 800b784:	4013      	ands	r3, r2
 800b786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	2280      	movs	r2, #128	@ 0x80
 800b796:	0192      	lsls	r2, r2, #6
 800b798:	4293      	cmp	r3, r2
 800b79a:	d040      	beq.n	800b81e <HAL_TIM_ConfigClockSource+0xde>
 800b79c:	2280      	movs	r2, #128	@ 0x80
 800b79e:	0192      	lsls	r2, r2, #6
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d900      	bls.n	800b7a6 <HAL_TIM_ConfigClockSource+0x66>
 800b7a4:	e088      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7a6:	2280      	movs	r2, #128	@ 0x80
 800b7a8:	0152      	lsls	r2, r2, #5
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d100      	bne.n	800b7b0 <HAL_TIM_ConfigClockSource+0x70>
 800b7ae:	e088      	b.n	800b8c2 <HAL_TIM_ConfigClockSource+0x182>
 800b7b0:	2280      	movs	r2, #128	@ 0x80
 800b7b2:	0152      	lsls	r2, r2, #5
 800b7b4:	4293      	cmp	r3, r2
 800b7b6:	d900      	bls.n	800b7ba <HAL_TIM_ConfigClockSource+0x7a>
 800b7b8:	e07e      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7ba:	2b70      	cmp	r3, #112	@ 0x70
 800b7bc:	d018      	beq.n	800b7f0 <HAL_TIM_ConfigClockSource+0xb0>
 800b7be:	d900      	bls.n	800b7c2 <HAL_TIM_ConfigClockSource+0x82>
 800b7c0:	e07a      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7c2:	2b60      	cmp	r3, #96	@ 0x60
 800b7c4:	d04f      	beq.n	800b866 <HAL_TIM_ConfigClockSource+0x126>
 800b7c6:	d900      	bls.n	800b7ca <HAL_TIM_ConfigClockSource+0x8a>
 800b7c8:	e076      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7ca:	2b50      	cmp	r3, #80	@ 0x50
 800b7cc:	d03b      	beq.n	800b846 <HAL_TIM_ConfigClockSource+0x106>
 800b7ce:	d900      	bls.n	800b7d2 <HAL_TIM_ConfigClockSource+0x92>
 800b7d0:	e072      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7d2:	2b40      	cmp	r3, #64	@ 0x40
 800b7d4:	d057      	beq.n	800b886 <HAL_TIM_ConfigClockSource+0x146>
 800b7d6:	d900      	bls.n	800b7da <HAL_TIM_ConfigClockSource+0x9a>
 800b7d8:	e06e      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7da:	2b30      	cmp	r3, #48	@ 0x30
 800b7dc:	d063      	beq.n	800b8a6 <HAL_TIM_ConfigClockSource+0x166>
 800b7de:	d86b      	bhi.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7e0:	2b20      	cmp	r3, #32
 800b7e2:	d060      	beq.n	800b8a6 <HAL_TIM_ConfigClockSource+0x166>
 800b7e4:	d868      	bhi.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d05d      	beq.n	800b8a6 <HAL_TIM_ConfigClockSource+0x166>
 800b7ea:	2b10      	cmp	r3, #16
 800b7ec:	d05b      	beq.n	800b8a6 <HAL_TIM_ConfigClockSource+0x166>
 800b7ee:	e063      	b.n	800b8b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b800:	f000 feb8 	bl	800c574 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	2277      	movs	r2, #119	@ 0x77
 800b810:	4313      	orrs	r3, r2
 800b812:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	609a      	str	r2, [r3, #8]
      break;
 800b81c:	e052      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b82e:	f000 fea1 	bl	800c574 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2180      	movs	r1, #128	@ 0x80
 800b83e:	01c9      	lsls	r1, r1, #7
 800b840:	430a      	orrs	r2, r1
 800b842:	609a      	str	r2, [r3, #8]
      break;
 800b844:	e03e      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b852:	001a      	movs	r2, r3
 800b854:	f000 fd4a 	bl	800c2ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2150      	movs	r1, #80	@ 0x50
 800b85e:	0018      	movs	r0, r3
 800b860:	f000 fe6c 	bl	800c53c <TIM_ITRx_SetConfig>
      break;
 800b864:	e02e      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b872:	001a      	movs	r2, r3
 800b874:	f000 fdaa 	bl	800c3cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2160      	movs	r1, #96	@ 0x60
 800b87e:	0018      	movs	r0, r3
 800b880:	f000 fe5c 	bl	800c53c <TIM_ITRx_SetConfig>
      break;
 800b884:	e01e      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b892:	001a      	movs	r2, r3
 800b894:	f000 fd2a 	bl	800c2ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	2140      	movs	r1, #64	@ 0x40
 800b89e:	0018      	movs	r0, r3
 800b8a0:	f000 fe4c 	bl	800c53c <TIM_ITRx_SetConfig>
      break;
 800b8a4:	e00e      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	0019      	movs	r1, r3
 800b8b0:	0010      	movs	r0, r2
 800b8b2:	f000 fe43 	bl	800c53c <TIM_ITRx_SetConfig>
      break;
 800b8b6:	e005      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b8b8:	230f      	movs	r3, #15
 800b8ba:	18fb      	adds	r3, r7, r3
 800b8bc:	2201      	movs	r2, #1
 800b8be:	701a      	strb	r2, [r3, #0]
      break;
 800b8c0:	e000      	b.n	800b8c4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b8c2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	223d      	movs	r2, #61	@ 0x3d
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	223c      	movs	r2, #60	@ 0x3c
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	5499      	strb	r1, [r3, r2]

  return status;
 800b8d4:	230f      	movs	r3, #15
 800b8d6:	18fb      	adds	r3, r7, r3
 800b8d8:	781b      	ldrb	r3, [r3, #0]
}
 800b8da:	0018      	movs	r0, r3
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	b004      	add	sp, #16
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	46c0      	nop			@ (mov r8, r8)
 800b8e4:	ffceff88 	.word	0xffceff88
 800b8e8:	ffff00ff 	.word	0xffff00ff

0800b8ec <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b0c      	cmp	r3, #12
 800b8fe:	d01e      	beq.n	800b93e <HAL_TIM_ReadCapturedValue+0x52>
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	2b0c      	cmp	r3, #12
 800b904:	d820      	bhi.n	800b948 <HAL_TIM_ReadCapturedValue+0x5c>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b08      	cmp	r3, #8
 800b90a:	d013      	beq.n	800b934 <HAL_TIM_ReadCapturedValue+0x48>
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	2b08      	cmp	r3, #8
 800b910:	d81a      	bhi.n	800b948 <HAL_TIM_ReadCapturedValue+0x5c>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_TIM_ReadCapturedValue+0x34>
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b04      	cmp	r3, #4
 800b91c:	d005      	beq.n	800b92a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800b91e:	e013      	b.n	800b948 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b926:	60fb      	str	r3, [r7, #12]
      break;
 800b928:	e00f      	b.n	800b94a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b930:	60fb      	str	r3, [r7, #12]
      break;
 800b932:	e00a      	b.n	800b94a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b93a:	60fb      	str	r3, [r7, #12]
      break;
 800b93c:	e005      	b.n	800b94a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b944:	60fb      	str	r3, [r7, #12]
      break;
 800b946:	e000      	b.n	800b94a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800b948:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800b94a:	68fb      	ldr	r3, [r7, #12]
}
 800b94c:	0018      	movs	r0, r3
 800b94e:	46bd      	mov	sp, r7
 800b950:	b004      	add	sp, #16
 800b952:	bd80      	pop	{r7, pc}

0800b954 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800b95c:	46c0      	nop			@ (mov r8, r8)
 800b95e:	46bd      	mov	sp, r7
 800b960:	b002      	add	sp, #8
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800b96c:	46c0      	nop			@ (mov r8, r8)
 800b96e:	46bd      	mov	sp, r7
 800b970:	b002      	add	sp, #8
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b97c:	46c0      	nop			@ (mov r8, r8)
 800b97e:	46bd      	mov	sp, r7
 800b980:	b002      	add	sp, #8
 800b982:	bd80      	pop	{r7, pc}

0800b984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b98c:	46c0      	nop			@ (mov r8, r8)
 800b98e:	46bd      	mov	sp, r7
 800b990:	b002      	add	sp, #8
 800b992:	bd80      	pop	{r7, pc}

0800b994 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800b99c:	46c0      	nop			@ (mov r8, r8)
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	b002      	add	sp, #8
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b9ac:	46c0      	nop			@ (mov r8, r8)
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b002      	add	sp, #8
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800b9bc:	46c0      	nop			@ (mov r8, r8)
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	b002      	add	sp, #8
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b9cc:	46c0      	nop			@ (mov r8, r8)
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	b002      	add	sp, #8
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800b9dc:	46c0      	nop			@ (mov r8, r8)
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	b002      	add	sp, #8
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b082      	sub	sp, #8
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800b9ec:	46c0      	nop			@ (mov r8, r8)
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	b002      	add	sp, #8
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	60f8      	str	r0, [r7, #12]
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	230b      	movs	r3, #11
 800ba00:	18fb      	adds	r3, r7, r3
 800ba02:	1c0a      	adds	r2, r1, #0
 800ba04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba06:	2317      	movs	r3, #23
 800ba08:	18fb      	adds	r3, r7, r3
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0ea      	b.n	800bbee <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	223d      	movs	r2, #61	@ 0x3d
 800ba1c:	5c9b      	ldrb	r3, [r3, r2]
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d000      	beq.n	800ba26 <HAL_TIM_RegisterCallback+0x32>
 800ba24:	e08e      	b.n	800bb44 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ba26:	230b      	movs	r3, #11
 800ba28:	18fb      	adds	r3, r7, r3
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b1b      	cmp	r3, #27
 800ba2e:	d900      	bls.n	800ba32 <HAL_TIM_RegisterCallback+0x3e>
 800ba30:	e083      	b.n	800bb3a <HAL_TIM_RegisterCallback+0x146>
 800ba32:	009a      	lsls	r2, r3, #2
 800ba34:	4b70      	ldr	r3, [pc, #448]	@ (800bbf8 <HAL_TIM_RegisterCallback+0x204>)
 800ba36:	18d3      	adds	r3, r2, r3
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ba42:	e0d1      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ba4a:	e0cd      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ba52:	e0c9      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ba5a:	e0c5      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ba62:	e0c1      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ba6a:	e0bd      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ba72:	e0b9      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ba7a:	e0b5      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ba82:	e0b1      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ba8a:	e0ad      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ba92:	e0a9      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ba9a:	e0a5      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800baa2:	e0a1      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2180      	movs	r1, #128	@ 0x80
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	505a      	str	r2, [r3, r1]
        break;
 800baac:	e09c      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2184      	movs	r1, #132	@ 0x84
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	505a      	str	r2, [r3, r1]
        break;
 800bab6:	e097      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2188      	movs	r1, #136	@ 0x88
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	505a      	str	r2, [r3, r1]
        break;
 800bac0:	e092      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	218c      	movs	r1, #140	@ 0x8c
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	505a      	str	r2, [r3, r1]
        break;
 800baca:	e08d      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2190      	movs	r1, #144	@ 0x90
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	505a      	str	r2, [r3, r1]
        break;
 800bad4:	e088      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2194      	movs	r1, #148	@ 0x94
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	505a      	str	r2, [r3, r1]
        break;
 800bade:	e083      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	2198      	movs	r1, #152	@ 0x98
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	505a      	str	r2, [r3, r1]
        break;
 800bae8:	e07e      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	219c      	movs	r1, #156	@ 0x9c
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	505a      	str	r2, [r3, r1]
        break;
 800baf2:	e079      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	21a0      	movs	r1, #160	@ 0xa0
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	505a      	str	r2, [r3, r1]
        break;
 800bafc:	e074      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	21a4      	movs	r1, #164	@ 0xa4
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	505a      	str	r2, [r3, r1]
        break;
 800bb06:	e06f      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	21a8      	movs	r1, #168	@ 0xa8
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	505a      	str	r2, [r3, r1]
        break;
 800bb10:	e06a      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	21ac      	movs	r1, #172	@ 0xac
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	505a      	str	r2, [r3, r1]
        break;
 800bb1a:	e065      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	21b0      	movs	r1, #176	@ 0xb0
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	505a      	str	r2, [r3, r1]
        break;
 800bb24:	e060      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	21b4      	movs	r1, #180	@ 0xb4
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	505a      	str	r2, [r3, r1]
        break;
 800bb2e:	e05b      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	21b8      	movs	r1, #184	@ 0xb8
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	505a      	str	r2, [r3, r1]
        break;
 800bb38:	e056      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bb3a:	2317      	movs	r3, #23
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	2201      	movs	r2, #1
 800bb40:	701a      	strb	r2, [r3, #0]
        break;
 800bb42:	e051      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	223d      	movs	r2, #61	@ 0x3d
 800bb48:	5c9b      	ldrb	r3, [r3, r2]
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d147      	bne.n	800bbe0 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800bb50:	230b      	movs	r3, #11
 800bb52:	18fb      	adds	r3, r7, r3
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	2b0d      	cmp	r3, #13
 800bb58:	d83d      	bhi.n	800bbd6 <HAL_TIM_RegisterCallback+0x1e2>
 800bb5a:	009a      	lsls	r2, r3, #2
 800bb5c:	4b27      	ldr	r3, [pc, #156]	@ (800bbfc <HAL_TIM_RegisterCallback+0x208>)
 800bb5e:	18d3      	adds	r3, r2, r3
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800bb6a:	e03d      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800bb72:	e039      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800bb7a:	e035      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800bb82:	e031      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800bb8a:	e02d      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	687a      	ldr	r2, [r7, #4]
 800bb90:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800bb92:	e029      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800bb9a:	e025      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800bba2:	e021      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800bbaa:	e01d      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800bbb2:	e019      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800bbba:	e015      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800bbc2:	e011      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800bbca:	e00d      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2180      	movs	r1, #128	@ 0x80
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	505a      	str	r2, [r3, r1]
        break;
 800bbd4:	e008      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800bbd6:	2317      	movs	r3, #23
 800bbd8:	18fb      	adds	r3, r7, r3
 800bbda:	2201      	movs	r2, #1
 800bbdc:	701a      	strb	r2, [r3, #0]
        break;
 800bbde:	e003      	b.n	800bbe8 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800bbe0:	2317      	movs	r3, #23
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bbe8:	2317      	movs	r3, #23
 800bbea:	18fb      	adds	r3, r7, r3
 800bbec:	781b      	ldrb	r3, [r3, #0]
}
 800bbee:	0018      	movs	r0, r3
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	b006      	add	sp, #24
 800bbf4:	bd80      	pop	{r7, pc}
 800bbf6:	46c0      	nop			@ (mov r8, r8)
 800bbf8:	0800eb94 	.word	0x0800eb94
 800bbfc:	0800ec04 	.word	0x0800ec04

0800bc00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b084      	sub	sp, #16
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4a37      	ldr	r2, [pc, #220]	@ (800bcf0 <TIM_Base_SetConfig+0xf0>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d008      	beq.n	800bc2a <TIM_Base_SetConfig+0x2a>
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	2380      	movs	r3, #128	@ 0x80
 800bc1c:	05db      	lsls	r3, r3, #23
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d003      	beq.n	800bc2a <TIM_Base_SetConfig+0x2a>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	4a33      	ldr	r2, [pc, #204]	@ (800bcf4 <TIM_Base_SetConfig+0xf4>)
 800bc26:	4293      	cmp	r3, r2
 800bc28:	d108      	bne.n	800bc3c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2270      	movs	r2, #112	@ 0x70
 800bc2e:	4393      	bics	r3, r2
 800bc30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a2c      	ldr	r2, [pc, #176]	@ (800bcf0 <TIM_Base_SetConfig+0xf0>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d014      	beq.n	800bc6e <TIM_Base_SetConfig+0x6e>
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	2380      	movs	r3, #128	@ 0x80
 800bc48:	05db      	lsls	r3, r3, #23
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d00f      	beq.n	800bc6e <TIM_Base_SetConfig+0x6e>
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	4a28      	ldr	r2, [pc, #160]	@ (800bcf4 <TIM_Base_SetConfig+0xf4>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d00b      	beq.n	800bc6e <TIM_Base_SetConfig+0x6e>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	4a27      	ldr	r2, [pc, #156]	@ (800bcf8 <TIM_Base_SetConfig+0xf8>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d007      	beq.n	800bc6e <TIM_Base_SetConfig+0x6e>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a26      	ldr	r2, [pc, #152]	@ (800bcfc <TIM_Base_SetConfig+0xfc>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d003      	beq.n	800bc6e <TIM_Base_SetConfig+0x6e>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a25      	ldr	r2, [pc, #148]	@ (800bd00 <TIM_Base_SetConfig+0x100>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d108      	bne.n	800bc80 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	4a24      	ldr	r2, [pc, #144]	@ (800bd04 <TIM_Base_SetConfig+0x104>)
 800bc72:	4013      	ands	r3, r2
 800bc74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2280      	movs	r2, #128	@ 0x80
 800bc84:	4393      	bics	r3, r2
 800bc86:	001a      	movs	r2, r3
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	689a      	ldr	r2, [r3, #8]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a11      	ldr	r2, [pc, #68]	@ (800bcf0 <TIM_Base_SetConfig+0xf0>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d007      	beq.n	800bcbe <TIM_Base_SetConfig+0xbe>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a12      	ldr	r2, [pc, #72]	@ (800bcfc <TIM_Base_SetConfig+0xfc>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d003      	beq.n	800bcbe <TIM_Base_SetConfig+0xbe>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a11      	ldr	r2, [pc, #68]	@ (800bd00 <TIM_Base_SetConfig+0x100>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d103      	bne.n	800bcc6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	691a      	ldr	r2, [r3, #16]
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2201      	movs	r2, #1
 800bcca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	691b      	ldr	r3, [r3, #16]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	4013      	ands	r3, r2
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d106      	bne.n	800bce6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	4393      	bics	r3, r2
 800bce0:	001a      	movs	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	611a      	str	r2, [r3, #16]
  }
}
 800bce6:	46c0      	nop			@ (mov r8, r8)
 800bce8:	46bd      	mov	sp, r7
 800bcea:	b004      	add	sp, #16
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	46c0      	nop			@ (mov r8, r8)
 800bcf0:	40012c00 	.word	0x40012c00
 800bcf4:	40000400 	.word	0x40000400
 800bcf8:	40002000 	.word	0x40002000
 800bcfc:	40014400 	.word	0x40014400
 800bd00:	40014800 	.word	0x40014800
 800bd04:	fffffcff 	.word	0xfffffcff

0800bd08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	6a1b      	ldr	r3, [r3, #32]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	4393      	bics	r3, r2
 800bd20:	001a      	movs	r2, r3
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	4a2e      	ldr	r2, [pc, #184]	@ (800bdf0 <TIM_OC1_SetConfig+0xe8>)
 800bd36:	4013      	ands	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	2203      	movs	r2, #3
 800bd3e:	4393      	bics	r3, r2
 800bd40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2202      	movs	r2, #2
 800bd50:	4393      	bics	r3, r2
 800bd52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	697a      	ldr	r2, [r7, #20]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a24      	ldr	r2, [pc, #144]	@ (800bdf4 <TIM_OC1_SetConfig+0xec>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d007      	beq.n	800bd76 <TIM_OC1_SetConfig+0x6e>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a23      	ldr	r2, [pc, #140]	@ (800bdf8 <TIM_OC1_SetConfig+0xf0>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d003      	beq.n	800bd76 <TIM_OC1_SetConfig+0x6e>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a22      	ldr	r2, [pc, #136]	@ (800bdfc <TIM_OC1_SetConfig+0xf4>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d10c      	bne.n	800bd90 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2208      	movs	r2, #8
 800bd7a:	4393      	bics	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	2204      	movs	r2, #4
 800bd8c:	4393      	bics	r3, r2
 800bd8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a18      	ldr	r2, [pc, #96]	@ (800bdf4 <TIM_OC1_SetConfig+0xec>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d007      	beq.n	800bda8 <TIM_OC1_SetConfig+0xa0>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <TIM_OC1_SetConfig+0xf0>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d003      	beq.n	800bda8 <TIM_OC1_SetConfig+0xa0>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a16      	ldr	r2, [pc, #88]	@ (800bdfc <TIM_OC1_SetConfig+0xf4>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d111      	bne.n	800bdcc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	4a15      	ldr	r2, [pc, #84]	@ (800be00 <TIM_OC1_SetConfig+0xf8>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bdb0:	693b      	ldr	r3, [r7, #16]
 800bdb2:	4a14      	ldr	r2, [pc, #80]	@ (800be04 <TIM_OC1_SetConfig+0xfc>)
 800bdb4:	4013      	ands	r3, r2
 800bdb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	699b      	ldr	r3, [r3, #24]
 800bdc6:	693a      	ldr	r2, [r7, #16]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	621a      	str	r2, [r3, #32]
}
 800bde6:	46c0      	nop			@ (mov r8, r8)
 800bde8:	46bd      	mov	sp, r7
 800bdea:	b006      	add	sp, #24
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	46c0      	nop			@ (mov r8, r8)
 800bdf0:	fffeff8f 	.word	0xfffeff8f
 800bdf4:	40012c00 	.word	0x40012c00
 800bdf8:	40014400 	.word	0x40014400
 800bdfc:	40014800 	.word	0x40014800
 800be00:	fffffeff 	.word	0xfffffeff
 800be04:	fffffdff 	.word	0xfffffdff

0800be08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b086      	sub	sp, #24
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a1b      	ldr	r3, [r3, #32]
 800be1c:	2210      	movs	r2, #16
 800be1e:	4393      	bics	r3, r2
 800be20:	001a      	movs	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	685b      	ldr	r3, [r3, #4]
 800be2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	699b      	ldr	r3, [r3, #24]
 800be30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	4a2c      	ldr	r2, [pc, #176]	@ (800bee8 <TIM_OC2_SetConfig+0xe0>)
 800be36:	4013      	ands	r3, r2
 800be38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	4a2b      	ldr	r2, [pc, #172]	@ (800beec <TIM_OC2_SetConfig+0xe4>)
 800be3e:	4013      	ands	r3, r2
 800be40:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	021b      	lsls	r3, r3, #8
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	2220      	movs	r2, #32
 800be52:	4393      	bics	r3, r2
 800be54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	011b      	lsls	r3, r3, #4
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a22      	ldr	r2, [pc, #136]	@ (800bef0 <TIM_OC2_SetConfig+0xe8>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d10d      	bne.n	800be86 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2280      	movs	r2, #128	@ 0x80
 800be6e:	4393      	bics	r3, r2
 800be70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	68db      	ldr	r3, [r3, #12]
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	2240      	movs	r2, #64	@ 0x40
 800be82:	4393      	bics	r3, r2
 800be84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a19      	ldr	r2, [pc, #100]	@ (800bef0 <TIM_OC2_SetConfig+0xe8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d007      	beq.n	800be9e <TIM_OC2_SetConfig+0x96>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a18      	ldr	r2, [pc, #96]	@ (800bef4 <TIM_OC2_SetConfig+0xec>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d003      	beq.n	800be9e <TIM_OC2_SetConfig+0x96>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a17      	ldr	r2, [pc, #92]	@ (800bef8 <TIM_OC2_SetConfig+0xf0>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d113      	bne.n	800bec6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	4a16      	ldr	r2, [pc, #88]	@ (800befc <TIM_OC2_SetConfig+0xf4>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	4a15      	ldr	r2, [pc, #84]	@ (800bf00 <TIM_OC2_SetConfig+0xf8>)
 800beaa:	4013      	ands	r3, r2
 800beac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	693a      	ldr	r2, [r7, #16]
 800beca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	68fa      	ldr	r2, [r7, #12]
 800bed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	621a      	str	r2, [r3, #32]
}
 800bee0:	46c0      	nop			@ (mov r8, r8)
 800bee2:	46bd      	mov	sp, r7
 800bee4:	b006      	add	sp, #24
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	feff8fff 	.word	0xfeff8fff
 800beec:	fffffcff 	.word	0xfffffcff
 800bef0:	40012c00 	.word	0x40012c00
 800bef4:	40014400 	.word	0x40014400
 800bef8:	40014800 	.word	0x40014800
 800befc:	fffffbff 	.word	0xfffffbff
 800bf00:	fffff7ff 	.word	0xfffff7ff

0800bf04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b086      	sub	sp, #24
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a1b      	ldr	r3, [r3, #32]
 800bf18:	4a31      	ldr	r2, [pc, #196]	@ (800bfe0 <TIM_OC3_SetConfig+0xdc>)
 800bf1a:	401a      	ands	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	69db      	ldr	r3, [r3, #28]
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	4a2d      	ldr	r2, [pc, #180]	@ (800bfe4 <TIM_OC3_SetConfig+0xe0>)
 800bf30:	4013      	ands	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2203      	movs	r2, #3
 800bf38:	4393      	bics	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	4a27      	ldr	r2, [pc, #156]	@ (800bfe8 <TIM_OC3_SetConfig+0xe4>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	021b      	lsls	r3, r3, #8
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	4a23      	ldr	r2, [pc, #140]	@ (800bfec <TIM_OC3_SetConfig+0xe8>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d10d      	bne.n	800bf7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	4a22      	ldr	r2, [pc, #136]	@ (800bff0 <TIM_OC3_SetConfig+0xec>)
 800bf66:	4013      	ands	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	021b      	lsls	r3, r3, #8
 800bf70:	697a      	ldr	r2, [r7, #20]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <TIM_OC3_SetConfig+0xf0>)
 800bf7a:	4013      	ands	r3, r2
 800bf7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	4a1a      	ldr	r2, [pc, #104]	@ (800bfec <TIM_OC3_SetConfig+0xe8>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d007      	beq.n	800bf96 <TIM_OC3_SetConfig+0x92>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	4a1b      	ldr	r2, [pc, #108]	@ (800bff8 <TIM_OC3_SetConfig+0xf4>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d003      	beq.n	800bf96 <TIM_OC3_SetConfig+0x92>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	4a1a      	ldr	r2, [pc, #104]	@ (800bffc <TIM_OC3_SetConfig+0xf8>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d113      	bne.n	800bfbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	4a19      	ldr	r2, [pc, #100]	@ (800c000 <TIM_OC3_SetConfig+0xfc>)
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	4a18      	ldr	r2, [pc, #96]	@ (800c004 <TIM_OC3_SetConfig+0x100>)
 800bfa2:	4013      	ands	r3, r2
 800bfa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	695b      	ldr	r3, [r3, #20]
 800bfaa:	011b      	lsls	r3, r3, #4
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	011b      	lsls	r3, r3, #4
 800bfb8:	693a      	ldr	r2, [r7, #16]
 800bfba:	4313      	orrs	r3, r2
 800bfbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	685a      	ldr	r2, [r3, #4]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	621a      	str	r2, [r3, #32]
}
 800bfd8:	46c0      	nop			@ (mov r8, r8)
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	b006      	add	sp, #24
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	fffffeff 	.word	0xfffffeff
 800bfe4:	fffeff8f 	.word	0xfffeff8f
 800bfe8:	fffffdff 	.word	0xfffffdff
 800bfec:	40012c00 	.word	0x40012c00
 800bff0:	fffff7ff 	.word	0xfffff7ff
 800bff4:	fffffbff 	.word	0xfffffbff
 800bff8:	40014400 	.word	0x40014400
 800bffc:	40014800 	.word	0x40014800
 800c000:	ffffefff 	.word	0xffffefff
 800c004:	ffffdfff 	.word	0xffffdfff

0800c008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	4a24      	ldr	r2, [pc, #144]	@ (800c0b0 <TIM_OC4_SetConfig+0xa8>)
 800c01e:	401a      	ands	r2, r3
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4a20      	ldr	r2, [pc, #128]	@ (800c0b4 <TIM_OC4_SetConfig+0xac>)
 800c034:	4013      	ands	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0b8 <TIM_OC4_SetConfig+0xb0>)
 800c03c:	4013      	ands	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	021b      	lsls	r3, r3, #8
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	4313      	orrs	r3, r2
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	4a1b      	ldr	r2, [pc, #108]	@ (800c0bc <TIM_OC4_SetConfig+0xb4>)
 800c050:	4013      	ands	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	031b      	lsls	r3, r3, #12
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	4313      	orrs	r3, r2
 800c05e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	4a17      	ldr	r2, [pc, #92]	@ (800c0c0 <TIM_OC4_SetConfig+0xb8>)
 800c064:	4293      	cmp	r3, r2
 800c066:	d007      	beq.n	800c078 <TIM_OC4_SetConfig+0x70>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	4a16      	ldr	r2, [pc, #88]	@ (800c0c4 <TIM_OC4_SetConfig+0xbc>)
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d003      	beq.n	800c078 <TIM_OC4_SetConfig+0x70>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	4a15      	ldr	r2, [pc, #84]	@ (800c0c8 <TIM_OC4_SetConfig+0xc0>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d109      	bne.n	800c08c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	4a14      	ldr	r2, [pc, #80]	@ (800c0cc <TIM_OC4_SetConfig+0xc4>)
 800c07c:	4013      	ands	r3, r2
 800c07e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	019b      	lsls	r3, r3, #6
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	4313      	orrs	r3, r2
 800c08a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685a      	ldr	r2, [r3, #4]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	621a      	str	r2, [r3, #32]
}
 800c0a6:	46c0      	nop			@ (mov r8, r8)
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	b006      	add	sp, #24
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	46c0      	nop			@ (mov r8, r8)
 800c0b0:	ffffefff 	.word	0xffffefff
 800c0b4:	feff8fff 	.word	0xfeff8fff
 800c0b8:	fffffcff 	.word	0xfffffcff
 800c0bc:	ffffdfff 	.word	0xffffdfff
 800c0c0:	40012c00 	.word	0x40012c00
 800c0c4:	40014400 	.word	0x40014400
 800c0c8:	40014800 	.word	0x40014800
 800c0cc:	ffffbfff 	.word	0xffffbfff

0800c0d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a1b      	ldr	r3, [r3, #32]
 800c0de:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a1b      	ldr	r3, [r3, #32]
 800c0e4:	4a21      	ldr	r2, [pc, #132]	@ (800c16c <TIM_OC5_SetConfig+0x9c>)
 800c0e6:	401a      	ands	r2, r3
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	4a1d      	ldr	r2, [pc, #116]	@ (800c170 <TIM_OC5_SetConfig+0xa0>)
 800c0fc:	4013      	ands	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c10a:	693b      	ldr	r3, [r7, #16]
 800c10c:	4a19      	ldr	r2, [pc, #100]	@ (800c174 <TIM_OC5_SetConfig+0xa4>)
 800c10e:	4013      	ands	r3, r2
 800c110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	041b      	lsls	r3, r3, #16
 800c118:	693a      	ldr	r2, [r7, #16]
 800c11a:	4313      	orrs	r3, r2
 800c11c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a15      	ldr	r2, [pc, #84]	@ (800c178 <TIM_OC5_SetConfig+0xa8>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d007      	beq.n	800c136 <TIM_OC5_SetConfig+0x66>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a14      	ldr	r2, [pc, #80]	@ (800c17c <TIM_OC5_SetConfig+0xac>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d003      	beq.n	800c136 <TIM_OC5_SetConfig+0x66>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a13      	ldr	r2, [pc, #76]	@ (800c180 <TIM_OC5_SetConfig+0xb0>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d109      	bne.n	800c14a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	4a0c      	ldr	r2, [pc, #48]	@ (800c16c <TIM_OC5_SetConfig+0x9c>)
 800c13a:	4013      	ands	r3, r2
 800c13c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	695b      	ldr	r3, [r3, #20]
 800c142:	021b      	lsls	r3, r3, #8
 800c144:	697a      	ldr	r2, [r7, #20]
 800c146:	4313      	orrs	r3, r2
 800c148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	685a      	ldr	r2, [r3, #4]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	693a      	ldr	r2, [r7, #16]
 800c162:	621a      	str	r2, [r3, #32]
}
 800c164:	46c0      	nop			@ (mov r8, r8)
 800c166:	46bd      	mov	sp, r7
 800c168:	b006      	add	sp, #24
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	fffeffff 	.word	0xfffeffff
 800c170:	fffeff8f 	.word	0xfffeff8f
 800c174:	fffdffff 	.word	0xfffdffff
 800c178:	40012c00 	.word	0x40012c00
 800c17c:	40014400 	.word	0x40014400
 800c180:	40014800 	.word	0x40014800

0800c184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b086      	sub	sp, #24
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
 800c18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6a1b      	ldr	r3, [r3, #32]
 800c192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6a1b      	ldr	r3, [r3, #32]
 800c198:	4a22      	ldr	r2, [pc, #136]	@ (800c224 <TIM_OC6_SetConfig+0xa0>)
 800c19a:	401a      	ands	r2, r3
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	685b      	ldr	r3, [r3, #4]
 800c1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	4a1e      	ldr	r2, [pc, #120]	@ (800c228 <TIM_OC6_SetConfig+0xa4>)
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	021b      	lsls	r3, r3, #8
 800c1ba:	68fa      	ldr	r2, [r7, #12]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4a1a      	ldr	r2, [pc, #104]	@ (800c22c <TIM_OC6_SetConfig+0xa8>)
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	689b      	ldr	r3, [r3, #8]
 800c1cc:	051b      	lsls	r3, r3, #20
 800c1ce:	693a      	ldr	r2, [r7, #16]
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a16      	ldr	r2, [pc, #88]	@ (800c230 <TIM_OC6_SetConfig+0xac>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d007      	beq.n	800c1ec <TIM_OC6_SetConfig+0x68>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a15      	ldr	r2, [pc, #84]	@ (800c234 <TIM_OC6_SetConfig+0xb0>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d003      	beq.n	800c1ec <TIM_OC6_SetConfig+0x68>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a14      	ldr	r2, [pc, #80]	@ (800c238 <TIM_OC6_SetConfig+0xb4>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d109      	bne.n	800c200 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	4a13      	ldr	r2, [pc, #76]	@ (800c23c <TIM_OC6_SetConfig+0xb8>)
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	695b      	ldr	r3, [r3, #20]
 800c1f8:	029b      	lsls	r3, r3, #10
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	697a      	ldr	r2, [r7, #20]
 800c204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	693a      	ldr	r2, [r7, #16]
 800c218:	621a      	str	r2, [r3, #32]
}
 800c21a:	46c0      	nop			@ (mov r8, r8)
 800c21c:	46bd      	mov	sp, r7
 800c21e:	b006      	add	sp, #24
 800c220:	bd80      	pop	{r7, pc}
 800c222:	46c0      	nop			@ (mov r8, r8)
 800c224:	ffefffff 	.word	0xffefffff
 800c228:	feff8fff 	.word	0xfeff8fff
 800c22c:	ffdfffff 	.word	0xffdfffff
 800c230:	40012c00 	.word	0x40012c00
 800c234:	40014400 	.word	0x40014400
 800c238:	40014800 	.word	0x40014800
 800c23c:	fffbffff 	.word	0xfffbffff

0800c240 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	60f8      	str	r0, [r7, #12]
 800c248:	60b9      	str	r1, [r7, #8]
 800c24a:	607a      	str	r2, [r7, #4]
 800c24c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	6a1b      	ldr	r3, [r3, #32]
 800c252:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a1b      	ldr	r3, [r3, #32]
 800c258:	2201      	movs	r2, #1
 800c25a:	4393      	bics	r3, r2
 800c25c:	001a      	movs	r2, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	4a1e      	ldr	r2, [pc, #120]	@ (800c2e4 <TIM_TI1_SetConfig+0xa4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d008      	beq.n	800c282 <TIM_TI1_SetConfig+0x42>
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	2380      	movs	r3, #128	@ 0x80
 800c274:	05db      	lsls	r3, r3, #23
 800c276:	429a      	cmp	r2, r3
 800c278:	d003      	beq.n	800c282 <TIM_TI1_SetConfig+0x42>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	4a1a      	ldr	r2, [pc, #104]	@ (800c2e8 <TIM_TI1_SetConfig+0xa8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d101      	bne.n	800c286 <TIM_TI1_SetConfig+0x46>
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <TIM_TI1_SetConfig+0x48>
 800c286:	2300      	movs	r3, #0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d008      	beq.n	800c29e <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	2203      	movs	r2, #3
 800c290:	4393      	bics	r3, r2
 800c292:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800c294:	697a      	ldr	r2, [r7, #20]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4313      	orrs	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]
 800c29c:	e003      	b.n	800c2a6 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	22f0      	movs	r2, #240	@ 0xf0
 800c2aa:	4393      	bics	r3, r2
 800c2ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	011b      	lsls	r3, r3, #4
 800c2b2:	22ff      	movs	r2, #255	@ 0xff
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	697a      	ldr	r2, [r7, #20]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	220a      	movs	r2, #10
 800c2c0:	4393      	bics	r3, r2
 800c2c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	220a      	movs	r2, #10
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	621a      	str	r2, [r3, #32]
}
 800c2dc:	46c0      	nop			@ (mov r8, r8)
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	b006      	add	sp, #24
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	40012c00 	.word	0x40012c00
 800c2e8:	40000400 	.word	0x40000400

0800c2ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6a1b      	ldr	r3, [r3, #32]
 800c2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	2201      	movs	r2, #1
 800c304:	4393      	bics	r3, r2
 800c306:	001a      	movs	r2, r3
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	699b      	ldr	r3, [r3, #24]
 800c310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	22f0      	movs	r2, #240	@ 0xf0
 800c316:	4393      	bics	r3, r2
 800c318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	011b      	lsls	r3, r3, #4
 800c31e:	693a      	ldr	r2, [r7, #16]
 800c320:	4313      	orrs	r3, r2
 800c322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	220a      	movs	r2, #10
 800c328:	4393      	bics	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	4313      	orrs	r3, r2
 800c332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	621a      	str	r2, [r3, #32]
}
 800c340:	46c0      	nop			@ (mov r8, r8)
 800c342:	46bd      	mov	sp, r7
 800c344:	b006      	add	sp, #24
 800c346:	bd80      	pop	{r7, pc}

0800c348 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
 800c354:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	2210      	movs	r2, #16
 800c362:	4393      	bics	r3, r2
 800c364:	001a      	movs	r2, r3
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	4a14      	ldr	r2, [pc, #80]	@ (800c3c4 <TIM_TI2_SetConfig+0x7c>)
 800c374:	4013      	ands	r3, r2
 800c376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	021b      	lsls	r3, r3, #8
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	4313      	orrs	r3, r2
 800c380:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	4a10      	ldr	r2, [pc, #64]	@ (800c3c8 <TIM_TI2_SetConfig+0x80>)
 800c386:	4013      	ands	r3, r2
 800c388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	031b      	lsls	r3, r3, #12
 800c38e:	041b      	lsls	r3, r3, #16
 800c390:	0c1b      	lsrs	r3, r3, #16
 800c392:	693a      	ldr	r2, [r7, #16]
 800c394:	4313      	orrs	r3, r2
 800c396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	22a0      	movs	r2, #160	@ 0xa0
 800c39c:	4393      	bics	r3, r2
 800c39e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	011b      	lsls	r3, r3, #4
 800c3a4:	22a0      	movs	r2, #160	@ 0xa0
 800c3a6:	4013      	ands	r3, r2
 800c3a8:	697a      	ldr	r2, [r7, #20]
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	693a      	ldr	r2, [r7, #16]
 800c3b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	621a      	str	r2, [r3, #32]
}
 800c3ba:	46c0      	nop			@ (mov r8, r8)
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	b006      	add	sp, #24
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	46c0      	nop			@ (mov r8, r8)
 800c3c4:	fffffcff 	.word	0xfffffcff
 800c3c8:	ffff0fff 	.word	0xffff0fff

0800c3cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a1b      	ldr	r3, [r3, #32]
 800c3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	6a1b      	ldr	r3, [r3, #32]
 800c3e2:	2210      	movs	r2, #16
 800c3e4:	4393      	bics	r3, r2
 800c3e6:	001a      	movs	r2, r3
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	@ (800c42c <TIM_TI2_ConfigInputStage+0x60>)
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	031b      	lsls	r3, r3, #12
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	4313      	orrs	r3, r2
 800c402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c404:	697b      	ldr	r3, [r7, #20]
 800c406:	22a0      	movs	r2, #160	@ 0xa0
 800c408:	4393      	bics	r3, r2
 800c40a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	011b      	lsls	r3, r3, #4
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	4313      	orrs	r3, r2
 800c414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	697a      	ldr	r2, [r7, #20]
 800c420:	621a      	str	r2, [r3, #32]
}
 800c422:	46c0      	nop			@ (mov r8, r8)
 800c424:	46bd      	mov	sp, r7
 800c426:	b006      	add	sp, #24
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	46c0      	nop			@ (mov r8, r8)
 800c42c:	ffff0fff 	.word	0xffff0fff

0800c430 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	60b9      	str	r1, [r7, #8]
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6a1b      	ldr	r3, [r3, #32]
 800c448:	4a17      	ldr	r2, [pc, #92]	@ (800c4a8 <TIM_TI3_SetConfig+0x78>)
 800c44a:	401a      	ands	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	2203      	movs	r2, #3
 800c45a:	4393      	bics	r3, r2
 800c45c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	4313      	orrs	r3, r2
 800c464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800c466:	693b      	ldr	r3, [r7, #16]
 800c468:	22f0      	movs	r2, #240	@ 0xf0
 800c46a:	4393      	bics	r3, r2
 800c46c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	011b      	lsls	r3, r3, #4
 800c472:	22ff      	movs	r2, #255	@ 0xff
 800c474:	4013      	ands	r3, r2
 800c476:	693a      	ldr	r2, [r7, #16]
 800c478:	4313      	orrs	r3, r2
 800c47a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	4a0b      	ldr	r2, [pc, #44]	@ (800c4ac <TIM_TI3_SetConfig+0x7c>)
 800c480:	4013      	ands	r3, r2
 800c482:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	021a      	lsls	r2, r3, #8
 800c488:	23a0      	movs	r3, #160	@ 0xa0
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	4013      	ands	r3, r2
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	4313      	orrs	r3, r2
 800c492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	697a      	ldr	r2, [r7, #20]
 800c49e:	621a      	str	r2, [r3, #32]
}
 800c4a0:	46c0      	nop			@ (mov r8, r8)
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	b006      	add	sp, #24
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	fffffeff 	.word	0xfffffeff
 800c4ac:	fffff5ff 	.word	0xfffff5ff

0800c4b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	60f8      	str	r0, [r7, #12]
 800c4b8:	60b9      	str	r1, [r7, #8]
 800c4ba:	607a      	str	r2, [r7, #4]
 800c4bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6a1b      	ldr	r3, [r3, #32]
 800c4c8:	4a18      	ldr	r2, [pc, #96]	@ (800c52c <TIM_TI4_SetConfig+0x7c>)
 800c4ca:	401a      	ands	r2, r3
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	69db      	ldr	r3, [r3, #28]
 800c4d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	4a15      	ldr	r2, [pc, #84]	@ (800c530 <TIM_TI4_SetConfig+0x80>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	4313      	orrs	r3, r2
 800c4e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	4a12      	ldr	r2, [pc, #72]	@ (800c534 <TIM_TI4_SetConfig+0x84>)
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	031b      	lsls	r3, r3, #12
 800c4f4:	041b      	lsls	r3, r3, #16
 800c4f6:	0c1b      	lsrs	r3, r3, #16
 800c4f8:	693a      	ldr	r2, [r7, #16]
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	4a0d      	ldr	r2, [pc, #52]	@ (800c538 <TIM_TI4_SetConfig+0x88>)
 800c502:	4013      	ands	r3, r2
 800c504:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	031a      	lsls	r2, r3, #12
 800c50a:	23a0      	movs	r3, #160	@ 0xa0
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	4013      	ands	r3, r2
 800c510:	697a      	ldr	r2, [r7, #20]
 800c512:	4313      	orrs	r3, r2
 800c514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	693a      	ldr	r2, [r7, #16]
 800c51a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	697a      	ldr	r2, [r7, #20]
 800c520:	621a      	str	r2, [r3, #32]
}
 800c522:	46c0      	nop			@ (mov r8, r8)
 800c524:	46bd      	mov	sp, r7
 800c526:	b006      	add	sp, #24
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	46c0      	nop			@ (mov r8, r8)
 800c52c:	ffffefff 	.word	0xffffefff
 800c530:	fffffcff 	.word	0xfffffcff
 800c534:	ffff0fff 	.word	0xffff0fff
 800c538:	ffff5fff 	.word	0xffff5fff

0800c53c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	4a08      	ldr	r2, [pc, #32]	@ (800c570 <TIM_ITRx_SetConfig+0x34>)
 800c550:	4013      	ands	r3, r2
 800c552:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4313      	orrs	r3, r2
 800c55a:	2207      	movs	r2, #7
 800c55c:	4313      	orrs	r3, r2
 800c55e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	68fa      	ldr	r2, [r7, #12]
 800c564:	609a      	str	r2, [r3, #8]
}
 800c566:	46c0      	nop			@ (mov r8, r8)
 800c568:	46bd      	mov	sp, r7
 800c56a:	b004      	add	sp, #16
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	46c0      	nop			@ (mov r8, r8)
 800c570:	ffcfff8f 	.word	0xffcfff8f

0800c574 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b086      	sub	sp, #24
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	4a09      	ldr	r2, [pc, #36]	@ (800c5b0 <TIM_ETR_SetConfig+0x3c>)
 800c58c:	4013      	ands	r3, r2
 800c58e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	021a      	lsls	r2, r3, #8
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	431a      	orrs	r2, r3
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	697a      	ldr	r2, [r7, #20]
 800c5a6:	609a      	str	r2, [r3, #8]
}
 800c5a8:	46c0      	nop			@ (mov r8, r8)
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	b006      	add	sp, #24
 800c5ae:	bd80      	pop	{r7, pc}
 800c5b0:	ffff00ff 	.word	0xffff00ff

0800c5b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	221f      	movs	r2, #31
 800c5c4:	4013      	ands	r3, r2
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	409a      	lsls	r2, r3
 800c5ca:	0013      	movs	r3, r2
 800c5cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a1b      	ldr	r3, [r3, #32]
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	43d2      	mvns	r2, r2
 800c5d6:	401a      	ands	r2, r3
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	6a1a      	ldr	r2, [r3, #32]
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	211f      	movs	r1, #31
 800c5e4:	400b      	ands	r3, r1
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	4099      	lsls	r1, r3
 800c5ea:	000b      	movs	r3, r1
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	621a      	str	r2, [r3, #32]
}
 800c5f2:	46c0      	nop			@ (mov r8, r8)
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	b006      	add	sp, #24
 800c5f8:	bd80      	pop	{r7, pc}
	...

0800c5fc <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2184      	movs	r1, #132	@ 0x84
 800c608:	4a1c      	ldr	r2, [pc, #112]	@ (800c67c <TIM_ResetCallback+0x80>)
 800c60a:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2188      	movs	r1, #136	@ 0x88
 800c610:	4a1b      	ldr	r2, [pc, #108]	@ (800c680 <TIM_ResetCallback+0x84>)
 800c612:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	218c      	movs	r1, #140	@ 0x8c
 800c618:	4a1a      	ldr	r2, [pc, #104]	@ (800c684 <TIM_ResetCallback+0x88>)
 800c61a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	2190      	movs	r1, #144	@ 0x90
 800c620:	4a19      	ldr	r2, [pc, #100]	@ (800c688 <TIM_ResetCallback+0x8c>)
 800c622:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2194      	movs	r1, #148	@ 0x94
 800c628:	4a18      	ldr	r2, [pc, #96]	@ (800c68c <TIM_ResetCallback+0x90>)
 800c62a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2198      	movs	r1, #152	@ 0x98
 800c630:	4a17      	ldr	r2, [pc, #92]	@ (800c690 <TIM_ResetCallback+0x94>)
 800c632:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	219c      	movs	r1, #156	@ 0x9c
 800c638:	4a16      	ldr	r2, [pc, #88]	@ (800c694 <TIM_ResetCallback+0x98>)
 800c63a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	21a0      	movs	r1, #160	@ 0xa0
 800c640:	4a15      	ldr	r2, [pc, #84]	@ (800c698 <TIM_ResetCallback+0x9c>)
 800c642:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	21a4      	movs	r1, #164	@ 0xa4
 800c648:	4a14      	ldr	r2, [pc, #80]	@ (800c69c <TIM_ResetCallback+0xa0>)
 800c64a:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	21a8      	movs	r1, #168	@ 0xa8
 800c650:	4a13      	ldr	r2, [pc, #76]	@ (800c6a0 <TIM_ResetCallback+0xa4>)
 800c652:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	21ac      	movs	r1, #172	@ 0xac
 800c658:	4a12      	ldr	r2, [pc, #72]	@ (800c6a4 <TIM_ResetCallback+0xa8>)
 800c65a:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	21b0      	movs	r1, #176	@ 0xb0
 800c660:	4a11      	ldr	r2, [pc, #68]	@ (800c6a8 <TIM_ResetCallback+0xac>)
 800c662:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	21b4      	movs	r1, #180	@ 0xb4
 800c668:	4a10      	ldr	r2, [pc, #64]	@ (800c6ac <TIM_ResetCallback+0xb0>)
 800c66a:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	21b8      	movs	r1, #184	@ 0xb8
 800c670:	4a0f      	ldr	r2, [pc, #60]	@ (800c6b0 <TIM_ResetCallback+0xb4>)
 800c672:	505a      	str	r2, [r3, r1]
}
 800c674:	46c0      	nop			@ (mov r8, r8)
 800c676:	46bd      	mov	sp, r7
 800c678:	b002      	add	sp, #8
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	0800b955 	.word	0x0800b955
 800c680:	0800b965 	.word	0x0800b965
 800c684:	0800b9c5 	.word	0x0800b9c5
 800c688:	0800b9d5 	.word	0x0800b9d5
 800c68c:	0800b985 	.word	0x0800b985
 800c690:	0800b995 	.word	0x0800b995
 800c694:	0800b975 	.word	0x0800b975
 800c698:	0800b9a5 	.word	0x0800b9a5
 800c69c:	0800b9b5 	.word	0x0800b9b5
 800c6a0:	0800b9e5 	.word	0x0800b9e5
 800c6a4:	0800c8bd 	.word	0x0800c8bd
 800c6a8:	0800c8cd 	.word	0x0800c8cd
 800c6ac:	0800c8dd 	.word	0x0800c8dd
 800c6b0:	0800c8ed 	.word	0x0800c8ed

0800c6b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	223c      	movs	r2, #60	@ 0x3c
 800c6c2:	5c9b      	ldrb	r3, [r3, r2]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	e050      	b.n	800c76e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	223c      	movs	r2, #60	@ 0x3c
 800c6d0:	2101      	movs	r1, #1
 800c6d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	223d      	movs	r2, #61	@ 0x3d
 800c6d8:	2102      	movs	r1, #2
 800c6da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a21      	ldr	r2, [pc, #132]	@ (800c778 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d108      	bne.n	800c708 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4a20      	ldr	r2, [pc, #128]	@ (800c77c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	4313      	orrs	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2270      	movs	r2, #112	@ 0x70
 800c70c:	4393      	bics	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	68fa      	ldr	r2, [r7, #12]
 800c716:	4313      	orrs	r3, r2
 800c718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a14      	ldr	r2, [pc, #80]	@ (800c778 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d00a      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	2380      	movs	r3, #128	@ 0x80
 800c732:	05db      	lsls	r3, r3, #23
 800c734:	429a      	cmp	r2, r3
 800c736:	d004      	beq.n	800c742 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4a10      	ldr	r2, [pc, #64]	@ (800c780 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c73e:	4293      	cmp	r3, r2
 800c740:	d10c      	bne.n	800c75c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2280      	movs	r2, #128	@ 0x80
 800c746:	4393      	bics	r3, r2
 800c748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	4313      	orrs	r3, r2
 800c752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68ba      	ldr	r2, [r7, #8]
 800c75a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	223d      	movs	r2, #61	@ 0x3d
 800c760:	2101      	movs	r1, #1
 800c762:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	223c      	movs	r2, #60	@ 0x3c
 800c768:	2100      	movs	r1, #0
 800c76a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	0018      	movs	r0, r3
 800c770:	46bd      	mov	sp, r7
 800c772:	b004      	add	sp, #16
 800c774:	bd80      	pop	{r7, pc}
 800c776:	46c0      	nop			@ (mov r8, r8)
 800c778:	40012c00 	.word	0x40012c00
 800c77c:	ff0fffff 	.word	0xff0fffff
 800c780:	40000400 	.word	0x40000400

0800c784 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	223c      	movs	r2, #60	@ 0x3c
 800c796:	5c9b      	ldrb	r3, [r3, r2]
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d101      	bne.n	800c7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c79c:	2302      	movs	r3, #2
 800c79e:	e06f      	b.n	800c880 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	223c      	movs	r2, #60	@ 0x3c
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	22ff      	movs	r2, #255	@ 0xff
 800c7ac:	4393      	bics	r3, r2
 800c7ae:	001a      	movs	r2, r3
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	4313      	orrs	r3, r2
 800c7b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	4a33      	ldr	r2, [pc, #204]	@ (800c888 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c7bc:	401a      	ands	r2, r3
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	4a30      	ldr	r2, [pc, #192]	@ (800c88c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c7ca:	401a      	ands	r2, r3
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	4a2e      	ldr	r2, [pc, #184]	@ (800c890 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c7d8:	401a      	ands	r2, r3
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	4a2b      	ldr	r2, [pc, #172]	@ (800c894 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c7e6:	401a      	ands	r2, r3
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a29      	ldr	r2, [pc, #164]	@ (800c898 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c7f4:	401a      	ands	r2, r3
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	695b      	ldr	r3, [r3, #20]
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4a26      	ldr	r2, [pc, #152]	@ (800c89c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c802:	401a      	ands	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c808:	4313      	orrs	r3, r2
 800c80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4a24      	ldr	r2, [pc, #144]	@ (800c8a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c810:	401a      	ands	r2, r3
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	041b      	lsls	r3, r3, #16
 800c818:	4313      	orrs	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	4a21      	ldr	r2, [pc, #132]	@ (800c8a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c820:	401a      	ands	r2, r3
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	69db      	ldr	r3, [r3, #28]
 800c826:	4313      	orrs	r3, r2
 800c828:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a1e      	ldr	r2, [pc, #120]	@ (800c8a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d11c      	bne.n	800c86e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	4a1d      	ldr	r2, [pc, #116]	@ (800c8ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c838:	401a      	ands	r2, r3
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c83e:	051b      	lsls	r3, r3, #20
 800c840:	4313      	orrs	r3, r2
 800c842:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	4a1a      	ldr	r2, [pc, #104]	@ (800c8b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c848:	401a      	ands	r2, r3
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	6a1b      	ldr	r3, [r3, #32]
 800c84e:	4313      	orrs	r3, r2
 800c850:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	4a17      	ldr	r2, [pc, #92]	@ (800c8b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c856:	401a      	ands	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c85c:	4313      	orrs	r3, r2
 800c85e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	4a15      	ldr	r2, [pc, #84]	@ (800c8b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c864:	401a      	ands	r2, r3
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86a:	4313      	orrs	r3, r2
 800c86c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	223c      	movs	r2, #60	@ 0x3c
 800c87a:	2100      	movs	r1, #0
 800c87c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c87e:	2300      	movs	r3, #0
}
 800c880:	0018      	movs	r0, r3
 800c882:	46bd      	mov	sp, r7
 800c884:	b004      	add	sp, #16
 800c886:	bd80      	pop	{r7, pc}
 800c888:	fffffcff 	.word	0xfffffcff
 800c88c:	fffffbff 	.word	0xfffffbff
 800c890:	fffff7ff 	.word	0xfffff7ff
 800c894:	ffffefff 	.word	0xffffefff
 800c898:	ffffdfff 	.word	0xffffdfff
 800c89c:	ffffbfff 	.word	0xffffbfff
 800c8a0:	fff0ffff 	.word	0xfff0ffff
 800c8a4:	efffffff 	.word	0xefffffff
 800c8a8:	40012c00 	.word	0x40012c00
 800c8ac:	ff0fffff 	.word	0xff0fffff
 800c8b0:	feffffff 	.word	0xfeffffff
 800c8b4:	fdffffff 	.word	0xfdffffff
 800c8b8:	dfffffff 	.word	0xdfffffff

0800c8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b082      	sub	sp, #8
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8c4:	46c0      	nop			@ (mov r8, r8)
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	b002      	add	sp, #8
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800c8d4:	46c0      	nop			@ (mov r8, r8)
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	b002      	add	sp, #8
 800c8da:	bd80      	pop	{r7, pc}

0800c8dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c8e4:	46c0      	nop			@ (mov r8, r8)
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	b002      	add	sp, #8
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b082      	sub	sp, #8
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c8f4:	46c0      	nop			@ (mov r8, r8)
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	b002      	add	sp, #8
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b082      	sub	sp, #8
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d101      	bne.n	800c90e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e055      	b.n	800c9ba <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2288      	movs	r2, #136	@ 0x88
 800c912:	589b      	ldr	r3, [r3, r2]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d116      	bne.n	800c946 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2284      	movs	r2, #132	@ 0x84
 800c91c:	2100      	movs	r1, #0
 800c91e:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	0018      	movs	r0, r3
 800c924:	f000 fce0 	bl	800d2e8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	22c4      	movs	r2, #196	@ 0xc4
 800c92c:	589b      	ldr	r3, [r3, r2]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d103      	bne.n	800c93a <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	21c4      	movs	r1, #196	@ 0xc4
 800c936:	4a23      	ldr	r2, [pc, #140]	@ (800c9c4 <HAL_UART_Init+0xc8>)
 800c938:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	22c4      	movs	r2, #196	@ 0xc4
 800c93e:	589b      	ldr	r3, [r3, r2]
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	0010      	movs	r0, r2
 800c944:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2288      	movs	r2, #136	@ 0x88
 800c94a:	2124      	movs	r1, #36	@ 0x24
 800c94c:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2101      	movs	r1, #1
 800c95a:	438a      	bics	r2, r1
 800c95c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c962:	2b00      	cmp	r3, #0
 800c964:	d003      	beq.n	800c96e <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	0018      	movs	r0, r3
 800c96a:	f000 ff85 	bl	800d878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	0018      	movs	r0, r3
 800c972:	f000 fd09 	bl	800d388 <UART_SetConfig>
 800c976:	0003      	movs	r3, r0
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d101      	bne.n	800c980 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	e01c      	b.n	800c9ba <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	685a      	ldr	r2, [r3, #4]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	490f      	ldr	r1, [pc, #60]	@ (800c9c8 <HAL_UART_Init+0xcc>)
 800c98c:	400a      	ands	r2, r1
 800c98e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	689a      	ldr	r2, [r3, #8]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	212a      	movs	r1, #42	@ 0x2a
 800c99c:	438a      	bics	r2, r1
 800c99e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2101      	movs	r1, #1
 800c9ac:	430a      	orrs	r2, r1
 800c9ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	0018      	movs	r0, r3
 800c9b4:	f001 f814 	bl	800d9e0 <UART_CheckIdleState>
 800c9b8:	0003      	movs	r3, r0
}
 800c9ba:	0018      	movs	r0, r3
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	b002      	add	sp, #8
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	46c0      	nop			@ (mov r8, r8)
 800c9c4:	08005dcd 	.word	0x08005dcd
 800c9c8:	ffffb7ff 	.word	0xffffb7ff

0800c9cc <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b086      	sub	sp, #24
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	60f8      	str	r0, [r7, #12]
 800c9d4:	607a      	str	r2, [r7, #4]
 800c9d6:	230b      	movs	r3, #11
 800c9d8:	18fb      	adds	r3, r7, r3
 800c9da:	1c0a      	adds	r2, r1, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c9de:	2317      	movs	r3, #23
 800c9e0:	18fb      	adds	r3, r7, r3
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d109      	bne.n	800ca00 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2290      	movs	r2, #144	@ 0x90
 800c9f0:	589b      	ldr	r3, [r3, r2]
 800c9f2:	2240      	movs	r2, #64	@ 0x40
 800c9f4:	431a      	orrs	r2, r3
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2190      	movs	r1, #144	@ 0x90
 800c9fa:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e08f      	b.n	800cb20 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2288      	movs	r2, #136	@ 0x88
 800ca04:	589b      	ldr	r3, [r3, r2]
 800ca06:	2b20      	cmp	r3, #32
 800ca08:	d157      	bne.n	800caba <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800ca0a:	230b      	movs	r3, #11
 800ca0c:	18fb      	adds	r3, r7, r3
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	2b0c      	cmp	r3, #12
 800ca12:	d845      	bhi.n	800caa0 <HAL_UART_RegisterCallback+0xd4>
 800ca14:	009a      	lsls	r2, r3, #2
 800ca16:	4b44      	ldr	r3, [pc, #272]	@ (800cb28 <HAL_UART_RegisterCallback+0x15c>)
 800ca18:	18d3      	adds	r3, r2, r3
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2194      	movs	r1, #148	@ 0x94
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	505a      	str	r2, [r3, r1]
        break;
 800ca26:	e078      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2198      	movs	r1, #152	@ 0x98
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	505a      	str	r2, [r3, r1]
        break;
 800ca30:	e073      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	219c      	movs	r1, #156	@ 0x9c
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	505a      	str	r2, [r3, r1]
        break;
 800ca3a:	e06e      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	21a0      	movs	r1, #160	@ 0xa0
 800ca40:	687a      	ldr	r2, [r7, #4]
 800ca42:	505a      	str	r2, [r3, r1]
        break;
 800ca44:	e069      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	21a4      	movs	r1, #164	@ 0xa4
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	505a      	str	r2, [r3, r1]
        break;
 800ca4e:	e064      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	21a8      	movs	r1, #168	@ 0xa8
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	505a      	str	r2, [r3, r1]
        break;
 800ca58:	e05f      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	21ac      	movs	r1, #172	@ 0xac
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	505a      	str	r2, [r3, r1]
        break;
 800ca62:	e05a      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	21b0      	movs	r1, #176	@ 0xb0
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	505a      	str	r2, [r3, r1]
        break;
 800ca6c:	e055      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	21b4      	movs	r1, #180	@ 0xb4
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	505a      	str	r2, [r3, r1]
        break;
 800ca76:	e050      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	21b8      	movs	r1, #184	@ 0xb8
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	505a      	str	r2, [r3, r1]
        break;
 800ca80:	e04b      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	21bc      	movs	r1, #188	@ 0xbc
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	505a      	str	r2, [r3, r1]
        break;
 800ca8a:	e046      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	21c4      	movs	r1, #196	@ 0xc4
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	505a      	str	r2, [r3, r1]
        break;
 800ca94:	e041      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	21c8      	movs	r1, #200	@ 0xc8
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	505a      	str	r2, [r3, r1]
        break;
 800ca9e:	e03c      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2290      	movs	r2, #144	@ 0x90
 800caa4:	589b      	ldr	r3, [r3, r2]
 800caa6:	2240      	movs	r2, #64	@ 0x40
 800caa8:	431a      	orrs	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2190      	movs	r1, #144	@ 0x90
 800caae:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800cab0:	2317      	movs	r3, #23
 800cab2:	18fb      	adds	r3, r7, r3
 800cab4:	2201      	movs	r2, #1
 800cab6:	701a      	strb	r2, [r3, #0]
        break;
 800cab8:	e02f      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2288      	movs	r2, #136	@ 0x88
 800cabe:	589b      	ldr	r3, [r3, r2]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d11e      	bne.n	800cb02 <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800cac4:	230b      	movs	r3, #11
 800cac6:	18fb      	adds	r3, r7, r3
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	2b0b      	cmp	r3, #11
 800cacc:	d002      	beq.n	800cad4 <HAL_UART_RegisterCallback+0x108>
 800cace:	2b0c      	cmp	r3, #12
 800cad0:	d005      	beq.n	800cade <HAL_UART_RegisterCallback+0x112>
 800cad2:	e009      	b.n	800cae8 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	21c4      	movs	r1, #196	@ 0xc4
 800cad8:	687a      	ldr	r2, [r7, #4]
 800cada:	505a      	str	r2, [r3, r1]
        break;
 800cadc:	e01d      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	21c8      	movs	r1, #200	@ 0xc8
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	505a      	str	r2, [r3, r1]
        break;
 800cae6:	e018      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2290      	movs	r2, #144	@ 0x90
 800caec:	589b      	ldr	r3, [r3, r2]
 800caee:	2240      	movs	r2, #64	@ 0x40
 800caf0:	431a      	orrs	r2, r3
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2190      	movs	r1, #144	@ 0x90
 800caf6:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800caf8:	2317      	movs	r3, #23
 800cafa:	18fb      	adds	r3, r7, r3
 800cafc:	2201      	movs	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
        break;
 800cb00:	e00b      	b.n	800cb1a <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2290      	movs	r2, #144	@ 0x90
 800cb06:	589b      	ldr	r3, [r3, r2]
 800cb08:	2240      	movs	r2, #64	@ 0x40
 800cb0a:	431a      	orrs	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2190      	movs	r1, #144	@ 0x90
 800cb10:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800cb12:	2317      	movs	r3, #23
 800cb14:	18fb      	adds	r3, r7, r3
 800cb16:	2201      	movs	r2, #1
 800cb18:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800cb1a:	2317      	movs	r3, #23
 800cb1c:	18fb      	adds	r3, r7, r3
 800cb1e:	781b      	ldrb	r3, [r3, #0]
}
 800cb20:	0018      	movs	r0, r3
 800cb22:	46bd      	mov	sp, r7
 800cb24:	b006      	add	sp, #24
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	0800ec54 	.word	0x0800ec54

0800cb2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b088      	sub	sp, #32
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	1dbb      	adds	r3, r7, #6
 800cb38:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	228c      	movs	r2, #140	@ 0x8c
 800cb3e:	589b      	ldr	r3, [r3, r2]
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d14a      	bne.n	800cbda <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <HAL_UART_Receive_DMA+0x26>
 800cb4a:	1dbb      	adds	r3, r7, #6
 800cb4c:	881b      	ldrh	r3, [r3, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d101      	bne.n	800cb56 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cb52:	2301      	movs	r3, #1
 800cb54:	e042      	b.n	800cbdc <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	689a      	ldr	r2, [r3, #8]
 800cb5a:	2380      	movs	r3, #128	@ 0x80
 800cb5c:	015b      	lsls	r3, r3, #5
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	d109      	bne.n	800cb76 <HAL_UART_Receive_DMA+0x4a>
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d105      	bne.n	800cb76 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cb6a:	68bb      	ldr	r3, [r7, #8]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	4013      	ands	r3, r2
 800cb70:	d001      	beq.n	800cb76 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e032      	b.n	800cbdc <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2200      	movs	r2, #0
 800cb7a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a18      	ldr	r2, [pc, #96]	@ (800cbe4 <HAL_UART_Receive_DMA+0xb8>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d020      	beq.n	800cbc8 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	2380      	movs	r3, #128	@ 0x80
 800cb8e:	041b      	lsls	r3, r3, #16
 800cb90:	4013      	ands	r3, r2
 800cb92:	d019      	beq.n	800cbc8 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb94:	f3ef 8310 	mrs	r3, PRIMASK
 800cb98:	613b      	str	r3, [r7, #16]
  return(result);
 800cb9a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb9c:	61fb      	str	r3, [r7, #28]
 800cb9e:	2301      	movs	r3, #1
 800cba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	f383 8810 	msr	PRIMASK, r3
}
 800cba8:	46c0      	nop			@ (mov r8, r8)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	2180      	movs	r1, #128	@ 0x80
 800cbb6:	04c9      	lsls	r1, r1, #19
 800cbb8:	430a      	orrs	r2, r1
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	69fb      	ldr	r3, [r7, #28]
 800cbbe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	f383 8810 	msr	PRIMASK, r3
}
 800cbc6:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cbc8:	1dbb      	adds	r3, r7, #6
 800cbca:	881a      	ldrh	r2, [r3, #0]
 800cbcc:	68b9      	ldr	r1, [r7, #8]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	0018      	movs	r0, r3
 800cbd2:	f001 f81f 	bl	800dc14 <UART_Start_Receive_DMA>
 800cbd6:	0003      	movs	r3, r0
 800cbd8:	e000      	b.n	800cbdc <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800cbda:	2302      	movs	r3, #2
  }
}
 800cbdc:	0018      	movs	r0, r3
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	b008      	add	sp, #32
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	40008000 	.word	0x40008000

0800cbe8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cbe8:	b5b0      	push	{r4, r5, r7, lr}
 800cbea:	b0aa      	sub	sp, #168	@ 0xa8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	69db      	ldr	r3, [r3, #28]
 800cbf6:	22a4      	movs	r2, #164	@ 0xa4
 800cbf8:	18b9      	adds	r1, r7, r2
 800cbfa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	20a0      	movs	r0, #160	@ 0xa0
 800cc04:	1839      	adds	r1, r7, r0
 800cc06:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	249c      	movs	r4, #156	@ 0x9c
 800cc10:	1939      	adds	r1, r7, r4
 800cc12:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cc14:	0011      	movs	r1, r2
 800cc16:	18bb      	adds	r3, r7, r2
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4aa5      	ldr	r2, [pc, #660]	@ (800ceb0 <HAL_UART_IRQHandler+0x2c8>)
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	2298      	movs	r2, #152	@ 0x98
 800cc20:	18bd      	adds	r5, r7, r2
 800cc22:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800cc24:	18bb      	adds	r3, r7, r2
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d11a      	bne.n	800cc62 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc2c:	187b      	adds	r3, r7, r1
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2220      	movs	r2, #32
 800cc32:	4013      	ands	r3, r2
 800cc34:	d015      	beq.n	800cc62 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc36:	183b      	adds	r3, r7, r0
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	2220      	movs	r2, #32
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	d105      	bne.n	800cc4c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc40:	193b      	adds	r3, r7, r4
 800cc42:	681a      	ldr	r2, [r3, #0]
 800cc44:	2380      	movs	r3, #128	@ 0x80
 800cc46:	055b      	lsls	r3, r3, #21
 800cc48:	4013      	ands	r3, r2
 800cc4a:	d00a      	beq.n	800cc62 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d100      	bne.n	800cc56 <HAL_UART_IRQHandler+0x6e>
 800cc54:	e2ea      	b.n	800d22c <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	0010      	movs	r0, r2
 800cc5e:	4798      	blx	r3
      }
      return;
 800cc60:	e2e4      	b.n	800d22c <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cc62:	2398      	movs	r3, #152	@ 0x98
 800cc64:	18fb      	adds	r3, r7, r3
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d100      	bne.n	800cc6e <HAL_UART_IRQHandler+0x86>
 800cc6c:	e128      	b.n	800cec0 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc6e:	239c      	movs	r3, #156	@ 0x9c
 800cc70:	18fb      	adds	r3, r7, r3
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	4a8f      	ldr	r2, [pc, #572]	@ (800ceb4 <HAL_UART_IRQHandler+0x2cc>)
 800cc76:	4013      	ands	r3, r2
 800cc78:	d106      	bne.n	800cc88 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc7a:	23a0      	movs	r3, #160	@ 0xa0
 800cc7c:	18fb      	adds	r3, r7, r3
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a8d      	ldr	r2, [pc, #564]	@ (800ceb8 <HAL_UART_IRQHandler+0x2d0>)
 800cc82:	4013      	ands	r3, r2
 800cc84:	d100      	bne.n	800cc88 <HAL_UART_IRQHandler+0xa0>
 800cc86:	e11b      	b.n	800cec0 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc88:	23a4      	movs	r3, #164	@ 0xa4
 800cc8a:	18fb      	adds	r3, r7, r3
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	4013      	ands	r3, r2
 800cc92:	d012      	beq.n	800ccba <HAL_UART_IRQHandler+0xd2>
 800cc94:	23a0      	movs	r3, #160	@ 0xa0
 800cc96:	18fb      	adds	r3, r7, r3
 800cc98:	681a      	ldr	r2, [r3, #0]
 800cc9a:	2380      	movs	r3, #128	@ 0x80
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4013      	ands	r3, r2
 800cca0:	d00b      	beq.n	800ccba <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2201      	movs	r2, #1
 800cca8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	2290      	movs	r2, #144	@ 0x90
 800ccae:	589b      	ldr	r3, [r3, r2]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	431a      	orrs	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2190      	movs	r1, #144	@ 0x90
 800ccb8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccba:	23a4      	movs	r3, #164	@ 0xa4
 800ccbc:	18fb      	adds	r3, r7, r3
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2202      	movs	r2, #2
 800ccc2:	4013      	ands	r3, r2
 800ccc4:	d011      	beq.n	800ccea <HAL_UART_IRQHandler+0x102>
 800ccc6:	239c      	movs	r3, #156	@ 0x9c
 800ccc8:	18fb      	adds	r3, r7, r3
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2201      	movs	r2, #1
 800ccce:	4013      	ands	r3, r2
 800ccd0:	d00b      	beq.n	800ccea <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2202      	movs	r2, #2
 800ccd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2290      	movs	r2, #144	@ 0x90
 800ccde:	589b      	ldr	r3, [r3, r2]
 800cce0:	2204      	movs	r2, #4
 800cce2:	431a      	orrs	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2190      	movs	r1, #144	@ 0x90
 800cce8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccea:	23a4      	movs	r3, #164	@ 0xa4
 800ccec:	18fb      	adds	r3, r7, r3
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	2204      	movs	r2, #4
 800ccf2:	4013      	ands	r3, r2
 800ccf4:	d011      	beq.n	800cd1a <HAL_UART_IRQHandler+0x132>
 800ccf6:	239c      	movs	r3, #156	@ 0x9c
 800ccf8:	18fb      	adds	r3, r7, r3
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	4013      	ands	r3, r2
 800cd00:	d00b      	beq.n	800cd1a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	2204      	movs	r2, #4
 800cd08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2290      	movs	r2, #144	@ 0x90
 800cd0e:	589b      	ldr	r3, [r3, r2]
 800cd10:	2202      	movs	r2, #2
 800cd12:	431a      	orrs	r2, r3
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2190      	movs	r1, #144	@ 0x90
 800cd18:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cd1a:	23a4      	movs	r3, #164	@ 0xa4
 800cd1c:	18fb      	adds	r3, r7, r3
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2208      	movs	r2, #8
 800cd22:	4013      	ands	r3, r2
 800cd24:	d017      	beq.n	800cd56 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd26:	23a0      	movs	r3, #160	@ 0xa0
 800cd28:	18fb      	adds	r3, r7, r3
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	4013      	ands	r3, r2
 800cd30:	d105      	bne.n	800cd3e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cd32:	239c      	movs	r3, #156	@ 0x9c
 800cd34:	18fb      	adds	r3, r7, r3
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a5e      	ldr	r2, [pc, #376]	@ (800ceb4 <HAL_UART_IRQHandler+0x2cc>)
 800cd3a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cd3c:	d00b      	beq.n	800cd56 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2208      	movs	r2, #8
 800cd44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2290      	movs	r2, #144	@ 0x90
 800cd4a:	589b      	ldr	r3, [r3, r2]
 800cd4c:	2208      	movs	r2, #8
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2190      	movs	r1, #144	@ 0x90
 800cd54:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cd56:	23a4      	movs	r3, #164	@ 0xa4
 800cd58:	18fb      	adds	r3, r7, r3
 800cd5a:	681a      	ldr	r2, [r3, #0]
 800cd5c:	2380      	movs	r3, #128	@ 0x80
 800cd5e:	011b      	lsls	r3, r3, #4
 800cd60:	4013      	ands	r3, r2
 800cd62:	d013      	beq.n	800cd8c <HAL_UART_IRQHandler+0x1a4>
 800cd64:	23a0      	movs	r3, #160	@ 0xa0
 800cd66:	18fb      	adds	r3, r7, r3
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	2380      	movs	r3, #128	@ 0x80
 800cd6c:	04db      	lsls	r3, r3, #19
 800cd6e:	4013      	ands	r3, r2
 800cd70:	d00c      	beq.n	800cd8c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	2280      	movs	r2, #128	@ 0x80
 800cd78:	0112      	lsls	r2, r2, #4
 800cd7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2290      	movs	r2, #144	@ 0x90
 800cd80:	589b      	ldr	r3, [r3, r2]
 800cd82:	2220      	movs	r2, #32
 800cd84:	431a      	orrs	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2190      	movs	r1, #144	@ 0x90
 800cd8a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2290      	movs	r2, #144	@ 0x90
 800cd90:	589b      	ldr	r3, [r3, r2]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d100      	bne.n	800cd98 <HAL_UART_IRQHandler+0x1b0>
 800cd96:	e24b      	b.n	800d230 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd98:	23a4      	movs	r3, #164	@ 0xa4
 800cd9a:	18fb      	adds	r3, r7, r3
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2220      	movs	r2, #32
 800cda0:	4013      	ands	r3, r2
 800cda2:	d015      	beq.n	800cdd0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cda4:	23a0      	movs	r3, #160	@ 0xa0
 800cda6:	18fb      	adds	r3, r7, r3
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	2220      	movs	r2, #32
 800cdac:	4013      	ands	r3, r2
 800cdae:	d106      	bne.n	800cdbe <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdb0:	239c      	movs	r3, #156	@ 0x9c
 800cdb2:	18fb      	adds	r3, r7, r3
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	2380      	movs	r3, #128	@ 0x80
 800cdb8:	055b      	lsls	r3, r3, #21
 800cdba:	4013      	ands	r3, r2
 800cdbc:	d008      	beq.n	800cdd0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d004      	beq.n	800cdd0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cdca:	687a      	ldr	r2, [r7, #4]
 800cdcc:	0010      	movs	r0, r2
 800cdce:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2290      	movs	r2, #144	@ 0x90
 800cdd4:	589b      	ldr	r3, [r3, r2]
 800cdd6:	2194      	movs	r1, #148	@ 0x94
 800cdd8:	187a      	adds	r2, r7, r1
 800cdda:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	2240      	movs	r2, #64	@ 0x40
 800cde4:	4013      	ands	r3, r2
 800cde6:	2b40      	cmp	r3, #64	@ 0x40
 800cde8:	d004      	beq.n	800cdf4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cdea:	187b      	adds	r3, r7, r1
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	2228      	movs	r2, #40	@ 0x28
 800cdf0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cdf2:	d050      	beq.n	800ce96 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	0018      	movs	r0, r3
 800cdf8:	f000 fff2 	bl	800dde0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	689b      	ldr	r3, [r3, #8]
 800ce02:	2240      	movs	r2, #64	@ 0x40
 800ce04:	4013      	ands	r3, r2
 800ce06:	2b40      	cmp	r3, #64	@ 0x40
 800ce08:	d13e      	bne.n	800ce88 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce0a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce0e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800ce10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce12:	2090      	movs	r0, #144	@ 0x90
 800ce14:	183a      	adds	r2, r7, r0
 800ce16:	6013      	str	r3, [r2, #0]
 800ce18:	2301      	movs	r3, #1
 800ce1a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce1e:	f383 8810 	msr	PRIMASK, r3
}
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689a      	ldr	r2, [r3, #8]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2140      	movs	r1, #64	@ 0x40
 800ce30:	438a      	bics	r2, r1
 800ce32:	609a      	str	r2, [r3, #8]
 800ce34:	183b      	adds	r3, r7, r0
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ce3c:	f383 8810 	msr	PRIMASK, r3
}
 800ce40:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2280      	movs	r2, #128	@ 0x80
 800ce46:	589b      	ldr	r3, [r3, r2]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d016      	beq.n	800ce7a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2280      	movs	r2, #128	@ 0x80
 800ce50:	589b      	ldr	r3, [r3, r2]
 800ce52:	4a1a      	ldr	r2, [pc, #104]	@ (800cebc <HAL_UART_IRQHandler+0x2d4>)
 800ce54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2280      	movs	r2, #128	@ 0x80
 800ce5a:	589b      	ldr	r3, [r3, r2]
 800ce5c:	0018      	movs	r0, r3
 800ce5e:	f7fb fb3f 	bl	80084e0 <HAL_DMA_Abort_IT>
 800ce62:	1e03      	subs	r3, r0, #0
 800ce64:	d022      	beq.n	800ceac <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2280      	movs	r2, #128	@ 0x80
 800ce6a:	589b      	ldr	r3, [r3, r2]
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce6e:	687a      	ldr	r2, [r7, #4]
 800ce70:	2180      	movs	r1, #128	@ 0x80
 800ce72:	5852      	ldr	r2, [r2, r1]
 800ce74:	0010      	movs	r0, r2
 800ce76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce78:	e018      	b.n	800ceac <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	22a4      	movs	r2, #164	@ 0xa4
 800ce7e:	589b      	ldr	r3, [r3, r2]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	0010      	movs	r0, r2
 800ce84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce86:	e011      	b.n	800ceac <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	22a4      	movs	r2, #164	@ 0xa4
 800ce8c:	589b      	ldr	r3, [r3, r2]
 800ce8e:	687a      	ldr	r2, [r7, #4]
 800ce90:	0010      	movs	r0, r2
 800ce92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce94:	e00a      	b.n	800ceac <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	22a4      	movs	r2, #164	@ 0xa4
 800ce9a:	589b      	ldr	r3, [r3, r2]
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	0010      	movs	r0, r2
 800cea0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2290      	movs	r2, #144	@ 0x90
 800cea6:	2100      	movs	r1, #0
 800cea8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800ceaa:	e1c1      	b.n	800d230 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceac:	46c0      	nop			@ (mov r8, r8)
    return;
 800ceae:	e1bf      	b.n	800d230 <HAL_UART_IRQHandler+0x648>
 800ceb0:	0000080f 	.word	0x0000080f
 800ceb4:	10000001 	.word	0x10000001
 800ceb8:	04000120 	.word	0x04000120
 800cebc:	0800e0b3 	.word	0x0800e0b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cec4:	2b01      	cmp	r3, #1
 800cec6:	d000      	beq.n	800ceca <HAL_UART_IRQHandler+0x2e2>
 800cec8:	e140      	b.n	800d14c <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ceca:	23a4      	movs	r3, #164	@ 0xa4
 800cecc:	18fb      	adds	r3, r7, r3
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2210      	movs	r2, #16
 800ced2:	4013      	ands	r3, r2
 800ced4:	d100      	bne.n	800ced8 <HAL_UART_IRQHandler+0x2f0>
 800ced6:	e139      	b.n	800d14c <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ced8:	23a0      	movs	r3, #160	@ 0xa0
 800ceda:	18fb      	adds	r3, r7, r3
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2210      	movs	r2, #16
 800cee0:	4013      	ands	r3, r2
 800cee2:	d100      	bne.n	800cee6 <HAL_UART_IRQHandler+0x2fe>
 800cee4:	e132      	b.n	800d14c <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	2210      	movs	r2, #16
 800ceec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	2240      	movs	r2, #64	@ 0x40
 800cef6:	4013      	ands	r3, r2
 800cef8:	2b40      	cmp	r3, #64	@ 0x40
 800cefa:	d000      	beq.n	800cefe <HAL_UART_IRQHandler+0x316>
 800cefc:	e0a5      	b.n	800d04a <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2280      	movs	r2, #128	@ 0x80
 800cf02:	589b      	ldr	r3, [r3, r2]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	685a      	ldr	r2, [r3, #4]
 800cf08:	217e      	movs	r1, #126	@ 0x7e
 800cf0a:	187b      	adds	r3, r7, r1
 800cf0c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800cf0e:	187b      	adds	r3, r7, r1
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d100      	bne.n	800cf18 <HAL_UART_IRQHandler+0x330>
 800cf16:	e18d      	b.n	800d234 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	225c      	movs	r2, #92	@ 0x5c
 800cf1c:	5a9b      	ldrh	r3, [r3, r2]
 800cf1e:	187a      	adds	r2, r7, r1
 800cf20:	8812      	ldrh	r2, [r2, #0]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d300      	bcc.n	800cf28 <HAL_UART_IRQHandler+0x340>
 800cf26:	e185      	b.n	800d234 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	187a      	adds	r2, r7, r1
 800cf2c:	215e      	movs	r1, #94	@ 0x5e
 800cf2e:	8812      	ldrh	r2, [r2, #0]
 800cf30:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2280      	movs	r2, #128	@ 0x80
 800cf36:	589b      	ldr	r3, [r3, r2]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2220      	movs	r2, #32
 800cf3e:	4013      	ands	r3, r2
 800cf40:	d170      	bne.n	800d024 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf42:	f3ef 8310 	mrs	r3, PRIMASK
 800cf46:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf52:	f383 8810 	msr	PRIMASK, r3
}
 800cf56:	46c0      	nop			@ (mov r8, r8)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	681a      	ldr	r2, [r3, #0]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	49b8      	ldr	r1, [pc, #736]	@ (800d244 <HAL_UART_IRQHandler+0x65c>)
 800cf64:	400a      	ands	r2, r1
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6e:	f383 8810 	msr	PRIMASK, r3
}
 800cf72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf74:	f3ef 8310 	mrs	r3, PRIMASK
 800cf78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800cf7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf7c:	677b      	str	r3, [r7, #116]	@ 0x74
 800cf7e:	2301      	movs	r3, #1
 800cf80:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf84:	f383 8810 	msr	PRIMASK, r3
}
 800cf88:	46c0      	nop			@ (mov r8, r8)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	689a      	ldr	r2, [r3, #8]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2101      	movs	r1, #1
 800cf96:	438a      	bics	r2, r1
 800cf98:	609a      	str	r2, [r3, #8]
 800cf9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf9c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfa0:	f383 8810 	msr	PRIMASK, r3
}
 800cfa4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa6:	f3ef 8310 	mrs	r3, PRIMASK
 800cfaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800cfac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cfae:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfb6:	f383 8810 	msr	PRIMASK, r3
}
 800cfba:	46c0      	nop			@ (mov r8, r8)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	689a      	ldr	r2, [r3, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	2140      	movs	r1, #64	@ 0x40
 800cfc8:	438a      	bics	r2, r1
 800cfca:	609a      	str	r2, [r3, #8]
 800cfcc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cfce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd2:	f383 8810 	msr	PRIMASK, r3
}
 800cfd6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	228c      	movs	r2, #140	@ 0x8c
 800cfdc:	2120      	movs	r1, #32
 800cfde:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfe6:	f3ef 8310 	mrs	r3, PRIMASK
 800cfea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800cfec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cff0:	2301      	movs	r3, #1
 800cff2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cff4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cff6:	f383 8810 	msr	PRIMASK, r3
}
 800cffa:	46c0      	nop			@ (mov r8, r8)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	2110      	movs	r1, #16
 800d008:	438a      	bics	r2, r1
 800d00a:	601a      	str	r2, [r3, #0]
 800d00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d00e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d012:	f383 8810 	msr	PRIMASK, r3
}
 800d016:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2280      	movs	r2, #128	@ 0x80
 800d01c:	589b      	ldr	r3, [r3, r2]
 800d01e:	0018      	movs	r0, r3
 800d020:	f7fb f9fc 	bl	800841c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2202      	movs	r2, #2
 800d028:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	22c0      	movs	r2, #192	@ 0xc0
 800d02e:	589b      	ldr	r3, [r3, r2]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	215c      	movs	r1, #92	@ 0x5c
 800d034:	5a51      	ldrh	r1, [r2, r1]
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	205e      	movs	r0, #94	@ 0x5e
 800d03a:	5a12      	ldrh	r2, [r2, r0]
 800d03c:	b292      	uxth	r2, r2
 800d03e:	1a8a      	subs	r2, r1, r2
 800d040:	b291      	uxth	r1, r2
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	0010      	movs	r0, r2
 800d046:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d048:	e0f4      	b.n	800d234 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	225c      	movs	r2, #92	@ 0x5c
 800d04e:	5a99      	ldrh	r1, [r3, r2]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	225e      	movs	r2, #94	@ 0x5e
 800d054:	5a9b      	ldrh	r3, [r3, r2]
 800d056:	b29a      	uxth	r2, r3
 800d058:	208e      	movs	r0, #142	@ 0x8e
 800d05a:	183b      	adds	r3, r7, r0
 800d05c:	1a8a      	subs	r2, r1, r2
 800d05e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	225e      	movs	r2, #94	@ 0x5e
 800d064:	5a9b      	ldrh	r3, [r3, r2]
 800d066:	b29b      	uxth	r3, r3
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d100      	bne.n	800d06e <HAL_UART_IRQHandler+0x486>
 800d06c:	e0e4      	b.n	800d238 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800d06e:	183b      	adds	r3, r7, r0
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d100      	bne.n	800d078 <HAL_UART_IRQHandler+0x490>
 800d076:	e0df      	b.n	800d238 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d078:	f3ef 8310 	mrs	r3, PRIMASK
 800d07c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d07e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d080:	2488      	movs	r4, #136	@ 0x88
 800d082:	193a      	adds	r2, r7, r4
 800d084:	6013      	str	r3, [r2, #0]
 800d086:	2301      	movs	r3, #1
 800d088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d08a:	693b      	ldr	r3, [r7, #16]
 800d08c:	f383 8810 	msr	PRIMASK, r3
}
 800d090:	46c0      	nop			@ (mov r8, r8)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	681a      	ldr	r2, [r3, #0]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	496a      	ldr	r1, [pc, #424]	@ (800d248 <HAL_UART_IRQHandler+0x660>)
 800d09e:	400a      	ands	r2, r1
 800d0a0:	601a      	str	r2, [r3, #0]
 800d0a2:	193b      	adds	r3, r7, r4
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	f383 8810 	msr	PRIMASK, r3
}
 800d0ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b4:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0b6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0b8:	2484      	movs	r4, #132	@ 0x84
 800d0ba:	193a      	adds	r2, r7, r4
 800d0bc:	6013      	str	r3, [r2, #0]
 800d0be:	2301      	movs	r3, #1
 800d0c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	f383 8810 	msr	PRIMASK, r3
}
 800d0c8:	46c0      	nop			@ (mov r8, r8)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	689a      	ldr	r2, [r3, #8]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	495d      	ldr	r1, [pc, #372]	@ (800d24c <HAL_UART_IRQHandler+0x664>)
 800d0d6:	400a      	ands	r2, r1
 800d0d8:	609a      	str	r2, [r3, #8]
 800d0da:	193b      	adds	r3, r7, r4
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0e0:	6a3b      	ldr	r3, [r7, #32]
 800d0e2:	f383 8810 	msr	PRIMASK, r3
}
 800d0e6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	228c      	movs	r2, #140	@ 0x8c
 800d0ec:	2120      	movs	r1, #32
 800d0ee:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0fc:	f3ef 8310 	mrs	r3, PRIMASK
 800d100:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d104:	2480      	movs	r4, #128	@ 0x80
 800d106:	193a      	adds	r2, r7, r4
 800d108:	6013      	str	r3, [r2, #0]
 800d10a:	2301      	movs	r3, #1
 800d10c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d110:	f383 8810 	msr	PRIMASK, r3
}
 800d114:	46c0      	nop			@ (mov r8, r8)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2110      	movs	r1, #16
 800d122:	438a      	bics	r2, r1
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	193b      	adds	r3, r7, r4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d12e:	f383 8810 	msr	PRIMASK, r3
}
 800d132:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	22c0      	movs	r2, #192	@ 0xc0
 800d13e:	589b      	ldr	r3, [r3, r2]
 800d140:	183a      	adds	r2, r7, r0
 800d142:	8811      	ldrh	r1, [r2, #0]
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	0010      	movs	r0, r2
 800d148:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d14a:	e075      	b.n	800d238 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d14c:	23a4      	movs	r3, #164	@ 0xa4
 800d14e:	18fb      	adds	r3, r7, r3
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	2380      	movs	r3, #128	@ 0x80
 800d154:	035b      	lsls	r3, r3, #13
 800d156:	4013      	ands	r3, r2
 800d158:	d012      	beq.n	800d180 <HAL_UART_IRQHandler+0x598>
 800d15a:	239c      	movs	r3, #156	@ 0x9c
 800d15c:	18fb      	adds	r3, r7, r3
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	2380      	movs	r3, #128	@ 0x80
 800d162:	03db      	lsls	r3, r3, #15
 800d164:	4013      	ands	r3, r2
 800d166:	d00b      	beq.n	800d180 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2280      	movs	r2, #128	@ 0x80
 800d16e:	0352      	lsls	r2, r2, #13
 800d170:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	22b4      	movs	r2, #180	@ 0xb4
 800d176:	589b      	ldr	r3, [r3, r2]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	0010      	movs	r0, r2
 800d17c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d17e:	e05e      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d180:	23a4      	movs	r3, #164	@ 0xa4
 800d182:	18fb      	adds	r3, r7, r3
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2280      	movs	r2, #128	@ 0x80
 800d188:	4013      	ands	r3, r2
 800d18a:	d016      	beq.n	800d1ba <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d18c:	23a0      	movs	r3, #160	@ 0xa0
 800d18e:	18fb      	adds	r3, r7, r3
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2280      	movs	r2, #128	@ 0x80
 800d194:	4013      	ands	r3, r2
 800d196:	d106      	bne.n	800d1a6 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d198:	239c      	movs	r3, #156	@ 0x9c
 800d19a:	18fb      	adds	r3, r7, r3
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	2380      	movs	r3, #128	@ 0x80
 800d1a0:	041b      	lsls	r3, r3, #16
 800d1a2:	4013      	ands	r3, r2
 800d1a4:	d009      	beq.n	800d1ba <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d046      	beq.n	800d23c <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	0010      	movs	r0, r2
 800d1b6:	4798      	blx	r3
    }
    return;
 800d1b8:	e040      	b.n	800d23c <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1ba:	23a4      	movs	r3, #164	@ 0xa4
 800d1bc:	18fb      	adds	r3, r7, r3
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2240      	movs	r2, #64	@ 0x40
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	d00a      	beq.n	800d1dc <HAL_UART_IRQHandler+0x5f4>
 800d1c6:	23a0      	movs	r3, #160	@ 0xa0
 800d1c8:	18fb      	adds	r3, r7, r3
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2240      	movs	r2, #64	@ 0x40
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	d004      	beq.n	800d1dc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	f000 ff85 	bl	800e0e4 <UART_EndTransmit_IT>
    return;
 800d1da:	e030      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d1dc:	23a4      	movs	r3, #164	@ 0xa4
 800d1de:	18fb      	adds	r3, r7, r3
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	2380      	movs	r3, #128	@ 0x80
 800d1e4:	041b      	lsls	r3, r3, #16
 800d1e6:	4013      	ands	r3, r2
 800d1e8:	d00d      	beq.n	800d206 <HAL_UART_IRQHandler+0x61e>
 800d1ea:	23a0      	movs	r3, #160	@ 0xa0
 800d1ec:	18fb      	adds	r3, r7, r3
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	2380      	movs	r3, #128	@ 0x80
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	d006      	beq.n	800d206 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	22bc      	movs	r2, #188	@ 0xbc
 800d1fc:	589b      	ldr	r3, [r3, r2]
 800d1fe:	687a      	ldr	r2, [r7, #4]
 800d200:	0010      	movs	r0, r2
 800d202:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d204:	e01b      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d206:	23a4      	movs	r3, #164	@ 0xa4
 800d208:	18fb      	adds	r3, r7, r3
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	2380      	movs	r3, #128	@ 0x80
 800d20e:	045b      	lsls	r3, r3, #17
 800d210:	4013      	ands	r3, r2
 800d212:	d014      	beq.n	800d23e <HAL_UART_IRQHandler+0x656>
 800d214:	23a0      	movs	r3, #160	@ 0xa0
 800d216:	18fb      	adds	r3, r7, r3
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	da0f      	bge.n	800d23e <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	22b8      	movs	r2, #184	@ 0xb8
 800d222:	589b      	ldr	r3, [r3, r2]
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	0010      	movs	r0, r2
 800d228:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d22a:	e008      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
      return;
 800d22c:	46c0      	nop			@ (mov r8, r8)
 800d22e:	e006      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
    return;
 800d230:	46c0      	nop			@ (mov r8, r8)
 800d232:	e004      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
      return;
 800d234:	46c0      	nop			@ (mov r8, r8)
 800d236:	e002      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
      return;
 800d238:	46c0      	nop			@ (mov r8, r8)
 800d23a:	e000      	b.n	800d23e <HAL_UART_IRQHandler+0x656>
    return;
 800d23c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800d23e:	46bd      	mov	sp, r7
 800d240:	b02a      	add	sp, #168	@ 0xa8
 800d242:	bdb0      	pop	{r4, r5, r7, pc}
 800d244:	fffffeff 	.word	0xfffffeff
 800d248:	fffffedf 	.word	0xfffffedf
 800d24c:	effffffe 	.word	0xeffffffe

0800d250 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d258:	46c0      	nop			@ (mov r8, r8)
 800d25a:	46bd      	mov	sp, r7
 800d25c:	b002      	add	sp, #8
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b082      	sub	sp, #8
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d268:	46c0      	nop			@ (mov r8, r8)
 800d26a:	46bd      	mov	sp, r7
 800d26c:	b002      	add	sp, #8
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b082      	sub	sp, #8
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d278:	46c0      	nop			@ (mov r8, r8)
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b002      	add	sp, #8
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d288:	46c0      	nop			@ (mov r8, r8)
 800d28a:	46bd      	mov	sp, r7
 800d28c:	b002      	add	sp, #8
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d298:	46c0      	nop			@ (mov r8, r8)
 800d29a:	46bd      	mov	sp, r7
 800d29c:	b002      	add	sp, #8
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b082      	sub	sp, #8
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d2a8:	46c0      	nop			@ (mov r8, r8)
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	b002      	add	sp, #8
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d2b8:	46c0      	nop			@ (mov r8, r8)
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	b002      	add	sp, #8
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d2c8:	46c0      	nop			@ (mov r8, r8)
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	b002      	add	sp, #8
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	000a      	movs	r2, r1
 800d2da:	1cbb      	adds	r3, r7, #2
 800d2dc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d2de:	46c0      	nop			@ (mov r8, r8)
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	b002      	add	sp, #8
 800d2e4:	bd80      	pop	{r7, pc}
	...

0800d2e8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2194      	movs	r1, #148	@ 0x94
 800d2f4:	4a18      	ldr	r2, [pc, #96]	@ (800d358 <UART_InitCallbacksToDefault+0x70>)
 800d2f6:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2198      	movs	r1, #152	@ 0x98
 800d2fc:	4a17      	ldr	r2, [pc, #92]	@ (800d35c <UART_InitCallbacksToDefault+0x74>)
 800d2fe:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	219c      	movs	r1, #156	@ 0x9c
 800d304:	4a16      	ldr	r2, [pc, #88]	@ (800d360 <UART_InitCallbacksToDefault+0x78>)
 800d306:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	21a0      	movs	r1, #160	@ 0xa0
 800d30c:	4a15      	ldr	r2, [pc, #84]	@ (800d364 <UART_InitCallbacksToDefault+0x7c>)
 800d30e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	21a4      	movs	r1, #164	@ 0xa4
 800d314:	4a14      	ldr	r2, [pc, #80]	@ (800d368 <UART_InitCallbacksToDefault+0x80>)
 800d316:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	21a8      	movs	r1, #168	@ 0xa8
 800d31c:	4a13      	ldr	r2, [pc, #76]	@ (800d36c <UART_InitCallbacksToDefault+0x84>)
 800d31e:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	21ac      	movs	r1, #172	@ 0xac
 800d324:	4a12      	ldr	r2, [pc, #72]	@ (800d370 <UART_InitCallbacksToDefault+0x88>)
 800d326:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	21b0      	movs	r1, #176	@ 0xb0
 800d32c:	4a11      	ldr	r2, [pc, #68]	@ (800d374 <UART_InitCallbacksToDefault+0x8c>)
 800d32e:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	21b4      	movs	r1, #180	@ 0xb4
 800d334:	4a10      	ldr	r2, [pc, #64]	@ (800d378 <UART_InitCallbacksToDefault+0x90>)
 800d336:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	21b8      	movs	r1, #184	@ 0xb8
 800d33c:	4a0f      	ldr	r2, [pc, #60]	@ (800d37c <UART_InitCallbacksToDefault+0x94>)
 800d33e:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	21bc      	movs	r1, #188	@ 0xbc
 800d344:	4a0e      	ldr	r2, [pc, #56]	@ (800d380 <UART_InitCallbacksToDefault+0x98>)
 800d346:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	21c0      	movs	r1, #192	@ 0xc0
 800d34c:	4a0d      	ldr	r2, [pc, #52]	@ (800d384 <UART_InitCallbacksToDefault+0x9c>)
 800d34e:	505a      	str	r2, [r3, r1]

}
 800d350:	46c0      	nop			@ (mov r8, r8)
 800d352:	46bd      	mov	sp, r7
 800d354:	b002      	add	sp, #8
 800d356:	bd80      	pop	{r7, pc}
 800d358:	0800d261 	.word	0x0800d261
 800d35c:	0800d251 	.word	0x0800d251
 800d360:	0800d281 	.word	0x0800d281
 800d364:	0800d271 	.word	0x0800d271
 800d368:	0800d291 	.word	0x0800d291
 800d36c:	0800d2a1 	.word	0x0800d2a1
 800d370:	0800d2b1 	.word	0x0800d2b1
 800d374:	0800d2c1 	.word	0x0800d2c1
 800d378:	0800e141 	.word	0x0800e141
 800d37c:	0800e151 	.word	0x0800e151
 800d380:	0800e161 	.word	0x0800e161
 800d384:	0800d2d1 	.word	0x0800d2d1

0800d388 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d388:	b5b0      	push	{r4, r5, r7, lr}
 800d38a:	b090      	sub	sp, #64	@ 0x40
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d390:	231a      	movs	r3, #26
 800d392:	2220      	movs	r2, #32
 800d394:	189b      	adds	r3, r3, r2
 800d396:	19db      	adds	r3, r3, r7
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d39e:	689a      	ldr	r2, [r3, #8]
 800d3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a2:	691b      	ldr	r3, [r3, #16]
 800d3a4:	431a      	orrs	r2, r3
 800d3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	431a      	orrs	r2, r3
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ae:	69db      	ldr	r3, [r3, #28]
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	4ac4      	ldr	r2, [pc, #784]	@ (800d6cc <UART_SetConfig+0x344>)
 800d3bc:	4013      	ands	r3, r2
 800d3be:	0019      	movs	r1, r3
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c6:	430b      	orrs	r3, r1
 800d3c8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	685b      	ldr	r3, [r3, #4]
 800d3d0:	4abf      	ldr	r2, [pc, #764]	@ (800d6d0 <UART_SetConfig+0x348>)
 800d3d2:	4013      	ands	r3, r2
 800d3d4:	0018      	movs	r0, r3
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d8:	68d9      	ldr	r1, [r3, #12]
 800d3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	0003      	movs	r3, r0
 800d3e0:	430b      	orrs	r3, r1
 800d3e2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	4ab9      	ldr	r2, [pc, #740]	@ (800d6d4 <UART_SetConfig+0x34c>)
 800d3f0:	4293      	cmp	r3, r2
 800d3f2:	d004      	beq.n	800d3fe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3fa:	4313      	orrs	r3, r2
 800d3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	689b      	ldr	r3, [r3, #8]
 800d404:	4ab4      	ldr	r2, [pc, #720]	@ (800d6d8 <UART_SetConfig+0x350>)
 800d406:	4013      	ands	r3, r2
 800d408:	0019      	movs	r1, r3
 800d40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d410:	430b      	orrs	r3, r1
 800d412:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d41a:	220f      	movs	r2, #15
 800d41c:	4393      	bics	r3, r2
 800d41e:	0018      	movs	r0, r3
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d426:	681a      	ldr	r2, [r3, #0]
 800d428:	0003      	movs	r3, r0
 800d42a:	430b      	orrs	r3, r1
 800d42c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	4aaa      	ldr	r2, [pc, #680]	@ (800d6dc <UART_SetConfig+0x354>)
 800d434:	4293      	cmp	r3, r2
 800d436:	d131      	bne.n	800d49c <UART_SetConfig+0x114>
 800d438:	4ba9      	ldr	r3, [pc, #676]	@ (800d6e0 <UART_SetConfig+0x358>)
 800d43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d43c:	2203      	movs	r2, #3
 800d43e:	4013      	ands	r3, r2
 800d440:	2b03      	cmp	r3, #3
 800d442:	d01d      	beq.n	800d480 <UART_SetConfig+0xf8>
 800d444:	d823      	bhi.n	800d48e <UART_SetConfig+0x106>
 800d446:	2b02      	cmp	r3, #2
 800d448:	d00c      	beq.n	800d464 <UART_SetConfig+0xdc>
 800d44a:	d820      	bhi.n	800d48e <UART_SetConfig+0x106>
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <UART_SetConfig+0xce>
 800d450:	2b01      	cmp	r3, #1
 800d452:	d00e      	beq.n	800d472 <UART_SetConfig+0xea>
 800d454:	e01b      	b.n	800d48e <UART_SetConfig+0x106>
 800d456:	231b      	movs	r3, #27
 800d458:	2220      	movs	r2, #32
 800d45a:	189b      	adds	r3, r3, r2
 800d45c:	19db      	adds	r3, r3, r7
 800d45e:	2200      	movs	r2, #0
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e071      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d464:	231b      	movs	r3, #27
 800d466:	2220      	movs	r2, #32
 800d468:	189b      	adds	r3, r3, r2
 800d46a:	19db      	adds	r3, r3, r7
 800d46c:	2202      	movs	r2, #2
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	e06a      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d472:	231b      	movs	r3, #27
 800d474:	2220      	movs	r2, #32
 800d476:	189b      	adds	r3, r3, r2
 800d478:	19db      	adds	r3, r3, r7
 800d47a:	2204      	movs	r2, #4
 800d47c:	701a      	strb	r2, [r3, #0]
 800d47e:	e063      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d480:	231b      	movs	r3, #27
 800d482:	2220      	movs	r2, #32
 800d484:	189b      	adds	r3, r3, r2
 800d486:	19db      	adds	r3, r3, r7
 800d488:	2208      	movs	r2, #8
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	e05c      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d48e:	231b      	movs	r3, #27
 800d490:	2220      	movs	r2, #32
 800d492:	189b      	adds	r3, r3, r2
 800d494:	19db      	adds	r3, r3, r7
 800d496:	2210      	movs	r2, #16
 800d498:	701a      	strb	r2, [r3, #0]
 800d49a:	e055      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a90      	ldr	r2, [pc, #576]	@ (800d6e4 <UART_SetConfig+0x35c>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d106      	bne.n	800d4b4 <UART_SetConfig+0x12c>
 800d4a6:	231b      	movs	r3, #27
 800d4a8:	2220      	movs	r2, #32
 800d4aa:	189b      	adds	r3, r3, r2
 800d4ac:	19db      	adds	r3, r3, r7
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	701a      	strb	r2, [r3, #0]
 800d4b2:	e049      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a86      	ldr	r2, [pc, #536]	@ (800d6d4 <UART_SetConfig+0x34c>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d13e      	bne.n	800d53c <UART_SetConfig+0x1b4>
 800d4be:	4b88      	ldr	r3, [pc, #544]	@ (800d6e0 <UART_SetConfig+0x358>)
 800d4c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d4c2:	23c0      	movs	r3, #192	@ 0xc0
 800d4c4:	011b      	lsls	r3, r3, #4
 800d4c6:	4013      	ands	r3, r2
 800d4c8:	22c0      	movs	r2, #192	@ 0xc0
 800d4ca:	0112      	lsls	r2, r2, #4
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d027      	beq.n	800d520 <UART_SetConfig+0x198>
 800d4d0:	22c0      	movs	r2, #192	@ 0xc0
 800d4d2:	0112      	lsls	r2, r2, #4
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d82a      	bhi.n	800d52e <UART_SetConfig+0x1a6>
 800d4d8:	2280      	movs	r2, #128	@ 0x80
 800d4da:	0112      	lsls	r2, r2, #4
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	d011      	beq.n	800d504 <UART_SetConfig+0x17c>
 800d4e0:	2280      	movs	r2, #128	@ 0x80
 800d4e2:	0112      	lsls	r2, r2, #4
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d822      	bhi.n	800d52e <UART_SetConfig+0x1a6>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d004      	beq.n	800d4f6 <UART_SetConfig+0x16e>
 800d4ec:	2280      	movs	r2, #128	@ 0x80
 800d4ee:	00d2      	lsls	r2, r2, #3
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d00e      	beq.n	800d512 <UART_SetConfig+0x18a>
 800d4f4:	e01b      	b.n	800d52e <UART_SetConfig+0x1a6>
 800d4f6:	231b      	movs	r3, #27
 800d4f8:	2220      	movs	r2, #32
 800d4fa:	189b      	adds	r3, r3, r2
 800d4fc:	19db      	adds	r3, r3, r7
 800d4fe:	2200      	movs	r2, #0
 800d500:	701a      	strb	r2, [r3, #0]
 800d502:	e021      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d504:	231b      	movs	r3, #27
 800d506:	2220      	movs	r2, #32
 800d508:	189b      	adds	r3, r3, r2
 800d50a:	19db      	adds	r3, r3, r7
 800d50c:	2202      	movs	r2, #2
 800d50e:	701a      	strb	r2, [r3, #0]
 800d510:	e01a      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d512:	231b      	movs	r3, #27
 800d514:	2220      	movs	r2, #32
 800d516:	189b      	adds	r3, r3, r2
 800d518:	19db      	adds	r3, r3, r7
 800d51a:	2204      	movs	r2, #4
 800d51c:	701a      	strb	r2, [r3, #0]
 800d51e:	e013      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d520:	231b      	movs	r3, #27
 800d522:	2220      	movs	r2, #32
 800d524:	189b      	adds	r3, r3, r2
 800d526:	19db      	adds	r3, r3, r7
 800d528:	2208      	movs	r2, #8
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e00c      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d52e:	231b      	movs	r3, #27
 800d530:	2220      	movs	r2, #32
 800d532:	189b      	adds	r3, r3, r2
 800d534:	19db      	adds	r3, r3, r7
 800d536:	2210      	movs	r2, #16
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	e005      	b.n	800d548 <UART_SetConfig+0x1c0>
 800d53c:	231b      	movs	r3, #27
 800d53e:	2220      	movs	r2, #32
 800d540:	189b      	adds	r3, r3, r2
 800d542:	19db      	adds	r3, r3, r7
 800d544:	2210      	movs	r2, #16
 800d546:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a61      	ldr	r2, [pc, #388]	@ (800d6d4 <UART_SetConfig+0x34c>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d000      	beq.n	800d554 <UART_SetConfig+0x1cc>
 800d552:	e092      	b.n	800d67a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d554:	231b      	movs	r3, #27
 800d556:	2220      	movs	r2, #32
 800d558:	189b      	adds	r3, r3, r2
 800d55a:	19db      	adds	r3, r3, r7
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	2b08      	cmp	r3, #8
 800d560:	d015      	beq.n	800d58e <UART_SetConfig+0x206>
 800d562:	dc18      	bgt.n	800d596 <UART_SetConfig+0x20e>
 800d564:	2b04      	cmp	r3, #4
 800d566:	d00d      	beq.n	800d584 <UART_SetConfig+0x1fc>
 800d568:	dc15      	bgt.n	800d596 <UART_SetConfig+0x20e>
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d002      	beq.n	800d574 <UART_SetConfig+0x1ec>
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d005      	beq.n	800d57e <UART_SetConfig+0x1f6>
 800d572:	e010      	b.n	800d596 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d574:	f7fc fdd6 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
 800d578:	0003      	movs	r3, r0
 800d57a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d57c:	e014      	b.n	800d5a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d57e:	4b5a      	ldr	r3, [pc, #360]	@ (800d6e8 <UART_SetConfig+0x360>)
 800d580:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d582:	e011      	b.n	800d5a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d584:	f7fc fd42 	bl	800a00c <HAL_RCC_GetSysClockFreq>
 800d588:	0003      	movs	r3, r0
 800d58a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d58c:	e00c      	b.n	800d5a8 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d58e:	2380      	movs	r3, #128	@ 0x80
 800d590:	021b      	lsls	r3, r3, #8
 800d592:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d594:	e008      	b.n	800d5a8 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800d596:	2300      	movs	r3, #0
 800d598:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d59a:	231a      	movs	r3, #26
 800d59c:	2220      	movs	r2, #32
 800d59e:	189b      	adds	r3, r3, r2
 800d5a0:	19db      	adds	r3, r3, r7
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	701a      	strb	r2, [r3, #0]
        break;
 800d5a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d5a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d100      	bne.n	800d5b0 <UART_SetConfig+0x228>
 800d5ae:	e147      	b.n	800d840 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5b4:	4b4d      	ldr	r3, [pc, #308]	@ (800d6ec <UART_SetConfig+0x364>)
 800d5b6:	0052      	lsls	r2, r2, #1
 800d5b8:	5ad3      	ldrh	r3, [r2, r3]
 800d5ba:	0019      	movs	r1, r3
 800d5bc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d5be:	f7f2 fda3 	bl	8000108 <__udivsi3>
 800d5c2:	0003      	movs	r3, r0
 800d5c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c8:	685a      	ldr	r2, [r3, #4]
 800d5ca:	0013      	movs	r3, r2
 800d5cc:	005b      	lsls	r3, r3, #1
 800d5ce:	189b      	adds	r3, r3, r2
 800d5d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d305      	bcc.n	800d5e2 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d5dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d906      	bls.n	800d5f0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800d5e2:	231a      	movs	r3, #26
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	189b      	adds	r3, r3, r2
 800d5e8:	19db      	adds	r3, r3, r7
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	701a      	strb	r2, [r3, #0]
 800d5ee:	e127      	b.n	800d840 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d5f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5f2:	61bb      	str	r3, [r7, #24]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d5fc:	4b3b      	ldr	r3, [pc, #236]	@ (800d6ec <UART_SetConfig+0x364>)
 800d5fe:	0052      	lsls	r2, r2, #1
 800d600:	5ad3      	ldrh	r3, [r2, r3]
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	2300      	movs	r3, #0
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	693a      	ldr	r2, [r7, #16]
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	69b8      	ldr	r0, [r7, #24]
 800d60e:	69f9      	ldr	r1, [r7, #28]
 800d610:	f7f2 fe06 	bl	8000220 <__aeabi_uldivmod>
 800d614:	0002      	movs	r2, r0
 800d616:	000b      	movs	r3, r1
 800d618:	0e11      	lsrs	r1, r2, #24
 800d61a:	021d      	lsls	r5, r3, #8
 800d61c:	430d      	orrs	r5, r1
 800d61e:	0214      	lsls	r4, r2, #8
 800d620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	085b      	lsrs	r3, r3, #1
 800d626:	60bb      	str	r3, [r7, #8]
 800d628:	2300      	movs	r3, #0
 800d62a:	60fb      	str	r3, [r7, #12]
 800d62c:	68b8      	ldr	r0, [r7, #8]
 800d62e:	68f9      	ldr	r1, [r7, #12]
 800d630:	1900      	adds	r0, r0, r4
 800d632:	4169      	adcs	r1, r5
 800d634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d636:	685b      	ldr	r3, [r3, #4]
 800d638:	603b      	str	r3, [r7, #0]
 800d63a:	2300      	movs	r3, #0
 800d63c:	607b      	str	r3, [r7, #4]
 800d63e:	683a      	ldr	r2, [r7, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f7f2 fded 	bl	8000220 <__aeabi_uldivmod>
 800d646:	0002      	movs	r2, r0
 800d648:	000b      	movs	r3, r1
 800d64a:	0013      	movs	r3, r2
 800d64c:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d64e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d650:	23c0      	movs	r3, #192	@ 0xc0
 800d652:	009b      	lsls	r3, r3, #2
 800d654:	429a      	cmp	r2, r3
 800d656:	d309      	bcc.n	800d66c <UART_SetConfig+0x2e4>
 800d658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d65a:	2380      	movs	r3, #128	@ 0x80
 800d65c:	035b      	lsls	r3, r3, #13
 800d65e:	429a      	cmp	r2, r3
 800d660:	d204      	bcs.n	800d66c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800d662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d668:	60da      	str	r2, [r3, #12]
 800d66a:	e0e9      	b.n	800d840 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800d66c:	231a      	movs	r3, #26
 800d66e:	2220      	movs	r2, #32
 800d670:	189b      	adds	r3, r3, r2
 800d672:	19db      	adds	r3, r3, r7
 800d674:	2201      	movs	r2, #1
 800d676:	701a      	strb	r2, [r3, #0]
 800d678:	e0e2      	b.n	800d840 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d67c:	69da      	ldr	r2, [r3, #28]
 800d67e:	2380      	movs	r3, #128	@ 0x80
 800d680:	021b      	lsls	r3, r3, #8
 800d682:	429a      	cmp	r2, r3
 800d684:	d000      	beq.n	800d688 <UART_SetConfig+0x300>
 800d686:	e083      	b.n	800d790 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800d688:	231b      	movs	r3, #27
 800d68a:	2220      	movs	r2, #32
 800d68c:	189b      	adds	r3, r3, r2
 800d68e:	19db      	adds	r3, r3, r7
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b08      	cmp	r3, #8
 800d694:	d015      	beq.n	800d6c2 <UART_SetConfig+0x33a>
 800d696:	dc2b      	bgt.n	800d6f0 <UART_SetConfig+0x368>
 800d698:	2b04      	cmp	r3, #4
 800d69a:	d00d      	beq.n	800d6b8 <UART_SetConfig+0x330>
 800d69c:	dc28      	bgt.n	800d6f0 <UART_SetConfig+0x368>
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d002      	beq.n	800d6a8 <UART_SetConfig+0x320>
 800d6a2:	2b02      	cmp	r3, #2
 800d6a4:	d005      	beq.n	800d6b2 <UART_SetConfig+0x32a>
 800d6a6:	e023      	b.n	800d6f0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d6a8:	f7fc fd3c 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
 800d6ac:	0003      	movs	r3, r0
 800d6ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b0:	e027      	b.n	800d702 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d6b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d6e8 <UART_SetConfig+0x360>)
 800d6b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6b6:	e024      	b.n	800d702 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d6b8:	f7fc fca8 	bl	800a00c <HAL_RCC_GetSysClockFreq>
 800d6bc:	0003      	movs	r3, r0
 800d6be:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c0:	e01f      	b.n	800d702 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d6c2:	2380      	movs	r3, #128	@ 0x80
 800d6c4:	021b      	lsls	r3, r3, #8
 800d6c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d6c8:	e01b      	b.n	800d702 <UART_SetConfig+0x37a>
 800d6ca:	46c0      	nop			@ (mov r8, r8)
 800d6cc:	cfff69f3 	.word	0xcfff69f3
 800d6d0:	ffffcfff 	.word	0xffffcfff
 800d6d4:	40008000 	.word	0x40008000
 800d6d8:	11fff4ff 	.word	0x11fff4ff
 800d6dc:	40013800 	.word	0x40013800
 800d6e0:	40021000 	.word	0x40021000
 800d6e4:	40004400 	.word	0x40004400
 800d6e8:	00f42400 	.word	0x00f42400
 800d6ec:	0800ec3c 	.word	0x0800ec3c
      default:
        pclk = 0U;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d6f4:	231a      	movs	r3, #26
 800d6f6:	2220      	movs	r2, #32
 800d6f8:	189b      	adds	r3, r3, r2
 800d6fa:	19db      	adds	r3, r3, r7
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	701a      	strb	r2, [r3, #0]
        break;
 800d700:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d704:	2b00      	cmp	r3, #0
 800d706:	d100      	bne.n	800d70a <UART_SetConfig+0x382>
 800d708:	e09a      	b.n	800d840 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d70c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d70e:	4b58      	ldr	r3, [pc, #352]	@ (800d870 <UART_SetConfig+0x4e8>)
 800d710:	0052      	lsls	r2, r2, #1
 800d712:	5ad3      	ldrh	r3, [r2, r3]
 800d714:	0019      	movs	r1, r3
 800d716:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d718:	f7f2 fcf6 	bl	8000108 <__udivsi3>
 800d71c:	0003      	movs	r3, r0
 800d71e:	005a      	lsls	r2, r3, #1
 800d720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	085b      	lsrs	r3, r3, #1
 800d726:	18d2      	adds	r2, r2, r3
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	0019      	movs	r1, r3
 800d72e:	0010      	movs	r0, r2
 800d730:	f7f2 fcea 	bl	8000108 <__udivsi3>
 800d734:	0003      	movs	r3, r0
 800d736:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d73a:	2b0f      	cmp	r3, #15
 800d73c:	d921      	bls.n	800d782 <UART_SetConfig+0x3fa>
 800d73e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d740:	2380      	movs	r3, #128	@ 0x80
 800d742:	025b      	lsls	r3, r3, #9
 800d744:	429a      	cmp	r2, r3
 800d746:	d21c      	bcs.n	800d782 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	200e      	movs	r0, #14
 800d74e:	2420      	movs	r4, #32
 800d750:	1903      	adds	r3, r0, r4
 800d752:	19db      	adds	r3, r3, r7
 800d754:	210f      	movs	r1, #15
 800d756:	438a      	bics	r2, r1
 800d758:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d75c:	085b      	lsrs	r3, r3, #1
 800d75e:	b29b      	uxth	r3, r3
 800d760:	2207      	movs	r2, #7
 800d762:	4013      	ands	r3, r2
 800d764:	b299      	uxth	r1, r3
 800d766:	1903      	adds	r3, r0, r4
 800d768:	19db      	adds	r3, r3, r7
 800d76a:	1902      	adds	r2, r0, r4
 800d76c:	19d2      	adds	r2, r2, r7
 800d76e:	8812      	ldrh	r2, [r2, #0]
 800d770:	430a      	orrs	r2, r1
 800d772:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800d774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	1902      	adds	r2, r0, r4
 800d77a:	19d2      	adds	r2, r2, r7
 800d77c:	8812      	ldrh	r2, [r2, #0]
 800d77e:	60da      	str	r2, [r3, #12]
 800d780:	e05e      	b.n	800d840 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d782:	231a      	movs	r3, #26
 800d784:	2220      	movs	r2, #32
 800d786:	189b      	adds	r3, r3, r2
 800d788:	19db      	adds	r3, r3, r7
 800d78a:	2201      	movs	r2, #1
 800d78c:	701a      	strb	r2, [r3, #0]
 800d78e:	e057      	b.n	800d840 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d790:	231b      	movs	r3, #27
 800d792:	2220      	movs	r2, #32
 800d794:	189b      	adds	r3, r3, r2
 800d796:	19db      	adds	r3, r3, r7
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	2b08      	cmp	r3, #8
 800d79c:	d015      	beq.n	800d7ca <UART_SetConfig+0x442>
 800d79e:	dc18      	bgt.n	800d7d2 <UART_SetConfig+0x44a>
 800d7a0:	2b04      	cmp	r3, #4
 800d7a2:	d00d      	beq.n	800d7c0 <UART_SetConfig+0x438>
 800d7a4:	dc15      	bgt.n	800d7d2 <UART_SetConfig+0x44a>
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d002      	beq.n	800d7b0 <UART_SetConfig+0x428>
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d005      	beq.n	800d7ba <UART_SetConfig+0x432>
 800d7ae:	e010      	b.n	800d7d2 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7b0:	f7fc fcb8 	bl	800a124 <HAL_RCC_GetPCLK1Freq>
 800d7b4:	0003      	movs	r3, r0
 800d7b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7b8:	e014      	b.n	800d7e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d7ba:	4b2e      	ldr	r3, [pc, #184]	@ (800d874 <UART_SetConfig+0x4ec>)
 800d7bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7be:	e011      	b.n	800d7e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d7c0:	f7fc fc24 	bl	800a00c <HAL_RCC_GetSysClockFreq>
 800d7c4:	0003      	movs	r3, r0
 800d7c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7c8:	e00c      	b.n	800d7e4 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7ca:	2380      	movs	r3, #128	@ 0x80
 800d7cc:	021b      	lsls	r3, r3, #8
 800d7ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800d7d0:	e008      	b.n	800d7e4 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800d7d6:	231a      	movs	r3, #26
 800d7d8:	2220      	movs	r2, #32
 800d7da:	189b      	adds	r3, r3, r2
 800d7dc:	19db      	adds	r3, r3, r7
 800d7de:	2201      	movs	r2, #1
 800d7e0:	701a      	strb	r2, [r3, #0]
        break;
 800d7e2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800d7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d02a      	beq.n	800d840 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7ee:	4b20      	ldr	r3, [pc, #128]	@ (800d870 <UART_SetConfig+0x4e8>)
 800d7f0:	0052      	lsls	r2, r2, #1
 800d7f2:	5ad3      	ldrh	r3, [r2, r3]
 800d7f4:	0019      	movs	r1, r3
 800d7f6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d7f8:	f7f2 fc86 	bl	8000108 <__udivsi3>
 800d7fc:	0003      	movs	r3, r0
 800d7fe:	001a      	movs	r2, r3
 800d800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	085b      	lsrs	r3, r3, #1
 800d806:	18d2      	adds	r2, r2, r3
 800d808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d80a:	685b      	ldr	r3, [r3, #4]
 800d80c:	0019      	movs	r1, r3
 800d80e:	0010      	movs	r0, r2
 800d810:	f7f2 fc7a 	bl	8000108 <__udivsi3>
 800d814:	0003      	movs	r3, r0
 800d816:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81a:	2b0f      	cmp	r3, #15
 800d81c:	d90a      	bls.n	800d834 <UART_SetConfig+0x4ac>
 800d81e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d820:	2380      	movs	r3, #128	@ 0x80
 800d822:	025b      	lsls	r3, r3, #9
 800d824:	429a      	cmp	r2, r3
 800d826:	d205      	bcs.n	800d834 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	60da      	str	r2, [r3, #12]
 800d832:	e005      	b.n	800d840 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800d834:	231a      	movs	r3, #26
 800d836:	2220      	movs	r2, #32
 800d838:	189b      	adds	r3, r3, r2
 800d83a:	19db      	adds	r3, r3, r7
 800d83c:	2201      	movs	r2, #1
 800d83e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d842:	226a      	movs	r2, #106	@ 0x6a
 800d844:	2101      	movs	r1, #1
 800d846:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800d848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84a:	2268      	movs	r2, #104	@ 0x68
 800d84c:	2101      	movs	r1, #1
 800d84e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d852:	2200      	movs	r2, #0
 800d854:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d858:	2200      	movs	r2, #0
 800d85a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d85c:	231a      	movs	r3, #26
 800d85e:	2220      	movs	r2, #32
 800d860:	189b      	adds	r3, r3, r2
 800d862:	19db      	adds	r3, r3, r7
 800d864:	781b      	ldrb	r3, [r3, #0]
}
 800d866:	0018      	movs	r0, r3
 800d868:	46bd      	mov	sp, r7
 800d86a:	b010      	add	sp, #64	@ 0x40
 800d86c:	bdb0      	pop	{r4, r5, r7, pc}
 800d86e:	46c0      	nop			@ (mov r8, r8)
 800d870:	0800ec3c 	.word	0x0800ec3c
 800d874:	00f42400 	.word	0x00f42400

0800d878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d884:	2208      	movs	r2, #8
 800d886:	4013      	ands	r3, r2
 800d888:	d00b      	beq.n	800d8a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	685b      	ldr	r3, [r3, #4]
 800d890:	4a4a      	ldr	r2, [pc, #296]	@ (800d9bc <UART_AdvFeatureConfig+0x144>)
 800d892:	4013      	ands	r3, r2
 800d894:	0019      	movs	r1, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	d00b      	beq.n	800d8c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	4a43      	ldr	r2, [pc, #268]	@ (800d9c0 <UART_AdvFeatureConfig+0x148>)
 800d8b4:	4013      	ands	r3, r2
 800d8b6:	0019      	movs	r1, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c8:	2202      	movs	r2, #2
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	d00b      	beq.n	800d8e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	685b      	ldr	r3, [r3, #4]
 800d8d4:	4a3b      	ldr	r2, [pc, #236]	@ (800d9c4 <UART_AdvFeatureConfig+0x14c>)
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	0019      	movs	r1, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ea:	2204      	movs	r2, #4
 800d8ec:	4013      	ands	r3, r2
 800d8ee:	d00b      	beq.n	800d908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685b      	ldr	r3, [r3, #4]
 800d8f6:	4a34      	ldr	r2, [pc, #208]	@ (800d9c8 <UART_AdvFeatureConfig+0x150>)
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	0019      	movs	r1, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90c:	2210      	movs	r2, #16
 800d90e:	4013      	ands	r3, r2
 800d910:	d00b      	beq.n	800d92a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	4a2c      	ldr	r2, [pc, #176]	@ (800d9cc <UART_AdvFeatureConfig+0x154>)
 800d91a:	4013      	ands	r3, r2
 800d91c:	0019      	movs	r1, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d92e:	2220      	movs	r2, #32
 800d930:	4013      	ands	r3, r2
 800d932:	d00b      	beq.n	800d94c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	4a25      	ldr	r2, [pc, #148]	@ (800d9d0 <UART_AdvFeatureConfig+0x158>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	0019      	movs	r1, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	430a      	orrs	r2, r1
 800d94a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d950:	2240      	movs	r2, #64	@ 0x40
 800d952:	4013      	ands	r3, r2
 800d954:	d01d      	beq.n	800d992 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	4a1d      	ldr	r2, [pc, #116]	@ (800d9d4 <UART_AdvFeatureConfig+0x15c>)
 800d95e:	4013      	ands	r3, r2
 800d960:	0019      	movs	r1, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d972:	2380      	movs	r3, #128	@ 0x80
 800d974:	035b      	lsls	r3, r3, #13
 800d976:	429a      	cmp	r2, r3
 800d978:	d10b      	bne.n	800d992 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	685b      	ldr	r3, [r3, #4]
 800d980:	4a15      	ldr	r2, [pc, #84]	@ (800d9d8 <UART_AdvFeatureConfig+0x160>)
 800d982:	4013      	ands	r3, r2
 800d984:	0019      	movs	r1, r3
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	430a      	orrs	r2, r1
 800d990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d996:	2280      	movs	r2, #128	@ 0x80
 800d998:	4013      	ands	r3, r2
 800d99a:	d00b      	beq.n	800d9b4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	685b      	ldr	r3, [r3, #4]
 800d9a2:	4a0e      	ldr	r2, [pc, #56]	@ (800d9dc <UART_AdvFeatureConfig+0x164>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	0019      	movs	r1, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	605a      	str	r2, [r3, #4]
  }
}
 800d9b4:	46c0      	nop			@ (mov r8, r8)
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	b002      	add	sp, #8
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	ffff7fff 	.word	0xffff7fff
 800d9c0:	fffdffff 	.word	0xfffdffff
 800d9c4:	fffeffff 	.word	0xfffeffff
 800d9c8:	fffbffff 	.word	0xfffbffff
 800d9cc:	ffffefff 	.word	0xffffefff
 800d9d0:	ffffdfff 	.word	0xffffdfff
 800d9d4:	ffefffff 	.word	0xffefffff
 800d9d8:	ff9fffff 	.word	0xff9fffff
 800d9dc:	fff7ffff 	.word	0xfff7ffff

0800d9e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b092      	sub	sp, #72	@ 0x48
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2290      	movs	r2, #144	@ 0x90
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9f0:	f7f9 f8c0 	bl	8006b74 <HAL_GetTick>
 800d9f4:	0003      	movs	r3, r0
 800d9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2208      	movs	r2, #8
 800da00:	4013      	ands	r3, r2
 800da02:	2b08      	cmp	r3, #8
 800da04:	d12d      	bne.n	800da62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da08:	2280      	movs	r2, #128	@ 0x80
 800da0a:	0391      	lsls	r1, r2, #14
 800da0c:	6878      	ldr	r0, [r7, #4]
 800da0e:	4a47      	ldr	r2, [pc, #284]	@ (800db2c <UART_CheckIdleState+0x14c>)
 800da10:	9200      	str	r2, [sp, #0]
 800da12:	2200      	movs	r2, #0
 800da14:	f000 f88e 	bl	800db34 <UART_WaitOnFlagUntilTimeout>
 800da18:	1e03      	subs	r3, r0, #0
 800da1a:	d022      	beq.n	800da62 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da1c:	f3ef 8310 	mrs	r3, PRIMASK
 800da20:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800da22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da24:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da26:	2301      	movs	r3, #1
 800da28:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2c:	f383 8810 	msr	PRIMASK, r3
}
 800da30:	46c0      	nop			@ (mov r8, r8)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	2180      	movs	r1, #128	@ 0x80
 800da3e:	438a      	bics	r2, r1
 800da40:	601a      	str	r2, [r3, #0]
 800da42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da48:	f383 8810 	msr	PRIMASK, r3
}
 800da4c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2288      	movs	r2, #136	@ 0x88
 800da52:	2120      	movs	r1, #32
 800da54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2284      	movs	r2, #132	@ 0x84
 800da5a:	2100      	movs	r1, #0
 800da5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da5e:	2303      	movs	r3, #3
 800da60:	e060      	b.n	800db24 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2204      	movs	r2, #4
 800da6a:	4013      	ands	r3, r2
 800da6c:	2b04      	cmp	r3, #4
 800da6e:	d146      	bne.n	800dafe <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da72:	2280      	movs	r2, #128	@ 0x80
 800da74:	03d1      	lsls	r1, r2, #15
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	4a2c      	ldr	r2, [pc, #176]	@ (800db2c <UART_CheckIdleState+0x14c>)
 800da7a:	9200      	str	r2, [sp, #0]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f000 f859 	bl	800db34 <UART_WaitOnFlagUntilTimeout>
 800da82:	1e03      	subs	r3, r0, #0
 800da84:	d03b      	beq.n	800dafe <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da86:	f3ef 8310 	mrs	r3, PRIMASK
 800da8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800da8c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da90:	2301      	movs	r3, #1
 800da92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	f383 8810 	msr	PRIMASK, r3
}
 800da9a:	46c0      	nop			@ (mov r8, r8)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4922      	ldr	r1, [pc, #136]	@ (800db30 <UART_CheckIdleState+0x150>)
 800daa8:	400a      	ands	r2, r1
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	f383 8810 	msr	PRIMASK, r3
}
 800dab6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dab8:	f3ef 8310 	mrs	r3, PRIMASK
 800dabc:	61bb      	str	r3, [r7, #24]
  return(result);
 800dabe:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac0:	633b      	str	r3, [r7, #48]	@ 0x30
 800dac2:	2301      	movs	r3, #1
 800dac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dac6:	69fb      	ldr	r3, [r7, #28]
 800dac8:	f383 8810 	msr	PRIMASK, r3
}
 800dacc:	46c0      	nop			@ (mov r8, r8)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	689a      	ldr	r2, [r3, #8]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2101      	movs	r1, #1
 800dada:	438a      	bics	r2, r1
 800dadc:	609a      	str	r2, [r3, #8]
 800dade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dae0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dae2:	6a3b      	ldr	r3, [r7, #32]
 800dae4:	f383 8810 	msr	PRIMASK, r3
}
 800dae8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	228c      	movs	r2, #140	@ 0x8c
 800daee:	2120      	movs	r1, #32
 800daf0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2284      	movs	r2, #132	@ 0x84
 800daf6:	2100      	movs	r1, #0
 800daf8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dafa:	2303      	movs	r3, #3
 800dafc:	e012      	b.n	800db24 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2288      	movs	r2, #136	@ 0x88
 800db02:	2120      	movs	r1, #32
 800db04:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	228c      	movs	r2, #140	@ 0x8c
 800db0a:	2120      	movs	r1, #32
 800db0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2284      	movs	r2, #132	@ 0x84
 800db1e:	2100      	movs	r1, #0
 800db20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	0018      	movs	r0, r3
 800db26:	46bd      	mov	sp, r7
 800db28:	b010      	add	sp, #64	@ 0x40
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	01ffffff 	.word	0x01ffffff
 800db30:	fffffedf 	.word	0xfffffedf

0800db34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	603b      	str	r3, [r7, #0]
 800db40:	1dfb      	adds	r3, r7, #7
 800db42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db44:	e051      	b.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	3301      	adds	r3, #1
 800db4a:	d04e      	beq.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db4c:	f7f9 f812 	bl	8006b74 <HAL_GetTick>
 800db50:	0002      	movs	r2, r0
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d302      	bcc.n	800db62 <UART_WaitOnFlagUntilTimeout+0x2e>
 800db5c:	69bb      	ldr	r3, [r7, #24]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d101      	bne.n	800db66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800db62:	2303      	movs	r3, #3
 800db64:	e051      	b.n	800dc0a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2204      	movs	r2, #4
 800db6e:	4013      	ands	r3, r2
 800db70:	d03b      	beq.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	2b80      	cmp	r3, #128	@ 0x80
 800db76:	d038      	beq.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	2b40      	cmp	r3, #64	@ 0x40
 800db7c:	d035      	beq.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69db      	ldr	r3, [r3, #28]
 800db84:	2208      	movs	r2, #8
 800db86:	4013      	ands	r3, r2
 800db88:	2b08      	cmp	r3, #8
 800db8a:	d111      	bne.n	800dbb0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	2208      	movs	r2, #8
 800db92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	0018      	movs	r0, r3
 800db98:	f000 f922 	bl	800dde0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2290      	movs	r2, #144	@ 0x90
 800dba0:	2108      	movs	r1, #8
 800dba2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2284      	movs	r2, #132	@ 0x84
 800dba8:	2100      	movs	r1, #0
 800dbaa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e02c      	b.n	800dc0a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	69da      	ldr	r2, [r3, #28]
 800dbb6:	2380      	movs	r3, #128	@ 0x80
 800dbb8:	011b      	lsls	r3, r3, #4
 800dbba:	401a      	ands	r2, r3
 800dbbc:	2380      	movs	r3, #128	@ 0x80
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d112      	bne.n	800dbea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	2280      	movs	r2, #128	@ 0x80
 800dbca:	0112      	lsls	r2, r2, #4
 800dbcc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	0018      	movs	r0, r3
 800dbd2:	f000 f905 	bl	800dde0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2290      	movs	r2, #144	@ 0x90
 800dbda:	2120      	movs	r1, #32
 800dbdc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2284      	movs	r2, #132	@ 0x84
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800dbe6:	2303      	movs	r3, #3
 800dbe8:	e00f      	b.n	800dc0a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	69db      	ldr	r3, [r3, #28]
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	68ba      	ldr	r2, [r7, #8]
 800dbf6:	1ad3      	subs	r3, r2, r3
 800dbf8:	425a      	negs	r2, r3
 800dbfa:	4153      	adcs	r3, r2
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	001a      	movs	r2, r3
 800dc00:	1dfb      	adds	r3, r7, #7
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d09e      	beq.n	800db46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	b004      	add	sp, #16
 800dc10:	bd80      	pop	{r7, pc}
	...

0800dc14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b090      	sub	sp, #64	@ 0x40
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	60f8      	str	r0, [r7, #12]
 800dc1c:	60b9      	str	r1, [r7, #8]
 800dc1e:	1dbb      	adds	r3, r7, #6
 800dc20:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	68ba      	ldr	r2, [r7, #8]
 800dc26:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	1dba      	adds	r2, r7, #6
 800dc2c:	215c      	movs	r1, #92	@ 0x5c
 800dc2e:	8812      	ldrh	r2, [r2, #0]
 800dc30:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2290      	movs	r2, #144	@ 0x90
 800dc36:	2100      	movs	r1, #0
 800dc38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	228c      	movs	r2, #140	@ 0x8c
 800dc3e:	2122      	movs	r1, #34	@ 0x22
 800dc40:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	2280      	movs	r2, #128	@ 0x80
 800dc46:	589b      	ldr	r3, [r3, r2]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d02d      	beq.n	800dca8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2280      	movs	r2, #128	@ 0x80
 800dc50:	589b      	ldr	r3, [r3, r2]
 800dc52:	4a40      	ldr	r2, [pc, #256]	@ (800dd54 <UART_Start_Receive_DMA+0x140>)
 800dc54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2280      	movs	r2, #128	@ 0x80
 800dc5a:	589b      	ldr	r3, [r3, r2]
 800dc5c:	4a3e      	ldr	r2, [pc, #248]	@ (800dd58 <UART_Start_Receive_DMA+0x144>)
 800dc5e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	2280      	movs	r2, #128	@ 0x80
 800dc64:	589b      	ldr	r3, [r3, r2]
 800dc66:	4a3d      	ldr	r2, [pc, #244]	@ (800dd5c <UART_Start_Receive_DMA+0x148>)
 800dc68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2280      	movs	r2, #128	@ 0x80
 800dc6e:	589b      	ldr	r3, [r3, r2]
 800dc70:	2200      	movs	r2, #0
 800dc72:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2280      	movs	r2, #128	@ 0x80
 800dc78:	5898      	ldr	r0, [r3, r2]
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3324      	adds	r3, #36	@ 0x24
 800dc80:	0019      	movs	r1, r3
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc86:	001a      	movs	r2, r3
 800dc88:	1dbb      	adds	r3, r7, #6
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	f7fa fb40 	bl	8008310 <HAL_DMA_Start_IT>
 800dc90:	1e03      	subs	r3, r0, #0
 800dc92:	d009      	beq.n	800dca8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2290      	movs	r2, #144	@ 0x90
 800dc98:	2110      	movs	r1, #16
 800dc9a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	228c      	movs	r2, #140	@ 0x8c
 800dca0:	2120      	movs	r1, #32
 800dca2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800dca4:	2301      	movs	r3, #1
 800dca6:	e050      	b.n	800dd4a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	691b      	ldr	r3, [r3, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d019      	beq.n	800dce4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800dcb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800dcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dcb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dcba:	2301      	movs	r3, #1
 800dcbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc0:	f383 8810 	msr	PRIMASK, r3
}
 800dcc4:	46c0      	nop			@ (mov r8, r8)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2180      	movs	r1, #128	@ 0x80
 800dcd2:	0049      	lsls	r1, r1, #1
 800dcd4:	430a      	orrs	r2, r1
 800dcd6:	601a      	str	r2, [r3, #0]
 800dcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dcda:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcde:	f383 8810 	msr	PRIMASK, r3
}
 800dce2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce4:	f3ef 8310 	mrs	r3, PRIMASK
 800dce8:	613b      	str	r3, [r7, #16]
  return(result);
 800dcea:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcec:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcee:	2301      	movs	r3, #1
 800dcf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	f383 8810 	msr	PRIMASK, r3
}
 800dcf8:	46c0      	nop			@ (mov r8, r8)
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2101      	movs	r1, #1
 800dd06:	430a      	orrs	r2, r1
 800dd08:	609a      	str	r2, [r3, #8]
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	f383 8810 	msr	PRIMASK, r3
}
 800dd14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd16:	f3ef 8310 	mrs	r3, PRIMASK
 800dd1a:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd1c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd20:	2301      	movs	r3, #1
 800dd22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd24:	6a3b      	ldr	r3, [r7, #32]
 800dd26:	f383 8810 	msr	PRIMASK, r3
}
 800dd2a:	46c0      	nop			@ (mov r8, r8)
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	689a      	ldr	r2, [r3, #8]
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2140      	movs	r1, #64	@ 0x40
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	609a      	str	r2, [r3, #8]
 800dd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd42:	f383 8810 	msr	PRIMASK, r3
}
 800dd46:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	b010      	add	sp, #64	@ 0x40
 800dd50:	bd80      	pop	{r7, pc}
 800dd52:	46c0      	nop			@ (mov r8, r8)
 800dd54:	0800dead 	.word	0x0800dead
 800dd58:	0800dfe1 	.word	0x0800dfe1
 800dd5c:	0800e029 	.word	0x0800e029

0800dd60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd68:	f3ef 8310 	mrs	r3, PRIMASK
 800dd6c:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd6e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800dd70:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd72:	2301      	movs	r3, #1
 800dd74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f383 8810 	msr	PRIMASK, r3
}
 800dd7c:	46c0      	nop			@ (mov r8, r8)
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681a      	ldr	r2, [r3, #0]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	21c0      	movs	r1, #192	@ 0xc0
 800dd8a:	438a      	bics	r2, r1
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	f383 8810 	msr	PRIMASK, r3
}
 800dd98:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd9a:	f3ef 8310 	mrs	r3, PRIMASK
 800dd9e:	617b      	str	r3, [r7, #20]
  return(result);
 800dda0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800dda2:	623b      	str	r3, [r7, #32]
 800dda4:	2301      	movs	r3, #1
 800dda6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	f383 8810 	msr	PRIMASK, r3
}
 800ddae:	46c0      	nop			@ (mov r8, r8)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	689a      	ldr	r2, [r3, #8]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4908      	ldr	r1, [pc, #32]	@ (800dddc <UART_EndTxTransfer+0x7c>)
 800ddbc:	400a      	ands	r2, r1
 800ddbe:	609a      	str	r2, [r3, #8]
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	f383 8810 	msr	PRIMASK, r3
}
 800ddca:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2288      	movs	r2, #136	@ 0x88
 800ddd0:	2120      	movs	r1, #32
 800ddd2:	5099      	str	r1, [r3, r2]
}
 800ddd4:	46c0      	nop			@ (mov r8, r8)
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	b00a      	add	sp, #40	@ 0x28
 800ddda:	bd80      	pop	{r7, pc}
 800dddc:	ff7fffff 	.word	0xff7fffff

0800dde0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b08e      	sub	sp, #56	@ 0x38
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dde8:	f3ef 8310 	mrs	r3, PRIMASK
 800ddec:	617b      	str	r3, [r7, #20]
  return(result);
 800ddee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ddf0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	f383 8810 	msr	PRIMASK, r3
}
 800ddfc:	46c0      	nop			@ (mov r8, r8)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	681a      	ldr	r2, [r3, #0]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4926      	ldr	r1, [pc, #152]	@ (800dea4 <UART_EndRxTransfer+0xc4>)
 800de0a:	400a      	ands	r2, r1
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	f383 8810 	msr	PRIMASK, r3
}
 800de18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de1a:	f3ef 8310 	mrs	r3, PRIMASK
 800de1e:	623b      	str	r3, [r7, #32]
  return(result);
 800de20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de22:	633b      	str	r3, [r7, #48]	@ 0x30
 800de24:	2301      	movs	r3, #1
 800de26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2a:	f383 8810 	msr	PRIMASK, r3
}
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689a      	ldr	r2, [r3, #8]
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	491b      	ldr	r1, [pc, #108]	@ (800dea8 <UART_EndRxTransfer+0xc8>)
 800de3c:	400a      	ands	r2, r1
 800de3e:	609a      	str	r2, [r3, #8]
 800de40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de46:	f383 8810 	msr	PRIMASK, r3
}
 800de4a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de50:	2b01      	cmp	r3, #1
 800de52:	d118      	bne.n	800de86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de54:	f3ef 8310 	mrs	r3, PRIMASK
 800de58:	60bb      	str	r3, [r7, #8]
  return(result);
 800de5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de5e:	2301      	movs	r3, #1
 800de60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	f383 8810 	msr	PRIMASK, r3
}
 800de68:	46c0      	nop			@ (mov r8, r8)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2110      	movs	r1, #16
 800de76:	438a      	bics	r2, r1
 800de78:	601a      	str	r2, [r3, #0]
 800de7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f383 8810 	msr	PRIMASK, r3
}
 800de84:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	228c      	movs	r2, #140	@ 0x8c
 800de8a:	2120      	movs	r1, #32
 800de8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2200      	movs	r2, #0
 800de92:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800de9a:	46c0      	nop			@ (mov r8, r8)
 800de9c:	46bd      	mov	sp, r7
 800de9e:	b00e      	add	sp, #56	@ 0x38
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	46c0      	nop			@ (mov r8, r8)
 800dea4:	fffffedf 	.word	0xfffffedf
 800dea8:	effffffe 	.word	0xeffffffe

0800deac <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b094      	sub	sp, #80	@ 0x50
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800deb8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2220      	movs	r2, #32
 800dec2:	4013      	ands	r3, r2
 800dec4:	d16f      	bne.n	800dfa6 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800dec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dec8:	225e      	movs	r2, #94	@ 0x5e
 800deca:	2100      	movs	r1, #0
 800decc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dece:	f3ef 8310 	mrs	r3, PRIMASK
 800ded2:	61bb      	str	r3, [r7, #24]
  return(result);
 800ded4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ded6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ded8:	2301      	movs	r3, #1
 800deda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f383 8810 	msr	PRIMASK, r3
}
 800dee2:	46c0      	nop			@ (mov r8, r8)
 800dee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	493b      	ldr	r1, [pc, #236]	@ (800dfdc <UART_DMAReceiveCplt+0x130>)
 800def0:	400a      	ands	r2, r1
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800def6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800def8:	6a3b      	ldr	r3, [r7, #32]
 800defa:	f383 8810 	msr	PRIMASK, r3
}
 800defe:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df00:	f3ef 8310 	mrs	r3, PRIMASK
 800df04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800df06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df08:	647b      	str	r3, [r7, #68]	@ 0x44
 800df0a:	2301      	movs	r3, #1
 800df0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df10:	f383 8810 	msr	PRIMASK, r3
}
 800df14:	46c0      	nop			@ (mov r8, r8)
 800df16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	689a      	ldr	r2, [r3, #8]
 800df1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2101      	movs	r1, #1
 800df22:	438a      	bics	r2, r1
 800df24:	609a      	str	r2, [r3, #8]
 800df26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2c:	f383 8810 	msr	PRIMASK, r3
}
 800df30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df32:	f3ef 8310 	mrs	r3, PRIMASK
 800df36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800df38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df3a:	643b      	str	r3, [r7, #64]	@ 0x40
 800df3c:	2301      	movs	r3, #1
 800df3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df42:	f383 8810 	msr	PRIMASK, r3
}
 800df46:	46c0      	nop			@ (mov r8, r8)
 800df48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	689a      	ldr	r2, [r3, #8]
 800df4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2140      	movs	r1, #64	@ 0x40
 800df54:	438a      	bics	r2, r1
 800df56:	609a      	str	r2, [r3, #8]
 800df58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5e:	f383 8810 	msr	PRIMASK, r3
}
 800df62:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800df64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df66:	228c      	movs	r2, #140	@ 0x8c
 800df68:	2120      	movs	r1, #32
 800df6a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df70:	2b01      	cmp	r3, #1
 800df72:	d118      	bne.n	800dfa6 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df74:	f3ef 8310 	mrs	r3, PRIMASK
 800df78:	60fb      	str	r3, [r7, #12]
  return(result);
 800df7a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800df7e:	2301      	movs	r3, #1
 800df80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	f383 8810 	msr	PRIMASK, r3
}
 800df88:	46c0      	nop			@ (mov r8, r8)
 800df8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2110      	movs	r1, #16
 800df96:	438a      	bics	r2, r1
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f383 8810 	msr	PRIMASK, r3
}
 800dfa4:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dfa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d109      	bne.n	800dfc8 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800dfb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfb6:	22c0      	movs	r2, #192	@ 0xc0
 800dfb8:	589b      	ldr	r3, [r3, r2]
 800dfba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfbc:	215c      	movs	r1, #92	@ 0x5c
 800dfbe:	5a51      	ldrh	r1, [r2, r1]
 800dfc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfc2:	0010      	movs	r0, r2
 800dfc4:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dfc6:	e005      	b.n	800dfd4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800dfc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfca:	22a0      	movs	r2, #160	@ 0xa0
 800dfcc:	589b      	ldr	r3, [r3, r2]
 800dfce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfd0:	0010      	movs	r0, r2
 800dfd2:	4798      	blx	r3
}
 800dfd4:	46c0      	nop			@ (mov r8, r8)
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	b014      	add	sp, #80	@ 0x50
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	fffffeff 	.word	0xfffffeff

0800dfe0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2201      	movs	r2, #1
 800dff2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d10b      	bne.n	800e014 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	22c0      	movs	r2, #192	@ 0xc0
 800e000:	589b      	ldr	r3, [r3, r2]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	215c      	movs	r1, #92	@ 0x5c
 800e006:	5a52      	ldrh	r2, [r2, r1]
 800e008:	0852      	lsrs	r2, r2, #1
 800e00a:	b291      	uxth	r1, r2
 800e00c:	68fa      	ldr	r2, [r7, #12]
 800e00e:	0010      	movs	r0, r2
 800e010:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e012:	e005      	b.n	800e020 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	229c      	movs	r2, #156	@ 0x9c
 800e018:	589b      	ldr	r3, [r3, r2]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	0010      	movs	r0, r2
 800e01e:	4798      	blx	r3
}
 800e020:	46c0      	nop			@ (mov r8, r8)
 800e022:	46bd      	mov	sp, r7
 800e024:	b004      	add	sp, #16
 800e026:	bd80      	pop	{r7, pc}

0800e028 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e034:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	2288      	movs	r2, #136	@ 0x88
 800e03a:	589b      	ldr	r3, [r3, r2]
 800e03c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	228c      	movs	r2, #140	@ 0x8c
 800e042:	589b      	ldr	r3, [r3, r2]
 800e044:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	689b      	ldr	r3, [r3, #8]
 800e04c:	2280      	movs	r2, #128	@ 0x80
 800e04e:	4013      	ands	r3, r2
 800e050:	2b80      	cmp	r3, #128	@ 0x80
 800e052:	d10a      	bne.n	800e06a <UART_DMAError+0x42>
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	2b21      	cmp	r3, #33	@ 0x21
 800e058:	d107      	bne.n	800e06a <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	2256      	movs	r2, #86	@ 0x56
 800e05e:	2100      	movs	r1, #0
 800e060:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e062:	697b      	ldr	r3, [r7, #20]
 800e064:	0018      	movs	r0, r3
 800e066:	f7ff fe7b 	bl	800dd60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e06a:	697b      	ldr	r3, [r7, #20]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	689b      	ldr	r3, [r3, #8]
 800e070:	2240      	movs	r2, #64	@ 0x40
 800e072:	4013      	ands	r3, r2
 800e074:	2b40      	cmp	r3, #64	@ 0x40
 800e076:	d10a      	bne.n	800e08e <UART_DMAError+0x66>
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2b22      	cmp	r3, #34	@ 0x22
 800e07c:	d107      	bne.n	800e08e <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	225e      	movs	r2, #94	@ 0x5e
 800e082:	2100      	movs	r1, #0
 800e084:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e086:	697b      	ldr	r3, [r7, #20]
 800e088:	0018      	movs	r0, r3
 800e08a:	f7ff fea9 	bl	800dde0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	2290      	movs	r2, #144	@ 0x90
 800e092:	589b      	ldr	r3, [r3, r2]
 800e094:	2210      	movs	r2, #16
 800e096:	431a      	orrs	r2, r3
 800e098:	697b      	ldr	r3, [r7, #20]
 800e09a:	2190      	movs	r1, #144	@ 0x90
 800e09c:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	22a4      	movs	r2, #164	@ 0xa4
 800e0a2:	589b      	ldr	r3, [r3, r2]
 800e0a4:	697a      	ldr	r2, [r7, #20]
 800e0a6:	0010      	movs	r0, r2
 800e0a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0aa:	46c0      	nop			@ (mov r8, r8)
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	b006      	add	sp, #24
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e0be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	225e      	movs	r2, #94	@ 0x5e
 800e0c4:	2100      	movs	r1, #0
 800e0c6:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2256      	movs	r2, #86	@ 0x56
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	22a4      	movs	r2, #164	@ 0xa4
 800e0d4:	589b      	ldr	r3, [r3, r2]
 800e0d6:	68fa      	ldr	r2, [r7, #12]
 800e0d8:	0010      	movs	r0, r2
 800e0da:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0dc:	46c0      	nop			@ (mov r8, r8)
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	b004      	add	sp, #16
 800e0e2:	bd80      	pop	{r7, pc}

0800e0e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b086      	sub	sp, #24
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e0f0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e0f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e0f4:	617b      	str	r3, [r7, #20]
 800e0f6:	2301      	movs	r3, #1
 800e0f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f383 8810 	msr	PRIMASK, r3
}
 800e100:	46c0      	nop			@ (mov r8, r8)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2140      	movs	r1, #64	@ 0x40
 800e10e:	438a      	bics	r2, r1
 800e110:	601a      	str	r2, [r3, #0]
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	f383 8810 	msr	PRIMASK, r3
}
 800e11c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2288      	movs	r2, #136	@ 0x88
 800e122:	2120      	movs	r1, #32
 800e124:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2298      	movs	r2, #152	@ 0x98
 800e130:	589b      	ldr	r3, [r3, r2]
 800e132:	687a      	ldr	r2, [r7, #4]
 800e134:	0010      	movs	r0, r2
 800e136:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e138:	46c0      	nop			@ (mov r8, r8)
 800e13a:	46bd      	mov	sp, r7
 800e13c:	b006      	add	sp, #24
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e148:	46c0      	nop			@ (mov r8, r8)
 800e14a:	46bd      	mov	sp, r7
 800e14c:	b002      	add	sp, #8
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e158:	46c0      	nop			@ (mov r8, r8)
 800e15a:	46bd      	mov	sp, r7
 800e15c:	b002      	add	sp, #8
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e168:	46c0      	nop			@ (mov r8, r8)
 800e16a:	46bd      	mov	sp, r7
 800e16c:	b002      	add	sp, #8
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <memset>:
 800e170:	0003      	movs	r3, r0
 800e172:	1882      	adds	r2, r0, r2
 800e174:	4293      	cmp	r3, r2
 800e176:	d100      	bne.n	800e17a <memset+0xa>
 800e178:	4770      	bx	lr
 800e17a:	7019      	strb	r1, [r3, #0]
 800e17c:	3301      	adds	r3, #1
 800e17e:	e7f9      	b.n	800e174 <memset+0x4>

0800e180 <__libc_init_array>:
 800e180:	b570      	push	{r4, r5, r6, lr}
 800e182:	2600      	movs	r6, #0
 800e184:	4c0c      	ldr	r4, [pc, #48]	@ (800e1b8 <__libc_init_array+0x38>)
 800e186:	4d0d      	ldr	r5, [pc, #52]	@ (800e1bc <__libc_init_array+0x3c>)
 800e188:	1b64      	subs	r4, r4, r5
 800e18a:	10a4      	asrs	r4, r4, #2
 800e18c:	42a6      	cmp	r6, r4
 800e18e:	d109      	bne.n	800e1a4 <__libc_init_array+0x24>
 800e190:	2600      	movs	r6, #0
 800e192:	f000 f823 	bl	800e1dc <_init>
 800e196:	4c0a      	ldr	r4, [pc, #40]	@ (800e1c0 <__libc_init_array+0x40>)
 800e198:	4d0a      	ldr	r5, [pc, #40]	@ (800e1c4 <__libc_init_array+0x44>)
 800e19a:	1b64      	subs	r4, r4, r5
 800e19c:	10a4      	asrs	r4, r4, #2
 800e19e:	42a6      	cmp	r6, r4
 800e1a0:	d105      	bne.n	800e1ae <__libc_init_array+0x2e>
 800e1a2:	bd70      	pop	{r4, r5, r6, pc}
 800e1a4:	00b3      	lsls	r3, r6, #2
 800e1a6:	58eb      	ldr	r3, [r5, r3]
 800e1a8:	4798      	blx	r3
 800e1aa:	3601      	adds	r6, #1
 800e1ac:	e7ee      	b.n	800e18c <__libc_init_array+0xc>
 800e1ae:	00b3      	lsls	r3, r6, #2
 800e1b0:	58eb      	ldr	r3, [r5, r3]
 800e1b2:	4798      	blx	r3
 800e1b4:	3601      	adds	r6, #1
 800e1b6:	e7f2      	b.n	800e19e <__libc_init_array+0x1e>
 800e1b8:	0800ec90 	.word	0x0800ec90
 800e1bc:	0800ec90 	.word	0x0800ec90
 800e1c0:	0800ec94 	.word	0x0800ec94
 800e1c4:	0800ec90 	.word	0x0800ec90

0800e1c8 <memcpy>:
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	b510      	push	{r4, lr}
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d100      	bne.n	800e1d2 <memcpy+0xa>
 800e1d0:	bd10      	pop	{r4, pc}
 800e1d2:	5ccc      	ldrb	r4, [r1, r3]
 800e1d4:	54c4      	strb	r4, [r0, r3]
 800e1d6:	3301      	adds	r3, #1
 800e1d8:	e7f8      	b.n	800e1cc <memcpy+0x4>
	...

0800e1dc <_init>:
 800e1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1de:	46c0      	nop			@ (mov r8, r8)
 800e1e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1e2:	bc08      	pop	{r3}
 800e1e4:	469e      	mov	lr, r3
 800e1e6:	4770      	bx	lr

0800e1e8 <_fini>:
 800e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ea:	46c0      	nop			@ (mov r8, r8)
 800e1ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1ee:	bc08      	pop	{r3}
 800e1f0:	469e      	mov	lr, r3
 800e1f2:	4770      	bx	lr
 800e1f4:	0000      	movs	r0, r0
	...

0800e1f8 <__FLASH_Program_Fast_veneer>:
 800e1f8:	b401      	push	{r0}
 800e1fa:	4802      	ldr	r0, [pc, #8]	@ (800e204 <__FLASH_Program_Fast_veneer+0xc>)
 800e1fc:	4684      	mov	ip, r0
 800e1fe:	bc01      	pop	{r0}
 800e200:	4760      	bx	ip
 800e202:	bf00      	nop
 800e204:	20000459 	.word	0x20000459

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040 00000064                       @@..d...

20000020 <led_blink_period>:
20000020:	0000012c                                ,...

20000024 <tap_tempo_switch_state_counter.1>:
20000024:	                                         .

20000025 <preset.4>:
20000025:	                                         ...

20000028 <delay_line>:
	...
20000428:	00010000 00000200                       ........

20000430 <speed_fsm>:
20000430:	00000001                                ....

20000434 <depth_fsm>:
20000434:	00000001                                ....

20000438 <waveshape_fsm>:
20000438:	00000001                                ....

2000043c <symmetry_fsm>:
2000043c:	00000001                                ....

20000440 <phase_fsm>:
20000440:	00000001                                ....

20000444 <IP_CAP_fsm>:
20000444:	00000400                                ....

20000448 <LED_fsm>:
20000448:	00000001                                ....

2000044c <SystemCoreClock>:
2000044c:	00f42400                                .$..

20000450 <uwTickPrio>:
20000450:	00000004                                ....

20000454 <uwTickFreq>:
20000454:	00000001                                ....

20000458 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000458:	b580      	push	{r7, lr}
2000045a:	b088      	sub	sp, #32
2000045c:	af00      	add	r7, sp, #0
2000045e:	6078      	str	r0, [r7, #4]
20000460:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2200      	movs	r2, #0
20000468:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000046e:	683b      	ldr	r3, [r7, #0]
20000470:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000472:	4b1a      	ldr	r3, [pc, #104]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000474:	695a      	ldr	r2, [r3, #20]
20000476:	4b19      	ldr	r3, [pc, #100]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000478:	2180      	movs	r1, #128	@ 0x80
2000047a:	02c9      	lsls	r1, r1, #11
2000047c:	430a      	orrs	r2, r1
2000047e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000480:	f3ef 8310 	mrs	r3, PRIMASK
20000484:	60fb      	str	r3, [r7, #12]
  return(result);
20000486:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
20000488:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000048a:	b672      	cpsid	i
}
2000048c:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
2000048e:	e00f      	b.n	200004b0 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000490:	697a      	ldr	r2, [r7, #20]
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	6812      	ldr	r2, [r2, #0]
20000496:	601a      	str	r2, [r3, #0]
    src += 4U;
20000498:	697b      	ldr	r3, [r7, #20]
2000049a:	3304      	adds	r3, #4
2000049c:	617b      	str	r3, [r7, #20]
    dest += 4U;
2000049e:	69bb      	ldr	r3, [r7, #24]
200004a0:	3304      	adds	r3, #4
200004a2:	61bb      	str	r3, [r7, #24]
    index++;
200004a4:	211f      	movs	r1, #31
200004a6:	187b      	adds	r3, r7, r1
200004a8:	781a      	ldrb	r2, [r3, #0]
200004aa:	187b      	adds	r3, r7, r1
200004ac:	3201      	adds	r2, #1
200004ae:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	2b3f      	cmp	r3, #63	@ 0x3f
200004b8:	d9ea      	bls.n	20000490 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200004ba:	46c0      	nop			@ (mov r8, r8)
200004bc:	4b07      	ldr	r3, [pc, #28]	@ (200004dc <FLASH_Program_Fast+0x84>)
200004be:	691a      	ldr	r2, [r3, #16]
200004c0:	2380      	movs	r3, #128	@ 0x80
200004c2:	025b      	lsls	r3, r3, #9
200004c4:	4013      	ands	r3, r2
200004c6:	d1f9      	bne.n	200004bc <FLASH_Program_Fast+0x64>
200004c8:	693b      	ldr	r3, [r7, #16]
200004ca:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004cc:	68bb      	ldr	r3, [r7, #8]
200004ce:	f383 8810 	msr	PRIMASK, r3
}
200004d2:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200004d4:	46c0      	nop			@ (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	b008      	add	sp, #32
200004da:	bd80      	pop	{r7, pc}
200004dc:	40022000 	.word	0x40022000
