
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004338  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080043f4  080043f4  000053f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004514  08004514  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004514  08004514  00005514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800451c  0800451c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004520  08004520  00005520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004524  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08004530  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004530  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d23  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002232  00000000  00000000  00017d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00019f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c6e  00000000  00000000  0001af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017103  00000000  00000000  0001bbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012383  00000000  00000000  00032cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099314  00000000  00000000  0004504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de360  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c0  00000000  00000000  000de3a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e1d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080043dc 	.word	0x080043dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080043dc 	.word	0x080043dc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
#include "config.h"
#include "main.h"

void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f003 ff93 	bl	8004384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f003 ff8c 	bl	8004384 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fdf9 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fe1b 	bl	8002100 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fad3 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f920 	bl	8002734 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fabe 	bl	8000a78 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f003 ff36 	bl	8004384 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b41      	ldr	r3, [pc, #260]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800051a:	4a42      	ldr	r2, [pc, #264]	@ (8000624 <MX_ADC1_Init+0x120>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b40      	ldr	r3, [pc, #256]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b3e      	ldr	r3, [pc, #248]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b3c      	ldr	r3, [pc, #240]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b3b      	ldr	r3, [pc, #236]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b39      	ldr	r3, [pc, #228]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b37      	ldr	r3, [pc, #220]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b34      	ldr	r3, [pc, #208]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b33      	ldr	r3, [pc, #204]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b31      	ldr	r3, [pc, #196]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b2f      	ldr	r3, [pc, #188]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b2e      	ldr	r3, [pc, #184]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b2a      	ldr	r3, [pc, #168]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <MX_ADC1_Init+0x11c>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b27      	ldr	r3, [pc, #156]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b24      	ldr	r3, [pc, #144]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000596:	0018      	movs	r0, r3
 8000598:	f000 fdfa 	bl	8001190 <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fa6a 	bl	8000a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b19      	ldr	r3, [pc, #100]	@ (8000620 <MX_ADC1_Init+0x11c>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 ff8f 	bl	80014e0 <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 fa57 	bl	8000a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2204      	movs	r2, #4
 80005ce:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d0:	1d3a      	adds	r2, r7, #4
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <MX_ADC1_Init+0x11c>)
 80005d4:	0011      	movs	r1, r2
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 ff82 	bl	80014e0 <HAL_ADC_ConfigChannel>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80005e0:	f000 fa4a 	bl	8000a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2208      	movs	r2, #8
 80005e8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <MX_ADC1_Init+0x11c>)
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 ff75 	bl	80014e0 <HAL_ADC_ConfigChannel>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80005fa:	f000 fa3d 	bl	8000a78 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	220c      	movs	r2, #12
 8000602:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	1d3a      	adds	r2, r7, #4
 8000606:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <MX_ADC1_Init+0x11c>)
 8000608:	0011      	movs	r1, r2
 800060a:	0018      	movs	r0, r3
 800060c:	f000 ff68 	bl	80014e0 <HAL_ADC_ConfigChannel>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000614:	f000 fa30 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000618:	46c0      	nop			@ (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b004      	add	sp, #16
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000028 	.word	0x20000028
 8000624:	40012400 	.word	0x40012400

08000628 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM14_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	231c      	movs	r3, #28
 8000634:	001a      	movs	r2, r3
 8000636:	2100      	movs	r1, #0
 8000638:	f003 fea4 	bl	8004384 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <MX_TIM14_Init+0x98>)
 800063e:	4a21      	ldr	r2, [pc, #132]	@ (80006c4 <MX_TIM14_Init+0x9c>)
 8000640:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_TIM14_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000648:	4b1d      	ldr	r3, [pc, #116]	@ (80006c0 <MX_TIM14_Init+0x98>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800064e:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_TIM14_Init+0x98>)
 8000650:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <MX_TIM14_Init+0xa0>)
 8000652:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_TIM14_Init+0x98>)
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	0052      	lsls	r2, r2, #1
 800065a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065c:	4b18      	ldr	r3, [pc, #96]	@ (80006c0 <MX_TIM14_Init+0x98>)
 800065e:	2280      	movs	r2, #128	@ 0x80
 8000660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000662:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_TIM14_Init+0x98>)
 8000664:	0018      	movs	r0, r3
 8000666:	f002 fa0f 	bl	8002a88 <HAL_TIM_Base_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800066e:	f000 fa03 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_TIM14_Init+0x98>)
 8000674:	0018      	movs	r0, r3
 8000676:	f002 fabf 	bl	8002bf8 <HAL_TIM_PWM_Init>
 800067a:	1e03      	subs	r3, r0, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 800067e:	f000 f9fb 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2260      	movs	r2, #96	@ 0x60
 8000686:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 45;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	222d      	movs	r2, #45	@ 0x2d
 800068c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800069a:	1d39      	adds	r1, r7, #4
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_TIM14_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	0018      	movs	r0, r3
 80006a2:	f002 fc71 	bl	8002f88 <HAL_TIM_PWM_ConfigChannel>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80006aa:	f000 f9e5 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006ae:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <MX_TIM14_Init+0x98>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 faef 	bl	8000c94 <HAL_TIM_MspPostInit>

}
 80006b6:	46c0      	nop			@ (mov r8, r8)
 80006b8:	46bd      	mov	sp, r7
 80006ba:	b008      	add	sp, #32
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	200000e8 	.word	0x200000e8
 80006c4:	40002000 	.word	0x40002000
 80006c8:	000003ff 	.word	0x000003ff

080006cc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM16_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d2:	2334      	movs	r3, #52	@ 0x34
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	0018      	movs	r0, r3
 80006d8:	231c      	movs	r3, #28
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 fe51 	bl	8004384 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006e2:	003b      	movs	r3, r7
 80006e4:	0018      	movs	r0, r3
 80006e6:	2334      	movs	r3, #52	@ 0x34
 80006e8:	001a      	movs	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	f003 fe4a 	bl	8004384 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006f0:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <MX_TIM16_Init+0x110>)
 80006f2:	4a3b      	ldr	r2, [pc, #236]	@ (80007e0 <MX_TIM16_Init+0x114>)
 80006f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80006f6:	4b39      	ldr	r3, [pc, #228]	@ (80007dc <MX_TIM16_Init+0x110>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fc:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <MX_TIM16_Init+0x110>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000702:	4b36      	ldr	r3, [pc, #216]	@ (80007dc <MX_TIM16_Init+0x110>)
 8000704:	22ff      	movs	r2, #255	@ 0xff
 8000706:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000708:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <MX_TIM16_Init+0x110>)
 800070a:	2280      	movs	r2, #128	@ 0x80
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <MX_TIM16_Init+0x110>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	4b31      	ldr	r3, [pc, #196]	@ (80007dc <MX_TIM16_Init+0x110>)
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800071c:	4b2f      	ldr	r3, [pc, #188]	@ (80007dc <MX_TIM16_Init+0x110>)
 800071e:	0018      	movs	r0, r3
 8000720:	f002 f9b2 	bl	8002a88 <HAL_TIM_Base_Init>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d001      	beq.n	800072c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f9a6 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800072c:	4b2b      	ldr	r3, [pc, #172]	@ (80007dc <MX_TIM16_Init+0x110>)
 800072e:	0018      	movs	r0, r3
 8000730:	f002 fa02 	bl	8002b38 <HAL_TIM_OC_Init>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 f99e 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800073c:	2134      	movs	r1, #52	@ 0x34
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	22ff      	movs	r2, #255	@ 0xff
 8000748:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000768:	1879      	adds	r1, r7, r1
 800076a:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_TIM16_Init+0x110>)
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f002 fbaa 	bl	8002ec8 <HAL_TIM_OC_ConfigChannel>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8000778:	f000 f97e 	bl	8000a78 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_TIM16_Init+0x110>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_TIM16_Init+0x110>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	2108      	movs	r1, #8
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800078c:	003b      	movs	r3, r7
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000792:	003b      	movs	r3, r7
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000798:	003b      	movs	r3, r7
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800079e:	003b      	movs	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007a4:	003b      	movs	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007aa:	003b      	movs	r3, r7
 80007ac:	2280      	movs	r2, #128	@ 0x80
 80007ae:	0192      	lsls	r2, r2, #6
 80007b0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007b8:	003b      	movs	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007be:	003a      	movs	r2, r7
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_TIM16_Init+0x110>)
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f003 f827 	bl	8003818 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007ce:	f000 f953 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b014      	add	sp, #80	@ 0x50
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	20000134 	.word	0x20000134
 80007e0:	40014400 	.word	0x40014400

080007e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM17_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b094      	sub	sp, #80	@ 0x50
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ea:	2334      	movs	r3, #52	@ 0x34
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	231c      	movs	r3, #28
 80007f2:	001a      	movs	r2, r3
 80007f4:	2100      	movs	r1, #0
 80007f6:	f003 fdc5 	bl	8004384 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	2334      	movs	r3, #52	@ 0x34
 8000800:	001a      	movs	r2, r3
 8000802:	2100      	movs	r1, #0
 8000804:	f003 fdbe 	bl	8004384 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000808:	4b3a      	ldr	r3, [pc, #232]	@ (80008f4 <MX_TIM17_Init+0x110>)
 800080a:	4a3b      	ldr	r2, [pc, #236]	@ (80008f8 <MX_TIM17_Init+0x114>)
 800080c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800080e:	4b39      	ldr	r3, [pc, #228]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000810:	2200      	movs	r2, #0
 8000812:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000814:	4b37      	ldr	r3, [pc, #220]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800081a:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <MX_TIM17_Init+0x110>)
 800081c:	4a37      	ldr	r2, [pc, #220]	@ (80008fc <MX_TIM17_Init+0x118>)
 800081e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000820:	4b34      	ldr	r3, [pc, #208]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	0052      	lsls	r2, r2, #1
 8000826:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000828:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <MX_TIM17_Init+0x110>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b31      	ldr	r3, [pc, #196]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000834:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000836:	0018      	movs	r0, r3
 8000838:	f002 f926 	bl	8002a88 <HAL_TIM_Base_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 f91a 	bl	8000a78 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000844:	4b2b      	ldr	r3, [pc, #172]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000846:	0018      	movs	r0, r3
 8000848:	f002 f976 	bl	8002b38 <HAL_TIM_OC_Init>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000850:	f000 f912 	bl	8000a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000854:	2134      	movs	r1, #52	@ 0x34
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	4a27      	ldr	r2, [pc, #156]	@ (80008fc <MX_TIM17_Init+0x118>)
 8000860:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000880:	1879      	adds	r1, r7, r1
 8000882:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000884:	2200      	movs	r2, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fb1e 	bl	8002ec8 <HAL_TIM_OC_ConfigChannel>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000890:	f000 f8f2 	bl	8000a78 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000894:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <MX_TIM17_Init+0x110>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	699a      	ldr	r2, [r3, #24]
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <MX_TIM17_Init+0x110>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2108      	movs	r1, #8
 80008a0:	430a      	orrs	r2, r1
 80008a2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008a4:	003b      	movs	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008aa:	003b      	movs	r3, r7
 80008ac:	2200      	movs	r2, #0
 80008ae:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008b0:	003b      	movs	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008b6:	003b      	movs	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008bc:	003b      	movs	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008c2:	003b      	movs	r3, r7
 80008c4:	2280      	movs	r2, #128	@ 0x80
 80008c6:	0192      	lsls	r2, r2, #6
 80008c8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008ca:	003b      	movs	r3, r7
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008d0:	003b      	movs	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80008d6:	003a      	movs	r2, r7
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <MX_TIM17_Init+0x110>)
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f002 ff9b 	bl	8003818 <HAL_TIMEx_ConfigBreakDeadTime>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 80008e6:	f000 f8c7 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80008ea:	46c0      	nop			@ (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b014      	add	sp, #80	@ 0x50
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	20000180 	.word	0x20000180
 80008f8:	40014800 	.word	0x40014800
 80008fc:	0000ffff 	.word	0x0000ffff

08000900 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000904:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000906:	4a17      	ldr	r2, [pc, #92]	@ (8000964 <MX_USART2_UART_Init+0x64>)
 8000908:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 800090c:	22e1      	movs	r2, #225	@ 0xe1
 800090e:	0252      	lsls	r2, r2, #9
 8000910:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000926:	220c      	movs	r2, #12
 8000928:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 800092c:	2200      	movs	r2, #0
 800092e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000930:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000936:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000938:	2200      	movs	r2, #0
 800093a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 800093e:	2200      	movs	r2, #0
 8000940:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000942:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 8000944:	2200      	movs	r2, #0
 8000946:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <MX_USART2_UART_Init+0x60>)
 800094a:	0018      	movs	r0, r3
 800094c:	f003 f818 	bl	8003980 <HAL_UART_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000954:	f000 f890 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	200001cc 	.word	0x200001cc
 8000964:	40004400 	.word	0x40004400

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <MX_DMA_Init+0x48>)
 8000970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000972:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_DMA_Init+0x48>)
 8000974:	2101      	movs	r1, #1
 8000976:	430a      	orrs	r2, r1
 8000978:	639a      	str	r2, [r3, #56]	@ 0x38
 800097a:	4b0d      	ldr	r3, [pc, #52]	@ (80009b0 <MX_DMA_Init+0x48>)
 800097c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800097e:	2201      	movs	r2, #1
 8000980:	4013      	ands	r3, r2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2009      	movs	r0, #9
 800098c:	f001 f82c 	bl	80019e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000990:	2009      	movs	r0, #9
 8000992:	f001 f83e 	bl	8001a12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	200b      	movs	r0, #11
 800099c:	f001 f824 	bl	80019e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80009a0:	200b      	movs	r0, #11
 80009a2:	f001 f836 	bl	8001a12 <HAL_NVIC_EnableIRQ>

}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	b002      	add	sp, #8
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	46c0      	nop			@ (mov r8, r8)
 80009b0:	40021000 	.word	0x40021000

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	240c      	movs	r4, #12
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	2314      	movs	r3, #20
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 fcdd 	bl	8004384 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ca:	4b28      	ldr	r3, [pc, #160]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ce:	4b27      	ldr	r3, [pc, #156]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009d0:	2104      	movs	r1, #4
 80009d2:	430a      	orrs	r2, r1
 80009d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009da:	2204      	movs	r2, #4
 80009dc:	4013      	ands	r3, r2
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009e2:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009e8:	2120      	movs	r1, #32
 80009ea:	430a      	orrs	r2, r1
 80009ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ee:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f2:	2220      	movs	r2, #32
 80009f4:	4013      	ands	r3, r2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 80009fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009fe:	4b1b      	ldr	r3, [pc, #108]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 8000a00:	2101      	movs	r1, #1
 8000a02:	430a      	orrs	r2, r1
 8000a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <MX_GPIO_Init+0xb8>)
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a12:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <MX_GPIO_Init+0xbc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	@ 0x40
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fb07 	bl	800202c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	2204      	movs	r2, #4
 8000a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a24:	193b      	adds	r3, r7, r4
 8000a26:	2288      	movs	r2, #136	@ 0x88
 8000a28:	0352      	lsls	r2, r2, #13
 8000a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	193b      	adds	r3, r7, r4
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <MX_GPIO_Init+0xc0>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f001 f993 	bl	8001d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2240      	movs	r2, #64	@ 0x40
 8000a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2201      	movs	r2, #1
 8000a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	4a05      	ldr	r2, [pc, #20]	@ (8000a70 <MX_GPIO_Init+0xbc>)
 8000a5c:	0019      	movs	r1, r3
 8000a5e:	0010      	movs	r0, r2
 8000a60:	f001 f980 	bl	8001d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a64:	46c0      	nop			@ (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b009      	add	sp, #36	@ 0x24
 8000a6a:	bd90      	pop	{r4, r7, pc}
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	50000800 	.word	0x50000800
 8000a74:	50001400 	.word	0x50001400

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <main>:
TIM_HandleTypeDef htim17;

UART_HandleTypeDef huart2;

int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a88:	f000 f9fe 	bl	8000e88 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000a8c:	f7ff fcdc 	bl	8000448 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a90:	f7ff ff90 	bl	80009b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a94:	f7ff ff68 	bl	8000968 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a98:	f7ff ff32 	bl	8000900 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a9c:	f7ff fd32 	bl	8000504 <MX_ADC1_Init>
  MX_TIM14_Init(); //PWM gen
 8000aa0:	f7ff fdc2 	bl	8000628 <MX_TIM14_Init>
  MX_TIM16_Init(); //frequency gen
 8000aa4:	f7ff fe12 	bl	80006cc <MX_TIM16_Init>
  MX_TIM17_Init(); //adc interrupt gen
 8000aa8:	f7ff fe9c 	bl	80007e4 <MX_TIM17_Init>

  while (1)
 8000aac:	46c0      	nop			@ (mov r8, r8)
 8000aae:	e7fd      	b.n	8000aac <main+0x28>

08000ab0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ab8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <HAL_MspInit+0x44>)
 8000abc:	2101      	movs	r1, #1
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ad4:	2180      	movs	r1, #128	@ 0x80
 8000ad6:	0549      	lsls	r1, r1, #21
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_MspInit+0x44>)
 8000ade:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ae0:	2380      	movs	r3, #128	@ 0x80
 8000ae2:	055b      	lsls	r3, r3, #21
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	b002      	add	sp, #8
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b08b      	sub	sp, #44	@ 0x2c
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	2414      	movs	r4, #20
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	0018      	movs	r0, r3
 8000b06:	2314      	movs	r3, #20
 8000b08:	001a      	movs	r2, r3
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f003 fc3a 	bl	8004384 <memset>
  if(hadc->Instance==ADC1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a2d      	ldr	r2, [pc, #180]	@ (8000bcc <HAL_ADC_MspInit+0xd4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d154      	bne.n	8000bc4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	0349      	lsls	r1, r1, #13
 8000b24:	430a      	orrs	r2, r1
 8000b26:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b28:	4b29      	ldr	r3, [pc, #164]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b2c:	2380      	movs	r3, #128	@ 0x80
 8000b2e:	035b      	lsls	r3, r3, #13
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b3a:	4b25      	ldr	r3, [pc, #148]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <HAL_ADC_MspInit+0xd8>)
 8000b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b46:	2201      	movs	r2, #1
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b4e:	193b      	adds	r3, r7, r4
 8000b50:	2233      	movs	r2, #51	@ 0x33
 8000b52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	2203      	movs	r2, #3
 8000b58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b60:	193a      	adds	r2, r7, r4
 8000b62:	23a0      	movs	r3, #160	@ 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	0011      	movs	r1, r2
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 f8fb 	bl	8001d64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <HAL_ADC_MspInit+0xe0>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b76:	2205      	movs	r2, #5
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b88:	2280      	movs	r2, #128	@ 0x80
 8000b8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	0052      	lsls	r2, r2, #1
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b96:	2280      	movs	r2, #128	@ 0x80
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 ff4e 	bl	8001a4c <HAL_DMA_Init>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000bb4:	f7ff ff60 	bl	8000a78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000bbc:	651a      	str	r2, [r3, #80]	@ 0x50
 8000bbe:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <HAL_ADC_MspInit+0xdc>)
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bc4:	46c0      	nop			@ (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b00b      	add	sp, #44	@ 0x2c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40012400 	.word	0x40012400
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	2000008c 	.word	0x2000008c
 8000bd8:	40020008 	.word	0x40020008

08000bdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <HAL_TIM_Base_MspInit+0xa8>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10e      	bne.n	8000c0c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000bee:	4b26      	ldr	r3, [pc, #152]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000bf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000bf4:	2180      	movs	r1, #128	@ 0x80
 8000bf6:	0209      	lsls	r1, r1, #8
 8000bf8:	430a      	orrs	r2, r1
 8000bfa:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000bfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c00:	2380      	movs	r3, #128	@ 0x80
 8000c02:	021b      	lsls	r3, r3, #8
 8000c04:	4013      	ands	r3, r2
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000c0a:	e036      	b.n	8000c7a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1e      	ldr	r2, [pc, #120]	@ (8000c8c <HAL_TIM_Base_MspInit+0xb0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d116      	bne.n	8000c44 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c1c:	2180      	movs	r1, #128	@ 0x80
 8000c1e:	0289      	lsls	r1, r1, #10
 8000c20:	430a      	orrs	r2, r1
 8000c22:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c24:	4b18      	ldr	r3, [pc, #96]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c28:	2380      	movs	r3, #128	@ 0x80
 8000c2a:	029b      	lsls	r3, r3, #10
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	2015      	movs	r0, #21
 8000c38:	f000 fed6 	bl	80019e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000c3c:	2015      	movs	r0, #21
 8000c3e:	f000 fee8 	bl	8001a12 <HAL_NVIC_EnableIRQ>
}
 8000c42:	e01a      	b.n	8000c7a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a11      	ldr	r2, [pc, #68]	@ (8000c90 <HAL_TIM_Base_MspInit+0xb4>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d115      	bne.n	8000c7a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c54:	2180      	movs	r1, #128	@ 0x80
 8000c56:	02c9      	lsls	r1, r1, #11
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <HAL_TIM_Base_MspInit+0xac>)
 8000c5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	02db      	lsls	r3, r3, #11
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2016      	movs	r0, #22
 8000c70:	f000 feba 	bl	80019e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000c74:	2016      	movs	r0, #22
 8000c76:	f000 fecc 	bl	8001a12 <HAL_NVIC_EnableIRQ>
}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b006      	add	sp, #24
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	40002000 	.word	0x40002000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40014400 	.word	0x40014400
 8000c90:	40014800 	.word	0x40014800

08000c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b089      	sub	sp, #36	@ 0x24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	240c      	movs	r4, #12
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	2314      	movs	r3, #20
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	f003 fb6c 	bl	8004384 <memset>
  if(htim->Instance==TIM14)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a14      	ldr	r2, [pc, #80]	@ (8000d04 <HAL_TIM_MspPostInit+0x70>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d122      	bne.n	8000cfc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_TIM_MspPostInit+0x74>)
 8000cb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cba:	4b13      	ldr	r3, [pc, #76]	@ (8000d08 <HAL_TIM_MspPostInit+0x74>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_TIM_MspPostInit+0x74>)
 8000cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2280      	movs	r2, #128	@ 0x80
 8000cd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2202      	movs	r2, #2
 8000cda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2204      	movs	r2, #4
 8000cec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	187a      	adds	r2, r7, r1
 8000cf0:	23a0      	movs	r3, #160	@ 0xa0
 8000cf2:	05db      	lsls	r3, r3, #23
 8000cf4:	0011      	movs	r1, r2
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f001 f834 	bl	8001d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b009      	add	sp, #36	@ 0x24
 8000d02:	bd90      	pop	{r4, r7, pc}
 8000d04:	40002000 	.word	0x40002000
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b08b      	sub	sp, #44	@ 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	2414      	movs	r4, #20
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f003 fb30 	bl	8004384 <memset>
  if(huart->Instance==USART2)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a1b      	ldr	r2, [pc, #108]	@ (8000d98 <HAL_UART_MspInit+0x8c>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d130      	bne.n	8000d90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d32:	4b1a      	ldr	r3, [pc, #104]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d34:	2180      	movs	r1, #128	@ 0x80
 8000d36:	0289      	lsls	r1, r1, #10
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d3c:	4b17      	ldr	r3, [pc, #92]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b14      	ldr	r3, [pc, #80]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d4e:	4b13      	ldr	r3, [pc, #76]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d50:	2101      	movs	r1, #1
 8000d52:	430a      	orrs	r2, r1
 8000d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d56:	4b11      	ldr	r3, [pc, #68]	@ (8000d9c <HAL_UART_MspInit+0x90>)
 8000d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000d62:	0021      	movs	r1, r4
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	220c      	movs	r2, #12
 8000d68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2201      	movs	r2, #1
 8000d80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 ffea 	bl	8001d64 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b00b      	add	sp, #44	@ 0x2c
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40004400 	.word	0x40004400
 8000d9c:	40021000 	.word	0x40021000

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc8:	f000 f8c8 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <DMA1_Channel1_IRQHandler+0x14>)
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 fec0 	bl	8001b60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	2000008c 	.word	0x2000008c

08000dec <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <TIM16_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 ff5a 	bl	8002cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000134 	.word	0x20000134

08000e10 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000e14:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <TIM17_IRQHandler+0x14>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 ff4e 	bl	8002cb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000180 	.word	0x20000180

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fff6 	bl	8000e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e3c:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3e:	490d      	ldr	r1, [pc, #52]	@ (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e54:	4c0a      	ldr	r4, [pc, #40]	@ (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e62:	f003 fa97 	bl	8004394 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e66:	f7ff fe0d 	bl	8000a84 <main>

08000e6a <LoopForever>:

LoopForever:
  b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e78:	08004524 	.word	0x08004524
  ldr r2, =_sbss
 8000e7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e80:	20000264 	.word	0x20000264

08000e84 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC1_IRQHandler>
	...

08000e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec4 <HAL_Init+0x3c>)
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec4 <HAL_Init+0x3c>)
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	0049      	lsls	r1, r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 f810 	bl	8000ec8 <HAL_InitTick>
 8000ea8:	1e03      	subs	r3, r0, #0
 8000eaa:	d003      	beq.n	8000eb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e001      	b.n	8000eb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fdfc 	bl	8000ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40022000 	.word	0x40022000

08000ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_InitTick+0x88>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d02b      	beq.n	8000f38 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f54 <HAL_InitTick+0x8c>)
 8000ee2:	681c      	ldr	r4, [r3, #0]
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <HAL_InitTick+0x88>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	0019      	movs	r1, r3
 8000eea:	23fa      	movs	r3, #250	@ 0xfa
 8000eec:	0098      	lsls	r0, r3, #2
 8000eee:	f7ff f909 	bl	8000104 <__udivsi3>
 8000ef2:	0003      	movs	r3, r0
 8000ef4:	0019      	movs	r1, r3
 8000ef6:	0020      	movs	r0, r4
 8000ef8:	f7ff f904 	bl	8000104 <__udivsi3>
 8000efc:	0003      	movs	r3, r0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fd97 	bl	8001a32 <HAL_SYSTICK_Config>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d112      	bne.n	8000f2e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2b03      	cmp	r3, #3
 8000f0c:	d80a      	bhi.n	8000f24 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	2301      	movs	r3, #1
 8000f12:	425b      	negs	r3, r3
 8000f14:	2200      	movs	r2, #0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 fd66 	bl	80019e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <HAL_InitTick+0x90>)
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e00d      	b.n	8000f40 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e008      	b.n	8000f40 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f2e:	230f      	movs	r3, #15
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	2201      	movs	r2, #1
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e003      	b.n	8000f40 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f40:	230f      	movs	r3, #15
 8000f42:	18fb      	adds	r3, r7, r3
 8000f44:	781b      	ldrb	r3, [r3, #0]
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b005      	add	sp, #20
 8000f4c:	bd90      	pop	{r4, r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f60:	4b05      	ldr	r3, [pc, #20]	@ (8000f78 <HAL_IncTick+0x1c>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	001a      	movs	r2, r3
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	18d2      	adds	r2, r2, r3
 8000f6c:	4b03      	ldr	r3, [pc, #12]	@ (8000f7c <HAL_IncTick+0x20>)
 8000f6e:	601a      	str	r2, [r3, #0]
}
 8000f70:	46c0      	nop			@ (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	46c0      	nop			@ (mov r8, r8)
 8000f78:	20000008 	.word	0x20000008
 8000f7c:	20000260 	.word	0x20000260

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b02      	ldr	r3, [pc, #8]	@ (8000f90 <HAL_GetTick+0x10>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	20000260 	.word	0x20000260

08000f94 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	46c0      	nop			@ (mov r8, r8)
 8000fb8:	fe3fffff 	.word	0xfe3fffff

08000fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	23e0      	movs	r3, #224	@ 0xe0
 8000fca:	045b      	lsls	r3, r3, #17
 8000fcc:	4013      	ands	r3, r2
}
 8000fce:	0018      	movs	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60f8      	str	r0, [r7, #12]
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	2104      	movs	r1, #4
 8000fea:	400a      	ands	r2, r1
 8000fec:	2107      	movs	r1, #7
 8000fee:	4091      	lsls	r1, r2
 8000ff0:	000a      	movs	r2, r1
 8000ff2:	43d2      	mvns	r2, r2
 8000ff4:	401a      	ands	r2, r3
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	400b      	ands	r3, r1
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4099      	lsls	r1, r3
 8001000:	000b      	movs	r3, r1
 8001002:	431a      	orrs	r2, r3
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	b004      	add	sp, #16
 800100e:	bd80      	pop	{r7, pc}

08001010 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	683a      	ldr	r2, [r7, #0]
 8001020:	2104      	movs	r1, #4
 8001022:	400a      	ands	r2, r1
 8001024:	2107      	movs	r1, #7
 8001026:	4091      	lsls	r1, r2
 8001028:	000a      	movs	r2, r1
 800102a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	2104      	movs	r1, #4
 8001030:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001032:	40da      	lsrs	r2, r3
 8001034:	0013      	movs	r3, r2
}
 8001036:	0018      	movs	r0, r3
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}

0800103e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	211f      	movs	r1, #31
 8001052:	400a      	ands	r2, r1
 8001054:	210f      	movs	r1, #15
 8001056:	4091      	lsls	r1, r2
 8001058:	000a      	movs	r2, r1
 800105a:	43d2      	mvns	r2, r2
 800105c:	401a      	ands	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	0e9b      	lsrs	r3, r3, #26
 8001062:	210f      	movs	r1, #15
 8001064:	4019      	ands	r1, r3
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	201f      	movs	r0, #31
 800106a:	4003      	ands	r3, r0
 800106c:	4099      	lsls	r1, r3
 800106e:	000b      	movs	r3, r1
 8001070:	431a      	orrs	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}

0800107e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	035b      	lsls	r3, r3, #13
 8001090:	0b5b      	lsrs	r3, r3, #13
 8001092:	431a      	orrs	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	0352      	lsls	r2, r2, #13
 80010b2:	0b52      	lsrs	r2, r2, #13
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	0212      	lsls	r2, r2, #8
 80010d8:	43d2      	mvns	r2, r2
 80010da:	401a      	ands	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	400b      	ands	r3, r1
 80010e4:	4904      	ldr	r1, [pc, #16]	@ (80010f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80010e6:	400b      	ands	r3, r1
 80010e8:	431a      	orrs	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			@ (mov r8, r8)
 80010f8:	07ffff00 	.word	0x07ffff00

080010fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a05      	ldr	r2, [pc, #20]	@ (8001120 <LL_ADC_EnableInternalRegulator+0x24>)
 800110a:	4013      	ands	r3, r2
 800110c:	2280      	movs	r2, #128	@ 0x80
 800110e:	0552      	lsls	r2, r2, #21
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b002      	add	sp, #8
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			@ (mov r8, r8)
 8001120:	6fffffe8 	.word	0x6fffffe8

08001124 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	2380      	movs	r3, #128	@ 0x80
 8001132:	055b      	lsls	r3, r3, #21
 8001134:	401a      	ands	r2, r3
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	055b      	lsls	r3, r3, #21
 800113a:	429a      	cmp	r2, r3
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001142:	2300      	movs	r3, #0
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	2201      	movs	r2, #1
 800115a:	4013      	ands	r3, r2
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <LL_ADC_IsEnabled+0x18>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_ADC_IsEnabled+0x1a>
 8001164:	2300      	movs	r3, #0
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b002      	add	sp, #8
 800116c:	bd80      	pop	{r7, pc}

0800116e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	2204      	movs	r2, #4
 800117c:	4013      	ands	r3, r2
 800117e:	2b04      	cmp	r3, #4
 8001180:	d101      	bne.n	8001186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001182:	2301      	movs	r3, #1
 8001184:	e000      	b.n	8001188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001186:	2300      	movs	r3, #0
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b002      	add	sp, #8
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	231f      	movs	r3, #31
 800119a:	18fb      	adds	r3, r7, r3
 800119c:	2200      	movs	r2, #0
 800119e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e17f      	b.n	80014b6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d10a      	bne.n	80011d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0018      	movs	r0, r3
 80011c2:	f7ff fc99 	bl	8000af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2254      	movs	r2, #84	@ 0x54
 80011d0:	2100      	movs	r1, #0
 80011d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ffa3 	bl	8001124 <LL_ADC_IsInternalRegulatorEnabled>
 80011de:	1e03      	subs	r3, r0, #0
 80011e0:	d115      	bne.n	800120e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff ff88 	bl	80010fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80011ec:	4bb4      	ldr	r3, [pc, #720]	@ (80014c0 <HAL_ADC_Init+0x330>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	49b4      	ldr	r1, [pc, #720]	@ (80014c4 <HAL_ADC_Init+0x334>)
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7fe ff86 	bl	8000104 <__udivsi3>
 80011f8:	0003      	movs	r3, r0
 80011fa:	3301      	adds	r3, #1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001200:	e002      	b.n	8001208 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3b01      	subs	r3, #1
 8001206:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f9      	bne.n	8001202 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff ff86 	bl	8001124 <LL_ADC_IsInternalRegulatorEnabled>
 8001218:	1e03      	subs	r3, r0, #0
 800121a:	d10f      	bne.n	800123c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001220:	2210      	movs	r2, #16
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800122c:	2201      	movs	r2, #1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001234:	231f      	movs	r3, #31
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff94 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 8001246:	0003      	movs	r3, r0
 8001248:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800124e:	2210      	movs	r2, #16
 8001250:	4013      	ands	r3, r2
 8001252:	d000      	beq.n	8001256 <HAL_ADC_Init+0xc6>
 8001254:	e122      	b.n	800149c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d000      	beq.n	800125e <HAL_ADC_Init+0xce>
 800125c:	e11e      	b.n	800149c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001262:	4a99      	ldr	r2, [pc, #612]	@ (80014c8 <HAL_ADC_Init+0x338>)
 8001264:	4013      	ands	r3, r2
 8001266:	2202      	movs	r2, #2
 8001268:	431a      	orrs	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff6a 	bl	800114c <LL_ADC_IsEnabled>
 8001278:	1e03      	subs	r3, r0, #0
 800127a:	d000      	beq.n	800127e <HAL_ADC_Init+0xee>
 800127c:	e0ad      	b.n	80013da <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	7e1b      	ldrb	r3, [r3, #24]
 8001286:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001288:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	7e5b      	ldrb	r3, [r3, #25]
 800128e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001290:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	7e9b      	ldrb	r3, [r3, #26]
 8001296:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001298:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <HAL_ADC_Init+0x118>
 80012a2:	2380      	movs	r3, #128	@ 0x80
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	e000      	b.n	80012aa <HAL_ADC_Init+0x11a>
 80012a8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80012aa:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80012b0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	da04      	bge.n	80012c4 <HAL_ADC_Init+0x134>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	691b      	ldr	r3, [r3, #16]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	085b      	lsrs	r3, r3, #1
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Init+0x138>
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80012c8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	212c      	movs	r1, #44	@ 0x2c
 80012ce:	5c5b      	ldrb	r3, [r3, r1]
 80012d0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80012d2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	5c9b      	ldrb	r3, [r3, r2]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d115      	bne.n	8001310 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7e9b      	ldrb	r3, [r3, #26]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2280      	movs	r2, #128	@ 0x80
 80012f0:	0252      	lsls	r2, r2, #9
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	e00b      	b.n	8001310 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fc:	2220      	movs	r2, #32
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001308:	2201      	movs	r2, #1
 800130a:	431a      	orrs	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00a      	beq.n	800132e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800131c:	23e0      	movs	r3, #224	@ 0xe0
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001326:	4313      	orrs	r3, r2
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4313      	orrs	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a65      	ldr	r2, [pc, #404]	@ (80014cc <HAL_ADC_Init+0x33c>)
 8001336:	4013      	ands	r3, r2
 8001338:	0019      	movs	r1, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	430a      	orrs	r2, r1
 8001342:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	0f9b      	lsrs	r3, r3, #30
 800134a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001350:	4313      	orrs	r3, r2
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	4313      	orrs	r3, r2
 8001356:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	223c      	movs	r2, #60	@ 0x3c
 800135c:	5c9b      	ldrb	r3, [r3, r2]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d111      	bne.n	8001386 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	0f9b      	lsrs	r3, r3, #30
 8001368:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800136e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001374:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800137a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4313      	orrs	r3, r2
 8001380:	2201      	movs	r2, #1
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	4a50      	ldr	r2, [pc, #320]	@ (80014d0 <HAL_ADC_Init+0x340>)
 800138e:	4013      	ands	r3, r2
 8001390:	0019      	movs	r1, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	430a      	orrs	r2, r1
 800139a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
 80013a0:	23c0      	movs	r3, #192	@ 0xc0
 80013a2:	061b      	lsls	r3, r3, #24
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d018      	beq.n	80013da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d012      	beq.n	80013da <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	061b      	lsls	r3, r3, #24
 80013bc:	429a      	cmp	r2, r3
 80013be:	d00c      	beq.n	80013da <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80013c0:	4b44      	ldr	r3, [pc, #272]	@ (80014d4 <HAL_ADC_Init+0x344>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a44      	ldr	r2, [pc, #272]	@ (80014d8 <HAL_ADC_Init+0x348>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	0019      	movs	r1, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	23f0      	movs	r3, #240	@ 0xf0
 80013d0:	039b      	lsls	r3, r3, #14
 80013d2:	401a      	ands	r2, r3
 80013d4:	4b3f      	ldr	r3, [pc, #252]	@ (80014d4 <HAL_ADC_Init+0x344>)
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6818      	ldr	r0, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013e2:	001a      	movs	r2, r3
 80013e4:	2100      	movs	r1, #0
 80013e6:	f7ff fdf6 	bl	8000fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	493a      	ldr	r1, [pc, #232]	@ (80014dc <HAL_ADC_Init+0x34c>)
 80013f4:	001a      	movs	r2, r3
 80013f6:	f7ff fdee 	bl	8000fd6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d109      	bne.n	8001416 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2110      	movs	r1, #16
 800140e:	4249      	negs	r1, r1
 8001410:	430a      	orrs	r2, r1
 8001412:	629a      	str	r2, [r3, #40]	@ 0x28
 8001414:	e018      	b.n	8001448 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691a      	ldr	r2, [r3, #16]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	429a      	cmp	r2, r3
 8001420:	d112      	bne.n	8001448 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	69db      	ldr	r3, [r3, #28]
 800142c:	3b01      	subs	r3, #1
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	221c      	movs	r2, #28
 8001432:	4013      	ands	r3, r2
 8001434:	2210      	movs	r2, #16
 8001436:	4252      	negs	r2, r2
 8001438:	409a      	lsls	r2, r3
 800143a:	0011      	movs	r1, r2
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2100      	movs	r1, #0
 800144e:	0018      	movs	r0, r3
 8001450:	f7ff fdde 	bl	8001010 <LL_ADC_GetSamplingTimeCommonChannels>
 8001454:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800145a:	429a      	cmp	r2, r3
 800145c:	d10b      	bne.n	8001476 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001468:	2203      	movs	r2, #3
 800146a:	4393      	bics	r3, r2
 800146c:	2201      	movs	r2, #1
 800146e:	431a      	orrs	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001474:	e01c      	b.n	80014b0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	2212      	movs	r2, #18
 800147c:	4393      	bics	r3, r2
 800147e:	2210      	movs	r2, #16
 8001480:	431a      	orrs	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148a:	2201      	movs	r2, #1
 800148c:	431a      	orrs	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001492:	231f      	movs	r3, #31
 8001494:	18fb      	adds	r3, r7, r3
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800149a:	e009      	b.n	80014b0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a0:	2210      	movs	r2, #16
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80014a8:	231f      	movs	r3, #31
 80014aa:	18fb      	adds	r3, r7, r3
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80014b0:	231f      	movs	r3, #31
 80014b2:	18fb      	adds	r3, r7, r3
 80014b4:	781b      	ldrb	r3, [r3, #0]
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b008      	add	sp, #32
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	20000000 	.word	0x20000000
 80014c4:	00030d40 	.word	0x00030d40
 80014c8:	fffffefd 	.word	0xfffffefd
 80014cc:	ffde0201 	.word	0xffde0201
 80014d0:	1ffffc02 	.word	0x1ffffc02
 80014d4:	40012708 	.word	0x40012708
 80014d8:	ffc3ffff 	.word	0xffc3ffff
 80014dc:	07ffff04 	.word	0x07ffff04

080014e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ea:	2317      	movs	r3, #23
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2254      	movs	r2, #84	@ 0x54
 80014fa:	5c9b      	ldrb	r3, [r3, r2]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <HAL_ADC_ConfigChannel+0x24>
 8001500:	2302      	movs	r3, #2
 8001502:	e1c0      	b.n	8001886 <HAL_ADC_ConfigChannel+0x3a6>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2254      	movs	r2, #84	@ 0x54
 8001508:	2101      	movs	r1, #1
 800150a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff fe2c 	bl	800116e <LL_ADC_REG_IsConversionOngoing>
 8001516:	1e03      	subs	r3, r0, #0
 8001518:	d000      	beq.n	800151c <HAL_ADC_ConfigChannel+0x3c>
 800151a:	e1a3      	b.n	8001864 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b02      	cmp	r3, #2
 8001522:	d100      	bne.n	8001526 <HAL_ADC_ConfigChannel+0x46>
 8001524:	e143      	b.n	80017ae <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691a      	ldr	r2, [r3, #16]
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	061b      	lsls	r3, r3, #24
 800152e:	429a      	cmp	r2, r3
 8001530:	d004      	beq.n	800153c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001536:	4ac1      	ldr	r2, [pc, #772]	@ (800183c <HAL_ADC_ConfigChannel+0x35c>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d108      	bne.n	800154e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	0019      	movs	r1, r3
 8001546:	0010      	movs	r0, r2
 8001548:	f7ff fd99 	bl	800107e <LL_ADC_REG_SetSequencerChAdd>
 800154c:	e0c9      	b.n	80016e2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	211f      	movs	r1, #31
 8001558:	400b      	ands	r3, r1
 800155a:	210f      	movs	r1, #15
 800155c:	4099      	lsls	r1, r3
 800155e:	000b      	movs	r3, r1
 8001560:	43db      	mvns	r3, r3
 8001562:	4013      	ands	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	035b      	lsls	r3, r3, #13
 800156c:	0b5b      	lsrs	r3, r3, #13
 800156e:	d105      	bne.n	800157c <HAL_ADC_ConfigChannel+0x9c>
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0e9b      	lsrs	r3, r3, #26
 8001576:	221f      	movs	r2, #31
 8001578:	4013      	ands	r3, r2
 800157a:	e098      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2201      	movs	r2, #1
 8001582:	4013      	ands	r3, r2
 8001584:	d000      	beq.n	8001588 <HAL_ADC_ConfigChannel+0xa8>
 8001586:	e091      	b.n	80016ac <HAL_ADC_ConfigChannel+0x1cc>
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2202      	movs	r2, #2
 800158e:	4013      	ands	r3, r2
 8001590:	d000      	beq.n	8001594 <HAL_ADC_ConfigChannel+0xb4>
 8001592:	e089      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x1c8>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d000      	beq.n	80015a0 <HAL_ADC_ConfigChannel+0xc0>
 800159e:	e081      	b.n	80016a4 <HAL_ADC_ConfigChannel+0x1c4>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2208      	movs	r2, #8
 80015a6:	4013      	ands	r3, r2
 80015a8:	d000      	beq.n	80015ac <HAL_ADC_ConfigChannel+0xcc>
 80015aa:	e079      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x1c0>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2210      	movs	r2, #16
 80015b2:	4013      	ands	r3, r2
 80015b4:	d000      	beq.n	80015b8 <HAL_ADC_ConfigChannel+0xd8>
 80015b6:	e071      	b.n	800169c <HAL_ADC_ConfigChannel+0x1bc>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2220      	movs	r2, #32
 80015be:	4013      	ands	r3, r2
 80015c0:	d000      	beq.n	80015c4 <HAL_ADC_ConfigChannel+0xe4>
 80015c2:	e069      	b.n	8001698 <HAL_ADC_ConfigChannel+0x1b8>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2240      	movs	r2, #64	@ 0x40
 80015ca:	4013      	ands	r3, r2
 80015cc:	d000      	beq.n	80015d0 <HAL_ADC_ConfigChannel+0xf0>
 80015ce:	e061      	b.n	8001694 <HAL_ADC_ConfigChannel+0x1b4>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2280      	movs	r2, #128	@ 0x80
 80015d6:	4013      	ands	r3, r2
 80015d8:	d000      	beq.n	80015dc <HAL_ADC_ConfigChannel+0xfc>
 80015da:	e059      	b.n	8001690 <HAL_ADC_ConfigChannel+0x1b0>
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	2380      	movs	r3, #128	@ 0x80
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4013      	ands	r3, r2
 80015e6:	d151      	bne.n	800168c <HAL_ADC_ConfigChannel+0x1ac>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d149      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x1a8>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	d141      	bne.n	8001684 <HAL_ADC_ConfigChannel+0x1a4>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	4013      	ands	r3, r2
 800160a:	d139      	bne.n	8001680 <HAL_ADC_ConfigChannel+0x1a0>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	015b      	lsls	r3, r3, #5
 8001614:	4013      	ands	r3, r2
 8001616:	d131      	bne.n	800167c <HAL_ADC_ConfigChannel+0x19c>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	019b      	lsls	r3, r3, #6
 8001620:	4013      	ands	r3, r2
 8001622:	d129      	bne.n	8001678 <HAL_ADC_ConfigChannel+0x198>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	01db      	lsls	r3, r3, #7
 800162c:	4013      	ands	r3, r2
 800162e:	d121      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x194>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	4013      	ands	r3, r2
 800163a:	d119      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x190>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	025b      	lsls	r3, r3, #9
 8001644:	4013      	ands	r3, r2
 8001646:	d111      	bne.n	800166c <HAL_ADC_ConfigChannel+0x18c>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2380      	movs	r3, #128	@ 0x80
 800164e:	029b      	lsls	r3, r3, #10
 8001650:	4013      	ands	r3, r2
 8001652:	d109      	bne.n	8001668 <HAL_ADC_ConfigChannel+0x188>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	@ 0x80
 800165a:	02db      	lsls	r3, r3, #11
 800165c:	4013      	ands	r3, r2
 800165e:	d001      	beq.n	8001664 <HAL_ADC_ConfigChannel+0x184>
 8001660:	2312      	movs	r3, #18
 8001662:	e024      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001664:	2300      	movs	r3, #0
 8001666:	e022      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001668:	2311      	movs	r3, #17
 800166a:	e020      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 800166c:	2310      	movs	r3, #16
 800166e:	e01e      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001670:	230f      	movs	r3, #15
 8001672:	e01c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001674:	230e      	movs	r3, #14
 8001676:	e01a      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001678:	230d      	movs	r3, #13
 800167a:	e018      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 800167c:	230c      	movs	r3, #12
 800167e:	e016      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001680:	230b      	movs	r3, #11
 8001682:	e014      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001684:	230a      	movs	r3, #10
 8001686:	e012      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001688:	2309      	movs	r3, #9
 800168a:	e010      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 800168c:	2308      	movs	r3, #8
 800168e:	e00e      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001690:	2307      	movs	r3, #7
 8001692:	e00c      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001694:	2306      	movs	r3, #6
 8001696:	e00a      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 8001698:	2305      	movs	r3, #5
 800169a:	e008      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 800169c:	2304      	movs	r3, #4
 800169e:	e006      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e004      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_ADC_ConfigChannel+0x1ce>
 80016ac:	2300      	movs	r3, #0
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	6852      	ldr	r2, [r2, #4]
 80016b2:	201f      	movs	r0, #31
 80016b4:	4002      	ands	r2, r0
 80016b6:	4093      	lsls	r3, r2
 80016b8:	000a      	movs	r2, r1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	089b      	lsrs	r3, r3, #2
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d808      	bhi.n	80016e2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	001a      	movs	r2, r3
 80016de:	f7ff fcae 	bl	800103e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	6819      	ldr	r1, [r3, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	001a      	movs	r2, r3
 80016f0:	f7ff fce8 	bl	80010c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db00      	blt.n	80016fe <HAL_ADC_ConfigChannel+0x21e>
 80016fc:	e0bc      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016fe:	4b50      	ldr	r3, [pc, #320]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 8001700:	0018      	movs	r0, r3
 8001702:	f7ff fc5b 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 8001706:	0003      	movs	r3, r0
 8001708:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a4d      	ldr	r2, [pc, #308]	@ (8001844 <HAL_ADC_ConfigChannel+0x364>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d122      	bne.n	800175a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	2380      	movs	r3, #128	@ 0x80
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800171c:	d11d      	bne.n	800175a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	0412      	lsls	r2, r2, #16
 8001724:	4313      	orrs	r3, r2
 8001726:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f7ff fc32 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001730:	4b45      	ldr	r3, [pc, #276]	@ (8001848 <HAL_ADC_ConfigChannel+0x368>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4945      	ldr	r1, [pc, #276]	@ (800184c <HAL_ADC_ConfigChannel+0x36c>)
 8001736:	0018      	movs	r0, r3
 8001738:	f7fe fce4 	bl	8000104 <__udivsi3>
 800173c:	0003      	movs	r3, r0
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	0013      	movs	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	189b      	adds	r3, r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800174a:	e002      	b.n	8001752 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	3b01      	subs	r3, #1
 8001750:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1f9      	bne.n	800174c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001758:	e08e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a3c      	ldr	r2, [pc, #240]	@ (8001850 <HAL_ADC_ConfigChannel+0x370>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10e      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	2380      	movs	r3, #128	@ 0x80
 8001768:	045b      	lsls	r3, r3, #17
 800176a:	4013      	ands	r3, r2
 800176c:	d109      	bne.n	8001782 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	0452      	lsls	r2, r2, #17
 8001774:	4313      	orrs	r3, r2
 8001776:	4a32      	ldr	r2, [pc, #200]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 8001778:	0019      	movs	r1, r3
 800177a:	0010      	movs	r0, r2
 800177c:	f7ff fc0a 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001780:	e07a      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <HAL_ADC_ConfigChannel+0x374>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d000      	beq.n	800178e <HAL_ADC_ConfigChannel+0x2ae>
 800178c:	e074      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	2380      	movs	r3, #128	@ 0x80
 8001792:	03db      	lsls	r3, r3, #15
 8001794:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001796:	d000      	beq.n	800179a <HAL_ADC_ConfigChannel+0x2ba>
 8001798:	e06e      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2280      	movs	r2, #128	@ 0x80
 800179e:	03d2      	lsls	r2, r2, #15
 80017a0:	4313      	orrs	r3, r2
 80017a2:	4a27      	ldr	r2, [pc, #156]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 80017a4:	0019      	movs	r1, r3
 80017a6:	0010      	movs	r0, r2
 80017a8:	f7ff fbf4 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 80017ac:	e064      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691a      	ldr	r2, [r3, #16]
 80017b2:	2380      	movs	r3, #128	@ 0x80
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d004      	beq.n	80017c4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80017be:	4a1f      	ldr	r2, [pc, #124]	@ (800183c <HAL_ADC_ConfigChannel+0x35c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d107      	bne.n	80017d4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0019      	movs	r1, r3
 80017ce:	0010      	movs	r0, r2
 80017d0:	f7ff fc66 	bl	80010a0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	da4d      	bge.n	8001878 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017dc:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 80017de:	0018      	movs	r0, r3
 80017e0:	f7ff fbec 	bl	8000fbc <LL_ADC_GetCommonPathInternalCh>
 80017e4:	0003      	movs	r3, r0
 80017e6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <HAL_ADC_ConfigChannel+0x364>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d108      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4a18      	ldr	r2, [pc, #96]	@ (8001858 <HAL_ADC_ConfigChannel+0x378>)
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a11      	ldr	r2, [pc, #68]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 80017fa:	0019      	movs	r1, r3
 80017fc:	0010      	movs	r0, r2
 80017fe:	f7ff fbc9 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 8001802:	e039      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a11      	ldr	r2, [pc, #68]	@ (8001850 <HAL_ADC_ConfigChannel+0x370>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4a12      	ldr	r2, [pc, #72]	@ (800185c <HAL_ADC_ConfigChannel+0x37c>)
 8001812:	4013      	ands	r3, r2
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f7ff fbbb 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 800181e:	e02b      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0b      	ldr	r2, [pc, #44]	@ (8001854 <HAL_ADC_ConfigChannel+0x374>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d126      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4a0c      	ldr	r2, [pc, #48]	@ (8001860 <HAL_ADC_ConfigChannel+0x380>)
 800182e:	4013      	ands	r3, r2
 8001830:	4a03      	ldr	r2, [pc, #12]	@ (8001840 <HAL_ADC_ConfigChannel+0x360>)
 8001832:	0019      	movs	r1, r3
 8001834:	0010      	movs	r0, r2
 8001836:	f7ff fbad 	bl	8000f94 <LL_ADC_SetCommonPathInternalCh>
 800183a:	e01d      	b.n	8001878 <HAL_ADC_ConfigChannel+0x398>
 800183c:	80000004 	.word	0x80000004
 8001840:	40012708 	.word	0x40012708
 8001844:	b0001000 	.word	0xb0001000
 8001848:	20000000 	.word	0x20000000
 800184c:	00030d40 	.word	0x00030d40
 8001850:	b8004000 	.word	0xb8004000
 8001854:	b4002000 	.word	0xb4002000
 8001858:	ff7fffff 	.word	0xff7fffff
 800185c:	feffffff 	.word	0xfeffffff
 8001860:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001868:	2220      	movs	r2, #32
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001870:	2317      	movs	r3, #23
 8001872:	18fb      	adds	r3, r7, r3
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2254      	movs	r2, #84	@ 0x54
 800187c:	2100      	movs	r1, #0
 800187e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001880:	2317      	movs	r3, #23
 8001882:	18fb      	adds	r3, r7, r3
 8001884:	781b      	ldrb	r3, [r3, #0]
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b006      	add	sp, #24
 800188c:	bd80      	pop	{r7, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)

08001890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	0002      	movs	r2, r0
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800189c:	1dfb      	adds	r3, r7, #7
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018a2:	d809      	bhi.n	80018b8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a4:	1dfb      	adds	r3, r7, #7
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	001a      	movs	r2, r3
 80018aa:	231f      	movs	r3, #31
 80018ac:	401a      	ands	r2, r3
 80018ae:	4b04      	ldr	r3, [pc, #16]	@ (80018c0 <__NVIC_EnableIRQ+0x30>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	4091      	lsls	r1, r2
 80018b4:	000a      	movs	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80018b8:	46c0      	nop			@ (mov r8, r8)
 80018ba:	46bd      	mov	sp, r7
 80018bc:	b002      	add	sp, #8
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	0002      	movs	r2, r0
 80018cc:	6039      	str	r1, [r7, #0]
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80018d8:	d828      	bhi.n	800192c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018da:	4a2f      	ldr	r2, [pc, #188]	@ (8001998 <__NVIC_SetPriority+0xd4>)
 80018dc:	1dfb      	adds	r3, r7, #7
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	33c0      	adds	r3, #192	@ 0xc0
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	589b      	ldr	r3, [r3, r2]
 80018ea:	1dfa      	adds	r2, r7, #7
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	0011      	movs	r1, r2
 80018f0:	2203      	movs	r2, #3
 80018f2:	400a      	ands	r2, r1
 80018f4:	00d2      	lsls	r2, r2, #3
 80018f6:	21ff      	movs	r1, #255	@ 0xff
 80018f8:	4091      	lsls	r1, r2
 80018fa:	000a      	movs	r2, r1
 80018fc:	43d2      	mvns	r2, r2
 80018fe:	401a      	ands	r2, r3
 8001900:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	019b      	lsls	r3, r3, #6
 8001906:	22ff      	movs	r2, #255	@ 0xff
 8001908:	401a      	ands	r2, r3
 800190a:	1dfb      	adds	r3, r7, #7
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	0018      	movs	r0, r3
 8001910:	2303      	movs	r3, #3
 8001912:	4003      	ands	r3, r0
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001918:	481f      	ldr	r0, [pc, #124]	@ (8001998 <__NVIC_SetPriority+0xd4>)
 800191a:	1dfb      	adds	r3, r7, #7
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b25b      	sxtb	r3, r3
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	430a      	orrs	r2, r1
 8001924:	33c0      	adds	r3, #192	@ 0xc0
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800192a:	e031      	b.n	8001990 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800192c:	4a1b      	ldr	r2, [pc, #108]	@ (800199c <__NVIC_SetPriority+0xd8>)
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	0019      	movs	r1, r3
 8001934:	230f      	movs	r3, #15
 8001936:	400b      	ands	r3, r1
 8001938:	3b08      	subs	r3, #8
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3306      	adds	r3, #6
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	3304      	adds	r3, #4
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	1dfa      	adds	r2, r7, #7
 8001948:	7812      	ldrb	r2, [r2, #0]
 800194a:	0011      	movs	r1, r2
 800194c:	2203      	movs	r2, #3
 800194e:	400a      	ands	r2, r1
 8001950:	00d2      	lsls	r2, r2, #3
 8001952:	21ff      	movs	r1, #255	@ 0xff
 8001954:	4091      	lsls	r1, r2
 8001956:	000a      	movs	r2, r1
 8001958:	43d2      	mvns	r2, r2
 800195a:	401a      	ands	r2, r3
 800195c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	019b      	lsls	r3, r3, #6
 8001962:	22ff      	movs	r2, #255	@ 0xff
 8001964:	401a      	ands	r2, r3
 8001966:	1dfb      	adds	r3, r7, #7
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	0018      	movs	r0, r3
 800196c:	2303      	movs	r3, #3
 800196e:	4003      	ands	r3, r0
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001974:	4809      	ldr	r0, [pc, #36]	@ (800199c <__NVIC_SetPriority+0xd8>)
 8001976:	1dfb      	adds	r3, r7, #7
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	001c      	movs	r4, r3
 800197c:	230f      	movs	r3, #15
 800197e:	4023      	ands	r3, r4
 8001980:	3b08      	subs	r3, #8
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	430a      	orrs	r2, r1
 8001986:	3306      	adds	r3, #6
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	18c3      	adds	r3, r0, r3
 800198c:	3304      	adds	r3, #4
 800198e:	601a      	str	r2, [r3, #0]
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b003      	add	sp, #12
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	1e5a      	subs	r2, r3, #1
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	045b      	lsls	r3, r3, #17
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d301      	bcc.n	80019b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b4:	2301      	movs	r3, #1
 80019b6:	e010      	b.n	80019da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b8:	4b0a      	ldr	r3, [pc, #40]	@ (80019e4 <SysTick_Config+0x44>)
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	3a01      	subs	r2, #1
 80019be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019c0:	2301      	movs	r3, #1
 80019c2:	425b      	negs	r3, r3
 80019c4:	2103      	movs	r1, #3
 80019c6:	0018      	movs	r0, r3
 80019c8:	f7ff ff7c 	bl	80018c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019cc:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <SysTick_Config+0x44>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019d2:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <SysTick_Config+0x44>)
 80019d4:	2207      	movs	r2, #7
 80019d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d8:	2300      	movs	r3, #0
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	b002      	add	sp, #8
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	e000e010 	.word	0xe000e010

080019e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	210f      	movs	r1, #15
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	1c02      	adds	r2, r0, #0
 80019f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	187b      	adds	r3, r7, r1
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	0011      	movs	r1, r2
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7ff ff5d 	bl	80018c4 <__NVIC_SetPriority>
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b004      	add	sp, #16
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	0002      	movs	r2, r0
 8001a1a:	1dfb      	adds	r3, r7, #7
 8001a1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1e:	1dfb      	adds	r3, r7, #7
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff ff33 	bl	8001890 <__NVIC_EnableIRQ>
}
 8001a2a:	46c0      	nop			@ (mov r8, r8)
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff ffaf 	bl	80019a0 <SysTick_Config>
 8001a42:	0003      	movs	r3, r0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e077      	b.n	8001b4e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a3d      	ldr	r2, [pc, #244]	@ (8001b58 <HAL_DMA_Init+0x10c>)
 8001a64:	4694      	mov	ip, r2
 8001a66:	4463      	add	r3, ip
 8001a68:	2114      	movs	r1, #20
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f7fe fb4a 	bl	8000104 <__udivsi3>
 8001a70:	0003      	movs	r3, r0
 8001a72:	009a      	lsls	r2, r3, #2
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2225      	movs	r2, #37	@ 0x25
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4934      	ldr	r1, [pc, #208]	@ (8001b5c <HAL_DMA_Init+0x110>)
 8001a8c:	400a      	ands	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6819      	ldr	r1, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f000 f8fb 	bl	8001cc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	2380      	movs	r3, #128	@ 0x80
 8001ad4:	01db      	lsls	r3, r3, #7
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d102      	bne.n	8001ae0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685a      	ldr	r2, [r3, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae8:	213f      	movs	r1, #63	@ 0x3f
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001af6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d011      	beq.n	8001b24 <HAL_DMA_Init+0xd8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d80d      	bhi.n	8001b24 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 f906 	bl	8001d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	e008      	b.n	8001b36 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2225      	movs	r2, #37	@ 0x25
 8001b40:	2101      	movs	r1, #1
 8001b42:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2224      	movs	r2, #36	@ 0x24
 8001b48:	2100      	movs	r1, #0
 8001b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			@ (mov r8, r8)
 8001b58:	bffdfff8 	.word	0xbffdfff8
 8001b5c:	ffff800f 	.word	0xffff800f

08001b60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001b68:	4b55      	ldr	r3, [pc, #340]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	221c      	movs	r2, #28
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	2204      	movs	r2, #4
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	d027      	beq.n	8001bda <HAL_DMA_IRQHandler+0x7a>
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d023      	beq.n	8001bda <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2220      	movs	r2, #32
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d107      	bne.n	8001bae <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2104      	movs	r1, #4
 8001baa:	438a      	bics	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001bae:	4b44      	ldr	r3, [pc, #272]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	221c      	movs	r2, #28
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2204      	movs	r2, #4
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	4b40      	ldr	r3, [pc, #256]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d100      	bne.n	8001bce <HAL_DMA_IRQHandler+0x6e>
 8001bcc:	e073      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	0010      	movs	r0, r2
 8001bd6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001bd8:	e06d      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bde:	221c      	movs	r2, #28
 8001be0:	4013      	ands	r3, r2
 8001be2:	2202      	movs	r2, #2
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	d02e      	beq.n	8001c4c <HAL_DMA_IRQHandler+0xec>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	d02a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2220      	movs	r2, #32
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d10b      	bne.n	8001c1a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	438a      	bics	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2225      	movs	r2, #37	@ 0x25
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001c1a:	4b29      	ldr	r3, [pc, #164]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	221c      	movs	r2, #28
 8001c24:	4013      	ands	r3, r2
 8001c26:	2202      	movs	r2, #2
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	4b25      	ldr	r3, [pc, #148]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	@ 0x24
 8001c34:	2100      	movs	r1, #0
 8001c36:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d03a      	beq.n	8001cb6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	0010      	movs	r0, r2
 8001c48:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001c4a:	e034      	b.n	8001cb6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	221c      	movs	r2, #28
 8001c52:	4013      	ands	r3, r2
 8001c54:	2208      	movs	r2, #8
 8001c56:	409a      	lsls	r2, r3
 8001c58:	0013      	movs	r3, r2
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d02b      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x158>
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2208      	movs	r2, #8
 8001c64:	4013      	ands	r3, r2
 8001c66:	d027      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	210e      	movs	r1, #14
 8001c74:	438a      	bics	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001c7a:	6859      	ldr	r1, [r3, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	221c      	movs	r2, #28
 8001c82:	4013      	ands	r3, r2
 8001c84:	2201      	movs	r2, #1
 8001c86:	409a      	lsls	r2, r3
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_DMA_IRQHandler+0x160>)
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2225      	movs	r2, #37	@ 0x25
 8001c98:	2101      	movs	r1, #1
 8001c9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2224      	movs	r2, #36	@ 0x24
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	0010      	movs	r0, r2
 8001cb4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	46c0      	nop			@ (mov r8, r8)
}
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b004      	add	sp, #16
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020000 	.word	0x40020000

08001cc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	4a10      	ldr	r2, [pc, #64]	@ (8001d14 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001cd4:	4694      	mov	ip, r2
 8001cd6:	4463      	add	r3, ip
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	001a      	movs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	23ff      	movs	r3, #255	@ 0xff
 8001ce8:	4013      	ands	r3, r2
 8001cea:	3b08      	subs	r3, #8
 8001cec:	2114      	movs	r1, #20
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7fe fa08 	bl	8000104 <__udivsi3>
 8001cf4:	0003      	movs	r3, r0
 8001cf6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	@ (8001d18 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001cfc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	221f      	movs	r2, #31
 8001d02:	4013      	ands	r3, r2
 8001d04:	2201      	movs	r2, #1
 8001d06:	409a      	lsls	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	10008200 	.word	0x10008200
 8001d18:	40020880 	.word	0x40020880

08001d1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	223f      	movs	r2, #63	@ 0x3f
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	4a0a      	ldr	r2, [pc, #40]	@ (8001d5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d32:	4694      	mov	ip, r2
 8001d34:	4463      	add	r3, ip
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	001a      	movs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	409a      	lsls	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001d54:	46c0      	nop			@ (mov r8, r8)
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b004      	add	sp, #16
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	1000823f 	.word	0x1000823f
 8001d60:	40020940 	.word	0x40020940

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	e147      	b.n	8002004 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2101      	movs	r1, #1
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	4091      	lsls	r1, r2
 8001d7e:	000a      	movs	r2, r1
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d100      	bne.n	8001d8c <HAL_GPIO_Init+0x28>
 8001d8a:	e138      	b.n	8001ffe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d005      	beq.n	8001da4 <HAL_GPIO_Init+0x40>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d130      	bne.n	8001e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	2203      	movs	r2, #3
 8001db0:	409a      	lsls	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	409a      	lsls	r2, r3
 8001dc6:	0013      	movs	r3, r2
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dda:	2201      	movs	r2, #1
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
 8001de0:	0013      	movs	r3, r2
 8001de2:	43da      	mvns	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	091b      	lsrs	r3, r3, #4
 8001df0:	2201      	movs	r2, #1
 8001df2:	401a      	ands	r2, r3
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d017      	beq.n	8001e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	43da      	mvns	r2, r3
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	409a      	lsls	r2, r3
 8001e34:	0013      	movs	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2203      	movs	r2, #3
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d123      	bne.n	8001e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	08da      	lsrs	r2, r3, #3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3208      	adds	r2, #8
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	58d3      	ldr	r3, [r2, r3]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4013      	ands	r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2107      	movs	r1, #7
 8001e7a:	400b      	ands	r3, r1
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	08da      	lsrs	r2, r3, #3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3208      	adds	r2, #8
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	6939      	ldr	r1, [r7, #16]
 8001e94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	401a      	ands	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	23c0      	movs	r3, #192	@ 0xc0
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_GPIO_Init+0x174>
 8001ed6:	e092      	b.n	8001ffe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ed8:	4a50      	ldr	r2, [pc, #320]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3318      	adds	r3, #24
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	589b      	ldr	r3, [r3, r2]
 8001ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	4013      	ands	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	220f      	movs	r2, #15
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	43da      	mvns	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	23a0      	movs	r3, #160	@ 0xa0
 8001f00:	05db      	lsls	r3, r3, #23
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x1ca>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a45      	ldr	r2, [pc, #276]	@ (8002020 <HAL_GPIO_Init+0x2bc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x1c6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a44      	ldr	r2, [pc, #272]	@ (8002024 <HAL_GPIO_Init+0x2c0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x1c2>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a43      	ldr	r2, [pc, #268]	@ (8002028 <HAL_GPIO_Init+0x2c4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x1be>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e006      	b.n	8001f30 <HAL_GPIO_Init+0x1cc>
 8001f22:	2305      	movs	r3, #5
 8001f24:	e004      	b.n	8001f30 <HAL_GPIO_Init+0x1cc>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e002      	b.n	8001f30 <HAL_GPIO_Init+0x1cc>
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x1cc>
 8001f2e:	2300      	movs	r3, #0
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	2103      	movs	r1, #3
 8001f34:	400a      	ands	r2, r1
 8001f36:	00d2      	lsls	r2, r2, #3
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001f40:	4936      	ldr	r1, [pc, #216]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	089b      	lsrs	r3, r3, #2
 8001f46:	3318      	adds	r3, #24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f4e:	4b33      	ldr	r3, [pc, #204]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	035b      	lsls	r3, r3, #13
 8001f66:	4013      	ands	r3, r2
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f72:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001f78:	4b28      	ldr	r3, [pc, #160]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	039b      	lsls	r3, r3, #14
 8001f90:	4013      	ands	r3, r2
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001fa4:	2384      	movs	r3, #132	@ 0x84
 8001fa6:	58d3      	ldr	r3, [r2, r3]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43da      	mvns	r2, r3
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	2380      	movs	r3, #128	@ 0x80
 8001fba:	029b      	lsls	r3, r3, #10
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fc8:	4914      	ldr	r1, [pc, #80]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001fca:	2284      	movs	r2, #132	@ 0x84
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001fd0:	4a12      	ldr	r2, [pc, #72]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	58d3      	ldr	r3, [r2, r3]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	2380      	movs	r3, #128	@ 0x80
 8001fe8:	025b      	lsls	r3, r3, #9
 8001fea:	4013      	ands	r3, r2
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ff6:	4909      	ldr	r1, [pc, #36]	@ (800201c <HAL_GPIO_Init+0x2b8>)
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	3301      	adds	r3, #1
 8002002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	40da      	lsrs	r2, r3
 800200c:	1e13      	subs	r3, r2, #0
 800200e:	d000      	beq.n	8002012 <HAL_GPIO_Init+0x2ae>
 8002010:	e6b0      	b.n	8001d74 <HAL_GPIO_Init+0x10>
  }
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46c0      	nop			@ (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b006      	add	sp, #24
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021800 	.word	0x40021800
 8002020:	50000400 	.word	0x50000400
 8002024:	50000800 	.word	0x50000800
 8002028:	50000c00 	.word	0x50000c00

0800202c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	0008      	movs	r0, r1
 8002036:	0011      	movs	r1, r2
 8002038:	1cbb      	adds	r3, r7, #2
 800203a:	1c02      	adds	r2, r0, #0
 800203c:	801a      	strh	r2, [r3, #0]
 800203e:	1c7b      	adds	r3, r7, #1
 8002040:	1c0a      	adds	r2, r1, #0
 8002042:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002044:	1c7b      	adds	r3, r7, #1
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d004      	beq.n	8002056 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800204c:	1cbb      	adds	r3, r7, #2
 800204e:	881a      	ldrh	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002054:	e003      	b.n	800205e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002056:	1cbb      	adds	r3, r7, #2
 8002058:	881a      	ldrh	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800205e:	46c0      	nop			@ (mov r8, r8)
 8002060:	46bd      	mov	sp, r7
 8002062:	b002      	add	sp, #8
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002076:	4013      	ands	r3, r2
 8002078:	0019      	movs	r1, r3
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	430a      	orrs	r2, r1
 8002080:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d11f      	bne.n	80020cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	0013      	movs	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	189b      	adds	r3, r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4912      	ldr	r1, [pc, #72]	@ (80020e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800209a:	0018      	movs	r0, r3
 800209c:	f7fe f832 	bl	8000104 <__udivsi3>
 80020a0:	0003      	movs	r3, r0
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020a6:	e008      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	e001      	b.n	80020ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e009      	b.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	401a      	ands	r2, r3
 80020c4:	2380      	movs	r3, #128	@ 0x80
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d0ed      	beq.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b004      	add	sp, #16
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	40007000 	.word	0x40007000
 80020dc:	fffff9ff 	.word	0xfffff9ff
 80020e0:	20000000 	.word	0x20000000
 80020e4:	000f4240 	.word	0x000f4240

080020e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	23e0      	movs	r3, #224	@ 0xe0
 80020f2:	01db      	lsls	r3, r3, #7
 80020f4:	4013      	ands	r3, r2
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e2fe      	b.n	8002710 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2201      	movs	r2, #1
 8002118:	4013      	ands	r3, r2
 800211a:	d100      	bne.n	800211e <HAL_RCC_OscConfig+0x1e>
 800211c:	e07c      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4bc3      	ldr	r3, [pc, #780]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2238      	movs	r2, #56	@ 0x38
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	4bc0      	ldr	r3, [pc, #768]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2203      	movs	r2, #3
 800212e:	4013      	ands	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b10      	cmp	r3, #16
 8002136:	d102      	bne.n	800213e <HAL_RCC_OscConfig+0x3e>
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b03      	cmp	r3, #3
 800213c:	d002      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4bb9      	ldr	r3, [pc, #740]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	029b      	lsls	r3, r3, #10
 800214c:	4013      	ands	r3, r2
 800214e:	d062      	beq.n	8002216 <HAL_RCC_OscConfig+0x116>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d15e      	bne.n	8002216 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e2d9      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	2380      	movs	r3, #128	@ 0x80
 8002162:	025b      	lsls	r3, r3, #9
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x78>
 8002168:	4bb0      	ldr	r3, [pc, #704]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4baf      	ldr	r3, [pc, #700]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800216e:	2180      	movs	r1, #128	@ 0x80
 8002170:	0249      	lsls	r1, r1, #9
 8002172:	430a      	orrs	r2, r1
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	e020      	b.n	80021ba <HAL_RCC_OscConfig+0xba>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	23a0      	movs	r3, #160	@ 0xa0
 800217e:	02db      	lsls	r3, r3, #11
 8002180:	429a      	cmp	r2, r3
 8002182:	d10e      	bne.n	80021a2 <HAL_RCC_OscConfig+0xa2>
 8002184:	4ba9      	ldr	r3, [pc, #676]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4ba8      	ldr	r3, [pc, #672]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800218a:	2180      	movs	r1, #128	@ 0x80
 800218c:	02c9      	lsls	r1, r1, #11
 800218e:	430a      	orrs	r2, r1
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4ba6      	ldr	r3, [pc, #664]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4ba5      	ldr	r3, [pc, #660]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002198:	2180      	movs	r1, #128	@ 0x80
 800219a:	0249      	lsls	r1, r1, #9
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0xba>
 80021a2:	4ba2      	ldr	r3, [pc, #648]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	4ba1      	ldr	r3, [pc, #644]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80021a8:	49a1      	ldr	r1, [pc, #644]	@ (8002430 <HAL_RCC_OscConfig+0x330>)
 80021aa:	400a      	ands	r2, r1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	4b9f      	ldr	r3, [pc, #636]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b9e      	ldr	r3, [pc, #632]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80021b4:	499f      	ldr	r1, [pc, #636]	@ (8002434 <HAL_RCC_OscConfig+0x334>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d014      	beq.n	80021ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7fe fedd 	bl	8000f80 <HAL_GetTick>
 80021c6:	0003      	movs	r3, r0
 80021c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe fed8 	bl	8000f80 <HAL_GetTick>
 80021d0:	0002      	movs	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	@ 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e298      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021de:	4b93      	ldr	r3, [pc, #588]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	029b      	lsls	r3, r3, #10
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0xcc>
 80021ea:	e015      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fec8 	bl	8000f80 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f6:	f7fe fec3 	bl	8000f80 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	@ 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e283      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002208:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	2380      	movs	r3, #128	@ 0x80
 800220e:	029b      	lsls	r3, r3, #10
 8002210:	4013      	ands	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0xf6>
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002216:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d100      	bne.n	8002224 <HAL_RCC_OscConfig+0x124>
 8002222:	e099      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002224:	4b81      	ldr	r3, [pc, #516]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2238      	movs	r2, #56	@ 0x38
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222e:	4b7f      	ldr	r3, [pc, #508]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2203      	movs	r2, #3
 8002234:	4013      	ands	r3, r2
 8002236:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	2b10      	cmp	r3, #16
 800223c:	d102      	bne.n	8002244 <HAL_RCC_OscConfig+0x144>
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b02      	cmp	r3, #2
 8002242:	d002      	beq.n	800224a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d135      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224a:	4b78      	ldr	r3, [pc, #480]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4013      	ands	r3, r2
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x162>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e256      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b72      	ldr	r3, [pc, #456]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a74      	ldr	r2, [pc, #464]	@ (8002438 <HAL_RCC_OscConfig+0x338>)
 8002268:	4013      	ands	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	4b6e      	ldr	r3, [pc, #440]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d112      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800227e:	4b6b      	ldr	r3, [pc, #428]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6e      	ldr	r2, [pc, #440]	@ (800243c <HAL_RCC_OscConfig+0x33c>)
 8002284:	4013      	ands	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	4b67      	ldr	r3, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800228e:	430a      	orrs	r2, r1
 8002290:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002292:	4b66      	ldr	r3, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0adb      	lsrs	r3, r3, #11
 8002298:	2207      	movs	r2, #7
 800229a:	4013      	ands	r3, r2
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_RCC_OscConfig+0x340>)
 800229e:	40da      	lsrs	r2, r3
 80022a0:	4b68      	ldr	r3, [pc, #416]	@ (8002444 <HAL_RCC_OscConfig+0x344>)
 80022a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022a4:	4b68      	ldr	r3, [pc, #416]	@ (8002448 <HAL_RCC_OscConfig+0x348>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7fe fe0d 	bl	8000ec8 <HAL_InitTick>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d051      	beq.n	8002356 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e22c      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d030      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022be:	4b5b      	ldr	r3, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5e      	ldr	r2, [pc, #376]	@ (800243c <HAL_RCC_OscConfig+0x33c>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	0019      	movs	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691a      	ldr	r2, [r3, #16]
 80022cc:	4b57      	ldr	r3, [pc, #348]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80022ce:	430a      	orrs	r2, r1
 80022d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022d2:	4b56      	ldr	r3, [pc, #344]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	4b55      	ldr	r3, [pc, #340]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80022d8:	2180      	movs	r1, #128	@ 0x80
 80022da:	0049      	lsls	r1, r1, #1
 80022dc:	430a      	orrs	r2, r1
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fe4e 	bl	8000f80 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ea:	f7fe fe49 	bl	8000f80 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e209      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	2380      	movs	r3, #128	@ 0x80
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	4013      	ands	r3, r2
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002308:	4b48      	ldr	r3, [pc, #288]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	@ (8002438 <HAL_RCC_OscConfig+0x338>)
 800230e:	4013      	ands	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	021a      	lsls	r2, r3, #8
 8002318:	4b44      	ldr	r3, [pc, #272]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002320:	4b42      	ldr	r3, [pc, #264]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b41      	ldr	r3, [pc, #260]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002326:	4949      	ldr	r1, [pc, #292]	@ (800244c <HAL_RCC_OscConfig+0x34c>)
 8002328:	400a      	ands	r2, r1
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe fe28 	bl	8000f80 <HAL_GetTick>
 8002330:	0003      	movs	r3, r0
 8002332:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002336:	f7fe fe23 	bl	8000f80 <HAL_GetTick>
 800233a:	0002      	movs	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1e3      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002348:	4b38      	ldr	r3, [pc, #224]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4013      	ands	r3, r2
 8002352:	d1f0      	bne.n	8002336 <HAL_RCC_OscConfig+0x236>
 8002354:	e000      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002356:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2208      	movs	r2, #8
 800235e:	4013      	ands	r3, r2
 8002360:	d047      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002362:	4b32      	ldr	r3, [pc, #200]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	2238      	movs	r2, #56	@ 0x38
 8002368:	4013      	ands	r3, r2
 800236a:	2b18      	cmp	r3, #24
 800236c:	d10a      	bne.n	8002384 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800236e:	4b2f      	ldr	r3, [pc, #188]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d03c      	beq.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d138      	bne.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e1c5      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d019      	beq.n	80023c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800238c:	4b27      	ldr	r3, [pc, #156]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 800238e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002390:	4b26      	ldr	r3, [pc, #152]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002392:	2101      	movs	r1, #1
 8002394:	430a      	orrs	r2, r1
 8002396:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7fe fdf2 	bl	8000f80 <HAL_GetTick>
 800239c:	0003      	movs	r3, r0
 800239e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7fe fded 	bl	8000f80 <HAL_GetTick>
 80023a6:	0002      	movs	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1ad      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80023b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023b8:	2202      	movs	r2, #2
 80023ba:	4013      	ands	r3, r2
 80023bc:	d0f1      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2a2>
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80023c0:	4b1a      	ldr	r3, [pc, #104]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80023c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	438a      	bics	r2, r1
 80023ca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fdd8 	bl	8000f80 <HAL_GetTick>
 80023d0:	0003      	movs	r3, r0
 80023d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d6:	f7fe fdd3 	bl	8000f80 <HAL_GetTick>
 80023da:	0002      	movs	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e193      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e8:	4b10      	ldr	r3, [pc, #64]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 80023ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ec:	2202      	movs	r2, #2
 80023ee:	4013      	ands	r3, r2
 80023f0:	d1f1      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2204      	movs	r2, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	d100      	bne.n	80023fe <HAL_RCC_OscConfig+0x2fe>
 80023fc:	e0c6      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023fe:	231f      	movs	r3, #31
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002406:	4b09      	ldr	r3, [pc, #36]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2238      	movs	r2, #56	@ 0x38
 800240c:	4013      	ands	r3, r2
 800240e:	2b20      	cmp	r3, #32
 8002410:	d11e      	bne.n	8002450 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_OscConfig+0x32c>)
 8002414:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002416:	2202      	movs	r2, #2
 8002418:	4013      	ands	r3, r2
 800241a:	d100      	bne.n	800241e <HAL_RCC_OscConfig+0x31e>
 800241c:	e0b6      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d000      	beq.n	8002428 <HAL_RCC_OscConfig+0x328>
 8002426:	e0b1      	b.n	800258c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e171      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
 800242c:	40021000 	.word	0x40021000
 8002430:	fffeffff 	.word	0xfffeffff
 8002434:	fffbffff 	.word	0xfffbffff
 8002438:	ffff80ff 	.word	0xffff80ff
 800243c:	ffffc7ff 	.word	0xffffc7ff
 8002440:	00f42400 	.word	0x00f42400
 8002444:	20000000 	.word	0x20000000
 8002448:	20000004 	.word	0x20000004
 800244c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002450:	4bb1      	ldr	r3, [pc, #708]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002452:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	055b      	lsls	r3, r3, #21
 8002458:	4013      	ands	r3, r2
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
 800245c:	2301      	movs	r3, #1
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x362>
 8002460:	2300      	movs	r3, #0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d011      	beq.n	800248a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4bac      	ldr	r3, [pc, #688]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002468:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800246a:	4bab      	ldr	r3, [pc, #684]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	0549      	lsls	r1, r1, #21
 8002470:	430a      	orrs	r2, r1
 8002472:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002474:	4ba8      	ldr	r3, [pc, #672]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002476:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002478:	2380      	movs	r3, #128	@ 0x80
 800247a:	055b      	lsls	r3, r3, #21
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002482:	231f      	movs	r3, #31
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248a:	4ba4      	ldr	r3, [pc, #656]	@ (800271c <HAL_RCC_OscConfig+0x61c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4013      	ands	r3, r2
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002496:	4ba1      	ldr	r3, [pc, #644]	@ (800271c <HAL_RCC_OscConfig+0x61c>)
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	4ba0      	ldr	r3, [pc, #640]	@ (800271c <HAL_RCC_OscConfig+0x61c>)
 800249c:	2180      	movs	r1, #128	@ 0x80
 800249e:	0049      	lsls	r1, r1, #1
 80024a0:	430a      	orrs	r2, r1
 80024a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd6c 	bl	8000f80 <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe fd67 	bl	8000f80 <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e127      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b96      	ldr	r3, [pc, #600]	@ (800271c <HAL_RCC_OscConfig+0x61c>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	2380      	movs	r3, #128	@ 0x80
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3e2>
 80024d4:	4b90      	ldr	r3, [pc, #576]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024da:	2101      	movs	r1, #1
 80024dc:	430a      	orrs	r2, r1
 80024de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x404>
 80024ea:	4b8b      	ldr	r3, [pc, #556]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024ee:	4b8a      	ldr	r3, [pc, #552]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024f0:	2104      	movs	r1, #4
 80024f2:	430a      	orrs	r2, r1
 80024f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024f6:	4b88      	ldr	r3, [pc, #544]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024fa:	4b87      	ldr	r3, [pc, #540]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	430a      	orrs	r2, r1
 8002500:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002502:	e00b      	b.n	800251c <HAL_RCC_OscConfig+0x41c>
 8002504:	4b84      	ldr	r3, [pc, #528]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002506:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002508:	4b83      	ldr	r3, [pc, #524]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800250a:	2101      	movs	r1, #1
 800250c:	438a      	bics	r2, r1
 800250e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002510:	4b81      	ldr	r3, [pc, #516]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002512:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002514:	4b80      	ldr	r3, [pc, #512]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002516:	2104      	movs	r1, #4
 8002518:	438a      	bics	r2, r1
 800251a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d014      	beq.n	800254e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fd2c 	bl	8000f80 <HAL_GetTick>
 8002528:	0003      	movs	r3, r0
 800252a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252c:	e009      	b.n	8002542 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fd27 	bl	8000f80 <HAL_GetTick>
 8002532:	0002      	movs	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	4a79      	ldr	r2, [pc, #484]	@ (8002720 <HAL_RCC_OscConfig+0x620>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e0e6      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b75      	ldr	r3, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002546:	2202      	movs	r2, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x42e>
 800254c:	e013      	b.n	8002576 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe fd17 	bl	8000f80 <HAL_GetTick>
 8002552:	0003      	movs	r3, r0
 8002554:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe fd12 	bl	8000f80 <HAL_GetTick>
 800255c:	0002      	movs	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	4a6f      	ldr	r2, [pc, #444]	@ (8002720 <HAL_RCC_OscConfig+0x620>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0d1      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256c:	4b6a      	ldr	r3, [pc, #424]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800256e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002570:	2202      	movs	r2, #2
 8002572:	4013      	ands	r3, r2
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d105      	bne.n	800258c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002580:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002584:	4b64      	ldr	r3, [pc, #400]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002586:	4967      	ldr	r1, [pc, #412]	@ (8002724 <HAL_RCC_OscConfig+0x624>)
 8002588:	400a      	ands	r2, r1
 800258a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	69db      	ldr	r3, [r3, #28]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d100      	bne.n	8002596 <HAL_RCC_OscConfig+0x496>
 8002594:	e0bb      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002596:	4b60      	ldr	r3, [pc, #384]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2238      	movs	r2, #56	@ 0x38
 800259c:	4013      	ands	r3, r2
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d100      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4a4>
 80025a2:	e07b      	b.n	800269c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d156      	bne.n	800265a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b5a      	ldr	r3, [pc, #360]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4b59      	ldr	r3, [pc, #356]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025b2:	495d      	ldr	r1, [pc, #372]	@ (8002728 <HAL_RCC_OscConfig+0x628>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fce2 	bl	8000f80 <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fcdd 	bl	8000f80 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e09d      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	4b50      	ldr	r3, [pc, #320]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	@ 0x80
 80025da:	049b      	lsls	r3, r3, #18
 80025dc:	4013      	ands	r3, r2
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a51      	ldr	r2, [pc, #324]	@ (800272c <HAL_RCC_OscConfig+0x62c>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1a      	ldr	r2, [r3, #32]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800260c:	431a      	orrs	r2, r3
 800260e:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002610:	430a      	orrs	r2, r1
 8002612:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002614:	4b40      	ldr	r3, [pc, #256]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	4b3f      	ldr	r3, [pc, #252]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0449      	lsls	r1, r1, #17
 800261e:	430a      	orrs	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002622:	4b3d      	ldr	r3, [pc, #244]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	4b3c      	ldr	r3, [pc, #240]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002628:	2180      	movs	r1, #128	@ 0x80
 800262a:	0549      	lsls	r1, r1, #21
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fca6 	bl	8000f80 <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fca1 	bl	8000f80 <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e061      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	049b      	lsls	r3, r3, #18
 8002654:	4013      	ands	r3, r2
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x53a>
 8002658:	e059      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b2f      	ldr	r3, [pc, #188]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	4b2e      	ldr	r3, [pc, #184]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002660:	4931      	ldr	r1, [pc, #196]	@ (8002728 <HAL_RCC_OscConfig+0x628>)
 8002662:	400a      	ands	r2, r1
 8002664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002666:	f7fe fc8b 	bl	8000f80 <HAL_GetTick>
 800266a:	0003      	movs	r3, r0
 800266c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fc86 	bl	8000f80 <HAL_GetTick>
 8002674:	0002      	movs	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e046      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002682:	4b25      	ldr	r3, [pc, #148]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	049b      	lsls	r3, r3, #18
 800268a:	4013      	ands	r3, r2
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 8002694:	4926      	ldr	r1, [pc, #152]	@ (8002730 <HAL_RCC_OscConfig+0x630>)
 8002696:	400a      	ands	r2, r1
 8002698:	60da      	str	r2, [r3, #12]
 800269a:	e038      	b.n	800270e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e033      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80026a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002718 <HAL_RCC_OscConfig+0x618>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2203      	movs	r2, #3
 80026b2:	401a      	ands	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d126      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2270      	movs	r2, #112	@ 0x70
 80026c0:	401a      	ands	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11f      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	23fe      	movs	r3, #254	@ 0xfe
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	401a      	ands	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d8:	429a      	cmp	r2, r3
 80026da:	d116      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	23f8      	movs	r3, #248	@ 0xf8
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d10e      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	23e0      	movs	r3, #224	@ 0xe0
 80026f0:	051b      	lsls	r3, r3, #20
 80026f2:	401a      	ands	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	0f5b      	lsrs	r3, r3, #29
 8002700:	075a      	lsls	r2, r3, #29
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d001      	beq.n	800270e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	0018      	movs	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	b008      	add	sp, #32
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	00001388 	.word	0x00001388
 8002724:	efffffff 	.word	0xefffffff
 8002728:	feffffff 	.word	0xfeffffff
 800272c:	11c1808c 	.word	0x11c1808c
 8002730:	eefefffc 	.word	0xeefefffc

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0e9      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	4013      	ands	r3, r2
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d91e      	bls.n	8002794 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b73      	ldr	r3, [pc, #460]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2207      	movs	r2, #7
 800275c:	4393      	bics	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	4b70      	ldr	r3, [pc, #448]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002768:	f7fe fc0a 	bl	8000f80 <HAL_GetTick>
 800276c:	0003      	movs	r3, r0
 800276e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002770:	e009      	b.n	8002786 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002772:	f7fe fc05 	bl	8000f80 <HAL_GetTick>
 8002776:	0002      	movs	r2, r0
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	4a6a      	ldr	r2, [pc, #424]	@ (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0ca      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002786:	4b67      	ldr	r3, [pc, #412]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d1ee      	bne.n	8002772 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2202      	movs	r2, #2
 800279a:	4013      	ands	r3, r2
 800279c:	d015      	beq.n	80027ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2204      	movs	r2, #4
 80027a4:	4013      	ands	r3, r2
 80027a6:	d006      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027a8:	4b60      	ldr	r3, [pc, #384]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	4b5f      	ldr	r3, [pc, #380]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027ae:	21e0      	movs	r1, #224	@ 0xe0
 80027b0:	01c9      	lsls	r1, r1, #7
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b6:	4b5d      	ldr	r3, [pc, #372]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002930 <HAL_RCC_ClockConfig+0x1fc>)
 80027bc:	4013      	ands	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027c6:	430a      	orrs	r2, r1
 80027c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2201      	movs	r2, #1
 80027d0:	4013      	ands	r3, r2
 80027d2:	d057      	beq.n	8002884 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d107      	bne.n	80027ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	029b      	lsls	r3, r3, #10
 80027e4:	4013      	ands	r3, r2
 80027e6:	d12b      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e097      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f4:	4b4d      	ldr	r3, [pc, #308]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	049b      	lsls	r3, r3, #18
 80027fc:	4013      	ands	r3, r2
 80027fe:	d11f      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e08b      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d107      	bne.n	800281c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800280c:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4013      	ands	r3, r2
 8002816:	d113      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e07f      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d106      	bne.n	8002832 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002824:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002828:	2202      	movs	r2, #2
 800282a:	4013      	ands	r3, r2
 800282c:	d108      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e074      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002832:	4b3e      	ldr	r3, [pc, #248]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e06d      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002840:	4b3a      	ldr	r3, [pc, #232]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	2207      	movs	r2, #7
 8002846:	4393      	bics	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4b37      	ldr	r3, [pc, #220]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002850:	430a      	orrs	r2, r1
 8002852:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002854:	f7fe fb94 	bl	8000f80 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285c:	e009      	b.n	8002872 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800285e:	f7fe fb8f 	bl	8000f80 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a2f      	ldr	r2, [pc, #188]	@ (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e054      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	4b2e      	ldr	r3, [pc, #184]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2238      	movs	r2, #56	@ 0x38
 8002878:	401a      	ands	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	429a      	cmp	r2, r3
 8002882:	d1ec      	bne.n	800285e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2207      	movs	r2, #7
 800288a:	4013      	ands	r3, r2
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d21e      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2207      	movs	r2, #7
 8002898:	4393      	bics	r3, r2
 800289a:	0019      	movs	r1, r3
 800289c:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fb6c 	bl	8000f80 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028ac:	e009      	b.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ae:	f7fe fb67 	bl	8000f80 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e02c      	b.n	800291c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028c2:	4b18      	ldr	r3, [pc, #96]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2207      	movs	r2, #7
 80028c8:	4013      	ands	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1ee      	bne.n	80028ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	4013      	ands	r3, r2
 80028d8:	d009      	beq.n	80028ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80028da:	4b14      	ldr	r3, [pc, #80]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4a15      	ldr	r2, [pc, #84]	@ (8002934 <HAL_RCC_ClockConfig+0x200>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68da      	ldr	r2, [r3, #12]
 80028e8:	4b10      	ldr	r3, [pc, #64]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028ea:	430a      	orrs	r2, r1
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028ee:	f000 f829 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028f2:	0001      	movs	r1, r0
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	220f      	movs	r2, #15
 80028fc:	401a      	ands	r2, r3
 80028fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002938 <HAL_RCC_ClockConfig+0x204>)
 8002900:	0092      	lsls	r2, r2, #2
 8002902:	58d3      	ldr	r3, [r2, r3]
 8002904:	221f      	movs	r2, #31
 8002906:	4013      	ands	r3, r2
 8002908:	000a      	movs	r2, r1
 800290a:	40da      	lsrs	r2, r3
 800290c:	4b0b      	ldr	r3, [pc, #44]	@ (800293c <HAL_RCC_ClockConfig+0x208>)
 800290e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_ClockConfig+0x20c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0018      	movs	r0, r3
 8002916:	f7fe fad7 	bl	8000ec8 <HAL_InitTick>
 800291a:	0003      	movs	r3, r0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40022000 	.word	0x40022000
 8002928:	00001388 	.word	0x00001388
 800292c:	40021000 	.word	0x40021000
 8002930:	fffff0ff 	.word	0xfffff0ff
 8002934:	ffff8fff 	.word	0xffff8fff
 8002938:	080043f4 	.word	0x080043f4
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2238      	movs	r2, #56	@ 0x38
 8002950:	4013      	ands	r3, r2
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002954:	4b39      	ldr	r3, [pc, #228]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0adb      	lsrs	r3, r3, #11
 800295a:	2207      	movs	r2, #7
 800295c:	4013      	ands	r3, r2
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	0013      	movs	r3, r2
 8002964:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	4835      	ldr	r0, [pc, #212]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 800296a:	f7fd fbcb 	bl	8000104 <__udivsi3>
 800296e:	0003      	movs	r3, r0
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	e05d      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002974:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2238      	movs	r2, #56	@ 0x38
 800297a:	4013      	ands	r3, r2
 800297c:	2b08      	cmp	r3, #8
 800297e:	d102      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002980:	4b30      	ldr	r3, [pc, #192]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x100>)
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	e054      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002986:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2238      	movs	r2, #56	@ 0x38
 800298c:	4013      	ands	r3, r2
 800298e:	2b10      	cmp	r3, #16
 8002990:	d138      	bne.n	8002a04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002992:	4b2a      	ldr	r3, [pc, #168]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2203      	movs	r2, #3
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800299c:	4b27      	ldr	r3, [pc, #156]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	091b      	lsrs	r3, r3, #4
 80029a2:	2207      	movs	r2, #7
 80029a4:	4013      	ands	r3, r2
 80029a6:	3301      	adds	r3, #1
 80029a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d10d      	bne.n	80029cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b0:	68b9      	ldr	r1, [r7, #8]
 80029b2:	4824      	ldr	r0, [pc, #144]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x100>)
 80029b4:	f7fd fba6 	bl	8000104 <__udivsi3>
 80029b8:	0003      	movs	r3, r0
 80029ba:	0019      	movs	r1, r3
 80029bc:	4b1f      	ldr	r3, [pc, #124]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	227f      	movs	r2, #127	@ 0x7f
 80029c4:	4013      	ands	r3, r2
 80029c6:	434b      	muls	r3, r1
 80029c8:	617b      	str	r3, [r7, #20]
        break;
 80029ca:	e00d      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	481c      	ldr	r0, [pc, #112]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029d0:	f7fd fb98 	bl	8000104 <__udivsi3>
 80029d4:	0003      	movs	r3, r0
 80029d6:	0019      	movs	r1, r3
 80029d8:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	0a1b      	lsrs	r3, r3, #8
 80029de:	227f      	movs	r2, #127	@ 0x7f
 80029e0:	4013      	ands	r3, r2
 80029e2:	434b      	muls	r3, r1
 80029e4:	617b      	str	r3, [r7, #20]
        break;
 80029e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029e8:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	0f5b      	lsrs	r3, r3, #29
 80029ee:	2207      	movs	r2, #7
 80029f0:	4013      	ands	r3, r2
 80029f2:	3301      	adds	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	6978      	ldr	r0, [r7, #20]
 80029fa:	f7fd fb83 	bl	8000104 <__udivsi3>
 80029fe:	0003      	movs	r3, r0
 8002a00:	613b      	str	r3, [r7, #16]
 8002a02:	e015      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2238      	movs	r2, #56	@ 0x38
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d103      	bne.n	8002a18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	e00b      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	2238      	movs	r2, #56	@ 0x38
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b18      	cmp	r3, #24
 8002a22:	d103      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a24:	23fa      	movs	r3, #250	@ 0xfa
 8002a26:	01db      	lsls	r3, r3, #7
 8002a28:	613b      	str	r3, [r7, #16]
 8002a2a:	e001      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a30:	693b      	ldr	r3, [r7, #16]
}
 8002a32:	0018      	movs	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b006      	add	sp, #24
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b02      	ldr	r3, [pc, #8]	@ (8002a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000000 	.word	0x20000000

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b5b0      	push	{r4, r5, r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a60:	f7ff fff2 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a64:	0004      	movs	r4, r0
 8002a66:	f7ff fb3f 	bl	80020e8 <LL_RCC_GetAPB1Prescaler>
 8002a6a:	0003      	movs	r3, r0
 8002a6c:	0b1a      	lsrs	r2, r3, #12
 8002a6e:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a70:	0092      	lsls	r2, r2, #2
 8002a72:	58d3      	ldr	r3, [r2, r3]
 8002a74:	221f      	movs	r2, #31
 8002a76:	4013      	ands	r3, r2
 8002a78:	40dc      	lsrs	r4, r3
 8002a7a:	0023      	movs	r3, r4
}
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bdb0      	pop	{r4, r5, r7, pc}
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	08004434 	.word	0x08004434

08002a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e04a      	b.n	8002b30 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	223d      	movs	r2, #61	@ 0x3d
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	223c      	movs	r2, #60	@ 0x3c
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f7fe f893 	bl	8000bdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223d      	movs	r2, #61	@ 0x3d
 8002aba:	2102      	movs	r1, #2
 8002abc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	0010      	movs	r0, r2
 8002aca:	f000 fb85 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2248      	movs	r2, #72	@ 0x48
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	223e      	movs	r2, #62	@ 0x3e
 8002ada:	2101      	movs	r1, #1
 8002adc:	5499      	strb	r1, [r3, r2]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223f      	movs	r2, #63	@ 0x3f
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2240      	movs	r2, #64	@ 0x40
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2241      	movs	r2, #65	@ 0x41
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2242      	movs	r2, #66	@ 0x42
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2243      	movs	r2, #67	@ 0x43
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2244      	movs	r2, #68	@ 0x44
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2245      	movs	r2, #69	@ 0x45
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2246      	movs	r2, #70	@ 0x46
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2247      	movs	r2, #71	@ 0x47
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223d      	movs	r2, #61	@ 0x3d
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e04a      	b.n	8002be0 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	223d      	movs	r2, #61	@ 0x3d
 8002b4e:	5c9b      	ldrb	r3, [r3, r2]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d107      	bne.n	8002b66 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	223c      	movs	r2, #60	@ 0x3c
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	0018      	movs	r0, r3
 8002b62:	f000 f841 	bl	8002be8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	223d      	movs	r2, #61	@ 0x3d
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3304      	adds	r3, #4
 8002b76:	0019      	movs	r1, r3
 8002b78:	0010      	movs	r0, r2
 8002b7a:	f000 fb2d 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2248      	movs	r2, #72	@ 0x48
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	223e      	movs	r2, #62	@ 0x3e
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	223f      	movs	r2, #63	@ 0x3f
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2240      	movs	r2, #64	@ 0x40
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2241      	movs	r2, #65	@ 0x41
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2242      	movs	r2, #66	@ 0x42
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2243      	movs	r2, #67	@ 0x43
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2244      	movs	r2, #68	@ 0x44
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2245      	movs	r2, #69	@ 0x45
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2246      	movs	r2, #70	@ 0x46
 8002bca:	2101      	movs	r1, #1
 8002bcc:	5499      	strb	r1, [r3, r2]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2247      	movs	r2, #71	@ 0x47
 8002bd2:	2101      	movs	r1, #1
 8002bd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	223d      	movs	r2, #61	@ 0x3d
 8002bda:	2101      	movs	r1, #1
 8002bdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	0018      	movs	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	b002      	add	sp, #8
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b002      	add	sp, #8
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e04a      	b.n	8002ca0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	@ 0x3d
 8002c0e:	5c9b      	ldrb	r3, [r3, r2]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	223c      	movs	r2, #60	@ 0x3c
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 f841 	bl	8002ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	223d      	movs	r2, #61	@ 0x3d
 8002c2a:	2102      	movs	r1, #2
 8002c2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f000 facd 	bl	80031d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2248      	movs	r2, #72	@ 0x48
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	223e      	movs	r2, #62	@ 0x3e
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	2101      	movs	r1, #1
 8002c54:	5499      	strb	r1, [r3, r2]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2240      	movs	r2, #64	@ 0x40
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	5499      	strb	r1, [r3, r2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2241      	movs	r2, #65	@ 0x41
 8002c62:	2101      	movs	r1, #1
 8002c64:	5499      	strb	r1, [r3, r2]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2242      	movs	r2, #66	@ 0x42
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	5499      	strb	r1, [r3, r2]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2243      	movs	r2, #67	@ 0x43
 8002c72:	2101      	movs	r1, #1
 8002c74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2244      	movs	r2, #68	@ 0x44
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	5499      	strb	r1, [r3, r2]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2245      	movs	r2, #69	@ 0x45
 8002c82:	2101      	movs	r1, #1
 8002c84:	5499      	strb	r1, [r3, r2]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2246      	movs	r2, #70	@ 0x46
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	5499      	strb	r1, [r3, r2]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2247      	movs	r2, #71	@ 0x47
 8002c92:	2101      	movs	r1, #1
 8002c94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	223d      	movs	r2, #61	@ 0x3d
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b002      	add	sp, #8
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cb0:	46c0      	nop			@ (mov r8, r8)
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d021      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d01d      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	4252      	negs	r2, r2
 8002ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 fa52 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d04:	e007      	b.n	8002d16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 fa45 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	0018      	movs	r0, r3
 8002d12:	f000 fa51 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2204      	movs	r2, #4
 8002d20:	4013      	ands	r3, r2
 8002d22:	d022      	beq.n	8002d6a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2204      	movs	r2, #4
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d01e      	beq.n	8002d6a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2205      	movs	r2, #5
 8002d32:	4252      	negs	r2, r2
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	23c0      	movs	r3, #192	@ 0xc0
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4013      	ands	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fa2b 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d52:	e007      	b.n	8002d64 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	0018      	movs	r0, r3
 8002d58:	f000 fa1e 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 fa2a 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	4013      	ands	r3, r2
 8002d70:	d021      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2208      	movs	r2, #8
 8002d76:	4013      	ands	r3, r2
 8002d78:	d01d      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2209      	movs	r2, #9
 8002d80:	4252      	negs	r2, r2
 8002d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	2203      	movs	r2, #3
 8002d92:	4013      	ands	r3, r2
 8002d94:	d004      	beq.n	8002da0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fa05 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002d9e:	e007      	b.n	8002db0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	0018      	movs	r0, r3
 8002da4:	f000 f9f8 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 fa04 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2210      	movs	r2, #16
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d022      	beq.n	8002e04 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2210      	movs	r2, #16
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d01e      	beq.n	8002e04 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2211      	movs	r2, #17
 8002dcc:	4252      	negs	r2, r2
 8002dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2208      	movs	r2, #8
 8002dd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69da      	ldr	r2, [r3, #28]
 8002ddc:	23c0      	movs	r3, #192	@ 0xc0
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4013      	ands	r3, r2
 8002de2:	d004      	beq.n	8002dee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f9de 	bl	80031a8 <HAL_TIM_IC_CaptureCallback>
 8002dec:	e007      	b.n	8002dfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 f9d1 	bl	8003198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f000 f9dd 	bl	80031b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	2201      	movs	r2, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d00c      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4013      	ands	r3, r2
 8002e12:	d008      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4252      	negs	r2, r2
 8002e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 f9b1 	bl	8003188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2280      	movs	r2, #128	@ 0x80
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d104      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	2380      	movs	r3, #128	@ 0x80
 8002e32:	019b      	lsls	r3, r3, #6
 8002e34:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002e36:	d00b      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2280      	movs	r2, #128	@ 0x80
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d007      	beq.n	8002e50 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1e      	ldr	r2, [pc, #120]	@ (8002ec0 <HAL_TIM_IRQHandler+0x208>)
 8002e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 fd88 	bl	8003960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002e50:	68ba      	ldr	r2, [r7, #8]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4013      	ands	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2280      	movs	r2, #128	@ 0x80
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a17      	ldr	r2, [pc, #92]	@ (8002ec4 <HAL_TIM_IRQHandler+0x20c>)
 8002e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f000 fd7f 	bl	8003970 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2240      	movs	r2, #64	@ 0x40
 8002e76:	4013      	ands	r3, r2
 8002e78:	d00c      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2240      	movs	r2, #64	@ 0x40
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d008      	beq.n	8002e94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2241      	movs	r2, #65	@ 0x41
 8002e88:	4252      	negs	r2, r2
 8002e8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 f99a 	bl	80031c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2220      	movs	r2, #32
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d008      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	4252      	negs	r2, r2
 8002eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fd4d 	bl	8003950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	ffffdf7f 	.word	0xffffdf7f
 8002ec4:	fffffeff 	.word	0xfffffeff

08002ec8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2317      	movs	r3, #23
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	223c      	movs	r2, #60	@ 0x3c
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_OC_ConfigChannel+0x22>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e048      	b.n	8002f7c <HAL_TIM_OC_ConfigChannel+0xb4>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	223c      	movs	r2, #60	@ 0x3c
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b14      	cmp	r3, #20
 8002ef6:	d835      	bhi.n	8002f64 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	009a      	lsls	r2, r3, #2
 8002efc:	4b21      	ldr	r3, [pc, #132]	@ (8002f84 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	0011      	movs	r1, r2
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 f9e7 	bl	80032e0 <TIM_OC1_SetConfig>
      break;
 8002f12:	e02c      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f000 fa5f 	bl	80033e0 <TIM_OC2_SetConfig>
      break;
 8002f22:	e024      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	0011      	movs	r1, r2
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f000 fad5 	bl	80034dc <TIM_OC3_SetConfig>
      break;
 8002f32:	e01c      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 fb4f 	bl	80035e0 <TIM_OC4_SetConfig>
      break;
 8002f42:	e014      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fbab 	bl	80036a8 <TIM_OC5_SetConfig>
      break;
 8002f52:	e00c      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fbfd 	bl	800375c <TIM_OC6_SetConfig>
      break;
 8002f62:	e004      	b.n	8002f6e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002f64:	2317      	movs	r3, #23
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	2201      	movs	r2, #1
 8002f6a:	701a      	strb	r2, [r3, #0]
      break;
 8002f6c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	223c      	movs	r2, #60	@ 0x3c
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

  return status;
 8002f76:	2317      	movs	r3, #23
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	781b      	ldrb	r3, [r3, #0]
}
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b006      	add	sp, #24
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	08004454 	.word	0x08004454

08002f88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f94:	2317      	movs	r3, #23
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	223c      	movs	r2, #60	@ 0x3c
 8002fa0:	5c9b      	ldrb	r3, [r3, r2]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x22>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e0e5      	b.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	223c      	movs	r2, #60	@ 0x3c
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b14      	cmp	r3, #20
 8002fb6:	d900      	bls.n	8002fba <HAL_TIM_PWM_ConfigChannel+0x32>
 8002fb8:	e0d1      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	009a      	lsls	r2, r3, #2
 8002fbe:	4b70      	ldr	r3, [pc, #448]	@ (8003180 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	0011      	movs	r1, r2
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 f986 	bl	80032e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2108      	movs	r1, #8
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2104      	movs	r1, #4
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	619a      	str	r2, [r3, #24]
      break;
 8003006:	e0af      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	0011      	movs	r1, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f000 f9e5 	bl	80033e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2180      	movs	r1, #128	@ 0x80
 8003022:	0109      	lsls	r1, r1, #4
 8003024:	430a      	orrs	r2, r1
 8003026:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699a      	ldr	r2, [r3, #24]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4954      	ldr	r1, [pc, #336]	@ (8003184 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003034:	400a      	ands	r2, r1
 8003036:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6999      	ldr	r1, [r3, #24]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	619a      	str	r2, [r3, #24]
      break;
 800304c:	e08c      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	0011      	movs	r1, r2
 8003056:	0018      	movs	r0, r3
 8003058:	f000 fa40 	bl	80034dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	69da      	ldr	r2, [r3, #28]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2108      	movs	r1, #8
 8003068:	430a      	orrs	r2, r1
 800306a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	69da      	ldr	r2, [r3, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2104      	movs	r1, #4
 8003078:	438a      	bics	r2, r1
 800307a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69d9      	ldr	r1, [r3, #28]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	61da      	str	r2, [r3, #28]
      break;
 800308e:	e06b      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	0011      	movs	r1, r2
 8003098:	0018      	movs	r0, r3
 800309a:	f000 faa1 	bl	80035e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69da      	ldr	r2, [r3, #28]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2180      	movs	r1, #128	@ 0x80
 80030aa:	0109      	lsls	r1, r1, #4
 80030ac:	430a      	orrs	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4932      	ldr	r1, [pc, #200]	@ (8003184 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80030bc:	400a      	ands	r2, r1
 80030be:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69d9      	ldr	r1, [r3, #28]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	021a      	lsls	r2, r3, #8
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	61da      	str	r2, [r3, #28]
      break;
 80030d4:	e048      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	0011      	movs	r1, r2
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 fae2 	bl	80036a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2108      	movs	r1, #8
 80030f0:	430a      	orrs	r2, r1
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2104      	movs	r1, #4
 8003100:	438a      	bics	r2, r1
 8003102:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691a      	ldr	r2, [r3, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003116:	e027      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68ba      	ldr	r2, [r7, #8]
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fb1b 	bl	800375c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2180      	movs	r1, #128	@ 0x80
 8003132:	0109      	lsls	r1, r1, #4
 8003134:	430a      	orrs	r2, r1
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4910      	ldr	r1, [pc, #64]	@ (8003184 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003144:	400a      	ands	r2, r1
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	021a      	lsls	r2, r3, #8
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800315c:	e004      	b.n	8003168 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800315e:	2317      	movs	r3, #23
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
      break;
 8003166:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	223c      	movs	r2, #60	@ 0x3c
 800316c:	2100      	movs	r1, #0
 800316e:	5499      	strb	r1, [r3, r2]

  return status;
 8003170:	2317      	movs	r3, #23
 8003172:	18fb      	adds	r3, r7, r3
 8003174:	781b      	ldrb	r3, [r3, #0]
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b006      	add	sp, #24
 800317c:	bd80      	pop	{r7, pc}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	080044a8 	.word	0x080044a8
 8003184:	fffffbff 	.word	0xfffffbff

08003188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b002      	add	sp, #8
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b002      	add	sp, #8
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	b002      	add	sp, #8
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b002      	add	sp, #8
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a37      	ldr	r2, [pc, #220]	@ (80032c8 <TIM_Base_SetConfig+0xf0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d008      	beq.n	8003202 <TIM_Base_SetConfig+0x2a>
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	2380      	movs	r3, #128	@ 0x80
 80031f4:	05db      	lsls	r3, r3, #23
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d003      	beq.n	8003202 <TIM_Base_SetConfig+0x2a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a33      	ldr	r2, [pc, #204]	@ (80032cc <TIM_Base_SetConfig+0xf4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d108      	bne.n	8003214 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2270      	movs	r2, #112	@ 0x70
 8003206:	4393      	bics	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a2c      	ldr	r2, [pc, #176]	@ (80032c8 <TIM_Base_SetConfig+0xf0>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d014      	beq.n	8003246 <TIM_Base_SetConfig+0x6e>
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	2380      	movs	r3, #128	@ 0x80
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	429a      	cmp	r2, r3
 8003224:	d00f      	beq.n	8003246 <TIM_Base_SetConfig+0x6e>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a28      	ldr	r2, [pc, #160]	@ (80032cc <TIM_Base_SetConfig+0xf4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00b      	beq.n	8003246 <TIM_Base_SetConfig+0x6e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a27      	ldr	r2, [pc, #156]	@ (80032d0 <TIM_Base_SetConfig+0xf8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <TIM_Base_SetConfig+0x6e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a26      	ldr	r2, [pc, #152]	@ (80032d4 <TIM_Base_SetConfig+0xfc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d003      	beq.n	8003246 <TIM_Base_SetConfig+0x6e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a25      	ldr	r2, [pc, #148]	@ (80032d8 <TIM_Base_SetConfig+0x100>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d108      	bne.n	8003258 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a24      	ldr	r2, [pc, #144]	@ (80032dc <TIM_Base_SetConfig+0x104>)
 800324a:	4013      	ands	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2280      	movs	r2, #128	@ 0x80
 800325c:	4393      	bics	r3, r2
 800325e:	001a      	movs	r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	4313      	orrs	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a11      	ldr	r2, [pc, #68]	@ (80032c8 <TIM_Base_SetConfig+0xf0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0xbe>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a12      	ldr	r2, [pc, #72]	@ (80032d4 <TIM_Base_SetConfig+0xfc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0xbe>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a11      	ldr	r2, [pc, #68]	@ (80032d8 <TIM_Base_SetConfig+0x100>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d103      	bne.n	800329e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2201      	movs	r2, #1
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4393      	bics	r3, r2
 80032b8:	001a      	movs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
  }
}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	46bd      	mov	sp, r7
 80032c2:	b004      	add	sp, #16
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	46c0      	nop			@ (mov r8, r8)
 80032c8:	40012c00 	.word	0x40012c00
 80032cc:	40000400 	.word	0x40000400
 80032d0:	40002000 	.word	0x40002000
 80032d4:	40014400 	.word	0x40014400
 80032d8:	40014800 	.word	0x40014800
 80032dc:	fffffcff 	.word	0xfffffcff

080032e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	2201      	movs	r2, #1
 80032f6:	4393      	bics	r3, r2
 80032f8:	001a      	movs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	4a2e      	ldr	r2, [pc, #184]	@ (80033c8 <TIM_OC1_SetConfig+0xe8>)
 800330e:	4013      	ands	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2203      	movs	r2, #3
 8003316:	4393      	bics	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2202      	movs	r2, #2
 8003328:	4393      	bics	r3, r2
 800332a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a24      	ldr	r2, [pc, #144]	@ (80033cc <TIM_OC1_SetConfig+0xec>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <TIM_OC1_SetConfig+0x6e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a23      	ldr	r2, [pc, #140]	@ (80033d0 <TIM_OC1_SetConfig+0xf0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d003      	beq.n	800334e <TIM_OC1_SetConfig+0x6e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a22      	ldr	r2, [pc, #136]	@ (80033d4 <TIM_OC1_SetConfig+0xf4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10c      	bne.n	8003368 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2208      	movs	r2, #8
 8003352:	4393      	bics	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2204      	movs	r2, #4
 8003364:	4393      	bics	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <TIM_OC1_SetConfig+0xec>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <TIM_OC1_SetConfig+0xa0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a17      	ldr	r2, [pc, #92]	@ (80033d0 <TIM_OC1_SetConfig+0xf0>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d003      	beq.n	8003380 <TIM_OC1_SetConfig+0xa0>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a16      	ldr	r2, [pc, #88]	@ (80033d4 <TIM_OC1_SetConfig+0xf4>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d111      	bne.n	80033a4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4a15      	ldr	r2, [pc, #84]	@ (80033d8 <TIM_OC1_SetConfig+0xf8>)
 8003384:	4013      	ands	r3, r2
 8003386:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	4a14      	ldr	r2, [pc, #80]	@ (80033dc <TIM_OC1_SetConfig+0xfc>)
 800338c:	4013      	ands	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			@ (mov r8, r8)
 80033c8:	fffeff8f 	.word	0xfffeff8f
 80033cc:	40012c00 	.word	0x40012c00
 80033d0:	40014400 	.word	0x40014400
 80033d4:	40014800 	.word	0x40014800
 80033d8:	fffffeff 	.word	0xfffffeff
 80033dc:	fffffdff 	.word	0xfffffdff

080033e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	2210      	movs	r2, #16
 80033f6:	4393      	bics	r3, r2
 80033f8:	001a      	movs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a2c      	ldr	r2, [pc, #176]	@ (80034c0 <TIM_OC2_SetConfig+0xe0>)
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a2b      	ldr	r2, [pc, #172]	@ (80034c4 <TIM_OC2_SetConfig+0xe4>)
 8003416:	4013      	ands	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2220      	movs	r2, #32
 800342a:	4393      	bics	r3, r2
 800342c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	4313      	orrs	r3, r2
 8003438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a22      	ldr	r2, [pc, #136]	@ (80034c8 <TIM_OC2_SetConfig+0xe8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d10d      	bne.n	800345e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2280      	movs	r2, #128	@ 0x80
 8003446:	4393      	bics	r3, r2
 8003448:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	4393      	bics	r3, r2
 800345c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a19      	ldr	r2, [pc, #100]	@ (80034c8 <TIM_OC2_SetConfig+0xe8>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d007      	beq.n	8003476 <TIM_OC2_SetConfig+0x96>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a18      	ldr	r2, [pc, #96]	@ (80034cc <TIM_OC2_SetConfig+0xec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d003      	beq.n	8003476 <TIM_OC2_SetConfig+0x96>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <TIM_OC2_SetConfig+0xf0>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d113      	bne.n	800349e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <TIM_OC2_SetConfig+0xf4>)
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a15      	ldr	r2, [pc, #84]	@ (80034d8 <TIM_OC2_SetConfig+0xf8>)
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	621a      	str	r2, [r3, #32]
}
 80034b8:	46c0      	nop			@ (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b006      	add	sp, #24
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	feff8fff 	.word	0xfeff8fff
 80034c4:	fffffcff 	.word	0xfffffcff
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40014400 	.word	0x40014400
 80034d0:	40014800 	.word	0x40014800
 80034d4:	fffffbff 	.word	0xfffffbff
 80034d8:	fffff7ff 	.word	0xfffff7ff

080034dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	4a31      	ldr	r2, [pc, #196]	@ (80035b8 <TIM_OC3_SetConfig+0xdc>)
 80034f2:	401a      	ands	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a2d      	ldr	r2, [pc, #180]	@ (80035bc <TIM_OC3_SetConfig+0xe0>)
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2203      	movs	r2, #3
 8003510:	4393      	bics	r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	4a27      	ldr	r2, [pc, #156]	@ (80035c0 <TIM_OC3_SetConfig+0xe4>)
 8003522:	4013      	ands	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	021b      	lsls	r3, r3, #8
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a23      	ldr	r2, [pc, #140]	@ (80035c4 <TIM_OC3_SetConfig+0xe8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d10d      	bne.n	8003556 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <TIM_OC3_SetConfig+0xec>)
 800353e:	4013      	ands	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <TIM_OC3_SetConfig+0xf0>)
 8003552:	4013      	ands	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a1a      	ldr	r2, [pc, #104]	@ (80035c4 <TIM_OC3_SetConfig+0xe8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <TIM_OC3_SetConfig+0x92>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a1b      	ldr	r2, [pc, #108]	@ (80035d0 <TIM_OC3_SetConfig+0xf4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d003      	beq.n	800356e <TIM_OC3_SetConfig+0x92>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a1a      	ldr	r2, [pc, #104]	@ (80035d4 <TIM_OC3_SetConfig+0xf8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d113      	bne.n	8003596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4a19      	ldr	r2, [pc, #100]	@ (80035d8 <TIM_OC3_SetConfig+0xfc>)
 8003572:	4013      	ands	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4a18      	ldr	r2, [pc, #96]	@ (80035dc <TIM_OC3_SetConfig+0x100>)
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4313      	orrs	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b006      	add	sp, #24
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fffffeff 	.word	0xfffffeff
 80035bc:	fffeff8f 	.word	0xfffeff8f
 80035c0:	fffffdff 	.word	0xfffffdff
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	fffff7ff 	.word	0xfffff7ff
 80035cc:	fffffbff 	.word	0xfffffbff
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800
 80035d8:	ffffefff 	.word	0xffffefff
 80035dc:	ffffdfff 	.word	0xffffdfff

080035e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	4a24      	ldr	r2, [pc, #144]	@ (8003688 <TIM_OC4_SetConfig+0xa8>)
 80035f6:	401a      	ands	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4a20      	ldr	r2, [pc, #128]	@ (800368c <TIM_OC4_SetConfig+0xac>)
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <TIM_OC4_SetConfig+0xb0>)
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4a1b      	ldr	r2, [pc, #108]	@ (8003694 <TIM_OC4_SetConfig+0xb4>)
 8003628:	4013      	ands	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	031b      	lsls	r3, r3, #12
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <TIM_OC4_SetConfig+0xb8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_OC4_SetConfig+0x70>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a16      	ldr	r2, [pc, #88]	@ (800369c <TIM_OC4_SetConfig+0xbc>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC4_SetConfig+0x70>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a15      	ldr	r2, [pc, #84]	@ (80036a0 <TIM_OC4_SetConfig+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d109      	bne.n	8003664 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <TIM_OC4_SetConfig+0xc4>)
 8003654:	4013      	ands	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	019b      	lsls	r3, r3, #6
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	621a      	str	r2, [r3, #32]
}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b006      	add	sp, #24
 8003684:	bd80      	pop	{r7, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	ffffefff 	.word	0xffffefff
 800368c:	feff8fff 	.word	0xfeff8fff
 8003690:	fffffcff 	.word	0xfffffcff
 8003694:	ffffdfff 	.word	0xffffdfff
 8003698:	40012c00 	.word	0x40012c00
 800369c:	40014400 	.word	0x40014400
 80036a0:	40014800 	.word	0x40014800
 80036a4:	ffffbfff 	.word	0xffffbfff

080036a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4a21      	ldr	r2, [pc, #132]	@ (8003744 <TIM_OC5_SetConfig+0x9c>)
 80036be:	401a      	ands	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003748 <TIM_OC5_SetConfig+0xa0>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4a19      	ldr	r2, [pc, #100]	@ (800374c <TIM_OC5_SetConfig+0xa4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a15      	ldr	r2, [pc, #84]	@ (8003750 <TIM_OC5_SetConfig+0xa8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d007      	beq.n	800370e <TIM_OC5_SetConfig+0x66>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <TIM_OC5_SetConfig+0xac>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d003      	beq.n	800370e <TIM_OC5_SetConfig+0x66>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <TIM_OC5_SetConfig+0xb0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d109      	bne.n	8003722 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	4a0c      	ldr	r2, [pc, #48]	@ (8003744 <TIM_OC5_SetConfig+0x9c>)
 8003712:	4013      	ands	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685a      	ldr	r2, [r3, #4]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	621a      	str	r2, [r3, #32]
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	b006      	add	sp, #24
 8003742:	bd80      	pop	{r7, pc}
 8003744:	fffeffff 	.word	0xfffeffff
 8003748:	fffeff8f 	.word	0xfffeff8f
 800374c:	fffdffff 	.word	0xfffdffff
 8003750:	40012c00 	.word	0x40012c00
 8003754:	40014400 	.word	0x40014400
 8003758:	40014800 	.word	0x40014800

0800375c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4a22      	ldr	r2, [pc, #136]	@ (80037fc <TIM_OC6_SetConfig+0xa0>)
 8003772:	401a      	ands	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a1e      	ldr	r2, [pc, #120]	@ (8003800 <TIM_OC6_SetConfig+0xa4>)
 8003788:	4013      	ands	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	4313      	orrs	r3, r2
 8003796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4a1a      	ldr	r2, [pc, #104]	@ (8003804 <TIM_OC6_SetConfig+0xa8>)
 800379c:	4013      	ands	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	051b      	lsls	r3, r3, #20
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a16      	ldr	r2, [pc, #88]	@ (8003808 <TIM_OC6_SetConfig+0xac>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_OC6_SetConfig+0x68>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a15      	ldr	r2, [pc, #84]	@ (800380c <TIM_OC6_SetConfig+0xb0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_OC6_SetConfig+0x68>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <TIM_OC6_SetConfig+0xb4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d109      	bne.n	80037d8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4a13      	ldr	r2, [pc, #76]	@ (8003814 <TIM_OC6_SetConfig+0xb8>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	46c0      	nop			@ (mov r8, r8)
 80037f4:	46bd      	mov	sp, r7
 80037f6:	b006      	add	sp, #24
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			@ (mov r8, r8)
 80037fc:	ffefffff 	.word	0xffefffff
 8003800:	feff8fff 	.word	0xfeff8fff
 8003804:	ffdfffff 	.word	0xffdfffff
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40014400 	.word	0x40014400
 8003810:	40014800 	.word	0x40014800
 8003814:	fffbffff 	.word	0xfffbffff

08003818 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	223c      	movs	r2, #60	@ 0x3c
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003830:	2302      	movs	r3, #2
 8003832:	e06f      	b.n	8003914 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	223c      	movs	r2, #60	@ 0x3c
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	4393      	bics	r3, r2
 8003842:	001a      	movs	r2, r3
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a33      	ldr	r2, [pc, #204]	@ (800391c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003850:	401a      	ands	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a30      	ldr	r2, [pc, #192]	@ (8003920 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800385e:	401a      	ands	r2, r3
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4a2e      	ldr	r2, [pc, #184]	@ (8003924 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800386c:	401a      	ands	r2, r3
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a2b      	ldr	r2, [pc, #172]	@ (8003928 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800387a:	401a      	ands	r2, r3
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a29      	ldr	r2, [pc, #164]	@ (800392c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003888:	401a      	ands	r2, r3
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a26      	ldr	r2, [pc, #152]	@ (8003930 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003896:	401a      	ands	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389c:	4313      	orrs	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80038a4:	401a      	ands	r2, r3
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	041b      	lsls	r3, r3, #16
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a21      	ldr	r2, [pc, #132]	@ (8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80038b4:	401a      	ands	r2, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	@ (800393c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d11c      	bne.n	8003902 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80038cc:	401a      	ands	r2, r3
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	051b      	lsls	r3, r3, #20
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a1a      	ldr	r2, [pc, #104]	@ (8003944 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80038dc:	401a      	ands	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a17      	ldr	r2, [pc, #92]	@ (8003948 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80038ea:	401a      	ands	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a15      	ldr	r2, [pc, #84]	@ (800394c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80038f8:	401a      	ands	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	223c      	movs	r2, #60	@ 0x3c
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	0018      	movs	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	b004      	add	sp, #16
 800391a:	bd80      	pop	{r7, pc}
 800391c:	fffffcff 	.word	0xfffffcff
 8003920:	fffffbff 	.word	0xfffffbff
 8003924:	fffff7ff 	.word	0xfffff7ff
 8003928:	ffffefff 	.word	0xffffefff
 800392c:	ffffdfff 	.word	0xffffdfff
 8003930:	ffffbfff 	.word	0xffffbfff
 8003934:	fff0ffff 	.word	0xfff0ffff
 8003938:	efffffff 	.word	0xefffffff
 800393c:	40012c00 	.word	0x40012c00
 8003940:	ff0fffff 	.word	0xff0fffff
 8003944:	feffffff 	.word	0xfeffffff
 8003948:	fdffffff 	.word	0xfdffffff
 800394c:	dfffffff 	.word	0xdfffffff

08003950 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003958:	46c0      	nop			@ (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b002      	add	sp, #8
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e046      	b.n	8003a20 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2288      	movs	r2, #136	@ 0x88
 8003996:	589b      	ldr	r3, [r3, r2]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d107      	bne.n	80039ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2284      	movs	r2, #132	@ 0x84
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	0018      	movs	r0, r3
 80039a8:	f7fd f9b0 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2288      	movs	r2, #136	@ 0x88
 80039b0:	2124      	movs	r1, #36	@ 0x24
 80039b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2101      	movs	r1, #1
 80039c0:	438a      	bics	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 faa4 	bl	8003f1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	0018      	movs	r0, r3
 80039d8:	f000 f828 	bl	8003a2c <UART_SetConfig>
 80039dc:	0003      	movs	r3, r0
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e01c      	b.n	8003a20 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	490d      	ldr	r1, [pc, #52]	@ (8003a28 <HAL_UART_Init+0xa8>)
 80039f2:	400a      	ands	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689a      	ldr	r2, [r3, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	212a      	movs	r1, #42	@ 0x2a
 8003a02:	438a      	bics	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2101      	movs	r1, #1
 8003a12:	430a      	orrs	r2, r1
 8003a14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fb33 	bl	8004084 <UART_CheckIdleState>
 8003a1e:	0003      	movs	r3, r0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b002      	add	sp, #8
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	ffffb7ff 	.word	0xffffb7ff

08003a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b090      	sub	sp, #64	@ 0x40
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a34:	231a      	movs	r3, #26
 8003a36:	2220      	movs	r2, #32
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	19db      	adds	r3, r3, r7
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	69db      	ldr	r3, [r3, #28]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4ac4      	ldr	r2, [pc, #784]	@ (8003d70 <UART_SetConfig+0x344>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	0019      	movs	r1, r3
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a6a:	430b      	orrs	r3, r1
 8003a6c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4abf      	ldr	r2, [pc, #764]	@ (8003d74 <UART_SetConfig+0x348>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	0018      	movs	r0, r3
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	68d9      	ldr	r1, [r3, #12]
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	0003      	movs	r3, r0
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4ab9      	ldr	r2, [pc, #740]	@ (8003d78 <UART_SetConfig+0x34c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	4ab4      	ldr	r2, [pc, #720]	@ (8003d7c <UART_SetConfig+0x350>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	220f      	movs	r2, #15
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	0003      	movs	r3, r0
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4aaa      	ldr	r2, [pc, #680]	@ (8003d80 <UART_SetConfig+0x354>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d131      	bne.n	8003b40 <UART_SetConfig+0x114>
 8003adc:	4ba9      	ldr	r3, [pc, #676]	@ (8003d84 <UART_SetConfig+0x358>)
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	2203      	movs	r2, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d01d      	beq.n	8003b24 <UART_SetConfig+0xf8>
 8003ae8:	d823      	bhi.n	8003b32 <UART_SetConfig+0x106>
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d00c      	beq.n	8003b08 <UART_SetConfig+0xdc>
 8003aee:	d820      	bhi.n	8003b32 <UART_SetConfig+0x106>
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d002      	beq.n	8003afa <UART_SetConfig+0xce>
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d00e      	beq.n	8003b16 <UART_SetConfig+0xea>
 8003af8:	e01b      	b.n	8003b32 <UART_SetConfig+0x106>
 8003afa:	231b      	movs	r3, #27
 8003afc:	2220      	movs	r2, #32
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	19db      	adds	r3, r3, r7
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e071      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b08:	231b      	movs	r3, #27
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	189b      	adds	r3, r3, r2
 8003b0e:	19db      	adds	r3, r3, r7
 8003b10:	2202      	movs	r2, #2
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e06a      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b16:	231b      	movs	r3, #27
 8003b18:	2220      	movs	r2, #32
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	2204      	movs	r2, #4
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e063      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b24:	231b      	movs	r3, #27
 8003b26:	2220      	movs	r2, #32
 8003b28:	189b      	adds	r3, r3, r2
 8003b2a:	19db      	adds	r3, r3, r7
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	701a      	strb	r2, [r3, #0]
 8003b30:	e05c      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b32:	231b      	movs	r3, #27
 8003b34:	2220      	movs	r2, #32
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e055      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a90      	ldr	r2, [pc, #576]	@ (8003d88 <UART_SetConfig+0x35c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d106      	bne.n	8003b58 <UART_SetConfig+0x12c>
 8003b4a:	231b      	movs	r3, #27
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	189b      	adds	r3, r3, r2
 8003b50:	19db      	adds	r3, r3, r7
 8003b52:	2200      	movs	r2, #0
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	e049      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a86      	ldr	r2, [pc, #536]	@ (8003d78 <UART_SetConfig+0x34c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d13e      	bne.n	8003be0 <UART_SetConfig+0x1b4>
 8003b62:	4b88      	ldr	r3, [pc, #544]	@ (8003d84 <UART_SetConfig+0x358>)
 8003b64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b66:	23c0      	movs	r3, #192	@ 0xc0
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	22c0      	movs	r2, #192	@ 0xc0
 8003b6e:	0112      	lsls	r2, r2, #4
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <UART_SetConfig+0x198>
 8003b74:	22c0      	movs	r2, #192	@ 0xc0
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d82a      	bhi.n	8003bd2 <UART_SetConfig+0x1a6>
 8003b7c:	2280      	movs	r2, #128	@ 0x80
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d011      	beq.n	8003ba8 <UART_SetConfig+0x17c>
 8003b84:	2280      	movs	r2, #128	@ 0x80
 8003b86:	0112      	lsls	r2, r2, #4
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d822      	bhi.n	8003bd2 <UART_SetConfig+0x1a6>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d004      	beq.n	8003b9a <UART_SetConfig+0x16e>
 8003b90:	2280      	movs	r2, #128	@ 0x80
 8003b92:	00d2      	lsls	r2, r2, #3
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <UART_SetConfig+0x18a>
 8003b98:	e01b      	b.n	8003bd2 <UART_SetConfig+0x1a6>
 8003b9a:	231b      	movs	r3, #27
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	189b      	adds	r3, r3, r2
 8003ba0:	19db      	adds	r3, r3, r7
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	e021      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003ba8:	231b      	movs	r3, #27
 8003baa:	2220      	movs	r2, #32
 8003bac:	189b      	adds	r3, r3, r2
 8003bae:	19db      	adds	r3, r3, r7
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e01a      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003bb6:	231b      	movs	r3, #27
 8003bb8:	2220      	movs	r2, #32
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	19db      	adds	r3, r3, r7
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	701a      	strb	r2, [r3, #0]
 8003bc2:	e013      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003bc4:	231b      	movs	r3, #27
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	189b      	adds	r3, r3, r2
 8003bca:	19db      	adds	r3, r3, r7
 8003bcc:	2208      	movs	r2, #8
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e00c      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003bd2:	231b      	movs	r3, #27
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	189b      	adds	r3, r3, r2
 8003bd8:	19db      	adds	r3, r3, r7
 8003bda:	2210      	movs	r2, #16
 8003bdc:	701a      	strb	r2, [r3, #0]
 8003bde:	e005      	b.n	8003bec <UART_SetConfig+0x1c0>
 8003be0:	231b      	movs	r3, #27
 8003be2:	2220      	movs	r2, #32
 8003be4:	189b      	adds	r3, r3, r2
 8003be6:	19db      	adds	r3, r3, r7
 8003be8:	2210      	movs	r2, #16
 8003bea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a61      	ldr	r2, [pc, #388]	@ (8003d78 <UART_SetConfig+0x34c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d000      	beq.n	8003bf8 <UART_SetConfig+0x1cc>
 8003bf6:	e092      	b.n	8003d1e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bf8:	231b      	movs	r3, #27
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	189b      	adds	r3, r3, r2
 8003bfe:	19db      	adds	r3, r3, r7
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d015      	beq.n	8003c32 <UART_SetConfig+0x206>
 8003c06:	dc18      	bgt.n	8003c3a <UART_SetConfig+0x20e>
 8003c08:	2b04      	cmp	r3, #4
 8003c0a:	d00d      	beq.n	8003c28 <UART_SetConfig+0x1fc>
 8003c0c:	dc15      	bgt.n	8003c3a <UART_SetConfig+0x20e>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <UART_SetConfig+0x1ec>
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d005      	beq.n	8003c22 <UART_SetConfig+0x1f6>
 8003c16:	e010      	b.n	8003c3a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c18:	f7fe ff20 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003c1c:	0003      	movs	r3, r0
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c20:	e014      	b.n	8003c4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c22:	4b5a      	ldr	r3, [pc, #360]	@ (8003d8c <UART_SetConfig+0x360>)
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c26:	e011      	b.n	8003c4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c28:	f7fe fe8c 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c30:	e00c      	b.n	8003c4c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c32:	2380      	movs	r3, #128	@ 0x80
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c38:	e008      	b.n	8003c4c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003c3e:	231a      	movs	r3, #26
 8003c40:	2220      	movs	r2, #32
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	19db      	adds	r3, r3, r7
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
        break;
 8003c4a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d100      	bne.n	8003c54 <UART_SetConfig+0x228>
 8003c52:	e147      	b.n	8003ee4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c58:	4b4d      	ldr	r3, [pc, #308]	@ (8003d90 <UART_SetConfig+0x364>)
 8003c5a:	0052      	lsls	r2, r2, #1
 8003c5c:	5ad3      	ldrh	r3, [r2, r3]
 8003c5e:	0019      	movs	r1, r3
 8003c60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003c62:	f7fc fa4f 	bl	8000104 <__udivsi3>
 8003c66:	0003      	movs	r3, r0
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	0013      	movs	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	189b      	adds	r3, r3, r2
 8003c74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d305      	bcc.n	8003c86 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d906      	bls.n	8003c94 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8003c86:	231a      	movs	r3, #26
 8003c88:	2220      	movs	r2, #32
 8003c8a:	189b      	adds	r3, r3, r2
 8003c8c:	19db      	adds	r3, r3, r7
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e127      	b.n	8003ee4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8003d90 <UART_SetConfig+0x364>)
 8003ca2:	0052      	lsls	r2, r2, #1
 8003ca4:	5ad3      	ldrh	r3, [r2, r3]
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	69b8      	ldr	r0, [r7, #24]
 8003cb2:	69f9      	ldr	r1, [r7, #28]
 8003cb4:	f7fc fab2 	bl	800021c <__aeabi_uldivmod>
 8003cb8:	0002      	movs	r2, r0
 8003cba:	000b      	movs	r3, r1
 8003cbc:	0e11      	lsrs	r1, r2, #24
 8003cbe:	021d      	lsls	r5, r3, #8
 8003cc0:	430d      	orrs	r5, r1
 8003cc2:	0214      	lsls	r4, r2, #8
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	085b      	lsrs	r3, r3, #1
 8003cca:	60bb      	str	r3, [r7, #8]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68b8      	ldr	r0, [r7, #8]
 8003cd2:	68f9      	ldr	r1, [r7, #12]
 8003cd4:	1900      	adds	r0, r0, r4
 8003cd6:	4169      	adcs	r1, r5
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	603b      	str	r3, [r7, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	607b      	str	r3, [r7, #4]
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f7fc fa99 	bl	800021c <__aeabi_uldivmod>
 8003cea:	0002      	movs	r2, r0
 8003cec:	000b      	movs	r3, r1
 8003cee:	0013      	movs	r3, r2
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cf4:	23c0      	movs	r3, #192	@ 0xc0
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d309      	bcc.n	8003d10 <UART_SetConfig+0x2e4>
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfe:	2380      	movs	r3, #128	@ 0x80
 8003d00:	035b      	lsls	r3, r3, #13
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d204      	bcs.n	8003d10 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d0c:	60da      	str	r2, [r3, #12]
 8003d0e:	e0e9      	b.n	8003ee4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d10:	231a      	movs	r3, #26
 8003d12:	2220      	movs	r2, #32
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	19db      	adds	r3, r3, r7
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e0e2      	b.n	8003ee4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	2380      	movs	r3, #128	@ 0x80
 8003d24:	021b      	lsls	r3, r3, #8
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d000      	beq.n	8003d2c <UART_SetConfig+0x300>
 8003d2a:	e083      	b.n	8003e34 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003d2c:	231b      	movs	r3, #27
 8003d2e:	2220      	movs	r2, #32
 8003d30:	189b      	adds	r3, r3, r2
 8003d32:	19db      	adds	r3, r3, r7
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d015      	beq.n	8003d66 <UART_SetConfig+0x33a>
 8003d3a:	dc2b      	bgt.n	8003d94 <UART_SetConfig+0x368>
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d00d      	beq.n	8003d5c <UART_SetConfig+0x330>
 8003d40:	dc28      	bgt.n	8003d94 <UART_SetConfig+0x368>
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d002      	beq.n	8003d4c <UART_SetConfig+0x320>
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d005      	beq.n	8003d56 <UART_SetConfig+0x32a>
 8003d4a:	e023      	b.n	8003d94 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d4c:	f7fe fe86 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003d50:	0003      	movs	r3, r0
 8003d52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d54:	e027      	b.n	8003da6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d56:	4b0d      	ldr	r3, [pc, #52]	@ (8003d8c <UART_SetConfig+0x360>)
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d5a:	e024      	b.n	8003da6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5c:	f7fe fdf2 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003d60:	0003      	movs	r3, r0
 8003d62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d64:	e01f      	b.n	8003da6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003d6c:	e01b      	b.n	8003da6 <UART_SetConfig+0x37a>
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	cfff69f3 	.word	0xcfff69f3
 8003d74:	ffffcfff 	.word	0xffffcfff
 8003d78:	40008000 	.word	0x40008000
 8003d7c:	11fff4ff 	.word	0x11fff4ff
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40004400 	.word	0x40004400
 8003d8c:	00f42400 	.word	0x00f42400
 8003d90:	080044fc 	.word	0x080044fc
      default:
        pclk = 0U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003d98:	231a      	movs	r3, #26
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	189b      	adds	r3, r3, r2
 8003d9e:	19db      	adds	r3, r3, r7
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
        break;
 8003da4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d100      	bne.n	8003dae <UART_SetConfig+0x382>
 8003dac:	e09a      	b.n	8003ee4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003db2:	4b58      	ldr	r3, [pc, #352]	@ (8003f14 <UART_SetConfig+0x4e8>)
 8003db4:	0052      	lsls	r2, r2, #1
 8003db6:	5ad3      	ldrh	r3, [r2, r3]
 8003db8:	0019      	movs	r1, r3
 8003dba:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003dbc:	f7fc f9a2 	bl	8000104 <__udivsi3>
 8003dc0:	0003      	movs	r3, r0
 8003dc2:	005a      	lsls	r2, r3, #1
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	18d2      	adds	r2, r2, r3
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	0010      	movs	r0, r2
 8003dd4:	f7fc f996 	bl	8000104 <__udivsi3>
 8003dd8:	0003      	movs	r3, r0
 8003dda:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	2b0f      	cmp	r3, #15
 8003de0:	d921      	bls.n	8003e26 <UART_SetConfig+0x3fa>
 8003de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de4:	2380      	movs	r3, #128	@ 0x80
 8003de6:	025b      	lsls	r3, r3, #9
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d21c      	bcs.n	8003e26 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	200e      	movs	r0, #14
 8003df2:	2420      	movs	r4, #32
 8003df4:	1903      	adds	r3, r0, r4
 8003df6:	19db      	adds	r3, r3, r7
 8003df8:	210f      	movs	r1, #15
 8003dfa:	438a      	bics	r2, r1
 8003dfc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2207      	movs	r2, #7
 8003e06:	4013      	ands	r3, r2
 8003e08:	b299      	uxth	r1, r3
 8003e0a:	1903      	adds	r3, r0, r4
 8003e0c:	19db      	adds	r3, r3, r7
 8003e0e:	1902      	adds	r2, r0, r4
 8003e10:	19d2      	adds	r2, r2, r7
 8003e12:	8812      	ldrh	r2, [r2, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	1902      	adds	r2, r0, r4
 8003e1e:	19d2      	adds	r2, r2, r7
 8003e20:	8812      	ldrh	r2, [r2, #0]
 8003e22:	60da      	str	r2, [r3, #12]
 8003e24:	e05e      	b.n	8003ee4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e26:	231a      	movs	r3, #26
 8003e28:	2220      	movs	r2, #32
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	19db      	adds	r3, r3, r7
 8003e2e:	2201      	movs	r2, #1
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	e057      	b.n	8003ee4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e34:	231b      	movs	r3, #27
 8003e36:	2220      	movs	r2, #32
 8003e38:	189b      	adds	r3, r3, r2
 8003e3a:	19db      	adds	r3, r3, r7
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d015      	beq.n	8003e6e <UART_SetConfig+0x442>
 8003e42:	dc18      	bgt.n	8003e76 <UART_SetConfig+0x44a>
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d00d      	beq.n	8003e64 <UART_SetConfig+0x438>
 8003e48:	dc15      	bgt.n	8003e76 <UART_SetConfig+0x44a>
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <UART_SetConfig+0x428>
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d005      	beq.n	8003e5e <UART_SetConfig+0x432>
 8003e52:	e010      	b.n	8003e76 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fe02 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003e58:	0003      	movs	r3, r0
 8003e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e5c:	e014      	b.n	8003e88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f18 <UART_SetConfig+0x4ec>)
 8003e60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e62:	e011      	b.n	8003e88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e64:	f7fe fd6e 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8003e68:	0003      	movs	r3, r0
 8003e6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e6c:	e00c      	b.n	8003e88 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003e74:	e008      	b.n	8003e88 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003e7a:	231a      	movs	r3, #26
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	19db      	adds	r3, r3, r7
 8003e82:	2201      	movs	r2, #1
 8003e84:	701a      	strb	r2, [r3, #0]
        break;
 8003e86:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d02a      	beq.n	8003ee4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e92:	4b20      	ldr	r3, [pc, #128]	@ (8003f14 <UART_SetConfig+0x4e8>)
 8003e94:	0052      	lsls	r2, r2, #1
 8003e96:	5ad3      	ldrh	r3, [r2, r3]
 8003e98:	0019      	movs	r1, r3
 8003e9a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003e9c:	f7fc f932 	bl	8000104 <__udivsi3>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	001a      	movs	r2, r3
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	18d2      	adds	r2, r2, r3
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f7fc f926 	bl	8000104 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	2b0f      	cmp	r3, #15
 8003ec0:	d90a      	bls.n	8003ed8 <UART_SetConfig+0x4ac>
 8003ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	025b      	lsls	r3, r3, #9
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d205      	bcs.n	8003ed8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	e005      	b.n	8003ee4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ed8:	231a      	movs	r3, #26
 8003eda:	2220      	movs	r2, #32
 8003edc:	189b      	adds	r3, r3, r2
 8003ede:	19db      	adds	r3, r3, r7
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	226a      	movs	r2, #106	@ 0x6a
 8003ee8:	2101      	movs	r1, #1
 8003eea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	2268      	movs	r2, #104	@ 0x68
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	2200      	movs	r2, #0
 8003efe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f00:	231a      	movs	r3, #26
 8003f02:	2220      	movs	r2, #32
 8003f04:	189b      	adds	r3, r3, r2
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	781b      	ldrb	r3, [r3, #0]
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b010      	add	sp, #64	@ 0x40
 8003f10:	bdb0      	pop	{r4, r5, r7, pc}
 8003f12:	46c0      	nop			@ (mov r8, r8)
 8003f14:	080044fc 	.word	0x080044fc
 8003f18:	00f42400 	.word	0x00f42400

08003f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	2208      	movs	r2, #8
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00b      	beq.n	8003f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4a4a      	ldr	r2, [pc, #296]	@ (8004060 <UART_AdvFeatureConfig+0x144>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	d00b      	beq.n	8003f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	4a43      	ldr	r2, [pc, #268]	@ (8004064 <UART_AdvFeatureConfig+0x148>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	0019      	movs	r1, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a3b      	ldr	r2, [pc, #236]	@ (8004068 <UART_AdvFeatureConfig+0x14c>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	0019      	movs	r1, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4013      	ands	r3, r2
 8003f92:	d00b      	beq.n	8003fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	@ (800406c <UART_AdvFeatureConfig+0x150>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d00b      	beq.n	8003fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a2c      	ldr	r2, [pc, #176]	@ (8004070 <UART_AdvFeatureConfig+0x154>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d00b      	beq.n	8003ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	4a25      	ldr	r2, [pc, #148]	@ (8004074 <UART_AdvFeatureConfig+0x158>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff4:	2240      	movs	r2, #64	@ 0x40
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	d01d      	beq.n	8004036 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	4a1d      	ldr	r2, [pc, #116]	@ (8004078 <UART_AdvFeatureConfig+0x15c>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004016:	2380      	movs	r3, #128	@ 0x80
 8004018:	035b      	lsls	r3, r3, #13
 800401a:	429a      	cmp	r2, r3
 800401c:	d10b      	bne.n	8004036 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <UART_AdvFeatureConfig+0x160>)
 8004026:	4013      	ands	r3, r2
 8004028:	0019      	movs	r1, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403a:	2280      	movs	r2, #128	@ 0x80
 800403c:	4013      	ands	r3, r2
 800403e:	d00b      	beq.n	8004058 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	4a0e      	ldr	r2, [pc, #56]	@ (8004080 <UART_AdvFeatureConfig+0x164>)
 8004048:	4013      	ands	r3, r2
 800404a:	0019      	movs	r1, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]
  }
}
 8004058:	46c0      	nop			@ (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}
 8004060:	ffff7fff 	.word	0xffff7fff
 8004064:	fffdffff 	.word	0xfffdffff
 8004068:	fffeffff 	.word	0xfffeffff
 800406c:	fffbffff 	.word	0xfffbffff
 8004070:	ffffefff 	.word	0xffffefff
 8004074:	ffffdfff 	.word	0xffffdfff
 8004078:	ffefffff 	.word	0xffefffff
 800407c:	ff9fffff 	.word	0xff9fffff
 8004080:	fff7ffff 	.word	0xfff7ffff

08004084 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b092      	sub	sp, #72	@ 0x48
 8004088:	af02      	add	r7, sp, #8
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2290      	movs	r2, #144	@ 0x90
 8004090:	2100      	movs	r1, #0
 8004092:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004094:	f7fc ff74 	bl	8000f80 <HAL_GetTick>
 8004098:	0003      	movs	r3, r0
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2208      	movs	r2, #8
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d12d      	bne.n	8004106 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	2280      	movs	r2, #128	@ 0x80
 80040ae:	0391      	lsls	r1, r2, #14
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	4a47      	ldr	r2, [pc, #284]	@ (80041d0 <UART_CheckIdleState+0x14c>)
 80040b4:	9200      	str	r2, [sp, #0]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f000 f88e 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d022      	beq.n	8004106 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80040c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040ca:	2301      	movs	r3, #1
 80040cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d0:	f383 8810 	msr	PRIMASK, r3
}
 80040d4:	46c0      	nop			@ (mov r8, r8)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2180      	movs	r1, #128	@ 0x80
 80040e2:	438a      	bics	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ec:	f383 8810 	msr	PRIMASK, r3
}
 80040f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2288      	movs	r2, #136	@ 0x88
 80040f6:	2120      	movs	r1, #32
 80040f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2284      	movs	r2, #132	@ 0x84
 80040fe:	2100      	movs	r1, #0
 8004100:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e060      	b.n	80041c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2204      	movs	r2, #4
 800410e:	4013      	ands	r3, r2
 8004110:	2b04      	cmp	r3, #4
 8004112:	d146      	bne.n	80041a2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	2280      	movs	r2, #128	@ 0x80
 8004118:	03d1      	lsls	r1, r2, #15
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	4a2c      	ldr	r2, [pc, #176]	@ (80041d0 <UART_CheckIdleState+0x14c>)
 800411e:	9200      	str	r2, [sp, #0]
 8004120:	2200      	movs	r2, #0
 8004122:	f000 f859 	bl	80041d8 <UART_WaitOnFlagUntilTimeout>
 8004126:	1e03      	subs	r3, r0, #0
 8004128:	d03b      	beq.n	80041a2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800412a:	f3ef 8310 	mrs	r3, PRIMASK
 800412e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004130:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	2301      	movs	r3, #1
 8004136:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f383 8810 	msr	PRIMASK, r3
}
 800413e:	46c0      	nop			@ (mov r8, r8)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4922      	ldr	r1, [pc, #136]	@ (80041d4 <UART_CheckIdleState+0x150>)
 800414c:	400a      	ands	r2, r1
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004152:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800415c:	f3ef 8310 	mrs	r3, PRIMASK
 8004160:	61bb      	str	r3, [r7, #24]
  return(result);
 8004162:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	633b      	str	r3, [r7, #48]	@ 0x30
 8004166:	2301      	movs	r3, #1
 8004168:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	f383 8810 	msr	PRIMASK, r3
}
 8004170:	46c0      	nop			@ (mov r8, r8)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2101      	movs	r1, #1
 800417e:	438a      	bics	r2, r1
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	228c      	movs	r2, #140	@ 0x8c
 8004192:	2120      	movs	r1, #32
 8004194:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2284      	movs	r2, #132	@ 0x84
 800419a:	2100      	movs	r1, #0
 800419c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e012      	b.n	80041c8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2288      	movs	r2, #136	@ 0x88
 80041a6:	2120      	movs	r1, #32
 80041a8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	228c      	movs	r2, #140	@ 0x8c
 80041ae:	2120      	movs	r1, #32
 80041b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2284      	movs	r2, #132	@ 0x84
 80041c2:	2100      	movs	r1, #0
 80041c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	0018      	movs	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b010      	add	sp, #64	@ 0x40
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	01ffffff 	.word	0x01ffffff
 80041d4:	fffffedf 	.word	0xfffffedf

080041d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e8:	e051      	b.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	3301      	adds	r3, #1
 80041ee:	d04e      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f0:	f7fc fec6 	bl	8000f80 <HAL_GetTick>
 80041f4:	0002      	movs	r2, r0
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e051      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2204      	movs	r2, #4
 8004212:	4013      	ands	r3, r2
 8004214:	d03b      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b80      	cmp	r3, #128	@ 0x80
 800421a:	d038      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b40      	cmp	r3, #64	@ 0x40
 8004220:	d035      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69db      	ldr	r3, [r3, #28]
 8004228:	2208      	movs	r2, #8
 800422a:	4013      	ands	r3, r2
 800422c:	2b08      	cmp	r3, #8
 800422e:	d111      	bne.n	8004254 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2208      	movs	r2, #8
 8004236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	0018      	movs	r0, r3
 800423c:	f000 f83c 	bl	80042b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2290      	movs	r2, #144	@ 0x90
 8004244:	2108      	movs	r1, #8
 8004246:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2284      	movs	r2, #132	@ 0x84
 800424c:	2100      	movs	r1, #0
 800424e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e02c      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	69da      	ldr	r2, [r3, #28]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	401a      	ands	r2, r3
 8004260:	2380      	movs	r3, #128	@ 0x80
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	429a      	cmp	r2, r3
 8004266:	d112      	bne.n	800428e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2280      	movs	r2, #128	@ 0x80
 800426e:	0112      	lsls	r2, r2, #4
 8004270:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	0018      	movs	r0, r3
 8004276:	f000 f81f 	bl	80042b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2290      	movs	r2, #144	@ 0x90
 800427e:	2120      	movs	r1, #32
 8004280:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2284      	movs	r2, #132	@ 0x84
 8004286:	2100      	movs	r1, #0
 8004288:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e00f      	b.n	80042ae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	4013      	ands	r3, r2
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	425a      	negs	r2, r3
 800429e:	4153      	adcs	r3, r2
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	001a      	movs	r2, r3
 80042a4:	1dfb      	adds	r3, r7, #7
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d09e      	beq.n	80041ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b004      	add	sp, #16
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08e      	sub	sp, #56	@ 0x38
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042c0:	f3ef 8310 	mrs	r3, PRIMASK
 80042c4:	617b      	str	r3, [r7, #20]
  return(result);
 80042c6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ca:	2301      	movs	r3, #1
 80042cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4926      	ldr	r1, [pc, #152]	@ (800437c <UART_EndRxTransfer+0xc4>)
 80042e2:	400a      	ands	r2, r1
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f383 8810 	msr	PRIMASK, r3
}
 80042f0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042f2:	f3ef 8310 	mrs	r3, PRIMASK
 80042f6:	623b      	str	r3, [r7, #32]
  return(result);
 80042f8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fc:	2301      	movs	r3, #1
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	491b      	ldr	r1, [pc, #108]	@ (8004380 <UART_EndRxTransfer+0xc8>)
 8004314:	400a      	ands	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d118      	bne.n	800435e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800432c:	f3ef 8310 	mrs	r3, PRIMASK
 8004330:	60bb      	str	r3, [r7, #8]
  return(result);
 8004332:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004336:	2301      	movs	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			@ (mov r8, r8)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2110      	movs	r1, #16
 800434e:	438a      	bics	r2, r1
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004354:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	f383 8810 	msr	PRIMASK, r3
}
 800435c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	228c      	movs	r2, #140	@ 0x8c
 8004362:	2120      	movs	r1, #32
 8004364:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	46bd      	mov	sp, r7
 8004376:	b00e      	add	sp, #56	@ 0x38
 8004378:	bd80      	pop	{r7, pc}
 800437a:	46c0      	nop			@ (mov r8, r8)
 800437c:	fffffedf 	.word	0xfffffedf
 8004380:	effffffe 	.word	0xeffffffe

08004384 <memset>:
 8004384:	0003      	movs	r3, r0
 8004386:	1882      	adds	r2, r0, r2
 8004388:	4293      	cmp	r3, r2
 800438a:	d100      	bne.n	800438e <memset+0xa>
 800438c:	4770      	bx	lr
 800438e:	7019      	strb	r1, [r3, #0]
 8004390:	3301      	adds	r3, #1
 8004392:	e7f9      	b.n	8004388 <memset+0x4>

08004394 <__libc_init_array>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	2600      	movs	r6, #0
 8004398:	4c0c      	ldr	r4, [pc, #48]	@ (80043cc <__libc_init_array+0x38>)
 800439a:	4d0d      	ldr	r5, [pc, #52]	@ (80043d0 <__libc_init_array+0x3c>)
 800439c:	1b64      	subs	r4, r4, r5
 800439e:	10a4      	asrs	r4, r4, #2
 80043a0:	42a6      	cmp	r6, r4
 80043a2:	d109      	bne.n	80043b8 <__libc_init_array+0x24>
 80043a4:	2600      	movs	r6, #0
 80043a6:	f000 f819 	bl	80043dc <_init>
 80043aa:	4c0a      	ldr	r4, [pc, #40]	@ (80043d4 <__libc_init_array+0x40>)
 80043ac:	4d0a      	ldr	r5, [pc, #40]	@ (80043d8 <__libc_init_array+0x44>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	42a6      	cmp	r6, r4
 80043b4:	d105      	bne.n	80043c2 <__libc_init_array+0x2e>
 80043b6:	bd70      	pop	{r4, r5, r6, pc}
 80043b8:	00b3      	lsls	r3, r6, #2
 80043ba:	58eb      	ldr	r3, [r5, r3]
 80043bc:	4798      	blx	r3
 80043be:	3601      	adds	r6, #1
 80043c0:	e7ee      	b.n	80043a0 <__libc_init_array+0xc>
 80043c2:	00b3      	lsls	r3, r6, #2
 80043c4:	58eb      	ldr	r3, [r5, r3]
 80043c6:	4798      	blx	r3
 80043c8:	3601      	adds	r6, #1
 80043ca:	e7f2      	b.n	80043b2 <__libc_init_array+0x1e>
 80043cc:	0800451c 	.word	0x0800451c
 80043d0:	0800451c 	.word	0x0800451c
 80043d4:	08004520 	.word	0x08004520
 80043d8:	0800451c 	.word	0x0800451c

080043dc <_init>:
 80043dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043de:	46c0      	nop			@ (mov r8, r8)
 80043e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e2:	bc08      	pop	{r3}
 80043e4:	469e      	mov	lr, r3
 80043e6:	4770      	bx	lr

080043e8 <_fini>:
 80043e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ee:	bc08      	pop	{r3}
 80043f0:	469e      	mov	lr, r3
 80043f2:	4770      	bx	lr
