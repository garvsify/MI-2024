
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08005870  08005870  00006870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006374  08006374  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006374  08006374  00007374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800637c  0800637c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800637c  0800637c  0000737c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006384  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a58  20000010  08006394  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  08006394  00008a68  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fed5  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039b8  00000000  00000000  00027f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  0002b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000174e  00000000  00000000  0002c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b11  00000000  00000000  0002dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002097c  00000000  00000000  00045aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b52e  00000000  00000000  0006647b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001019a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ae8  00000000  00000000  001019ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000d69d  00000000  00000000  001044d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  00111b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005858 	.word	0x08005858

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005858 	.word	0x08005858

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b500      	push	{lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	2238      	movs	r2, #56	@ 0x38
 800044e:	2100      	movs	r1, #0
 8000450:	a804      	add	r0, sp, #16
 8000452:	f005 f9d5 	bl	8005800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f005 f9d0 	bl	8005800 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000460:	2080      	movs	r0, #128	@ 0x80
 8000462:	0080      	lsls	r0, r0, #2
 8000464:	f002 fdb0 	bl	8002fc8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	2302      	movs	r3, #2
 800046a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800046e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000470:	3306      	adds	r3, #6
 8000472:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800047a:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800047e:	04db      	lsls	r3, r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000482:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000484:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800048a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048c:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000490:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000492:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000494:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000496:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f002 fdc6 	bl	8003028 <HAL_RCC_OscConfig>
 800049c:	2800      	cmp	r0, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	2207      	movs	r2, #7
 80004a6:	2302      	movs	r3, #2
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	2102      	movs	r1, #2
 80004b2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	9202      	str	r2, [sp, #8]
 80004b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b8:	f003 f86c 	bl	8003594 <HAL_RCC_ClockConfig>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x7c>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x7a>
}
 80004c4:	b013      	add	sp, #76	@ 0x4c
 80004c6:	bd00      	pop	{pc}

080004c8 <MX_ADC1_Init>:
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 80004cc:	220c      	movs	r2, #12
 80004ce:	2100      	movs	r1, #0
 80004d0:	a801      	add	r0, sp, #4
 80004d2:	f005 f995 	bl	8005800 <memset>
  hadc1.Instance = ADC1;
 80004d6:	4c2c      	ldr	r4, [pc, #176]	@ (8000588 <MX_ADC1_Init+0xc0>)
 80004d8:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <MX_ADC1_Init+0xc4>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004da:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 80004dc:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004de:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e0:	0392      	lsls	r2, r2, #14
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	2120      	movs	r1, #32
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e4:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e6:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e8:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004ea:	2508      	movs	r5, #8
  hadc1.Init.NbrOfConversion = 4;
 80004ec:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004ee:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	5462      	strb	r2, [r4, r1]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004f4:	310c      	adds	r1, #12
 80004f6:	5462      	strb	r2, [r4, r1]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f8:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80004fa:	3110      	adds	r1, #16
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000500:	6165      	str	r5, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000502:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000506:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050c:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800050e:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000510:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000512:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000514:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000516:	f001 fe27 	bl	8002168 <HAL_ADC_Init>
 800051a:	2800      	cmp	r0, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0x5a>
 800051e:	b672      	cpsid	i
  while (1)
 8000520:	e7fe      	b.n	8000520 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_0;
 8000522:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	9002      	str	r0, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000526:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000528:	a901      	add	r1, sp, #4
 800052a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800052c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052e:	f001 ff95 	bl	800245c <HAL_ADC_ConfigChannel>
 8000532:	2800      	cmp	r0, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x72>
 8000536:	b672      	cpsid	i
  while (1)
 8000538:	e7fe      	b.n	8000538 <MX_ADC1_Init+0x70>
  sConfig.Channel = ADC_CHANNEL_1;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_ADC1_Init+0xc8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800053c:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	a901      	add	r1, sp, #4
 8000540:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000542:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000544:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	f001 ff89 	bl	800245c <HAL_ADC_ConfigChannel>
 800054a:	2800      	cmp	r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8a>
 800054e:	b672      	cpsid	i
  while (1)
 8000550:	e7fe      	b.n	8000550 <MX_ADC1_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_4;
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_ADC1_Init+0xcc>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000554:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	a901      	add	r1, sp, #4
 8000558:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800055a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800055c:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	f001 ff7d 	bl	800245c <HAL_ADC_ConfigChannel>
 8000562:	2800      	cmp	r0, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xa2>
 8000566:	b672      	cpsid	i
  while (1)
 8000568:	e7fe      	b.n	8000568 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_5;
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <MX_ADC1_Init+0xd0>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800056c:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 800056e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000570:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	0020      	movs	r0, r4
 8000574:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000576:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000578:	f001 ff70 	bl	800245c <HAL_ADC_ConfigChannel>
 800057c:	2800      	cmp	r0, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0xbc>
 8000580:	b672      	cpsid	i
  while (1)
 8000582:	e7fe      	b.n	8000582 <MX_ADC1_Init+0xba>
}
 8000584:	b004      	add	sp, #16
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	20000584 	.word	0x20000584
 800058c:	40012400 	.word	0x40012400
 8000590:	04000002 	.word	0x04000002
 8000594:	10000010 	.word	0x10000010
 8000598:	14000020 	.word	0x14000020

0800059c <MX_TIM14_Init>:
{
 800059c:	b510      	push	{r4, lr}
 800059e:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	221c      	movs	r2, #28
 80005a2:	2100      	movs	r1, #0
 80005a4:	4668      	mov	r0, sp
 80005a6:	f005 f92b 	bl	8005800 <memset>
  htim14.Instance = TIM14;
 80005aa:	4c17      	ldr	r4, [pc, #92]	@ (8000608 <MX_TIM14_Init+0x6c>)
 80005ac:	4b17      	ldr	r3, [pc, #92]	@ (800060c <MX_TIM14_Init+0x70>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005ae:	0020      	movs	r0, r4
  htim14.Instance = TIM14;
 80005b0:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	60a3      	str	r3, [r4, #8]
  htim14.Init.Period = 1023;
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <MX_TIM14_Init+0x74>)
 80005ba:	60e3      	str	r3, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	6123      	str	r3, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005c2:	3b80      	subs	r3, #128	@ 0x80
 80005c4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005c6:	f003 f9d1 	bl	800396c <HAL_TIM_Base_Init>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM14_Init+0x36>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MX_TIM14_Init+0x34>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80005d2:	0020      	movs	r0, r4
 80005d4:	f003 fcbc 	bl	8003f50 <HAL_TIM_PWM_Init>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM14_Init+0x44>
 80005dc:	b672      	cpsid	i
  while (1)
 80005de:	e7fe      	b.n	80005de <MX_TIM14_Init+0x42>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e0:	2260      	movs	r2, #96	@ 0x60
 80005e2:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e4:	9002      	str	r0, [sp, #8]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9301      	str	r3, [sp, #4]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ea:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ec:	2200      	movs	r2, #0
 80005ee:	4669      	mov	r1, sp
 80005f0:	0020      	movs	r0, r4
 80005f2:	f004 fa63 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM14_Init+0x62>
 80005fa:	b672      	cpsid	i
  while (1)
 80005fc:	e7fe      	b.n	80005fc <MX_TIM14_Init+0x60>
  HAL_TIM_MspPostInit(&htim14);
 80005fe:	0020      	movs	r0, r4
 8000600:	f001 f934 	bl	800186c <HAL_TIM_MspPostInit>
}
 8000604:	b008      	add	sp, #32
 8000606:	bd10      	pop	{r4, pc}
 8000608:	2000046c 	.word	0x2000046c
 800060c:	40002000 	.word	0x40002000
 8000610:	000003ff 	.word	0x000003ff

08000614 <MX_TIM16_Init>:
{
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000618:	221c      	movs	r2, #28
 800061a:	2100      	movs	r1, #0
 800061c:	4668      	mov	r0, sp
 800061e:	f005 f8ef 	bl	8005800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	a808      	add	r0, sp, #32
 8000628:	f005 f8ea 	bl	8005800 <memset>
  htim16.Instance = TIM16;
 800062c:	4c27      	ldr	r4, [pc, #156]	@ (80006cc <MX_TIM16_Init+0xb8>)
 800062e:	4b28      	ldr	r3, [pc, #160]	@ (80006d0 <MX_TIM16_Init+0xbc>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000630:	2280      	movs	r2, #128	@ 0x80
  htim16.Instance = TIM16;
 8000632:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 0;
 8000634:	2300      	movs	r3, #0
  htim16.Init.Period = 255;
 8000636:	25ff      	movs	r5, #255	@ 0xff
  htim16.Init.Prescaler = 0;
 8000638:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063a:	60a3      	str	r3, [r4, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800063c:	0092      	lsls	r2, r2, #2
  htim16.Init.RepetitionCounter = 0;
 800063e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000640:	0020      	movs	r0, r4
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000642:	3380      	adds	r3, #128	@ 0x80
  htim16.Init.Period = 255;
 8000644:	60e5      	str	r5, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000646:	6122      	str	r2, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000648:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800064a:	f003 f98f 	bl	800396c <HAL_TIM_Base_Init>
 800064e:	2800      	cmp	r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM16_Init+0x42>
 8000652:	b672      	cpsid	i
  while (1)
 8000654:	e7fe      	b.n	8000654 <MX_TIM16_Init+0x40>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000656:	0020      	movs	r0, r4
 8000658:	f003 fab0 	bl	8003bbc <HAL_TIM_OC_Init>
 800065c:	2800      	cmp	r0, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM16_Init+0x50>
 8000660:	b672      	cpsid	i
  while (1)
 8000662:	e7fe      	b.n	8000662 <MX_TIM16_Init+0x4e>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000664:	2200      	movs	r2, #0
 8000666:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000668:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066a:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800066c:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800066e:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000670:	4669      	mov	r1, sp
 8000672:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000674:	9204      	str	r2, [sp, #16]
 8000676:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 255;
 8000678:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067a:	f003 ffef 	bl	800465c <HAL_TIM_OC_ConfigChannel>
 800067e:	2800      	cmp	r0, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM16_Init+0x72>
 8000682:	b672      	cpsid	i
  while (1)
 8000684:	e7fe      	b.n	8000684 <MX_TIM16_Init+0x70>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000686:	2108      	movs	r1, #8
 8000688:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800068a:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800068c:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800068e:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000690:	430b      	orrs	r3, r1
 8000692:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000698:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800069a:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800069c:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 800069e:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a0:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006a2:	a908      	add	r1, sp, #32
 80006a4:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80006a8:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006aa:	f004 fd35 	bl	8005118 <HAL_TIMEx_ConfigBreakDeadTime>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM16_Init+0xa2>
 80006b2:	b672      	cpsid	i
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MX_TIM16_Init+0xa0>
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	2015      	movs	r0, #21
 80006bc:	f002 f99a 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80006c0:	2015      	movs	r0, #21
 80006c2:	f002 f9c1 	bl	8002a48 <HAL_NVIC_EnableIRQ>
}
 80006c6:	b017      	add	sp, #92	@ 0x5c
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	200003b0 	.word	0x200003b0
 80006d0:	40014400 	.word	0x40014400

080006d4 <MX_TIM2_Init>:
{
 80006d4:	b510      	push	{r4, lr}
 80006d6:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d8:	2210      	movs	r2, #16
 80006da:	2100      	movs	r1, #0
 80006dc:	a808      	add	r0, sp, #32
 80006de:	f005 f88f 	bl	8005800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e2:	220c      	movs	r2, #12
 80006e4:	2100      	movs	r1, #0
 80006e6:	a801      	add	r0, sp, #4
 80006e8:	f005 f88a 	bl	8005800 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ec:	2210      	movs	r2, #16
 80006ee:	2100      	movs	r1, #0
 80006f0:	a804      	add	r0, sp, #16
 80006f2:	f005 f885 	bl	8005800 <memset>
  htim2.Instance = TIM2;
 80006f6:	2380      	movs	r3, #128	@ 0x80
 80006f8:	4c22      	ldr	r4, [pc, #136]	@ (8000784 <MX_TIM2_Init+0xb0>)
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 64 - 1;
 80006fe:	233f      	movs	r3, #63	@ 0x3f
 8000700:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	2300      	movs	r3, #0
 8000704:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 2097152 - 1;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_TIM2_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000708:	0020      	movs	r0, r4
  htim2.Init.Period = 2097152 - 1;
 800070a:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800070c:	2380      	movs	r3, #128	@ 0x80
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000712:	3b81      	subs	r3, #129	@ 0x81
 8000714:	3bff      	subs	r3, #255	@ 0xff
 8000716:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000718:	f003 f928 	bl	800396c <HAL_TIM_Base_Init>
 800071c:	2800      	cmp	r0, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x50>
 8000720:	b672      	cpsid	i
  while (1)
 8000722:	e7fe      	b.n	8000722 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000726:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072a:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072e:	f004 fb69 	bl	8004e04 <HAL_TIM_ConfigClockSource>
 8000732:	2800      	cmp	r0, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x66>
 8000736:	b672      	cpsid	i
  while (1)
 8000738:	e7fe      	b.n	8000738 <MX_TIM2_Init+0x64>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800073a:	0020      	movs	r0, r4
 800073c:	f003 fd38 	bl	80041b0 <HAL_TIM_IC_Init>
 8000740:	2800      	cmp	r0, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0x74>
 8000744:	b672      	cpsid	i
  while (1)
 8000746:	e7fe      	b.n	8000746 <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000748:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074a:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800074c:	a901      	add	r1, sp, #4
 800074e:	0020      	movs	r0, r4
 8000750:	f004 fcaa 	bl	80050a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	2800      	cmp	r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x88>
 8000758:	b672      	cpsid	i
  while (1)
 800075a:	e7fe      	b.n	800075a <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800075c:	2202      	movs	r2, #2
 800075e:	2301      	movs	r3, #1
 8000760:	9204      	str	r2, [sp, #16]
 8000762:	9305      	str	r3, [sp, #20]
 8000764:	2200      	movs	r2, #0
 8000766:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000768:	0020      	movs	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800076a:	9206      	str	r2, [sp, #24]
 800076c:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800076e:	a904      	add	r1, sp, #16
 8000770:	2200      	movs	r2, #0
 8000772:	f004 f8c5 	bl	8004900 <HAL_TIM_IC_ConfigChannel>
 8000776:	2800      	cmp	r0, #0
 8000778:	d001      	beq.n	800077e <MX_TIM2_Init+0xaa>
 800077a:	b672      	cpsid	i
  while (1)
 800077c:	e7fe      	b.n	800077c <MX_TIM2_Init+0xa8>
}
 800077e:	b00c      	add	sp, #48	@ 0x30
 8000780:	bd10      	pop	{r4, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	200002f4 	.word	0x200002f4
 8000788:	001fffff 	.word	0x001fffff

0800078c <MX_TIM3_Init>:
{
 800078c:	b510      	push	{r4, lr}
 800078e:	b090      	sub	sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000790:	2210      	movs	r2, #16
 8000792:	2100      	movs	r1, #0
 8000794:	a804      	add	r0, sp, #16
 8000796:	f005 f833 	bl	8005800 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079a:	220c      	movs	r2, #12
 800079c:	2100      	movs	r1, #0
 800079e:	a801      	add	r0, sp, #4
 80007a0:	f005 f82e 	bl	8005800 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a4:	221c      	movs	r2, #28
 80007a6:	2100      	movs	r1, #0
 80007a8:	a808      	add	r0, sp, #32
 80007aa:	f005 f829 	bl	8005800 <memset>
  htim3.Instance = TIM3;
 80007ae:	4c21      	ldr	r4, [pc, #132]	@ (8000834 <MX_TIM3_Init+0xa8>)
 80007b0:	4b21      	ldr	r3, [pc, #132]	@ (8000838 <MX_TIM3_Init+0xac>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b2:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 80007b4:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_TIM3_Init+0xb0>)
 80007b8:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	2300      	movs	r3, #0
 80007bc:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 4096 - 1;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_TIM3_Init+0xb4>)
 80007c0:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80007c2:	2380      	movs	r3, #128	@ 0x80
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	3b81      	subs	r3, #129	@ 0x81
 80007ca:	3bff      	subs	r3, #255	@ 0xff
 80007cc:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007ce:	f003 f8cd 	bl	800396c <HAL_TIM_Base_Init>
 80007d2:	2800      	cmp	r0, #0
 80007d4:	d001      	beq.n	80007da <MX_TIM3_Init+0x4e>
 80007d6:	b672      	cpsid	i
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <MX_TIM3_Init+0x4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007da:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007dc:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e0:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e4:	f004 fb0e 	bl	8004e04 <HAL_TIM_ConfigClockSource>
 80007e8:	2800      	cmp	r0, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM3_Init+0x64>
 80007ec:	b672      	cpsid	i
  while (1)
 80007ee:	e7fe      	b.n	80007ee <MX_TIM3_Init+0x62>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80007f0:	0020      	movs	r0, r4
 80007f2:	f003 f9e3 	bl	8003bbc <HAL_TIM_OC_Init>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM3_Init+0x72>
 80007fa:	b672      	cpsid	i
  while (1)
 80007fc:	e7fe      	b.n	80007fc <MX_TIM3_Init+0x70>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007fe:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000800:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000802:	a901      	add	r1, sp, #4
 8000804:	0020      	movs	r0, r4
 8000806:	f004 fc4f 	bl	80050a8 <HAL_TIMEx_MasterConfigSynchronization>
 800080a:	2800      	cmp	r0, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0x86>
 800080e:	b672      	cpsid	i
  while (1)
 8000810:	e7fe      	b.n	8000810 <MX_TIM3_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000812:	2200      	movs	r2, #0
 8000814:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000816:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000818:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081a:	a908      	add	r1, sp, #32
 800081c:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800081e:	9208      	str	r2, [sp, #32]
 8000820:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000822:	f003 ff1b 	bl	800465c <HAL_TIM_OC_ConfigChannel>
 8000826:	2800      	cmp	r0, #0
 8000828:	d001      	beq.n	800082e <MX_TIM3_Init+0xa2>
 800082a:	b672      	cpsid	i
  while (1)
 800082c:	e7fe      	b.n	800082c <MX_TIM3_Init+0xa0>
}
 800082e:	b010      	add	sp, #64	@ 0x40
 8000830:	bd10      	pop	{r4, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	20000238 	.word	0x20000238
 8000838:	40000400 	.word	0x40000400
 800083c:	00007fff 	.word	0x00007fff
 8000840:	00000fff 	.word	0x00000fff

08000844 <MX_TIM1_Init>:
{
 8000844:	b5d0      	push	{r4, r6, r7, lr}
 8000846:	b098      	sub	sp, #96	@ 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	220c      	movs	r2, #12
 800084a:	2100      	movs	r1, #0
 800084c:	4668      	mov	r0, sp
 800084e:	f004 ffd7 	bl	8005800 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	221c      	movs	r2, #28
 8000854:	2100      	movs	r1, #0
 8000856:	a804      	add	r0, sp, #16
 8000858:	f004 ffd2 	bl	8005800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085c:	2234      	movs	r2, #52	@ 0x34
 800085e:	2100      	movs	r1, #0
 8000860:	a80b      	add	r0, sp, #44	@ 0x2c
 8000862:	f004 ffcd 	bl	8005800 <memset>
  htim1.Instance = TIM1;
 8000866:	4c28      	ldr	r4, [pc, #160]	@ (8000908 <MX_TIM1_Init+0xc4>)
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <MX_TIM1_Init+0xc8>)
  htim1.Init.Period = 1023;
 800086a:	4a29      	ldr	r2, [pc, #164]	@ (8000910 <MX_TIM1_Init+0xcc>)
  htim1.Instance = TIM1;
 800086c:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1023;
 800086e:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 8000870:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000872:	2280      	movs	r2, #128	@ 0x80
  htim1.Init.Prescaler = 0;
 8000874:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000878:	0052      	lsls	r2, r2, #1
  htim1.Init.RepetitionCounter = 0;
 800087a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087c:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087e:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000880:	6122      	str	r2, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000882:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000884:	f003 fb64 	bl	8003f50 <HAL_TIM_PWM_Init>
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x4c>
 800088c:	b672      	cpsid	i
  while (1)
 800088e:	e7fe      	b.n	800088e <MX_TIM1_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000890:	2600      	movs	r6, #0
 8000892:	2700      	movs	r7, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000896:	4669      	mov	r1, sp
 8000898:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	9600      	str	r6, [sp, #0]
 800089c:	9701      	str	r7, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089e:	f004 fc03 	bl	80050a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	2800      	cmp	r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x66>
 80008a6:	b672      	cpsid	i
  while (1)
 80008a8:	e7fe      	b.n	80008a8 <MX_TIM1_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008aa:	2260      	movs	r2, #96	@ 0x60
 80008ac:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ae:	9006      	str	r0, [sp, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b0:	9204      	str	r2, [sp, #16]
 80008b2:	9305      	str	r3, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b4:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008b6:	3a54      	subs	r2, #84	@ 0x54
 80008b8:	0020      	movs	r0, r4
 80008ba:	a904      	add	r1, sp, #16
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008bc:	9608      	str	r6, [sp, #32]
 80008be:	9709      	str	r7, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c0:	f004 f8fc 	bl	8004abc <HAL_TIM_PWM_ConfigChannel>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x88>
 80008c8:	b672      	cpsid	i
  while (1)
 80008ca:	e7fe      	b.n	80008ca <MX_TIM1_Init+0x86>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008cc:	2380      	movs	r3, #128	@ 0x80
 80008ce:	019b      	lsls	r3, r3, #6
 80008d0:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d2:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d4:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008d6:	900c      	str	r0, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008d8:	900d      	str	r0, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 80008da:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008dc:	900f      	str	r0, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008de:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008e0:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008e2:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e4:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008e6:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008e8:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ea:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ec:	a90b      	add	r1, sp, #44	@ 0x2c
 80008ee:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f0:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f2:	f004 fc11 	bl	8005118 <HAL_TIMEx_ConfigBreakDeadTime>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0xba>
 80008fa:	b672      	cpsid	i
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MX_TIM1_Init+0xb8>
  HAL_TIM_MspPostInit(&htim1);
 80008fe:	0020      	movs	r0, r4
 8000900:	f000 ffb4 	bl	800186c <HAL_TIM_MspPostInit>
}
 8000904:	b018      	add	sp, #96	@ 0x60
 8000906:	bdd0      	pop	{r4, r6, r7, pc}
 8000908:	2000017c 	.word	0x2000017c
 800090c:	40012c00 	.word	0x40012c00
 8000910:	000003ff 	.word	0x000003ff

08000914 <MX_TIM17_Init>:
{
 8000914:	b530      	push	{r4, r5, lr}
 8000916:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000918:	221c      	movs	r2, #28
 800091a:	2100      	movs	r1, #0
 800091c:	4668      	mov	r0, sp
 800091e:	f004 ff6f 	bl	8005800 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000922:	2234      	movs	r2, #52	@ 0x34
 8000924:	2100      	movs	r1, #0
 8000926:	a808      	add	r0, sp, #32
 8000928:	f004 ff6a 	bl	8005800 <memset>
  htim17.Instance = TIM17;
 800092c:	4c23      	ldr	r4, [pc, #140]	@ (80009bc <MX_TIM17_Init+0xa8>)
 800092e:	4b24      	ldr	r3, [pc, #144]	@ (80009c0 <MX_TIM17_Init+0xac>)
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000930:	2280      	movs	r2, #128	@ 0x80
  htim17.Instance = TIM17;
 8000932:	6023      	str	r3, [r4, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <MX_TIM17_Init+0xb0>)
  htim17.Init.Period = 50 - 1;
 8000936:	2531      	movs	r5, #49	@ 0x31
  htim17.Init.Prescaler = (512*64)- 1;
 8000938:	6063      	str	r3, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093a:	2300      	movs	r3, #0
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800093c:	0092      	lsls	r2, r2, #2
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	60a3      	str	r3, [r4, #8]
  htim17.Init.RepetitionCounter = 0;
 8000940:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000942:	0020      	movs	r0, r4
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000944:	3380      	adds	r3, #128	@ 0x80
  htim17.Init.Period = 50 - 1;
 8000946:	60e5      	str	r5, [r4, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000948:	6122      	str	r2, [r4, #16]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800094a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800094c:	f003 f80e 	bl	800396c <HAL_TIM_Base_Init>
 8000950:	2800      	cmp	r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM17_Init+0x44>
 8000954:	b672      	cpsid	i
  while (1)
 8000956:	e7fe      	b.n	8000956 <MX_TIM17_Init+0x42>
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000958:	0020      	movs	r0, r4
 800095a:	f003 f92f 	bl	8003bbc <HAL_TIM_OC_Init>
 800095e:	2800      	cmp	r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM17_Init+0x52>
 8000962:	b672      	cpsid	i
  while (1)
 8000964:	e7fe      	b.n	8000964 <MX_TIM17_Init+0x50>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2200      	movs	r2, #0
 8000968:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800096a:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800096e:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000970:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000972:	4669      	mov	r1, sp
 8000974:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000976:	9204      	str	r2, [sp, #16]
 8000978:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 50 - 1;
 800097a:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800097c:	f003 fe6e 	bl	800465c <HAL_TIM_OC_ConfigChannel>
 8000980:	2800      	cmp	r0, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM17_Init+0x74>
 8000984:	b672      	cpsid	i
  while (1)
 8000986:	e7fe      	b.n	8000986 <MX_TIM17_Init+0x72>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000988:	2108      	movs	r1, #8
 800098a:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098c:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 800098e:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000990:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000992:	430b      	orrs	r3, r1
 8000994:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000996:	2380      	movs	r3, #128	@ 0x80
 8000998:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800099a:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800099c:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099e:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 80009a0:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009a2:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009a4:	a908      	add	r1, sp, #32
 80009a6:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009a8:	920c      	str	r2, [sp, #48]	@ 0x30
 80009aa:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80009ac:	f004 fbb4 	bl	8005118 <HAL_TIMEx_ConfigBreakDeadTime>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d001      	beq.n	80009b8 <MX_TIM17_Init+0xa4>
 80009b4:	b672      	cpsid	i
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <MX_TIM17_Init+0xa2>
}
 80009b8:	b017      	add	sp, #92	@ 0x5c
 80009ba:	bd30      	pop	{r4, r5, pc}
 80009bc:	200000c0 	.word	0x200000c0
 80009c0:	40014800 	.word	0x40014800
 80009c4:	00007fff 	.word	0x00007fff

080009c8 <MX_GPIO_Init>:
{
 80009c8:	b570      	push	{r4, r5, r6, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	2214      	movs	r2, #20
 80009ce:	2100      	movs	r1, #0
 80009d0:	a804      	add	r0, sp, #16
 80009d2:	f004 ff15 	bl	8005800 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	2204      	movs	r2, #4
 80009d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000a94 <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2401      	movs	r4, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009de:	4e2e      	ldr	r6, [pc, #184]	@ (8000a98 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e0:	4311      	orrs	r1, r2
 80009e2:	6359      	str	r1, [r3, #52]	@ 0x34
 80009e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80009e6:	0030      	movs	r0, r6
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e8:	400a      	ands	r2, r1
 80009ea:	9201      	str	r2, [sp, #4]
 80009ec:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ee:	2220      	movs	r2, #32
 80009f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f4:	4311      	orrs	r1, r2
 80009f6:	6359      	str	r1, [r3, #52]	@ 0x34
 80009f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80009fa:	400a      	ands	r2, r1
 80009fc:	9202      	str	r2, [sp, #8]
 80009fe:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a02:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a04:	4322      	orrs	r2, r4
 8000a06:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0c:	4023      	ands	r3, r4
 8000a0e:	9303      	str	r3, [sp, #12]
 8000a10:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a12:	f002 fab7 	bl	8002f84 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a16:	2388      	movs	r3, #136	@ 0x88
 8000a18:	2204      	movs	r2, #4
 8000a1a:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	a904      	add	r1, sp, #16
 8000a1e:	481f      	ldr	r0, [pc, #124]	@ (8000a9c <MX_GPIO_Init+0xd4>)
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a20:	9204      	str	r2, [sp, #16]
 8000a22:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f002 f9bb 	bl	8002da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a2a:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	0030      	movs	r0, r6
 8000a2e:	a904      	add	r1, sp, #16
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000a30:	26a0      	movs	r6, #160	@ 0xa0
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a32:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f002 f9b1 	bl	8002da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000a3e:	2380      	movs	r3, #128	@ 0x80
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000a40:	05f6      	lsls	r6, r6, #23
 8000a42:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000a44:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000a46:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000a48:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f002 f9a6 	bl	8002da0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BOUNCY_Pin;
 8000a54:	2280      	movs	r2, #128	@ 0x80
 8000a56:	2384      	movs	r3, #132	@ 0x84
 8000a58:	00d2      	lsls	r2, r2, #3
  HAL_GPIO_Init(BOUNCY_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = BOUNCY_Pin;
 8000a5c:	039b      	lsls	r3, r3, #14
  HAL_GPIO_Init(BOUNCY_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BOUNCY_Pin;
 8000a60:	9204      	str	r2, [sp, #16]
 8000a62:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a64:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BOUNCY_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f002 f99b 	bl	8002da0 <HAL_GPIO_Init>
   GPIO_InitStruct.Pin = DEBOUNCED_Pin;
 8000a6a:	2380      	movs	r3, #128	@ 0x80
   HAL_GPIO_Init(DEBOUNCED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	0030      	movs	r0, r6
   GPIO_InitStruct.Pin = DEBOUNCED_Pin;
 8000a6e:	009b      	lsls	r3, r3, #2
   HAL_GPIO_Init(DEBOUNCED_GPIO_Port, &GPIO_InitStruct);
 8000a70:	a904      	add	r1, sp, #16
   GPIO_InitStruct.Pin = DEBOUNCED_Pin;
 8000a72:	9304      	str	r3, [sp, #16]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	9405      	str	r4, [sp, #20]
   GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	9406      	str	r4, [sp, #24]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	9507      	str	r5, [sp, #28]
   HAL_GPIO_Init(DEBOUNCED_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f002 f991 	bl	8002da0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2100      	movs	r1, #0
 8000a82:	2007      	movs	r0, #7
 8000a84:	f001 ffb6 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a88:	2007      	movs	r0, #7
 8000a8a:	f001 ffdd 	bl	8002a48 <HAL_NVIC_EnableIRQ>
}
 8000a8e:	b00a      	add	sp, #40	@ 0x28
 8000a90:	bd70      	pop	{r4, r5, r6, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000
 8000a98:	50000800 	.word	0x50000800
 8000a9c:	50001400 	.word	0x50001400

08000aa0 <Error_Handler>:
 8000aa0:	b672      	cpsid	i
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <Error_Handler+0x2>

08000aa4 <System_Init>:
  {

  }
}

void System_Init(void){
 8000aa4:	b510      	push	{r4, lr}
 8000aa6:	b082      	sub	sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa8:	f001 faca 	bl	8002040 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000aac:	f7ff fccc 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ab0:	f7ff ff8a 	bl	80009c8 <MX_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b74 <System_Init+0xd0>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000ab8:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000abc:	4319      	orrs	r1, r3
 8000abe:	6391      	str	r1, [r2, #56]	@ 0x38
 8000ac0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000ac2:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000ac8:	2202      	movs	r2, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000acc:	f001 ff92 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ad0:	2009      	movs	r0, #9
 8000ad2:	f001 ffb9 	bl	8002a48 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 2, 2);
 8000ad6:	2202      	movs	r2, #2
 8000ad8:	2102      	movs	r1, #2
 8000ada:	200b      	movs	r0, #11
 8000adc:	f001 ff8a 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8000ae0:	200b      	movs	r0, #11
 8000ae2:	f001 ffb1 	bl	8002a48 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000ae6:	4824      	ldr	r0, [pc, #144]	@ (8000b78 <System_Init+0xd4>)
 8000ae8:	4b24      	ldr	r3, [pc, #144]	@ (8000b7c <System_Init+0xd8>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aea:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000aec:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	23e1      	movs	r3, #225	@ 0xe1
 8000af0:	025b      	lsls	r3, r3, #9
 8000af2:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afc:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b04:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b08:	f004 fd2c 	bl	8005564 <HAL_UART_Init>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d001      	beq.n	8000b14 <System_Init+0x70>
 8000b10:	b672      	cpsid	i
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <System_Init+0x6e>
	MX_DMA_Init();
	MX_USART2_UART_Init();
	MX_ADC1_Init();
 8000b14:	f7ff fcd8 	bl	80004c8 <MX_ADC1_Init>
	MX_TIM14_Init(); //PWM Gen. Main Oscillator
 8000b18:	f7ff fd40 	bl	800059c <MX_TIM14_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8000b1c:	f7ff fd7a 	bl	8000614 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8000b20:	f7ff fdd8 	bl	80006d4 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8000b24:	f7ff fe32 	bl	800078c <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Secondary Oscillator
 8000b28:	f7ff fe8c 	bl	8000844 <MX_TIM1_Init>
	MX_TIM17_Init(); //Tap Tempo Debouncing Timer
 8000b2c:	f7ff fef2 	bl	8000914 <MX_TIM17_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000b30:	2114      	movs	r1, #20
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <System_Init+0xdc>)
 8000b34:	4813      	ldr	r0, [pc, #76]	@ (8000b84 <System_Init+0xe0>)
 8000b36:	f004 fa35 	bl	8004fa4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4a12      	ldr	r2, [pc, #72]	@ (8000b88 <System_Init+0xe4>)
 8000b3e:	4813      	ldr	r0, [pc, #76]	@ (8000b8c <System_Init+0xe8>)
 8000b40:	f001 fc54 	bl	80023ec <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8000b44:	4c12      	ldr	r4, [pc, #72]	@ (8000b90 <System_Init+0xec>)
 8000b46:	2112      	movs	r1, #18
 8000b48:	0020      	movs	r0, r4
 8000b4a:	4a12      	ldr	r2, [pc, #72]	@ (8000b94 <System_Init+0xf0>)
 8000b4c:	f004 fa2a 	bl	8004fa4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8000b50:	210e      	movs	r1, #14
 8000b52:	0020      	movs	r0, r4
 8000b54:	4a10      	ldr	r2, [pc, #64]	@ (8000b98 <System_Init+0xf4>)
 8000b56:	f004 fa25 	bl	8004fa4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8000b5a:	2114      	movs	r1, #20
 8000b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b9c <System_Init+0xf8>)
 8000b5e:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <System_Init+0xfc>)
 8000b60:	f004 fa20 	bl	8004fa4 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM17 debounce (CCR match)
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback_debounce);
 8000b64:	2114      	movs	r1, #20
 8000b66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba4 <System_Init+0x100>)
 8000b68:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <System_Init+0x104>)
 8000b6a:	f004 fa1b 	bl	8004fa4 <HAL_TIM_RegisterCallback>
}
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd10      	pop	{r4, pc}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000
 8000b78:	2000002c 	.word	0x2000002c
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	08000bad 	.word	0x08000bad
 8000b84:	200003b0 	.word	0x200003b0
 8000b88:	08000e55 	.word	0x08000e55
 8000b8c:	20000584 	.word	0x20000584
 8000b90:	200002f4 	.word	0x200002f4
 8000b94:	08000f4d 	.word	0x08000f4d
 8000b98:	080014d1 	.word	0x080014d1
 8000b9c:	080014f5 	.word	0x080014f5
 8000ba0:	20000238 	.word	0x20000238
 8000ba4:	080015a9 	.word	0x080015a9
 8000ba8:	200000c0 	.word	0x200000c0

08000bac <TIM16_callback>:
{
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
	//Global_Interrupt_Disable();
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000bac:	2180      	movs	r1, #128	@ 0x80
 8000bae:	20a0      	movs	r0, #160	@ 0xa0
{
 8000bb0:	b570      	push	{r4, r5, r6, lr}
	TIM16_callback_active = YES;
 8000bb2:	2501      	movs	r5, #1
 8000bb4:	4c8c      	ldr	r4, [pc, #560]	@ (8000de8 <TIM16_callback+0x23c>)
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	0149      	lsls	r1, r1, #5
 8000bba:	05c0      	lsls	r0, r0, #23
{
 8000bbc:	b082      	sub	sp, #8
	TIM16_callback_active = YES;
 8000bbe:	7025      	strb	r5, [r4, #0]
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000bc0:	f002 f9e0 	bl	8002f84 <HAL_GPIO_WritePin>
	}*/

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000bc4:	4a89      	ldr	r2, [pc, #548]	@ (8000dec <TIM16_callback+0x240>)
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000bc6:	488a      	ldr	r0, [pc, #552]	@ (8000df0 <TIM16_callback+0x244>)
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000bc8:	6953      	ldr	r3, [r2, #20]
 8000bca:	432b      	orrs	r3, r5
 8000bcc:	6153      	str	r3, [r2, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 8000bce:	4b89      	ldr	r3, [pc, #548]	@ (8000df4 <TIM16_callback+0x248>)
 8000bd0:	4a89      	ldr	r2, [pc, #548]	@ (8000df8 <TIM16_callback+0x24c>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	6811      	ldr	r1, [r2, #0]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	624b      	str	r3, [r1, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000bda:	4b88      	ldr	r3, [pc, #544]	@ (8000dfc <TIM16_callback+0x250>)
 8000bdc:	781a      	ldrb	r2, [r3, #0]
 8000bde:	4b88      	ldr	r3, [pc, #544]	@ (8000e00 <TIM16_callback+0x254>)
 8000be0:	0052      	lsls	r2, r2, #1
 8000be2:	5ad3      	ldrh	r3, [r2, r3]
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000be4:	4a87      	ldr	r2, [pc, #540]	@ (8000e04 <TIM16_callback+0x258>)
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000be6:	3b01      	subs	r3, #1
 8000be8:	628b      	str	r3, [r1, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000bea:	8803      	ldrh	r3, [r0, #0]
 8000bec:	6812      	ldr	r2, [r2, #0]
 8000bee:	b29b      	uxth	r3, r3

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000bf0:	4985      	ldr	r1, [pc, #532]	@ (8000e08 <TIM16_callback+0x25c>)
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000bf2:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000bf4:	4a85      	ldr	r2, [pc, #532]	@ (8000e0c <TIM16_callback+0x260>)
 8000bf6:	880b      	ldrh	r3, [r1, #0]
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40

	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000bfe:	4b84      	ldr	r3, [pc, #528]	@ (8000e10 <TIM16_callback+0x264>)
 8000c00:	881a      	ldrh	r2, [r3, #0]
 8000c02:	3201      	adds	r2, #1
 8000c04:	b292      	uxth	r2, r2
 8000c06:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 8000c08:	2280      	movs	r2, #128	@ 0x80
 8000c0a:	881d      	ldrh	r5, [r3, #0]
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4295      	cmp	r5, r2
 8000c10:	d105      	bne.n	8000c1e <TIM16_callback+0x72>
		current_quadrant = FIRST_QUADRANT;
 8000c12:	2200      	movs	r2, #0
 8000c14:	4d7f      	ldr	r5, [pc, #508]	@ (8000e14 <TIM16_callback+0x268>)
 8000c16:	702a      	strb	r2, [r5, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000c18:	4d7f      	ldr	r5, [pc, #508]	@ (8000e18 <TIM16_callback+0x26c>)
 8000c1a:	702a      	strb	r2, [r5, #0]
		current_index = 0;
 8000c1c:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 8000c1e:	4a7f      	ldr	r2, [pc, #508]	@ (8000e1c <TIM16_callback+0x270>)
 8000c20:	7815      	ldrb	r5, [r2, #0]
 8000c22:	2d00      	cmp	r5, #0
 8000c24:	d000      	beq.n	8000c28 <TIM16_callback+0x7c>
 8000c26:	e086      	b.n	8000d36 <TIM16_callback+0x18a>
		duty = tri_wavetable[current_index];
 8000c28:	881d      	ldrh	r5, [r3, #0]
 8000c2a:	4a7d      	ldr	r2, [pc, #500]	@ (8000e20 <TIM16_callback+0x274>)
 8000c2c:	006d      	lsls	r5, r5, #1
 8000c2e:	5aad      	ldrh	r5, [r5, r2]
 8000c30:	4a7c      	ldr	r2, [pc, #496]	@ (8000e24 <TIM16_callback+0x278>)
 8000c32:	8015      	strh	r5, [r2, #0]
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
			duty = 0;
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 8000c34:	881d      	ldrh	r5, [r3, #0]
 8000c36:	b2ae      	uxth	r6, r5
 8000c38:	2d00      	cmp	r5, #0
 8000c3a:	d15b      	bne.n	8000cf4 <TIM16_callback+0x148>
		current_quadrant = FIRST_QUADRANT;
 8000c3c:	4b75      	ldr	r3, [pc, #468]	@ (8000e14 <TIM16_callback+0x268>)
 8000c3e:	701e      	strb	r6, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000c40:	4b75      	ldr	r3, [pc, #468]	@ (8000e18 <TIM16_callback+0x26c>)
 8000c42:	701e      	strb	r6, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000c44:	4b78      	ldr	r3, [pc, #480]	@ (8000e28 <TIM16_callback+0x27c>)
 8000c46:	881d      	ldrh	r5, [r3, #0]
 8000c48:	2dff      	cmp	r5, #255	@ 0xff
 8000c4a:	d100      	bne.n	8000c4e <TIM16_callback+0xa2>
 8000c4c:	e099      	b.n	8000d82 <TIM16_callback+0x1d6>
			duty = 1023 - duty;
		}
		else if(current_depth != 0){
 8000c4e:	881d      	ldrh	r5, [r3, #0]
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d000      	beq.n	8000c56 <TIM16_callback+0xaa>
 8000c54:	e062      	b.n	8000d1c <TIM16_callback+0x170>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000c56:	4b75      	ldr	r3, [pc, #468]	@ (8000e2c <TIM16_callback+0x280>)
 8000c58:	8013      	strh	r3, [r2, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	prev_duty = duty;
 8000c5a:	8813      	ldrh	r3, [r2, #0]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	8003      	strh	r3, [r0, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
	if(duty_delay_line_start_offset != 0){
 8000c60:	4b73      	ldr	r3, [pc, #460]	@ (8000e30 <TIM16_callback+0x284>)
 8000c62:	8818      	ldrh	r0, [r3, #0]
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d100      	bne.n	8000c6a <TIM16_callback+0xbe>
 8000c68:	e084      	b.n	8000d74 <TIM16_callback+0x1c8>
		duty_delay_line_storage_array[duty_delay_line_start_offset - 1] = duty;
 8000c6a:	8818      	ldrh	r0, [r3, #0]
 8000c6c:	8815      	ldrh	r5, [r2, #0]
 8000c6e:	3801      	subs	r0, #1
 8000c70:	4a70      	ldr	r2, [pc, #448]	@ (8000e34 <TIM16_callback+0x288>)
 8000c72:	b2ad      	uxth	r5, r5
 8000c74:	0040      	lsls	r0, r0, #1
 8000c76:	5215      	strh	r5, [r2, r0]
	else{
		duty_delay_line_storage_array[FINAL_INDEX + 1] = duty;
	}

	//DECREMENT THE START AND FINISH POINTERS
	if(duty_delay_line_start_offset == 0){
 8000c78:	8818      	ldrh	r0, [r3, #0]
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d000      	beq.n	8000c80 <TIM16_callback+0xd4>
 8000c7e:	e06d      	b.n	8000d5c <TIM16_callback+0x1b0>
		duty_delay_line_start_offset = FINAL_INDEX + 1;
 8000c80:	2080      	movs	r0, #128	@ 0x80
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000c82:	4d6d      	ldr	r5, [pc, #436]	@ (8000e38 <TIM16_callback+0x28c>)
		duty_delay_line_start_offset = FINAL_INDEX + 1;
 8000c84:	0080      	lsls	r0, r0, #2
 8000c86:	8018      	strh	r0, [r3, #0]
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000c88:	8828      	ldrh	r0, [r5, #0]
 8000c8a:	3801      	subs	r0, #1
 8000c8c:	b280      	uxth	r0, r0
 8000c8e:	8028      	strh	r0, [r5, #0]
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
	}

	//DETERMINE THE DELAYED WAVE'S VALUES
	if(duty_delay_line_start_offset + duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8000c90:	4d6a      	ldr	r5, [pc, #424]	@ (8000e3c <TIM16_callback+0x290>)
 8000c92:	8818      	ldrh	r0, [r3, #0]
 8000c94:	882e      	ldrh	r6, [r5, #0]
		duty_delayed = *(duty_delay_line_storage_array + (duty_delay_line_start_offset + duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8000c96:	881b      	ldrh	r3, [r3, #0]
	if(duty_delay_line_start_offset + duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8000c98:	1980      	adds	r0, r0, r6
 8000c9a:	2680      	movs	r6, #128	@ 0x80
 8000c9c:	00b6      	lsls	r6, r6, #2
 8000c9e:	42b0      	cmp	r0, r6
 8000ca0:	dd54      	ble.n	8000d4c <TIM16_callback+0x1a0>
		duty_delayed = *(duty_delay_line_storage_array + (duty_delay_line_start_offset + duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8000ca2:	8828      	ldrh	r0, [r5, #0]
 8000ca4:	181b      	adds	r3, r3, r0
 8000ca6:	4866      	ldr	r0, [pc, #408]	@ (8000e40 <TIM16_callback+0x294>)
 8000ca8:	4684      	mov	ip, r0
 8000caa:	4463      	add	r3, ip
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	18d3      	adds	r3, r2, r3
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	800b      	strh	r3, [r1, #0]
	}
	else{
		duty_delayed = *(duty_delay_line_storage_array + duty_delay_line_start_offset + duty_delay_line_read_pointer_offset);
	}

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	20a0      	movs	r0, #160	@ 0xa0
 8000cba:	2200      	movs	r2, #0
 8000cbc:	0149      	lsls	r1, r1, #5
 8000cbe:	05c0      	lsls	r0, r0, #23
 8000cc0:	f002 f960 	bl	8002f84 <HAL_GPIO_WritePin>
	TIM16_callback_active = NO;

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000cc4:	2180      	movs	r1, #128	@ 0x80
 8000cc6:	20a0      	movs	r0, #160	@ 0xa0
	TIM16_callback_active = NO;
 8000cc8:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000cca:	2201      	movs	r2, #1
 8000ccc:	0149      	lsls	r1, r1, #5
 8000cce:	05c0      	lsls	r0, r0, #23
	TIM16_callback_active = NO;
 8000cd0:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000cd2:	f002 f957 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8000cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e44 <TIM16_callback+0x298>)
 8000cd8:	495b      	ldr	r1, [pc, #364]	@ (8000e48 <TIM16_callback+0x29c>)
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	485b      	ldr	r0, [pc, #364]	@ (8000e4c <TIM16_callback+0x2a0>)
 8000cde:	f001 fd9f 	bl	8002820 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	20a0      	movs	r0, #160	@ 0xa0
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	0149      	lsls	r1, r1, #5
 8000cea:	05c0      	lsls	r0, r0, #23
 8000cec:	f002 f94a 	bl	8002f84 <HAL_GPIO_WritePin>
	//Global_Interrupt_Enable();
}
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd70      	pop	{r4, r5, r6, pc}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 8000cf4:	881d      	ldrh	r5, [r3, #0]
 8000cf6:	2d80      	cmp	r5, #128	@ 0x80
 8000cf8:	d052      	beq.n	8000da0 <TIM16_callback+0x1f4>
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 8000cfa:	2580      	movs	r5, #128	@ 0x80
 8000cfc:	881e      	ldrh	r6, [r3, #0]
 8000cfe:	006d      	lsls	r5, r5, #1
 8000d00:	42ae      	cmp	r6, r5
 8000d02:	d062      	beq.n	8000dca <TIM16_callback+0x21e>
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 8000d04:	881d      	ldrh	r5, [r3, #0]
 8000d06:	23c0      	movs	r3, #192	@ 0xc0
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	429d      	cmp	r5, r3
 8000d0c:	d000      	beq.n	8000d10 <TIM16_callback+0x164>
 8000d0e:	e799      	b.n	8000c44 <TIM16_callback+0x98>
		current_quadrant = SECOND_QUADRANT;
 8000d10:	2501      	movs	r5, #1
 8000d12:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <TIM16_callback+0x268>)
 8000d14:	701d      	strb	r5, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000d16:	4b40      	ldr	r3, [pc, #256]	@ (8000e18 <TIM16_callback+0x26c>)
 8000d18:	701d      	strb	r5, [r3, #0]
 8000d1a:	e793      	b.n	8000c44 <TIM16_callback+0x98>

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
	volatile uint32_t multiply_product = 0;
 8000d1c:	2500      	movs	r5, #0
 8000d1e:	9501      	str	r5, [sp, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8000d20:	8815      	ldrh	r5, [r2, #0]
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	436b      	muls	r3, r5
 8000d26:	9301      	str	r3, [sp, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 8000d28:	9d01      	ldr	r5, [sp, #4]
 8000d2a:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <TIM16_callback+0x280>)
 8000d2c:	0a2d      	lsrs	r5, r5, #8
 8000d2e:	1b5b      	subs	r3, r3, r5
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	8013      	strh	r3, [r2, #0]

    return 1;
 8000d34:	e791      	b.n	8000c5a <TIM16_callback+0xae>
	else if(current_waveshape == SINE_MODE){
 8000d36:	7815      	ldrb	r5, [r2, #0]
 8000d38:	2d01      	cmp	r5, #1
 8000d3a:	d03f      	beq.n	8000dbc <TIM16_callback+0x210>
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000d3c:	7815      	ldrb	r5, [r2, #0]
 8000d3e:	2d02      	cmp	r5, #2
 8000d40:	d04a      	beq.n	8000dd8 <TIM16_callback+0x22c>
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	2a02      	cmp	r2, #2
 8000d46:	d032      	beq.n	8000dae <TIM16_callback+0x202>
 8000d48:	4a36      	ldr	r2, [pc, #216]	@ (8000e24 <TIM16_callback+0x278>)
 8000d4a:	e773      	b.n	8000c34 <TIM16_callback+0x88>
		duty_delayed = *(duty_delay_line_storage_array + duty_delay_line_start_offset + duty_delay_line_read_pointer_offset);
 8000d4c:	8828      	ldrh	r0, [r5, #0]
 8000d4e:	181b      	adds	r3, r3, r0
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	18d2      	adds	r2, r2, r3
 8000d54:	8813      	ldrh	r3, [r2, #0]
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	800b      	strh	r3, [r1, #0]
 8000d5a:	e7ac      	b.n	8000cb6 <TIM16_callback+0x10a>
	else if(duty_delay_line_finish_offset == 0){
 8000d5c:	4836      	ldr	r0, [pc, #216]	@ (8000e38 <TIM16_callback+0x28c>)
 8000d5e:	8805      	ldrh	r5, [r0, #0]
 8000d60:	2d00      	cmp	r5, #0
 8000d62:	d114      	bne.n	8000d8e <TIM16_callback+0x1e2>
		duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8000d64:	2580      	movs	r5, #128	@ 0x80
 8000d66:	00ad      	lsls	r5, r5, #2
 8000d68:	8005      	strh	r5, [r0, #0]
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
 8000d6a:	8818      	ldrh	r0, [r3, #0]
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	b280      	uxth	r0, r0
 8000d70:	8018      	strh	r0, [r3, #0]
 8000d72:	e78d      	b.n	8000c90 <TIM16_callback+0xe4>
		duty_delay_line_storage_array[FINAL_INDEX + 1] = duty;
 8000d74:	2580      	movs	r5, #128	@ 0x80
 8000d76:	8810      	ldrh	r0, [r2, #0]
 8000d78:	4a2e      	ldr	r2, [pc, #184]	@ (8000e34 <TIM16_callback+0x288>)
 8000d7a:	b280      	uxth	r0, r0
 8000d7c:	00ed      	lsls	r5, r5, #3
 8000d7e:	5350      	strh	r0, [r2, r5]
 8000d80:	e77a      	b.n	8000c78 <TIM16_callback+0xcc>
			duty = 1023 - duty;
 8000d82:	8815      	ldrh	r5, [r2, #0]
 8000d84:	4b29      	ldr	r3, [pc, #164]	@ (8000e2c <TIM16_callback+0x280>)
 8000d86:	1b5b      	subs	r3, r3, r5
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	8013      	strh	r3, [r2, #0]
 8000d8c:	e765      	b.n	8000c5a <TIM16_callback+0xae>
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
 8000d8e:	881d      	ldrh	r5, [r3, #0]
 8000d90:	3d01      	subs	r5, #1
 8000d92:	b2ad      	uxth	r5, r5
 8000d94:	801d      	strh	r5, [r3, #0]
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000d96:	8805      	ldrh	r5, [r0, #0]
 8000d98:	3d01      	subs	r5, #1
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	8005      	strh	r5, [r0, #0]
 8000d9e:	e777      	b.n	8000c90 <TIM16_callback+0xe4>
		current_quadrant = SECOND_QUADRANT;
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <TIM16_callback+0x268>)
 8000da2:	3d7f      	subs	r5, #127	@ 0x7f
 8000da4:	701d      	strb	r5, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000da6:	2500      	movs	r5, #0
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <TIM16_callback+0x26c>)
 8000daa:	701d      	strb	r5, [r3, #0]
 8000dac:	e74a      	b.n	8000c44 <TIM16_callback+0x98>
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000dae:	881a      	ldrh	r2, [r3, #0]
 8000db0:	2aff      	cmp	r2, #255	@ 0xff
 8000db2:	d9c9      	bls.n	8000d48 <TIM16_callback+0x19c>
			duty = 0;
 8000db4:	2500      	movs	r5, #0
 8000db6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <TIM16_callback+0x278>)
 8000db8:	8015      	strh	r5, [r2, #0]
 8000dba:	e73b      	b.n	8000c34 <TIM16_callback+0x88>
		duty = sine_wavetable[current_index];
 8000dbc:	881d      	ldrh	r5, [r3, #0]
 8000dbe:	4a24      	ldr	r2, [pc, #144]	@ (8000e50 <TIM16_callback+0x2a4>)
 8000dc0:	006d      	lsls	r5, r5, #1
 8000dc2:	5aad      	ldrh	r5, [r5, r2]
 8000dc4:	4a17      	ldr	r2, [pc, #92]	@ (8000e24 <TIM16_callback+0x278>)
 8000dc6:	8015      	strh	r5, [r2, #0]
 8000dc8:	e734      	b.n	8000c34 <TIM16_callback+0x88>
		current_quadrant = FIRST_QUADRANT;
 8000dca:	2500      	movs	r5, #0
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <TIM16_callback+0x268>)
 8000dce:	701d      	strb	r5, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <TIM16_callback+0x26c>)
 8000dd2:	3501      	adds	r5, #1
 8000dd4:	701d      	strb	r5, [r3, #0]
 8000dd6:	e735      	b.n	8000c44 <TIM16_callback+0x98>
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000dd8:	881d      	ldrh	r5, [r3, #0]
 8000dda:	2dff      	cmp	r5, #255	@ 0xff
 8000ddc:	d8b1      	bhi.n	8000d42 <TIM16_callback+0x196>
		duty = 1023;
 8000dde:	4a11      	ldr	r2, [pc, #68]	@ (8000e24 <TIM16_callback+0x278>)
 8000de0:	4d12      	ldr	r5, [pc, #72]	@ (8000e2c <TIM16_callback+0x280>)
 8000de2:	8015      	strh	r5, [r2, #0]
 8000de4:	e726      	b.n	8000c34 <TIM16_callback+0x88>
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	20000a3e 	.word	0x20000a3e
 8000dec:	40014400 	.word	0x40014400
 8000df0:	20000a3a 	.word	0x20000a3a
 8000df4:	20000a3c 	.word	0x20000a3c
 8000df8:	200003b0 	.word	0x200003b0
 8000dfc:	20000a48 	.word	0x20000a48
 8000e00:	08005874 	.word	0x08005874
 8000e04:	2000046c 	.word	0x2000046c
 8000e08:	20000614 	.word	0x20000614
 8000e0c:	2000017c 	.word	0x2000017c
 8000e10:	20000a56 	.word	0x20000a56
 8000e14:	20000a54 	.word	0x20000a54
 8000e18:	20000a55 	.word	0x20000a55
 8000e1c:	20000a60 	.word	0x20000a60
 8000e20:	08005880 	.word	0x08005880
 8000e24:	20000a4a 	.word	0x20000a4a
 8000e28:	20000a5c 	.word	0x20000a5c
 8000e2c:	000003ff 	.word	0x000003ff
 8000e30:	20000002 	.word	0x20000002
 8000e34:	20000618 	.word	0x20000618
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	20000616 	.word	0x20000616
 8000e40:	7ffffe00 	.word	0x7ffffe00
 8000e44:	08005870 	.word	0x08005870
 8000e48:	20000a40 	.word	0x20000a40
 8000e4c:	20000584 	.word	0x20000584
 8000e50:	08005c80 	.word	0x08005c80

08000e54 <ADC_DMA_conversion_complete_callback>:
}

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8000e54:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000e56:	2580      	movs	r5, #128	@ 0x80
{
 8000e58:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000e5a:	20a0      	movs	r0, #160	@ 0xa0
 8000e5c:	016d      	lsls	r5, r5, #5
 8000e5e:	2201      	movs	r2, #1
 8000e60:	0029      	movs	r1, r5
 8000e62:	05c0      	lsls	r0, r0, #23
 8000e64:	f002 f88e 	bl	8002f84 <HAL_GPIO_WritePin>
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8000e68:	0020      	movs	r0, r4
 8000e6a:	f001 fd77 	bl	800295c <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <ADC_DMA_conversion_complete_callback+0xc4>)

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000e70:	492a      	ldr	r1, [pc, #168]	@ (8000f1c <ADC_DMA_conversion_complete_callback+0xc8>)
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000e72:	881a      	ldrh	r2, [r3, #0]
 8000e74:	b290      	uxth	r0, r2
	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000e76:	428a      	cmp	r2, r1
 8000e78:	d82e      	bhi.n	8000ed8 <ADC_DMA_conversion_complete_callback+0x84>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	4a28      	ldr	r2, [pc, #160]	@ (8000f20 <ADC_DMA_conversion_complete_callback+0xcc>)
 8000e7e:	7011      	strb	r1, [r2, #0]
	else{
		current_waveshape = SINE_MODE; //if error, return sine
	}

	//GET SPEED
	current_speed = ADCResultsDMA[1] >> 2; //convert to 10-bit
 8000e80:	885a      	ldrh	r2, [r3, #2]
 8000e82:	4928      	ldr	r1, [pc, #160]	@ (8000f24 <ADC_DMA_conversion_complete_callback+0xd0>)
 8000e84:	0892      	lsrs	r2, r2, #2
 8000e86:	800a      	strh	r2, [r1, #0]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON
		//current_depth = ADCResultsDMA[2] >> 4; //convert to 8-bit
		duty_delay_line_read_pointer_offset = ADCResultsDMA[2] >> 3;
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	4927      	ldr	r1, [pc, #156]	@ (8000f28 <ADC_DMA_conversion_complete_callback+0xd4>)
 8000e8c:	08d2      	lsrs	r2, r2, #3
 8000e8e:	800a      	strh	r2, [r1, #0]
			current_symmetry = ADCResultsDMA[3] >> 2;

		#endif

		#if SYMMETRY_ADC_RESOLUTION == 8
			current_symmetry = ADCResultsDMA[3] >> 4;
 8000e90:	88db      	ldrh	r3, [r3, #6]
 8000e92:	4a26      	ldr	r2, [pc, #152]	@ (8000f2c <ADC_DMA_conversion_complete_callback+0xd8>)
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	6013      	str	r3, [r2, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == NO){
 8000e98:	4b25      	ldr	r3, [pc, #148]	@ (8000f30 <ADC_DMA_conversion_complete_callback+0xdc>)
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d101      	bne.n	8000ea4 <ADC_DMA_conversion_complete_callback+0x50>
		initial_ADC_conversion_complete = YES;
 8000ea0:	3201      	adds	r2, #1
 8000ea2:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000ea4:	2180      	movs	r1, #128	@ 0x80
 8000ea6:	20a0      	movs	r0, #160	@ 0xa0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	0149      	lsls	r1, r1, #5
 8000eac:	05c0      	lsls	r0, r0, #23
 8000eae:	f002 f869 	bl	8002f84 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000eb2:	2180      	movs	r1, #128	@ 0x80
 8000eb4:	20a0      	movs	r0, #160	@ 0xa0
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	0149      	lsls	r1, r1, #5
 8000eba:	05c0      	lsls	r0, r0, #23
 8000ebc:	f002 f862 	bl	8002f84 <HAL_GPIO_WritePin>

	if(speed_pot_is_disabled == NO){
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8000f34 <ADC_DMA_conversion_complete_callback+0xe0>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d014      	beq.n	8000ef2 <ADC_DMA_conversion_complete_callback+0x9e>
		Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
		TIM16_final_start_value_locked = TIM16_final_start_value;
		TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
	}

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	20a0      	movs	r0, #160	@ 0xa0
 8000ecc:	2200      	movs	r2, #0
 8000ece:	0149      	lsls	r1, r1, #5
 8000ed0:	05c0      	lsls	r0, r0, #23
 8000ed2:	f002 f857 	bl	8002f84 <HAL_GPIO_WritePin>
}
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000ed8:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <ADC_DMA_conversion_complete_callback+0xe4>)
 8000eda:	4290      	cmp	r0, r2
 8000edc:	d803      	bhi.n	8000ee6 <ADC_DMA_conversion_complete_callback+0x92>
		current_waveshape = SINE_MODE; //sine wave
 8000ede:	2101      	movs	r1, #1
 8000ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <ADC_DMA_conversion_complete_callback+0xcc>)
 8000ee2:	7011      	strb	r1, [r2, #0]
 8000ee4:	e7cc      	b.n	8000e80 <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = SQUARE_MODE; //square wave
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <ADC_DMA_conversion_complete_callback+0xcc>)
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000ee8:	42a8      	cmp	r0, r5
 8000eea:	d211      	bcs.n	8000f10 <ADC_DMA_conversion_complete_callback+0xbc>
		current_waveshape = SQUARE_MODE; //square wave
 8000eec:	2102      	movs	r1, #2
 8000eee:	7011      	strb	r1, [r2, #0]
 8000ef0:	e7c6      	b.n	8000e80 <ADC_DMA_conversion_complete_callback+0x2c>
		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000ef2:	f000 fe03 	bl	8001afc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
		Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000ef6:	f000 fe29 	bl	8001b4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>
		TIM16_final_start_value_locked = TIM16_final_start_value;
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <ADC_DMA_conversion_complete_callback+0xe8>)
 8000efc:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <ADC_DMA_conversion_complete_callback+0xec>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	8013      	strh	r3, [r2, #0]
		TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <ADC_DMA_conversion_complete_callback+0xf0>)
 8000f06:	4a10      	ldr	r2, [pc, #64]	@ (8000f48 <ADC_DMA_conversion_complete_callback+0xf4>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	7013      	strb	r3, [r2, #0]
 8000f0e:	e7db      	b.n	8000ec8 <ADC_DMA_conversion_complete_callback+0x74>
		current_waveshape = SINE_MODE; //if error, return sine
 8000f10:	2101      	movs	r1, #1
 8000f12:	7011      	strb	r1, [r2, #0]
 8000f14:	e7b4      	b.n	8000e80 <ADC_DMA_conversion_complete_callback+0x2c>
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	20000a40 	.word	0x20000a40
 8000f1c:	00000555 	.word	0x00000555
 8000f20:	20000a60 	.word	0x20000a60
 8000f24:	20000a5e 	.word	0x20000a5e
 8000f28:	20000616 	.word	0x20000616
 8000f2c:	20000a58 	.word	0x20000a58
 8000f30:	20000a3f 	.word	0x20000a3f
 8000f34:	20000a2f 	.word	0x20000a2f
 8000f38:	00000aaa 	.word	0x00000aaa
 8000f3c:	20000a52 	.word	0x20000a52
 8000f40:	20000a3c 	.word	0x20000a3c
 8000f44:	20000a49 	.word	0x20000a49
 8000f48:	20000a48 	.word	0x20000a48

08000f4c <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	46ce      	mov	lr, r9
 8000f50:	4647      	mov	r7, r8

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8000f54:	b580      	push	{r7, lr}
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f56:	f004 f80d 	bl	8004f74 <HAL_TIM_ReadCapturedValue>
 8000f5a:	4bb8      	ldr	r3, [pc, #736]	@ (800123c <TIM2_ch1_IP_capture_callback+0x2f0>)

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000f5c:	4cb8      	ldr	r4, [pc, #736]	@ (8001240 <TIM2_ch1_IP_capture_callback+0x2f4>)
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f5e:	6018      	str	r0, [r3, #0]
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0a5b      	lsrs	r3, r3, #9
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	8023      	strh	r3, [r4, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512 less than the
	//input capture measurement timer

	if(input_capture_event == FIRST){ //edge detected is the first
 8000f68:	4bb6      	ldr	r3, [pc, #728]	@ (8001244 <TIM2_ch1_IP_capture_callback+0x2f8>)
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	b2d0      	uxtb	r0, r2
 8000f6e:	2a00      	cmp	r2, #0
 8000f70:	d10c      	bne.n	8000f8c <TIM2_ch1_IP_capture_callback+0x40>

		speed_pot_is_disabled = YES;
 8000f72:	49b5      	ldr	r1, [pc, #724]	@ (8001248 <TIM2_ch1_IP_capture_callback+0x2fc>)
 8000f74:	3201      	adds	r2, #1
 8000f76:	700a      	strb	r2, [r1, #0]
		input_capture_measurement_is_ongoing = YES;
 8000f78:	49b4      	ldr	r1, [pc, #720]	@ (800124c <TIM2_ch1_IP_capture_callback+0x300>)
 8000f7a:	700a      	strb	r2, [r1, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8000f7c:	49b4      	ldr	r1, [pc, #720]	@ (8001250 <TIM2_ch1_IP_capture_callback+0x304>)
 8000f7e:	6809      	ldr	r1, [r1, #0]
 8000f80:	6248      	str	r0, [r1, #36]	@ 0x24

		input_capture_event = SECOND;
 8000f82:	701a      	strb	r2, [r3, #0]
			TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
			TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded;
		#endif

	}
}
 8000f84:	bcc0      	pop	{r6, r7}
 8000f86:	46b9      	mov	r9, r7
 8000f88:	46b0      	mov	r8, r6
 8000f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		input_capture_event = FIRST; //reset event name
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	701e      	strb	r6, [r3, #0]
		input_capture_measurement_is_ongoing = NO;
 8000f90:	4bae      	ldr	r3, [pc, #696]	@ (800124c <TIM2_ch1_IP_capture_callback+0x300>)
		if(input_capture_measurement_reelapse_is_ongoing == YES){
 8000f92:	4fb0      	ldr	r7, [pc, #704]	@ (8001254 <TIM2_ch1_IP_capture_callback+0x308>)
		input_capture_measurement_is_ongoing = NO;
 8000f94:	701e      	strb	r6, [r3, #0]
		if(input_capture_measurement_reelapse_is_ongoing == YES){
 8000f96:	783b      	ldrb	r3, [r7, #0]
			Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000f98:	4daf      	ldr	r5, [pc, #700]	@ (8001258 <TIM2_ch1_IP_capture_callback+0x30c>)
		if(input_capture_measurement_reelapse_is_ongoing == YES){
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d100      	bne.n	8000fa0 <TIM2_ch1_IP_capture_callback+0x54>
 8000f9e:	e13f      	b.n	8001220 <TIM2_ch1_IP_capture_callback+0x2d4>
		if(interrupt_period < HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is less than 129, then the desired speed is not reproducable, so just set the absolute top speed (i.e. highest prescaler and shortest period)
 8000fa0:	8822      	ldrh	r2, [r4, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, HIGHEST_PRESCALER_TOP_SPEED_PERIOD);
 8000fa2:	682b      	ldr	r3, [r5, #0]
		if(interrupt_period < HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is less than 129, then the desired speed is not reproducable, so just set the absolute top speed (i.e. highest prescaler and shortest period)
 8000fa4:	2a80      	cmp	r2, #128	@ 0x80
 8000fa6:	d900      	bls.n	8000faa <TIM2_ch1_IP_capture_callback+0x5e>
 8000fa8:	e0a5      	b.n	80010f6 <TIM2_ch1_IP_capture_callback+0x1aa>
			interrupt_period = HIGHEST_PRESCALER_TOP_SPEED_PERIOD;
 8000faa:	2281      	movs	r2, #129	@ 0x81
 8000fac:	8022      	strh	r2, [r4, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000fb0:	2200      	movs	r2, #0
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000fb2:	2100      	movs	r1, #0
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000fb6:	0028      	movs	r0, r5
 8000fb8:	f000 fd74 	bl	8001aa4 <Start_OC_TIM>
			input_capture_measurement_reelapse_is_ongoing = YES;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	703b      	strb	r3, [r7, #0]
		if(interrupt_period <= SIXTY_FOUR_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	8822      	ldrh	r2, [r4, #0]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d900      	bls.n	8000fcc <TIM2_ch1_IP_capture_callback+0x80>
 8000fca:	e07d      	b.n	80010c8 <TIM2_ch1_IP_capture_callback+0x17c>
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000fcc:	8822      	ldrh	r2, [r4, #0]
 8000fce:	49a3      	ldr	r1, [pc, #652]	@ (800125c <TIM2_ch1_IP_capture_callback+0x310>)
 8000fd0:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 8000fd2:	2205      	movs	r2, #5
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 8000fd8:	4ba1      	ldr	r3, [pc, #644]	@ (8001260 <TIM2_ch1_IP_capture_callback+0x314>)
 8000fda:	701a      	strb	r2, [r3, #0]
		if(current_waveshape == SINE_MODE || current_waveshape == TRIANGLE_MODE){
 8000fdc:	4ba1      	ldr	r3, [pc, #644]	@ (8001264 <TIM2_ch1_IP_capture_callback+0x318>)
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	2a01      	cmp	r2, #1
 8000fe2:	d003      	beq.n	8000fec <TIM2_ch1_IP_capture_callback+0xa0>
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	2a00      	cmp	r2, #0
 8000fe8:	d000      	beq.n	8000fec <TIM2_ch1_IP_capture_callback+0xa0>
 8000fea:	e0bc      	b.n	8001166 <TIM2_ch1_IP_capture_callback+0x21a>
			current_index_to_be_loaded = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8000fec:	20a7      	movs	r0, #167	@ 0xa7
 8000fee:	4a9e      	ldr	r2, [pc, #632]	@ (8001268 <TIM2_ch1_IP_capture_callback+0x31c>)
			current_index_to_be_loaded = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8000ff0:	0040      	lsls	r0, r0, #1
 8000ff2:	8010      	strh	r0, [r2, #0]
			current_quadrant_to_be_loaded = CURRENT_QUADRANT_SQUARE_SYNCED;
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	4a9d      	ldr	r2, [pc, #628]	@ (800126c <TIM2_ch1_IP_capture_callback+0x320>)
 8000ff8:	7010      	strb	r0, [r2, #0]
			current_halfcycle_to_be_loaded = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8000ffa:	4a9d      	ldr	r2, [pc, #628]	@ (8001270 <TIM2_ch1_IP_capture_callback+0x324>)
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	7010      	strb	r0, [r2, #0]
		if(current_waveshape == TRIANGLE_MODE){
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	2a00      	cmp	r2, #0
 8001004:	d000      	beq.n	8001008 <TIM2_ch1_IP_capture_callback+0xbc>
 8001006:	e079      	b.n	80010fc <TIM2_ch1_IP_capture_callback+0x1b0>
			duty_to_be_loaded = tri_wavetable[current_index];
 8001008:	4a9a      	ldr	r2, [pc, #616]	@ (8001274 <TIM2_ch1_IP_capture_callback+0x328>)
 800100a:	8810      	ldrh	r0, [r2, #0]
 800100c:	4a9a      	ldr	r2, [pc, #616]	@ (8001278 <TIM2_ch1_IP_capture_callback+0x32c>)
 800100e:	0040      	lsls	r0, r0, #1
 8001010:	5a80      	ldrh	r0, [r0, r2]
 8001012:	4a9a      	ldr	r2, [pc, #616]	@ (800127c <TIM2_ch1_IP_capture_callback+0x330>)
 8001014:	8010      	strh	r0, [r2, #0]
			if(current_depth_to_be_loaded == 255){
 8001016:	489a      	ldr	r0, [pc, #616]	@ (8001280 <TIM2_ch1_IP_capture_callback+0x334>)
 8001018:	8800      	ldrh	r0, [r0, #0]
 800101a:	28ff      	cmp	r0, #255	@ 0xff
 800101c:	d100      	bne.n	8001020 <TIM2_ch1_IP_capture_callback+0xd4>
 800101e:	e07e      	b.n	800111e <TIM2_ch1_IP_capture_callback+0x1d2>
			else if(current_depth != 0){
 8001020:	4898      	ldr	r0, [pc, #608]	@ (8001284 <TIM2_ch1_IP_capture_callback+0x338>)
 8001022:	8804      	ldrh	r4, [r0, #0]
 8001024:	2c00      	cmp	r4, #0
 8001026:	d000      	beq.n	800102a <TIM2_ch1_IP_capture_callback+0xde>
 8001028:	e093      	b.n	8001152 <TIM2_ch1_IP_capture_callback+0x206>
				duty_to_be_loaded = 1023; //if depth is 0, just output 1023
 800102a:	4897      	ldr	r0, [pc, #604]	@ (8001288 <TIM2_ch1_IP_capture_callback+0x33c>)
 800102c:	8010      	strh	r0, [r2, #0]
			if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 800102e:	4a97      	ldr	r2, [pc, #604]	@ (800128c <TIM2_ch1_IP_capture_callback+0x340>)
 8001030:	6814      	ldr	r4, [r2, #0]
			if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	2801      	cmp	r0, #1
 8001036:	d100      	bne.n	800103a <TIM2_ch1_IP_capture_callback+0xee>
 8001038:	e07c      	b.n	8001134 <TIM2_ch1_IP_capture_callback+0x1e8>
 800103a:	7818      	ldrb	r0, [r3, #0]
 800103c:	2800      	cmp	r0, #0
 800103e:	d100      	bne.n	8001042 <TIM2_ch1_IP_capture_callback+0xf6>
 8001040:	e078      	b.n	8001134 <TIM2_ch1_IP_capture_callback+0x1e8>
			else if(current_waveshape == SQUARE_MODE){
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d100      	bne.n	800104a <TIM2_ch1_IP_capture_callback+0xfe>
 8001048:	e0a4      	b.n	8001194 <TIM2_ch1_IP_capture_callback+0x248>
			if(symmetry_status == CW){
 800104a:	2600      	movs	r6, #0
 800104c:	2c7f      	cmp	r4, #127	@ 0x7f
 800104e:	d900      	bls.n	8001052 <TIM2_ch1_IP_capture_callback+0x106>
 8001050:	e07b      	b.n	800114a <TIM2_ch1_IP_capture_callback+0x1fe>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8001052:	257f      	movs	r5, #127	@ 0x7f
 8001054:	6813      	ldr	r3, [r2, #0]
 8001056:	1aed      	subs	r5, r5, r3
 8001058:	b2ed      	uxtb	r5, r5
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value_to_be_loaded;
 800105a:	880c      	ldrh	r4, [r1, #0]
 800105c:	b2a3      	uxth	r3, r4
 800105e:	4698      	mov	r8, r3
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	1b1c      	subs	r4, r3, r4
 8001066:	b2a4      	uxth	r4, r4
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001068:	4365      	muls	r5, r4
 800106a:	b2ad      	uxth	r5, r5
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 800106c:	0a2f      	lsrs	r7, r5, #8
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800106e:	1be2      	subs	r2, r4, r7
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001070:	19e4      	adds	r4, r4, r7
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001072:	b292      	uxth	r2, r2
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001074:	b2a4      	uxth	r4, r4
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001076:	4691      	mov	r9, r2
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001078:	2cff      	cmp	r4, #255	@ 0xff
 800107a:	d800      	bhi.n	800107e <TIM2_ch1_IP_capture_callback+0x132>
 800107c:	e0b3      	b.n	80011e6 <TIM2_ch1_IP_capture_callback+0x29a>
 800107e:	429c      	cmp	r4, r3
 8001080:	d100      	bne.n	8001084 <TIM2_ch1_IP_capture_callback+0x138>
 8001082:	e0a9      	b.n	80011d8 <TIM2_ch1_IP_capture_callback+0x28c>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001084:	2108      	movs	r1, #8
 8001086:	0028      	movs	r0, r5
 8001088:	f000 ff42 	bl	8001f10 <unsigned_bitwise_modulo>
 800108c:	2880      	cmp	r0, #128	@ 0x80
 800108e:	d100      	bne.n	8001092 <TIM2_ch1_IP_capture_callback+0x146>
 8001090:	e10c      	b.n	80012ac <TIM2_ch1_IP_capture_callback+0x360>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001092:	2108      	movs	r1, #8
 8001094:	0028      	movs	r0, r5
 8001096:	f000 ff3b 	bl	8001f10 <unsigned_bitwise_modulo>
 800109a:	2800      	cmp	r0, #0
 800109c:	d000      	beq.n	80010a0 <TIM2_ch1_IP_capture_callback+0x154>
 800109e:	e15e      	b.n	800135e <TIM2_ch1_IP_capture_callback+0x412>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80010a0:	0020      	movs	r0, r4
 80010a2:	2101      	movs	r1, #1
 80010a4:	f000 ff34 	bl	8001f10 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80010a8:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust = DO_NOTHING;
 80010aa:	4b79      	ldr	r3, [pc, #484]	@ (8001290 <TIM2_ch1_IP_capture_callback+0x344>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80010ac:	2800      	cmp	r0, #0
 80010ae:	d000      	beq.n	80010b2 <TIM2_ch1_IP_capture_callback+0x166>
 80010b0:	e196      	b.n	80013e0 <TIM2_ch1_IP_capture_callback+0x494>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80010b2:	2e00      	cmp	r6, #0
 80010b4:	d100      	bne.n	80010b8 <TIM2_ch1_IP_capture_callback+0x16c>
 80010b6:	e1d4      	b.n	8001462 <TIM2_ch1_IP_capture_callback+0x516>
							TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 80010bc:	2380      	movs	r3, #128	@ 0x80
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	1b1b      	subs	r3, r3, r4
 80010c2:	4d74      	ldr	r5, [pc, #464]	@ (8001294 <TIM2_ch1_IP_capture_callback+0x348>)
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	e104      	b.n	80012d2 <TIM2_ch1_IP_capture_callback+0x386>
		else if(interrupt_period <= ONE_HUNDRED_TWENTY_EIGHT_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 80010c8:	2280      	movs	r2, #128	@ 0x80
 80010ca:	8821      	ldrh	r1, [r4, #0]
 80010cc:	0092      	lsls	r2, r2, #2
 80010ce:	4291      	cmp	r1, r2
 80010d0:	d94c      	bls.n	800116c <TIM2_ch1_IP_capture_callback+0x220>
		else if(interrupt_period <= TWO_HUNDRED_FIFTY_SIX_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 80010d2:	2280      	movs	r2, #128	@ 0x80
 80010d4:	8821      	ldrh	r1, [r4, #0]
 80010d6:	00d2      	lsls	r2, r2, #3
 80010d8:	4291      	cmp	r1, r2
 80010da:	d900      	bls.n	80010de <TIM2_ch1_IP_capture_callback+0x192>
 80010dc:	e15d      	b.n	800139a <TIM2_ch1_IP_capture_callback+0x44e>
			interrupt_period = interrupt_period >> 2;
 80010de:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80010e0:	495e      	ldr	r1, [pc, #376]	@ (800125c <TIM2_ch1_IP_capture_callback+0x310>)
			interrupt_period = interrupt_period >> 2;
 80010e2:	0892      	lsrs	r2, r2, #2
 80010e4:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80010e6:	8822      	ldrh	r2, [r4, #0]
 80010e8:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 2;
 80010ea:	2203      	movs	r2, #3
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 2;
 80010f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <TIM2_ch1_IP_capture_callback+0x314>)
 80010f2:	701a      	strb	r2, [r3, #0]
 80010f4:	e772      	b.n	8000fdc <TIM2_ch1_IP_capture_callback+0x90>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 80010f6:	8822      	ldrh	r2, [r4, #0]
 80010f8:	b292      	uxth	r2, r2
 80010fa:	e758      	b.n	8000fae <TIM2_ch1_IP_capture_callback+0x62>
		else if(current_waveshape == SINE_MODE){
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	2a01      	cmp	r2, #1
 8001100:	d040      	beq.n	8001184 <TIM2_ch1_IP_capture_callback+0x238>
		else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8001102:	781a      	ldrb	r2, [r3, #0]
 8001104:	2a02      	cmp	r2, #2
 8001106:	d100      	bne.n	800110a <TIM2_ch1_IP_capture_callback+0x1be>
 8001108:	e153      	b.n	80013b2 <TIM2_ch1_IP_capture_callback+0x466>
		else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	2a02      	cmp	r2, #2
 800110e:	d100      	bne.n	8001112 <TIM2_ch1_IP_capture_callback+0x1c6>
 8001110:	e15d      	b.n	80013ce <TIM2_ch1_IP_capture_callback+0x482>
			if(current_depth_to_be_loaded == 255){
 8001112:	485b      	ldr	r0, [pc, #364]	@ (8001280 <TIM2_ch1_IP_capture_callback+0x334>)
 8001114:	4a59      	ldr	r2, [pc, #356]	@ (800127c <TIM2_ch1_IP_capture_callback+0x330>)
 8001116:	8800      	ldrh	r0, [r0, #0]
 8001118:	28ff      	cmp	r0, #255	@ 0xff
 800111a:	d000      	beq.n	800111e <TIM2_ch1_IP_capture_callback+0x1d2>
 800111c:	e780      	b.n	8001020 <TIM2_ch1_IP_capture_callback+0xd4>
				duty_to_be_loaded = 1023 - duty_to_be_loaded;
 800111e:	8814      	ldrh	r4, [r2, #0]
 8001120:	4859      	ldr	r0, [pc, #356]	@ (8001288 <TIM2_ch1_IP_capture_callback+0x33c>)
 8001122:	1b00      	subs	r0, r0, r4
 8001124:	b280      	uxth	r0, r0
 8001126:	8010      	strh	r0, [r2, #0]
			if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001128:	4a58      	ldr	r2, [pc, #352]	@ (800128c <TIM2_ch1_IP_capture_callback+0x340>)
 800112a:	6814      	ldr	r4, [r2, #0]
			if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 800112c:	7818      	ldrb	r0, [r3, #0]
 800112e:	2801      	cmp	r0, #1
 8001130:	d000      	beq.n	8001134 <TIM2_ch1_IP_capture_callback+0x1e8>
 8001132:	e782      	b.n	800103a <TIM2_ch1_IP_capture_callback+0xee>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001134:	4b58      	ldr	r3, [pc, #352]	@ (8001298 <TIM2_ch1_IP_capture_callback+0x34c>)
 8001136:	7818      	ldrb	r0, [r3, #0]
 8001138:	2800      	cmp	r0, #0
 800113a:	d134      	bne.n	80011a6 <TIM2_ch1_IP_capture_callback+0x25a>
 800113c:	4857      	ldr	r0, [pc, #348]	@ (800129c <TIM2_ch1_IP_capture_callback+0x350>)
 800113e:	7800      	ldrb	r0, [r0, #0]
 8001140:	2800      	cmp	r0, #0
 8001142:	d130      	bne.n	80011a6 <TIM2_ch1_IP_capture_callback+0x25a>
					if(symmetry_status == CW){
 8001144:	2600      	movs	r6, #0
 8001146:	2c7f      	cmp	r4, #127	@ 0x7f
 8001148:	d92b      	bls.n	80011a2 <TIM2_ch1_IP_capture_callback+0x256>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 800114a:	6815      	ldr	r5, [r2, #0]
 800114c:	3d80      	subs	r5, #128	@ 0x80
 800114e:	b2ed      	uxtb	r5, r5
 8001150:	e783      	b.n	800105a <TIM2_ch1_IP_capture_callback+0x10e>
				multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8001152:	4c53      	ldr	r4, [pc, #332]	@ (80012a0 <TIM2_ch1_IP_capture_callback+0x354>)
 8001154:	8825      	ldrh	r5, [r4, #0]
 8001156:	8804      	ldrh	r4, [r0, #0]
				duty_to_be_loaded = 1023 - (uint16_t)(multiply_product >> 8);
 8001158:	484b      	ldr	r0, [pc, #300]	@ (8001288 <TIM2_ch1_IP_capture_callback+0x33c>)
				multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 800115a:	436c      	muls	r4, r5
				duty_to_be_loaded = 1023 - (uint16_t)(multiply_product >> 8);
 800115c:	0a24      	lsrs	r4, r4, #8
 800115e:	1b00      	subs	r0, r0, r4
 8001160:	b280      	uxth	r0, r0
 8001162:	8010      	strh	r0, [r2, #0]
 8001164:	e763      	b.n	800102e <TIM2_ch1_IP_capture_callback+0xe2>
			current_index_to_be_loaded = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8001166:	2080      	movs	r0, #128	@ 0x80
 8001168:	4a3f      	ldr	r2, [pc, #252]	@ (8001268 <TIM2_ch1_IP_capture_callback+0x31c>)
 800116a:	e741      	b.n	8000ff0 <TIM2_ch1_IP_capture_callback+0xa4>
			interrupt_period = interrupt_period >> 1;
 800116c:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800116e:	493b      	ldr	r1, [pc, #236]	@ (800125c <TIM2_ch1_IP_capture_callback+0x310>)
			interrupt_period = interrupt_period >> 1;
 8001170:	0852      	lsrs	r2, r2, #1
 8001172:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001174:	8822      	ldrh	r2, [r4, #0]
 8001176:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 1;
 8001178:	2204      	movs	r2, #4
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800117a:	b29b      	uxth	r3, r3
 800117c:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 1;
 800117e:	4b38      	ldr	r3, [pc, #224]	@ (8001260 <TIM2_ch1_IP_capture_callback+0x314>)
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e72b      	b.n	8000fdc <TIM2_ch1_IP_capture_callback+0x90>
			duty_to_be_loaded = sine_wavetable[current_index];
 8001184:	4a3b      	ldr	r2, [pc, #236]	@ (8001274 <TIM2_ch1_IP_capture_callback+0x328>)
 8001186:	8810      	ldrh	r0, [r2, #0]
 8001188:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <TIM2_ch1_IP_capture_callback+0x358>)
 800118a:	0040      	lsls	r0, r0, #1
 800118c:	5a80      	ldrh	r0, [r0, r2]
 800118e:	4a3b      	ldr	r2, [pc, #236]	@ (800127c <TIM2_ch1_IP_capture_callback+0x330>)
 8001190:	8010      	strh	r0, [r2, #0]
 8001192:	e740      	b.n	8001016 <TIM2_ch1_IP_capture_callback+0xca>
				if(current_halfcycle == FIRST_HALFCYCLE){
 8001194:	4b40      	ldr	r3, [pc, #256]	@ (8001298 <TIM2_ch1_IP_capture_callback+0x34c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2de      	uxtb	r6, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d117      	bne.n	80011ce <TIM2_ch1_IP_capture_callback+0x282>
					if(symmetry_status == CW){
 800119e:	2c7f      	cmp	r4, #127	@ 0x7f
 80011a0:	d8d3      	bhi.n	800114a <TIM2_ch1_IP_capture_callback+0x1fe>
						symmetry_type_for_halfcycle = LENGTHEN;
 80011a2:	2601      	movs	r6, #1
 80011a4:	e755      	b.n	8001052 <TIM2_ch1_IP_capture_callback+0x106>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 80011a6:	7818      	ldrb	r0, [r3, #0]
 80011a8:	2801      	cmp	r0, #1
 80011aa:	d100      	bne.n	80011ae <TIM2_ch1_IP_capture_callback+0x262>
 80011ac:	e0bd      	b.n	800132a <TIM2_ch1_IP_capture_callback+0x3de>
				else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 80011ae:	7818      	ldrb	r0, [r3, #0]
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d103      	bne.n	80011bc <TIM2_ch1_IP_capture_callback+0x270>
 80011b4:	4839      	ldr	r0, [pc, #228]	@ (800129c <TIM2_ch1_IP_capture_callback+0x350>)
 80011b6:	7800      	ldrb	r0, [r0, #0]
 80011b8:	2801      	cmp	r0, #1
 80011ba:	d008      	beq.n	80011ce <TIM2_ch1_IP_capture_callback+0x282>
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d000      	beq.n	80011c4 <TIM2_ch1_IP_capture_callback+0x278>
 80011c2:	e742      	b.n	800104a <TIM2_ch1_IP_capture_callback+0xfe>
 80011c4:	4b35      	ldr	r3, [pc, #212]	@ (800129c <TIM2_ch1_IP_capture_callback+0x350>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d000      	beq.n	80011ce <TIM2_ch1_IP_capture_callback+0x282>
 80011cc:	e73d      	b.n	800104a <TIM2_ch1_IP_capture_callback+0xfe>
						symmetry_type_for_halfcycle = LENGTHEN;
 80011ce:	2601      	movs	r6, #1
					if(symmetry_status == CW){
 80011d0:	2c7f      	cmp	r4, #127	@ 0x7f
 80011d2:	d8ba      	bhi.n	800114a <TIM2_ch1_IP_capture_callback+0x1fe>
 80011d4:	2600      	movs	r6, #0
 80011d6:	e73c      	b.n	8001052 <TIM2_ch1_IP_capture_callback+0x106>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80011d8:	2108      	movs	r1, #8
 80011da:	0028      	movs	r0, r5
 80011dc:	f000 fe98 	bl	8001f10 <unsigned_bitwise_modulo>
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d000      	beq.n	80011e6 <TIM2_ch1_IP_capture_callback+0x29a>
 80011e4:	e0ce      	b.n	8001384 <TIM2_ch1_IP_capture_callback+0x438>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80011e6:	2108      	movs	r1, #8
 80011e8:	0028      	movs	r0, r5
 80011ea:	f000 fe91 	bl	8001f10 <unsigned_bitwise_modulo>
 80011ee:	2880      	cmp	r0, #128	@ 0x80
 80011f0:	d000      	beq.n	80011f4 <TIM2_ch1_IP_capture_callback+0x2a8>
 80011f2:	e07a      	b.n	80012ea <TIM2_ch1_IP_capture_callback+0x39e>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 80011f4:	4d27      	ldr	r5, [pc, #156]	@ (8001294 <TIM2_ch1_IP_capture_callback+0x348>)
					if(symmetry_type_for_halfcycle == SHORTEN){
 80011f6:	2e00      	cmp	r6, #0
 80011f8:	d100      	bne.n	80011fc <TIM2_ch1_IP_capture_callback+0x2b0>
 80011fa:	e09c      	b.n	8001336 <TIM2_ch1_IP_capture_callback+0x3ea>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 80011fc:	2300      	movs	r3, #0
 80011fe:	702b      	strb	r3, [r5, #0]
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001200:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <TIM2_ch1_IP_capture_callback+0x328>)
 8001202:	2101      	movs	r1, #1
 8001204:	8818      	ldrh	r0, [r3, #0]
 8001206:	b280      	uxth	r0, r0
 8001208:	f000 fe82 	bl	8001f10 <unsigned_bitwise_modulo>
 800120c:	2800      	cmp	r0, #0
 800120e:	d000      	beq.n	8001212 <TIM2_ch1_IP_capture_callback+0x2c6>
 8001210:	e11d      	b.n	800144e <TIM2_ch1_IP_capture_callback+0x502>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	4a24      	ldr	r2, [pc, #144]	@ (80012a8 <TIM2_ch1_IP_capture_callback+0x35c>)
 8001218:	1b1b      	subs	r3, r3, r4
 800121a:	b29b      	uxth	r3, r3
 800121c:	8013      	strh	r3, [r2, #0]
 800121e:	e077      	b.n	8001310 <TIM2_ch1_IP_capture_callback+0x3c4>
			Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001220:	2100      	movs	r1, #0
 8001222:	0028      	movs	r0, r5
 8001224:	f000 fc48 	bl	8001ab8 <Stop_OC_TIM>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8001228:	8823      	ldrh	r3, [r4, #0]
 800122a:	682a      	ldr	r2, [r5, #0]
 800122c:	b29b      	uxth	r3, r3
 800122e:	6353      	str	r3, [r2, #52]	@ 0x34
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001230:	2100      	movs	r1, #0
 8001232:	0028      	movs	r0, r5
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001234:	6256      	str	r6, [r2, #36]	@ 0x24
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001236:	f000 fc35 	bl	8001aa4 <Start_OC_TIM>
 800123a:	e6b1      	b.n	8000fa0 <TIM2_ch1_IP_capture_callback+0x54>
 800123c:	20000a34 	.word	0x20000a34
 8001240:	20000a2c 	.word	0x20000a2c
 8001244:	20000a38 	.word	0x20000a38
 8001248:	20000a2f 	.word	0x20000a2f
 800124c:	20000a30 	.word	0x20000a30
 8001250:	200002f4 	.word	0x200002f4
 8001254:	20000a2e 	.word	0x20000a2e
 8001258:	20000238 	.word	0x20000238
 800125c:	20000a28 	.word	0x20000a28
 8001260:	20000a24 	.word	0x20000a24
 8001264:	20000a60 	.word	0x20000a60
 8001268:	20000a1c 	.word	0x20000a1c
 800126c:	20000a1e 	.word	0x20000a1e
 8001270:	20000a1f 	.word	0x20000a1f
 8001274:	20000a56 	.word	0x20000a56
 8001278:	08005880 	.word	0x08005880
 800127c:	20000a22 	.word	0x20000a22
 8001280:	20000a1a 	.word	0x20000a1a
 8001284:	20000a5c 	.word	0x20000a5c
 8001288:	000003ff 	.word	0x000003ff
 800128c:	20000a58 	.word	0x20000a58
 8001290:	20000a50 	.word	0x20000a50
 8001294:	20000a2a 	.word	0x20000a2a
 8001298:	20000a55 	.word	0x20000a55
 800129c:	20000a54 	.word	0x20000a54
 80012a0:	20000a4a 	.word	0x20000a4a
 80012a4:	08005c80 	.word	0x08005c80
 80012a8:	20000a26 	.word	0x20000a26
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80012ac:	3401      	adds	r4, #1
 80012ae:	b2a4      	uxth	r4, r4
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80012b0:	0020      	movs	r0, r4
 80012b2:	2101      	movs	r1, #1
 80012b4:	f000 fe2c 	bl	8001f10 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80012b8:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 80012ba:	4d7c      	ldr	r5, [pc, #496]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80012bc:	2800      	cmp	r0, #0
 80012be:	d000      	beq.n	80012c2 <TIM2_ch1_IP_capture_callback+0x376>
 80012c0:	e080      	b.n	80013c4 <TIM2_ch1_IP_capture_callback+0x478>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80012c2:	2e00      	cmp	r6, #0
 80012c4:	d100      	bne.n	80012c8 <TIM2_ch1_IP_capture_callback+0x37c>
 80012c6:	e0c6      	b.n	8001456 <TIM2_ch1_IP_capture_callback+0x50a>
							TIM16_prescaler_adjust_to_be_loaded = MULTIPLY_BY_TWO;
 80012c8:	2301      	movs	r3, #1
 80012ca:	702b      	strb	r3, [r5, #0]
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 80012cc:	33ff      	adds	r3, #255	@ 0xff
 80012ce:	1b1b      	subs	r3, r3, r4
 80012d0:	b29b      	uxth	r3, r3
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen - 1;
 80012d2:	4a77      	ldr	r2, [pc, #476]	@ (80014b0 <TIM2_ch1_IP_capture_callback+0x564>)
 80012d4:	8013      	strh	r3, [r2, #0]
		if(TIM16_prescaler_adjust_to_be_loaded == MULTIPLY_BY_TWO){
 80012d6:	782b      	ldrb	r3, [r5, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11c      	bne.n	8001316 <TIM2_ch1_IP_capture_callback+0x3ca>
			TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded - 1;
 80012dc:	4b75      	ldr	r3, [pc, #468]	@ (80014b4 <TIM2_ch1_IP_capture_callback+0x568>)
 80012de:	4a76      	ldr	r2, [pc, #472]	@ (80014b8 <TIM2_ch1_IP_capture_callback+0x56c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	7013      	strb	r3, [r2, #0]
 80012e8:	e64c      	b.n	8000f84 <TIM2_ch1_IP_capture_callback+0x38>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80012ea:	2108      	movs	r1, #8
 80012ec:	0028      	movs	r0, r5
 80012ee:	f000 fe0f 	bl	8001f10 <unsigned_bitwise_modulo>
 80012f2:	2800      	cmp	r0, #0
 80012f4:	d000      	beq.n	80012f8 <TIM2_ch1_IP_capture_callback+0x3ac>
 80012f6:	e0b7      	b.n	8001468 <TIM2_ch1_IP_capture_callback+0x51c>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 80012f8:	4d6c      	ldr	r5, [pc, #432]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 80012fa:	7028      	strb	r0, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80012fc:	2e00      	cmp	r6, #0
 80012fe:	d000      	beq.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
 8001300:	e086      	b.n	8001410 <TIM2_ch1_IP_capture_callback+0x4c4>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten;
 8001302:	2380      	movs	r3, #128	@ 0x80
 8001304:	464a      	mov	r2, r9
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	1a9b      	subs	r3, r3, r2
 800130a:	4a69      	ldr	r2, [pc, #420]	@ (80014b0 <TIM2_ch1_IP_capture_callback+0x564>)
 800130c:	b29b      	uxth	r3, r3
 800130e:	8013      	strh	r3, [r2, #0]
		if(TIM16_prescaler_adjust_to_be_loaded == MULTIPLY_BY_TWO){
 8001310:	782b      	ldrb	r3, [r5, #0]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d0e2      	beq.n	80012dc <TIM2_ch1_IP_capture_callback+0x390>
		else if(TIM16_prescaler_adjust_to_be_loaded == DO_NOTHING){
 8001316:	782b      	ldrb	r3, [r5, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <TIM2_ch1_IP_capture_callback+0x3d2>
 800131c:	e632      	b.n	8000f84 <TIM2_ch1_IP_capture_callback+0x38>
				TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded;
 800131e:	4b65      	ldr	r3, [pc, #404]	@ (80014b4 <TIM2_ch1_IP_capture_callback+0x568>)
 8001320:	4a65      	ldr	r2, [pc, #404]	@ (80014b8 <TIM2_ch1_IP_capture_callback+0x56c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	7013      	strb	r3, [r2, #0]
}
 8001328:	e62c      	b.n	8000f84 <TIM2_ch1_IP_capture_callback+0x38>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 800132a:	4864      	ldr	r0, [pc, #400]	@ (80014bc <TIM2_ch1_IP_capture_callback+0x570>)
 800132c:	7800      	ldrb	r0, [r0, #0]
 800132e:	2801      	cmp	r0, #1
 8001330:	d000      	beq.n	8001334 <TIM2_ch1_IP_capture_callback+0x3e8>
 8001332:	e73c      	b.n	80011ae <TIM2_ch1_IP_capture_callback+0x262>
 8001334:	e706      	b.n	8001144 <TIM2_ch1_IP_capture_callback+0x1f8>
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001336:	4b62      	ldr	r3, [pc, #392]	@ (80014c0 <TIM2_ch1_IP_capture_callback+0x574>)
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001338:	702e      	strb	r6, [r5, #0]
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 800133a:	8818      	ldrh	r0, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	b280      	uxth	r0, r0
 8001340:	f000 fde6 	bl	8001f10 <unsigned_bitwise_modulo>
 8001344:	4643      	mov	r3, r8
 8001346:	3b01      	subs	r3, #1
 8001348:	3bff      	subs	r3, #255	@ 0xff
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	b29b      	uxth	r3, r3
 800134e:	2800      	cmp	r0, #0
 8001350:	d158      	bne.n	8001404 <TIM2_ch1_IP_capture_callback+0x4b8>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten;
 8001352:	3301      	adds	r3, #1
 8001354:	4a56      	ldr	r2, [pc, #344]	@ (80014b0 <TIM2_ch1_IP_capture_callback+0x564>)
 8001356:	33ff      	adds	r3, #255	@ 0xff
 8001358:	b29b      	uxth	r3, r3
 800135a:	8013      	strh	r3, [r2, #0]
 800135c:	e7d8      	b.n	8001310 <TIM2_ch1_IP_capture_callback+0x3c4>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 800135e:	2108      	movs	r1, #8
 8001360:	0028      	movs	r0, r5
 8001362:	f000 fdd5 	bl	8001f10 <unsigned_bitwise_modulo>
 8001366:	287f      	cmp	r0, #127	@ 0x7f
 8001368:	d840      	bhi.n	80013ec <TIM2_ch1_IP_capture_callback+0x4a0>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800136a:	0020      	movs	r0, r4
 800136c:	2101      	movs	r1, #1
 800136e:	f000 fdcf 	bl	8001f10 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001372:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001374:	4d4d      	ldr	r5, [pc, #308]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001376:	2800      	cmp	r0, #0
 8001378:	d000      	beq.n	800137c <TIM2_ch1_IP_capture_callback+0x430>
 800137a:	e086      	b.n	800148a <TIM2_ch1_IP_capture_callback+0x53e>
						if(symmetry_type_for_halfcycle == SHORTEN){
 800137c:	2e00      	cmp	r6, #0
 800137e:	d1a3      	bne.n	80012c8 <TIM2_ch1_IP_capture_callback+0x37c>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001380:	702e      	strb	r6, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001382:	e7be      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001384:	2108      	movs	r1, #8
 8001386:	0028      	movs	r0, r5
 8001388:	f000 fdc2 	bl	8001f10 <unsigned_bitwise_modulo>
 800138c:	2800      	cmp	r0, #0
 800138e:	d000      	beq.n	8001392 <TIM2_ch1_IP_capture_callback+0x446>
 8001390:	e678      	b.n	8001084 <TIM2_ch1_IP_capture_callback+0x138>
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001392:	2e00      	cmp	r6, #0
 8001394:	d14d      	bne.n	8001432 <TIM2_ch1_IP_capture_callback+0x4e6>
 8001396:	4d45      	ldr	r5, [pc, #276]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001398:	e7b3      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
		else if(interrupt_period <= FIVE_HUNDRED_TWELVE_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 800139a:	2280      	movs	r2, #128	@ 0x80
 800139c:	8821      	ldrh	r1, [r4, #0]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	4291      	cmp	r1, r2
 80013a2:	d93a      	bls.n	800141a <TIM2_ch1_IP_capture_callback+0x4ce>
		else if(interrupt_period <= ONE_THOUSAND_TWENTY_FOUR_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 80013a4:	2280      	movs	r2, #128	@ 0x80
 80013a6:	8821      	ldrh	r1, [r4, #0]
 80013a8:	0152      	lsls	r2, r2, #5
 80013aa:	4291      	cmp	r1, r2
 80013ac:	d971      	bls.n	8001492 <TIM2_ch1_IP_capture_callback+0x546>
 80013ae:	4945      	ldr	r1, [pc, #276]	@ (80014c4 <TIM2_ch1_IP_capture_callback+0x578>)
 80013b0:	e614      	b.n	8000fdc <TIM2_ch1_IP_capture_callback+0x90>
		else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 80013b2:	4a43      	ldr	r2, [pc, #268]	@ (80014c0 <TIM2_ch1_IP_capture_callback+0x574>)
 80013b4:	8812      	ldrh	r2, [r2, #0]
 80013b6:	2aff      	cmp	r2, #255	@ 0xff
 80013b8:	d900      	bls.n	80013bc <TIM2_ch1_IP_capture_callback+0x470>
 80013ba:	e6a6      	b.n	800110a <TIM2_ch1_IP_capture_callback+0x1be>
			duty_to_be_loaded = 1023;
 80013bc:	4a42      	ldr	r2, [pc, #264]	@ (80014c8 <TIM2_ch1_IP_capture_callback+0x57c>)
 80013be:	4843      	ldr	r0, [pc, #268]	@ (80014cc <TIM2_ch1_IP_capture_callback+0x580>)
 80013c0:	8010      	strh	r0, [r2, #0]
 80013c2:	e628      	b.n	8001016 <TIM2_ch1_IP_capture_callback+0xca>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d046      	beq.n	8001456 <TIM2_ch1_IP_capture_callback+0x50a>
							TIM16_prescaler_adjust_to_be_loaded = MULTIPLY_BY_TWO;
 80013c8:	2301      	movs	r3, #1
 80013ca:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80013cc:	e718      	b.n	8001200 <TIM2_ch1_IP_capture_callback+0x2b4>
		else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 80013ce:	4a3c      	ldr	r2, [pc, #240]	@ (80014c0 <TIM2_ch1_IP_capture_callback+0x574>)
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	2aff      	cmp	r2, #255	@ 0xff
 80013d4:	d800      	bhi.n	80013d8 <TIM2_ch1_IP_capture_callback+0x48c>
 80013d6:	e69c      	b.n	8001112 <TIM2_ch1_IP_capture_callback+0x1c6>
			duty_to_be_loaded = 0;
 80013d8:	2000      	movs	r0, #0
 80013da:	4a3b      	ldr	r2, [pc, #236]	@ (80014c8 <TIM2_ch1_IP_capture_callback+0x57c>)
 80013dc:	8010      	strh	r0, [r2, #0]
 80013de:	e61a      	b.n	8001016 <TIM2_ch1_IP_capture_callback+0xca>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80013e0:	2e00      	cmp	r6, #0
 80013e2:	d03e      	beq.n	8001462 <TIM2_ch1_IP_capture_callback+0x516>
							TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80013e4:	2201      	movs	r2, #1
 80013e6:	4d31      	ldr	r5, [pc, #196]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 80013e8:	701a      	strb	r2, [r3, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80013ea:	e709      	b.n	8001200 <TIM2_ch1_IP_capture_callback+0x2b4>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80013ec:	2108      	movs	r1, #8
 80013ee:	0028      	movs	r0, r5
 80013f0:	f000 fd8e 	bl	8001f10 <unsigned_bitwise_modulo>
 80013f4:	2880      	cmp	r0, #128	@ 0x80
 80013f6:	d900      	bls.n	80013fa <TIM2_ch1_IP_capture_callback+0x4ae>
 80013f8:	e758      	b.n	80012ac <TIM2_ch1_IP_capture_callback+0x360>
		if(symmetry_type_for_halfcycle == SHORTEN){
 80013fa:	2e00      	cmp	r6, #0
 80013fc:	d000      	beq.n	8001400 <TIM2_ch1_IP_capture_callback+0x4b4>
 80013fe:	e65d      	b.n	80010bc <TIM2_ch1_IP_capture_callback+0x170>
 8001400:	4d2a      	ldr	r5, [pc, #168]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001402:	e77e      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten + 1;
 8001404:	3302      	adds	r3, #2
 8001406:	4a2a      	ldr	r2, [pc, #168]	@ (80014b0 <TIM2_ch1_IP_capture_callback+0x564>)
 8001408:	33ff      	adds	r3, #255	@ 0xff
 800140a:	b29b      	uxth	r3, r3
 800140c:	8013      	strh	r3, [r2, #0]
 800140e:	e77f      	b.n	8001310 <TIM2_ch1_IP_capture_callback+0x3c4>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	1b1b      	subs	r3, r3, r4
 8001416:	b29b      	uxth	r3, r3
 8001418:	e75b      	b.n	80012d2 <TIM2_ch1_IP_capture_callback+0x386>
			interrupt_period = interrupt_period >> 3;
 800141a:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800141c:	4929      	ldr	r1, [pc, #164]	@ (80014c4 <TIM2_ch1_IP_capture_callback+0x578>)
			interrupt_period = interrupt_period >> 3;
 800141e:	08d2      	lsrs	r2, r2, #3
 8001420:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001422:	8822      	ldrh	r2, [r4, #0]
 8001424:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 3;
 8001426:	2202      	movs	r2, #2
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001428:	b29b      	uxth	r3, r3
 800142a:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 3;
 800142c:	4b21      	ldr	r3, [pc, #132]	@ (80014b4 <TIM2_ch1_IP_capture_callback+0x568>)
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e5d4      	b.n	8000fdc <TIM2_ch1_IP_capture_callback+0x90>
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001432:	2300      	movs	r3, #0
 8001434:	4d1d      	ldr	r5, [pc, #116]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001436:	e74c      	b.n	80012d2 <TIM2_ch1_IP_capture_callback+0x386>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001438:	2108      	movs	r1, #8
 800143a:	0028      	movs	r0, r5
 800143c:	f000 fd68 	bl	8001f10 <unsigned_bitwise_modulo>
 8001440:	2880      	cmp	r0, #128	@ 0x80
 8001442:	d9da      	bls.n	80013fa <TIM2_ch1_IP_capture_callback+0x4ae>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001444:	2300      	movs	r3, #0
 8001446:	4d19      	ldr	r5, [pc, #100]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001448:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 800144a:	2e00      	cmp	r6, #0
 800144c:	d004      	beq.n	8001458 <TIM2_ch1_IP_capture_callback+0x50c>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen - 1;
 800144e:	23ff      	movs	r3, #255	@ 0xff
 8001450:	1b1b      	subs	r3, r3, r4
 8001452:	b29b      	uxth	r3, r3
 8001454:	e73d      	b.n	80012d2 <TIM2_ch1_IP_capture_callback+0x386>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001456:	702e      	strb	r6, [r5, #0]
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001458:	464b      	mov	r3, r9
 800145a:	3b01      	subs	r3, #1
 800145c:	b29b      	uxth	r3, r3
 800145e:	4699      	mov	r9, r3
 8001460:	e74f      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
							TIM16_prescaler_adjust = DO_NOTHING;
 8001462:	4d12      	ldr	r5, [pc, #72]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001464:	701e      	strb	r6, [r3, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001466:	e74c      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001468:	2108      	movs	r1, #8
 800146a:	0028      	movs	r0, r5
 800146c:	f000 fd50 	bl	8001f10 <unsigned_bitwise_modulo>
 8001470:	287f      	cmp	r0, #127	@ 0x7f
 8001472:	d8e1      	bhi.n	8001438 <TIM2_ch1_IP_capture_callback+0x4ec>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001474:	2300      	movs	r3, #0
 8001476:	4d0d      	ldr	r5, [pc, #52]	@ (80014ac <TIM2_ch1_IP_capture_callback+0x560>)
 8001478:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 800147a:	2e00      	cmp	r6, #0
 800147c:	d100      	bne.n	8001480 <TIM2_ch1_IP_capture_callback+0x534>
 800147e:	e740      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001480:	3301      	adds	r3, #1
 8001482:	33ff      	adds	r3, #255	@ 0xff
 8001484:	1b1b      	subs	r3, r3, r4
 8001486:	b29b      	uxth	r3, r3
 8001488:	e723      	b.n	80012d2 <TIM2_ch1_IP_capture_callback+0x386>
						if(symmetry_type_for_halfcycle == SHORTEN){
 800148a:	2e00      	cmp	r6, #0
 800148c:	d19c      	bne.n	80013c8 <TIM2_ch1_IP_capture_callback+0x47c>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 800148e:	702e      	strb	r6, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001490:	e737      	b.n	8001302 <TIM2_ch1_IP_capture_callback+0x3b6>
			interrupt_period = interrupt_period >> 4;
 8001492:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001494:	490b      	ldr	r1, [pc, #44]	@ (80014c4 <TIM2_ch1_IP_capture_callback+0x578>)
			interrupt_period = interrupt_period >> 4;
 8001496:	0912      	lsrs	r2, r2, #4
 8001498:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800149a:	8822      	ldrh	r2, [r4, #0]
 800149c:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 4;
 800149e:	2201      	movs	r2, #1
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 4;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <TIM2_ch1_IP_capture_callback+0x568>)
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e598      	b.n	8000fdc <TIM2_ch1_IP_capture_callback+0x90>
 80014aa:	46c0      	nop			@ (mov r8, r8)
 80014ac:	20000a2a 	.word	0x20000a2a
 80014b0:	20000a26 	.word	0x20000a26
 80014b4:	20000a24 	.word	0x20000a24
 80014b8:	20000a20 	.word	0x20000a20
 80014bc:	20000a54 	.word	0x20000a54
 80014c0:	20000a56 	.word	0x20000a56
 80014c4:	20000a28 	.word	0x20000a28
 80014c8:	20000a22 	.word	0x20000a22
 80014cc:	000003ff 	.word	0x000003ff

080014d0 <TIM2_ch1_overflow_callback>:

void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){

	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <TIM2_ch1_overflow_callback+0x1c>)
 80014d2:	781a      	ldrb	r2, [r3, #0]
 80014d4:	2a01      	cmp	r2, #1
 80014d6:	d000      	beq.n	80014da <TIM2_ch1_overflow_callback+0xa>
		input_capture_measurement_is_ongoing = NO;
		input_capture_event = FIRST;

		//do nothing
	}
}
 80014d8:	4770      	bx	lr
	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <TIM2_ch1_overflow_callback+0x20>)
 80014dc:	7811      	ldrb	r1, [r2, #0]
 80014de:	2901      	cmp	r1, #1
 80014e0:	d1fa      	bne.n	80014d8 <TIM2_ch1_overflow_callback+0x8>
		input_capture_measurement_is_ongoing = NO;
 80014e2:	2100      	movs	r1, #0
 80014e4:	7019      	strb	r1, [r3, #0]
		input_capture_event = FIRST;
 80014e6:	7011      	strb	r1, [r2, #0]
}
 80014e8:	e7f6      	b.n	80014d8 <TIM2_ch1_overflow_callback+0x8>
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	20000a30 	.word	0x20000a30
 80014f0:	20000a38 	.word	0x20000a38

080014f4 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){

	//force update of timers to sync the wave to the TIM3 reelapse interrupt

	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 80014f4:	2101      	movs	r1, #1
 80014f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001564 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x70>)
void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80014f8:	b570      	push	{r4, r5, r6, lr}
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 80014fa:	6953      	ldr	r3, [r2, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 80014fc:	4d1a      	ldr	r5, [pc, #104]	@ (8001568 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x74>)
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 80014fe:	430b      	orrs	r3, r1
 8001500:	6153      	str	r3, [r2, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 8001502:	4a1a      	ldr	r2, [pc, #104]	@ (800156c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x78>)
 8001504:	882b      	ldrh	r3, [r5, #0]
 8001506:	6811      	ldr	r1, [r2, #0]
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 8001508:	4c19      	ldr	r4, [pc, #100]	@ (8001570 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x7c>)
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 800150a:	b29b      	uxth	r3, r3
 800150c:	624b      	str	r3, [r1, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 800150e:	7822      	ldrb	r2, [r4, #0]
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x80>)
 8001512:	0052      	lsls	r2, r2, #1
 8001514:	5ad3      	ldrh	r3, [r2, r3]
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty_to_be_loaded); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>)
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 8001518:	3b01      	subs	r3, #1
 800151a:	628b      	str	r3, [r1, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty_to_be_loaded); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x88>)
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	881b      	ldrh	r3, [r3, #0]

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001522:	2100      	movs	r1, #0
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty_to_be_loaded); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8001524:	b29b      	uxth	r3, r3
 8001526:	6353      	str	r3, [r2, #52]	@ 0x34
	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001528:	4815      	ldr	r0, [pc, #84]	@ (8001580 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x8c>)
 800152a:	f000 fac5 	bl	8001ab8 <Stop_OC_TIM>

	input_capture_measurement_reelapse_is_ongoing = NO;
 800152e:	2200      	movs	r2, #0
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x90>)
 8001532:	701a      	strb	r2, [r3, #0]

	current_index = current_index_to_be_loaded;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x94>)
 8001536:	4a15      	ldr	r2, [pc, #84]	@ (800158c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x98>)
 8001538:	881b      	ldrh	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	8013      	strh	r3, [r2, #0]
	current_halfcycle = current_halfcycle_to_be_loaded;
 800153e:	4b14      	ldr	r3, [pc, #80]	@ (8001590 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x9c>)
 8001540:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa0>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	7013      	strb	r3, [r2, #0]
	current_quadrant = current_quadrant_to_be_loaded;
 8001548:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa4>)
 800154a:	4a14      	ldr	r2, [pc, #80]	@ (800159c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xa8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	7013      	strb	r3, [r2, #0]

	//set the locked values to the 'to be loaded' values such that the TIM16 continually loads these if the speed pot is disabled
	TIM16_final_start_value_locked = TIM16_final_start_value_to_be_loaded;
 8001552:	882b      	ldrh	r3, [r5, #0]
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xac>)
 8001556:	b29b      	uxth	r3, r3
 8001558:	8013      	strh	r3, [r2, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index_to_be_loaded;
 800155a:	7823      	ldrb	r3, [r4, #0]
 800155c:	4a11      	ldr	r2, [pc, #68]	@ (80015a4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0xb0>)
 800155e:	b2db      	uxtb	r3, r3
 8001560:	7013      	strb	r3, [r2, #0]
}
 8001562:	bd70      	pop	{r4, r5, r6, pc}
 8001564:	40014400 	.word	0x40014400
 8001568:	20000a26 	.word	0x20000a26
 800156c:	200003b0 	.word	0x200003b0
 8001570:	20000a20 	.word	0x20000a20
 8001574:	08005874 	.word	0x08005874
 8001578:	2000046c 	.word	0x2000046c
 800157c:	20000a22 	.word	0x20000a22
 8001580:	20000238 	.word	0x20000238
 8001584:	20000a2e 	.word	0x20000a2e
 8001588:	20000a1c 	.word	0x20000a1c
 800158c:	20000a56 	.word	0x20000a56
 8001590:	20000a1f 	.word	0x20000a1f
 8001594:	20000a55 	.word	0x20000a55
 8001598:	20000a1e 	.word	0x20000a1e
 800159c:	20000a54 	.word	0x20000a54
 80015a0:	20000a3c 	.word	0x20000a3c
 80015a4:	20000a48 	.word	0x20000a48

080015a8 <TIM17_callback_debounce>:

void TIM17_callback_debounce(TIM_HandleTypeDef *htim){
 80015a8:	b510      	push	{r4, lr}

	Stop_OC_TIM(&htim17, TIM_CHANNEL_1);
 80015aa:	2100      	movs	r1, #0
 80015ac:	4808      	ldr	r0, [pc, #32]	@ (80015d0 <TIM17_callback_debounce+0x28>)
 80015ae:	f000 fa83 	bl	8001ab8 <Stop_OC_TIM>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn); //enable EXTI10 interrupts - NOT WORKING
 80015b2:	2007      	movs	r0, #7
 80015b4:	f001 fa48 	bl	8002a48 <HAL_NVIC_EnableIRQ>
	GPIO_InitStruct.Pin = BOUNCY_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(BOUNCY_GPIO_Port, &GPIO_InitStruct);*/

	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = NO;
 80015b8:	2200      	movs	r2, #0

	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 1); //latch high
 80015ba:	2180      	movs	r1, #128	@ 0x80
 80015bc:	20a0      	movs	r0, #160	@ 0xa0
	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = NO;
 80015be:	4b05      	ldr	r3, [pc, #20]	@ (80015d4 <TIM17_callback_debounce+0x2c>)
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 1); //latch high
 80015c0:	0089      	lsls	r1, r1, #2
	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = NO;
 80015c2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 1); //latch high
 80015c4:	05c0      	lsls	r0, r0, #23
 80015c6:	3201      	adds	r2, #1
 80015c8:	f001 fcdc 	bl	8002f84 <HAL_GPIO_WritePin>
}
 80015cc:	bd10      	pop	{r4, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	200000c0 	.word	0x200000c0
 80015d4:	20000612 	.word	0x20000612

080015d8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80015d8:	b510      	push	{r4, lr}

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn); //disable further EXTI10 interrupts - NOT WORKING
 80015da:	2007      	movs	r0, #7
 80015dc:	f001 fa40 	bl	8002a60 <HAL_NVIC_DisableIRQ>
	//HAL_GPIO_DeInit(BOUNCY_GPIO_Port, BOUNCY_Pin); //apparently disables EXTI interrupt
	tap_tempo_mode_is_active = YES;
 80015e0:	2201      	movs	r2, #1
	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = YES;
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 0); //latch low until timer elapses
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	20a0      	movs	r0, #160	@ 0xa0
	tap_tempo_mode_is_active = YES;
 80015e6:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <HAL_GPIO_EXTI_Falling_Callback+0x30>)
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 0); //latch low until timer elapses
 80015e8:	0089      	lsls	r1, r1, #2
	tap_tempo_mode_is_active = YES;
 80015ea:	701a      	strb	r2, [r3, #0]
	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = YES;
 80015ec:	4b07      	ldr	r3, [pc, #28]	@ (800160c <HAL_GPIO_EXTI_Falling_Callback+0x34>)
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 0); //latch low until timer elapses
 80015ee:	05c0      	lsls	r0, r0, #23
	TAP_TEMPO_EXTI4_15_IRQ_is_disabled = YES;
 80015f0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DEBOUNCED_GPIO_Port, DEBOUNCED_Pin, 0); //latch low until timer elapses
 80015f2:	2200      	movs	r2, #0
 80015f4:	f001 fcc6 	bl	8002f84 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <HAL_GPIO_EXTI_Falling_Callback+0x38>)
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 80015fc:	2100      	movs	r1, #0
	__HAL_TIM_SET_COUNTER(&htim17, 0);
 80015fe:	6803      	ldr	r3, [r0, #0]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 8001602:	f000 fa4f 	bl	8001aa4 <Start_OC_TIM>
}
 8001606:	bd10      	pop	{r4, pc}
 8001608:	20000611 	.word	0x20000611
 800160c:	20000612 	.word	0x20000612
 8001610:	200000c0 	.word	0x200000c0

08001614 <main>:

//INCLUDES
#include "system.h"

int main(void)
{
 8001614:	b510      	push	{r4, lr}
	System_Init();
 8001616:	f7ff fa45 	bl	8000aa4 <System_Init>

	//duty_delay_line_read_pointer_offset = 255; //phase difference between the two waves

	current_depth = 255; //whilst depth pot is being used as delay adjust
 800161a:	22ff      	movs	r2, #255	@ 0xff

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 800161c:	2101      	movs	r1, #1
	current_depth = 255; //whilst depth pot is being used as delay adjust
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <main+0x54>)

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8001620:	4c12      	ldr	r4, [pc, #72]	@ (800166c <main+0x58>)
	current_depth = 255; //whilst depth pot is being used as delay adjust
 8001622:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8001624:	4b12      	ldr	r3, [pc, #72]	@ (8001670 <main+0x5c>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8001626:	0020      	movs	r0, r4
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68d3      	ldr	r3, [r2, #12]
 800162c:	430b      	orrs	r3, r1
 800162e:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <main+0x60>)
 8001632:	4911      	ldr	r1, [pc, #68]	@ (8001678 <main+0x64>)
 8001634:	781a      	ldrb	r2, [r3, #0]
 8001636:	f001 f8f3 	bl	8002820 <HAL_ADC_Start_DMA>

	//WAIT
	while(initial_ADC_conversion_complete == NO){}; //wait while first ADC conversion is ongoing
 800163a:	4a10      	ldr	r2, [pc, #64]	@ (800167c <main+0x68>)
 800163c:	7813      	ldrb	r3, [r2, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0fc      	beq.n	800163c <main+0x28>

	HAL_ADC_Stop_DMA(&hadc1);
 8001642:	0020      	movs	r0, r4
 8001644:	f001 f98a 	bl	800295c <HAL_ADC_Stop_DMA>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_Oscillator();
 8001648:	f000 f9ec 	bl	8001a24 <Start_PWM_Gen_Timer_Main_Oscillator>
	Start_PWM_Gen_Timer_Secondary_Oscillator();
 800164c:	f000 fa02 	bl	8001a54 <Start_PWM_Gen_Timer_Secondary_Oscillator>
	Start_Freq_Gen_Timer();
 8001650:	f000 fa18 	bl	8001a84 <Start_Freq_Gen_Timer>
	Start_Input_Capture_Timer();
 8001654:	f000 fa3a 	bl	8001acc <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8001658:	f000 f9e0 	bl	8001a1c <Global_Interrupt_Enable>

	while (1)
	{
		Speed_pot_check();
 800165c:	f000 fc5e 	bl	8001f1c <Speed_pot_check>
		HAL_Delay(100);
 8001660:	2064      	movs	r0, #100	@ 0x64
 8001662:	f000 fd13 	bl	800208c <HAL_Delay>
	while (1)
 8001666:	e7f9      	b.n	800165c <main+0x48>
 8001668:	20000a5c 	.word	0x20000a5c
 800166c:	20000584 	.word	0x20000584
 8001670:	200002f4 	.word	0x200002f4
 8001674:	08005870 	.word	0x08005870
 8001678:	20000a40 	.word	0x20000a40
 800167c:	20000a3f 	.word	0x20000a3f

08001680 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001680:	2201      	movs	r2, #1
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_MspInit+0x2c>)
{
 8001684:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001688:	4311      	orrs	r1, r2
 800168a:	6419      	str	r1, [r3, #64]	@ 0x40
 800168c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800168e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001690:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001698:	0549      	lsls	r1, r1, #21
 800169a:	430a      	orrs	r2, r1
 800169c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	400b      	ands	r3, r1
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	b002      	add	sp, #8
 80016a8:	4770      	bx	lr
 80016aa:	46c0      	nop			@ (mov r8, r8)
 80016ac:	40021000 	.word	0x40021000

080016b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b0:	b530      	push	{r4, r5, lr}
 80016b2:	0004      	movs	r4, r0
 80016b4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b6:	2214      	movs	r2, #20
 80016b8:	2100      	movs	r1, #0
 80016ba:	a802      	add	r0, sp, #8
 80016bc:	f004 f8a0 	bl	8005800 <memset>
  if(hadc->Instance==ADC1)
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <HAL_ADC_MspInit+0x8c>)
 80016c2:	6822      	ldr	r2, [r4, #0]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d001      	beq.n	80016cc <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016c8:	b009      	add	sp, #36	@ 0x24
 80016ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80016cc:	2180      	movs	r1, #128	@ 0x80
 80016ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_ADC_MspInit+0x90>)
 80016d0:	0349      	lsls	r1, r1, #13
 80016d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80016d6:	430a      	orrs	r2, r1
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80016de:	400a      	ands	r2, r1
 80016e0:	9200      	str	r2, [sp, #0]
 80016e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e4:	2201      	movs	r2, #1
 80016e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80016e8:	4311      	orrs	r1, r2
 80016ea:	6359      	str	r1, [r3, #52]	@ 0x34
 80016ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	401a      	ands	r2, r3
 80016f2:	9201      	str	r2, [sp, #4]
 80016f4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016f6:	2233      	movs	r2, #51	@ 0x33
 80016f8:	2303      	movs	r3, #3
 80016fa:	9202      	str	r2, [sp, #8]
 80016fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f001 fb4f 	bl	8002da0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001702:	4d10      	ldr	r5, [pc, #64]	@ (8001744 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001704:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 8001706:	4b10      	ldr	r3, [pc, #64]	@ (8001748 <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001708:	612a      	str	r2, [r5, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 800170a:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800170c:	2305      	movs	r3, #5
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800170e:	3280      	adds	r2, #128	@ 0x80
 8001710:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001712:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001714:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001716:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001718:	00d2      	lsls	r2, r2, #3
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800171a:	0028      	movs	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171c:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800171e:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001720:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001722:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001724:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001726:	f001 f9c5 	bl	8002ab4 <HAL_DMA_Init>
 800172a:	2800      	cmp	r0, #0
 800172c:	d102      	bne.n	8001734 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800172e:	6525      	str	r5, [r4, #80]	@ 0x50
 8001730:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001732:	e7c9      	b.n	80016c8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001734:	f7ff f9b4 	bl	8000aa0 <Error_Handler>
 8001738:	e7f9      	b.n	800172e <HAL_ADC_MspInit+0x7e>
 800173a:	46c0      	nop			@ (mov r8, r8)
 800173c:	40012400 	.word	0x40012400
 8001740:	40021000 	.word	0x40021000
 8001744:	20000528 	.word	0x20000528
 8001748:	40020008 	.word	0x40020008

0800174c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800174c:	b510      	push	{r4, lr}
 800174e:	0004      	movs	r4, r0
 8001750:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	2214      	movs	r2, #20
 8001754:	2100      	movs	r1, #0
 8001756:	a806      	add	r0, sp, #24
 8001758:	f004 f852 	bl	8005800 <memset>
  if(htim_base->Instance==TIM2)
 800175c:	2280      	movs	r2, #128	@ 0x80
 800175e:	6823      	ldr	r3, [r4, #0]
 8001760:	05d2      	lsls	r2, r2, #23
 8001762:	4293      	cmp	r3, r2
 8001764:	d02b      	beq.n	80017be <HAL_TIM_Base_MspInit+0x72>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001766:	4a3c      	ldr	r2, [pc, #240]	@ (8001858 <HAL_TIM_Base_MspInit+0x10c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d04f      	beq.n	800180c <HAL_TIM_Base_MspInit+0xc0>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  if(htim_base->Instance==TIM14)
 800176c:	4a3b      	ldr	r2, [pc, #236]	@ (800185c <HAL_TIM_Base_MspInit+0x110>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d007      	beq.n	8001782 <HAL_TIM_Base_MspInit+0x36>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001772:	4a3b      	ldr	r2, [pc, #236]	@ (8001860 <HAL_TIM_Base_MspInit+0x114>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d05c      	beq.n	8001832 <HAL_TIM_Base_MspInit+0xe6>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
  else if(htim_base->Instance==TIM17)
 8001778:	4a3a      	ldr	r2, [pc, #232]	@ (8001864 <HAL_TIM_Base_MspInit+0x118>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d00c      	beq.n	8001798 <HAL_TIM_Base_MspInit+0x4c>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800177e:	b00c      	add	sp, #48	@ 0x30
 8001780:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <HAL_TIM_Base_MspInit+0x11c>)
 8001786:	0209      	lsls	r1, r1, #8
 8001788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800178a:	430a      	orrs	r2, r1
 800178c:	641a      	str	r2, [r3, #64]	@ 0x40
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	400b      	ands	r3, r1
 8001792:	9303      	str	r3, [sp, #12]
 8001794:	9b03      	ldr	r3, [sp, #12]
 8001796:	e7f2      	b.n	800177e <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001798:	2180      	movs	r1, #128	@ 0x80
 800179a:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_TIM_Base_MspInit+0x11c>)
 800179c:	02c9      	lsls	r1, r1, #11
 800179e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80017a0:	2016      	movs	r0, #22
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017a2:	430a      	orrs	r2, r1
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80017a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80017a8:	2200      	movs	r2, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017aa:	400b      	ands	r3, r1
 80017ac:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80017ae:	2100      	movs	r1, #0
    __HAL_RCC_TIM17_CLK_ENABLE();
 80017b0:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80017b2:	f001 f91f 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80017b6:	2016      	movs	r0, #22
 80017b8:	f001 f946 	bl	8002a48 <HAL_NVIC_EnableIRQ>
}
 80017bc:	e7df      	b.n	800177e <HAL_TIM_Base_MspInit+0x32>
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	2201      	movs	r2, #1
 80017c0:	4b29      	ldr	r3, [pc, #164]	@ (8001868 <HAL_TIM_Base_MspInit+0x11c>)
  GPIO_InitStruct.Pin = INPUT_CAP_Pin;
 80017c2:	2080      	movs	r0, #128	@ 0x80
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017c4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
  GPIO_InitStruct.Pin = INPUT_CAP_Pin;
 80017c6:	0200      	lsls	r0, r0, #8
  __HAL_RCC_TIM2_CLK_ENABLE();
 80017c8:	4311      	orrs	r1, r2
 80017ca:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80017cc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80017ce:	4011      	ands	r1, r2
 80017d0:	9100      	str	r1, [sp, #0]
 80017d2:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80017d6:	4311      	orrs	r1, r2
 80017d8:	6359      	str	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = INPUT_CAP_Pin;
 80017da:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = INPUT_CAP_Pin;
 80017de:	9006      	str	r0, [sp, #24]
 80017e0:	9107      	str	r1, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4013      	ands	r3, r2
 80017e4:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(INPUT_CAP_GPIO_Port, &GPIO_InitStruct);
 80017e6:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80017ea:	2302      	movs	r3, #2
  HAL_GPIO_Init(INPUT_CAP_GPIO_Port, &GPIO_InitStruct);
 80017ec:	a906      	add	r1, sp, #24
 80017ee:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80017f0:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 80017f2:	9208      	str	r2, [sp, #32]
  HAL_GPIO_Init(INPUT_CAP_GPIO_Port, &GPIO_InitStruct);
 80017f4:	f001 fad4 	bl	8002da0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2100      	movs	r1, #0
 80017fc:	200f      	movs	r0, #15
 80017fe:	f001 f8f9 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001802:	200f      	movs	r0, #15
 8001804:	f001 f920 	bl	8002a48 <HAL_NVIC_EnableIRQ>
  if(htim_base->Instance==TIM14)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	e7af      	b.n	800176c <HAL_TIM_Base_MspInit+0x20>
  __HAL_RCC_TIM3_CLK_ENABLE();
 800180c:	2302      	movs	r3, #2
 800180e:	4a16      	ldr	r2, [pc, #88]	@ (8001868 <HAL_TIM_Base_MspInit+0x11c>)
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001810:	2010      	movs	r0, #16
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001812:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001814:	4319      	orrs	r1, r3
 8001816:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8001818:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800181a:	2100      	movs	r1, #0
  __HAL_RCC_TIM3_CLK_ENABLE();
 800181c:	4013      	ands	r3, r2
 800181e:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001820:	2200      	movs	r2, #0
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001822:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001824:	f001 f8e6 	bl	80029f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001828:	2010      	movs	r0, #16
 800182a:	f001 f90d 	bl	8002a48 <HAL_NVIC_EnableIRQ>
  if(htim_base->Instance==TIM14)
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	e79c      	b.n	800176c <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001832:	2180      	movs	r1, #128	@ 0x80
 8001834:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_TIM_Base_MspInit+0x11c>)
 8001836:	0289      	lsls	r1, r1, #10
 8001838:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800183a:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800183c:	430a      	orrs	r2, r1
 800183e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001844:	400b      	ands	r3, r1
 8001846:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001848:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 800184a:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800184c:	f001 f8d2 	bl	80029f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001850:	2015      	movs	r0, #21
 8001852:	f001 f8f9 	bl	8002a48 <HAL_NVIC_EnableIRQ>
 8001856:	e792      	b.n	800177e <HAL_TIM_Base_MspInit+0x32>
 8001858:	40000400 	.word	0x40000400
 800185c:	40002000 	.word	0x40002000
 8001860:	40014400 	.word	0x40014400
 8001864:	40014800 	.word	0x40014800
 8001868:	40021000 	.word	0x40021000

0800186c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800186c:	b510      	push	{r4, lr}
 800186e:	0004      	movs	r4, r0
 8001870:	b088      	sub	sp, #32
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	2214      	movs	r2, #20
 8001874:	2100      	movs	r1, #0
 8001876:	a802      	add	r0, sp, #8
 8001878:	f003 ffc2 	bl	8005800 <memset>
    if(htim->Instance==TIM1)
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	4a16      	ldr	r2, [pc, #88]	@ (80018d8 <HAL_TIM_MspPostInit+0x6c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d004      	beq.n	800188e <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM14)
 8001884:	4a15      	ldr	r2, [pc, #84]	@ (80018dc <HAL_TIM_MspPostInit+0x70>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d017      	beq.n	80018ba <HAL_TIM_MspPostInit+0x4e>

  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }
}
 800188a:	b008      	add	sp, #32
 800188c:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2301      	movs	r3, #1
 8001890:	4a13      	ldr	r2, [pc, #76]	@ (80018e0 <HAL_TIM_MspPostInit+0x74>)
 8001892:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001894:	4319      	orrs	r1, r3
 8001896:	6351      	str	r1, [r2, #52]	@ 0x34
 8001898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800189a:	4013      	ands	r3, r2
 800189c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800189e:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80018a2:	2302      	movs	r3, #2
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	9202      	str	r2, [sp, #8]
 80018a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80018aa:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	20a0      	movs	r0, #160	@ 0xa0
 80018ae:	a902      	add	r1, sp, #8
 80018b0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80018b2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f001 fa74 	bl	8002da0 <HAL_GPIO_Init>
}
 80018b8:	e7e7      	b.n	800188a <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2301      	movs	r3, #1
 80018bc:	4a08      	ldr	r2, [pc, #32]	@ (80018e0 <HAL_TIM_MspPostInit+0x74>)
 80018be:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 80018c0:	4319      	orrs	r1, r3
 80018c2:	6351      	str	r1, [r2, #52]	@ 0x34
 80018c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018c6:	4013      	ands	r3, r2
 80018c8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ca:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018cc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018ce:	2302      	movs	r3, #2
 80018d0:	9202      	str	r2, [sp, #8]
 80018d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80018d4:	2304      	movs	r3, #4
 80018d6:	e7e9      	b.n	80018ac <HAL_TIM_MspPostInit+0x40>
 80018d8:	40012c00 	.word	0x40012c00
 80018dc:	40002000 	.word	0x40002000
 80018e0:	40021000 	.word	0x40021000

080018e4 <HAL_TIM_PWM_MspInit>:
}



void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018e4:	b510      	push	{r4, lr}
 80018e6:	0004      	movs	r4, r0
 80018e8:	b08c      	sub	sp, #48	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ea:	2228      	movs	r2, #40	@ 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	a802      	add	r0, sp, #8
 80018f0:	f003 ff86 	bl	8005800 <memset>
  if(htim_pwm->Instance==TIM1)
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_TIM_PWM_MspInit+0x48>)
 80018f6:	6822      	ldr	r2, [r4, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_TIM_PWM_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80018fc:	b00c      	add	sp, #48	@ 0x30
 80018fe:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001900:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001904:	039b      	lsls	r3, r3, #14
 8001906:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001908:	f001 ff20 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 800190c:	2800      	cmp	r0, #0
 800190e:	d10a      	bne.n	8001926 <HAL_TIM_PWM_MspInit+0x42>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001910:	2180      	movs	r1, #128	@ 0x80
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_TIM_PWM_MspInit+0x4c>)
 8001914:	0109      	lsls	r1, r1, #4
 8001916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001918:	430a      	orrs	r2, r1
 800191a:	641a      	str	r2, [r3, #64]	@ 0x40
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	400b      	ands	r3, r1
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	9b01      	ldr	r3, [sp, #4]
}
 8001924:	e7ea      	b.n	80018fc <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 8001926:	f7ff f8bb 	bl	8000aa0 <Error_Handler>
 800192a:	e7f1      	b.n	8001910 <HAL_TIM_PWM_MspInit+0x2c>
 800192c:	40012c00 	.word	0x40012c00
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b510      	push	{r4, lr}
 8001936:	0004      	movs	r4, r0
 8001938:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	2214      	movs	r2, #20
 800193c:	2100      	movs	r1, #0
 800193e:	a802      	add	r0, sp, #8
 8001940:	f003 ff5e 	bl	8005800 <memset>
  if(huart->Instance==USART2)
 8001944:	4b11      	ldr	r3, [pc, #68]	@ (800198c <HAL_UART_MspInit+0x58>)
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800194c:	b008      	add	sp, #32
 800194e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001950:	2180      	movs	r1, #128	@ 0x80
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_UART_MspInit+0x5c>)
 8001954:	0289      	lsls	r1, r1, #10
 8001956:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001958:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800195a:	430a      	orrs	r2, r1
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800195e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001960:	400a      	ands	r2, r1
 8001962:	9200      	str	r2, [sp, #0]
 8001964:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001966:	2201      	movs	r2, #1
 8001968:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800196a:	4311      	orrs	r1, r2
 800196c:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800196e:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001972:	9002      	str	r0, [sp, #8]
 8001974:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4013      	ands	r3, r2
 800197a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	a902      	add	r1, sp, #8
 800197e:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001982:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001984:	f001 fa0c 	bl	8002da0 <HAL_GPIO_Init>
}
 8001988:	e7e0      	b.n	800194c <HAL_UART_MspInit+0x18>
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	40004400 	.word	0x40004400
 8001990:	40021000 	.word	0x40021000

08001994 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler>
 8001996:	46c0      	nop			@ (mov r8, r8)

08001998 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <HardFault_Handler>
 800199a:	46c0      	nop			@ (mov r8, r8)

0800199c <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800199c:	4770      	bx	lr
 800199e:	46c0      	nop			@ (mov r8, r8)

080019a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80019a0:	4770      	bx	lr
 80019a2:	46c0      	nop			@ (mov r8, r8)

080019a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a6:	f000 fb5f 	bl	8002068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019aa:	bd10      	pop	{r4, pc}

080019ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ae:	4802      	ldr	r0, [pc, #8]	@ (80019b8 <DMA1_Channel1_IRQHandler+0xc>)
 80019b0:	f001 f99a 	bl	8002ce8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019b4:	bd10      	pop	{r4, pc}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	20000528 	.word	0x20000528

080019bc <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
 80019bc:	4770      	bx	lr
 80019be:	46c0      	nop			@ (mov r8, r8)

080019c0 <TIM16_IRQHandler>:

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}

void TIM16_IRQHandler(void)
{
 80019c0:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim16);
 80019c2:	4802      	ldr	r0, [pc, #8]	@ (80019cc <TIM16_IRQHandler+0xc>)
 80019c4:	f002 fd70 	bl	80044a8 <HAL_TIM_IRQHandler>
}
 80019c8:	bd10      	pop	{r4, pc}
 80019ca:	46c0      	nop			@ (mov r8, r8)
 80019cc:	200003b0 	.word	0x200003b0

080019d0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80019d0:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim2);
 80019d2:	4802      	ldr	r0, [pc, #8]	@ (80019dc <TIM2_IRQHandler+0xc>)
 80019d4:	f002 fd68 	bl	80044a8 <HAL_TIM_IRQHandler>
}
 80019d8:	bd10      	pop	{r4, pc}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	200002f4 	.word	0x200002f4

080019e0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80019e0:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim3);
 80019e2:	4802      	ldr	r0, [pc, #8]	@ (80019ec <TIM3_IRQHandler+0xc>)
 80019e4:	f002 fd60 	bl	80044a8 <HAL_TIM_IRQHandler>

}
 80019e8:	bd10      	pop	{r4, pc}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	20000238 	.word	0x20000238

080019f0 <TIM17_IRQHandler>:

void TIM17_IRQHandler(void)
{
 80019f0:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim17);
 80019f2:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM17_IRQHandler+0xc>)
 80019f4:	f002 fd58 	bl	80044a8 <HAL_TIM_IRQHandler>
}
 80019f8:	bd10      	pop	{r4, pc}
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	200000c0 	.word	0x200000c0

08001a00 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8001a00:	b510      	push	{r4, lr}
	if(TAP_TEMPO_EXTI4_15_IRQ_is_disabled == NO){
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <EXTI4_15_IRQHandler+0x18>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d000      	beq.n	8001a0c <EXTI4_15_IRQHandler+0xc>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
	}
}
 8001a0a:	bd10      	pop	{r4, pc}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001a0c:	2080      	movs	r0, #128	@ 0x80
 8001a0e:	00c0      	lsls	r0, r0, #3
 8001a10:	f001 fac0 	bl	8002f94 <HAL_GPIO_EXTI_IRQHandler>
}
 8001a14:	e7f9      	b.n	8001a0a <EXTI4_15_IRQHandler+0xa>
 8001a16:	46c0      	nop			@ (mov r8, r8)
 8001a18:	20000612 	.word	0x20000612

08001a1c <Global_Interrupt_Enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1c:	b662      	cpsie	i
//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){

	__enable_irq();
	return 1;
}
 8001a1e:	2001      	movs	r0, #1
 8001a20:	4770      	bx	lr
 8001a22:	46c0      	nop			@ (mov r8, r8)

08001a24 <Start_PWM_Gen_Timer_Main_Oscillator>:
	__disable_irq();
	return 1;
}

uint8_t Start_PWM_Gen_Timer_Main_Oscillator(void)
{
 8001a24:	b570      	push	{r4, r5, r6, lr}
}

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){

	uint8_t ok_AND = 0;
	ok_AND = HAL_TIM_Base_Start(TIM);
 8001a26:	4d0a      	ldr	r5, [pc, #40]	@ (8001a50 <Start_PWM_Gen_Timer_Main_Oscillator+0x2c>)
 8001a28:	0028      	movs	r0, r5
 8001a2a:	f002 f867 	bl	8003afc <HAL_TIM_Base_Start>
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001a2e:	2100      	movs	r1, #0
	ok_AND = HAL_TIM_Base_Start(TIM);
 8001a30:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001a32:	0028      	movs	r0, r5
 8001a34:	f002 fb54 	bl	80040e0 <HAL_TIM_PWM_Start>
 8001a38:	4004      	ands	r4, r0
 8001a3a:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d101      	bne.n	8001a44 <Start_PWM_Gen_Timer_Main_Oscillator+0x20>
}
 8001a40:	0020      	movs	r0, r4
 8001a42:	bd70      	pop	{r4, r5, r6, pc}

		Error_Handler();
 8001a44:	f7ff f82c 	bl	8000aa0 <Error_Handler>
		Error_Handler();
 8001a48:	f7ff f82a 	bl	8000aa0 <Error_Handler>
 8001a4c:	e7f8      	b.n	8001a40 <Start_PWM_Gen_Timer_Main_Oscillator+0x1c>
 8001a4e:	46c0      	nop			@ (mov r8, r8)
 8001a50:	2000046c 	.word	0x2000046c

08001a54 <Start_PWM_Gen_Timer_Secondary_Oscillator>:
{
 8001a54:	b570      	push	{r4, r5, r6, lr}
	ok_AND = HAL_TIM_Base_Start(TIM);
 8001a56:	4d0a      	ldr	r5, [pc, #40]	@ (8001a80 <Start_PWM_Gen_Timer_Secondary_Oscillator+0x2c>)
 8001a58:	0028      	movs	r0, r5
 8001a5a:	f002 f84f 	bl	8003afc <HAL_TIM_Base_Start>
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001a5e:	210c      	movs	r1, #12
	ok_AND = HAL_TIM_Base_Start(TIM);
 8001a60:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 8001a62:	0028      	movs	r0, r5
 8001a64:	f002 fb3c 	bl	80040e0 <HAL_TIM_PWM_Start>
 8001a68:	4004      	ands	r4, r0
 8001a6a:	b2e4      	uxtb	r4, r4
	if(ok_AND != HAL_OK){
 8001a6c:	2c00      	cmp	r4, #0
 8001a6e:	d101      	bne.n	8001a74 <Start_PWM_Gen_Timer_Secondary_Oscillator+0x20>
}
 8001a70:	0020      	movs	r0, r4
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8001a74:	f7ff f814 	bl	8000aa0 <Error_Handler>
		Error_Handler();
 8001a78:	f7ff f812 	bl	8000aa0 <Error_Handler>
 8001a7c:	e7f8      	b.n	8001a70 <Start_PWM_Gen_Timer_Secondary_Oscillator+0x1c>
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	2000017c 	.word	0x2000017c

08001a84 <Start_Freq_Gen_Timer>:
{
 8001a84:	b510      	push	{r4, lr}
	return ok_AND;
}

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8001a86:	2100      	movs	r1, #0
 8001a88:	4805      	ldr	r0, [pc, #20]	@ (8001aa0 <Start_Freq_Gen_Timer+0x1c>)
 8001a8a:	f002 f95f 	bl	8003d4c <HAL_TIM_OC_Start_IT>
 8001a8e:	1e04      	subs	r4, r0, #0
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8001a90:	d101      	bne.n	8001a96 <Start_Freq_Gen_Timer+0x12>
}
 8001a92:	0020      	movs	r0, r4
 8001a94:	bd10      	pop	{r4, pc}

		Error_Handler();
 8001a96:	f7ff f803 	bl	8000aa0 <Error_Handler>
		Error_Handler();
 8001a9a:	f7ff f801 	bl	8000aa0 <Error_Handler>
 8001a9e:	e7f8      	b.n	8001a92 <Start_Freq_Gen_Timer+0xe>
 8001aa0:	200003b0 	.word	0x200003b0

08001aa4 <Start_OC_TIM>:
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001aa4:	b510      	push	{r4, lr}
	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8001aa6:	f002 f951 	bl	8003d4c <HAL_TIM_OC_Start_IT>
 8001aaa:	1e04      	subs	r4, r0, #0
	if(ok != HAL_OK){
 8001aac:	d101      	bne.n	8001ab2 <Start_OC_TIM+0xe>
	}

	return ok;
}
 8001aae:	0020      	movs	r0, r4
 8001ab0:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001ab2:	f7fe fff5 	bl	8000aa0 <Error_Handler>
 8001ab6:	e7fa      	b.n	8001aae <Start_OC_TIM+0xa>

08001ab8 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001ab8:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8001aba:	f002 f9c9 	bl	8003e50 <HAL_TIM_OC_Stop_IT>
 8001abe:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8001ac0:	d101      	bne.n	8001ac6 <Stop_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 8001ac2:	0020      	movs	r0, r4
 8001ac4:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001ac6:	f7fe ffeb 	bl	8000aa0 <Error_Handler>
 8001aca:	e7fa      	b.n	8001ac2 <Stop_OC_TIM+0xa>

08001acc <Start_Input_Capture_Timer>:
	}

	return ok_AND;
}

uint8_t Start_Input_Capture_Timer(void){
 8001acc:	b570      	push	{r4, r5, r6, lr}
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8001ace:	4d0a      	ldr	r5, [pc, #40]	@ (8001af8 <Start_Input_Capture_Timer+0x2c>)
 8001ad0:	0028      	movs	r0, r5
 8001ad2:	f002 f841 	bl	8003b58 <HAL_TIM_Base_Start_IT>
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8001ad6:	2100      	movs	r1, #0
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8001ad8:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8001ada:	0028      	movs	r0, r5
 8001adc:	f002 fc30 	bl	8004340 <HAL_TIM_IC_Start_IT>
 8001ae0:	4004      	ands	r4, r0
 8001ae2:	b2e4      	uxtb	r4, r4
	if(ok_AND != HAL_OK){
 8001ae4:	2c00      	cmp	r4, #0
 8001ae6:	d101      	bne.n	8001aec <Start_Input_Capture_Timer+0x20>

		Error_Handler();
	}

	return ok;
}
 8001ae8:	0020      	movs	r0, r4
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8001aec:	f7fe ffd8 	bl	8000aa0 <Error_Handler>
		Error_Handler();
 8001af0:	f7fe ffd6 	bl	8000aa0 <Error_Handler>
 8001af4:	e7f8      	b.n	8001ae8 <Start_Input_Capture_Timer+0x1c>
 8001af6:	46c0      	nop			@ (mov r8, r8)
 8001af8:	200002f4 	.word	0x200002f4

08001afc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    speed_control = current_speed * NUMBER_OF_FREQUENCY_STEPS;
 8001afc:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x44>)
 8001afe:	881a      	ldrh	r2, [r3, #0]
 8001b00:	0153      	lsls	r3, r2, #5
 8001b02:	1a9b      	subs	r3, r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	009a      	lsls	r2, r3, #2
 8001b0a:	189b      	adds	r3, r3, r2
    speed_control = speed_control >> 10;
 8001b0c:	0a9b      	lsrs	r3, r3, #10

    //speed_control = (speed_adc_10_bit/1024)*'range macro'

        if(speed_control <= (127-12)){ //inequality is correct!
 8001b0e:	2b73      	cmp	r3, #115	@ 0x73
 8001b10:	d808      	bhi.n	8001b24 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x28>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 8001b12:	4a0c      	ldr	r2, [pc, #48]	@ (8001b44 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>)
 8001b14:	330c      	adds	r3, #12
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	8013      	strh	r3, [r2, #0]
            TIM16_base_prescaler_divisors_index = SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x4c>)
 8001b1e:	701a      	strb	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX + 1);
        }
    return 1;
}
 8001b20:	2001      	movs	r0, #1
 8001b22:	4770      	bx	lr
            speed_control_subtracted = speed_control - (127-12);
 8001b24:	3b73      	subs	r3, #115	@ 0x73
 8001b26:	b29b      	uxth	r3, r3
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 8001b28:	09da      	lsrs	r2, r3, #7
 8001b2a:	b2d2      	uxtb	r2, r2
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 8001b2c:	01d1      	lsls	r1, r2, #7
 8001b2e:	1a5b      	subs	r3, r3, r1
 8001b30:	4904      	ldr	r1, [pc, #16]	@ (8001b44 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>)
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	800b      	strh	r3, [r1, #0]
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX + 1);
 8001b36:	3202      	adds	r2, #2
 8001b38:	4b03      	ldr	r3, [pc, #12]	@ (8001b48 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x4c>)
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e7ef      	b.n	8001b20 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x24>
 8001b40:	20000a5e 	.word	0x20000a5e
 8001b44:	20000a4e 	.word	0x20000a4e
 8001b48:	20000a4c 	.word	0x20000a4c

08001b4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
    }
    return 1;
}

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 8001b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b4e:	b083      	sub	sp, #12

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8001b50:	466a      	mov	r2, sp
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b52:	2300      	movs	r3, #0
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8001b54:	1d51      	adds	r1, r2, #5

		volatile uint8_t pot_rotation_corrected = 0;
 8001b56:	1d94      	adds	r4, r2, #6
		volatile uint8_t symmetry_status = CW;

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001b58:	4db1      	ldr	r5, [pc, #708]	@ (8001e20 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2d4>)
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b5a:	a801      	add	r0, sp, #4
		volatile uint8_t symmetry_status = CW;
 8001b5c:	3207      	adds	r2, #7
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b5e:	7003      	strb	r3, [r0, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8001b60:	700b      	strb	r3, [r1, #0]
		volatile uint8_t pot_rotation_corrected = 0;
 8001b62:	7023      	strb	r3, [r4, #0]
		volatile uint8_t symmetry_status = CW;
 8001b64:	7013      	strb	r3, [r2, #0]
		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001b66:	682e      	ldr	r6, [r5, #0]
 8001b68:	2e7f      	cmp	r6, #127	@ 0x7f
 8001b6a:	d900      	bls.n	8001b6e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x22>
			symmetry_status = CW;
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	7013      	strb	r3, [r2, #0]
		}

		if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8001b70:	4bac      	ldr	r3, [pc, #688]	@ (8001e24 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2d8>)
 8001b72:	781e      	ldrb	r6, [r3, #0]
 8001b74:	2e01      	cmp	r6, #1
 8001b76:	d043      	beq.n	8001c00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb4>
 8001b78:	781e      	ldrb	r6, [r3, #0]
 8001b7a:	2e00      	cmp	r6, #0
 8001b7c:	d040      	beq.n	8001c00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb4>

					symmetry_type_for_halfcycle = LENGTHEN;
				}
			}
		}
		else if(current_waveshape == SQUARE_MODE){
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d100      	bne.n	8001b86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
 8001b84:	e116      	b.n	8001db4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x268>
					symmetry_type_for_halfcycle = LENGTHEN;
				}
			}
		}

		if(symmetry_status == CW){
 8001b86:	7813      	ldrb	r3, [r2, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d14a      	bne.n	8001c22 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xd6>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8001b8c:	237f      	movs	r3, #127	@ 0x7f
 8001b8e:	682a      	ldr	r2, [r5, #0]
 8001b90:	1a9b      	subs	r3, r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	7023      	strb	r3, [r4, #0]

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
		}

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001b96:	2580      	movs	r5, #128	@ 0x80
 8001b98:	4ba3      	ldr	r3, [pc, #652]	@ (8001e28 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2dc>)
 8001b9a:	006d      	lsls	r5, r5, #1
 8001b9c:	881b      	ldrh	r3, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001b9e:	7822      	ldrb	r2, [r4, #0]
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001ba0:	1aeb      	subs	r3, r5, r3
 8001ba2:	b29b      	uxth	r3, r3
		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001ba4:	435a      	muls	r2, r3
 8001ba6:	b292      	uxth	r2, r2

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8001ba8:	0a16      	lsrs	r6, r2, #8


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001baa:	1b9c      	subs	r4, r3, r6

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001bac:	199b      	adds	r3, r3, r6
 8001bae:	b29b      	uxth	r3, r3
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001bb0:	b2a4      	uxth	r4, r4


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001bb2:	2bff      	cmp	r3, #255	@ 0xff
 8001bb4:	d952      	bls.n	8001c5c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x110>
 8001bb6:	26ff      	movs	r6, #255	@ 0xff
 8001bb8:	4016      	ands	r6, r2
 8001bba:	42ab      	cmp	r3, r5
 8001bbc:	d100      	bne.n	8001bc0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x74>
 8001bbe:	e0e3      	b.n	8001d88 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x23c>
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001bc0:	2e80      	cmp	r6, #128	@ 0x80
 8001bc2:	d100      	bne.n	8001bc6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x7a>
 8001bc4:	e0bb      	b.n	8001d3e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f2>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001bc6:	2e00      	cmp	r6, #0
 8001bc8:	d100      	bne.n	8001bcc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x80>
 8001bca:	e104      	b.n	8001dd6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x28a>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001bcc:	0612      	lsls	r2, r2, #24
 8001bce:	d500      	bpl.n	8001bd2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x86>
 8001bd0:	e17c      	b.n	8001ecc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x380>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	401a      	ands	r2, r3
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	2601      	movs	r6, #1
 8001bda:	b29b      	uxth	r3, r3
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d000      	beq.n	8001be2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x96>
 8001be0:	e100      	b.n	8001de4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x298>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001be2:	780a      	ldrb	r2, [r1, #0]
 8001be4:	b2d5      	uxtb	r5, r2
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d100      	bne.n	8001bec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xa0>
 8001bea:	e106      	b.n	8001dfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
						TIM16_prescaler_adjust = DO_NOTHING;
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001bec:	780a      	ldrb	r2, [r1, #0]
 8001bee:	b2d5      	uxtb	r5, r2
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	d000      	beq.n	8001bf6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xaa>
 8001bf4:	e0dc      	b.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	7002      	strb	r2, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001bfa:	4a8c      	ldr	r2, [pc, #560]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001bfc:	7015      	strb	r5, [r2, #0]
 8001bfe:	e042      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001c00:	4b8b      	ldr	r3, [pc, #556]	@ (8001e30 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e4>)
 8001c02:	781e      	ldrb	r6, [r3, #0]
 8001c04:	2e00      	cmp	r6, #0
 8001c06:	d111      	bne.n	8001c2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
 8001c08:	4e8a      	ldr	r6, [pc, #552]	@ (8001e34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001c0a:	7836      	ldrb	r6, [r6, #0]
 8001c0c:	2e00      	cmp	r6, #0
 8001c0e:	d10d      	bne.n	8001c2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
				if(symmetry_status == CW){
 8001c10:	7813      	ldrb	r3, [r2, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d000      	beq.n	8001c18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
 8001c16:	e08f      	b.n	8001d38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ec>
					symmetry_type_for_halfcycle = LENGTHEN;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	700b      	strb	r3, [r1, #0]
		if(symmetry_status == CW){
 8001c1c:	7813      	ldrb	r3, [r2, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0b4      	beq.n	8001b8c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x40>
			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 8001c22:	682b      	ldr	r3, [r5, #0]
 8001c24:	3b80      	subs	r3, #128	@ 0x80
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	7023      	strb	r3, [r4, #0]
 8001c2a:	e7b4      	b.n	8001b96 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4a>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001c2c:	781e      	ldrb	r6, [r3, #0]
 8001c2e:	2e01      	cmp	r6, #1
 8001c30:	d100      	bne.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe8>
 8001c32:	e07b      	b.n	8001d2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e0>
			else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 8001c34:	781e      	ldrb	r6, [r3, #0]
 8001c36:	2e00      	cmp	r6, #0
 8001c38:	d103      	bne.n	8001c42 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xf6>
 8001c3a:	4e7e      	ldr	r6, [pc, #504]	@ (8001e34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001c3c:	7836      	ldrb	r6, [r6, #0]
 8001c3e:	2e01      	cmp	r6, #1
 8001c40:	d006      	beq.n	8001c50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x104>
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d19e      	bne.n	8001b86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
 8001c48:	4b7a      	ldr	r3, [pc, #488]	@ (8001e34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d19a      	bne.n	8001b86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
				if(symmetry_status == CW){
 8001c50:	7813      	ldrb	r3, [r2, #0]
 8001c52:	b2de      	uxtb	r6, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1df      	bne.n	8001c18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
					symmetry_type_for_halfcycle = SHORTEN;
 8001c58:	700e      	strb	r6, [r1, #0]
 8001c5a:	e794      	b.n	8001b86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c5c:	25ff      	movs	r5, #255	@ 0xff
 8001c5e:	4015      	ands	r5, r2
 8001c60:	2d80      	cmp	r5, #128	@ 0x80
 8001c62:	d100      	bne.n	8001c66 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x11a>
 8001c64:	e08a      	b.n	8001d7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x230>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001c66:	2d00      	cmp	r5, #0
 8001c68:	d02d      	beq.n	8001cc6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x17a>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001c6a:	2680      	movs	r6, #128	@ 0x80
 8001c6c:	0037      	movs	r7, r6
 8001c6e:	4017      	ands	r7, r2
 8001c70:	4216      	tst	r6, r2
 8001c72:	d122      	bne.n	8001cba <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x16e>
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001c74:	780a      	ldrb	r2, [r1, #0]
 8001c76:	b2d5      	uxtb	r5, r2
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d000      	beq.n	8001c7e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
 8001c7c:	e0fe      	b.n	8001e7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c7e:	7005      	strb	r5, [r0, #0]
				TIM16_prescaler_adjust = DO_NOTHING;
 8001c80:	2500      	movs	r5, #0
 8001c82:	4a6a      	ldr	r2, [pc, #424]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001c84:	7015      	strb	r5, [r2, #0]
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001c86:	780d      	ldrb	r5, [r1, #0]
 8001c88:	2d00      	cmp	r5, #0
 8001c8a:	d126      	bne.n	8001cda <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x18e>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001c8c:	7803      	ldrb	r3, [r0, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d139      	bne.n	8001d06 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001c92:	3301      	adds	r3, #1

				TIM16_final_start_value = 256 - manipulated_period_shorten;
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001c94:	33ff      	adds	r3, #255	@ 0xff
 8001c96:	4968      	ldr	r1, [pc, #416]	@ (8001e38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001c98:	1b1b      	subs	r3, r3, r4
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	800b      	strh	r3, [r1, #0]
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 8001c9e:	7813      	ldrb	r3, [r2, #0]
 8001ca0:	b2da      	uxtb	r2, r3
    if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d028      	beq.n	8001cf8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ac>
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 8001ca6:	2a00      	cmp	r2, #0
 8001ca8:	d104      	bne.n	8001cb4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x168>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 8001caa:	4b64      	ldr	r3, [pc, #400]	@ (8001e3c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f0>)
 8001cac:	4a64      	ldr	r2, [pc, #400]	@ (8001e40 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	7013      	strb	r3, [r2, #0]
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
}
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	b003      	add	sp, #12
 8001cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001cba:	2d80      	cmp	r5, #128	@ 0x80
 8001cbc:	d978      	bls.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001cbe:	3c01      	subs	r4, #1
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001cc0:	3301      	adds	r3, #1
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001cc2:	b2a4      	uxth	r4, r4
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001cc4:	b29b      	uxth	r3, r3
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001cc6:	780a      	ldrb	r2, [r1, #0]
 8001cc8:	b2d5      	uxtb	r5, r2
 8001cca:	2a00      	cmp	r2, #0
 8001ccc:	d0d7      	beq.n	8001c7e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001cce:	780a      	ldrb	r2, [r1, #0]
 8001cd0:	2a01      	cmp	r2, #1
 8001cd2:	d1d5      	bne.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	7002      	strb	r2, [r0, #0]
 8001cd8:	e7d2      	b.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001cda:	7809      	ldrb	r1, [r1, #0]
 8001cdc:	b2cc      	uxtb	r4, r1
 8001cde:	2901      	cmp	r1, #1
 8001ce0:	d1dd      	bne.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001ce2:	7801      	ldrb	r1, [r0, #0]
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	d000      	beq.n	8001cea <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x19e>
 8001ce8:	e08b      	b.n	8001e02 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b6>
			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001cea:	3101      	adds	r1, #1
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001cec:	31ff      	adds	r1, #255	@ 0xff
 8001cee:	1acb      	subs	r3, r1, r3
 8001cf0:	4951      	ldr	r1, [pc, #324]	@ (8001e38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	800b      	strh	r3, [r1, #0]
 8001cf6:	e7d2      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 8001cf8:	4b50      	ldr	r3, [pc, #320]	@ (8001e3c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f0>)
 8001cfa:	4a51      	ldr	r2, [pc, #324]	@ (8001e40 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	7013      	strb	r3, [r2, #0]
 8001d04:	e7d6      	b.n	8001cb4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x168>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001d06:	7803      	ldrb	r3, [r0, #0]
 8001d08:	b2d9      	uxtb	r1, r3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d02c      	beq.n	8001d68 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x21c>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001d0e:	7803      	ldrb	r3, [r0, #0]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d1c4      	bne.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	07db      	lsls	r3, r3, #31
 8001d1a:	d500      	bpl.n	8001d1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d2>
 8001d1c:	e0c1      	b.n	8001ea2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x356>
				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4945      	ldr	r1, [pc, #276]	@ (8001e38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001d24:	1b1b      	subs	r3, r3, r4
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	800b      	strh	r3, [r1, #0]
 8001d2a:	e7b8      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001d2c:	4e41      	ldr	r6, [pc, #260]	@ (8001e34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001d2e:	7836      	ldrb	r6, [r6, #0]
 8001d30:	2e01      	cmp	r6, #1
 8001d32:	d000      	beq.n	8001d36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ea>
 8001d34:	e77e      	b.n	8001c34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe8>
 8001d36:	e76b      	b.n	8001c10 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>
					symmetry_type_for_halfcycle = SHORTEN;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	700b      	strb	r3, [r1, #0]
 8001d3c:	e723      	b.n	8001b86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001d3e:	2201      	movs	r2, #1
 8001d40:	0017      	movs	r7, r2
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001d42:	3301      	adds	r3, #1
 8001d44:	b29b      	uxth	r3, r3
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001d46:	3c01      	subs	r4, #1
 8001d48:	b2a4      	uxth	r4, r4
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d4a:	085e      	lsrs	r6, r3, #1
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001d4c:	401f      	ands	r7, r3
 8001d4e:	421a      	tst	r2, r3
 8001d50:	d000      	beq.n	8001d54 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x208>
 8001d52:	e07b      	b.n	8001e4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001d54:	780b      	ldrb	r3, [r1, #0]
 8001d56:	b2dd      	uxtb	r5, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d000      	beq.n	8001d5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
 8001d5c:	e094      	b.n	8001e88 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d5e:	4a33      	ldr	r2, [pc, #204]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001d60:	7005      	strb	r5, [r0, #0]
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d62:	0033      	movs	r3, r6
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d64:	7015      	strb	r5, [r2, #0]
 8001d66:	e78e      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	4219      	tst	r1, r3
 8001d6e:	d0d6      	beq.n	8001d1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d2>
				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 8001d70:	23ff      	movs	r3, #255	@ 0xff
 8001d72:	4931      	ldr	r1, [pc, #196]	@ (8001e38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001d74:	1b1b      	subs	r3, r3, r4
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	800b      	strh	r3, [r1, #0]
 8001d7a:	e790      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001d7c:	780a      	ldrb	r2, [r1, #0]
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d123      	bne.n	8001dca <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x27e>
					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8001d82:	3202      	adds	r2, #2
 8001d84:	7002      	strb	r2, [r0, #0]
 8001d86:	e77b      	b.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001d88:	2e00      	cmp	r6, #0
 8001d8a:	d09c      	beq.n	8001cc6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x17a>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001d8c:	2e80      	cmp	r6, #128	@ 0x80
 8001d8e:	d05b      	beq.n	8001e48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001d90:	0612      	lsls	r2, r2, #24
 8001d92:	d400      	bmi.n	8001d96 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x24a>
 8001d94:	e091      	b.n	8001eba <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x36e>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001d96:	2e80      	cmp	r6, #128	@ 0x80
 8001d98:	d90a      	bls.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d9a:	2380      	movs	r3, #128	@ 0x80
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001d9c:	3c01      	subs	r4, #1
 8001d9e:	b2a4      	uxth	r4, r4
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001da0:	780a      	ldrb	r2, [r1, #0]
 8001da2:	b2d5      	uxtb	r5, r2
 8001da4:	2a00      	cmp	r2, #0
 8001da6:	d028      	beq.n	8001dfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001da8:	780a      	ldrb	r2, [r1, #0]
 8001daa:	b2d5      	uxtb	r5, r2
 8001dac:	2a01      	cmp	r2, #1
 8001dae:	d024      	beq.n	8001dfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001db2:	e768      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if(current_halfcycle == FIRST_HALFCYCLE){
 8001db4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e4>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2de      	uxtb	r6, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d000      	beq.n	8001dc0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x274>
 8001dbe:	e747      	b.n	8001c50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x104>
				if(symmetry_status == CW){
 8001dc0:	7813      	ldrb	r3, [r2, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d000      	beq.n	8001dc8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x27c>
 8001dc6:	e747      	b.n	8001c58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x10c>
 8001dc8:	e726      	b.n	8001c18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001dca:	780a      	ldrb	r2, [r1, #0]
 8001dcc:	b2d5      	uxtb	r5, r2
 8001dce:	2a01      	cmp	r2, #1
 8001dd0:	d000      	beq.n	8001dd4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x288>
 8001dd2:	e755      	b.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
 8001dd4:	e753      	b.n	8001c7e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	401a      	ands	r2, r3
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	2601      	movs	r6, #1
 8001dde:	b29b      	uxth	r3, r3
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001de0:	2a00      	cmp	r2, #0
 8001de2:	d040      	beq.n	8001e66 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x31a>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001de4:	780a      	ldrb	r2, [r1, #0]
 8001de6:	b2d5      	uxtb	r5, r2
 8001de8:	2a00      	cmp	r2, #0
 8001dea:	d006      	beq.n	8001dfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001dec:	780a      	ldrb	r2, [r1, #0]
 8001dee:	2a01      	cmp	r2, #1
 8001df0:	d1de      	bne.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001df2:	4a0e      	ldr	r2, [pc, #56]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001df4:	7006      	strb	r6, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001df6:	7016      	strb	r6, [r2, #0]
 8001df8:	e745      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001dfc:	7005      	strb	r5, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001dfe:	7015      	strb	r5, [r2, #0]
 8001e00:	e741      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001e02:	7801      	ldrb	r1, [r0, #0]
 8001e04:	b2cd      	uxtb	r5, r1
 8001e06:	2901      	cmp	r1, #1
 8001e08:	d04d      	beq.n	8001ea6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x35a>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001e0a:	7801      	ldrb	r1, [r0, #0]
 8001e0c:	2902      	cmp	r1, #2
 8001e0e:	d000      	beq.n	8001e12 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2c6>
 8001e10:	e745      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001e12:	490c      	ldr	r1, [pc, #48]	@ (8001e44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001e14:	8809      	ldrh	r1, [r1, #0]
 8001e16:	420c      	tst	r4, r1
 8001e18:	d051      	beq.n	8001ebe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x372>
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	e766      	b.n	8001cec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1a0>
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	20000a58 	.word	0x20000a58
 8001e24:	20000a60 	.word	0x20000a60
 8001e28:	20000a4e 	.word	0x20000a4e
 8001e2c:	20000a50 	.word	0x20000a50
 8001e30:	20000a55 	.word	0x20000a55
 8001e34:	20000a54 	.word	0x20000a54
 8001e38:	20000a52 	.word	0x20000a52
 8001e3c:	20000a4c 	.word	0x20000a4c
 8001e40:	20000a49 	.word	0x20000a49
 8001e44:	20000a56 	.word	0x20000a56
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001e48:	3c01      	subs	r4, #1
 8001e4a:	b2a4      	uxth	r4, r4
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001e4c:	780b      	ldrb	r3, [r1, #0]
 8001e4e:	b2dd      	uxtb	r5, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30a>
 8001e54:	e783      	b.n	8001d5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e56:	780b      	ldrb	r3, [r1, #0]
 8001e58:	b2dd      	uxtb	r5, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d100      	bne.n	8001e60 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x314>
 8001e5e:	e77e      	b.n	8001d5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001e60:	0033      	movs	r3, r6
 8001e62:	4a28      	ldr	r2, [pc, #160]	@ (8001f04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
 8001e64:	e70f      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001e66:	780d      	ldrb	r5, [r1, #0]
 8001e68:	b2ef      	uxtb	r7, r5
 8001e6a:	2d00      	cmp	r5, #0
 8001e6c:	d015      	beq.n	8001e9a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34e>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e6e:	780d      	ldrb	r5, [r1, #0]
 8001e70:	2d01      	cmp	r5, #1
 8001e72:	d19d      	bne.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e74:	7002      	strb	r2, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001e76:	4a23      	ldr	r2, [pc, #140]	@ (8001f04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
 8001e78:	7016      	strb	r6, [r2, #0]
 8001e7a:	e704      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e7c:	780a      	ldrb	r2, [r1, #0]
 8001e7e:	2a01      	cmp	r2, #1
 8001e80:	d000      	beq.n	8001e84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x338>
 8001e82:	e6fd      	b.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e84:	7007      	strb	r7, [r0, #0]
				TIM16_prescaler_adjust = DO_NOTHING;
 8001e86:	e6fb      	b.n	8001c80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e88:	780b      	ldrb	r3, [r1, #0]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d1e8      	bne.n	8001e60 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x314>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e92:	7007      	strb	r7, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001e94:	7013      	strb	r3, [r2, #0]
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001e96:	0033      	movs	r3, r6
 8001e98:	e6f5      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
						TIM16_prescaler_adjust = DO_NOTHING;
 8001e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001e9c:	7007      	strb	r7, [r0, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001e9e:	7017      	strb	r7, [r2, #0]
 8001ea0:	e6f1      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e6f6      	b.n	8001c94 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x148>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001ea6:	4918      	ldr	r1, [pc, #96]	@ (8001f08 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3bc>)
 8001ea8:	8809      	ldrh	r1, [r1, #0]
 8001eaa:	420d      	tst	r5, r1
 8001eac:	d007      	beq.n	8001ebe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x372>
				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 8001eae:	21ff      	movs	r1, #255	@ 0xff
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	4916      	ldr	r1, [pc, #88]	@ (8001f0c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3c0>)
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	800b      	strh	r3, [r1, #0]
 8001eb8:	e6f1      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001eba:	2380      	movs	r3, #128	@ 0x80
 8001ebc:	e691      	b.n	8001be2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x96>
				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001ebe:	2180      	movs	r1, #128	@ 0x80
 8001ec0:	0049      	lsls	r1, r1, #1
 8001ec2:	1acb      	subs	r3, r1, r3
 8001ec4:	4911      	ldr	r1, [pc, #68]	@ (8001f0c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3c0>)
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	800b      	strh	r3, [r1, #0]
 8001eca:	e6e8      	b.n	8001c9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001ecc:	2e80      	cmp	r6, #128	@ 0x80
 8001ece:	d800      	bhi.n	8001ed2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x386>
 8001ed0:	e76e      	b.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	b292      	uxth	r2, r2
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001ed6:	2501      	movs	r5, #1
 8001ed8:	0016      	movs	r6, r2
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001eda:	3c01      	subs	r4, #1
 8001edc:	b2a4      	uxth	r4, r4
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001ede:	0853      	lsrs	r3, r2, #1
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001ee0:	402e      	ands	r6, r5
 8001ee2:	422a      	tst	r2, r5
 8001ee4:	d000      	beq.n	8001ee8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x39c>
 8001ee6:	e75b      	b.n	8001da0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x254>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001ee8:	780a      	ldrb	r2, [r1, #0]
 8001eea:	b2d5      	uxtb	r5, r2
 8001eec:	2a00      	cmp	r2, #0
 8001eee:	d100      	bne.n	8001ef2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a6>
 8001ef0:	e783      	b.n	8001dfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001ef2:	780a      	ldrb	r2, [r1, #0]
 8001ef4:	b2d5      	uxtb	r5, r2
 8001ef6:	2a01      	cmp	r2, #1
 8001ef8:	d000      	beq.n	8001efc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b0>
 8001efa:	e759      	b.n	8001db0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001efc:	4a01      	ldr	r2, [pc, #4]	@ (8001f04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001efe:	7006      	strb	r6, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001f00:	7015      	strb	r5, [r2, #0]
 8001f02:	e6c0      	b.n	8001c86 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
 8001f04:	20000a50 	.word	0x20000a50
 8001f08:	20000a56 	.word	0x20000a56
 8001f0c:	20000a52 	.word	0x20000a52

08001f10 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
 8001f10:	2301      	movs	r3, #1
 8001f12:	408b      	lsls	r3, r1
 8001f14:	3b01      	subs	r3, #1
 8001f16:	4018      	ands	r0, r3
}
 8001f18:	4770      	bx	lr
 8001f1a:	46c0      	nop			@ (mov r8, r8)

08001f1c <Speed_pot_check>:

uint8_t Speed_pot_check(void){

	if(tap_tempo_mode_is_active == YES){
 8001f1c:	4a19      	ldr	r2, [pc, #100]	@ (8001f84 <Speed_pot_check+0x68>)
 8001f1e:	7813      	ldrb	r3, [r2, #0]
 8001f20:	b2d9      	uxtb	r1, r3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d001      	beq.n	8001f2a <Speed_pot_check+0xe>
				}
			}
		}
	}
	return 1;
}
 8001f26:	2001      	movs	r0, #1
 8001f28:	4770      	bx	lr
		if(speed_pot_adc_measurement_num == 0){
 8001f2a:	4b17      	ldr	r3, [pc, #92]	@ (8001f88 <Speed_pot_check+0x6c>)
 8001f2c:	7818      	ldrb	r0, [r3, #0]
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	d014      	beq.n	8001f5c <Speed_pot_check+0x40>
		else if(speed_pot_adc_measurement_num == 1){
 8001f32:	7819      	ldrb	r1, [r3, #0]
 8001f34:	2901      	cmp	r1, #1
 8001f36:	d017      	beq.n	8001f68 <Speed_pot_check+0x4c>
		else if(speed_pot_adc_measurement_num == 2){
 8001f38:	7819      	ldrb	r1, [r3, #0]
 8001f3a:	2902      	cmp	r1, #2
 8001f3c:	d1f3      	bne.n	8001f26 <Speed_pot_check+0xa>
			speed_pot_adc_measurement_num = 0;
 8001f3e:	2000      	movs	r0, #0
			if(first_speed_measurement > second_speed_measurement){
 8001f40:	4912      	ldr	r1, [pc, #72]	@ (8001f8c <Speed_pot_check+0x70>)
			speed_pot_adc_measurement_num = 0;
 8001f42:	7018      	strb	r0, [r3, #0]
			if(first_speed_measurement > second_speed_measurement){
 8001f44:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <Speed_pot_check+0x74>)
 8001f46:	8809      	ldrh	r1, [r1, #0]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	428b      	cmp	r3, r1
 8001f4c:	d913      	bls.n	8001f76 <Speed_pot_check+0x5a>
				if(first_speed_measurement - second_speed_measurement > SPEED_TOLERANCE){
 8001f4e:	1a5b      	subs	r3, r3, r1
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	dde8      	ble.n	8001f26 <Speed_pot_check+0xa>
					speed_pot_is_disabled = NO; //to be refactored at some point
 8001f54:	4b0f      	ldr	r3, [pc, #60]	@ (8001f94 <Speed_pot_check+0x78>)
					tap_tempo_mode_is_active = NO;
 8001f56:	7010      	strb	r0, [r2, #0]
					speed_pot_is_disabled = NO; //to be refactored at some point
 8001f58:	7018      	strb	r0, [r3, #0]
 8001f5a:	e7e4      	b.n	8001f26 <Speed_pot_check+0xa>
			first_speed_measurement = current_speed;
 8001f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f98 <Speed_pot_check+0x7c>)
 8001f5e:	8810      	ldrh	r0, [r2, #0]
 8001f60:	4a0b      	ldr	r2, [pc, #44]	@ (8001f90 <Speed_pot_check+0x74>)
			speed_pot_adc_measurement_num = 1;
 8001f62:	7019      	strb	r1, [r3, #0]
			first_speed_measurement = current_speed;
 8001f64:	8010      	strh	r0, [r2, #0]
			speed_pot_adc_measurement_num = 1;
 8001f66:	e7de      	b.n	8001f26 <Speed_pot_check+0xa>
			second_speed_measurement = current_speed;
 8001f68:	4a0b      	ldr	r2, [pc, #44]	@ (8001f98 <Speed_pot_check+0x7c>)
 8001f6a:	8811      	ldrh	r1, [r2, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	@ (8001f8c <Speed_pot_check+0x70>)
 8001f6e:	8011      	strh	r1, [r2, #0]
			speed_pot_adc_measurement_num = 2;
 8001f70:	2202      	movs	r2, #2
 8001f72:	701a      	strb	r2, [r3, #0]
 8001f74:	e7d7      	b.n	8001f26 <Speed_pot_check+0xa>
			else if(second_speed_measurement > first_speed_measurement){
 8001f76:	428b      	cmp	r3, r1
 8001f78:	d2d5      	bcs.n	8001f26 <Speed_pot_check+0xa>
				if(second_speed_measurement - first_speed_measurement > SPEED_TOLERANCE){
 8001f7a:	1ac9      	subs	r1, r1, r3
 8001f7c:	2902      	cmp	r1, #2
 8001f7e:	ddd2      	ble.n	8001f26 <Speed_pot_check+0xa>
 8001f80:	e7e8      	b.n	8001f54 <Speed_pot_check+0x38>
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	20000611 	.word	0x20000611
 8001f88:	20000610 	.word	0x20000610
 8001f8c:	2000060c 	.word	0x2000060c
 8001f90:	2000060e 	.word	0x2000060e
 8001f94:	20000a2f 	.word	0x20000a2f
 8001f98:	20000a5e 	.word	0x20000a5e

08001f9c <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	4770      	bx	lr
 8001f9e:	46c0      	nop			@ (mov r8, r8)

08001fa0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fa0:	480d      	ldr	r0, [pc, #52]	@ (8001fd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fa2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fa4:	f7ff fffa 	bl	8001f9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	@ (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	@ (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fce:	f003 fc1f 	bl	8005810 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001fd2:	f7ff fb1f 	bl	8001614 <main>

08001fd6 <LoopForever>:

LoopForever:
  b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   r0, =_estack
 8001fd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001fe4:	08006384 	.word	0x08006384
  ldr r2, =_sbss
 8001fe8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001fec:	20000a68 	.word	0x20000a68

08001ff0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_IRQHandler>
	...

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001ff6:	4b0f      	ldr	r3, [pc, #60]	@ (8002034 <HAL_InitTick+0x40>)
{
 8001ff8:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001ffa:	7819      	ldrb	r1, [r3, #0]
 8001ffc:	2900      	cmp	r1, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002000:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002002:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002004:	20fa      	movs	r0, #250	@ 0xfa
 8002006:	0080      	lsls	r0, r0, #2
 8002008:	f7fe f87c 	bl	8000104 <__udivsi3>
 800200c:	4d0a      	ldr	r5, [pc, #40]	@ (8002038 <HAL_InitTick+0x44>)
 800200e:	0001      	movs	r1, r0
 8002010:	6828      	ldr	r0, [r5, #0]
 8002012:	f7fe f877 	bl	8000104 <__udivsi3>
 8002016:	f000 fd33 	bl	8002a80 <HAL_SYSTICK_Config>
 800201a:	2800      	cmp	r0, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	2c03      	cmp	r4, #3
 8002020:	d8ee      	bhi.n	8002000 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002022:	3801      	subs	r0, #1
 8002024:	2200      	movs	r2, #0
 8002026:	0021      	movs	r1, r4
 8002028:	f000 fce4 	bl	80029f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	4b03      	ldr	r3, [pc, #12]	@ (800203c <HAL_InitTick+0x48>)
 800202e:	2000      	movs	r0, #0
 8002030:	601c      	str	r4, [r3, #0]
  return status;
 8002032:	e7e6      	b.n	8002002 <HAL_InitTick+0xe>
 8002034:	20000008 	.word	0x20000008
 8002038:	20000004 	.word	0x20000004
 800203c:	2000000c 	.word	0x2000000c

08002040 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	4a08      	ldr	r2, [pc, #32]	@ (8002064 <HAL_Init+0x24>)
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	6811      	ldr	r1, [r2, #0]
{
 8002048:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204a:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800204c:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204e:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002050:	f7ff ffd0 	bl	8001ff4 <HAL_InitTick>
 8002054:	1e04      	subs	r4, r0, #0
 8002056:	d002      	beq.n	800205e <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002058:	2401      	movs	r4, #1
}
 800205a:	0020      	movs	r0, r4
 800205c:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 800205e:	f7ff fb0f 	bl	8001680 <HAL_MspInit>
 8002062:	e7fa      	b.n	800205a <HAL_Init+0x1a>
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002068:	4a03      	ldr	r2, [pc, #12]	@ (8002078 <HAL_IncTick+0x10>)
 800206a:	4b04      	ldr	r3, [pc, #16]	@ (800207c <HAL_IncTick+0x14>)
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	185b      	adds	r3, r3, r1
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	4770      	bx	lr
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	20000a64 	.word	0x20000a64
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002080:	4b01      	ldr	r3, [pc, #4]	@ (8002088 <HAL_GetTick+0x8>)
 8002082:	6818      	ldr	r0, [r3, #0]
}
 8002084:	4770      	bx	lr
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	20000a64 	.word	0x20000a64

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff fff6 	bl	8002080 <HAL_GetTick>
 8002094:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	1c63      	adds	r3, r4, #1
 8002098:	d002      	beq.n	80020a0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	4b04      	ldr	r3, [pc, #16]	@ (80020ac <HAL_Delay+0x20>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	1b40      	subs	r0, r0, r5
 80020a6:	42a0      	cmp	r0, r4
 80020a8:	d3fa      	bcc.n	80020a0 <HAL_Delay+0x14>
  {
  }
}
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
 80020ac:	20000008 	.word	0x20000008

080020b0 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020b0:	2150      	movs	r1, #80	@ 0x50
{
 80020b2:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80020b4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80020b6:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80020b8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80020ba:	4211      	tst	r1, r2
 80020bc:	d10d      	bne.n	80020da <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020be:	2380      	movs	r3, #128	@ 0x80
 80020c0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4313      	orrs	r3, r2
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80020c6:	22c0      	movs	r2, #192	@ 0xc0
 80020c8:	6583      	str	r3, [r0, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80020ca:	6803      	ldr	r3, [r0, #0]
 80020cc:	0112      	lsls	r2, r2, #4
 80020ce:	68d9      	ldr	r1, [r3, #12]
 80020d0:	4211      	tst	r1, r2
 80020d2:	d00d      	beq.n	80020f0 <ADC_DMAConvCplt+0x40>
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80020d4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 80020d6:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80020d8:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020da:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80020dc:	06d2      	lsls	r2, r2, #27
 80020de:	d502      	bpl.n	80020e6 <ADC_DMAConvCplt+0x36>
      hadc->ErrorCallback(hadc);
 80020e0:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 80020e2:	4798      	blx	r3
 80020e4:	e7f8      	b.n	80020d8 <ADC_DMAConvCplt+0x28>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80020e8:	0018      	movs	r0, r3
 80020ea:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020ec:	4790      	blx	r2
}
 80020ee:	e7f3      	b.n	80020d8 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80020f0:	7e82      	ldrb	r2, [r0, #26]
 80020f2:	2a00      	cmp	r2, #0
 80020f4:	d1ee      	bne.n	80020d4 <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	0712      	lsls	r2, r2, #28
 80020fa:	d5eb      	bpl.n	80020d4 <ADC_DMAConvCplt+0x24>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	0752      	lsls	r2, r2, #29
 8002100:	d508      	bpl.n	8002114 <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002102:	2220      	movs	r2, #32
 8002104:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002106:	4313      	orrs	r3, r2
 8002108:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800210c:	3a1f      	subs	r2, #31
 800210e:	4313      	orrs	r3, r2
 8002110:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8002112:	e7df      	b.n	80020d4 <ADC_DMAConvCplt+0x24>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002114:	210c      	movs	r1, #12
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	438a      	bics	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 800211c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800211e:	4a03      	ldr	r2, [pc, #12]	@ (800212c <ADC_DMAConvCplt+0x7c>)
 8002120:	4013      	ands	r3, r2
 8002122:	3204      	adds	r2, #4
 8002124:	32ff      	adds	r2, #255	@ 0xff
 8002126:	4313      	orrs	r3, r2
 8002128:	6583      	str	r3, [r0, #88]	@ 0x58
 800212a:	e7d3      	b.n	80020d4 <ADC_DMAConvCplt+0x24>
 800212c:	fffffefe 	.word	0xfffffefe

08002130 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002130:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002132:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8002134:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8002136:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002138:	bd10      	pop	{r4, pc}
 800213a:	46c0      	nop			@ (mov r8, r8)

0800213c <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800213c:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800213e:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8002140:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002142:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002144:	4313      	orrs	r3, r2
 8002146:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002148:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800214a:	3a3c      	subs	r2, #60	@ 0x3c
 800214c:	4313      	orrs	r3, r2
 800214e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8002150:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8002152:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002154:	bd10      	pop	{r4, pc}
 8002156:	46c0      	nop			@ (mov r8, r8)

08002158 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002158:	4770      	bx	lr
 800215a:	46c0      	nop			@ (mov r8, r8)

0800215c <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 800215c:	4770      	bx	lr
 800215e:	46c0      	nop			@ (mov r8, r8)

08002160 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			@ (mov r8, r8)

08002164 <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8002164:	4770      	bx	lr
 8002166:	46c0      	nop			@ (mov r8, r8)

08002168 <HAL_ADC_Init>:
{
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	46d6      	mov	lr, sl
 800216c:	464f      	mov	r7, r9
 800216e:	4646      	mov	r6, r8
  __IO uint32_t wait_loop_index = 0UL;
 8002170:	2300      	movs	r3, #0
{
 8002172:	b5c0      	push	{r6, r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8002178:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 800217a:	d044      	beq.n	8002206 <HAL_ADC_Init+0x9e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800217c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800217e:	2b00      	cmp	r3, #0
 8002180:	d118      	bne.n	80021b4 <HAL_ADC_Init+0x4c>
    if (hadc->MspInitCallback == NULL)
 8002182:	2280      	movs	r2, #128	@ 0x80
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002184:	4b89      	ldr	r3, [pc, #548]	@ (80023ac <HAL_ADC_Init+0x244>)
 8002186:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002188:	4b89      	ldr	r3, [pc, #548]	@ (80023b0 <HAL_ADC_Init+0x248>)
 800218a:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800218c:	4b89      	ldr	r3, [pc, #548]	@ (80023b4 <HAL_ADC_Init+0x24c>)
 800218e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002190:	4b89      	ldr	r3, [pc, #548]	@ (80023b8 <HAL_ADC_Init+0x250>)
 8002192:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8002194:	4b89      	ldr	r3, [pc, #548]	@ (80023bc <HAL_ADC_Init+0x254>)
 8002196:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8002198:	4b89      	ldr	r3, [pc, #548]	@ (80023c0 <HAL_ADC_Init+0x258>)
 800219a:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 800219c:	4b89      	ldr	r3, [pc, #548]	@ (80023c4 <HAL_ADC_Init+0x25c>)
 800219e:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 80021a0:	5883      	ldr	r3, [r0, r2]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d100      	bne.n	80021a8 <HAL_ADC_Init+0x40>
 80021a6:	e0e3      	b.n	8002370 <HAL_ADC_Init+0x208>
    hadc->MspInitCallback(hadc);
 80021a8:	0020      	movs	r0, r4
 80021aa:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 80021ac:	2300      	movs	r3, #0
    hadc->Lock = HAL_UNLOCKED;
 80021ae:	2254      	movs	r2, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 80021b0:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80021b2:	54a3      	strb	r3, [r4, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021b4:	2380      	movs	r3, #128	@ 0x80
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b6:	6825      	ldr	r5, [r4, #0]
 80021b8:	055b      	lsls	r3, r3, #21
 80021ba:	68aa      	ldr	r2, [r5, #8]
 80021bc:	421a      	tst	r2, r3
 80021be:	d115      	bne.n	80021ec <HAL_ADC_Init+0x84>
  MODIFY_REG(ADCx->CR,
 80021c0:	68aa      	ldr	r2, [r5, #8]
 80021c2:	4981      	ldr	r1, [pc, #516]	@ (80023c8 <HAL_ADC_Init+0x260>)
 80021c4:	400a      	ands	r2, r1
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021ca:	4b80      	ldr	r3, [pc, #512]	@ (80023cc <HAL_ADC_Init+0x264>)
 80021cc:	4980      	ldr	r1, [pc, #512]	@ (80023d0 <HAL_ADC_Init+0x268>)
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	f7fd ff98 	bl	8000104 <__udivsi3>
 80021d4:	3001      	adds	r0, #1
 80021d6:	0040      	lsls	r0, r0, #1
 80021d8:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 80021da:	9b01      	ldr	r3, [sp, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_ADC_Init+0x84>
      wait_loop_index--;
 80021e0:	9b01      	ldr	r3, [sp, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80021e6:	9b01      	ldr	r3, [sp, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <HAL_ADC_Init+0x78>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ec:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ee:	2000      	movs	r0, #0
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	d400      	bmi.n	80021f6 <HAL_ADC_Init+0x8e>
 80021f4:	e09d      	b.n	8002332 <HAL_ADC_Init+0x1ca>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021f6:	68ab      	ldr	r3, [r5, #8]
 80021f8:	075b      	lsls	r3, r3, #29
 80021fa:	d50b      	bpl.n	8002214 <HAL_ADC_Init+0xac>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	2210      	movs	r2, #16
 8002200:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002202:	4313      	orrs	r3, r2
 8002204:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8002206:	2001      	movs	r0, #1
}
 8002208:	b002      	add	sp, #8
 800220a:	bce0      	pop	{r5, r6, r7}
 800220c:	46ba      	mov	sl, r7
 800220e:	46b1      	mov	r9, r6
 8002210:	46a8      	mov	r8, r5
 8002212:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002214:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002216:	06db      	lsls	r3, r3, #27
 8002218:	d4f1      	bmi.n	80021fe <HAL_ADC_Init+0x96>
    ADC_STATE_CLR_SET(hadc->State,
 800221a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800221c:	4a6d      	ldr	r2, [pc, #436]	@ (80023d4 <HAL_ADC_Init+0x26c>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800221e:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8002220:	4013      	ands	r3, r2
 8002222:	3206      	adds	r2, #6
 8002224:	32ff      	adds	r2, #255	@ 0xff
 8002226:	4313      	orrs	r3, r2
 8002228:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800222a:	68ab      	ldr	r3, [r5, #8]
 800222c:	07db      	lsls	r3, r3, #31
 800222e:	d45c      	bmi.n	80022ea <HAL_ADC_Init+0x182>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002230:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 8002232:	68a2      	ldr	r2, [r4, #8]
 8002234:	1e7b      	subs	r3, r7, #1
 8002236:	419f      	sbcs	r7, r3
 8002238:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800223a:	7ea6      	ldrb	r6, [r4, #26]
 800223c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800223e:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002240:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002242:	039b      	lsls	r3, r3, #14
 8002244:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002246:	7e63      	ldrb	r3, [r4, #25]
 8002248:	03db      	lsls	r3, r3, #15
 800224a:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800224c:	0373      	lsls	r3, r6, #13
 800224e:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002250:	2900      	cmp	r1, #0
 8002252:	da00      	bge.n	8002256 <HAL_ADC_Init+0xee>
 8002254:	e098      	b.n	8002388 <HAL_ADC_Init+0x220>
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	039b      	lsls	r3, r3, #14
 800225a:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800225c:	232c      	movs	r3, #44	@ 0x2c
 800225e:	5ce3      	ldrb	r3, [r4, r3]
 8002260:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002262:	4313      	orrs	r3, r2
 8002264:	433b      	orrs	r3, r7
 8002266:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002268:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800226a:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226c:	5de2      	ldrb	r2, [r4, r7]
 800226e:	2a01      	cmp	r2, #1
 8002270:	d100      	bne.n	8002274 <HAL_ADC_Init+0x10c>
 8002272:	e08d      	b.n	8002390 <HAL_ADC_Init+0x228>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002274:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002276:	2a00      	cmp	r2, #0
 8002278:	d005      	beq.n	8002286 <HAL_ADC_Init+0x11e>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800227a:	26e0      	movs	r6, #224	@ 0xe0
 800227c:	0076      	lsls	r6, r6, #1
 800227e:	4032      	ands	r2, r6
 8002280:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002282:	4332      	orrs	r2, r6
 8002284:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 8002286:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 8002288:	68ea      	ldr	r2, [r5, #12]
 800228a:	4e53      	ldr	r6, [pc, #332]	@ (80023d8 <HAL_ADC_Init+0x270>)
 800228c:	4032      	ands	r2, r6
 800228e:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002290:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 8002292:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002294:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 8002296:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002298:	0fb3      	lsrs	r3, r6, #30
 800229a:	079b      	lsls	r3, r3, #30
 800229c:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 800229e:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022a0:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80022a2:	2f01      	cmp	r7, #1
 80022a4:	d109      	bne.n	80022ba <HAL_ADC_Init+0x152>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80022a6:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80022a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022aa:	433b      	orrs	r3, r7
 80022ac:	431a      	orrs	r2, r3
 80022ae:	4653      	mov	r3, sl
 80022b0:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80022b2:	433a      	orrs	r2, r7
 80022b4:	431a      	orrs	r2, r3
 80022b6:	4663      	mov	r3, ip
 80022b8:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80022ba:	692b      	ldr	r3, [r5, #16]
 80022bc:	4f47      	ldr	r7, [pc, #284]	@ (80023dc <HAL_ADC_Init+0x274>)
 80022be:	403b      	ands	r3, r7
 80022c0:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022c2:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80022c4:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022c6:	0073      	lsls	r3, r6, #1
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	05d2      	lsls	r2, r2, #23
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00c      	beq.n	80022ea <HAL_ADC_Init+0x182>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022d0:	2380      	movs	r3, #128	@ 0x80
 80022d2:	061b      	lsls	r3, r3, #24
 80022d4:	429e      	cmp	r6, r3
 80022d6:	d008      	beq.n	80022ea <HAL_ADC_Init+0x182>
        MODIFY_REG(ADC1_COMMON->CCR,
 80022d8:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <HAL_ADC_Init+0x278>)
 80022da:	4f42      	ldr	r7, [pc, #264]	@ (80023e4 <HAL_ADC_Init+0x27c>)
 80022dc:	6813      	ldr	r3, [r2, #0]
 80022de:	403b      	ands	r3, r7
 80022e0:	27f0      	movs	r7, #240	@ 0xf0
 80022e2:	03bf      	lsls	r7, r7, #14
 80022e4:	403e      	ands	r6, r7
 80022e6:	4333      	orrs	r3, r6
 80022e8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 80022ea:	2607      	movs	r6, #7
 80022ec:	2770      	movs	r7, #112	@ 0x70
 80022ee:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022f0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80022f2:	43b3      	bics	r3, r6
 80022f4:	4313      	orrs	r3, r2
 80022f6:	616b      	str	r3, [r5, #20]
 80022f8:	696e      	ldr	r6, [r5, #20]
 80022fa:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80022fc:	43be      	bics	r6, r7
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4333      	orrs	r3, r6
 8002302:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002304:	2900      	cmp	r1, #0
 8002306:	d122      	bne.n	800234e <HAL_ADC_Init+0x1e6>
      SET_BIT(hadc->Instance->CHSELR,
 8002308:	2310      	movs	r3, #16
 800230a:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 800230c:	425b      	negs	r3, r3
 800230e:	430b      	orrs	r3, r1
 8002310:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002312:	2307      	movs	r3, #7
 8002314:	6969      	ldr	r1, [r5, #20]
 8002316:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002318:	429a      	cmp	r2, r3
 800231a:	d02c      	beq.n	8002376 <HAL_ADC_Init+0x20e>
      ADC_STATE_CLR_SET(hadc->State,
 800231c:	2212      	movs	r2, #18
 800231e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002320:	4393      	bics	r3, r2
 8002322:	3a02      	subs	r2, #2
 8002324:	4313      	orrs	r3, r2
 8002326:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002328:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800232a:	3a0f      	subs	r2, #15
 800232c:	4313      	orrs	r3, r2
 800232e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8002330:	e769      	b.n	8002206 <HAL_ADC_Init+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	2210      	movs	r2, #16
 8002334:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8002336:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002338:	4313      	orrs	r3, r2
 800233a:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800233e:	3a0f      	subs	r2, #15
 8002340:	4313      	orrs	r3, r2
 8002342:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002344:	68ab      	ldr	r3, [r5, #8]
 8002346:	075b      	lsls	r3, r3, #29
 8002348:	d400      	bmi.n	800234c <HAL_ADC_Init+0x1e4>
 800234a:	e763      	b.n	8002214 <HAL_ADC_Init+0xac>
 800234c:	e756      	b.n	80021fc <HAL_ADC_Init+0x94>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800234e:	2380      	movs	r3, #128	@ 0x80
 8002350:	039b      	lsls	r3, r3, #14
 8002352:	4299      	cmp	r1, r3
 8002354:	d1dd      	bne.n	8002312 <HAL_ADC_Init+0x1aa>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002356:	211c      	movs	r1, #28
 8002358:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800235a:	69e3      	ldr	r3, [r4, #28]
 800235c:	3b01      	subs	r3, #1
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	4019      	ands	r1, r3
 8002362:	2310      	movs	r3, #16
 8002364:	425b      	negs	r3, r3
 8002366:	408b      	lsls	r3, r1
 8002368:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 800236a:	430b      	orrs	r3, r1
 800236c:	62ab      	str	r3, [r5, #40]	@ 0x28
 800236e:	e7d0      	b.n	8002312 <HAL_ADC_Init+0x1aa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002370:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_ADC_Init+0x280>)
 8002372:	5083      	str	r3, [r0, r2]
 8002374:	e718      	b.n	80021a8 <HAL_ADC_Init+0x40>
      ADC_CLEAR_ERRORCODE(hadc);
 8002376:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002378:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 800237a:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800237c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800237e:	4393      	bics	r3, r2
 8002380:	3a02      	subs	r2, #2
 8002382:	4313      	orrs	r3, r2
 8002384:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002386:	e73f      	b.n	8002208 <HAL_ADC_Init+0xa0>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002388:	004b      	lsls	r3, r1, #1
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	469c      	mov	ip, r3
 800238e:	e765      	b.n	800225c <HAL_ADC_Init+0xf4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002390:	2e00      	cmp	r6, #0
 8002392:	d103      	bne.n	800239c <HAL_ADC_Init+0x234>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8002394:	2280      	movs	r2, #128	@ 0x80
 8002396:	0252      	lsls	r2, r2, #9
 8002398:	4313      	orrs	r3, r2
 800239a:	e76b      	b.n	8002274 <HAL_ADC_Init+0x10c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 800239e:	433e      	orrs	r6, r7
 80023a0:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80023a4:	4332      	orrs	r2, r6
 80023a6:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80023a8:	e764      	b.n	8002274 <HAL_ADC_Init+0x10c>
 80023aa:	46c0      	nop			@ (mov r8, r8)
 80023ac:	0800215d 	.word	0x0800215d
 80023b0:	08002161 	.word	0x08002161
 80023b4:	08002165 	.word	0x08002165
 80023b8:	08002159 	.word	0x08002159
 80023bc:	080029e9 	.word	0x080029e9
 80023c0:	080029ed 	.word	0x080029ed
 80023c4:	080029f1 	.word	0x080029f1
 80023c8:	6fffffe8 	.word	0x6fffffe8
 80023cc:	20000004 	.word	0x20000004
 80023d0:	00030d40 	.word	0x00030d40
 80023d4:	fffffefd 	.word	0xfffffefd
 80023d8:	ffde0201 	.word	0xffde0201
 80023dc:	1ffffc02 	.word	0x1ffffc02
 80023e0:	40012708 	.word	0x40012708
 80023e4:	ffc3ffff 	.word	0xffc3ffff
 80023e8:	080016b1 	.word	0x080016b1

080023ec <HAL_ADC_RegisterCallback>:
  if (pCallback == NULL)
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d00f      	beq.n	8002410 <HAL_ADC_RegisterCallback+0x24>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80023f0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80023f2:	07db      	lsls	r3, r3, #31
 80023f4:	d505      	bpl.n	8002402 <HAL_ADC_RegisterCallback+0x16>
    switch (CallbackID)
 80023f6:	290a      	cmp	r1, #10
 80023f8:	d80a      	bhi.n	8002410 <HAL_ADC_RegisterCallback+0x24>
 80023fa:	4b17      	ldr	r3, [pc, #92]	@ (8002458 <HAL_ADC_RegisterCallback+0x6c>)
 80023fc:	0089      	lsls	r1, r1, #2
 80023fe:	585b      	ldr	r3, [r3, r1]
 8002400:	469f      	mov	pc, r3
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8002402:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <HAL_ADC_RegisterCallback+0x24>
    switch (CallbackID)
 8002408:	2909      	cmp	r1, #9
 800240a:	d00b      	beq.n	8002424 <HAL_ADC_RegisterCallback+0x38>
 800240c:	290a      	cmp	r1, #10
 800240e:	d005      	beq.n	800241c <HAL_ADC_RegisterCallback+0x30>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002410:	2210      	movs	r2, #16
 8002412:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8002414:	4313      	orrs	r3, r2
 8002416:	65c3      	str	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 8002418:	2001      	movs	r0, #1
}
 800241a:	4770      	bx	lr
        hadc->MspDeInitCallback = pCallback;
 800241c:	2384      	movs	r3, #132	@ 0x84
 800241e:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002420:	2000      	movs	r0, #0
 8002422:	e7fa      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->MspInitCallback = pCallback;
 8002424:	2380      	movs	r3, #128	@ 0x80
 8002426:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2000      	movs	r0, #0
 800242a:	e7f6      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->ErrorCallback = pCallback;
 800242c:	6702      	str	r2, [r0, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 800242e:	2000      	movs	r0, #0
 8002430:	e7f3      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow2Callback = pCallback;
 8002432:	6742      	str	r2, [r0, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 8002434:	2000      	movs	r0, #0
 8002436:	e7f0      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow3Callback = pCallback;
 8002438:	6782      	str	r2, [r0, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2000      	movs	r0, #0
 800243c:	e7ed      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->EndOfSamplingCallback = pCallback;
 800243e:	67c2      	str	r2, [r0, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8002440:	2000      	movs	r0, #0
 8002442:	e7ea      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvHalfCpltCallback = pCallback;
 8002444:	6682      	str	r2, [r0, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 8002446:	2000      	movs	r0, #0
 8002448:	e7e7      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindowCallback = pCallback;
 800244a:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2000      	movs	r0, #0
 800244e:	e7e4      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvCpltCallback = pCallback;
 8002450:	6642      	str	r2, [r0, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 8002452:	2000      	movs	r0, #0
 8002454:	e7e1      	b.n	800241a <HAL_ADC_RegisterCallback+0x2e>
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	080060e0 	.word	0x080060e0

0800245c <HAL_ADC_ConfigChannel>:
{
 800245c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800245e:	46de      	mov	lr, fp
 8002460:	4657      	mov	r7, sl
 8002462:	464e      	mov	r6, r9
 8002464:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 8002466:	2300      	movs	r3, #0
{
 8002468:	0004      	movs	r4, r0
 800246a:	b5e0      	push	{r5, r6, r7, lr}
 800246c:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 800246e:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8002470:	3354      	adds	r3, #84	@ 0x54
 8002472:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002474:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 8002476:	2a01      	cmp	r2, #1
 8002478:	d100      	bne.n	800247c <HAL_ADC_ConfigChannel+0x20>
 800247a:	e09a      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x156>
 800247c:	2201      	movs	r2, #1
 800247e:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002480:	6823      	ldr	r3, [r4, #0]
 8002482:	3203      	adds	r2, #3
 8002484:	689e      	ldr	r6, [r3, #8]
 8002486:	4232      	tst	r2, r6
 8002488:	d00e      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 800248a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800248c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800248e:	321c      	adds	r2, #28
 8002490:	4313      	orrs	r3, r2
 8002492:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8002494:	2354      	movs	r3, #84	@ 0x54
 8002496:	2200      	movs	r2, #0
 8002498:	54e2      	strb	r2, [r4, r3]
}
 800249a:	b005      	add	sp, #20
 800249c:	bcf0      	pop	{r4, r5, r6, r7}
 800249e:	46bb      	mov	fp, r7
 80024a0:	46b2      	mov	sl, r6
 80024a2:	46a9      	mov	r9, r5
 80024a4:	46a0      	mov	r8, r4
 80024a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80024a8:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024aa:	4390      	bics	r0, r2
 80024ac:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80024ae:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80024b0:	2e02      	cmp	r6, #2
 80024b2:	d05e      	beq.n	8002572 <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024b4:	0347      	lsls	r7, r0, #13
 80024b6:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80024b8:	2780      	movs	r7, #128	@ 0x80
 80024ba:	9500      	str	r5, [sp, #0]
 80024bc:	063f      	lsls	r7, r7, #24
 80024be:	45bc      	cmp	ip, r7
 80024c0:	d053      	beq.n	800256a <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024c2:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80024c4:	46bb      	mov	fp, r7
 80024c6:	271f      	movs	r7, #31
 80024c8:	46b8      	mov	r8, r7
 80024ca:	4037      	ands	r7, r6
 80024cc:	46ba      	mov	sl, r7
 80024ce:	270f      	movs	r7, #15
 80024d0:	4655      	mov	r5, sl
 80024d2:	40af      	lsls	r7, r5
 80024d4:	43fd      	mvns	r5, r7
 80024d6:	46bc      	mov	ip, r7
 80024d8:	9501      	str	r5, [sp, #4]
 80024da:	465f      	mov	r7, fp
 80024dc:	4665      	mov	r5, ip
 80024de:	43af      	bics	r7, r5
 80024e0:	9d00      	ldr	r5, [sp, #0]
 80024e2:	46b9      	mov	r9, r7
 80024e4:	2d00      	cmp	r5, #0
 80024e6:	d166      	bne.n	80025b6 <HAL_ADC_ConfigChannel+0x15a>
 80024e8:	4645      	mov	r5, r8
 80024ea:	0e82      	lsrs	r2, r0, #26
 80024ec:	4015      	ands	r5, r2
 80024ee:	002a      	movs	r2, r5
 80024f0:	4655      	mov	r5, sl
 80024f2:	40aa      	lsls	r2, r5
 80024f4:	464d      	mov	r5, r9
 80024f6:	4315      	orrs	r5, r2
 80024f8:	46a9      	mov	r9, r5
 80024fa:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80024fc:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80024fe:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002500:	69e2      	ldr	r2, [r4, #28]
 8002502:	3601      	adds	r6, #1
 8002504:	4296      	cmp	r6, r2
 8002506:	d808      	bhi.n	800251a <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8002508:	4656      	mov	r6, sl
 800250a:	0082      	lsls	r2, r0, #2
 800250c:	0f12      	lsrs	r2, r2, #28
 800250e:	40b2      	lsls	r2, r6
 8002510:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 8002512:	9e01      	ldr	r6, [sp, #4]
 8002514:	4035      	ands	r5, r6
 8002516:	432a      	orrs	r2, r5
 8002518:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 800251a:	0205      	lsls	r5, r0, #8
 800251c:	688a      	ldr	r2, [r1, #8]
 800251e:	0029      	movs	r1, r5
 8002520:	695e      	ldr	r6, [r3, #20]
 8002522:	402a      	ands	r2, r5
 8002524:	4d66      	ldr	r5, [pc, #408]	@ (80026c0 <HAL_ADC_ConfigChannel+0x264>)
 8002526:	438e      	bics	r6, r1
 8002528:	402a      	ands	r2, r5
 800252a:	4332      	orrs	r2, r6
 800252c:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800252e:	2800      	cmp	r0, #0
 8002530:	db01      	blt.n	8002536 <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002532:	2000      	movs	r0, #0
 8002534:	e7ae      	b.n	8002494 <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002536:	21e0      	movs	r1, #224	@ 0xe0
 8002538:	4d62      	ldr	r5, [pc, #392]	@ (80026c4 <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800253a:	4a63      	ldr	r2, [pc, #396]	@ (80026c8 <HAL_ADC_ConfigChannel+0x26c>)
 800253c:	682b      	ldr	r3, [r5, #0]
 800253e:	0449      	lsls	r1, r1, #17
 8002540:	4019      	ands	r1, r3
 8002542:	4290      	cmp	r0, r2
 8002544:	d04c      	beq.n	80025e0 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002546:	4a61      	ldr	r2, [pc, #388]	@ (80026cc <HAL_ADC_ConfigChannel+0x270>)
 8002548:	4290      	cmp	r0, r2
 800254a:	d040      	beq.n	80025ce <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800254c:	4a60      	ldr	r2, [pc, #384]	@ (80026d0 <HAL_ADC_ConfigChannel+0x274>)
 800254e:	4290      	cmp	r0, r2
 8002550:	d1ef      	bne.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002552:	2280      	movs	r2, #128	@ 0x80
 8002554:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002556:	4213      	tst	r3, r2
 8002558:	d1eb      	bne.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	485d      	ldr	r0, [pc, #372]	@ (80026d4 <HAL_ADC_ConfigChannel+0x278>)
 800255e:	4003      	ands	r3, r0
 8002560:	430b      	orrs	r3, r1
 8002562:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002564:	2000      	movs	r0, #0
 8002566:	602a      	str	r2, [r5, #0]
 8002568:	e794      	b.n	8002494 <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800256a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800256c:	432a      	orrs	r2, r5
 800256e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002570:	e7d3      	b.n	800251a <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	0612      	lsls	r2, r2, #24
 8002576:	4594      	cmp	ip, r2
 8002578:	d104      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800257a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800257c:	0341      	lsls	r1, r0, #13
 800257e:	0b49      	lsrs	r1, r1, #13
 8002580:	438a      	bics	r2, r1
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002584:	2800      	cmp	r0, #0
 8002586:	dad4      	bge.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002588:	4a4e      	ldr	r2, [pc, #312]	@ (80026c4 <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	494f      	ldr	r1, [pc, #316]	@ (80026c8 <HAL_ADC_ConfigChannel+0x26c>)
 800258c:	6813      	ldr	r3, [r2, #0]
 800258e:	4288      	cmp	r0, r1
 8002590:	d023      	beq.n	80025da <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002592:	494e      	ldr	r1, [pc, #312]	@ (80026cc <HAL_ADC_ConfigChannel+0x270>)
 8002594:	4288      	cmp	r0, r1
 8002596:	d04a      	beq.n	800262e <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002598:	494d      	ldr	r1, [pc, #308]	@ (80026d0 <HAL_ADC_ConfigChannel+0x274>)
 800259a:	4288      	cmp	r0, r1
 800259c:	d1c9      	bne.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259e:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80025a0:	6811      	ldr	r1, [r2, #0]
 80025a2:	0440      	lsls	r0, r0, #17
 80025a4:	4003      	ands	r3, r0
 80025a6:	484b      	ldr	r0, [pc, #300]	@ (80026d4 <HAL_ADC_ConfigChannel+0x278>)
 80025a8:	4001      	ands	r1, r0
 80025aa:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e770      	b.n	8002494 <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80025b2:	2002      	movs	r0, #2
 80025b4:	e771      	b.n	800249a <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80025b6:	2501      	movs	r5, #1
 80025b8:	4205      	tst	r5, r0
 80025ba:	d19e      	bne.n	80024fa <HAL_ADC_ConfigChannel+0x9e>
 80025bc:	2702      	movs	r7, #2
 80025be:	4207      	tst	r7, r0
 80025c0:	d02d      	beq.n	800261e <HAL_ADC_ConfigChannel+0x1c2>
 80025c2:	4652      	mov	r2, sl
 80025c4:	4095      	lsls	r5, r2
 80025c6:	464a      	mov	r2, r9
 80025c8:	432a      	orrs	r2, r5
 80025ca:	4691      	mov	r9, r2
 80025cc:	e795      	b.n	80024fa <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ce:	2280      	movs	r2, #128	@ 0x80
 80025d0:	0452      	lsls	r2, r2, #17
 80025d2:	4213      	tst	r3, r2
 80025d4:	d0c1      	beq.n	800255a <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d6:	2000      	movs	r0, #0
 80025d8:	e75c      	b.n	8002494 <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025da:	20a0      	movs	r0, #160	@ 0xa0
 80025dc:	6811      	ldr	r1, [r2, #0]
 80025de:	e7e0      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80025e0:	2280      	movs	r2, #128	@ 0x80
 80025e2:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025e4:	4213      	tst	r3, r2
 80025e6:	d1a4      	bne.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	483a      	ldr	r0, [pc, #232]	@ (80026d4 <HAL_ADC_ConfigChannel+0x278>)
 80025ec:	4003      	ands	r3, r0
 80025ee:	430b      	orrs	r3, r1
 80025f0:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025f2:	4b39      	ldr	r3, [pc, #228]	@ (80026d8 <HAL_ADC_ConfigChannel+0x27c>)
 80025f4:	602a      	str	r2, [r5, #0]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	4938      	ldr	r1, [pc, #224]	@ (80026dc <HAL_ADC_ConfigChannel+0x280>)
 80025fa:	f7fd fd83 	bl	8000104 <__udivsi3>
 80025fe:	3001      	adds	r0, #1
 8002600:	0043      	lsls	r3, r0, #1
 8002602:	181b      	adds	r3, r3, r0
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8002608:	9b03      	ldr	r3, [sp, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d091      	beq.n	8002532 <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	3b01      	subs	r3, #1
 8002612:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8002614:	9b03      	ldr	r3, [sp, #12]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f9      	bne.n	800260e <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261a:	2000      	movs	r0, #0
 800261c:	e73a      	b.n	8002494 <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800261e:	4202      	tst	r2, r0
 8002620:	d009      	beq.n	8002636 <HAL_ADC_ConfigChannel+0x1da>
 8002622:	4652      	mov	r2, sl
 8002624:	4097      	lsls	r7, r2
 8002626:	464a      	mov	r2, r9
 8002628:	433a      	orrs	r2, r7
 800262a:	4691      	mov	r9, r2
 800262c:	e765      	b.n	80024fa <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800262e:	20c0      	movs	r0, #192	@ 0xc0
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	0400      	lsls	r0, r0, #16
 8002634:	e7b6      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002636:	0702      	lsls	r2, r0, #28
 8002638:	d501      	bpl.n	800263e <HAL_ADC_ConfigChannel+0x1e2>
 800263a:	2203      	movs	r2, #3
 800263c:	e758      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800263e:	06c2      	lsls	r2, r0, #27
 8002640:	d501      	bpl.n	8002646 <HAL_ADC_ConfigChannel+0x1ea>
 8002642:	2204      	movs	r2, #4
 8002644:	e754      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002646:	0682      	lsls	r2, r0, #26
 8002648:	d501      	bpl.n	800264e <HAL_ADC_ConfigChannel+0x1f2>
 800264a:	2205      	movs	r2, #5
 800264c:	e750      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800264e:	0642      	lsls	r2, r0, #25
 8002650:	d501      	bpl.n	8002656 <HAL_ADC_ConfigChannel+0x1fa>
 8002652:	2206      	movs	r2, #6
 8002654:	e74c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002656:	0602      	lsls	r2, r0, #24
 8002658:	d501      	bpl.n	800265e <HAL_ADC_ConfigChannel+0x202>
 800265a:	2207      	movs	r2, #7
 800265c:	e748      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800265e:	05c2      	lsls	r2, r0, #23
 8002660:	d501      	bpl.n	8002666 <HAL_ADC_ConfigChannel+0x20a>
 8002662:	2208      	movs	r2, #8
 8002664:	e744      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002666:	0582      	lsls	r2, r0, #22
 8002668:	d501      	bpl.n	800266e <HAL_ADC_ConfigChannel+0x212>
 800266a:	2209      	movs	r2, #9
 800266c:	e740      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800266e:	0542      	lsls	r2, r0, #21
 8002670:	d501      	bpl.n	8002676 <HAL_ADC_ConfigChannel+0x21a>
 8002672:	220a      	movs	r2, #10
 8002674:	e73c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002676:	0502      	lsls	r2, r0, #20
 8002678:	d501      	bpl.n	800267e <HAL_ADC_ConfigChannel+0x222>
 800267a:	220b      	movs	r2, #11
 800267c:	e738      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800267e:	04c2      	lsls	r2, r0, #19
 8002680:	d501      	bpl.n	8002686 <HAL_ADC_ConfigChannel+0x22a>
 8002682:	220c      	movs	r2, #12
 8002684:	e734      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002686:	0482      	lsls	r2, r0, #18
 8002688:	d501      	bpl.n	800268e <HAL_ADC_ConfigChannel+0x232>
 800268a:	220d      	movs	r2, #13
 800268c:	e730      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 800268e:	0442      	lsls	r2, r0, #17
 8002690:	d501      	bpl.n	8002696 <HAL_ADC_ConfigChannel+0x23a>
 8002692:	220e      	movs	r2, #14
 8002694:	e72c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 8002696:	0402      	lsls	r2, r0, #16
 8002698:	d504      	bpl.n	80026a4 <HAL_ADC_ConfigChannel+0x248>
 800269a:	465a      	mov	r2, fp
 800269c:	4665      	mov	r5, ip
 800269e:	432a      	orrs	r2, r5
 80026a0:	4691      	mov	r9, r2
 80026a2:	e72a      	b.n	80024fa <HAL_ADC_ConfigChannel+0x9e>
 80026a4:	03c2      	lsls	r2, r0, #15
 80026a6:	d501      	bpl.n	80026ac <HAL_ADC_ConfigChannel+0x250>
 80026a8:	2210      	movs	r2, #16
 80026aa:	e721      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 80026ac:	0382      	lsls	r2, r0, #14
 80026ae:	d501      	bpl.n	80026b4 <HAL_ADC_ConfigChannel+0x258>
 80026b0:	2211      	movs	r2, #17
 80026b2:	e71d      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 80026b4:	0342      	lsls	r2, r0, #13
 80026b6:	d400      	bmi.n	80026ba <HAL_ADC_ConfigChannel+0x25e>
 80026b8:	e71f      	b.n	80024fa <HAL_ADC_ConfigChannel+0x9e>
 80026ba:	2212      	movs	r2, #18
 80026bc:	e718      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x94>
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	07ffff00 	.word	0x07ffff00
 80026c4:	40012708 	.word	0x40012708
 80026c8:	b0001000 	.word	0xb0001000
 80026cc:	b8004000 	.word	0xb8004000
 80026d0:	b4002000 	.word	0xb4002000
 80026d4:	fe3fffff 	.word	0xfe3fffff
 80026d8:	20000004 	.word	0x20000004
 80026dc:	00030d40 	.word	0x00030d40

080026e0 <ADC_ConversionStop>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026e0:	6802      	ldr	r2, [r0, #0]
{
 80026e2:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026e4:	6893      	ldr	r3, [r2, #8]
 80026e6:	0004      	movs	r4, r0
 80026e8:	075b      	lsls	r3, r3, #29
 80026ea:	d516      	bpl.n	800271a <ADC_ConversionStop+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ec:	6893      	ldr	r3, [r2, #8]
 80026ee:	079b      	lsls	r3, r3, #30
 80026f0:	d515      	bpl.n	800271e <ADC_ConversionStop+0x3e>
    tickstart = HAL_GetTick();
 80026f2:	f7ff fcc5 	bl	8002080 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80026f6:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80026f8:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	075b      	lsls	r3, r3, #29
 80026fe:	d50c      	bpl.n	800271a <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002700:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002702:	f7ff fcbd 	bl	8002080 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002706:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2802      	cmp	r0, #2
 800270c:	d902      	bls.n	8002714 <ADC_ConversionStop+0x34>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	4215      	tst	r5, r2
 8002712:	d112      	bne.n	800273a <ADC_ConversionStop+0x5a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	421d      	tst	r5, r3
 8002718:	d1f3      	bne.n	8002702 <ADC_ConversionStop+0x22>
  return HAL_OK;
 800271a:	2000      	movs	r0, #0
}
 800271c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 800271e:	6893      	ldr	r3, [r2, #8]
 8002720:	490b      	ldr	r1, [pc, #44]	@ (8002750 <ADC_ConversionStop+0x70>)
 8002722:	400b      	ands	r3, r1
 8002724:	2110      	movs	r1, #16
 8002726:	430b      	orrs	r3, r1
 8002728:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800272a:	f7ff fca9 	bl	8002080 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800272e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002730:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	075b      	lsls	r3, r3, #29
 8002736:	d4e3      	bmi.n	8002700 <ADC_ConversionStop+0x20>
 8002738:	e7ef      	b.n	800271a <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	2210      	movs	r2, #16
 800273c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002740:	4313      	orrs	r3, r2
 8002742:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002744:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002746:	3a0f      	subs	r2, #15
 8002748:	4313      	orrs	r3, r2
 800274a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800274c:	e7e6      	b.n	800271c <ADC_ConversionStop+0x3c>
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	7fffffe8 	.word	0x7fffffe8

08002754 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 8002754:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002756:	2201      	movs	r2, #1
{
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800275e:	6803      	ldr	r3, [r0, #0]
{
 8002760:	0004      	movs	r4, r0
 8002762:	6899      	ldr	r1, [r3, #8]
 8002764:	420a      	tst	r2, r1
 8002766:	d11f      	bne.n	80027a8 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002768:	6898      	ldr	r0, [r3, #8]
 800276a:	4928      	ldr	r1, [pc, #160]	@ (800280c <ADC_Enable+0xb8>)
 800276c:	4208      	tst	r0, r1
 800276e:	d11e      	bne.n	80027ae <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8002770:	6899      	ldr	r1, [r3, #8]
 8002772:	4827      	ldr	r0, [pc, #156]	@ (8002810 <ADC_Enable+0xbc>)
 8002774:	4001      	ands	r1, r0
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800277a:	4b26      	ldr	r3, [pc, #152]	@ (8002814 <ADC_Enable+0xc0>)
 800277c:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800277e:	021b      	lsls	r3, r3, #8
 8002780:	d50f      	bpl.n	80027a2 <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <ADC_Enable+0xc4>)
 8002784:	4925      	ldr	r1, [pc, #148]	@ (800281c <ADC_Enable+0xc8>)
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	f7fd fcbc 	bl	8000104 <__udivsi3>
 800278c:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800278e:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8002790:	9b01      	ldr	r3, [sp, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d005      	beq.n	80027a2 <ADC_Enable+0x4e>
        wait_loop_index--;
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	3b01      	subs	r3, #1
 800279a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800279c:	9b01      	ldr	r3, [sp, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027a2:	7e63      	ldrb	r3, [r4, #25]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d10b      	bne.n	80027c0 <ADC_Enable+0x6c>
  return HAL_OK;
 80027a8:	2000      	movs	r0, #0
}
 80027aa:	b003      	add	sp, #12
 80027ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	2110      	movs	r1, #16
 80027b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b4:	430b      	orrs	r3, r1
 80027b6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027b8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80027ba:	4313      	orrs	r3, r2
 80027bc:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80027be:	e7f4      	b.n	80027aa <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80027c0:	f7ff fc5e 	bl	8002080 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027c4:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80027c6:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	07d2      	lsls	r2, r2, #31
 80027cc:	d4ec      	bmi.n	80027a8 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027ce:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80027d0:	4f0f      	ldr	r7, [pc, #60]	@ (8002810 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	4215      	tst	r5, r2
 80027d6:	d103      	bne.n	80027e0 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	403a      	ands	r2, r7
 80027dc:	432a      	orrs	r2, r5
 80027de:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027e0:	f7ff fc4e 	bl	8002080 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e4:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027e6:	1b80      	subs	r0, r0, r6
 80027e8:	2802      	cmp	r0, #2
 80027ea:	d902      	bls.n	80027f2 <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4215      	tst	r5, r2
 80027f0:	d003      	beq.n	80027fa <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4215      	tst	r5, r2
 80027f6:	d0ec      	beq.n	80027d2 <ADC_Enable+0x7e>
 80027f8:	e7d6      	b.n	80027a8 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	2210      	movs	r2, #16
 80027fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80027fe:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002800:	4313      	orrs	r3, r2
 8002802:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002806:	432b      	orrs	r3, r5
 8002808:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 800280a:	e7ce      	b.n	80027aa <ADC_Enable+0x56>
 800280c:	80000017 	.word	0x80000017
 8002810:	7fffffe8 	.word	0x7fffffe8
 8002814:	40012708 	.word	0x40012708
 8002818:	20000004 	.word	0x20000004
 800281c:	00030d40 	.word	0x00030d40

08002820 <HAL_ADC_Start_DMA>:
{
 8002820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002822:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002824:	6805      	ldr	r5, [r0, #0]
{
 8002826:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002828:	68ae      	ldr	r6, [r5, #8]
 800282a:	4688      	mov	r8, r1
 800282c:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 800282e:	2002      	movs	r0, #2
{
 8002830:	b500      	push	{lr}
 8002832:	0776      	lsls	r6, r6, #29
 8002834:	d414      	bmi.n	8002860 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 8002836:	2254      	movs	r2, #84	@ 0x54
 8002838:	5ca3      	ldrb	r3, [r4, r2]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d010      	beq.n	8002860 <HAL_ADC_Start_DMA+0x40>
 800283e:	2301      	movs	r3, #1
 8002840:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002842:	68ea      	ldr	r2, [r5, #12]
 8002844:	4213      	tst	r3, r2
 8002846:	d106      	bne.n	8002856 <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002848:	68aa      	ldr	r2, [r5, #8]
 800284a:	4213      	tst	r3, r2
 800284c:	d131      	bne.n	80028b2 <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800284e:	2201      	movs	r2, #1
 8002850:	68eb      	ldr	r3, [r5, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8002856:	0020      	movs	r0, r4
 8002858:	f7ff ff7c 	bl	8002754 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800285c:	2800      	cmp	r0, #0
 800285e:	d002      	beq.n	8002866 <HAL_ADC_Start_DMA+0x46>
}
 8002860:	bc80      	pop	{r7}
 8002862:	46b8      	mov	r8, r7
 8002864:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002866:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800286a:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800286c:	401a      	ands	r2, r3
 800286e:	2380      	movs	r3, #128	@ 0x80
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	4313      	orrs	r3, r2
 8002874:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002876:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002878:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800287a:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800287e:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002880:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002882:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002884:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002886:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002888:	231c      	movs	r3, #28
 800288a:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 800288c:	3338      	adds	r3, #56	@ 0x38
 800288e:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002890:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002892:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002894:	4313      	orrs	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002898:	4642      	mov	r2, r8
 800289a:	003b      	movs	r3, r7
 800289c:	3140      	adds	r1, #64	@ 0x40
 800289e:	f000 f97f 	bl	8002ba0 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028a2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80028a4:	490a      	ldr	r1, [pc, #40]	@ (80028d0 <HAL_ADC_Start_DMA+0xb0>)
 80028a6:	6893      	ldr	r3, [r2, #8]
 80028a8:	400b      	ands	r3, r1
 80028aa:	2104      	movs	r1, #4
 80028ac:	430b      	orrs	r3, r1
 80028ae:	6093      	str	r3, [r2, #8]
}
 80028b0:	e7d6      	b.n	8002860 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80028b2:	68ab      	ldr	r3, [r5, #8]
 80028b4:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_ADC_Start_DMA+0xb0>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	4303      	orrs	r3, r0
 80028ba:	60ab      	str	r3, [r5, #8]
}
 80028bc:	e7c7      	b.n	800284e <HAL_ADC_Start_DMA+0x2e>
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	fffff0fe 	.word	0xfffff0fe
 80028c4:	080020b1 	.word	0x080020b1
 80028c8:	08002131 	.word	0x08002131
 80028cc:	0800213d 	.word	0x0800213d
 80028d0:	7fffffe8 	.word	0x7fffffe8

080028d4 <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80028d4:	2202      	movs	r2, #2
{
 80028d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028d8:	6803      	ldr	r3, [r0, #0]
{
 80028da:	0004      	movs	r4, r0
 80028dc:	6899      	ldr	r1, [r3, #8]
 80028de:	420a      	tst	r2, r1
 80028e0:	d002      	beq.n	80028e8 <ADC_Disable+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e2:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80028e4:	2000      	movs	r0, #0
}
 80028e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e8:	2101      	movs	r1, #1
 80028ea:	6898      	ldr	r0, [r3, #8]
 80028ec:	4201      	tst	r1, r0
 80028ee:	d0f9      	beq.n	80028e4 <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028f0:	2705      	movs	r7, #5
 80028f2:	6898      	ldr	r0, [r3, #8]
 80028f4:	4007      	ands	r7, r0
 80028f6:	2f01      	cmp	r7, #1
 80028f8:	d008      	beq.n	800290c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fa:	2210      	movs	r2, #16
 80028fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80028fe:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002900:	4313      	orrs	r3, r2
 8002902:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002904:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002906:	430b      	orrs	r3, r1
 8002908:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800290a:	e7ec      	b.n	80028e6 <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 800290c:	6899      	ldr	r1, [r3, #8]
 800290e:	4812      	ldr	r0, [pc, #72]	@ (8002958 <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002910:	2501      	movs	r5, #1
 8002912:	4001      	ands	r1, r0
 8002914:	430a      	orrs	r2, r1
 8002916:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002918:	2203      	movs	r2, #3
 800291a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800291c:	f7ff fbb0 	bl	8002080 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002920:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002922:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	421f      	tst	r7, r3
 8002928:	d0dc      	beq.n	80028e4 <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800292a:	f7ff fba9 	bl	8002080 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800292e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002930:	1b80      	subs	r0, r0, r6
 8002932:	2802      	cmp	r0, #2
 8002934:	d902      	bls.n	800293c <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	4215      	tst	r5, r2
 800293a:	d103      	bne.n	8002944 <ADC_Disable+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	421d      	tst	r5, r3
 8002940:	d1f3      	bne.n	800292a <ADC_Disable+0x56>
 8002942:	e7cf      	b.n	80028e4 <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002944:	2210      	movs	r2, #16
 8002946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002948:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294a:	4313      	orrs	r3, r2
 800294c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800294e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002950:	432b      	orrs	r3, r5
 8002952:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002954:	e7c7      	b.n	80028e6 <ADC_Disable+0x12>
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	7fffffe8 	.word	0x7fffffe8

0800295c <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 800295c:	2354      	movs	r3, #84	@ 0x54
{
 800295e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002960:	5cc2      	ldrb	r2, [r0, r3]
{
 8002962:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8002964:	2a01      	cmp	r2, #1
 8002966:	d025      	beq.n	80029b4 <HAL_ADC_Stop_DMA+0x58>
 8002968:	2201      	movs	r2, #1
 800296a:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 800296c:	f7ff feb8 	bl	80026e0 <ADC_ConversionStop>
 8002970:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8002972:	d11a      	bne.n	80029aa <HAL_ADC_Stop_DMA+0x4e>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002974:	2325      	movs	r3, #37	@ 0x25
 8002976:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002978:	5cc3      	ldrb	r3, [r0, r3]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d01c      	beq.n	80029b8 <HAL_ADC_Stop_DMA+0x5c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800297e:	2110      	movs	r1, #16
 8002980:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 8002982:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002984:	6853      	ldr	r3, [r2, #4]
 8002986:	438b      	bics	r3, r1
 8002988:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 800298a:	f7ff ffa3 	bl	80028d4 <ADC_Disable>
 800298e:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 8002990:	d106      	bne.n	80029a0 <HAL_ADC_Stop_DMA+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 8002992:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002994:	4a13      	ldr	r2, [pc, #76]	@ (80029e4 <HAL_ADC_Stop_DMA+0x88>)
 8002996:	4013      	ands	r3, r2
 8002998:	3204      	adds	r2, #4
 800299a:	32ff      	adds	r2, #255	@ 0xff
 800299c:	4313      	orrs	r3, r2
 800299e:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80029a0:	2101      	movs	r1, #1
 80029a2:	6822      	ldr	r2, [r4, #0]
 80029a4:	68d3      	ldr	r3, [r2, #12]
 80029a6:	438b      	bics	r3, r1
 80029a8:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 80029aa:	2354      	movs	r3, #84	@ 0x54
 80029ac:	2200      	movs	r2, #0
 80029ae:	54e2      	strb	r2, [r4, r3]
}
 80029b0:	0028      	movs	r0, r5
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80029b4:	2502      	movs	r5, #2
 80029b6:	e7fb      	b.n	80029b0 <HAL_ADC_Stop_DMA+0x54>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80029b8:	f000 f95a 	bl	8002c70 <HAL_DMA_Abort>
 80029bc:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 80029be:	d0de      	beq.n	800297e <HAL_ADC_Stop_DMA+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c0:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029c2:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      (void)ADC_Disable(hadc);
 80029c6:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029c8:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029ca:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029cc:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80029ce:	6853      	ldr	r3, [r2, #4]
 80029d0:	438b      	bics	r3, r1
 80029d2:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 80029d4:	f7ff ff7e 	bl	80028d4 <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80029d8:	2101      	movs	r1, #1
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	68d3      	ldr	r3, [r2, #12]
 80029de:	438b      	bics	r3, r1
 80029e0:	60d3      	str	r3, [r2, #12]
 80029e2:	e7e2      	b.n	80029aa <HAL_ADC_Stop_DMA+0x4e>
 80029e4:	fffffefe 	.word	0xfffffefe

080029e8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029e8:	4770      	bx	lr
 80029ea:	46c0      	nop			@ (mov r8, r8)

080029ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 80029ec:	4770      	bx	lr
 80029ee:	46c0      	nop			@ (mov r8, r8)

080029f0 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 80029f0:	4770      	bx	lr
 80029f2:	46c0      	nop			@ (mov r8, r8)

080029f4 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f4:	22ff      	movs	r2, #255	@ 0xff
 80029f6:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f8:	b510      	push	{r4, lr}
 80029fa:	0014      	movs	r4, r2
 80029fc:	4003      	ands	r3, r0
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a02:	0189      	lsls	r1, r1, #6
 8002a04:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a06:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002a08:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	db0b      	blt.n	8002a26 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <HAL_NVIC_SetPriority+0x4c>)
 8002a10:	21c0      	movs	r1, #192	@ 0xc0
 8002a12:	469c      	mov	ip, r3
 8002a14:	0880      	lsrs	r0, r0, #2
 8002a16:	0080      	lsls	r0, r0, #2
 8002a18:	4460      	add	r0, ip
 8002a1a:	0089      	lsls	r1, r1, #2
 8002a1c:	5843      	ldr	r3, [r0, r1]
 8002a1e:	4023      	ands	r3, r4
 8002a20:	4313      	orrs	r3, r2
 8002a22:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002a24:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a26:	230f      	movs	r3, #15
 8002a28:	4906      	ldr	r1, [pc, #24]	@ (8002a44 <HAL_NVIC_SetPriority+0x50>)
 8002a2a:	4003      	ands	r3, r0
 8002a2c:	468c      	mov	ip, r1
 8002a2e:	3b08      	subs	r3, #8
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4463      	add	r3, ip
 8002a36:	69d9      	ldr	r1, [r3, #28]
 8002a38:	400c      	ands	r4, r1
 8002a3a:	4314      	orrs	r4, r2
 8002a3c:	61dc      	str	r4, [r3, #28]
 8002a3e:	e7f1      	b.n	8002a24 <HAL_NVIC_SetPriority+0x30>
 8002a40:	e000e100 	.word	0xe000e100
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	db05      	blt.n	8002a58 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4c:	221f      	movs	r2, #31
 8002a4e:	2301      	movs	r3, #1
 8002a50:	4002      	ands	r2, r0
 8002a52:	4093      	lsls	r3, r2
 8002a54:	4a01      	ldr	r2, [pc, #4]	@ (8002a5c <HAL_NVIC_EnableIRQ+0x14>)
 8002a56:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a58:	4770      	bx	lr
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	e000e100 	.word	0xe000e100

08002a60 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a60:	2800      	cmp	r0, #0
 8002a62:	db0a      	blt.n	8002a7a <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a64:	221f      	movs	r2, #31
 8002a66:	2301      	movs	r3, #1
 8002a68:	4002      	ands	r2, r0
 8002a6a:	4093      	lsls	r3, r2
 8002a6c:	2280      	movs	r2, #128	@ 0x80
 8002a6e:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_NVIC_DisableIRQ+0x1c>)
 8002a70:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002a72:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a76:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002a7a:	4770      	bx	lr
 8002a7c:	e000e100 	.word	0xe000e100

08002a80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	1e43      	subs	r3, r0, #1
 8002a84:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d20e      	bcs.n	8002aaa <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a8c:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8e:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a90:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a92:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002a94:	6a03      	ldr	r3, [r0, #32]
 8002a96:	0609      	lsls	r1, r1, #24
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002aa4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa6:	3307      	adds	r3, #7
 8002aa8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8002aaa:	4770      	bx	lr
 8002aac:	e000e010 	.word	0xe000e010
 8002ab0:	e000ed00 	.word	0xe000ed00

08002ab4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab6:	46c6      	mov	lr, r8
 8002ab8:	0004      	movs	r4, r0
 8002aba:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002abc:	2800      	cmp	r0, #0
 8002abe:	d060      	beq.n	8002b82 <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ac0:	6805      	ldr	r5, [r0, #0]
 8002ac2:	4b31      	ldr	r3, [pc, #196]	@ (8002b88 <HAL_DMA_Init+0xd4>)
 8002ac4:	2114      	movs	r1, #20
 8002ac6:	18e8      	adds	r0, r5, r3
 8002ac8:	f7fd fb1c 	bl	8000104 <__udivsi3>
 8002acc:	0083      	lsls	r3, r0, #2
 8002ace:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	2325      	movs	r3, #37	@ 0x25
 8002ad4:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ada:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002adc:	4013      	ands	r3, r2
 8002ade:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002ae0:	68e3      	ldr	r3, [r4, #12]
 8002ae2:	6921      	ldr	r1, [r4, #16]
 8002ae4:	4333      	orrs	r3, r6
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	6961      	ldr	r1, [r4, #20]
 8002aea:	682a      	ldr	r2, [r5, #0]
 8002aec:	430b      	orrs	r3, r1
 8002aee:	69a1      	ldr	r1, [r4, #24]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	69e1      	ldr	r1, [r4, #28]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6a21      	ldr	r1, [r4, #32]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002afe:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b00:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b02:	469c      	mov	ip, r3
 8002b04:	4460      	add	r0, ip
 8002b06:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b08:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b0c:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b0e:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002b10:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b12:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002b14:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002b16:	f7fd faf5 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b1a:	231f      	movs	r3, #31
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4003      	ands	r3, r0
 8002b20:	0010      	movs	r0, r2
 8002b22:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b24:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002b26:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b28:	01db      	lsls	r3, r3, #7
 8002b2a:	429e      	cmp	r6, r3
 8002b2c:	d01f      	beq.n	8002b6e <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b2e:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b30:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b32:	6861      	ldr	r1, [r4, #4]
 8002b34:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b36:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b38:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b3a:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b3c:	2903      	cmp	r1, #3
 8002b3e:	d81b      	bhi.n	8002b78 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b40:	4915      	ldr	r1, [pc, #84]	@ (8002b98 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b42:	4816      	ldr	r0, [pc, #88]	@ (8002b9c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b44:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b46:	3b01      	subs	r3, #1
 8002b48:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b4a:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002b4c:	0089      	lsls	r1, r1, #2
 8002b4e:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002b50:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002b52:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b54:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b56:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b58:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	2225      	movs	r2, #37	@ 0x25
 8002b5c:	2101      	movs	r1, #1
  return HAL_OK;
 8002b5e:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b60:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8002b62:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8002b64:	3a01      	subs	r2, #1
 8002b66:	54a3      	strb	r3, [r4, r2]
}
 8002b68:	bc80      	pop	{r7}
 8002b6a:	46b8      	mov	r8, r7
 8002b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b72:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b74:	4643      	mov	r3, r8
 8002b76:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002b7c:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002b7e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002b80:	e7ea      	b.n	8002b58 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 8002b82:	2001      	movs	r0, #1
 8002b84:	e7f0      	b.n	8002b68 <HAL_DMA_Init+0xb4>
 8002b86:	46c0      	nop			@ (mov r8, r8)
 8002b88:	bffdfff8 	.word	0xbffdfff8
 8002b8c:	ffff800f 	.word	0xffff800f
 8002b90:	10008200 	.word	0x10008200
 8002b94:	40020880 	.word	0x40020880
 8002b98:	1000823f 	.word	0x1000823f
 8002b9c:	40020940 	.word	0x40020940

08002ba0 <HAL_DMA_Start_IT>:
{
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba2:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 8002ba4:	2424      	movs	r4, #36	@ 0x24
{
 8002ba6:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 8002ba8:	5d05      	ldrb	r5, [r0, r4]
 8002baa:	2d01      	cmp	r5, #1
 8002bac:	d04f      	beq.n	8002c4e <HAL_DMA_Start_IT+0xae>
 8002bae:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8002bb0:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8002bb2:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 8002bb4:	5d85      	ldrb	r5, [r0, r6]
 8002bb6:	b2ef      	uxtb	r7, r5
 8002bb8:	2d01      	cmp	r5, #1
 8002bba:	d007      	beq.n	8002bcc <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 8002bc4:	2001      	movs	r0, #1
}
 8002bc6:	bc80      	pop	{r7}
 8002bc8:	46b8      	mov	r8, r7
 8002bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bcc:	3c22      	subs	r4, #34	@ 0x22
 8002bce:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd0:	2400      	movs	r4, #0
 8002bd2:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002bd4:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bd6:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 8002bd8:	6825      	ldr	r5, [r4, #0]
 8002bda:	43bd      	bics	r5, r7
 8002bdc:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bde:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 8002be0:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8002be2:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 8002be4:	2e00      	cmp	r6, #0
 8002be6:	d002      	beq.n	8002bee <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002be8:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8002bea:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 8002bec:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002bee:	4d1f      	ldr	r5, [pc, #124]	@ (8002c6c <HAL_DMA_Start_IT+0xcc>)
 8002bf0:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8002bf2:	46ac      	mov	ip, r5
 8002bf4:	686d      	ldr	r5, [r5, #4]
 8002bf6:	46a8      	mov	r8, r5
 8002bf8:	251c      	movs	r5, #28
 8002bfa:	402f      	ands	r7, r5
 8002bfc:	3d1b      	subs	r5, #27
 8002bfe:	40bd      	lsls	r5, r7
 8002c00:	4647      	mov	r7, r8
 8002c02:	433d      	orrs	r5, r7
 8002c04:	4667      	mov	r7, ip
 8002c06:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002c08:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c0a:	6883      	ldr	r3, [r0, #8]
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d020      	beq.n	8002c52 <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8002c10:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c12:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002c14:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d01e      	beq.n	8002c58 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c1a:	220e      	movs	r2, #14
 8002c1c:	6823      	ldr	r3, [r4, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c22:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	03db      	lsls	r3, r3, #15
 8002c28:	d504      	bpl.n	8002c34 <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c2a:	2380      	movs	r3, #128	@ 0x80
 8002c2c:	6811      	ldr	r1, [r2, #0]
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	430b      	orrs	r3, r1
 8002c32:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002c34:	2e00      	cmp	r6, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	6832      	ldr	r2, [r6, #0]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8002c42:	2201      	movs	r2, #1
 8002c44:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c46:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	6023      	str	r3, [r4, #0]
 8002c4c:	e7bb      	b.n	8002bc6 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8002c4e:	2002      	movs	r0, #2
 8002c50:	e7b9      	b.n	8002bc6 <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8002c52:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002c54:	60e1      	str	r1, [r4, #12]
 8002c56:	e7dd      	b.n	8002c14 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c58:	2204      	movs	r2, #4
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	3206      	adds	r2, #6
 8002c64:	4313      	orrs	r3, r2
 8002c66:	6023      	str	r3, [r4, #0]
 8002c68:	e7db      	b.n	8002c22 <HAL_DMA_Start_IT+0x82>
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	40020000 	.word	0x40020000

08002c70 <HAL_DMA_Abort>:
{
 8002c70:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8002c72:	2800      	cmp	r0, #0
 8002c74:	d032      	beq.n	8002cdc <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c76:	2325      	movs	r3, #37	@ 0x25
 8002c78:	5cc3      	ldrb	r3, [r0, r3]
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d129      	bne.n	8002cd2 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7e:	210e      	movs	r1, #14
 8002c80:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c82:	4c17      	ldr	r4, [pc, #92]	@ (8002ce0 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c84:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002c86:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c88:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c8a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c8c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c8e:	680b      	ldr	r3, [r1, #0]
 8002c90:	4023      	ands	r3, r4
 8002c92:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002c94:	2301      	movs	r3, #1
 8002c96:	6811      	ldr	r1, [r2, #0]
 8002c98:	4399      	bics	r1, r3
 8002c9a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002c9c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002c9e:	4911      	ldr	r1, [pc, #68]	@ (8002ce4 <HAL_DMA_Abort+0x74>)
 8002ca0:	4032      	ands	r2, r6
 8002ca2:	4093      	lsls	r3, r2
 8002ca4:	684d      	ldr	r5, [r1, #4]
 8002ca6:	432b      	orrs	r3, r5
 8002ca8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002caa:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002cac:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002cae:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002cb0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4022      	ands	r2, r4
 8002cba:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cbc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002cbe:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002cc0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	2325      	movs	r3, #37	@ 0x25
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002cce:	2000      	movs	r0, #0
}
 8002cd0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8002cd4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002cd8:	3320      	adds	r3, #32
 8002cda:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002cdc:	2001      	movs	r0, #1
 8002cde:	e7f7      	b.n	8002cd0 <HAL_DMA_Abort+0x60>
 8002ce0:	fffffeff 	.word	0xfffffeff
 8002ce4:	40020000 	.word	0x40020000

08002ce8 <HAL_DMA_IRQHandler>:
{
 8002ce8:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cea:	211c      	movs	r1, #28
 8002cec:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8002cee:	4b2b      	ldr	r3, [pc, #172]	@ (8002d9c <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8002cf0:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8002cf2:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cf4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002cf6:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	0021      	movs	r1, r4
 8002cfc:	4099      	lsls	r1, r3
 8002cfe:	420a      	tst	r2, r1
 8002d00:	d010      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x3c>
 8002d02:	422c      	tst	r4, r5
 8002d04:	d00e      	beq.n	8002d24 <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	6833      	ldr	r3, [r6, #0]
 8002d08:	069b      	lsls	r3, r3, #26
 8002d0a:	d402      	bmi.n	8002d12 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	43a3      	bics	r3, r4
 8002d10:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002d12:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <HAL_DMA_IRQHandler+0xb4>)
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4311      	orrs	r1, r2
 8002d18:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002d1a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d000      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002d20:	4798      	blx	r3
}
 8002d22:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002d24:	2402      	movs	r4, #2
 8002d26:	0021      	movs	r1, r4
 8002d28:	4099      	lsls	r1, r3
 8002d2a:	420a      	tst	r2, r1
 8002d2c:	d017      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x76>
 8002d2e:	422c      	tst	r4, r5
 8002d30:	d015      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d32:	6833      	ldr	r3, [r6, #0]
 8002d34:	069b      	lsls	r3, r3, #26
 8002d36:	d406      	bmi.n	8002d46 <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d38:	220a      	movs	r2, #10
 8002d3a:	6833      	ldr	r3, [r6, #0]
 8002d3c:	4393      	bics	r3, r2
 8002d3e:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002d40:	2325      	movs	r3, #37	@ 0x25
 8002d42:	3a09      	subs	r2, #9
 8002d44:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_DMA_IRQHandler+0xb4>)
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2324      	movs	r3, #36	@ 0x24
 8002d52:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8002d54:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0e3      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002d5a:	4798      	blx	r3
  return;
 8002d5c:	e7e1      	b.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002d5e:	2108      	movs	r1, #8
 8002d60:	000c      	movs	r4, r1
 8002d62:	409c      	lsls	r4, r3
 8002d64:	4222      	tst	r2, r4
 8002d66:	d0dc      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
 8002d68:	4229      	tst	r1, r5
 8002d6a:	d0da      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d6c:	6832      	ldr	r2, [r6, #0]
 8002d6e:	3106      	adds	r1, #6
 8002d70:	438a      	bics	r2, r1
 8002d72:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002d74:	2201      	movs	r2, #1
 8002d76:	0015      	movs	r5, r2
 8002d78:	409d      	lsls	r5, r3
 8002d7a:	002b      	movs	r3, r5
 8002d7c:	4907      	ldr	r1, [pc, #28]	@ (8002d9c <HAL_DMA_IRQHandler+0xb4>)
 8002d7e:	684c      	ldr	r4, [r1, #4]
 8002d80:	4323      	orrs	r3, r4
 8002d82:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002d84:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d86:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002d88:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002d90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0c5      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002d96:	4798      	blx	r3
  return;
 8002d98:	e7c3      	b.n	8002d22 <HAL_DMA_IRQHandler+0x3a>
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	40020000 	.word	0x40020000

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002da2:	46de      	mov	lr, fp
 8002da4:	4657      	mov	r7, sl
 8002da6:	464e      	mov	r6, r9
 8002da8:	4645      	mov	r5, r8
 8002daa:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dac:	680c      	ldr	r4, [r1, #0]
{
 8002dae:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8002db0:	2300      	movs	r3, #0
{
 8002db2:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002db4:	2c00      	cmp	r4, #0
 8002db6:	d068      	beq.n	8002e8a <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002db8:	2201      	movs	r2, #1
 8002dba:	409a      	lsls	r2, r3
 8002dbc:	4694      	mov	ip, r2
 8002dbe:	4022      	ands	r2, r4
 8002dc0:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8002dc2:	4662      	mov	r2, ip
 8002dc4:	4214      	tst	r4, r2
 8002dc6:	d05c      	beq.n	8002e82 <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dc8:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dca:	465a      	mov	r2, fp
 8002dcc:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dce:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd0:	6855      	ldr	r5, [r2, #4]
 8002dd2:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dd4:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dd6:	402a      	ands	r2, r5
 8002dd8:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002dda:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ddc:	2e01      	cmp	r6, #1
 8002dde:	d95b      	bls.n	8002e98 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de0:	2a03      	cmp	r2, #3
 8002de2:	d000      	beq.n	8002de6 <HAL_GPIO_Init+0x46>
 8002de4:	e0ad      	b.n	8002f42 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de6:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002de8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dea:	9900      	ldr	r1, [sp, #0]
 8002dec:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dee:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8002df0:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df2:	22c0      	movs	r2, #192	@ 0xc0
 8002df4:	0292      	lsls	r2, r2, #10
 8002df6:	4215      	tst	r5, r2
 8002df8:	d043      	beq.n	8002e82 <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002dfa:	2703      	movs	r7, #3
 8002dfc:	260f      	movs	r6, #15
 8002dfe:	495d      	ldr	r1, [pc, #372]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
 8002e00:	401f      	ands	r7, r3
 8002e02:	468c      	mov	ip, r1
 8002e04:	00ff      	lsls	r7, r7, #3
 8002e06:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8002e08:	089a      	lsrs	r2, r3, #2
 8002e0a:	0092      	lsls	r2, r2, #2
 8002e0c:	4462      	add	r2, ip
 8002e0e:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002e10:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002e12:	26a0      	movs	r6, #160	@ 0xa0
 8002e14:	05f6      	lsls	r6, r6, #23
 8002e16:	42b0      	cmp	r0, r6
 8002e18:	d00e      	beq.n	8002e38 <HAL_GPIO_Init+0x98>
 8002e1a:	4e57      	ldr	r6, [pc, #348]	@ (8002f78 <HAL_GPIO_Init+0x1d8>)
 8002e1c:	42b0      	cmp	r0, r6
 8002e1e:	d100      	bne.n	8002e22 <HAL_GPIO_Init+0x82>
 8002e20:	e0a0      	b.n	8002f64 <HAL_GPIO_Init+0x1c4>
 8002e22:	4e56      	ldr	r6, [pc, #344]	@ (8002f7c <HAL_GPIO_Init+0x1dc>)
 8002e24:	42b0      	cmp	r0, r6
 8002e26:	d100      	bne.n	8002e2a <HAL_GPIO_Init+0x8a>
 8002e28:	e0a0      	b.n	8002f6c <HAL_GPIO_Init+0x1cc>
 8002e2a:	4e55      	ldr	r6, [pc, #340]	@ (8002f80 <HAL_GPIO_Init+0x1e0>)
 8002e2c:	42b0      	cmp	r0, r6
 8002e2e:	d100      	bne.n	8002e32 <HAL_GPIO_Init+0x92>
 8002e30:	e094      	b.n	8002f5c <HAL_GPIO_Init+0x1bc>
 8002e32:	2605      	movs	r6, #5
 8002e34:	40be      	lsls	r6, r7
 8002e36:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e38:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8002e3a:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8002e3c:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8002e3e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e40:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8002e42:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8002e44:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e46:	4235      	tst	r5, r6
 8002e48:	d000      	beq.n	8002e4c <HAL_GPIO_Init+0xac>
 8002e4a:	e077      	b.n	8002f3c <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8002e4c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002e4e:	4e49      	ldr	r6, [pc, #292]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
 8002e50:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8002e52:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e54:	2680      	movs	r6, #128	@ 0x80
 8002e56:	03b6      	lsls	r6, r6, #14
 8002e58:	4235      	tst	r5, r6
 8002e5a:	d16c      	bne.n	8002f36 <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8002e5c:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002e5e:	4e45      	ldr	r6, [pc, #276]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
 8002e60:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e62:	2284      	movs	r2, #132	@ 0x84
 8002e64:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e66:	03af      	lsls	r7, r5, #14
 8002e68:	d462      	bmi.n	8002f30 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8002e6a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002e6c:	2784      	movs	r7, #132	@ 0x84
 8002e6e:	4e41      	ldr	r6, [pc, #260]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
 8002e70:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e76:	03ed      	lsls	r5, r5, #15
 8002e78:	d456      	bmi.n	8002f28 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8002e7a:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	4d3d      	ldr	r5, [pc, #244]	@ (8002f74 <HAL_GPIO_Init+0x1d4>)
 8002e80:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e82:	0022      	movs	r2, r4
      }
    }

    position++;
 8002e84:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e86:	40da      	lsrs	r2, r3
 8002e88:	d196      	bne.n	8002db8 <HAL_GPIO_Init+0x18>
  }
}
 8002e8a:	b003      	add	sp, #12
 8002e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8002e8e:	46bb      	mov	fp, r7
 8002e90:	46b2      	mov	sl, r6
 8002e92:	46a9      	mov	r9, r5
 8002e94:	46a0      	mov	r8, r4
 8002e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002e98:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e9a:	000e      	movs	r6, r1
 8002e9c:	9900      	ldr	r1, [sp, #0]
 8002e9e:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea0:	4659      	mov	r1, fp
 8002ea2:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002ea4:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ea6:	000e      	movs	r6, r1
 8002ea8:	40be      	lsls	r6, r7
 8002eaa:	46b0      	mov	r8, r6
 8002eac:	464e      	mov	r6, r9
 8002eae:	4641      	mov	r1, r8
 8002eb0:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002eb2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002eb4:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eb6:	000e      	movs	r6, r1
 8002eb8:	4661      	mov	r1, ip
 8002eba:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebc:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ebe:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ec0:	000e      	movs	r6, r1
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	400e      	ands	r6, r1
 8002ec6:	409e      	lsls	r6, r3
 8002ec8:	46b4      	mov	ip, r6
 8002eca:	4646      	mov	r6, r8
 8002ecc:	4661      	mov	r1, ip
 8002ece:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8002ed0:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002ed2:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ed4:	000e      	movs	r6, r1
 8002ed6:	9900      	ldr	r1, [sp, #0]
 8002ed8:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eda:	4659      	mov	r1, fp
 8002edc:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ede:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ee0:	000e      	movs	r6, r1
 8002ee2:	40be      	lsls	r6, r7
 8002ee4:	46b4      	mov	ip, r6
 8002ee6:	4646      	mov	r6, r8
 8002ee8:	4661      	mov	r1, ip
 8002eea:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8002eec:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	2a02      	cmp	r2, #2
 8002ef0:	d000      	beq.n	8002ef4 <HAL_GPIO_Init+0x154>
 8002ef2:	e778      	b.n	8002de6 <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8002ef4:	08d9      	lsrs	r1, r3, #3
 8002ef6:	0089      	lsls	r1, r1, #2
 8002ef8:	468c      	mov	ip, r1
 8002efa:	4484      	add	ip, r0
 8002efc:	4661      	mov	r1, ip
 8002efe:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f00:	2107      	movs	r1, #7
 8002f02:	4019      	ands	r1, r3
 8002f04:	0089      	lsls	r1, r1, #2
 8002f06:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8002f08:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	4646      	mov	r6, r8
 8002f0e:	40b1      	lsls	r1, r6
 8002f10:	9e01      	ldr	r6, [sp, #4]
 8002f12:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f14:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f16:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f18:	4646      	mov	r6, r8
 8002f1a:	6909      	ldr	r1, [r1, #16]
 8002f1c:	40b1      	lsls	r1, r6
 8002f1e:	9e01      	ldr	r6, [sp, #4]
 8002f20:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002f22:	4661      	mov	r1, ip
 8002f24:	620e      	str	r6, [r1, #32]
 8002f26:	e75e      	b.n	8002de6 <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8002f28:	4651      	mov	r1, sl
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	000a      	movs	r2, r1
 8002f2e:	e7a5      	b.n	8002e7c <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8002f30:	4656      	mov	r6, sl
 8002f32:	4332      	orrs	r2, r6
 8002f34:	e79a      	b.n	8002e6c <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8002f36:	4656      	mov	r6, sl
 8002f38:	4332      	orrs	r2, r6
 8002f3a:	e790      	b.n	8002e5e <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8002f3c:	4656      	mov	r6, sl
 8002f3e:	4332      	orrs	r2, r6
 8002f40:	e785      	b.n	8002e4e <HAL_GPIO_Init+0xae>
 8002f42:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8002f44:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f46:	4031      	ands	r1, r6
 8002f48:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f4a:	4659      	mov	r1, fp
 8002f4c:	6889      	ldr	r1, [r1, #8]
 8002f4e:	40b9      	lsls	r1, r7
 8002f50:	468c      	mov	ip, r1
 8002f52:	4641      	mov	r1, r8
 8002f54:	4666      	mov	r6, ip
 8002f56:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8002f58:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5a:	e744      	b.n	8002de6 <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002f5c:	2603      	movs	r6, #3
 8002f5e:	40be      	lsls	r6, r7
 8002f60:	4331      	orrs	r1, r6
 8002f62:	e769      	b.n	8002e38 <HAL_GPIO_Init+0x98>
 8002f64:	2601      	movs	r6, #1
 8002f66:	40be      	lsls	r6, r7
 8002f68:	4331      	orrs	r1, r6
 8002f6a:	e765      	b.n	8002e38 <HAL_GPIO_Init+0x98>
 8002f6c:	2602      	movs	r6, #2
 8002f6e:	40be      	lsls	r6, r7
 8002f70:	4331      	orrs	r1, r6
 8002f72:	e761      	b.n	8002e38 <HAL_GPIO_Init+0x98>
 8002f74:	40021800 	.word	0x40021800
 8002f78:	50000400 	.word	0x50000400
 8002f7c:	50000800 	.word	0x50000800
 8002f80:	50000c00 	.word	0x50000c00

08002f84 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f88:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f8a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f8c:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002f8e:	e7fc      	b.n	8002f8a <HAL_GPIO_WritePin+0x6>

08002f90 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002f90:	4770      	bx	lr
 8002f92:	46c0      	nop			@ (mov r8, r8)

08002f94 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f94:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8002f96:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f98:	68da      	ldr	r2, [r3, #12]
{
 8002f9a:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002f9c:	4210      	tst	r0, r2
 8002f9e:	d104      	bne.n	8002faa <HAL_GPIO_EXTI_IRQHandler+0x16>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002fa0:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	4222      	tst	r2, r4
 8002fa6:	d107      	bne.n	8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
}
 8002fa8:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002faa:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002fac:	f7ff fff0 	bl	8002f90 <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002fb0:	4b04      	ldr	r3, [pc, #16]	@ (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4222      	tst	r2, r4
 8002fb6:	d0f7      	beq.n	8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002fb8:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002fba:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002fbc:	f7fe fb0c 	bl	80015d8 <HAL_GPIO_EXTI_Falling_Callback>
}
 8002fc0:	e7f2      	b.n	8002fa8 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8002fc2:	46c0      	nop			@ (mov r8, r8)
 8002fc4:	40021800 	.word	0x40021800

08002fc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fc8:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fca:	4c13      	ldr	r4, [pc, #76]	@ (8003018 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002fcc:	4a13      	ldr	r2, [pc, #76]	@ (800301c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002fce:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002fd0:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	4303      	orrs	r3, r0
 8002fd6:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4298      	cmp	r0, r3
 8002fde:	d001      	beq.n	8002fe4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8002fe0:	0028      	movs	r0, r5
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8003020 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8002fe6:	490f      	ldr	r1, [pc, #60]	@ (8003024 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0058      	lsls	r0, r3, #1
 8002fec:	18c0      	adds	r0, r0, r3
 8002fee:	0040      	lsls	r0, r0, #1
 8002ff0:	f7fd f888 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	6963      	ldr	r3, [r4, #20]
 8002ff8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002ffa:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffc:	4213      	tst	r3, r2
 8002ffe:	d102      	bne.n	8003006 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8003000:	e7ee      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8003002:	2800      	cmp	r0, #0
 8003004:	d005      	beq.n	8003012 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003006:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8003008:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800300a:	4213      	tst	r3, r2
 800300c:	d1f9      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 800300e:	2500      	movs	r5, #0
 8003010:	e7e6      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8003012:	2503      	movs	r5, #3
 8003014:	e7e4      	b.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8003016:	46c0      	nop			@ (mov r8, r8)
 8003018:	40007000 	.word	0x40007000
 800301c:	fffff9ff 	.word	0xfffff9ff
 8003020:	20000004 	.word	0x20000004
 8003024:	000f4240 	.word	0x000f4240

08003028 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800302a:	46ce      	mov	lr, r9
 800302c:	4647      	mov	r7, r8
 800302e:	b580      	push	{r7, lr}
 8003030:	0004      	movs	r4, r0
 8003032:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	2800      	cmp	r0, #0
 8003036:	d027      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003038:	6803      	ldr	r3, [r0, #0]
 800303a:	07da      	lsls	r2, r3, #31
 800303c:	d511      	bpl.n	8003062 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800303e:	2238      	movs	r2, #56	@ 0x38
 8003040:	49c0      	ldr	r1, [pc, #768]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003042:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003044:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003046:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003048:	2a10      	cmp	r2, #16
 800304a:	d100      	bne.n	800304e <HAL_RCC_OscConfig+0x26>
 800304c:	e0cc      	b.n	80031e8 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800304e:	2a08      	cmp	r2, #8
 8003050:	d000      	beq.n	8003054 <HAL_RCC_OscConfig+0x2c>
 8003052:	e0cd      	b.n	80031f0 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003054:	4abb      	ldr	r2, [pc, #748]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003056:	6812      	ldr	r2, [r2, #0]
 8003058:	0392      	lsls	r2, r2, #14
 800305a:	d502      	bpl.n	8003062 <HAL_RCC_OscConfig+0x3a>
 800305c:	6862      	ldr	r2, [r4, #4]
 800305e:	2a00      	cmp	r2, #0
 8003060:	d012      	beq.n	8003088 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003062:	079a      	lsls	r2, r3, #30
 8003064:	d532      	bpl.n	80030cc <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003066:	2338      	movs	r3, #56	@ 0x38
 8003068:	4ab6      	ldr	r2, [pc, #728]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 800306a:	6891      	ldr	r1, [r2, #8]
 800306c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003070:	2b10      	cmp	r3, #16
 8003072:	d100      	bne.n	8003076 <HAL_RCC_OscConfig+0x4e>
 8003074:	e10b      	b.n	800328e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003076:	2b00      	cmp	r3, #0
 8003078:	d000      	beq.n	800307c <HAL_RCC_OscConfig+0x54>
 800307a:	e10d      	b.n	8003298 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800307c:	6813      	ldr	r3, [r2, #0]
 800307e:	055b      	lsls	r3, r3, #21
 8003080:	d508      	bpl.n	8003094 <HAL_RCC_OscConfig+0x6c>
 8003082:	68e3      	ldr	r3, [r4, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8003088:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 800308a:	b003      	add	sp, #12
 800308c:	bcc0      	pop	{r6, r7}
 800308e:	46b9      	mov	r9, r7
 8003090:	46b0      	mov	r8, r6
 8003092:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	6851      	ldr	r1, [r2, #4]
 8003096:	6963      	ldr	r3, [r4, #20]
 8003098:	48ab      	ldr	r0, [pc, #684]	@ (8003348 <HAL_RCC_OscConfig+0x320>)
 800309a:	021b      	lsls	r3, r3, #8
 800309c:	4001      	ands	r1, r0
 800309e:	430b      	orrs	r3, r1
 80030a0:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80030a2:	4aa8      	ldr	r2, [pc, #672]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 80030a4:	49a9      	ldr	r1, [pc, #676]	@ (800334c <HAL_RCC_OscConfig+0x324>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	400b      	ands	r3, r1
 80030aa:	6921      	ldr	r1, [r4, #16]
 80030ac:	430b      	orrs	r3, r1
 80030ae:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80030b0:	6813      	ldr	r3, [r2, #0]
 80030b2:	4aa7      	ldr	r2, [pc, #668]	@ (8003350 <HAL_RCC_OscConfig+0x328>)
 80030b4:	049b      	lsls	r3, r3, #18
 80030b6:	0f5b      	lsrs	r3, r3, #29
 80030b8:	40da      	lsrs	r2, r3
 80030ba:	49a6      	ldr	r1, [pc, #664]	@ (8003354 <HAL_RCC_OscConfig+0x32c>)
 80030bc:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030be:	4ba6      	ldr	r3, [pc, #664]	@ (8003358 <HAL_RCC_OscConfig+0x330>)
 80030c0:	6818      	ldr	r0, [r3, #0]
 80030c2:	f7fe ff97 	bl	8001ff4 <HAL_InitTick>
 80030c6:	2800      	cmp	r0, #0
 80030c8:	d1de      	bne.n	8003088 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	071a      	lsls	r2, r3, #28
 80030ce:	d46d      	bmi.n	80031ac <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d0:	075b      	lsls	r3, r3, #29
 80030d2:	d545      	bpl.n	8003160 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80030d4:	2338      	movs	r3, #56	@ 0x38
 80030d6:	4a9b      	ldr	r2, [pc, #620]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 80030d8:	6891      	ldr	r1, [r2, #8]
 80030da:	400b      	ands	r3, r1
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d100      	bne.n	80030e2 <HAL_RCC_OscConfig+0xba>
 80030e0:	e0cc      	b.n	800327c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e2:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 80030e4:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030e6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80030e8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80030ea:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030ec:	4219      	tst	r1, r3
 80030ee:	d108      	bne.n	8003102 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 80030f0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80030f2:	4319      	orrs	r1, r3
 80030f4:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80030f6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030f8:	4013      	ands	r3, r2
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80030fe:	2301      	movs	r3, #1
 8003100:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003102:	2780      	movs	r7, #128	@ 0x80
 8003104:	4e95      	ldr	r6, [pc, #596]	@ (800335c <HAL_RCC_OscConfig+0x334>)
 8003106:	007f      	lsls	r7, r7, #1
 8003108:	6833      	ldr	r3, [r6, #0]
 800310a:	423b      	tst	r3, r7
 800310c:	d100      	bne.n	8003110 <HAL_RCC_OscConfig+0xe8>
 800310e:	e0ff      	b.n	8003310 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003110:	68a3      	ldr	r3, [r4, #8]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d100      	bne.n	8003118 <HAL_RCC_OscConfig+0xf0>
 8003116:	e0e5      	b.n	80032e4 <HAL_RCC_OscConfig+0x2bc>
 8003118:	2b05      	cmp	r3, #5
 800311a:	d100      	bne.n	800311e <HAL_RCC_OscConfig+0xf6>
 800311c:	e1d1      	b.n	80034c2 <HAL_RCC_OscConfig+0x49a>
 800311e:	2101      	movs	r1, #1
 8003120:	4e88      	ldr	r6, [pc, #544]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003122:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8003124:	438a      	bics	r2, r1
 8003126:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8003128:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 800312a:	3103      	adds	r1, #3
 800312c:	438a      	bics	r2, r1
 800312e:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003130:	2b00      	cmp	r3, #0
 8003132:	d000      	beq.n	8003136 <HAL_RCC_OscConfig+0x10e>
 8003134:	e0da      	b.n	80032ec <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8003136:	f7fe ffa3 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313a:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 800313c:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800313e:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003140:	4d87      	ldr	r5, [pc, #540]	@ (8003360 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003142:	e005      	b.n	8003150 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003144:	f7fe ff9c 	bl	8002080 <HAL_GetTick>
 8003148:	1bc0      	subs	r0, r0, r7
 800314a:	42a8      	cmp	r0, r5
 800314c:	d900      	bls.n	8003150 <HAL_RCC_OscConfig+0x128>
 800314e:	e0ee      	b.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003150:	4642      	mov	r2, r8
 8003152:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8003154:	421a      	tst	r2, r3
 8003156:	d1f5      	bne.n	8003144 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8003158:	464b      	mov	r3, r9
 800315a:	2b01      	cmp	r3, #1
 800315c:	d100      	bne.n	8003160 <HAL_RCC_OscConfig+0x138>
 800315e:	e16a      	b.n	8003436 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003160:	69e3      	ldr	r3, [r4, #28]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d020      	beq.n	80031a8 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003166:	2238      	movs	r2, #56	@ 0x38
 8003168:	4d76      	ldr	r5, [pc, #472]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 800316a:	68a9      	ldr	r1, [r5, #8]
 800316c:	400a      	ands	r2, r1
 800316e:	2a10      	cmp	r2, #16
 8003170:	d100      	bne.n	8003174 <HAL_RCC_OscConfig+0x14c>
 8003172:	e11d      	b.n	80033b0 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003174:	2b02      	cmp	r3, #2
 8003176:	d100      	bne.n	800317a <HAL_RCC_OscConfig+0x152>
 8003178:	e163      	b.n	8003442 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 800317a:	682b      	ldr	r3, [r5, #0]
 800317c:	4a79      	ldr	r2, [pc, #484]	@ (8003364 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800317e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003180:	4013      	ands	r3, r2
 8003182:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003184:	f7fe ff7c 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003188:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800318a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800318c:	e005      	b.n	800319a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe ff77 	bl	8002080 <HAL_GetTick>
 8003192:	1b00      	subs	r0, r0, r4
 8003194:	2802      	cmp	r0, #2
 8003196:	d900      	bls.n	800319a <HAL_RCC_OscConfig+0x172>
 8003198:	e0c9      	b.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800319a:	682b      	ldr	r3, [r5, #0]
 800319c:	4233      	tst	r3, r6
 800319e:	d1f6      	bne.n	800318e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80031a0:	68eb      	ldr	r3, [r5, #12]
 80031a2:	4a71      	ldr	r2, [pc, #452]	@ (8003368 <HAL_RCC_OscConfig+0x340>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 80031a8:	2000      	movs	r0, #0
 80031aa:	e76e      	b.n	800308a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80031ac:	2238      	movs	r2, #56	@ 0x38
 80031ae:	4d65      	ldr	r5, [pc, #404]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 80031b0:	68a9      	ldr	r1, [r5, #8]
 80031b2:	400a      	ands	r2, r1
 80031b4:	2a18      	cmp	r2, #24
 80031b6:	d043      	beq.n	8003240 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031b8:	69a3      	ldr	r3, [r4, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d100      	bne.n	80031c0 <HAL_RCC_OscConfig+0x198>
 80031be:	e0b8      	b.n	8003332 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 80031c0:	2201      	movs	r2, #1
 80031c2:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031c4:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80031c6:	4313      	orrs	r3, r2
 80031c8:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80031ca:	f7fe ff59 	bl	8002080 <HAL_GetTick>
 80031ce:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d0:	e005      	b.n	80031de <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe ff55 	bl	8002080 <HAL_GetTick>
 80031d6:	1b80      	subs	r0, r0, r6
 80031d8:	2802      	cmp	r0, #2
 80031da:	d900      	bls.n	80031de <HAL_RCC_OscConfig+0x1b6>
 80031dc:	e0a7      	b.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031de:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80031e0:	421f      	tst	r7, r3
 80031e2:	d0f6      	beq.n	80031d2 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	e773      	b.n	80030d0 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031e8:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031ea:	0789      	lsls	r1, r1, #30
 80031ec:	d100      	bne.n	80031f0 <HAL_RCC_OscConfig+0x1c8>
 80031ee:	e731      	b.n	8003054 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f0:	2280      	movs	r2, #128	@ 0x80
 80031f2:	6863      	ldr	r3, [r4, #4]
 80031f4:	0252      	lsls	r2, r2, #9
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d02b      	beq.n	8003252 <HAL_RCC_OscConfig+0x22a>
 80031fa:	21a0      	movs	r1, #160	@ 0xa0
 80031fc:	02c9      	lsls	r1, r1, #11
 80031fe:	428b      	cmp	r3, r1
 8003200:	d100      	bne.n	8003204 <HAL_RCC_OscConfig+0x1dc>
 8003202:	e103      	b.n	800340c <HAL_RCC_OscConfig+0x3e4>
 8003204:	4d4f      	ldr	r5, [pc, #316]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003206:	4959      	ldr	r1, [pc, #356]	@ (800336c <HAL_RCC_OscConfig+0x344>)
 8003208:	682a      	ldr	r2, [r5, #0]
 800320a:	400a      	ands	r2, r1
 800320c:	602a      	str	r2, [r5, #0]
 800320e:	682a      	ldr	r2, [r5, #0]
 8003210:	4957      	ldr	r1, [pc, #348]	@ (8003370 <HAL_RCC_OscConfig+0x348>)
 8003212:	400a      	ands	r2, r1
 8003214:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11f      	bne.n	800325a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 800321a:	f7fe ff31 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800321e:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003220:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003222:	02bf      	lsls	r7, r7, #10
 8003224:	e004      	b.n	8003230 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003226:	f7fe ff2b 	bl	8002080 <HAL_GetTick>
 800322a:	1b80      	subs	r0, r0, r6
 800322c:	2864      	cmp	r0, #100	@ 0x64
 800322e:	d87e      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	423b      	tst	r3, r7
 8003234:	d1f7      	bne.n	8003226 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	079a      	lsls	r2, r3, #30
 800323a:	d400      	bmi.n	800323e <HAL_RCC_OscConfig+0x216>
 800323c:	e746      	b.n	80030cc <HAL_RCC_OscConfig+0xa4>
 800323e:	e712      	b.n	8003066 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003240:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8003242:	0792      	lsls	r2, r2, #30
 8003244:	d400      	bmi.n	8003248 <HAL_RCC_OscConfig+0x220>
 8003246:	e743      	b.n	80030d0 <HAL_RCC_OscConfig+0xa8>
 8003248:	69a2      	ldr	r2, [r4, #24]
 800324a:	2a00      	cmp	r2, #0
 800324c:	d000      	beq.n	8003250 <HAL_RCC_OscConfig+0x228>
 800324e:	e73f      	b.n	80030d0 <HAL_RCC_OscConfig+0xa8>
 8003250:	e71a      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003252:	4a3c      	ldr	r2, [pc, #240]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003254:	6811      	ldr	r1, [r2, #0]
 8003256:	430b      	orrs	r3, r1
 8003258:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800325a:	f7fe ff11 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800325e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003260:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003262:	4f38      	ldr	r7, [pc, #224]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 8003264:	02b6      	lsls	r6, r6, #10
 8003266:	e004      	b.n	8003272 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003268:	f7fe ff0a 	bl	8002080 <HAL_GetTick>
 800326c:	1b40      	subs	r0, r0, r5
 800326e:	2864      	cmp	r0, #100	@ 0x64
 8003270:	d85d      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	4233      	tst	r3, r6
 8003276:	d0f7      	beq.n	8003268 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003278:	6823      	ldr	r3, [r4, #0]
 800327a:	e7dd      	b.n	8003238 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800327c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800327e:	079b      	lsls	r3, r3, #30
 8003280:	d400      	bmi.n	8003284 <HAL_RCC_OscConfig+0x25c>
 8003282:	e76d      	b.n	8003160 <HAL_RCC_OscConfig+0x138>
 8003284:	68a3      	ldr	r3, [r4, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <HAL_RCC_OscConfig+0x264>
 800328a:	e769      	b.n	8003160 <HAL_RCC_OscConfig+0x138>
 800328c:	e6fc      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800328e:	3b0d      	subs	r3, #13
 8003290:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003292:	2b02      	cmp	r3, #2
 8003294:	d100      	bne.n	8003298 <HAL_RCC_OscConfig+0x270>
 8003296:	e0c3      	b.n	8003420 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800329a:	4d2a      	ldr	r5, [pc, #168]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800329c:	2b00      	cmp	r3, #0
 800329e:	d073      	beq.n	8003388 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a4:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032a6:	4013      	ands	r3, r2
 80032a8:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032aa:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032ac:	4313      	orrs	r3, r2
 80032ae:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 80032b0:	2380      	movs	r3, #128	@ 0x80
 80032b2:	682a      	ldr	r2, [r5, #0]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4313      	orrs	r3, r2
 80032b8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80032ba:	f7fe fee1 	bl	8002080 <HAL_GetTick>
 80032be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	e004      	b.n	80032cc <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fedd 	bl	8002080 <HAL_GetTick>
 80032c6:	1b80      	subs	r0, r0, r6
 80032c8:	2802      	cmp	r0, #2
 80032ca:	d830      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032cc:	682b      	ldr	r3, [r5, #0]
 80032ce:	423b      	tst	r3, r7
 80032d0:	d0f7      	beq.n	80032c2 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	686a      	ldr	r2, [r5, #4]
 80032d4:	6963      	ldr	r3, [r4, #20]
 80032d6:	491c      	ldr	r1, [pc, #112]	@ (8003348 <HAL_RCC_OscConfig+0x320>)
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	400a      	ands	r2, r1
 80032dc:	4313      	orrs	r3, r2
 80032de:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	e6f3      	b.n	80030cc <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e4:	4917      	ldr	r1, [pc, #92]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
 80032e6:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 80032e8:	4313      	orrs	r3, r2
 80032ea:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80032ec:	f7fe fec8 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f0:	4b14      	ldr	r3, [pc, #80]	@ (8003344 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80032f2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f4:	4698      	mov	r8, r3
 80032f6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	4d19      	ldr	r5, [pc, #100]	@ (8003360 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fa:	e004      	b.n	8003306 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fc:	f7fe fec0 	bl	8002080 <HAL_GetTick>
 8003300:	1b80      	subs	r0, r0, r6
 8003302:	42a8      	cmp	r0, r5
 8003304:	d813      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003306:	4643      	mov	r3, r8
 8003308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330a:	421f      	tst	r7, r3
 800330c:	d0f6      	beq.n	80032fc <HAL_RCC_OscConfig+0x2d4>
 800330e:	e723      	b.n	8003158 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003310:	6833      	ldr	r3, [r6, #0]
 8003312:	433b      	orrs	r3, r7
 8003314:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8003316:	f7fe feb3 	bl	8002080 <HAL_GetTick>
 800331a:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800331c:	6833      	ldr	r3, [r6, #0]
 800331e:	423b      	tst	r3, r7
 8003320:	d000      	beq.n	8003324 <HAL_RCC_OscConfig+0x2fc>
 8003322:	e6f5      	b.n	8003110 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003324:	f7fe feac 	bl	8002080 <HAL_GetTick>
 8003328:	1b40      	subs	r0, r0, r5
 800332a:	2802      	cmp	r0, #2
 800332c:	d9f6      	bls.n	800331c <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 800332e:	2003      	movs	r0, #3
 8003330:	e6ab      	b.n	800308a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 8003332:	2201      	movs	r2, #1
 8003334:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003336:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 8003338:	4393      	bics	r3, r2
 800333a:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800333c:	f7fe fea0 	bl	8002080 <HAL_GetTick>
 8003340:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003342:	e01c      	b.n	800337e <HAL_RCC_OscConfig+0x356>
 8003344:	40021000 	.word	0x40021000
 8003348:	ffff80ff 	.word	0xffff80ff
 800334c:	ffffc7ff 	.word	0xffffc7ff
 8003350:	00f42400 	.word	0x00f42400
 8003354:	20000004 	.word	0x20000004
 8003358:	2000000c 	.word	0x2000000c
 800335c:	40007000 	.word	0x40007000
 8003360:	00001388 	.word	0x00001388
 8003364:	feffffff 	.word	0xfeffffff
 8003368:	eefefffc 	.word	0xeefefffc
 800336c:	fffeffff 	.word	0xfffeffff
 8003370:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003374:	f7fe fe84 	bl	8002080 <HAL_GetTick>
 8003378:	1b80      	subs	r0, r0, r6
 800337a:	2802      	cmp	r0, #2
 800337c:	d8d7      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800337e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003380:	421f      	tst	r7, r3
 8003382:	d1f7      	bne.n	8003374 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	e6a3      	b.n	80030d0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	4a55      	ldr	r2, [pc, #340]	@ (80034e0 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800338c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 800338e:	4013      	ands	r3, r2
 8003390:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003392:	f7fe fe75 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003396:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8003398:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339a:	e004      	b.n	80033a6 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800339c:	f7fe fe70 	bl	8002080 <HAL_GetTick>
 80033a0:	1b80      	subs	r0, r0, r6
 80033a2:	2802      	cmp	r0, #2
 80033a4:	d8c3      	bhi.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033a6:	682b      	ldr	r3, [r5, #0]
 80033a8:	423b      	tst	r3, r7
 80033aa:	d1f7      	bne.n	800339c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ac:	6823      	ldr	r3, [r4, #0]
 80033ae:	e68d      	b.n	80030cc <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d100      	bne.n	80033b6 <HAL_RCC_OscConfig+0x38e>
 80033b4:	e668      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80033b8:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	6a21      	ldr	r1, [r4, #32]
 80033bc:	4002      	ands	r2, r0
 80033be:	428a      	cmp	r2, r1
 80033c0:	d000      	beq.n	80033c4 <HAL_RCC_OscConfig+0x39c>
 80033c2:	e661      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c4:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033c8:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	428a      	cmp	r2, r1
 80033cc:	d000      	beq.n	80033d0 <HAL_RCC_OscConfig+0x3a8>
 80033ce:	e65b      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d0:	21fe      	movs	r1, #254	@ 0xfe
 80033d2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80033d4:	01c9      	lsls	r1, r1, #7
 80033d6:	4001      	ands	r1, r0
 80033d8:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033da:	4291      	cmp	r1, r2
 80033dc:	d000      	beq.n	80033e0 <HAL_RCC_OscConfig+0x3b8>
 80033de:	e653      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033e0:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033e4:	0392      	lsls	r2, r2, #14
 80033e6:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e8:	428a      	cmp	r2, r1
 80033ea:	d000      	beq.n	80033ee <HAL_RCC_OscConfig+0x3c6>
 80033ec:	e64c      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033ee:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033f0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033f2:	0512      	lsls	r2, r2, #20
 80033f4:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033f6:	428a      	cmp	r2, r1
 80033f8:	d000      	beq.n	80033fc <HAL_RCC_OscConfig+0x3d4>
 80033fa:	e645      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80033fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80033fe:	0f40      	lsrs	r0, r0, #29
 8003400:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003402:	1ac0      	subs	r0, r0, r3
 8003404:	1e43      	subs	r3, r0, #1
 8003406:	4198      	sbcs	r0, r3
 8003408:	b2c0      	uxtb	r0, r0
 800340a:	e63e      	b.n	800308a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	4b35      	ldr	r3, [pc, #212]	@ (80034e4 <HAL_RCC_OscConfig+0x4bc>)
 8003410:	02c9      	lsls	r1, r1, #11
 8003412:	6818      	ldr	r0, [r3, #0]
 8003414:	4301      	orrs	r1, r0
 8003416:	6019      	str	r1, [r3, #0]
 8003418:	6819      	ldr	r1, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341e:	e71c      	b.n	800325a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003420:	6813      	ldr	r3, [r2, #0]
 8003422:	055b      	lsls	r3, r3, #21
 8003424:	d457      	bmi.n	80034d6 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003426:	6851      	ldr	r1, [r2, #4]
 8003428:	6963      	ldr	r3, [r4, #20]
 800342a:	482f      	ldr	r0, [pc, #188]	@ (80034e8 <HAL_RCC_OscConfig+0x4c0>)
 800342c:	021b      	lsls	r3, r3, #8
 800342e:	4001      	ands	r1, r0
 8003430:	430b      	orrs	r3, r1
 8003432:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003434:	e643      	b.n	80030be <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4a2b      	ldr	r2, [pc, #172]	@ (80034e4 <HAL_RCC_OscConfig+0x4bc>)
 8003438:	492c      	ldr	r1, [pc, #176]	@ (80034ec <HAL_RCC_OscConfig+0x4c4>)
 800343a:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800343c:	400b      	ands	r3, r1
 800343e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003440:	e68e      	b.n	8003160 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8003442:	682b      	ldr	r3, [r5, #0]
 8003444:	4a2a      	ldr	r2, [pc, #168]	@ (80034f0 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003446:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003448:	4013      	ands	r3, r2
 800344a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800344c:	f7fe fe18 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003452:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003454:	e005      	b.n	8003462 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003456:	f7fe fe13 	bl	8002080 <HAL_GetTick>
 800345a:	1b80      	subs	r0, r0, r6
 800345c:	2802      	cmp	r0, #2
 800345e:	d900      	bls.n	8003462 <HAL_RCC_OscConfig+0x43a>
 8003460:	e765      	b.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003462:	682b      	ldr	r3, [r5, #0]
 8003464:	423b      	tst	r3, r7
 8003466:	d1f6      	bne.n	8003456 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800346a:	6a23      	ldr	r3, [r4, #32]
 800346c:	68ea      	ldr	r2, [r5, #12]
 800346e:	430b      	orrs	r3, r1
 8003470:	4920      	ldr	r1, [pc, #128]	@ (80034f4 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003472:	4e1c      	ldr	r6, [pc, #112]	@ (80034e4 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003474:	400a      	ands	r2, r1
 8003476:	4313      	orrs	r3, r2
 8003478:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800347a:	4313      	orrs	r3, r2
 800347c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800347e:	4313      	orrs	r3, r2
 8003480:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003482:	4313      	orrs	r3, r2
 8003484:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003486:	0212      	lsls	r2, r2, #8
 8003488:	4313      	orrs	r3, r2
 800348a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800348c:	2380      	movs	r3, #128	@ 0x80
 800348e:	682a      	ldr	r2, [r5, #0]
 8003490:	045b      	lsls	r3, r3, #17
 8003492:	4313      	orrs	r3, r2
 8003494:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003496:	2380      	movs	r3, #128	@ 0x80
 8003498:	68ea      	ldr	r2, [r5, #12]
 800349a:	055b      	lsls	r3, r3, #21
 800349c:	4313      	orrs	r3, r2
 800349e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80034a0:	f7fe fdee 	bl	8002080 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a4:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 80034a6:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034a8:	04ad      	lsls	r5, r5, #18
 80034aa:	e005      	b.n	80034b8 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fde8 	bl	8002080 <HAL_GetTick>
 80034b0:	1b00      	subs	r0, r0, r4
 80034b2:	2802      	cmp	r0, #2
 80034b4:	d900      	bls.n	80034b8 <HAL_RCC_OscConfig+0x490>
 80034b6:	e73a      	b.n	800332e <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b8:	6833      	ldr	r3, [r6, #0]
 80034ba:	422b      	tst	r3, r5
 80034bc:	d0f6      	beq.n	80034ac <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 80034be:	2000      	movs	r0, #0
 80034c0:	e5e3      	b.n	800308a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c2:	2104      	movs	r1, #4
 80034c4:	4b07      	ldr	r3, [pc, #28]	@ (80034e4 <HAL_RCC_OscConfig+0x4bc>)
 80034c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034c8:	430a      	orrs	r2, r1
 80034ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80034cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034ce:	3903      	subs	r1, #3
 80034d0:	430a      	orrs	r2, r1
 80034d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034d4:	e70a      	b.n	80032ec <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034d6:	68e3      	ldr	r3, [r4, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1a4      	bne.n	8003426 <HAL_RCC_OscConfig+0x3fe>
 80034dc:	e5d4      	b.n	8003088 <HAL_RCC_OscConfig+0x60>
 80034de:	46c0      	nop			@ (mov r8, r8)
 80034e0:	fffffeff 	.word	0xfffffeff
 80034e4:	40021000 	.word	0x40021000
 80034e8:	ffff80ff 	.word	0xffff80ff
 80034ec:	efffffff 	.word	0xefffffff
 80034f0:	feffffff 	.word	0xfeffffff
 80034f4:	11c1808c 	.word	0x11c1808c

080034f8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f8:	2338      	movs	r3, #56	@ 0x38
 80034fa:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 80034fc:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034fe:	6891      	ldr	r1, [r2, #8]
 8003500:	420b      	tst	r3, r1
 8003502:	d105      	bne.n	8003510 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003504:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003506:	4820      	ldr	r0, [pc, #128]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003508:	049b      	lsls	r3, r3, #18
 800350a:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 800350c:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800350e:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003510:	6891      	ldr	r1, [r2, #8]
 8003512:	4019      	ands	r1, r3
 8003514:	2908      	cmp	r1, #8
 8003516:	d014      	beq.n	8003542 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003518:	6891      	ldr	r1, [r2, #8]
 800351a:	4019      	ands	r1, r3
 800351c:	2910      	cmp	r1, #16
 800351e:	d012      	beq.n	8003546 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003520:	6891      	ldr	r1, [r2, #8]
 8003522:	4019      	ands	r1, r3
 8003524:	2920      	cmp	r1, #32
 8003526:	d024      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003528:	6890      	ldr	r0, [r2, #8]
 800352a:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 800352c:	3818      	subs	r0, #24
 800352e:	1e43      	subs	r3, r0, #1
 8003530:	4198      	sbcs	r0, r3
 8003532:	4b16      	ldr	r3, [pc, #88]	@ (800358c <HAL_RCC_GetSysClockFreq+0x94>)
 8003534:	4240      	negs	r0, r0
 8003536:	4018      	ands	r0, r3
 8003538:	23fa      	movs	r3, #250	@ 0xfa
 800353a:	01db      	lsls	r3, r3, #7
 800353c:	469c      	mov	ip, r3
 800353e:	4460      	add	r0, ip
 8003540:	e7e5      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003542:	4813      	ldr	r0, [pc, #76]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x98>)
 8003544:	e7e3      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003546:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003548:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800354a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800354c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800354e:	0649      	lsls	r1, r1, #25
 8003550:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003552:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003554:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003556:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8003558:	079b      	lsls	r3, r3, #30
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800355c:	480a      	ldr	r0, [pc, #40]	@ (8003588 <HAL_RCC_GetSysClockFreq+0x90>)
 800355e:	f7fc fdd1 	bl	8000104 <__udivsi3>
 8003562:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003564:	4b07      	ldr	r3, [pc, #28]	@ (8003584 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003566:	68d9      	ldr	r1, [r3, #12]
 8003568:	0f49      	lsrs	r1, r1, #29
 800356a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800356c:	f7fc fdca 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8003570:	e7cd      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8003572:	2080      	movs	r0, #128	@ 0x80
 8003574:	0200      	lsls	r0, r0, #8
 8003576:	e7ca      	b.n	800350e <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003578:	4805      	ldr	r0, [pc, #20]	@ (8003590 <HAL_RCC_GetSysClockFreq+0x98>)
 800357a:	f7fc fdc3 	bl	8000104 <__udivsi3>
 800357e:	4360      	muls	r0, r4
        break;
 8003580:	e7f0      	b.n	8003564 <HAL_RCC_GetSysClockFreq+0x6c>
 8003582:	46c0      	nop			@ (mov r8, r8)
 8003584:	40021000 	.word	0x40021000
 8003588:	00f42400 	.word	0x00f42400
 800358c:	ffff8300 	.word	0xffff8300
 8003590:	007a1200 	.word	0x007a1200

08003594 <HAL_RCC_ClockConfig>:
{
 8003594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003596:	46ce      	mov	lr, r9
 8003598:	4647      	mov	r7, r8
 800359a:	0005      	movs	r5, r0
 800359c:	000c      	movs	r4, r1
 800359e:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80035a0:	2800      	cmp	r0, #0
 80035a2:	d026      	beq.n	80035f2 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a4:	2207      	movs	r2, #7
 80035a6:	4e57      	ldr	r6, [pc, #348]	@ (8003704 <HAL_RCC_ClockConfig+0x170>)
 80035a8:	6833      	ldr	r3, [r6, #0]
 80035aa:	4013      	ands	r3, r2
 80035ac:	428b      	cmp	r3, r1
 80035ae:	d35e      	bcc.n	800366e <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	079a      	lsls	r2, r3, #30
 80035b4:	d50e      	bpl.n	80035d4 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b6:	075a      	lsls	r2, r3, #29
 80035b8:	d505      	bpl.n	80035c6 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80035ba:	22e0      	movs	r2, #224	@ 0xe0
 80035bc:	4952      	ldr	r1, [pc, #328]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
 80035be:	01d2      	lsls	r2, r2, #7
 80035c0:	6888      	ldr	r0, [r1, #8]
 80035c2:	4302      	orrs	r2, r0
 80035c4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c6:	4950      	ldr	r1, [pc, #320]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
 80035c8:	4850      	ldr	r0, [pc, #320]	@ (800370c <HAL_RCC_ClockConfig+0x178>)
 80035ca:	688a      	ldr	r2, [r1, #8]
 80035cc:	4002      	ands	r2, r0
 80035ce:	68a8      	ldr	r0, [r5, #8]
 80035d0:	4302      	orrs	r2, r0
 80035d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035d4:	07db      	lsls	r3, r3, #31
 80035d6:	d52b      	bpl.n	8003630 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d8:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035da:	4a4b      	ldr	r2, [pc, #300]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d100      	bne.n	80035e2 <HAL_RCC_ClockConfig+0x4e>
 80035e0:	e07c      	b.n	80036dc <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d007      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d000      	beq.n	80035ec <HAL_RCC_ClockConfig+0x58>
 80035ea:	e07d      	b.n	80036e8 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	0552      	lsls	r2, r2, #21
 80035f0:	d404      	bmi.n	80035fc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80035f2:	2001      	movs	r0, #1
 80035f4:	e037      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	0192      	lsls	r2, r2, #6
 80035fa:	d5fa      	bpl.n	80035f2 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035fc:	2107      	movs	r1, #7
 80035fe:	4e42      	ldr	r6, [pc, #264]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
 8003600:	68b2      	ldr	r2, [r6, #8]
 8003602:	438a      	bics	r2, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003608:	f7fe fd3a 	bl	8002080 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360c:	2338      	movs	r3, #56	@ 0x38
 800360e:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003610:	4b3f      	ldr	r3, [pc, #252]	@ (8003710 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003612:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003614:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003616:	e004      	b.n	8003622 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003618:	f7fe fd32 	bl	8002080 <HAL_GetTick>
 800361c:	1bc0      	subs	r0, r0, r7
 800361e:	4548      	cmp	r0, r9
 8003620:	d83b      	bhi.n	800369a <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4643      	mov	r3, r8
 8003624:	68b2      	ldr	r2, [r6, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	686b      	ldr	r3, [r5, #4]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	429a      	cmp	r2, r3
 800362e:	d1f3      	bne.n	8003618 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003630:	2207      	movs	r2, #7
 8003632:	4e34      	ldr	r6, [pc, #208]	@ (8003704 <HAL_RCC_ClockConfig+0x170>)
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	4013      	ands	r3, r2
 8003638:	42a3      	cmp	r3, r4
 800363a:	d838      	bhi.n	80036ae <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	075b      	lsls	r3, r3, #29
 8003640:	d42d      	bmi.n	800369e <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003642:	f7ff ff59 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
 8003648:	4a32      	ldr	r2, [pc, #200]	@ (8003714 <HAL_RCC_ClockConfig+0x180>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4932      	ldr	r1, [pc, #200]	@ (8003718 <HAL_RCC_ClockConfig+0x184>)
 800364e:	051b      	lsls	r3, r3, #20
 8003650:	0f1b      	lsrs	r3, r3, #28
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	589b      	ldr	r3, [r3, r2]
 8003656:	221f      	movs	r2, #31
 8003658:	4013      	ands	r3, r2
 800365a:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 800365c:	4b2f      	ldr	r3, [pc, #188]	@ (800371c <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800365e:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	f7fe fcc7 	bl	8001ff4 <HAL_InitTick>
}
 8003666:	bcc0      	pop	{r6, r7}
 8003668:	46b9      	mov	r9, r7
 800366a:	46b0      	mov	r8, r6
 800366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	6833      	ldr	r3, [r6, #0]
 8003670:	4393      	bics	r3, r2
 8003672:	430b      	orrs	r3, r1
 8003674:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003676:	f7fe fd03 	bl	8002080 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800367a:	2307      	movs	r3, #7
 800367c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367e:	4b24      	ldr	r3, [pc, #144]	@ (8003710 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003680:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003682:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003684:	4642      	mov	r2, r8
 8003686:	6833      	ldr	r3, [r6, #0]
 8003688:	4013      	ands	r3, r2
 800368a:	42a3      	cmp	r3, r4
 800368c:	d100      	bne.n	8003690 <HAL_RCC_ClockConfig+0xfc>
 800368e:	e78f      	b.n	80035b0 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003690:	f7fe fcf6 	bl	8002080 <HAL_GetTick>
 8003694:	1bc0      	subs	r0, r0, r7
 8003696:	4548      	cmp	r0, r9
 8003698:	d9f4      	bls.n	8003684 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 800369a:	2003      	movs	r0, #3
 800369c:	e7e3      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800369e:	4a1a      	ldr	r2, [pc, #104]	@ (8003708 <HAL_RCC_ClockConfig+0x174>)
 80036a0:	491f      	ldr	r1, [pc, #124]	@ (8003720 <HAL_RCC_ClockConfig+0x18c>)
 80036a2:	6893      	ldr	r3, [r2, #8]
 80036a4:	400b      	ands	r3, r1
 80036a6:	68e9      	ldr	r1, [r5, #12]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	e7c9      	b.n	8003642 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	6833      	ldr	r3, [r6, #0]
 80036b0:	4393      	bics	r3, r2
 80036b2:	4323      	orrs	r3, r4
 80036b4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80036b6:	f7fe fce3 	bl	8002080 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036ba:	2307      	movs	r3, #7
 80036bc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036be:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80036c0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c2:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80036c4:	4642      	mov	r2, r8
 80036c6:	6833      	ldr	r3, [r6, #0]
 80036c8:	4013      	ands	r3, r2
 80036ca:	42a3      	cmp	r3, r4
 80036cc:	d0b6      	beq.n	800363c <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ce:	f7fe fcd7 	bl	8002080 <HAL_GetTick>
 80036d2:	1bc0      	subs	r0, r0, r7
 80036d4:	4548      	cmp	r0, r9
 80036d6:	d9f5      	bls.n	80036c4 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80036d8:	2003      	movs	r0, #3
 80036da:	e7c4      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	0392      	lsls	r2, r2, #14
 80036e0:	d500      	bpl.n	80036e4 <HAL_RCC_ClockConfig+0x150>
 80036e2:	e78b      	b.n	80035fc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80036e4:	2001      	movs	r0, #1
 80036e6:	e7be      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036ee:	0792      	lsls	r2, r2, #30
 80036f0:	d500      	bpl.n	80036f4 <HAL_RCC_ClockConfig+0x160>
 80036f2:	e783      	b.n	80035fc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80036f4:	2001      	movs	r0, #1
 80036f6:	e7b6      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036f8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80036fa:	0792      	lsls	r2, r2, #30
 80036fc:	d500      	bpl.n	8003700 <HAL_RCC_ClockConfig+0x16c>
 80036fe:	e77d      	b.n	80035fc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 8003700:	2001      	movs	r0, #1
 8003702:	e7b0      	b.n	8003666 <HAL_RCC_ClockConfig+0xd2>
 8003704:	40022000 	.word	0x40022000
 8003708:	40021000 	.word	0x40021000
 800370c:	fffff0ff 	.word	0xfffff0ff
 8003710:	00001388 	.word	0x00001388
 8003714:	080060a0 	.word	0x080060a0
 8003718:	20000004 	.word	0x20000004
 800371c:	2000000c 	.word	0x2000000c
 8003720:	ffff8fff 	.word	0xffff8fff

08003724 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003726:	4907      	ldr	r1, [pc, #28]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800372a:	4a07      	ldr	r2, [pc, #28]	@ (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800372c:	045b      	lsls	r3, r3, #17
 800372e:	0f5b      	lsrs	r3, r3, #29
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	585b      	ldr	r3, [r3, r1]
 8003734:	211f      	movs	r1, #31
 8003736:	6810      	ldr	r0, [r2, #0]
 8003738:	400b      	ands	r3, r1
 800373a:	40d8      	lsrs	r0, r3
}
 800373c:	4770      	bx	lr
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	40021000 	.word	0x40021000
 8003744:	08006080 	.word	0x08006080
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800374e:	46d6      	mov	lr, sl
 8003750:	464f      	mov	r7, r9
 8003752:	4646      	mov	r6, r8
 8003754:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003756:	6803      	ldr	r3, [r0, #0]
{
 8003758:	0004      	movs	r4, r0
 800375a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800375c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800375e:	039a      	lsls	r2, r3, #14
 8003760:	d552      	bpl.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xbc>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	2280      	movs	r2, #128	@ 0x80
 8003764:	4b69      	ldr	r3, [pc, #420]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003766:	0552      	lsls	r2, r2, #21
 8003768:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800376a:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376c:	4211      	tst	r1, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003770:	e0a4      	b.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003772:	2780      	movs	r7, #128	@ 0x80
 8003774:	4d66      	ldr	r5, [pc, #408]	@ (8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003776:	007f      	lsls	r7, r7, #1
 8003778:	682b      	ldr	r3, [r5, #0]
 800377a:	433b      	orrs	r3, r7
 800377c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800377e:	f7fe fc7f 	bl	8002080 <HAL_GetTick>
 8003782:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003784:	e005      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003786:	f7fe fc7b 	bl	8002080 <HAL_GetTick>
 800378a:	1b80      	subs	r0, r0, r6
 800378c:	2802      	cmp	r0, #2
 800378e:	d900      	bls.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003790:	e09e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003792:	682b      	ldr	r3, [r5, #0]
 8003794:	423b      	tst	r3, r7
 8003796:	d0f6      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003798:	4d5c      	ldr	r5, [pc, #368]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800379a:	23c0      	movs	r3, #192	@ 0xc0
 800379c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037a4:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037a6:	421a      	tst	r2, r3
 80037a8:	d023      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80037aa:	4288      	cmp	r0, r1
 80037ac:	d021      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ae:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037b0:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b2:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 80037b4:	0240      	lsls	r0, r0, #9
 80037b6:	4330      	orrs	r0, r6
 80037b8:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037ba:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037bc:	4a55      	ldr	r2, [pc, #340]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037be:	4e56      	ldr	r6, [pc, #344]	@ (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037c0:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c2:	4030      	ands	r0, r6
 80037c4:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c6:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037c8:	07db      	lsls	r3, r3, #31
 80037ca:	d512      	bpl.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fc58 	bl	8002080 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d0:	2302      	movs	r3, #2
 80037d2:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d4:	4b51      	ldr	r3, [pc, #324]	@ (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
        tickstart = HAL_GetTick();
 80037d6:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d8:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037dc:	f7fe fc50 	bl	8002080 <HAL_GetTick>
 80037e0:	1b80      	subs	r0, r0, r6
 80037e2:	4548      	cmp	r0, r9
 80037e4:	d900      	bls.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80037e6:	e073      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x184>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037e8:	4642      	mov	r2, r8
 80037ea:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80037ec:	421a      	tst	r2, r3
 80037ee:	d0f5      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037f2:	4a46      	ldr	r2, [pc, #280]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80037f4:	4847      	ldr	r0, [pc, #284]	@ (8003914 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80037f6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80037f8:	4003      	ands	r3, r0
 80037fa:	430b      	orrs	r3, r1
 80037fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037fe:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003800:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003802:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8003804:	2a01      	cmp	r2, #1
 8003806:	d068      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x18e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003808:	07da      	lsls	r2, r3, #31
 800380a:	d506      	bpl.n	800381a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800380c:	2503      	movs	r5, #3
 800380e:	493f      	ldr	r1, [pc, #252]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003810:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003812:	43aa      	bics	r2, r5
 8003814:	6865      	ldr	r5, [r4, #4]
 8003816:	432a      	orrs	r2, r5
 8003818:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381a:	06da      	lsls	r2, r3, #27
 800381c:	d506      	bpl.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381e:	493b      	ldr	r1, [pc, #236]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003820:	4d3f      	ldr	r5, [pc, #252]	@ (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003822:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003824:	402a      	ands	r2, r5
 8003826:	68a5      	ldr	r5, [r4, #8]
 8003828:	432a      	orrs	r2, r5
 800382a:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800382c:	059a      	lsls	r2, r3, #22
 800382e:	d506      	bpl.n	800383e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003830:	4936      	ldr	r1, [pc, #216]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003832:	4d3c      	ldr	r5, [pc, #240]	@ (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003834:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003836:	402a      	ands	r2, r5
 8003838:	6965      	ldr	r5, [r4, #20]
 800383a:	432a      	orrs	r2, r5
 800383c:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800383e:	055a      	lsls	r2, r3, #21
 8003840:	d506      	bpl.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003842:	4932      	ldr	r1, [pc, #200]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003844:	4d38      	ldr	r5, [pc, #224]	@ (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003846:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003848:	402a      	ands	r2, r5
 800384a:	69a5      	ldr	r5, [r4, #24]
 800384c:	432a      	orrs	r2, r5
 800384e:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003850:	069a      	lsls	r2, r3, #26
 8003852:	d506      	bpl.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003854:	492d      	ldr	r1, [pc, #180]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003856:	4d35      	ldr	r5, [pc, #212]	@ (800392c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003858:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800385a:	402a      	ands	r2, r5
 800385c:	68e5      	ldr	r5, [r4, #12]
 800385e:	432a      	orrs	r2, r5
 8003860:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003862:	045a      	lsls	r2, r3, #17
 8003864:	d50a      	bpl.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003866:	4929      	ldr	r1, [pc, #164]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003868:	69e5      	ldr	r5, [r4, #28]
 800386a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	0892      	lsrs	r2, r2, #2
 8003870:	432a      	orrs	r2, r5
 8003872:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003874:	2280      	movs	r2, #128	@ 0x80
 8003876:	05d2      	lsls	r2, r2, #23
 8003878:	4295      	cmp	r5, r2
 800387a:	d034      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800387c:	029a      	lsls	r2, r3, #10
 800387e:	d50a      	bpl.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003880:	4922      	ldr	r1, [pc, #136]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003882:	4e2b      	ldr	r6, [pc, #172]	@ (8003930 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003884:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003886:	6a25      	ldr	r5, [r4, #32]
 8003888:	4032      	ands	r2, r6
 800388a:	432a      	orrs	r2, r5
 800388c:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800388e:	2280      	movs	r2, #128	@ 0x80
 8003890:	03d2      	lsls	r2, r2, #15
 8003892:	4295      	cmp	r5, r2
 8003894:	d02d      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003896:	051b      	lsls	r3, r3, #20
 8003898:	d50a      	bpl.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800389a:	4a1c      	ldr	r2, [pc, #112]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800389c:	6921      	ldr	r1, [r4, #16]
 800389e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 80038a0:	4c24      	ldr	r4, [pc, #144]	@ (8003934 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80038a2:	4023      	ands	r3, r4
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	01db      	lsls	r3, r3, #7
 80038ac:	4299      	cmp	r1, r3
 80038ae:	d026      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80038b0:	b002      	add	sp, #8
 80038b2:	bce0      	pop	{r5, r6, r7}
 80038b4:	46ba      	mov	sl, r7
 80038b6:	46b1      	mov	r9, r6
 80038b8:	46a8      	mov	r8, r5
 80038ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80038be:	4311      	orrs	r1, r2
 80038c0:	63d9      	str	r1, [r3, #60]	@ 0x3c
 80038c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c4:	4013      	ands	r3, r2
 80038c6:	9301      	str	r3, [sp, #4]
 80038c8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80038ca:	2301      	movs	r3, #1
 80038cc:	469a      	mov	sl, r3
 80038ce:	e750      	b.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 80038d0:	4652      	mov	r2, sl
        status = ret;
 80038d2:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d4:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80038d6:	2a01      	cmp	r2, #1
 80038d8:	d196      	bne.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	490c      	ldr	r1, [pc, #48]	@ (800390c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80038dc:	4d16      	ldr	r5, [pc, #88]	@ (8003938 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80038de:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80038e0:	402a      	ands	r2, r5
 80038e2:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80038e4:	e790      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038e6:	2280      	movs	r2, #128	@ 0x80
 80038e8:	68cd      	ldr	r5, [r1, #12]
 80038ea:	0252      	lsls	r2, r2, #9
 80038ec:	432a      	orrs	r2, r5
 80038ee:	60ca      	str	r2, [r1, #12]
 80038f0:	e7c4      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80038f2:	2280      	movs	r2, #128	@ 0x80
 80038f4:	68cd      	ldr	r5, [r1, #12]
 80038f6:	0452      	lsls	r2, r2, #17
 80038f8:	432a      	orrs	r2, r5
 80038fa:	60ca      	str	r2, [r1, #12]
 80038fc:	e7cb      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80038fe:	2380      	movs	r3, #128	@ 0x80
 8003900:	68d1      	ldr	r1, [r2, #12]
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	430b      	orrs	r3, r1
 8003906:	60d3      	str	r3, [r2, #12]
  return status;
 8003908:	e7d2      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x164>
 800390a:	46c0      	nop			@ (mov r8, r8)
 800390c:	40021000 	.word	0x40021000
 8003910:	40007000 	.word	0x40007000
 8003914:	fffffcff 	.word	0xfffffcff
 8003918:	fffeffff 	.word	0xfffeffff
 800391c:	00001388 	.word	0x00001388
 8003920:	fffff3ff 	.word	0xfffff3ff
 8003924:	fff3ffff 	.word	0xfff3ffff
 8003928:	ffcfffff 	.word	0xffcfffff
 800392c:	ffffcfff 	.word	0xffffcfff
 8003930:	ffbfffff 	.word	0xffbfffff
 8003934:	ffff3fff 	.word	0xffff3fff
 8003938:	efffffff 	.word	0xefffffff

0800393c <HAL_TIM_OC_MspInit>:
/**
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 800393c:	4770      	bx	lr
 800393e:	46c0      	nop			@ (mov r8, r8)

08003940 <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8003940:	4770      	bx	lr
 8003942:	46c0      	nop			@ (mov r8, r8)

08003944 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003944:	4770      	bx	lr
 8003946:	46c0      	nop			@ (mov r8, r8)

08003948 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003948:	4770      	bx	lr
 800394a:	46c0      	nop			@ (mov r8, r8)

0800394c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800394c:	4770      	bx	lr
 800394e:	46c0      	nop			@ (mov r8, r8)

08003950 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003950:	4770      	bx	lr
 8003952:	46c0      	nop			@ (mov r8, r8)

08003954 <HAL_TIM_IC_CaptureHalfCpltCallback>:
/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003954:	4770      	bx	lr
 8003956:	46c0      	nop			@ (mov r8, r8)

08003958 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003958:	4770      	bx	lr
 800395a:	46c0      	nop			@ (mov r8, r8)

0800395c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 800395c:	4770      	bx	lr
 800395e:	46c0      	nop			@ (mov r8, r8)

08003960 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003960:	4770      	bx	lr
 8003962:	46c0      	nop			@ (mov r8, r8)

08003964 <HAL_TIM_TriggerHalfCpltCallback>:
/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003964:	4770      	bx	lr
 8003966:	46c0      	nop			@ (mov r8, r8)

08003968 <HAL_TIM_ErrorCallback>:
/**
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8003968:	4770      	bx	lr
 800396a:	46c0      	nop			@ (mov r8, r8)

0800396c <HAL_TIM_Base_Init>:
{
 800396c:	b570      	push	{r4, r5, r6, lr}
 800396e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003970:	d100      	bne.n	8003974 <HAL_TIM_Base_Init+0x8>
 8003972:	e093      	b.n	8003a9c <HAL_TIM_Base_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003974:	233d      	movs	r3, #61	@ 0x3d
 8003976:	5cc3      	ldrb	r3, [r0, r3]
 8003978:	b2da      	uxtb	r2, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d130      	bne.n	80039e0 <HAL_TIM_Base_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 800397e:	333c      	adds	r3, #60	@ 0x3c
 8003980:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003982:	2284      	movs	r2, #132	@ 0x84
 8003984:	4b48      	ldr	r3, [pc, #288]	@ (8003aa8 <HAL_TIM_Base_Init+0x13c>)
 8003986:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003988:	4b48      	ldr	r3, [pc, #288]	@ (8003aac <HAL_TIM_Base_Init+0x140>)
 800398a:	3204      	adds	r2, #4
 800398c:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800398e:	4b48      	ldr	r3, [pc, #288]	@ (8003ab0 <HAL_TIM_Base_Init+0x144>)
 8003990:	3204      	adds	r2, #4
 8003992:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003994:	4b47      	ldr	r3, [pc, #284]	@ (8003ab4 <HAL_TIM_Base_Init+0x148>)
 8003996:	3204      	adds	r2, #4
 8003998:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <HAL_TIM_Base_Init+0x14c>)
 800399c:	3204      	adds	r2, #4
 800399e:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80039a0:	4b46      	ldr	r3, [pc, #280]	@ (8003abc <HAL_TIM_Base_Init+0x150>)
 80039a2:	3204      	adds	r2, #4
 80039a4:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_TIM_Base_Init+0x154>)
 80039a8:	3204      	adds	r2, #4
 80039aa:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80039ac:	4b45      	ldr	r3, [pc, #276]	@ (8003ac4 <HAL_TIM_Base_Init+0x158>)
 80039ae:	3204      	adds	r2, #4
 80039b0:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80039b2:	4b45      	ldr	r3, [pc, #276]	@ (8003ac8 <HAL_TIM_Base_Init+0x15c>)
 80039b4:	3204      	adds	r2, #4
 80039b6:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80039b8:	4b44      	ldr	r3, [pc, #272]	@ (8003acc <HAL_TIM_Base_Init+0x160>)
 80039ba:	3204      	adds	r2, #4
 80039bc:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80039be:	4b44      	ldr	r3, [pc, #272]	@ (8003ad0 <HAL_TIM_Base_Init+0x164>)
 80039c0:	3204      	adds	r2, #4
 80039c2:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80039c4:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <HAL_TIM_Base_Init+0x168>)
 80039c6:	3204      	adds	r2, #4
 80039c8:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80039ca:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <HAL_TIM_Base_Init+0x16c>)
 80039cc:	3204      	adds	r2, #4
 80039ce:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80039d0:	4b42      	ldr	r3, [pc, #264]	@ (8003adc <HAL_TIM_Base_Init+0x170>)
 80039d2:	3204      	adds	r2, #4
 80039d4:	5083      	str	r3, [r0, r2]
    if (htim->Base_MspInitCallback == NULL)
 80039d6:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d061      	beq.n	8003aa0 <HAL_TIM_Base_Init+0x134>
    htim->Base_MspInitCallback(htim);
 80039dc:	0020      	movs	r0, r4
 80039de:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	233d      	movs	r3, #61	@ 0x3d
 80039e2:	2202      	movs	r2, #2
 80039e4:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e8:	4e3d      	ldr	r6, [pc, #244]	@ (8003ae0 <HAL_TIM_Base_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 80039ea:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039ec:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80039ee:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039f0:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f2:	42b3      	cmp	r3, r6
 80039f4:	d041      	beq.n	8003a7a <HAL_TIM_Base_Init+0x10e>
 80039f6:	2680      	movs	r6, #128	@ 0x80
 80039f8:	05f6      	lsls	r6, r6, #23
 80039fa:	42b3      	cmp	r3, r6
 80039fc:	d034      	beq.n	8003a68 <HAL_TIM_Base_Init+0xfc>
 80039fe:	4e39      	ldr	r6, [pc, #228]	@ (8003ae4 <HAL_TIM_Base_Init+0x178>)
 8003a00:	42b3      	cmp	r3, r6
 8003a02:	d031      	beq.n	8003a68 <HAL_TIM_Base_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a04:	4e38      	ldr	r6, [pc, #224]	@ (8003ae8 <HAL_TIM_Base_Init+0x17c>)
 8003a06:	42b3      	cmp	r3, r6
 8003a08:	d032      	beq.n	8003a70 <HAL_TIM_Base_Init+0x104>
 8003a0a:	4e38      	ldr	r6, [pc, #224]	@ (8003aec <HAL_TIM_Base_Init+0x180>)
 8003a0c:	42b3      	cmp	r3, r6
 8003a0e:	d038      	beq.n	8003a82 <HAL_TIM_Base_Init+0x116>
 8003a10:	4e37      	ldr	r6, [pc, #220]	@ (8003af0 <HAL_TIM_Base_Init+0x184>)
 8003a12:	42b3      	cmp	r3, r6
 8003a14:	d035      	beq.n	8003a82 <HAL_TIM_Base_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a16:	2680      	movs	r6, #128	@ 0x80
 8003a18:	43b2      	bics	r2, r6
 8003a1a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003a1c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a20:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003a22:	2201      	movs	r2, #1
 8003a24:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a26:	6919      	ldr	r1, [r3, #16]
 8003a28:	420a      	tst	r2, r1
 8003a2a:	d002      	beq.n	8003a32 <HAL_TIM_Base_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a2c:	6919      	ldr	r1, [r3, #16]
 8003a2e:	4391      	bics	r1, r2
 8003a30:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a32:	2301      	movs	r3, #1
 8003a34:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8003a36:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	3a0a      	subs	r2, #10
 8003a3c:	54a3      	strb	r3, [r4, r2]
 8003a3e:	3201      	adds	r2, #1
 8003a40:	54a3      	strb	r3, [r4, r2]
 8003a42:	3201      	adds	r2, #1
 8003a44:	54a3      	strb	r3, [r4, r2]
 8003a46:	3201      	adds	r2, #1
 8003a48:	54a3      	strb	r3, [r4, r2]
 8003a4a:	3201      	adds	r2, #1
 8003a4c:	54a3      	strb	r3, [r4, r2]
 8003a4e:	3201      	adds	r2, #1
 8003a50:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a52:	3201      	adds	r2, #1
 8003a54:	54a3      	strb	r3, [r4, r2]
 8003a56:	3201      	adds	r2, #1
 8003a58:	54a3      	strb	r3, [r4, r2]
 8003a5a:	3201      	adds	r2, #1
 8003a5c:	54a3      	strb	r3, [r4, r2]
 8003a5e:	3201      	adds	r2, #1
 8003a60:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003a62:	3a0a      	subs	r2, #10
 8003a64:	54a3      	strb	r3, [r4, r2]
}
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a68:	2670      	movs	r6, #112	@ 0x70
 8003a6a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003a6c:	68a6      	ldr	r6, [r4, #8]
 8003a6e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a70:	4e20      	ldr	r6, [pc, #128]	@ (8003af4 <HAL_TIM_Base_Init+0x188>)
 8003a72:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a74:	6926      	ldr	r6, [r4, #16]
 8003a76:	4332      	orrs	r2, r6
 8003a78:	e7cd      	b.n	8003a16 <HAL_TIM_Base_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a7a:	2670      	movs	r6, #112	@ 0x70
 8003a7c:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003a7e:	68a6      	ldr	r6, [r4, #8]
 8003a80:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	4e1c      	ldr	r6, [pc, #112]	@ (8003af4 <HAL_TIM_Base_Init+0x188>)
 8003a84:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a86:	6926      	ldr	r6, [r4, #16]
 8003a88:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a8a:	2680      	movs	r6, #128	@ 0x80
 8003a8c:	43b2      	bics	r2, r6
 8003a8e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003a90:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a92:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a94:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003a96:	6962      	ldr	r2, [r4, #20]
 8003a98:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a9a:	e7c2      	b.n	8003a22 <HAL_TIM_Base_Init+0xb6>
    return HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	e7e2      	b.n	8003a66 <HAL_TIM_Base_Init+0xfa>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <HAL_TIM_Base_Init+0x18c>)
 8003aa2:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8003aa4:	e79a      	b.n	80039dc <HAL_TIM_Base_Init+0x70>
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	08003945 	.word	0x08003945
 8003aac:	08003949 	.word	0x08003949
 8003ab0:	08003961 	.word	0x08003961
 8003ab4:	08003965 	.word	0x08003965
 8003ab8:	08003951 	.word	0x08003951
 8003abc:	08003955 	.word	0x08003955
 8003ac0:	0800394d 	.word	0x0800394d
 8003ac4:	08003959 	.word	0x08003959
 8003ac8:	0800395d 	.word	0x0800395d
 8003acc:	08003969 	.word	0x08003969
 8003ad0:	080051d9 	.word	0x080051d9
 8003ad4:	080051dd 	.word	0x080051dd
 8003ad8:	080051e1 	.word	0x080051e1
 8003adc:	080051e5 	.word	0x080051e5
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40002000 	.word	0x40002000
 8003aec:	40014400 	.word	0x40014400
 8003af0:	40014800 	.word	0x40014800
 8003af4:	fffffcff 	.word	0xfffffcff
 8003af8:	0800174d 	.word	0x0800174d

08003afc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003afc:	213d      	movs	r1, #61	@ 0x3d
{
 8003afe:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8003b00:	5c42      	ldrb	r2, [r0, r1]
{
 8003b02:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8003b04:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8003b06:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003b08:	2a01      	cmp	r2, #1
 8003b0a:	d110      	bne.n	8003b2e <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b0c:	3201      	adds	r2, #1
 8003b0e:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	@ (8003b4c <HAL_TIM_Base_Start+0x50>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <HAL_TIM_Base_Start+0x34>
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	05d2      	lsls	r2, r2, #23
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <HAL_TIM_Base_Start+0x34>
 8003b20:	4a0b      	ldr	r2, [pc, #44]	@ (8003b50 <HAL_TIM_Base_Start+0x54>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d004      	beq.n	8003b30 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	4322      	orrs	r2, r4
 8003b2a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b2c:	2000      	movs	r0, #0
}
 8003b2e:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	4908      	ldr	r1, [pc, #32]	@ (8003b54 <HAL_TIM_Base_Start+0x58>)
 8003b34:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b36:	2a06      	cmp	r2, #6
 8003b38:	d0f8      	beq.n	8003b2c <HAL_TIM_Base_Start+0x30>
 8003b3a:	3907      	subs	r1, #7
 8003b3c:	428a      	cmp	r2, r1
 8003b3e:	d0f5      	beq.n	8003b2c <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8003b40:	2101      	movs	r1, #1
 8003b42:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003b44:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e7f0      	b.n	8003b2e <HAL_TIM_Base_Start+0x32>
 8003b4c:	40012c00 	.word	0x40012c00
 8003b50:	40000400 	.word	0x40000400
 8003b54:	00010007 	.word	0x00010007

08003b58 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003b58:	213d      	movs	r1, #61	@ 0x3d
{
 8003b5a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 8003b5c:	5c42      	ldrb	r2, [r0, r1]
{
 8003b5e:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8003b60:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8003b62:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003b64:	2a01      	cmp	r2, #1
 8003b66:	d113      	bne.n	8003b90 <HAL_TIM_Base_Start_IT+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	3201      	adds	r2, #1
 8003b6a:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4322      	orrs	r2, r4
 8003b72:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b74:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <HAL_TIM_Base_Start_IT+0x58>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00b      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0x3a>
 8003b7a:	2280      	movs	r2, #128	@ 0x80
 8003b7c:	05d2      	lsls	r2, r2, #23
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0x3a>
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <HAL_TIM_Base_Start_IT+0x5c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	4322      	orrs	r2, r4
 8003b8c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003b8e:	2000      	movs	r0, #0
}
 8003b90:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b92:	689a      	ldr	r2, [r3, #8]
 8003b94:	4908      	ldr	r1, [pc, #32]	@ (8003bb8 <HAL_TIM_Base_Start_IT+0x60>)
 8003b96:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b98:	2a06      	cmp	r2, #6
 8003b9a:	d0f8      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x36>
 8003b9c:	3907      	subs	r1, #7
 8003b9e:	428a      	cmp	r2, r1
 8003ba0:	d0f5      	beq.n	8003b8e <HAL_TIM_Base_Start_IT+0x36>
      __HAL_TIM_ENABLE(htim);
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003ba6:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e7f0      	b.n	8003b90 <HAL_TIM_Base_Start_IT+0x38>
 8003bae:	46c0      	nop			@ (mov r8, r8)
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	00010007 	.word	0x00010007

08003bbc <HAL_TIM_OC_Init>:
{
 8003bbc:	b570      	push	{r4, r5, r6, lr}
 8003bbe:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003bc0:	d100      	bne.n	8003bc4 <HAL_TIM_OC_Init+0x8>
 8003bc2:	e093      	b.n	8003cec <HAL_TIM_OC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc4:	233d      	movs	r3, #61	@ 0x3d
 8003bc6:	5cc3      	ldrb	r3, [r0, r3]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d130      	bne.n	8003c30 <HAL_TIM_OC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8003bce:	333c      	adds	r3, #60	@ 0x3c
 8003bd0:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003bd2:	2284      	movs	r2, #132	@ 0x84
 8003bd4:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <HAL_TIM_OC_Init+0x13c>)
 8003bd6:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003bd8:	4b48      	ldr	r3, [pc, #288]	@ (8003cfc <HAL_TIM_OC_Init+0x140>)
 8003bda:	3204      	adds	r2, #4
 8003bdc:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003bde:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <HAL_TIM_OC_Init+0x144>)
 8003be0:	3204      	adds	r2, #4
 8003be2:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003be4:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_TIM_OC_Init+0x148>)
 8003be6:	3204      	adds	r2, #4
 8003be8:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003bea:	4b47      	ldr	r3, [pc, #284]	@ (8003d08 <HAL_TIM_OC_Init+0x14c>)
 8003bec:	3204      	adds	r2, #4
 8003bee:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003bf0:	4b46      	ldr	r3, [pc, #280]	@ (8003d0c <HAL_TIM_OC_Init+0x150>)
 8003bf2:	3204      	adds	r2, #4
 8003bf4:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003bf6:	4b46      	ldr	r3, [pc, #280]	@ (8003d10 <HAL_TIM_OC_Init+0x154>)
 8003bf8:	3204      	adds	r2, #4
 8003bfa:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003bfc:	4b45      	ldr	r3, [pc, #276]	@ (8003d14 <HAL_TIM_OC_Init+0x158>)
 8003bfe:	3204      	adds	r2, #4
 8003c00:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003c02:	4b45      	ldr	r3, [pc, #276]	@ (8003d18 <HAL_TIM_OC_Init+0x15c>)
 8003c04:	3204      	adds	r2, #4
 8003c06:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003c08:	4b44      	ldr	r3, [pc, #272]	@ (8003d1c <HAL_TIM_OC_Init+0x160>)
 8003c0a:	3204      	adds	r2, #4
 8003c0c:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003c0e:	4b44      	ldr	r3, [pc, #272]	@ (8003d20 <HAL_TIM_OC_Init+0x164>)
 8003c10:	3204      	adds	r2, #4
 8003c12:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003c14:	4b43      	ldr	r3, [pc, #268]	@ (8003d24 <HAL_TIM_OC_Init+0x168>)
 8003c16:	3204      	adds	r2, #4
 8003c18:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003c1a:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_TIM_OC_Init+0x16c>)
 8003c1c:	3204      	adds	r2, #4
 8003c1e:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003c20:	4b42      	ldr	r3, [pc, #264]	@ (8003d2c <HAL_TIM_OC_Init+0x170>)
 8003c22:	3204      	adds	r2, #4
 8003c24:	5083      	str	r3, [r0, r2]
    if (htim->OC_MspInitCallback == NULL)
 8003c26:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d061      	beq.n	8003cf0 <HAL_TIM_OC_Init+0x134>
    htim->OC_MspInitCallback(htim);
 8003c2c:	0020      	movs	r0, r4
 8003c2e:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	233d      	movs	r3, #61	@ 0x3d
 8003c32:	2202      	movs	r2, #2
 8003c34:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c36:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	4e3d      	ldr	r6, [pc, #244]	@ (8003d30 <HAL_TIM_OC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8003c3a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c3c:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8003c3e:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c40:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c42:	42b3      	cmp	r3, r6
 8003c44:	d041      	beq.n	8003cca <HAL_TIM_OC_Init+0x10e>
 8003c46:	2680      	movs	r6, #128	@ 0x80
 8003c48:	05f6      	lsls	r6, r6, #23
 8003c4a:	42b3      	cmp	r3, r6
 8003c4c:	d034      	beq.n	8003cb8 <HAL_TIM_OC_Init+0xfc>
 8003c4e:	4e39      	ldr	r6, [pc, #228]	@ (8003d34 <HAL_TIM_OC_Init+0x178>)
 8003c50:	42b3      	cmp	r3, r6
 8003c52:	d031      	beq.n	8003cb8 <HAL_TIM_OC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c54:	4e38      	ldr	r6, [pc, #224]	@ (8003d38 <HAL_TIM_OC_Init+0x17c>)
 8003c56:	42b3      	cmp	r3, r6
 8003c58:	d032      	beq.n	8003cc0 <HAL_TIM_OC_Init+0x104>
 8003c5a:	4e38      	ldr	r6, [pc, #224]	@ (8003d3c <HAL_TIM_OC_Init+0x180>)
 8003c5c:	42b3      	cmp	r3, r6
 8003c5e:	d038      	beq.n	8003cd2 <HAL_TIM_OC_Init+0x116>
 8003c60:	4e37      	ldr	r6, [pc, #220]	@ (8003d40 <HAL_TIM_OC_Init+0x184>)
 8003c62:	42b3      	cmp	r3, r6
 8003c64:	d035      	beq.n	8003cd2 <HAL_TIM_OC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c66:	2680      	movs	r6, #128	@ 0x80
 8003c68:	43b2      	bics	r2, r6
 8003c6a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003c6c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c6e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003c70:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003c72:	2201      	movs	r2, #1
 8003c74:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c76:	6919      	ldr	r1, [r3, #16]
 8003c78:	420a      	tst	r2, r1
 8003c7a:	d002      	beq.n	8003c82 <HAL_TIM_OC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c7c:	6919      	ldr	r1, [r3, #16]
 8003c7e:	4391      	bics	r1, r2
 8003c80:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c82:	2301      	movs	r3, #1
 8003c84:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8003c86:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c88:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	3a0a      	subs	r2, #10
 8003c8c:	54a3      	strb	r3, [r4, r2]
 8003c8e:	3201      	adds	r2, #1
 8003c90:	54a3      	strb	r3, [r4, r2]
 8003c92:	3201      	adds	r2, #1
 8003c94:	54a3      	strb	r3, [r4, r2]
 8003c96:	3201      	adds	r2, #1
 8003c98:	54a3      	strb	r3, [r4, r2]
 8003c9a:	3201      	adds	r2, #1
 8003c9c:	54a3      	strb	r3, [r4, r2]
 8003c9e:	3201      	adds	r2, #1
 8003ca0:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca2:	3201      	adds	r2, #1
 8003ca4:	54a3      	strb	r3, [r4, r2]
 8003ca6:	3201      	adds	r2, #1
 8003ca8:	54a3      	strb	r3, [r4, r2]
 8003caa:	3201      	adds	r2, #1
 8003cac:	54a3      	strb	r3, [r4, r2]
 8003cae:	3201      	adds	r2, #1
 8003cb0:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003cb2:	3a0a      	subs	r2, #10
 8003cb4:	54a3      	strb	r3, [r4, r2]
}
 8003cb6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb8:	2670      	movs	r6, #112	@ 0x70
 8003cba:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	68a6      	ldr	r6, [r4, #8]
 8003cbe:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc0:	4e20      	ldr	r6, [pc, #128]	@ (8003d44 <HAL_TIM_OC_Init+0x188>)
 8003cc2:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cc4:	6926      	ldr	r6, [r4, #16]
 8003cc6:	4332      	orrs	r2, r6
 8003cc8:	e7cd      	b.n	8003c66 <HAL_TIM_OC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cca:	2670      	movs	r6, #112	@ 0x70
 8003ccc:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003cce:	68a6      	ldr	r6, [r4, #8]
 8003cd0:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd2:	4e1c      	ldr	r6, [pc, #112]	@ (8003d44 <HAL_TIM_OC_Init+0x188>)
 8003cd4:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cd6:	6926      	ldr	r6, [r4, #16]
 8003cd8:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cda:	2680      	movs	r6, #128	@ 0x80
 8003cdc:	43b2      	bics	r2, r6
 8003cde:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003ce0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ce2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ce4:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce6:	6962      	ldr	r2, [r4, #20]
 8003ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cea:	e7c2      	b.n	8003c72 <HAL_TIM_OC_Init+0xb6>
    return HAL_ERROR;
 8003cec:	2001      	movs	r0, #1
 8003cee:	e7e2      	b.n	8003cb6 <HAL_TIM_OC_Init+0xfa>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003cf0:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <HAL_TIM_OC_Init+0x18c>)
 8003cf2:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8003cf4:	e79a      	b.n	8003c2c <HAL_TIM_OC_Init+0x70>
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	08003945 	.word	0x08003945
 8003cfc:	08003949 	.word	0x08003949
 8003d00:	08003961 	.word	0x08003961
 8003d04:	08003965 	.word	0x08003965
 8003d08:	08003951 	.word	0x08003951
 8003d0c:	08003955 	.word	0x08003955
 8003d10:	0800394d 	.word	0x0800394d
 8003d14:	08003959 	.word	0x08003959
 8003d18:	0800395d 	.word	0x0800395d
 8003d1c:	08003969 	.word	0x08003969
 8003d20:	080051d9 	.word	0x080051d9
 8003d24:	080051dd 	.word	0x080051dd
 8003d28:	080051e1 	.word	0x080051e1
 8003d2c:	080051e5 	.word	0x080051e5
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40002000 	.word	0x40002000
 8003d3c:	40014400 	.word	0x40014400
 8003d40:	40014800 	.word	0x40014800
 8003d44:	fffffcff 	.word	0xfffffcff
 8003d48:	0800393d 	.word	0x0800393d

08003d4c <HAL_TIM_OC_Start_IT>:
{
 8003d4c:	b510      	push	{r4, lr}
 8003d4e:	2910      	cmp	r1, #16
 8003d50:	d803      	bhi.n	8003d5a <HAL_TIM_OC_Start_IT+0xe>
 8003d52:	4a39      	ldr	r2, [pc, #228]	@ (8003e38 <HAL_TIM_OC_Start_IT+0xec>)
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	58d3      	ldr	r3, [r2, r3]
 8003d58:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d5a:	2343      	movs	r3, #67	@ 0x43
 8003d5c:	5cc2      	ldrb	r2, [r0, r3]
 8003d5e:	2a01      	cmp	r2, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d62:	2202      	movs	r2, #2
 8003d64:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003d66:	2001      	movs	r0, #1
}
 8003d68:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d6a:	233e      	movs	r3, #62	@ 0x3e
 8003d6c:	5cc2      	ldrb	r2, [r0, r3]
 8003d6e:	2a01      	cmp	r2, #1
 8003d70:	d1f9      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d72:	2402      	movs	r4, #2
 8003d74:	54c4      	strb	r4, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d76:	6803      	ldr	r3, [r0, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	4322      	orrs	r2, r4
 8003d7c:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d7e:	221f      	movs	r2, #31
 8003d80:	4011      	ands	r1, r2
 8003d82:	3a1e      	subs	r2, #30
 8003d84:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003d86:	6a19      	ldr	r1, [r3, #32]
 8003d88:	4391      	bics	r1, r2
 8003d8a:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d8c:	6a19      	ldr	r1, [r3, #32]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d92:	4a2a      	ldr	r2, [pc, #168]	@ (8003e3c <HAL_TIM_OC_Start_IT+0xf0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d049      	beq.n	8003e2c <HAL_TIM_OC_Start_IT+0xe0>
 8003d98:	4a29      	ldr	r2, [pc, #164]	@ (8003e40 <HAL_TIM_OC_Start_IT+0xf4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d040      	beq.n	8003e20 <HAL_TIM_OC_Start_IT+0xd4>
 8003d9e:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <HAL_TIM_OC_Start_IT+0xf8>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d03d      	beq.n	8003e20 <HAL_TIM_OC_Start_IT+0xd4>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	2280      	movs	r2, #128	@ 0x80
 8003da6:	05d2      	lsls	r2, r2, #23
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d002      	beq.n	8003db2 <HAL_TIM_OC_Start_IT+0x66>
 8003dac:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <HAL_TIM_OC_Start_IT+0xfc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_OC_Start_IT+0x76>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4925      	ldr	r1, [pc, #148]	@ (8003e4c <HAL_TIM_OC_Start_IT+0x100>)
 8003db6:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003db8:	2a06      	cmp	r2, #6
 8003dba:	d006      	beq.n	8003dca <HAL_TIM_OC_Start_IT+0x7e>
 8003dbc:	3907      	subs	r1, #7
 8003dbe:	428a      	cmp	r2, r1
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_OC_Start_IT+0x7e>
        __HAL_TIM_ENABLE(htim);
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 8003dca:	2000      	movs	r0, #0
 8003dcc:	e7cc      	b.n	8003d68 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dce:	233f      	movs	r3, #63	@ 0x3f
 8003dd0:	5cc2      	ldrb	r2, [r0, r3]
 8003dd2:	2a01      	cmp	r2, #1
 8003dd4:	d1c7      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003dda:	6803      	ldr	r3, [r0, #0]
 8003ddc:	2004      	movs	r0, #4
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	4302      	orrs	r2, r0
 8003de2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003de4:	e7cb      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003de6:	2340      	movs	r3, #64	@ 0x40
 8003de8:	5cc2      	ldrb	r2, [r0, r3]
 8003dea:	2a01      	cmp	r2, #1
 8003dec:	d1bb      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dee:	2202      	movs	r2, #2
 8003df0:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003df2:	6803      	ldr	r3, [r0, #0]
 8003df4:	2008      	movs	r0, #8
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	4302      	orrs	r2, r0
 8003dfa:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003dfc:	e7bf      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dfe:	2341      	movs	r3, #65	@ 0x41
 8003e00:	5cc2      	ldrb	r2, [r0, r3]
 8003e02:	2a01      	cmp	r2, #1
 8003e04:	d1af      	bne.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e06:	2202      	movs	r2, #2
 8003e08:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e0a:	6803      	ldr	r3, [r0, #0]
 8003e0c:	2010      	movs	r0, #16
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4302      	orrs	r2, r0
 8003e12:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003e14:	e7b3      	b.n	8003d7e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e16:	2342      	movs	r3, #66	@ 0x42
 8003e18:	5cc2      	ldrb	r2, [r0, r3]
 8003e1a:	2a01      	cmp	r2, #1
 8003e1c:	d0a1      	beq.n	8003d62 <HAL_TIM_OC_Start_IT+0x16>
 8003e1e:	e7a2      	b.n	8003d66 <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_MOE_ENABLE(htim);
 8003e20:	2280      	movs	r2, #128	@ 0x80
 8003e22:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003e24:	0212      	lsls	r2, r2, #8
 8003e26:	430a      	orrs	r2, r1
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	e7ca      	b.n	8003dc2 <HAL_TIM_OC_Start_IT+0x76>
      __HAL_TIM_MOE_ENABLE(htim);
 8003e2c:	2280      	movs	r2, #128	@ 0x80
 8003e2e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003e30:	0212      	lsls	r2, r2, #8
 8003e32:	430a      	orrs	r2, r1
 8003e34:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e36:	e7bc      	b.n	8003db2 <HAL_TIM_OC_Start_IT+0x66>
 8003e38:	0800610c 	.word	0x0800610c
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	00010007 	.word	0x00010007

08003e50 <HAL_TIM_OC_Stop_IT>:
{
 8003e50:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8003e52:	2908      	cmp	r1, #8
 8003e54:	d004      	beq.n	8003e60 <HAL_TIM_OC_Stop_IT+0x10>
 8003e56:	d845      	bhi.n	8003ee4 <HAL_TIM_OC_Stop_IT+0x94>
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d052      	beq.n	8003f02 <HAL_TIM_OC_Stop_IT+0xb2>
 8003e5c:	2904      	cmp	r1, #4
 8003e5e:	d14e      	bne.n	8003efe <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003e60:	6805      	ldr	r5, [r0, #0]
 8003e62:	68eb      	ldr	r3, [r5, #12]
 8003e64:	438b      	bics	r3, r1
 8003e66:	60eb      	str	r3, [r5, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e68:	241f      	movs	r4, #31
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	400c      	ands	r4, r1
 8003e6e:	40a2      	lsls	r2, r4
  TIMx->CCER &= ~tmp;
 8003e70:	6a2b      	ldr	r3, [r5, #32]
 8003e72:	4393      	bics	r3, r2
 8003e74:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e76:	6a2b      	ldr	r3, [r5, #32]
 8003e78:	622b      	str	r3, [r5, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_TIM_OC_Stop_IT+0xe8>)
 8003e7c:	429d      	cmp	r5, r3
 8003e7e:	d020      	beq.n	8003ec2 <HAL_TIM_OC_Stop_IT+0x72>
 8003e80:	4b2e      	ldr	r3, [pc, #184]	@ (8003f3c <HAL_TIM_OC_Stop_IT+0xec>)
 8003e82:	429d      	cmp	r5, r3
 8003e84:	d01d      	beq.n	8003ec2 <HAL_TIM_OC_Stop_IT+0x72>
 8003e86:	4b2e      	ldr	r3, [pc, #184]	@ (8003f40 <HAL_TIM_OC_Stop_IT+0xf0>)
 8003e88:	429d      	cmp	r5, r3
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_OC_Stop_IT+0x72>
    __HAL_TIM_DISABLE(htim);
 8003e8c:	6a2a      	ldr	r2, [r5, #32]
 8003e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f44 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003e90:	421a      	tst	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <HAL_TIM_OC_Stop_IT+0x54>
 8003e94:	6a2a      	ldr	r2, [r5, #32]
 8003e96:	4b2c      	ldr	r3, [pc, #176]	@ (8003f48 <HAL_TIM_OC_Stop_IT+0xf8>)
 8003e98:	421a      	tst	r2, r3
 8003e9a:	d103      	bne.n	8003ea4 <HAL_TIM_OC_Stop_IT+0x54>
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	4393      	bics	r3, r2
 8003ea2:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ea4:	2900      	cmp	r1, #0
 8003ea6:	d025      	beq.n	8003ef4 <HAL_TIM_OC_Stop_IT+0xa4>
 8003ea8:	2904      	cmp	r1, #4
 8003eaa:	d035      	beq.n	8003f18 <HAL_TIM_OC_Stop_IT+0xc8>
 8003eac:	2908      	cmp	r1, #8
 8003eae:	d02e      	beq.n	8003f0e <HAL_TIM_OC_Stop_IT+0xbe>
 8003eb0:	290c      	cmp	r1, #12
 8003eb2:	d036      	beq.n	8003f22 <HAL_TIM_OC_Stop_IT+0xd2>
 8003eb4:	2910      	cmp	r1, #16
 8003eb6:	d039      	beq.n	8003f2c <HAL_TIM_OC_Stop_IT+0xdc>
 8003eb8:	2343      	movs	r3, #67	@ 0x43
 8003eba:	2201      	movs	r2, #1
 8003ebc:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e01e      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
      __HAL_TIM_MOE_DISABLE(htim);
 8003ec2:	6a2a      	ldr	r2, [r5, #32]
 8003ec4:	4b1f      	ldr	r3, [pc, #124]	@ (8003f44 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003ec6:	421a      	tst	r2, r3
 8003ec8:	d1e0      	bne.n	8003e8c <HAL_TIM_OC_Stop_IT+0x3c>
 8003eca:	6a2a      	ldr	r2, [r5, #32]
 8003ecc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f48 <HAL_TIM_OC_Stop_IT+0xf8>)
 8003ece:	421a      	tst	r2, r3
 8003ed0:	d1dc      	bne.n	8003e8c <HAL_TIM_OC_Stop_IT+0x3c>
 8003ed2:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f4c <HAL_TIM_OC_Stop_IT+0xfc>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8003eda:	6a2a      	ldr	r2, [r5, #32]
 8003edc:	4b19      	ldr	r3, [pc, #100]	@ (8003f44 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003ede:	421a      	tst	r2, r3
 8003ee0:	d1e0      	bne.n	8003ea4 <HAL_TIM_OC_Stop_IT+0x54>
 8003ee2:	e7d7      	b.n	8003e94 <HAL_TIM_OC_Stop_IT+0x44>
  switch (Channel)
 8003ee4:	290c      	cmp	r1, #12
 8003ee6:	d10a      	bne.n	8003efe <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003ee8:	2210      	movs	r2, #16
 8003eea:	6805      	ldr	r5, [r0, #0]
 8003eec:	68eb      	ldr	r3, [r5, #12]
 8003eee:	4393      	bics	r3, r2
 8003ef0:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8003ef2:	e7b9      	b.n	8003e68 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	233e      	movs	r3, #62	@ 0x3e
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003efa:	2000      	movs	r0, #0
 8003efc:	e000      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
 8003efe:	2001      	movs	r0, #1
}
 8003f00:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f02:	2202      	movs	r2, #2
 8003f04:	6805      	ldr	r5, [r0, #0]
 8003f06:	68eb      	ldr	r3, [r5, #12]
 8003f08:	4393      	bics	r3, r2
 8003f0a:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8003f0c:	e7ac      	b.n	8003e68 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	2340      	movs	r3, #64	@ 0x40
 8003f10:	2201      	movs	r2, #1
 8003f12:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003f14:	2000      	movs	r0, #0
 8003f16:	e7f3      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	233f      	movs	r3, #63	@ 0x3f
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003f1e:	2000      	movs	r0, #0
 8003f20:	e7ee      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	2341      	movs	r3, #65	@ 0x41
 8003f24:	2201      	movs	r2, #1
 8003f26:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003f28:	2000      	movs	r0, #0
 8003f2a:	e7e9      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	2342      	movs	r3, #66	@ 0x42
 8003f2e:	2201      	movs	r2, #1
 8003f30:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003f32:	2000      	movs	r0, #0
 8003f34:	e7e4      	b.n	8003f00 <HAL_TIM_OC_Stop_IT+0xb0>
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	40012c00 	.word	0x40012c00
 8003f3c:	40014400 	.word	0x40014400
 8003f40:	40014800 	.word	0x40014800
 8003f44:	00001111 	.word	0x00001111
 8003f48:	00000444 	.word	0x00000444
 8003f4c:	ffff7fff 	.word	0xffff7fff

08003f50 <HAL_TIM_PWM_Init>:
{
 8003f50:	b570      	push	{r4, r5, r6, lr}
 8003f52:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003f54:	d100      	bne.n	8003f58 <HAL_TIM_PWM_Init+0x8>
 8003f56:	e093      	b.n	8004080 <HAL_TIM_PWM_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f58:	233d      	movs	r3, #61	@ 0x3d
 8003f5a:	5cc3      	ldrb	r3, [r0, r3]
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d130      	bne.n	8003fc4 <HAL_TIM_PWM_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8003f62:	333c      	adds	r3, #60	@ 0x3c
 8003f64:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003f66:	2284      	movs	r2, #132	@ 0x84
 8003f68:	4b48      	ldr	r3, [pc, #288]	@ (800408c <HAL_TIM_PWM_Init+0x13c>)
 8003f6a:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003f6c:	4b48      	ldr	r3, [pc, #288]	@ (8004090 <HAL_TIM_PWM_Init+0x140>)
 8003f6e:	3204      	adds	r2, #4
 8003f70:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003f72:	4b48      	ldr	r3, [pc, #288]	@ (8004094 <HAL_TIM_PWM_Init+0x144>)
 8003f74:	3204      	adds	r2, #4
 8003f76:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003f78:	4b47      	ldr	r3, [pc, #284]	@ (8004098 <HAL_TIM_PWM_Init+0x148>)
 8003f7a:	3204      	adds	r2, #4
 8003f7c:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003f7e:	4b47      	ldr	r3, [pc, #284]	@ (800409c <HAL_TIM_PWM_Init+0x14c>)
 8003f80:	3204      	adds	r2, #4
 8003f82:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003f84:	4b46      	ldr	r3, [pc, #280]	@ (80040a0 <HAL_TIM_PWM_Init+0x150>)
 8003f86:	3204      	adds	r2, #4
 8003f88:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003f8a:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_TIM_PWM_Init+0x154>)
 8003f8c:	3204      	adds	r2, #4
 8003f8e:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003f90:	4b45      	ldr	r3, [pc, #276]	@ (80040a8 <HAL_TIM_PWM_Init+0x158>)
 8003f92:	3204      	adds	r2, #4
 8003f94:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003f96:	4b45      	ldr	r3, [pc, #276]	@ (80040ac <HAL_TIM_PWM_Init+0x15c>)
 8003f98:	3204      	adds	r2, #4
 8003f9a:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003f9c:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <HAL_TIM_PWM_Init+0x160>)
 8003f9e:	3204      	adds	r2, #4
 8003fa0:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003fa2:	4b44      	ldr	r3, [pc, #272]	@ (80040b4 <HAL_TIM_PWM_Init+0x164>)
 8003fa4:	3204      	adds	r2, #4
 8003fa6:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003fa8:	4b43      	ldr	r3, [pc, #268]	@ (80040b8 <HAL_TIM_PWM_Init+0x168>)
 8003faa:	3204      	adds	r2, #4
 8003fac:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003fae:	4b43      	ldr	r3, [pc, #268]	@ (80040bc <HAL_TIM_PWM_Init+0x16c>)
 8003fb0:	3204      	adds	r2, #4
 8003fb2:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003fb4:	4b42      	ldr	r3, [pc, #264]	@ (80040c0 <HAL_TIM_PWM_Init+0x170>)
 8003fb6:	3204      	adds	r2, #4
 8003fb8:	5083      	str	r3, [r0, r2]
    if (htim->PWM_MspInitCallback == NULL)
 8003fba:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d061      	beq.n	8004084 <HAL_TIM_PWM_Init+0x134>
    htim->PWM_MspInitCallback(htim);
 8003fc0:	0020      	movs	r0, r4
 8003fc2:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	233d      	movs	r3, #61	@ 0x3d
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fca:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fcc:	4e3d      	ldr	r6, [pc, #244]	@ (80040c4 <HAL_TIM_PWM_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8003fce:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fd0:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8003fd2:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd6:	42b3      	cmp	r3, r6
 8003fd8:	d041      	beq.n	800405e <HAL_TIM_PWM_Init+0x10e>
 8003fda:	2680      	movs	r6, #128	@ 0x80
 8003fdc:	05f6      	lsls	r6, r6, #23
 8003fde:	42b3      	cmp	r3, r6
 8003fe0:	d034      	beq.n	800404c <HAL_TIM_PWM_Init+0xfc>
 8003fe2:	4e39      	ldr	r6, [pc, #228]	@ (80040c8 <HAL_TIM_PWM_Init+0x178>)
 8003fe4:	42b3      	cmp	r3, r6
 8003fe6:	d031      	beq.n	800404c <HAL_TIM_PWM_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fe8:	4e38      	ldr	r6, [pc, #224]	@ (80040cc <HAL_TIM_PWM_Init+0x17c>)
 8003fea:	42b3      	cmp	r3, r6
 8003fec:	d032      	beq.n	8004054 <HAL_TIM_PWM_Init+0x104>
 8003fee:	4e38      	ldr	r6, [pc, #224]	@ (80040d0 <HAL_TIM_PWM_Init+0x180>)
 8003ff0:	42b3      	cmp	r3, r6
 8003ff2:	d038      	beq.n	8004066 <HAL_TIM_PWM_Init+0x116>
 8003ff4:	4e37      	ldr	r6, [pc, #220]	@ (80040d4 <HAL_TIM_PWM_Init+0x184>)
 8003ff6:	42b3      	cmp	r3, r6
 8003ff8:	d035      	beq.n	8004066 <HAL_TIM_PWM_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ffa:	2680      	movs	r6, #128	@ 0x80
 8003ffc:	43b2      	bics	r2, r6
 8003ffe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004000:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004002:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004004:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004006:	2201      	movs	r2, #1
 8004008:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800400a:	6919      	ldr	r1, [r3, #16]
 800400c:	420a      	tst	r2, r1
 800400e:	d002      	beq.n	8004016 <HAL_TIM_PWM_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004010:	6919      	ldr	r1, [r3, #16]
 8004012:	4391      	bics	r1, r2
 8004014:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004016:	2301      	movs	r3, #1
 8004018:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800401a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800401c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	3a0a      	subs	r2, #10
 8004020:	54a3      	strb	r3, [r4, r2]
 8004022:	3201      	adds	r2, #1
 8004024:	54a3      	strb	r3, [r4, r2]
 8004026:	3201      	adds	r2, #1
 8004028:	54a3      	strb	r3, [r4, r2]
 800402a:	3201      	adds	r2, #1
 800402c:	54a3      	strb	r3, [r4, r2]
 800402e:	3201      	adds	r2, #1
 8004030:	54a3      	strb	r3, [r4, r2]
 8004032:	3201      	adds	r2, #1
 8004034:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004036:	3201      	adds	r2, #1
 8004038:	54a3      	strb	r3, [r4, r2]
 800403a:	3201      	adds	r2, #1
 800403c:	54a3      	strb	r3, [r4, r2]
 800403e:	3201      	adds	r2, #1
 8004040:	54a3      	strb	r3, [r4, r2]
 8004042:	3201      	adds	r2, #1
 8004044:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004046:	3a0a      	subs	r2, #10
 8004048:	54a3      	strb	r3, [r4, r2]
}
 800404a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	2670      	movs	r6, #112	@ 0x70
 800404e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004050:	68a6      	ldr	r6, [r4, #8]
 8004052:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004054:	4e20      	ldr	r6, [pc, #128]	@ (80040d8 <HAL_TIM_PWM_Init+0x188>)
 8004056:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004058:	6926      	ldr	r6, [r4, #16]
 800405a:	4332      	orrs	r2, r6
 800405c:	e7cd      	b.n	8003ffa <HAL_TIM_PWM_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405e:	2670      	movs	r6, #112	@ 0x70
 8004060:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004062:	68a6      	ldr	r6, [r4, #8]
 8004064:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	4e1c      	ldr	r6, [pc, #112]	@ (80040d8 <HAL_TIM_PWM_Init+0x188>)
 8004068:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406a:	6926      	ldr	r6, [r4, #16]
 800406c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800406e:	2680      	movs	r6, #128	@ 0x80
 8004070:	43b2      	bics	r2, r6
 8004072:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004074:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004076:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004078:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800407a:	6962      	ldr	r2, [r4, #20]
 800407c:	631a      	str	r2, [r3, #48]	@ 0x30
 800407e:	e7c2      	b.n	8004006 <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 8004080:	2001      	movs	r0, #1
 8004082:	e7e2      	b.n	800404a <HAL_TIM_PWM_Init+0xfa>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004084:	4b15      	ldr	r3, [pc, #84]	@ (80040dc <HAL_TIM_PWM_Init+0x18c>)
 8004086:	6643      	str	r3, [r0, #100]	@ 0x64
 8004088:	e79a      	b.n	8003fc0 <HAL_TIM_PWM_Init+0x70>
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	08003945 	.word	0x08003945
 8004090:	08003949 	.word	0x08003949
 8004094:	08003961 	.word	0x08003961
 8004098:	08003965 	.word	0x08003965
 800409c:	08003951 	.word	0x08003951
 80040a0:	08003955 	.word	0x08003955
 80040a4:	0800394d 	.word	0x0800394d
 80040a8:	08003959 	.word	0x08003959
 80040ac:	0800395d 	.word	0x0800395d
 80040b0:	08003969 	.word	0x08003969
 80040b4:	080051d9 	.word	0x080051d9
 80040b8:	080051dd 	.word	0x080051dd
 80040bc:	080051e1 	.word	0x080051e1
 80040c0:	080051e5 	.word	0x080051e5
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40002000 	.word	0x40002000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	fffffcff 	.word	0xfffffcff
 80040dc:	080018e5 	.word	0x080018e5

080040e0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 80040e0:	2910      	cmp	r1, #16
 80040e2:	d803      	bhi.n	80040ec <HAL_TIM_PWM_Start+0xc>
 80040e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004198 <HAL_TIM_PWM_Start+0xb8>)
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	58d3      	ldr	r3, [r2, r3]
 80040ea:	469f      	mov	pc, r3
 80040ec:	2343      	movs	r3, #67	@ 0x43
 80040ee:	5cc2      	ldrb	r2, [r0, r3]
 80040f0:	2a01      	cmp	r2, #1
 80040f2:	d12e      	bne.n	8004152 <HAL_TIM_PWM_Start+0x72>
 80040f4:	2202      	movs	r2, #2
 80040f6:	54c2      	strb	r2, [r0, r3]
 80040f8:	221f      	movs	r2, #31
 80040fa:	4011      	ands	r1, r2
 80040fc:	3a1e      	subs	r2, #30
 80040fe:	408a      	lsls	r2, r1
 8004100:	6803      	ldr	r3, [r0, #0]
 8004102:	6a19      	ldr	r1, [r3, #32]
 8004104:	4391      	bics	r1, r2
 8004106:	6219      	str	r1, [r3, #32]
 8004108:	6a19      	ldr	r1, [r3, #32]
 800410a:	430a      	orrs	r2, r1
 800410c:	621a      	str	r2, [r3, #32]
 800410e:	4a23      	ldr	r2, [pc, #140]	@ (800419c <HAL_TIM_PWM_Start+0xbc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d03a      	beq.n	800418a <HAL_TIM_PWM_Start+0xaa>
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_TIM_PWM_Start+0xc0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d031      	beq.n	800417e <HAL_TIM_PWM_Start+0x9e>
 800411a:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <HAL_TIM_PWM_Start+0xc4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d02e      	beq.n	800417e <HAL_TIM_PWM_Start+0x9e>
 8004120:	2280      	movs	r2, #128	@ 0x80
 8004122:	05d2      	lsls	r2, r2, #23
 8004124:	4293      	cmp	r3, r2
 8004126:	d002      	beq.n	800412e <HAL_TIM_PWM_Start+0x4e>
 8004128:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <HAL_TIM_PWM_Start+0xc8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d107      	bne.n	800413e <HAL_TIM_PWM_Start+0x5e>
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	491e      	ldr	r1, [pc, #120]	@ (80041ac <HAL_TIM_PWM_Start+0xcc>)
 8004132:	400a      	ands	r2, r1
 8004134:	2a06      	cmp	r2, #6
 8004136:	d006      	beq.n	8004146 <HAL_TIM_PWM_Start+0x66>
 8004138:	3907      	subs	r1, #7
 800413a:	428a      	cmp	r2, r1
 800413c:	d003      	beq.n	8004146 <HAL_TIM_PWM_Start+0x66>
 800413e:	2101      	movs	r1, #1
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	601a      	str	r2, [r3, #0]
 8004146:	2000      	movs	r0, #0
 8004148:	4770      	bx	lr
 800414a:	233e      	movs	r3, #62	@ 0x3e
 800414c:	5cc2      	ldrb	r2, [r0, r3]
 800414e:	2a01      	cmp	r2, #1
 8004150:	d0d0      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x14>
 8004152:	2001      	movs	r0, #1
 8004154:	e7f8      	b.n	8004148 <HAL_TIM_PWM_Start+0x68>
 8004156:	233f      	movs	r3, #63	@ 0x3f
 8004158:	5cc2      	ldrb	r2, [r0, r3]
 800415a:	2a01      	cmp	r2, #1
 800415c:	d0ca      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x14>
 800415e:	e7f8      	b.n	8004152 <HAL_TIM_PWM_Start+0x72>
 8004160:	2340      	movs	r3, #64	@ 0x40
 8004162:	5cc2      	ldrb	r2, [r0, r3]
 8004164:	2a01      	cmp	r2, #1
 8004166:	d0c5      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x14>
 8004168:	e7f3      	b.n	8004152 <HAL_TIM_PWM_Start+0x72>
 800416a:	2341      	movs	r3, #65	@ 0x41
 800416c:	5cc2      	ldrb	r2, [r0, r3]
 800416e:	2a01      	cmp	r2, #1
 8004170:	d0c0      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x14>
 8004172:	e7ee      	b.n	8004152 <HAL_TIM_PWM_Start+0x72>
 8004174:	2342      	movs	r3, #66	@ 0x42
 8004176:	5cc2      	ldrb	r2, [r0, r3]
 8004178:	2a01      	cmp	r2, #1
 800417a:	d0bb      	beq.n	80040f4 <HAL_TIM_PWM_Start+0x14>
 800417c:	e7e9      	b.n	8004152 <HAL_TIM_PWM_Start+0x72>
 800417e:	2280      	movs	r2, #128	@ 0x80
 8004180:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004182:	0212      	lsls	r2, r2, #8
 8004184:	430a      	orrs	r2, r1
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
 8004188:	e7d9      	b.n	800413e <HAL_TIM_PWM_Start+0x5e>
 800418a:	2280      	movs	r2, #128	@ 0x80
 800418c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800418e:	0212      	lsls	r2, r2, #8
 8004190:	430a      	orrs	r2, r1
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44
 8004194:	e7cb      	b.n	800412e <HAL_TIM_PWM_Start+0x4e>
 8004196:	46c0      	nop			@ (mov r8, r8)
 8004198:	08006150 	.word	0x08006150
 800419c:	40012c00 	.word	0x40012c00
 80041a0:	40014400 	.word	0x40014400
 80041a4:	40014800 	.word	0x40014800
 80041a8:	40000400 	.word	0x40000400
 80041ac:	00010007 	.word	0x00010007

080041b0 <HAL_TIM_IC_Init>:
{
 80041b0:	b570      	push	{r4, r5, r6, lr}
 80041b2:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 80041b4:	d100      	bne.n	80041b8 <HAL_TIM_IC_Init+0x8>
 80041b6:	e093      	b.n	80042e0 <HAL_TIM_IC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041b8:	233d      	movs	r3, #61	@ 0x3d
 80041ba:	5cc3      	ldrb	r3, [r0, r3]
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d130      	bne.n	8004224 <HAL_TIM_IC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 80041c2:	333c      	adds	r3, #60	@ 0x3c
 80041c4:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80041c6:	2284      	movs	r2, #132	@ 0x84
 80041c8:	4b48      	ldr	r3, [pc, #288]	@ (80042ec <HAL_TIM_IC_Init+0x13c>)
 80041ca:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80041cc:	4b48      	ldr	r3, [pc, #288]	@ (80042f0 <HAL_TIM_IC_Init+0x140>)
 80041ce:	3204      	adds	r2, #4
 80041d0:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80041d2:	4b48      	ldr	r3, [pc, #288]	@ (80042f4 <HAL_TIM_IC_Init+0x144>)
 80041d4:	3204      	adds	r2, #4
 80041d6:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80041d8:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_TIM_IC_Init+0x148>)
 80041da:	3204      	adds	r2, #4
 80041dc:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80041de:	4b47      	ldr	r3, [pc, #284]	@ (80042fc <HAL_TIM_IC_Init+0x14c>)
 80041e0:	3204      	adds	r2, #4
 80041e2:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80041e4:	4b46      	ldr	r3, [pc, #280]	@ (8004300 <HAL_TIM_IC_Init+0x150>)
 80041e6:	3204      	adds	r2, #4
 80041e8:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80041ea:	4b46      	ldr	r3, [pc, #280]	@ (8004304 <HAL_TIM_IC_Init+0x154>)
 80041ec:	3204      	adds	r2, #4
 80041ee:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80041f0:	4b45      	ldr	r3, [pc, #276]	@ (8004308 <HAL_TIM_IC_Init+0x158>)
 80041f2:	3204      	adds	r2, #4
 80041f4:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80041f6:	4b45      	ldr	r3, [pc, #276]	@ (800430c <HAL_TIM_IC_Init+0x15c>)
 80041f8:	3204      	adds	r2, #4
 80041fa:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80041fc:	4b44      	ldr	r3, [pc, #272]	@ (8004310 <HAL_TIM_IC_Init+0x160>)
 80041fe:	3204      	adds	r2, #4
 8004200:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004202:	4b44      	ldr	r3, [pc, #272]	@ (8004314 <HAL_TIM_IC_Init+0x164>)
 8004204:	3204      	adds	r2, #4
 8004206:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004208:	4b43      	ldr	r3, [pc, #268]	@ (8004318 <HAL_TIM_IC_Init+0x168>)
 800420a:	3204      	adds	r2, #4
 800420c:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800420e:	4b43      	ldr	r3, [pc, #268]	@ (800431c <HAL_TIM_IC_Init+0x16c>)
 8004210:	3204      	adds	r2, #4
 8004212:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004214:	4b42      	ldr	r3, [pc, #264]	@ (8004320 <HAL_TIM_IC_Init+0x170>)
 8004216:	3204      	adds	r2, #4
 8004218:	5083      	str	r3, [r0, r2]
    if (htim->IC_MspInitCallback == NULL)
 800421a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800421c:	2b00      	cmp	r3, #0
 800421e:	d061      	beq.n	80042e4 <HAL_TIM_IC_Init+0x134>
    htim->IC_MspInitCallback(htim);
 8004220:	0020      	movs	r0, r4
 8004222:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8004224:	233d      	movs	r3, #61	@ 0x3d
 8004226:	2202      	movs	r2, #2
 8004228:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800422a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800422c:	4e3d      	ldr	r6, [pc, #244]	@ (8004324 <HAL_TIM_IC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 800422e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004230:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8004232:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004234:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004236:	42b3      	cmp	r3, r6
 8004238:	d041      	beq.n	80042be <HAL_TIM_IC_Init+0x10e>
 800423a:	2680      	movs	r6, #128	@ 0x80
 800423c:	05f6      	lsls	r6, r6, #23
 800423e:	42b3      	cmp	r3, r6
 8004240:	d034      	beq.n	80042ac <HAL_TIM_IC_Init+0xfc>
 8004242:	4e39      	ldr	r6, [pc, #228]	@ (8004328 <HAL_TIM_IC_Init+0x178>)
 8004244:	42b3      	cmp	r3, r6
 8004246:	d031      	beq.n	80042ac <HAL_TIM_IC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004248:	4e38      	ldr	r6, [pc, #224]	@ (800432c <HAL_TIM_IC_Init+0x17c>)
 800424a:	42b3      	cmp	r3, r6
 800424c:	d032      	beq.n	80042b4 <HAL_TIM_IC_Init+0x104>
 800424e:	4e38      	ldr	r6, [pc, #224]	@ (8004330 <HAL_TIM_IC_Init+0x180>)
 8004250:	42b3      	cmp	r3, r6
 8004252:	d038      	beq.n	80042c6 <HAL_TIM_IC_Init+0x116>
 8004254:	4e37      	ldr	r6, [pc, #220]	@ (8004334 <HAL_TIM_IC_Init+0x184>)
 8004256:	42b3      	cmp	r3, r6
 8004258:	d035      	beq.n	80042c6 <HAL_TIM_IC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800425a:	2680      	movs	r6, #128	@ 0x80
 800425c:	43b2      	bics	r2, r6
 800425e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004260:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004262:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004264:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004266:	2201      	movs	r2, #1
 8004268:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800426a:	6919      	ldr	r1, [r3, #16]
 800426c:	420a      	tst	r2, r1
 800426e:	d002      	beq.n	8004276 <HAL_TIM_IC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004270:	6919      	ldr	r1, [r3, #16]
 8004272:	4391      	bics	r1, r2
 8004274:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004276:	2301      	movs	r3, #1
 8004278:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800427a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800427c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	3a0a      	subs	r2, #10
 8004280:	54a3      	strb	r3, [r4, r2]
 8004282:	3201      	adds	r2, #1
 8004284:	54a3      	strb	r3, [r4, r2]
 8004286:	3201      	adds	r2, #1
 8004288:	54a3      	strb	r3, [r4, r2]
 800428a:	3201      	adds	r2, #1
 800428c:	54a3      	strb	r3, [r4, r2]
 800428e:	3201      	adds	r2, #1
 8004290:	54a3      	strb	r3, [r4, r2]
 8004292:	3201      	adds	r2, #1
 8004294:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004296:	3201      	adds	r2, #1
 8004298:	54a3      	strb	r3, [r4, r2]
 800429a:	3201      	adds	r2, #1
 800429c:	54a3      	strb	r3, [r4, r2]
 800429e:	3201      	adds	r2, #1
 80042a0:	54a3      	strb	r3, [r4, r2]
 80042a2:	3201      	adds	r2, #1
 80042a4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80042a6:	3a0a      	subs	r2, #10
 80042a8:	54a3      	strb	r3, [r4, r2]
}
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042ac:	2670      	movs	r6, #112	@ 0x70
 80042ae:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80042b0:	68a6      	ldr	r6, [r4, #8]
 80042b2:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80042b4:	4e20      	ldr	r6, [pc, #128]	@ (8004338 <HAL_TIM_IC_Init+0x188>)
 80042b6:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042b8:	6926      	ldr	r6, [r4, #16]
 80042ba:	4332      	orrs	r2, r6
 80042bc:	e7cd      	b.n	800425a <HAL_TIM_IC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042be:	2670      	movs	r6, #112	@ 0x70
 80042c0:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 80042c2:	68a6      	ldr	r6, [r4, #8]
 80042c4:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c6:	4e1c      	ldr	r6, [pc, #112]	@ (8004338 <HAL_TIM_IC_Init+0x188>)
 80042c8:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	6926      	ldr	r6, [r4, #16]
 80042cc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ce:	2680      	movs	r6, #128	@ 0x80
 80042d0:	43b2      	bics	r2, r6
 80042d2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80042d4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d6:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80042d8:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80042da:	6962      	ldr	r2, [r4, #20]
 80042dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80042de:	e7c2      	b.n	8004266 <HAL_TIM_IC_Init+0xb6>
    return HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
 80042e2:	e7e2      	b.n	80042aa <HAL_TIM_IC_Init+0xfa>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80042e4:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_TIM_IC_Init+0x18c>)
 80042e6:	6543      	str	r3, [r0, #84]	@ 0x54
 80042e8:	e79a      	b.n	8004220 <HAL_TIM_IC_Init+0x70>
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	08003945 	.word	0x08003945
 80042f0:	08003949 	.word	0x08003949
 80042f4:	08003961 	.word	0x08003961
 80042f8:	08003965 	.word	0x08003965
 80042fc:	08003951 	.word	0x08003951
 8004300:	08003955 	.word	0x08003955
 8004304:	0800394d 	.word	0x0800394d
 8004308:	08003959 	.word	0x08003959
 800430c:	0800395d 	.word	0x0800395d
 8004310:	08003969 	.word	0x08003969
 8004314:	080051d9 	.word	0x080051d9
 8004318:	080051dd 	.word	0x080051dd
 800431c:	080051e1 	.word	0x080051e1
 8004320:	080051e5 	.word	0x080051e5
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40002000 	.word	0x40002000
 8004330:	40014400 	.word	0x40014400
 8004334:	40014800 	.word	0x40014800
 8004338:	fffffcff 	.word	0xfffffcff
 800433c:	08003941 	.word	0x08003941

08004340 <HAL_TIM_IC_Start_IT>:
{
 8004340:	b530      	push	{r4, r5, lr}
 8004342:	2910      	cmp	r1, #16
 8004344:	d816      	bhi.n	8004374 <HAL_TIM_IC_Start_IT+0x34>
 8004346:	4a53      	ldr	r2, [pc, #332]	@ (8004494 <HAL_TIM_IC_Start_IT+0x154>)
 8004348:	008b      	lsls	r3, r1, #2
 800434a:	58d3      	ldr	r3, [r2, r3]
 800434c:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800434e:	243e      	movs	r4, #62	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004350:	2244      	movs	r2, #68	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004352:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004354:	5c83      	ldrb	r3, [r0, r2]
 8004356:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004358:	2d01      	cmp	r5, #1
 800435a:	d001      	beq.n	8004360 <HAL_TIM_IC_Start_IT+0x20>
{
 800435c:	2001      	movs	r0, #1
}
 800435e:	bd30      	pop	{r4, r5, pc}
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004360:	2b01      	cmp	r3, #1
 8004362:	d1fb      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004364:	2502      	movs	r5, #2
 8004366:	5505      	strb	r5, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004368:	5485      	strb	r5, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800436a:	6803      	ldr	r3, [r0, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	432a      	orrs	r2, r5
 8004370:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004372:	e022      	b.n	80043ba <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004374:	2343      	movs	r3, #67	@ 0x43
 8004376:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004378:	3304      	adds	r3, #4
 800437a:	5cc3      	ldrb	r3, [r0, r3]
 800437c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800437e:	2a01      	cmp	r2, #1
 8004380:	d1ec      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004382:	2b01      	cmp	r3, #1
 8004384:	d1ea      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	1f0b      	subs	r3, r1, #4
 8004388:	2b0c      	cmp	r3, #12
 800438a:	d878      	bhi.n	800447e <HAL_TIM_IC_Start_IT+0x13e>
 800438c:	4a42      	ldr	r2, [pc, #264]	@ (8004498 <HAL_TIM_IC_Start_IT+0x158>)
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	58d3      	ldr	r3, [r2, r3]
 8004392:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004394:	233f      	movs	r3, #63	@ 0x3f
 8004396:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004398:	3306      	adds	r3, #6
 800439a:	5cc3      	ldrb	r3, [r0, r3]
 800439c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800439e:	2a01      	cmp	r2, #1
 80043a0:	d1dc      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d1da      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a6:	2302      	movs	r3, #2
 80043a8:	223f      	movs	r2, #63	@ 0x3f
 80043aa:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ac:	3206      	adds	r2, #6
 80043ae:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043b0:	6803      	ldr	r3, [r0, #0]
 80043b2:	2004      	movs	r0, #4
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	4302      	orrs	r2, r0
 80043b8:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043ba:	221f      	movs	r2, #31
 80043bc:	2001      	movs	r0, #1
 80043be:	400a      	ands	r2, r1
 80043c0:	0001      	movs	r1, r0
 80043c2:	4091      	lsls	r1, r2
 80043c4:	000a      	movs	r2, r1
  TIMx->CCER &= ~tmp;
 80043c6:	6a19      	ldr	r1, [r3, #32]
 80043c8:	4391      	bics	r1, r2
 80043ca:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043cc:	6a19      	ldr	r1, [r3, #32]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	621a      	str	r2, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d2:	4a32      	ldr	r2, [pc, #200]	@ (800449c <HAL_TIM_IC_Start_IT+0x15c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d044      	beq.n	8004462 <HAL_TIM_IC_Start_IT+0x122>
 80043d8:	2280      	movs	r2, #128	@ 0x80
 80043da:	05d2      	lsls	r2, r2, #23
 80043dc:	4293      	cmp	r3, r2
 80043de:	d040      	beq.n	8004462 <HAL_TIM_IC_Start_IT+0x122>
 80043e0:	4a2f      	ldr	r2, [pc, #188]	@ (80044a0 <HAL_TIM_IC_Start_IT+0x160>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d03d      	beq.n	8004462 <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE(htim);
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	4302      	orrs	r2, r0
 80043ea:	601a      	str	r2, [r3, #0]
{
 80043ec:	2000      	movs	r0, #0
 80043ee:	e7b6      	b.n	800435e <HAL_TIM_IC_Start_IT+0x1e>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80043f0:	2342      	movs	r3, #66	@ 0x42
 80043f2:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80043f4:	3305      	adds	r3, #5
 80043f6:	5cc3      	ldrb	r3, [r0, r3]
 80043f8:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	d1ae      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d1ac      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004402:	2302      	movs	r3, #2
 8004404:	2242      	movs	r2, #66	@ 0x42
 8004406:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004408:	3205      	adds	r2, #5
 800440a:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 800440c:	e7a6      	b.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800440e:	2240      	movs	r2, #64	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004410:	2346      	movs	r3, #70	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004412:	5c84      	ldrb	r4, [r0, r2]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004414:	5cc3      	ldrb	r3, [r0, r3]
 8004416:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004418:	2c01      	cmp	r4, #1
 800441a:	d19f      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800441c:	2b01      	cmp	r3, #1
 800441e:	d19d      	bne.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004420:	2302      	movs	r3, #2
 8004422:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004424:	2346      	movs	r3, #70	@ 0x46
 8004426:	2202      	movs	r2, #2
 8004428:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800442a:	6803      	ldr	r3, [r0, #0]
 800442c:	2008      	movs	r0, #8
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	4302      	orrs	r2, r0
 8004432:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004434:	e7c1      	b.n	80043ba <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004436:	2341      	movs	r3, #65	@ 0x41
 8004438:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800443a:	3306      	adds	r3, #6
 800443c:	5cc3      	ldrb	r3, [r0, r3]
 800443e:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004440:	2a01      	cmp	r2, #1
 8004442:	d000      	beq.n	8004446 <HAL_TIM_IC_Start_IT+0x106>
 8004444:	e78a      	b.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004446:	2b01      	cmp	r3, #1
 8004448:	d000      	beq.n	800444c <HAL_TIM_IC_Start_IT+0x10c>
 800444a:	e787      	b.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444c:	2302      	movs	r3, #2
 800444e:	2241      	movs	r2, #65	@ 0x41
 8004450:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	3206      	adds	r2, #6
 8004454:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004456:	6803      	ldr	r3, [r0, #0]
 8004458:	2010      	movs	r0, #16
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	4302      	orrs	r2, r0
 800445e:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004460:	e7ab      	b.n	80043ba <HAL_TIM_IC_Start_IT+0x7a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	490f      	ldr	r1, [pc, #60]	@ (80044a4 <HAL_TIM_IC_Start_IT+0x164>)
 8004466:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	2a06      	cmp	r2, #6
 800446a:	d0bf      	beq.n	80043ec <HAL_TIM_IC_Start_IT+0xac>
 800446c:	3907      	subs	r1, #7
 800446e:	428a      	cmp	r2, r1
 8004470:	d0bc      	beq.n	80043ec <HAL_TIM_IC_Start_IT+0xac>
        __HAL_TIM_ENABLE(htim);
 8004472:	2101      	movs	r1, #1
 8004474:	681a      	ldr	r2, [r3, #0]
{
 8004476:	2000      	movs	r0, #0
        __HAL_TIM_ENABLE(htim);
 8004478:	430a      	orrs	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	e76f      	b.n	800435e <HAL_TIM_IC_Start_IT+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800447e:	2302      	movs	r3, #2
 8004480:	2243      	movs	r2, #67	@ 0x43
 8004482:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004484:	3204      	adds	r2, #4
 8004486:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 8004488:	e768      	b.n	800435c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800448a:	2340      	movs	r3, #64	@ 0x40
 800448c:	2202      	movs	r2, #2
 800448e:	54c2      	strb	r2, [r0, r3]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004490:	e7c8      	b.n	8004424 <HAL_TIM_IC_Start_IT+0xe4>
 8004492:	46c0      	nop			@ (mov r8, r8)
 8004494:	08006194 	.word	0x08006194
 8004498:	080061d8 	.word	0x080061d8
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	40000400 	.word	0x40000400
 80044a4:	00010007 	.word	0x00010007

080044a8 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044a8:	2202      	movs	r2, #2
{
 80044aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 80044ac:	6803      	ldr	r3, [r0, #0]
{
 80044ae:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 80044b0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044b2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044b4:	422a      	tst	r2, r5
 80044b6:	d002      	beq.n	80044be <HAL_TIM_IRQHandler+0x16>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044b8:	4232      	tst	r2, r6
 80044ba:	d000      	beq.n	80044be <HAL_TIM_IRQHandler+0x16>
 80044bc:	e0a6      	b.n	800460c <HAL_TIM_IRQHandler+0x164>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80044be:	2304      	movs	r3, #4
 80044c0:	422b      	tst	r3, r5
 80044c2:	d002      	beq.n	80044ca <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044c4:	4233      	tst	r3, r6
 80044c6:	d000      	beq.n	80044ca <HAL_TIM_IRQHandler+0x22>
 80044c8:	e08a      	b.n	80045e0 <HAL_TIM_IRQHandler+0x138>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ca:	2308      	movs	r3, #8
 80044cc:	422b      	tst	r3, r5
 80044ce:	d002      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x2e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044d0:	4233      	tst	r3, r6
 80044d2:	d000      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x2e>
 80044d4:	e070      	b.n	80045b8 <HAL_TIM_IRQHandler+0x110>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d6:	2310      	movs	r3, #16
 80044d8:	422b      	tst	r3, r5
 80044da:	d001      	beq.n	80044e0 <HAL_TIM_IRQHandler+0x38>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044dc:	4233      	tst	r3, r6
 80044de:	d155      	bne.n	800458c <HAL_TIM_IRQHandler+0xe4>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044e0:	2301      	movs	r3, #1
 80044e2:	422b      	tst	r3, r5
 80044e4:	d001      	beq.n	80044ea <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044e6:	4233      	tst	r3, r6
 80044e8:	d135      	bne.n	8004556 <HAL_TIM_IRQHandler+0xae>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044ea:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044ec:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044ee:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044f0:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044f2:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044f4:	421d      	tst	r5, r3
 80044f6:	d03d      	beq.n	8004574 <HAL_TIM_IRQHandler+0xcc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044f8:	0633      	lsls	r3, r6, #24
 80044fa:	d41b      	bmi.n	8004534 <HAL_TIM_IRQHandler+0x8c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044fc:	2340      	movs	r3, #64	@ 0x40
 80044fe:	422b      	tst	r3, r5
 8004500:	d001      	beq.n	8004506 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004502:	4233      	tst	r3, r6
 8004504:	d10d      	bne.n	8004522 <HAL_TIM_IRQHandler+0x7a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004506:	2320      	movs	r3, #32
 8004508:	422b      	tst	r3, r5
 800450a:	d009      	beq.n	8004520 <HAL_TIM_IRQHandler+0x78>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800450c:	4233      	tst	r3, r6
 800450e:	d007      	beq.n	8004520 <HAL_TIM_IRQHandler+0x78>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004510:	2221      	movs	r2, #33	@ 0x21
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4252      	negs	r2, r2
 8004516:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8004518:	23ac      	movs	r3, #172	@ 0xac
 800451a:	0020      	movs	r0, r4
 800451c:	58e3      	ldr	r3, [r4, r3]
 800451e:	4798      	blx	r3
}
 8004520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004522:	2241      	movs	r2, #65	@ 0x41
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	4252      	negs	r2, r2
 8004528:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 800452a:	238c      	movs	r3, #140	@ 0x8c
 800452c:	0020      	movs	r0, r4
 800452e:	58e3      	ldr	r3, [r4, r3]
 8004530:	4798      	blx	r3
 8004532:	e7e8      	b.n	8004506 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	4a47      	ldr	r2, [pc, #284]	@ (8004654 <HAL_TIM_IRQHandler+0x1ac>)
      htim->BreakCallback(htim);
 8004538:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800453a:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 800453c:	23b4      	movs	r3, #180	@ 0xb4
 800453e:	58e3      	ldr	r3, [r4, r3]
 8004540:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004542:	2f00      	cmp	r7, #0
 8004544:	d0da      	beq.n	80044fc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	4a43      	ldr	r2, [pc, #268]	@ (8004658 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 800454a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800454c:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 800454e:	23b8      	movs	r3, #184	@ 0xb8
 8004550:	58e3      	ldr	r3, [r4, r3]
 8004552:	4798      	blx	r3
 8004554:	e7d2      	b.n	80044fc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004556:	2202      	movs	r2, #2
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	4252      	negs	r2, r2
 800455c:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 800455e:	2384      	movs	r3, #132	@ 0x84
 8004560:	0020      	movs	r0, r4
 8004562:	58e3      	ldr	r3, [r4, r3]
 8004564:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004566:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004568:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800456a:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800456c:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800456e:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004570:	421d      	tst	r5, r3
 8004572:	d1c1      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004574:	2f00      	cmp	r7, #0
 8004576:	d0c1      	beq.n	80044fc <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004578:	0633      	lsls	r3, r6, #24
 800457a:	d5bf      	bpl.n	80044fc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	4a36      	ldr	r2, [pc, #216]	@ (8004658 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 8004580:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004582:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004584:	23b8      	movs	r3, #184	@ 0xb8
 8004586:	58e3      	ldr	r3, [r4, r3]
 8004588:	4798      	blx	r3
 800458a:	e7b7      	b.n	80044fc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800458c:	2211      	movs	r2, #17
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	4252      	negs	r2, r2
 8004592:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004594:	3219      	adds	r2, #25
 8004596:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	23c0      	movs	r3, #192	@ 0xc0
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	421a      	tst	r2, r3
 80045a0:	d153      	bne.n	800464a <HAL_TIM_IRQHandler+0x1a2>
        htim->OC_DelayElapsedCallback(htim);
 80045a2:	239c      	movs	r3, #156	@ 0x9c
 80045a4:	0020      	movs	r0, r4
 80045a6:	58e3      	ldr	r3, [r4, r3]
 80045a8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80045aa:	23a0      	movs	r3, #160	@ 0xa0
 80045ac:	0020      	movs	r0, r4
 80045ae:	58e3      	ldr	r3, [r4, r3]
 80045b0:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b2:	2300      	movs	r3, #0
 80045b4:	7723      	strb	r3, [r4, #28]
 80045b6:	e793      	b.n	80044e0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045b8:	2209      	movs	r2, #9
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	4252      	negs	r2, r2
 80045be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045c0:	320d      	adds	r2, #13
 80045c2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	079b      	lsls	r3, r3, #30
 80045c8:	d13a      	bne.n	8004640 <HAL_TIM_IRQHandler+0x198>
        htim->OC_DelayElapsedCallback(htim);
 80045ca:	239c      	movs	r3, #156	@ 0x9c
 80045cc:	0020      	movs	r0, r4
 80045ce:	58e3      	ldr	r3, [r4, r3]
 80045d0:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80045d2:	23a0      	movs	r3, #160	@ 0xa0
 80045d4:	0020      	movs	r0, r4
 80045d6:	58e3      	ldr	r3, [r4, r3]
 80045d8:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045da:	2300      	movs	r3, #0
 80045dc:	7723      	strb	r3, [r4, #28]
 80045de:	e77a      	b.n	80044d6 <HAL_TIM_IRQHandler+0x2e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045e0:	2205      	movs	r2, #5
 80045e2:	6823      	ldr	r3, [r4, #0]
 80045e4:	4252      	negs	r2, r2
 80045e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045e8:	3207      	adds	r2, #7
 80045ea:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ec:	699a      	ldr	r2, [r3, #24]
 80045ee:	23c0      	movs	r3, #192	@ 0xc0
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	421a      	tst	r2, r3
 80045f4:	d11f      	bne.n	8004636 <HAL_TIM_IRQHandler+0x18e>
        htim->OC_DelayElapsedCallback(htim);
 80045f6:	239c      	movs	r3, #156	@ 0x9c
 80045f8:	0020      	movs	r0, r4
 80045fa:	58e3      	ldr	r3, [r4, r3]
 80045fc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80045fe:	23a0      	movs	r3, #160	@ 0xa0
 8004600:	0020      	movs	r0, r4
 8004602:	58e3      	ldr	r3, [r4, r3]
 8004604:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	2300      	movs	r3, #0
 8004608:	7723      	strb	r3, [r4, #28]
 800460a:	e75e      	b.n	80044ca <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800460c:	3a05      	subs	r2, #5
 800460e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004610:	3204      	adds	r2, #4
 8004612:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	079b      	lsls	r3, r3, #30
 8004618:	d109      	bne.n	800462e <HAL_TIM_IRQHandler+0x186>
          htim->OC_DelayElapsedCallback(htim);
 800461a:	239c      	movs	r3, #156	@ 0x9c
 800461c:	58c3      	ldr	r3, [r0, r3]
 800461e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004620:	23a0      	movs	r3, #160	@ 0xa0
 8004622:	0020      	movs	r0, r4
 8004624:	58e3      	ldr	r3, [r4, r3]
 8004626:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004628:	2300      	movs	r3, #0
 800462a:	7723      	strb	r3, [r4, #28]
 800462c:	e747      	b.n	80044be <HAL_TIM_IRQHandler+0x16>
          htim->IC_CaptureCallback(htim);
 800462e:	2394      	movs	r3, #148	@ 0x94
 8004630:	58c3      	ldr	r3, [r0, r3]
 8004632:	4798      	blx	r3
 8004634:	e7f8      	b.n	8004628 <HAL_TIM_IRQHandler+0x180>
        htim->IC_CaptureCallback(htim);
 8004636:	2394      	movs	r3, #148	@ 0x94
 8004638:	0020      	movs	r0, r4
 800463a:	58e3      	ldr	r3, [r4, r3]
 800463c:	4798      	blx	r3
 800463e:	e7e2      	b.n	8004606 <HAL_TIM_IRQHandler+0x15e>
        htim->IC_CaptureCallback(htim);
 8004640:	2394      	movs	r3, #148	@ 0x94
 8004642:	0020      	movs	r0, r4
 8004644:	58e3      	ldr	r3, [r4, r3]
 8004646:	4798      	blx	r3
 8004648:	e7c7      	b.n	80045da <HAL_TIM_IRQHandler+0x132>
        htim->IC_CaptureCallback(htim);
 800464a:	2394      	movs	r3, #148	@ 0x94
 800464c:	0020      	movs	r0, r4
 800464e:	58e3      	ldr	r3, [r4, r3]
 8004650:	4798      	blx	r3
 8004652:	e7ae      	b.n	80045b2 <HAL_TIM_IRQHandler+0x10a>
 8004654:	ffffdf7f 	.word	0xffffdf7f
 8004658:	fffffeff 	.word	0xfffffeff

0800465c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800465c:	233c      	movs	r3, #60	@ 0x3c
{
 800465e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004660:	5cc3      	ldrb	r3, [r0, r3]
{
 8004662:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004664:	2b01      	cmp	r3, #1
 8004666:	d100      	bne.n	800466a <HAL_TIM_OC_ConfigChannel+0xe>
 8004668:	e119      	b.n	800489e <HAL_TIM_OC_ConfigChannel+0x242>
  switch (Channel)
 800466a:	2a14      	cmp	r2, #20
 800466c:	d803      	bhi.n	8004676 <HAL_TIM_OC_ConfigChannel+0x1a>
 800466e:	4b8d      	ldr	r3, [pc, #564]	@ (80048a4 <HAL_TIM_OC_ConfigChannel+0x248>)
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	589b      	ldr	r3, [r3, r2]
 8004674:	469f      	mov	pc, r3
 8004676:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004678:	233c      	movs	r3, #60	@ 0x3c
 800467a:	2200      	movs	r2, #0
 800467c:	54e2      	strb	r2, [r4, r3]
}
 800467e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004680:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004682:	4d89      	ldr	r5, [pc, #548]	@ (80048a8 <HAL_TIM_OC_ConfigChannel+0x24c>)
  tmpccer = TIMx->CCER;
 8004684:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	402a      	ands	r2, r5
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800468c:	4d87      	ldr	r5, [pc, #540]	@ (80048ac <HAL_TIM_OC_ConfigChannel+0x250>)
  tmpcr2 =  TIMx->CR2;
 800468e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004692:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004694:	680d      	ldr	r5, [r1, #0]
 8004696:	022d      	lsls	r5, r5, #8
 8004698:	4315      	orrs	r5, r2
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800469a:	4a85      	ldr	r2, [pc, #532]	@ (80048b0 <HAL_TIM_OC_ConfigChannel+0x254>)
 800469c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800469e:	688a      	ldr	r2, [r1, #8]
 80046a0:	0512      	lsls	r2, r2, #20
 80046a2:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a4:	4883      	ldr	r0, [pc, #524]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 80046a6:	4283      	cmp	r3, r0
 80046a8:	d100      	bne.n	80046ac <HAL_TIM_OC_ConfigChannel+0x50>
 80046aa:	e0c8      	b.n	800483e <HAL_TIM_OC_ConfigChannel+0x1e2>
 80046ac:	4882      	ldr	r0, [pc, #520]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80046ae:	4283      	cmp	r3, r0
 80046b0:	d100      	bne.n	80046b4 <HAL_TIM_OC_ConfigChannel+0x58>
 80046b2:	e0c4      	b.n	800483e <HAL_TIM_OC_ConfigChannel+0x1e2>
 80046b4:	4881      	ldr	r0, [pc, #516]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 80046b6:	4283      	cmp	r3, r0
 80046b8:	d100      	bne.n	80046bc <HAL_TIM_OC_ConfigChannel+0x60>
 80046ba:	e0c0      	b.n	800483e <HAL_TIM_OC_ConfigChannel+0x1e2>
  TIMx->CCR6 = OC_Config->Pulse;
 80046bc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80046be:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c0:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 80046c2:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80046c4:	65d9      	str	r1, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 80046c6:	621a      	str	r2, [r3, #32]
 80046c8:	e7d6      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ca:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046cc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046ce:	4e7c      	ldr	r6, [pc, #496]	@ (80048c0 <HAL_TIM_OC_ConfigChannel+0x264>)
  tmpccer = TIMx->CCER;
 80046d0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d2:	6a18      	ldr	r0, [r3, #32]
 80046d4:	43a8      	bics	r0, r5
 80046d6:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80046d8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80046da:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046dc:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 80046de:	680e      	ldr	r6, [r1, #0]
 80046e0:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80046e2:	2602      	movs	r6, #2
 80046e4:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 80046e6:	688e      	ldr	r6, [r1, #8]
 80046e8:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046ea:	4e72      	ldr	r6, [pc, #456]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 80046ec:	42b3      	cmp	r3, r6
 80046ee:	d100      	bne.n	80046f2 <HAL_TIM_OC_ConfigChannel+0x96>
 80046f0:	e098      	b.n	8004824 <HAL_TIM_OC_ConfigChannel+0x1c8>
 80046f2:	4e71      	ldr	r6, [pc, #452]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80046f4:	42b3      	cmp	r3, r6
 80046f6:	d100      	bne.n	80046fa <HAL_TIM_OC_ConfigChannel+0x9e>
 80046f8:	e094      	b.n	8004824 <HAL_TIM_OC_ConfigChannel+0x1c8>
 80046fa:	4e70      	ldr	r6, [pc, #448]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 80046fc:	42b3      	cmp	r3, r6
 80046fe:	d100      	bne.n	8004702 <HAL_TIM_OC_ConfigChannel+0xa6>
 8004700:	e090      	b.n	8004824 <HAL_TIM_OC_ConfigChannel+0x1c8>
  TIMx->CCR1 = OC_Config->Pulse;
 8004702:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004704:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004706:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004708:	6359      	str	r1, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 800470a:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 800470c:	621a      	str	r2, [r3, #32]
 800470e:	e7b3      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004710:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004712:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 8004714:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	6a18      	ldr	r0, [r3, #32]
 8004718:	43a8      	bics	r0, r5
 800471a:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800471c:	4d69      	ldr	r5, [pc, #420]	@ (80048c4 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 800471e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004720:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004722:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004724:	680d      	ldr	r5, [r1, #0]
 8004726:	022d      	lsls	r5, r5, #8
 8004728:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC2P;
 800472a:	2020      	movs	r0, #32
 800472c:	4382      	bics	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800472e:	6888      	ldr	r0, [r1, #8]
 8004730:	0100      	lsls	r0, r0, #4
 8004732:	4310      	orrs	r0, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004734:	4a5f      	ldr	r2, [pc, #380]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d100      	bne.n	800473c <HAL_TIM_OC_ConfigChannel+0xe0>
 800473a:	e08c      	b.n	8004856 <HAL_TIM_OC_ConfigChannel+0x1fa>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800473c:	4a5e      	ldr	r2, [pc, #376]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d100      	bne.n	8004744 <HAL_TIM_OC_ConfigChannel+0xe8>
 8004742:	e08f      	b.n	8004864 <HAL_TIM_OC_ConfigChannel+0x208>
 8004744:	4a5d      	ldr	r2, [pc, #372]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d100      	bne.n	800474c <HAL_TIM_OC_ConfigChannel+0xf0>
 800474a:	e08b      	b.n	8004864 <HAL_TIM_OC_ConfigChannel+0x208>
  TIMx->CCR2 = OC_Config->Pulse;
 800474c:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800474e:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004750:	619d      	str	r5, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004752:	639a      	str	r2, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004754:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2000      	movs	r0, #0
 8004758:	e78e      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800475c:	4d5a      	ldr	r5, [pc, #360]	@ (80048c8 <HAL_TIM_OC_ConfigChannel+0x26c>)
  tmpccer = TIMx->CCER;
 800475e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004760:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004762:	4e57      	ldr	r6, [pc, #348]	@ (80048c0 <HAL_TIM_OC_ConfigChannel+0x264>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004764:	4028      	ands	r0, r5
 8004766:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004768:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800476a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800476c:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 800476e:	680e      	ldr	r6, [r1, #0]
 8004770:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004772:	4856      	ldr	r0, [pc, #344]	@ (80048cc <HAL_TIM_OC_ConfigChannel+0x270>)
 8004774:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004776:	6888      	ldr	r0, [r1, #8]
 8004778:	0200      	lsls	r0, r0, #8
 800477a:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800477c:	484d      	ldr	r0, [pc, #308]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 800477e:	4283      	cmp	r3, r0
 8004780:	d07e      	beq.n	8004880 <HAL_TIM_OC_ConfigChannel+0x224>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004782:	484d      	ldr	r0, [pc, #308]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004784:	4283      	cmp	r3, r0
 8004786:	d100      	bne.n	800478a <HAL_TIM_OC_ConfigChannel+0x12e>
 8004788:	e081      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0x232>
 800478a:	484c      	ldr	r0, [pc, #304]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 800478c:	4283      	cmp	r3, r0
 800478e:	d07e      	beq.n	800488e <HAL_TIM_OC_ConfigChannel+0x232>
  TIMx->CCR3 = OC_Config->Pulse;
 8004790:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004792:	605d      	str	r5, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 8004796:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004798:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800479a:	621a      	str	r2, [r3, #32]
 800479c:	e76c      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a0:	4d4b      	ldr	r5, [pc, #300]	@ (80048d0 <HAL_TIM_OC_ConfigChannel+0x274>)
  tmpccer = TIMx->CCER;
 80047a2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047a4:	6a1a      	ldr	r2, [r3, #32]
 80047a6:	402a      	ands	r2, r5
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047aa:	4d46      	ldr	r5, [pc, #280]	@ (80048c4 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 80047ac:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80047ae:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b0:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b2:	680d      	ldr	r5, [r1, #0]
 80047b4:	022d      	lsls	r5, r5, #8
 80047b6:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC4P;
 80047b8:	4a46      	ldr	r2, [pc, #280]	@ (80048d4 <HAL_TIM_OC_ConfigChannel+0x278>)
 80047ba:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047bc:	688a      	ldr	r2, [r1, #8]
 80047be:	0312      	lsls	r2, r2, #12
 80047c0:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	483c      	ldr	r0, [pc, #240]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 80047c4:	4283      	cmp	r3, r0
 80047c6:	d055      	beq.n	8004874 <HAL_TIM_OC_ConfigChannel+0x218>
 80047c8:	483b      	ldr	r0, [pc, #236]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80047ca:	4283      	cmp	r3, r0
 80047cc:	d052      	beq.n	8004874 <HAL_TIM_OC_ConfigChannel+0x218>
 80047ce:	483b      	ldr	r0, [pc, #236]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 80047d0:	4283      	cmp	r3, r0
 80047d2:	d04f      	beq.n	8004874 <HAL_TIM_OC_ConfigChannel+0x218>
  TIMx->CCR4 = OC_Config->Pulse;
 80047d4:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80047d6:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047d8:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 80047da:	61dd      	str	r5, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80047dc:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80047de:	621a      	str	r2, [r3, #32]
 80047e0:	e74a      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047e4:	4d3c      	ldr	r5, [pc, #240]	@ (80048d8 <HAL_TIM_OC_ConfigChannel+0x27c>)
  tmpccer = TIMx->CCER;
 80047e6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047e8:	6a1a      	ldr	r2, [r3, #32]
 80047ea:	402a      	ands	r2, r5
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047ee:	4d3b      	ldr	r5, [pc, #236]	@ (80048dc <HAL_TIM_OC_ConfigChannel+0x280>)
  tmpcr2 =  TIMx->CR2;
 80047f0:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80047f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047f4:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80047f6:	680d      	ldr	r5, [r1, #0]
 80047f8:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC5P;
 80047fa:	4a39      	ldr	r2, [pc, #228]	@ (80048e0 <HAL_TIM_OC_ConfigChannel+0x284>)
 80047fc:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047fe:	688a      	ldr	r2, [r1, #8]
 8004800:	0412      	lsls	r2, r2, #16
 8004802:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004804:	482b      	ldr	r0, [pc, #172]	@ (80048b4 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004806:	4283      	cmp	r3, r0
 8004808:	d01f      	beq.n	800484a <HAL_TIM_OC_ConfigChannel+0x1ee>
 800480a:	482b      	ldr	r0, [pc, #172]	@ (80048b8 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800480c:	4283      	cmp	r3, r0
 800480e:	d01c      	beq.n	800484a <HAL_TIM_OC_ConfigChannel+0x1ee>
 8004810:	482a      	ldr	r0, [pc, #168]	@ (80048bc <HAL_TIM_OC_ConfigChannel+0x260>)
 8004812:	4283      	cmp	r3, r0
 8004814:	d019      	beq.n	800484a <HAL_TIM_OC_ConfigChannel+0x1ee>
  TIMx->CCR5 = OC_Config->Pulse;
 8004816:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004818:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481a:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 800481c:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800481e:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 8004820:	621a      	str	r2, [r3, #32]
 8004822:	e729      	b.n	8004678 <HAL_TIM_OC_ConfigChannel+0x1c>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004824:	2608      	movs	r6, #8
 8004826:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 8004828:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 800482a:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800482c:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800482e:	2604      	movs	r6, #4
 8004830:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004832:	4e2c      	ldr	r6, [pc, #176]	@ (80048e4 <HAL_TIM_OC_ConfigChannel+0x288>)
 8004834:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004836:	694d      	ldr	r5, [r1, #20]
 8004838:	433d      	orrs	r5, r7
 800483a:	4335      	orrs	r5, r6
 800483c:	e761      	b.n	8004702 <HAL_TIM_OC_ConfigChannel+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 800483e:	482a      	ldr	r0, [pc, #168]	@ (80048e8 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8004840:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004842:	694e      	ldr	r6, [r1, #20]
 8004844:	02b6      	lsls	r6, r6, #10
 8004846:	4306      	orrs	r6, r0
 8004848:	e738      	b.n	80046bc <HAL_TIM_OC_ConfigChannel+0x60>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800484a:	4823      	ldr	r0, [pc, #140]	@ (80048d8 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800484c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800484e:	694e      	ldr	r6, [r1, #20]
 8004850:	0236      	lsls	r6, r6, #8
 8004852:	4306      	orrs	r6, r0
 8004854:	e7df      	b.n	8004816 <HAL_TIM_OC_ConfigChannel+0x1ba>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004856:	2280      	movs	r2, #128	@ 0x80
 8004858:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800485a:	68ca      	ldr	r2, [r1, #12]
 800485c:	0112      	lsls	r2, r2, #4
 800485e:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	2240      	movs	r2, #64	@ 0x40
 8004862:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004864:	4a21      	ldr	r2, [pc, #132]	@ (80048ec <HAL_TIM_OC_ConfigChannel+0x290>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004866:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004868:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800486a:	698e      	ldr	r6, [r1, #24]
 800486c:	433e      	orrs	r6, r7
 800486e:	00b6      	lsls	r6, r6, #2
 8004870:	4316      	orrs	r6, r2
 8004872:	e76b      	b.n	800474c <HAL_TIM_OC_ConfigChannel+0xf0>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004874:	481e      	ldr	r0, [pc, #120]	@ (80048f0 <HAL_TIM_OC_ConfigChannel+0x294>)
 8004876:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004878:	694e      	ldr	r6, [r1, #20]
 800487a:	01b6      	lsls	r6, r6, #6
 800487c:	4306      	orrs	r6, r0
 800487e:	e7a9      	b.n	80047d4 <HAL_TIM_OC_ConfigChannel+0x178>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004880:	481c      	ldr	r0, [pc, #112]	@ (80048f4 <HAL_TIM_OC_ConfigChannel+0x298>)
 8004882:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004884:	68c8      	ldr	r0, [r1, #12]
 8004886:	0200      	lsls	r0, r0, #8
 8004888:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800488a:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800488c:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800488e:	481b      	ldr	r0, [pc, #108]	@ (80048fc <HAL_TIM_OC_ConfigChannel+0x2a0>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004890:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004892:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004894:	698d      	ldr	r5, [r1, #24]
 8004896:	433d      	orrs	r5, r7
 8004898:	012d      	lsls	r5, r5, #4
 800489a:	4305      	orrs	r5, r0
 800489c:	e778      	b.n	8004790 <HAL_TIM_OC_ConfigChannel+0x134>
  __HAL_LOCK(htim);
 800489e:	2002      	movs	r0, #2
 80048a0:	e6ed      	b.n	800467e <HAL_TIM_OC_ConfigChannel+0x22>
 80048a2:	46c0      	nop			@ (mov r8, r8)
 80048a4:	0800620c 	.word	0x0800620c
 80048a8:	ffefffff 	.word	0xffefffff
 80048ac:	feff8fff 	.word	0xfeff8fff
 80048b0:	ffdfffff 	.word	0xffdfffff
 80048b4:	40012c00 	.word	0x40012c00
 80048b8:	40014400 	.word	0x40014400
 80048bc:	40014800 	.word	0x40014800
 80048c0:	fffeff8c 	.word	0xfffeff8c
 80048c4:	feff8cff 	.word	0xfeff8cff
 80048c8:	fffffeff 	.word	0xfffffeff
 80048cc:	fffffdff 	.word	0xfffffdff
 80048d0:	ffffefff 	.word	0xffffefff
 80048d4:	ffffdfff 	.word	0xffffdfff
 80048d8:	fffeffff 	.word	0xfffeffff
 80048dc:	fffeff8f 	.word	0xfffeff8f
 80048e0:	fffdffff 	.word	0xfffdffff
 80048e4:	fffffcff 	.word	0xfffffcff
 80048e8:	fffbffff 	.word	0xfffbffff
 80048ec:	fffff3ff 	.word	0xfffff3ff
 80048f0:	ffffbfff 	.word	0xffffbfff
 80048f4:	fffff7ff 	.word	0xfffff7ff
 80048f8:	fffffbff 	.word	0xfffffbff
 80048fc:	ffffcfff 	.word	0xffffcfff

08004900 <HAL_TIM_IC_ConfigChannel>:
{
 8004900:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004902:	203c      	movs	r0, #60	@ 0x3c
{
 8004904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004906:	46ce      	mov	lr, r9
 8004908:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 800490a:	5c1c      	ldrb	r4, [r3, r0]
{
 800490c:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 800490e:	2c01      	cmp	r4, #1
 8004910:	d100      	bne.n	8004914 <HAL_TIM_IC_ConfigChannel+0x14>
 8004912:	e0bf      	b.n	8004a94 <HAL_TIM_IC_ConfigChannel+0x194>
 8004914:	2401      	movs	r4, #1
 8004916:	541c      	strb	r4, [r3, r0]
  if (Channel == TIM_CHANNEL_1)
 8004918:	2a00      	cmp	r2, #0
 800491a:	d00e      	beq.n	800493a <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_2)
 800491c:	2a04      	cmp	r2, #4
 800491e:	d039      	beq.n	8004994 <HAL_TIM_IC_ConfigChannel+0x94>
  else if (Channel == TIM_CHANNEL_3)
 8004920:	2a08      	cmp	r2, #8
 8004922:	d100      	bne.n	8004926 <HAL_TIM_IC_ConfigChannel+0x26>
 8004924:	e08d      	b.n	8004a42 <HAL_TIM_IC_ConfigChannel+0x142>
    status = HAL_ERROR;
 8004926:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 8004928:	2a0c      	cmp	r2, #12
 800492a:	d05a      	beq.n	80049e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  __HAL_UNLOCK(htim);
 800492c:	223c      	movs	r2, #60	@ 0x3c
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]
}
 8004932:	bcc0      	pop	{r6, r7}
 8004934:	46b9      	mov	r9, r7
 8004936:	46b0      	mov	r8, r6
 8004938:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800493a:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 800493c:	6848      	ldr	r0, [r1, #4]
  tmpccer = TIMx->CCER;
 800493e:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 8004940:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	6a10      	ldr	r0, [r2, #32]
                      sConfig->ICPolarity,
 8004944:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004946:	43a0      	bics	r0, r4
                      sConfig->ICFilter);
 8004948:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800494a:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494c:	6990      	ldr	r0, [r2, #24]
 800494e:	4684      	mov	ip, r0
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004950:	4851      	ldr	r0, [pc, #324]	@ (8004a98 <HAL_TIM_IC_ConfigChannel+0x198>)
 8004952:	4282      	cmp	r2, r0
 8004954:	d06e      	beq.n	8004a34 <HAL_TIM_IC_ConfigChannel+0x134>
 8004956:	2080      	movs	r0, #128	@ 0x80
 8004958:	05c0      	lsls	r0, r0, #23
 800495a:	4282      	cmp	r2, r0
 800495c:	d06a      	beq.n	8004a34 <HAL_TIM_IC_ConfigChannel+0x134>
 800495e:	484f      	ldr	r0, [pc, #316]	@ (8004a9c <HAL_TIM_IC_ConfigChannel+0x19c>)
 8004960:	4282      	cmp	r2, r0
 8004962:	d067      	beq.n	8004a34 <HAL_TIM_IC_ConfigChannel+0x134>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004964:	4660      	mov	r0, ip
 8004966:	4320      	orrs	r0, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004968:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800496a:	013f      	lsls	r7, r7, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800496c:	43a0      	bics	r0, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800496e:	340f      	adds	r4, #15
 8004970:	403c      	ands	r4, r7
 8004972:	4304      	orrs	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004974:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8004976:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004978:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800497a:	4385      	bics	r5, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800497c:	4030      	ands	r0, r6
 800497e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004980:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004982:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004984:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004986:	43a0      	bics	r0, r4
 8004988:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800498a:	6990      	ldr	r0, [r2, #24]
 800498c:	4301      	orrs	r1, r0
 800498e:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004990:	2000      	movs	r0, #0
 8004992:	e7cb      	b.n	800492c <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICFilter);
 8004994:	68c8      	ldr	r0, [r1, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004996:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 8004998:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499a:	2010      	movs	r0, #16
  tmpccer = TIMx->CCER;
 800499c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499e:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICPolarity,
 80049a0:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a2:	4387      	bics	r7, r0
                      sConfig->ICSelection,
 80049a4:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049a6:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049a8:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049aa:	483d      	ldr	r0, [pc, #244]	@ (8004aa0 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049ac:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80049ae:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049b0:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80049b2:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b4:	4f3b      	ldr	r7, [pc, #236]	@ (8004aa4 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049b6:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049b8:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80049ba:	0c00      	lsrs	r0, r0, #16
 80049bc:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049be:	24a0      	movs	r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049c0:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049c2:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80049c4:	4034      	ands	r4, r6
 80049c6:	432c      	orrs	r4, r5
  TIMx->CCMR1 = tmpccmr1 ;
 80049c8:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80049ca:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049cc:	6990      	ldr	r0, [r2, #24]
 80049ce:	4c36      	ldr	r4, [pc, #216]	@ (8004aa8 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049d0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049d2:	4020      	ands	r0, r4
 80049d4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049d6:	6990      	ldr	r0, [r2, #24]
 80049d8:	0209      	lsls	r1, r1, #8
 80049da:	4301      	orrs	r1, r0
 80049dc:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80049de:	2000      	movs	r0, #0
 80049e0:	e7a4      	b.n	800492c <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICPolarity,
 80049e2:	6808      	ldr	r0, [r1, #0]
    TIM_TI4_SetConfig(htim->Instance,
 80049e4:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 80049e6:	4680      	mov	r8, r0
  tmpccer = TIMx->CCER;
 80049e8:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049ea:	4830      	ldr	r0, [pc, #192]	@ (8004aac <HAL_TIM_IC_ConfigChannel+0x1ac>)
 80049ec:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICSelection,
 80049ee:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f0:	4007      	ands	r7, r0
                      sConfig->ICFilter);
 80049f2:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049f4:	6217      	str	r7, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80049f6:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049f8:	4829      	ldr	r0, [pc, #164]	@ (8004aa0 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049fa:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80049fc:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80049fe:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a00:	4f28      	ldr	r7, [pc, #160]	@ (8004aa4 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a02:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004a04:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004a06:	0c24      	lsrs	r4, r4, #16
 8004a08:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a0a:	4d29      	ldr	r5, [pc, #164]	@ (8004ab0 <HAL_TIM_IC_ConfigChannel+0x1b0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a0c:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004a0e:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004a10:	26a0      	movs	r6, #160	@ 0xa0
 8004a12:	0300      	lsls	r0, r0, #12
 8004a14:	0236      	lsls	r6, r6, #8
 8004a16:	4030      	ands	r0, r6
 8004a18:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 8004a1a:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 8004a1c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a1e:	69d0      	ldr	r0, [r2, #28]
 8004a20:	4c21      	ldr	r4, [pc, #132]	@ (8004aa8 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a22:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a24:	4020      	ands	r0, r4
 8004a26:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a28:	69d0      	ldr	r0, [r2, #28]
 8004a2a:	0209      	lsls	r1, r1, #8
 8004a2c:	4301      	orrs	r1, r0
 8004a2e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a30:	2000      	movs	r0, #0
 8004a32:	e77b      	b.n	800492c <HAL_TIM_IC_ConfigChannel+0x2c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a34:	2403      	movs	r4, #3
 8004a36:	4660      	mov	r0, ip
 8004a38:	43a0      	bics	r0, r4
 8004a3a:	0004      	movs	r4, r0
    tmpccmr1 |= TIM_ICSelection;
 8004a3c:	4648      	mov	r0, r9
 8004a3e:	4320      	orrs	r0, r4
 8004a40:	e792      	b.n	8004968 <HAL_TIM_IC_ConfigChannel+0x68>
    TIM_TI3_SetConfig(htim->Instance,
 8004a42:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 8004a44:	6808      	ldr	r0, [r1, #0]
  tmpccer = TIMx->CCER;
 8004a46:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICPolarity,
 8004a48:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a4a:	6a14      	ldr	r4, [r2, #32]
 8004a4c:	4819      	ldr	r0, [pc, #100]	@ (8004ab4 <HAL_TIM_IC_ConfigChannel+0x1b4>)
                      sConfig->ICSelection,
 8004a4e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a50:	4004      	ands	r4, r0
                      sConfig->ICFilter);
 8004a52:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a54:	6214      	str	r4, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a56:	69d4      	ldr	r4, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a58:	3005      	adds	r0, #5
 8004a5a:	30ff      	adds	r0, #255	@ 0xff
 8004a5c:	4384      	bics	r4, r0
  tmpccmr2 |= TIM_ICSelection;
 8004a5e:	4325      	orrs	r5, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a60:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a62:	013f      	lsls	r7, r7, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a64:	43a5      	bics	r5, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a66:	340f      	adds	r4, #15
 8004a68:	403c      	ands	r4, r7
 8004a6a:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a6c:	4d12      	ldr	r5, [pc, #72]	@ (8004ab8 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a6e:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a70:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a72:	26a0      	movs	r6, #160	@ 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8004a74:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a76:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a78:	0200      	lsls	r0, r0, #8
 8004a7a:	0136      	lsls	r6, r6, #4
 8004a7c:	4030      	ands	r0, r6
 8004a7e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004a80:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a82:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a84:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004a86:	43a0      	bics	r0, r4
 8004a88:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a8a:	69d0      	ldr	r0, [r2, #28]
 8004a8c:	4301      	orrs	r1, r0
 8004a8e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a90:	2000      	movs	r0, #0
 8004a92:	e74b      	b.n	800492c <HAL_TIM_IC_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8004a94:	2002      	movs	r0, #2
 8004a96:	e74c      	b.n	8004932 <HAL_TIM_IC_ConfigChannel+0x32>
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	fffffcff 	.word	0xfffffcff
 8004aa4:	ffff0fff 	.word	0xffff0fff
 8004aa8:	fffff3ff 	.word	0xfffff3ff
 8004aac:	ffffefff 	.word	0xffffefff
 8004ab0:	ffff5fff 	.word	0xffff5fff
 8004ab4:	fffffeff 	.word	0xfffffeff
 8004ab8:	fffff5ff 	.word	0xfffff5ff

08004abc <HAL_TIM_PWM_ConfigChannel>:
{
 8004abc:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8004abe:	203c      	movs	r0, #60	@ 0x3c
{
 8004ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004ac2:	5c1c      	ldrb	r4, [r3, r0]
 8004ac4:	2c01      	cmp	r4, #1
 8004ac6:	d100      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0xe>
 8004ac8:	e16b      	b.n	8004da2 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 8004aca:	2401      	movs	r4, #1
 8004acc:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 8004ace:	2a14      	cmp	r2, #20
 8004ad0:	d803      	bhi.n	8004ada <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ad2:	48b5      	ldr	r0, [pc, #724]	@ (8004da8 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8004ad4:	0092      	lsls	r2, r2, #2
 8004ad6:	5882      	ldr	r2, [r0, r2]
 8004ad8:	4697      	mov	pc, r2
 8004ada:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004adc:	223c      	movs	r2, #60	@ 0x3c
 8004ade:	2100      	movs	r1, #0
 8004ae0:	5499      	strb	r1, [r3, r2]
}
 8004ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ae4:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ae6:	4db1      	ldr	r5, [pc, #708]	@ (8004dac <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 8004ae8:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004aea:	6a10      	ldr	r0, [r2, #32]
 8004aec:	4028      	ands	r0, r5
 8004aee:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004af0:	4daf      	ldr	r5, [pc, #700]	@ (8004db0 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 8004af2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004af4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004af6:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af8:	680d      	ldr	r5, [r1, #0]
 8004afa:	022d      	lsls	r5, r5, #8
 8004afc:	4305      	orrs	r5, r0
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004afe:	48ad      	ldr	r0, [pc, #692]	@ (8004db4 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 8004b00:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b02:	6888      	ldr	r0, [r1, #8]
 8004b04:	0500      	lsls	r0, r0, #20
 8004b06:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	4cab      	ldr	r4, [pc, #684]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004b0a:	42a2      	cmp	r2, r4
 8004b0c:	d100      	bne.n	8004b10 <HAL_TIM_PWM_ConfigChannel+0x54>
 8004b0e:	e118      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x286>
 8004b10:	4caa      	ldr	r4, [pc, #680]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004b12:	42a2      	cmp	r2, r4
 8004b14:	d100      	bne.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8004b16:	e114      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x286>
 8004b18:	4ca9      	ldr	r4, [pc, #676]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004b1a:	42a2      	cmp	r2, r4
 8004b1c:	d100      	bne.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x64>
 8004b1e:	e110      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x286>
  TIMx->CCR6 = OC_Config->Pulse;
 8004b20:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b22:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004b24:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004b26:	65d4      	str	r4, [r2, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 8004b28:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b2a:	2080      	movs	r0, #128	@ 0x80
 8004b2c:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 8004b2e:	0100      	lsls	r0, r0, #4
 8004b30:	4320      	orrs	r0, r4
 8004b32:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b34:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004b36:	4ca3      	ldr	r4, [pc, #652]	@ (8004dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b38:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b3a:	4020      	ands	r0, r4
 8004b3c:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b3e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004b40:	0209      	lsls	r1, r1, #8
 8004b42:	4301      	orrs	r1, r0
 8004b44:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	2000      	movs	r0, #0
 8004b48:	e7c8      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b4a:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b4c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b4e:	4e9e      	ldr	r6, [pc, #632]	@ (8004dc8 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8004b50:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b52:	6a14      	ldr	r4, [r2, #32]
 8004b54:	43ac      	bics	r4, r5
 8004b56:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004b58:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004b5a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b5c:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8004b5e:	680e      	ldr	r6, [r1, #0]
 8004b60:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8004b62:	2602      	movs	r6, #2
 8004b64:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8004b66:	688e      	ldr	r6, [r1, #8]
 8004b68:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b6a:	4e93      	ldr	r6, [pc, #588]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004b6c:	42b2      	cmp	r2, r6
 8004b6e:	d100      	bne.n	8004b72 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8004b70:	e0da      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8004b72:	4e92      	ldr	r6, [pc, #584]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004b74:	42b2      	cmp	r2, r6
 8004b76:	d100      	bne.n	8004b7a <HAL_TIM_PWM_ConfigChannel+0xbe>
 8004b78:	e0d6      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8004b7a:	4e91      	ldr	r6, [pc, #580]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004b7c:	42b2      	cmp	r2, r6
 8004b7e:	d100      	bne.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8004b80:	e0d2      	b.n	8004d28 <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8004b82:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004b84:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004b86:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b88:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 8004b8a:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b8c:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004b8e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b90:	6990      	ldr	r0, [r2, #24]
 8004b92:	4320      	orrs	r0, r4
 8004b94:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b96:	6990      	ldr	r0, [r2, #24]
 8004b98:	3c04      	subs	r4, #4
 8004b9a:	43a0      	bics	r0, r4
 8004b9c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9e:	6990      	ldr	r0, [r2, #24]
 8004ba0:	4301      	orrs	r1, r0
 8004ba2:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	e799      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba8:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004baa:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 8004bac:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bae:	6a14      	ldr	r4, [r2, #32]
 8004bb0:	43ac      	bics	r4, r5
 8004bb2:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bb4:	4d85      	ldr	r5, [pc, #532]	@ (8004dcc <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8004bb6:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004bb8:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bba:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bbc:	680d      	ldr	r5, [r1, #0]
 8004bbe:	022d      	lsls	r5, r5, #8
 8004bc0:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8004bc2:	2420      	movs	r4, #32
 8004bc4:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc6:	688c      	ldr	r4, [r1, #8]
 8004bc8:	0124      	lsls	r4, r4, #4
 8004bca:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bcc:	487a      	ldr	r0, [pc, #488]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004bce:	4282      	cmp	r2, r0
 8004bd0:	d100      	bne.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004bd2:	e0c2      	b.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bd4:	4879      	ldr	r0, [pc, #484]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004bd6:	4282      	cmp	r2, r0
 8004bd8:	d100      	bne.n	8004bdc <HAL_TIM_PWM_ConfigChannel+0x120>
 8004bda:	e0c5      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x2ac>
 8004bdc:	4878      	ldr	r0, [pc, #480]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004bde:	4282      	cmp	r2, r0
 8004be0:	d100      	bne.n	8004be4 <HAL_TIM_PWM_ConfigChannel+0x128>
 8004be2:	e0c1      	b.n	8004d68 <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 8004be4:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004be6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004be8:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004bea:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bec:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 8004bee:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf0:	6994      	ldr	r4, [r2, #24]
 8004bf2:	0100      	lsls	r0, r0, #4
 8004bf4:	4320      	orrs	r0, r4
 8004bf6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bf8:	6990      	ldr	r0, [r2, #24]
 8004bfa:	4c72      	ldr	r4, [pc, #456]	@ (8004dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bfc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bfe:	4020      	ands	r0, r4
 8004c00:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c02:	6990      	ldr	r0, [r2, #24]
 8004c04:	0209      	lsls	r1, r1, #8
 8004c06:	4301      	orrs	r1, r0
 8004c08:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	e766      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c0e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c10:	4d6f      	ldr	r5, [pc, #444]	@ (8004dd0 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 8004c12:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c14:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c16:	4e6c      	ldr	r6, [pc, #432]	@ (8004dc8 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c18:	402c      	ands	r4, r5
 8004c1a:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004c1c:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c1e:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c20:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 8004c22:	680e      	ldr	r6, [r1, #0]
 8004c24:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8004c26:	4c6b      	ldr	r4, [pc, #428]	@ (8004dd4 <HAL_TIM_PWM_ConfigChannel+0x318>)
 8004c28:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2a:	688c      	ldr	r4, [r1, #8]
 8004c2c:	0224      	lsls	r4, r4, #8
 8004c2e:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c30:	4c61      	ldr	r4, [pc, #388]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004c32:	42a2      	cmp	r2, r4
 8004c34:	d100      	bne.n	8004c38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c36:	e0a5      	b.n	8004d84 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c38:	4c60      	ldr	r4, [pc, #384]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004c3a:	42a2      	cmp	r2, r4
 8004c3c:	d100      	bne.n	8004c40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004c3e:	e0a8      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8004c40:	4c5f      	ldr	r4, [pc, #380]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004c42:	42a2      	cmp	r2, r4
 8004c44:	d100      	bne.n	8004c48 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8004c46:	e0a4      	b.n	8004d92 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8004c48:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004c4a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004c4c:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c50:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004c52:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c54:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c56:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c58:	4320      	orrs	r0, r4
 8004c5a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c5c:	69d0      	ldr	r0, [r2, #28]
 8004c5e:	3c04      	subs	r4, #4
 8004c60:	43a0      	bics	r0, r4
 8004c62:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c64:	69d0      	ldr	r0, [r2, #28]
 8004c66:	4301      	orrs	r1, r0
 8004c68:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e736      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c6e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c70:	4d59      	ldr	r5, [pc, #356]	@ (8004dd8 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8004c72:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c74:	6a10      	ldr	r0, [r2, #32]
 8004c76:	4028      	ands	r0, r5
 8004c78:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c7a:	4d54      	ldr	r5, [pc, #336]	@ (8004dcc <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8004c7c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004c7e:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c80:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c82:	680d      	ldr	r5, [r1, #0]
 8004c84:	022d      	lsls	r5, r5, #8
 8004c86:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8004c88:	4854      	ldr	r0, [pc, #336]	@ (8004ddc <HAL_TIM_PWM_ConfigChannel+0x320>)
 8004c8a:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c8c:	6888      	ldr	r0, [r1, #8]
 8004c8e:	0300      	lsls	r0, r0, #12
 8004c90:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c92:	4c49      	ldr	r4, [pc, #292]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004c94:	42a2      	cmp	r2, r4
 8004c96:	d06f      	beq.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004c98:	4c48      	ldr	r4, [pc, #288]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004c9a:	42a2      	cmp	r2, r4
 8004c9c:	d06c      	beq.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004c9e:	4c48      	ldr	r4, [pc, #288]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004ca0:	42a2      	cmp	r2, r4
 8004ca2:	d069      	beq.n	8004d78 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8004ca4:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ca6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004ca8:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004caa:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004cac:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cae:	2080      	movs	r0, #128	@ 0x80
 8004cb0:	69d4      	ldr	r4, [r2, #28]
 8004cb2:	0100      	lsls	r0, r0, #4
 8004cb4:	4320      	orrs	r0, r4
 8004cb6:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cb8:	69d0      	ldr	r0, [r2, #28]
 8004cba:	4c42      	ldr	r4, [pc, #264]	@ (8004dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cbc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cbe:	4020      	ands	r0, r4
 8004cc0:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cc2:	69d0      	ldr	r0, [r2, #28]
 8004cc4:	0209      	lsls	r1, r1, #8
 8004cc6:	4301      	orrs	r1, r0
 8004cc8:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e706      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cce:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cd0:	4d43      	ldr	r5, [pc, #268]	@ (8004de0 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8004cd2:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cd4:	6a10      	ldr	r0, [r2, #32]
 8004cd6:	4028      	ands	r0, r5
 8004cd8:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cda:	4d42      	ldr	r5, [pc, #264]	@ (8004de4 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8004cdc:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004cde:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004ce0:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8004ce2:	680d      	ldr	r5, [r1, #0]
 8004ce4:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8004ce6:	4840      	ldr	r0, [pc, #256]	@ (8004de8 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8004ce8:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004cea:	6888      	ldr	r0, [r1, #8]
 8004cec:	0400      	lsls	r0, r0, #16
 8004cee:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf0:	4c31      	ldr	r4, [pc, #196]	@ (8004db8 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004cf2:	42a2      	cmp	r2, r4
 8004cf4:	d02b      	beq.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x292>
 8004cf6:	4c31      	ldr	r4, [pc, #196]	@ (8004dbc <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004cf8:	42a2      	cmp	r2, r4
 8004cfa:	d028      	beq.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x292>
 8004cfc:	4c30      	ldr	r4, [pc, #192]	@ (8004dc0 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004cfe:	42a2      	cmp	r2, r4
 8004d00:	d025      	beq.n	8004d4e <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8004d02:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004d04:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004d06:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004d08:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d0a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004d0c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d0e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d10:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004d12:	4320      	orrs	r0, r4
 8004d14:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004d16:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004d18:	3c04      	subs	r4, #4
 8004d1a:	43a0      	bics	r0, r4
 8004d1c:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004d1e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004d20:	4301      	orrs	r1, r0
 8004d22:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004d24:	2000      	movs	r0, #0
 8004d26:	e6d9      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d28:	2608      	movs	r6, #8
 8004d2a:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8004d2c:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d2e:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004d30:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d32:	2604      	movs	r6, #4
 8004d34:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d36:	4e2d      	ldr	r6, [pc, #180]	@ (8004dec <HAL_TIM_PWM_ConfigChannel+0x330>)
 8004d38:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d3a:	694d      	ldr	r5, [r1, #20]
 8004d3c:	433d      	orrs	r5, r7
 8004d3e:	4335      	orrs	r5, r6
 8004d40:	e71f      	b.n	8004b82 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d42:	4c2b      	ldr	r4, [pc, #172]	@ (8004df0 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8004d44:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d46:	694e      	ldr	r6, [r1, #20]
 8004d48:	02b6      	lsls	r6, r6, #10
 8004d4a:	4326      	orrs	r6, r4
 8004d4c:	e6e8      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d4e:	4c24      	ldr	r4, [pc, #144]	@ (8004de0 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8004d50:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d52:	694e      	ldr	r6, [r1, #20]
 8004d54:	0236      	lsls	r6, r6, #8
 8004d56:	4326      	orrs	r6, r4
 8004d58:	e7d3      	b.n	8004d02 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5a:	2080      	movs	r0, #128	@ 0x80
 8004d5c:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d5e:	68c8      	ldr	r0, [r1, #12]
 8004d60:	0100      	lsls	r0, r0, #4
 8004d62:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d64:	2040      	movs	r0, #64	@ 0x40
 8004d66:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d68:	4822      	ldr	r0, [pc, #136]	@ (8004df4 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d6a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d6c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d6e:	698e      	ldr	r6, [r1, #24]
 8004d70:	433e      	orrs	r6, r7
 8004d72:	00b6      	lsls	r6, r6, #2
 8004d74:	4306      	orrs	r6, r0
 8004d76:	e735      	b.n	8004be4 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d78:	4c1f      	ldr	r4, [pc, #124]	@ (8004df8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8004d7a:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d7c:	694e      	ldr	r6, [r1, #20]
 8004d7e:	01b6      	lsls	r6, r6, #6
 8004d80:	4326      	orrs	r6, r4
 8004d82:	e78f      	b.n	8004ca4 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d84:	4c1d      	ldr	r4, [pc, #116]	@ (8004dfc <HAL_TIM_PWM_ConfigChannel+0x340>)
 8004d86:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d88:	68cc      	ldr	r4, [r1, #12]
 8004d8a:	0224      	lsls	r4, r4, #8
 8004d8c:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d8e:	480d      	ldr	r0, [pc, #52]	@ (8004dc4 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8004d90:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d92:	4c1b      	ldr	r4, [pc, #108]	@ (8004e00 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d94:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d96:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d98:	698d      	ldr	r5, [r1, #24]
 8004d9a:	433d      	orrs	r5, r7
 8004d9c:	012d      	lsls	r5, r5, #4
 8004d9e:	4325      	orrs	r5, r4
 8004da0:	e752      	b.n	8004c48 <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8004da2:	2002      	movs	r0, #2
 8004da4:	e69d      	b.n	8004ae2 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004da6:	46c0      	nop			@ (mov r8, r8)
 8004da8:	08006260 	.word	0x08006260
 8004dac:	ffefffff 	.word	0xffefffff
 8004db0:	feff8fff 	.word	0xfeff8fff
 8004db4:	ffdfffff 	.word	0xffdfffff
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	fffffbff 	.word	0xfffffbff
 8004dc8:	fffeff8c 	.word	0xfffeff8c
 8004dcc:	feff8cff 	.word	0xfeff8cff
 8004dd0:	fffffeff 	.word	0xfffffeff
 8004dd4:	fffffdff 	.word	0xfffffdff
 8004dd8:	ffffefff 	.word	0xffffefff
 8004ddc:	ffffdfff 	.word	0xffffdfff
 8004de0:	fffeffff 	.word	0xfffeffff
 8004de4:	fffeff8f 	.word	0xfffeff8f
 8004de8:	fffdffff 	.word	0xfffdffff
 8004dec:	fffffcff 	.word	0xfffffcff
 8004df0:	fffbffff 	.word	0xfffbffff
 8004df4:	fffff3ff 	.word	0xfffff3ff
 8004df8:	ffffbfff 	.word	0xffffbfff
 8004dfc:	fffff7ff 	.word	0xfffff7ff
 8004e00:	ffffcfff 	.word	0xffffcfff

08004e04 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004e04:	233c      	movs	r3, #60	@ 0x3c
{
 8004e06:	b570      	push	{r4, r5, r6, lr}
 8004e08:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004e0a:	5cc0      	ldrb	r0, [r0, r3]
 8004e0c:	2801      	cmp	r0, #1
 8004e0e:	d100      	bne.n	8004e12 <HAL_TIM_ConfigClockSource+0xe>
 8004e10:	e073      	b.n	8004efa <HAL_TIM_ConfigClockSource+0xf6>
 8004e12:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004e14:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004e16:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e18:	3301      	adds	r3, #1
 8004e1a:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e1e:	4d51      	ldr	r5, [pc, #324]	@ (8004f64 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8004e20:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e22:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004e24:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004e26:	680b      	ldr	r3, [r1, #0]
 8004e28:	2b60      	cmp	r3, #96	@ 0x60
 8004e2a:	d100      	bne.n	8004e2e <HAL_TIM_ConfigClockSource+0x2a>
 8004e2c:	e067      	b.n	8004efe <HAL_TIM_ConfigClockSource+0xfa>
 8004e2e:	d81d      	bhi.n	8004e6c <HAL_TIM_ConfigClockSource+0x68>
 8004e30:	2b40      	cmp	r3, #64	@ 0x40
 8004e32:	d100      	bne.n	8004e36 <HAL_TIM_ConfigClockSource+0x32>
 8004e34:	e07d      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x12e>
 8004e36:	d93f      	bls.n	8004eb8 <HAL_TIM_ConfigClockSource+0xb4>
 8004e38:	2b50      	cmp	r3, #80	@ 0x50
 8004e3a:	d135      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8004e3c:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3e:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004e40:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e44:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e46:	43a6      	bics	r6, r4
 8004e48:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4a:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004e4c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e4e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e50:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e52:	240a      	movs	r4, #10
 8004e54:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004e56:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004e58:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004e5a:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004e5c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e5e:	4942      	ldr	r1, [pc, #264]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x164>)
 8004e60:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e62:	2157      	movs	r1, #87	@ 0x57
 8004e64:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004e66:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e01e      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004e6c:	2480      	movs	r4, #128	@ 0x80
 8004e6e:	0164      	lsls	r4, r4, #5
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d0f9      	beq.n	8004e68 <HAL_TIM_ConfigClockSource+0x64>
 8004e74:	2480      	movs	r4, #128	@ 0x80
 8004e76:	01a4      	lsls	r4, r4, #6
 8004e78:	42a3      	cmp	r3, r4
 8004e7a:	d12b      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0xd0>
  tmpsmcr = TIMx->SMCR;
 8004e7c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e80:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e82:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e84:	688b      	ldr	r3, [r1, #8]
 8004e86:	68c9      	ldr	r1, [r1, #12]
 8004e88:	432b      	orrs	r3, r5
 8004e8a:	0209      	lsls	r1, r1, #8
 8004e8c:	430b      	orrs	r3, r1
 8004e8e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004e90:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e92:	2380      	movs	r3, #128	@ 0x80
 8004e94:	6881      	ldr	r1, [r0, #8]
 8004e96:	01db      	lsls	r3, r3, #7
 8004e98:	430b      	orrs	r3, r1
 8004e9a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	e004      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004ea0:	2110      	movs	r1, #16
 8004ea2:	001c      	movs	r4, r3
 8004ea4:	438c      	bics	r4, r1
 8004ea6:	d00c      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8004ea8:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	233d      	movs	r3, #61	@ 0x3d
 8004eac:	2101      	movs	r1, #1
 8004eae:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	54d1      	strb	r1, [r2, r3]
}
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d002      	beq.n	8004ec2 <HAL_TIM_ConfigClockSource+0xbe>
 8004ebc:	d9f0      	bls.n	8004ea0 <HAL_TIM_ConfigClockSource+0x9c>
 8004ebe:	2b30      	cmp	r3, #48	@ 0x30
 8004ec0:	d1f2      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004ec2:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ec4:	4c28      	ldr	r4, [pc, #160]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x164>)
 8004ec6:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ec8:	430b      	orrs	r3, r1
 8004eca:	2107      	movs	r1, #7
 8004ecc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004ece:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	e7ea      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004ed4:	2b70      	cmp	r3, #112	@ 0x70
 8004ed6:	d1e7      	bne.n	8004ea8 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004ed8:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004eda:	4b24      	ldr	r3, [pc, #144]	@ (8004f6c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004edc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ede:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ee0:	688b      	ldr	r3, [r1, #8]
 8004ee2:	68c9      	ldr	r1, [r1, #12]
 8004ee4:	432b      	orrs	r3, r5
 8004ee6:	0209      	lsls	r1, r1, #8
 8004ee8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004eea:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004eec:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004eee:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004ef0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ef2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004ef4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e7d7      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8004efa:	2002      	movs	r0, #2
 8004efc:	e7db      	b.n	8004eb6 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004efe:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8004f00:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f02:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004f04:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f06:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8004f08:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0c:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0e:	4e18      	ldr	r6, [pc, #96]	@ (8004f70 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f10:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f12:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f14:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f16:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f18:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f1a:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f1c:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8004f1e:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f20:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004f22:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f24:	4910      	ldr	r1, [pc, #64]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x164>)
 8004f26:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f28:	2167      	movs	r1, #103	@ 0x67
 8004f2a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004f2c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e7bb      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8004f32:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004f34:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004f36:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f38:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f3a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3c:	43a6      	bics	r6, r4
 8004f3e:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f40:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f44:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f46:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f48:	240a      	movs	r4, #10
 8004f4a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004f4c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004f4e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004f50:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004f52:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f54:	4904      	ldr	r1, [pc, #16]	@ (8004f68 <HAL_TIM_ConfigClockSource+0x164>)
 8004f56:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f58:	2147      	movs	r1, #71	@ 0x47
 8004f5a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004f5c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2000      	movs	r0, #0
 8004f60:	e7a3      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0xa6>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	ffce0088 	.word	0xffce0088
 8004f68:	ffcfff8f 	.word	0xffcfff8f
 8004f6c:	ffff00ff 	.word	0xffff00ff
 8004f70:	ffff0fff 	.word	0xffff0fff

08004f74 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004f74:	2908      	cmp	r1, #8
 8004f76:	d011      	beq.n	8004f9c <HAL_TIM_ReadCapturedValue+0x28>
 8004f78:	d806      	bhi.n	8004f88 <HAL_TIM_ReadCapturedValue+0x14>
 8004f7a:	2900      	cmp	r1, #0
 8004f7c:	d00b      	beq.n	8004f96 <HAL_TIM_ReadCapturedValue+0x22>
 8004f7e:	2904      	cmp	r1, #4
 8004f80:	d107      	bne.n	8004f92 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR2;
 8004f82:	6803      	ldr	r3, [r0, #0]
 8004f84:	6b98      	ldr	r0, [r3, #56]	@ 0x38
}
 8004f86:	4770      	bx	lr
  switch (Channel)
 8004f88:	290c      	cmp	r1, #12
 8004f8a:	d102      	bne.n	8004f92 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR4;
 8004f8c:	6803      	ldr	r3, [r0, #0]
 8004f8e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  return tmpreg;
 8004f90:	e7f9      	b.n	8004f86 <HAL_TIM_ReadCapturedValue+0x12>
  switch (Channel)
 8004f92:	2000      	movs	r0, #0
 8004f94:	e7f7      	b.n	8004f86 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =  htim->Instance->CCR1;
 8004f96:	6803      	ldr	r3, [r0, #0]
 8004f98:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8004f9a:	e7f4      	b.n	8004f86 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =   htim->Instance->CCR3;
 8004f9c:	6803      	ldr	r3, [r0, #0]
 8004f9e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8004fa0:	e7f1      	b.n	8004f86 <HAL_TIM_ReadCapturedValue+0x12>
 8004fa2:	46c0      	nop			@ (mov r8, r8)

08004fa4 <HAL_TIM_RegisterCallback>:
{
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 8004fa8:	2a00      	cmp	r2, #0
 8004faa:	d00e      	beq.n	8004fca <HAL_TIM_RegisterCallback+0x26>
  if (htim->State == HAL_TIM_STATE_READY)
 8004fac:	253d      	movs	r5, #61	@ 0x3d
 8004fae:	5d44      	ldrb	r4, [r0, r5]
 8004fb0:	b2e0      	uxtb	r0, r4
 8004fb2:	2c01      	cmp	r4, #1
 8004fb4:	d00b      	beq.n	8004fce <HAL_TIM_RegisterCallback+0x2a>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 8004fb8:	2001      	movs	r0, #1
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
    switch (CallbackID)
 8004fbe:	290d      	cmp	r1, #13
 8004fc0:	d804      	bhi.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
 8004fc2:	4837      	ldr	r0, [pc, #220]	@ (80050a0 <HAL_TIM_RegisterCallback+0xfc>)
 8004fc4:	0089      	lsls	r1, r1, #2
 8004fc6:	5841      	ldr	r1, [r0, r1]
 8004fc8:	468f      	mov	pc, r1
    return HAL_ERROR;
 8004fca:	2001      	movs	r0, #1
}
 8004fcc:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 8004fce:	291b      	cmp	r1, #27
 8004fd0:	d8fc      	bhi.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
 8004fd2:	4834      	ldr	r0, [pc, #208]	@ (80050a4 <HAL_TIM_RegisterCallback+0x100>)
 8004fd4:	0089      	lsls	r1, r1, #2
 8004fd6:	5841      	ldr	r1, [r0, r1]
 8004fd8:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2000      	movs	r0, #0
        htim->HallSensor_MspInitCallback   = pCallback;
 8004fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004fde:	e7f5      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004fe0:	2180      	movs	r1, #128	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004fe2:	2000      	movs	r0, #0
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004fe4:	505a      	str	r2, [r3, r1]
        break;
 8004fe6:	e7f1      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2000      	movs	r0, #0
        htim->Base_MspInitCallback         = pCallback;
 8004fea:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004fec:	e7ee      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004fee:	2000      	movs	r0, #0
        htim->Base_MspDeInitCallback       = pCallback;
 8004ff0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004ff2:	e7eb      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004ff4:	2000      	movs	r0, #0
        htim->IC_MspInitCallback           = pCallback;
 8004ff6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004ff8:	e7e8      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004ffa:	2000      	movs	r0, #0
        htim->IC_MspDeInitCallback         = pCallback;
 8004ffc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004ffe:	e7e5      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005000:	2000      	movs	r0, #0
        htim->OC_MspInitCallback           = pCallback;
 8005002:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8005004:	e7e2      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2000      	movs	r0, #0
        htim->OC_MspDeInitCallback         = pCallback;
 8005008:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800500a:	e7df      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800500c:	2000      	movs	r0, #0
        htim->PWM_MspInitCallback          = pCallback;
 800500e:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005010:	e7dc      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005012:	2000      	movs	r0, #0
        htim->PWM_MspDeInitCallback        = pCallback;
 8005014:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005016:	e7d9      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005018:	2000      	movs	r0, #0
        htim->OnePulse_MspInitCallback     = pCallback;
 800501a:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800501c:	e7d6      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2000      	movs	r0, #0
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005020:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005022:	e7d3      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8005024:	2000      	movs	r0, #0
        htim->Encoder_MspInitCallback      = pCallback;
 8005026:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005028:	e7d0      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2000      	movs	r0, #0
        htim->Encoder_MspDeInitCallback    = pCallback;
 800502c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800502e:	e7cd      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedCallback                = pCallback;
 8005030:	2184      	movs	r1, #132	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2000      	movs	r0, #0
        htim->PeriodElapsedCallback                = pCallback;
 8005034:	505a      	str	r2, [r3, r1]
        break;
 8005036:	e7c9      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8005038:	2188      	movs	r1, #136	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2000      	movs	r0, #0
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800503c:	505a      	str	r2, [r3, r1]
        break;
 800503e:	e7c5      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->Break2Callback                       = pCallback;
 8005040:	21b8      	movs	r1, #184	@ 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 8005042:	2000      	movs	r0, #0
        htim->Break2Callback                       = pCallback;
 8005044:	505a      	str	r2, [r3, r1]
        break;
 8005046:	e7c1      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->BreakCallback                        = pCallback;
 8005048:	21b4      	movs	r1, #180	@ 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 800504a:	2000      	movs	r0, #0
        htim->BreakCallback                        = pCallback;
 800504c:	505a      	str	r2, [r3, r1]
        break;
 800504e:	e7bd      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationCallback                  = pCallback;
 8005050:	21ac      	movs	r1, #172	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8005052:	2000      	movs	r0, #0
        htim->CommutationCallback                  = pCallback;
 8005054:	505a      	str	r2, [r3, r1]
        break;
 8005056:	e7b9      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationHalfCpltCallback          = pCallback;
 8005058:	21b0      	movs	r1, #176	@ 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2000      	movs	r0, #0
        htim->CommutationHalfCpltCallback          = pCallback;
 800505c:	505a      	str	r2, [r3, r1]
        break;
 800505e:	e7b5      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerCallback                      = pCallback;
 8005060:	218c      	movs	r1, #140	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 8005062:	2000      	movs	r0, #0
        htim->TriggerCallback                      = pCallback;
 8005064:	505a      	str	r2, [r3, r1]
        break;
 8005066:	e7b1      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerHalfCpltCallback              = pCallback;
 8005068:	2190      	movs	r1, #144	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2000      	movs	r0, #0
        htim->TriggerHalfCpltCallback              = pCallback;
 800506c:	505a      	str	r2, [r3, r1]
        break;
 800506e:	e7ad      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureCallback                   = pCallback;
 8005070:	2194      	movs	r1, #148	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8005072:	2000      	movs	r0, #0
        htim->IC_CaptureCallback                   = pCallback;
 8005074:	505a      	str	r2, [r3, r1]
        break;
 8005076:	e7a9      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005078:	2198      	movs	r1, #152	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 800507a:	2000      	movs	r0, #0
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800507c:	505a      	str	r2, [r3, r1]
        break;
 800507e:	e7a5      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->OC_DelayElapsedCallback              = pCallback;
 8005080:	219c      	movs	r1, #156	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2000      	movs	r0, #0
        htim->OC_DelayElapsedCallback              = pCallback;
 8005084:	505a      	str	r2, [r3, r1]
        break;
 8005086:	e7a1      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005088:	21a0      	movs	r1, #160	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 800508a:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedCallback            = pCallback;
 800508c:	505a      	str	r2, [r3, r1]
        break;
 800508e:	e79d      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005090:	21a4      	movs	r1, #164	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 8005092:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005094:	505a      	str	r2, [r3, r1]
        break;
 8005096:	e799      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
        htim->ErrorCallback                        = pCallback;
 8005098:	21a8      	movs	r1, #168	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2000      	movs	r0, #0
        htim->ErrorCallback                        = pCallback;
 800509c:	505a      	str	r2, [r3, r1]
        break;
 800509e:	e795      	b.n	8004fcc <HAL_TIM_RegisterCallback+0x28>
 80050a0:	080062b4 	.word	0x080062b4
 80050a4:	080062ec 	.word	0x080062ec

080050a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a8:	233c      	movs	r3, #60	@ 0x3c
{
 80050aa:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80050ac:	5cc3      	ldrb	r3, [r0, r3]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d02a      	beq.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b2:	233d      	movs	r3, #61	@ 0x3d
 80050b4:	2202      	movs	r2, #2
 80050b6:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b8:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050ba:	4d14      	ldr	r5, [pc, #80]	@ (800510c <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 80050bc:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050be:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80050c0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050c2:	42aa      	cmp	r2, r5
 80050c4:	d017      	beq.n	80050f6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 80050c6:	2570      	movs	r5, #112	@ 0x70
 80050c8:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050ca:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050cc:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	05db      	lsls	r3, r3, #23
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d002      	beq.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 80050d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005110 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 80050d8:	429a      	cmp	r2, r3
 80050da:	d104      	bne.n	80050e6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050dc:	2380      	movs	r3, #128	@ 0x80
 80050de:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e0:	688b      	ldr	r3, [r1, #8]
 80050e2:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050e4:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050e6:	233d      	movs	r3, #61	@ 0x3d
 80050e8:	2201      	movs	r2, #1
 80050ea:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80050ec:	2200      	movs	r2, #0
 80050ee:	3b01      	subs	r3, #1
 80050f0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80050f2:	2000      	movs	r0, #0
}
 80050f4:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050f6:	4d07      	ldr	r5, [pc, #28]	@ (8005114 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80050f8:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050fa:	684d      	ldr	r5, [r1, #4]
 80050fc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fe:	2570      	movs	r5, #112	@ 0x70
 8005100:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005102:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8005104:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005106:	e7e9      	b.n	80050dc <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8005108:	2002      	movs	r0, #2
 800510a:	e7f3      	b.n	80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800510c:	40012c00 	.word	0x40012c00
 8005110:	40000400 	.word	0x40000400
 8005114:	ff0fffff 	.word	0xff0fffff

08005118 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005118:	233c      	movs	r3, #60	@ 0x3c
{
 800511a:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 800511c:	5cc3      	ldrb	r3, [r0, r3]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d03d      	beq.n	800519e <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005122:	4a20      	ldr	r2, [pc, #128]	@ (80051a4 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8005124:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005126:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005128:	4013      	ands	r3, r2
 800512a:	688a      	ldr	r2, [r1, #8]
 800512c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800512e:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8005130:	4013      	ands	r3, r2
 8005132:	684a      	ldr	r2, [r1, #4]
 8005134:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005136:	4a1d      	ldr	r2, [pc, #116]	@ (80051ac <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8005138:	4013      	ands	r3, r2
 800513a:	680a      	ldr	r2, [r1, #0]
 800513c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800513e:	4a1c      	ldr	r2, [pc, #112]	@ (80051b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005140:	4013      	ands	r3, r2
 8005142:	690a      	ldr	r2, [r1, #16]
 8005144:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005146:	4a1b      	ldr	r2, [pc, #108]	@ (80051b4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8005148:	4013      	ands	r3, r2
 800514a:	694a      	ldr	r2, [r1, #20]
 800514c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800514e:	4a1a      	ldr	r2, [pc, #104]	@ (80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005150:	4013      	ands	r3, r2
 8005152:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8005154:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005156:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8005158:	4013      	ands	r3, r2
 800515a:	698a      	ldr	r2, [r1, #24]
 800515c:	0412      	lsls	r2, r2, #16
 800515e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005160:	4a17      	ldr	r2, [pc, #92]	@ (80051c0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8005162:	4013      	ands	r3, r2
 8005164:	69ca      	ldr	r2, [r1, #28]
 8005166:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005168:	4a16      	ldr	r2, [pc, #88]	@ (80051c4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800516a:	4294      	cmp	r4, r2
 800516c:	d005      	beq.n	800517a <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800516e:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005170:	2200      	movs	r2, #0
 8005172:	233c      	movs	r3, #60	@ 0x3c
 8005174:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8005176:	2000      	movs	r0, #0
}
 8005178:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800517a:	4a13      	ldr	r2, [pc, #76]	@ (80051c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800517c:	4013      	ands	r3, r2
 800517e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8005180:	0512      	lsls	r2, r2, #20
 8005182:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005184:	4b11      	ldr	r3, [pc, #68]	@ (80051cc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8005186:	401a      	ands	r2, r3
 8005188:	6a0b      	ldr	r3, [r1, #32]
 800518a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800518c:	4b10      	ldr	r3, [pc, #64]	@ (80051d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800518e:	401a      	ands	r2, r3
 8005190:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8005192:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005194:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8005196:	401a      	ands	r2, r3
 8005198:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800519a:	4313      	orrs	r3, r2
 800519c:	e7e7      	b.n	800516e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 800519e:	2002      	movs	r0, #2
 80051a0:	e7ea      	b.n	8005178 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	fffffcff 	.word	0xfffffcff
 80051a8:	fffffbff 	.word	0xfffffbff
 80051ac:	fffff7ff 	.word	0xfffff7ff
 80051b0:	ffffefff 	.word	0xffffefff
 80051b4:	ffffdfff 	.word	0xffffdfff
 80051b8:	ffffbfff 	.word	0xffffbfff
 80051bc:	fff0ffff 	.word	0xfff0ffff
 80051c0:	efffffff 	.word	0xefffffff
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	ff0fffff 	.word	0xff0fffff
 80051cc:	feffffff 	.word	0xfeffffff
 80051d0:	fdffffff 	.word	0xfdffffff
 80051d4:	dfffffff 	.word	0xdfffffff

080051d8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80051d8:	4770      	bx	lr
 80051da:	46c0      	nop			@ (mov r8, r8)

080051dc <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 80051dc:	4770      	bx	lr
 80051de:	46c0      	nop			@ (mov r8, r8)

080051e0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80051e0:	4770      	bx	lr
 80051e2:	46c0      	nop			@ (mov r8, r8)

080051e4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80051e4:	4770      	bx	lr
 80051e6:	46c0      	nop			@ (mov r8, r8)

080051e8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 80051ea:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ec:	071a      	lsls	r2, r3, #28
 80051ee:	d506      	bpl.n	80051fe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f0:	6801      	ldr	r1, [r0, #0]
 80051f2:	4c28      	ldr	r4, [pc, #160]	@ (8005294 <UART_AdvFeatureConfig+0xac>)
 80051f4:	684a      	ldr	r2, [r1, #4]
 80051f6:	4022      	ands	r2, r4
 80051f8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80051fa:	4322      	orrs	r2, r4
 80051fc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051fe:	07da      	lsls	r2, r3, #31
 8005200:	d506      	bpl.n	8005210 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005202:	6801      	ldr	r1, [r0, #0]
 8005204:	4c24      	ldr	r4, [pc, #144]	@ (8005298 <UART_AdvFeatureConfig+0xb0>)
 8005206:	684a      	ldr	r2, [r1, #4]
 8005208:	4022      	ands	r2, r4
 800520a:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800520c:	4322      	orrs	r2, r4
 800520e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005210:	079a      	lsls	r2, r3, #30
 8005212:	d506      	bpl.n	8005222 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005214:	6801      	ldr	r1, [r0, #0]
 8005216:	4c21      	ldr	r4, [pc, #132]	@ (800529c <UART_AdvFeatureConfig+0xb4>)
 8005218:	684a      	ldr	r2, [r1, #4]
 800521a:	4022      	ands	r2, r4
 800521c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800521e:	4322      	orrs	r2, r4
 8005220:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005222:	075a      	lsls	r2, r3, #29
 8005224:	d506      	bpl.n	8005234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005226:	6801      	ldr	r1, [r0, #0]
 8005228:	4c1d      	ldr	r4, [pc, #116]	@ (80052a0 <UART_AdvFeatureConfig+0xb8>)
 800522a:	684a      	ldr	r2, [r1, #4]
 800522c:	4022      	ands	r2, r4
 800522e:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8005230:	4322      	orrs	r2, r4
 8005232:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005234:	06da      	lsls	r2, r3, #27
 8005236:	d506      	bpl.n	8005246 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005238:	6801      	ldr	r1, [r0, #0]
 800523a:	4c1a      	ldr	r4, [pc, #104]	@ (80052a4 <UART_AdvFeatureConfig+0xbc>)
 800523c:	688a      	ldr	r2, [r1, #8]
 800523e:	4022      	ands	r2, r4
 8005240:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005242:	4322      	orrs	r2, r4
 8005244:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005246:	069a      	lsls	r2, r3, #26
 8005248:	d506      	bpl.n	8005258 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800524a:	6801      	ldr	r1, [r0, #0]
 800524c:	4c16      	ldr	r4, [pc, #88]	@ (80052a8 <UART_AdvFeatureConfig+0xc0>)
 800524e:	688a      	ldr	r2, [r1, #8]
 8005250:	4022      	ands	r2, r4
 8005252:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005254:	4322      	orrs	r2, r4
 8005256:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005258:	065a      	lsls	r2, r3, #25
 800525a:	d50a      	bpl.n	8005272 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800525c:	6801      	ldr	r1, [r0, #0]
 800525e:	4d13      	ldr	r5, [pc, #76]	@ (80052ac <UART_AdvFeatureConfig+0xc4>)
 8005260:	684a      	ldr	r2, [r1, #4]
 8005262:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005264:	402a      	ands	r2, r5
 8005266:	4322      	orrs	r2, r4
 8005268:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	0352      	lsls	r2, r2, #13
 800526e:	4294      	cmp	r4, r2
 8005270:	d009      	beq.n	8005286 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005272:	061b      	lsls	r3, r3, #24
 8005274:	d506      	bpl.n	8005284 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005276:	6802      	ldr	r2, [r0, #0]
 8005278:	490d      	ldr	r1, [pc, #52]	@ (80052b0 <UART_AdvFeatureConfig+0xc8>)
 800527a:	6853      	ldr	r3, [r2, #4]
 800527c:	400b      	ands	r3, r1
 800527e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005280:	430b      	orrs	r3, r1
 8005282:	6053      	str	r3, [r2, #4]
  }
}
 8005284:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005286:	684a      	ldr	r2, [r1, #4]
 8005288:	4c0a      	ldr	r4, [pc, #40]	@ (80052b4 <UART_AdvFeatureConfig+0xcc>)
 800528a:	4022      	ands	r2, r4
 800528c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800528e:	4322      	orrs	r2, r4
 8005290:	604a      	str	r2, [r1, #4]
 8005292:	e7ee      	b.n	8005272 <UART_AdvFeatureConfig+0x8a>
 8005294:	ffff7fff 	.word	0xffff7fff
 8005298:	fffdffff 	.word	0xfffdffff
 800529c:	fffeffff 	.word	0xfffeffff
 80052a0:	fffbffff 	.word	0xfffbffff
 80052a4:	ffffefff 	.word	0xffffefff
 80052a8:	ffffdfff 	.word	0xffffdfff
 80052ac:	ffefffff 	.word	0xffefffff
 80052b0:	fff7ffff 	.word	0xfff7ffff
 80052b4:	ff9fffff 	.word	0xff9fffff

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	2390      	movs	r3, #144	@ 0x90
 80052bc:	2200      	movs	r2, #0
{
 80052be:	46c6      	mov	lr, r8
 80052c0:	0004      	movs	r4, r0
 80052c2:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c6:	f7fc fedb 	bl	8002080 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ca:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80052cc:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	0712      	lsls	r2, r2, #28
 80052d2:	d411      	bmi.n	80052f8 <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	0752      	lsls	r2, r2, #29
 80052d8:	d43e      	bmi.n	8005358 <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052da:	2320      	movs	r3, #32
 80052dc:	2288      	movs	r2, #136	@ 0x88
 80052de:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80052e0:	3204      	adds	r2, #4
 80052e2:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e4:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80052e6:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ea:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80052ec:	2384      	movs	r3, #132	@ 0x84
 80052ee:	2200      	movs	r2, #0
 80052f0:	54e2      	strb	r2, [r4, r3]
}
 80052f2:	bc80      	pop	{r7}
 80052f4:	46b8      	mov	r8, r7
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f8:	69da      	ldr	r2, [r3, #28]
 80052fa:	0292      	lsls	r2, r2, #10
 80052fc:	d4ea      	bmi.n	80052d4 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005300:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005302:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005304:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	04b6      	lsls	r6, r6, #18
 8005308:	e010      	b.n	800532c <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	4217      	tst	r7, r2
 8005310:	d009      	beq.n	8005326 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005312:	4641      	mov	r1, r8
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	4211      	tst	r1, r2
 8005318:	d159      	bne.n	80053ce <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800531a:	2280      	movs	r2, #128	@ 0x80
 800531c:	69d9      	ldr	r1, [r3, #28]
 800531e:	0112      	lsls	r2, r2, #4
 8005320:	4211      	tst	r1, r2
 8005322:	d000      	beq.n	8005326 <UART_CheckIdleState+0x6e>
 8005324:	e085      	b.n	8005432 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	0292      	lsls	r2, r2, #10
 800532a:	d4d3      	bmi.n	80052d4 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532c:	f7fc fea8 	bl	8002080 <HAL_GetTick>
 8005330:	1b40      	subs	r0, r0, r5
 8005332:	42b0      	cmp	r0, r6
 8005334:	d3e9      	bcc.n	800530a <UART_CheckIdleState+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005336:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800533a:	2301      	movs	r3, #1
 800533c:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005340:	2080      	movs	r0, #128	@ 0x80
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	4383      	bics	r3, r0
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800534e:	2388      	movs	r3, #136	@ 0x88
 8005350:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8005352:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8005354:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005356:	e7c9      	b.n	80052ec <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	025b      	lsls	r3, r3, #9
 800535c:	d4bd      	bmi.n	80052da <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005360:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005362:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005364:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	04b6      	lsls	r6, r6, #18
 8005368:	e011      	b.n	800538e <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4217      	tst	r7, r2
 8005370:	d00a      	beq.n	8005388 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005372:	4641      	mov	r1, r8
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	4211      	tst	r1, r2
 8005378:	d000      	beq.n	800537c <UART_CheckIdleState+0xc4>
 800537a:	e08b      	b.n	8005494 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800537c:	2280      	movs	r2, #128	@ 0x80
 800537e:	69d9      	ldr	r1, [r3, #28]
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	4211      	tst	r1, r2
 8005384:	d000      	beq.n	8005388 <UART_CheckIdleState+0xd0>
 8005386:	e0b7      	b.n	80054f8 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	025b      	lsls	r3, r3, #9
 800538c:	d4a5      	bmi.n	80052da <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800538e:	f7fc fe77 	bl	8002080 <HAL_GetTick>
 8005392:	1b40      	subs	r0, r0, r5
 8005394:	42b0      	cmp	r0, r6
 8005396:	d3e8      	bcc.n	800536a <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005398:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	2201      	movs	r2, #1
 800539e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053a2:	6821      	ldr	r1, [r4, #0]
 80053a4:	4d6d      	ldr	r5, [pc, #436]	@ (800555c <UART_CheckIdleState+0x2a4>)
 80053a6:	680b      	ldr	r3, [r1, #0]
 80053a8:	402b      	ands	r3, r5
 80053aa:	600b      	str	r3, [r1, #0]
 80053ac:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b4:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053b8:	6821      	ldr	r1, [r4, #0]
 80053ba:	688b      	ldr	r3, [r1, #8]
 80053bc:	4393      	bics	r3, r2
 80053be:	608b      	str	r3, [r1, #8]
 80053c0:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 80053c4:	238c      	movs	r3, #140	@ 0x8c
 80053c6:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 80053c8:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 80053ca:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 80053cc:	e78e      	b.n	80052ec <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053ce:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	2201      	movs	r2, #1
 80053d6:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053da:	6821      	ldr	r1, [r4, #0]
 80053dc:	4d5f      	ldr	r5, [pc, #380]	@ (800555c <UART_CheckIdleState+0x2a4>)
 80053de:	680b      	ldr	r3, [r1, #0]
 80053e0:	402b      	ands	r3, r5
 80053e2:	600b      	str	r3, [r1, #0]
 80053e4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	485b      	ldr	r0, [pc, #364]	@ (8005560 <UART_CheckIdleState+0x2a8>)
 80053f4:	6893      	ldr	r3, [r2, #8]
 80053f6:	4003      	ands	r3, r0
 80053f8:	6093      	str	r3, [r2, #8]
 80053fa:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005400:	2b01      	cmp	r3, #1
 8005402:	d10a      	bne.n	800541a <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005404:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005408:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800540c:	2010      	movs	r0, #16
 800540e:	6822      	ldr	r2, [r4, #0]
 8005410:	6813      	ldr	r3, [r2, #0]
 8005412:	4383      	bics	r3, r0
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800541a:	238c      	movs	r3, #140	@ 0x8c
 800541c:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005420:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005424:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005428:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800542a:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 800542c:	3a0c      	subs	r2, #12
 800542e:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 8005430:	e781      	b.n	8005336 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005432:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005434:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	2201      	movs	r2, #1
 800543a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800543e:	6821      	ldr	r1, [r4, #0]
 8005440:	4d46      	ldr	r5, [pc, #280]	@ (800555c <UART_CheckIdleState+0x2a4>)
 8005442:	680b      	ldr	r3, [r1, #0]
 8005444:	402b      	ands	r3, r5
 8005446:	600b      	str	r3, [r1, #0]
 8005448:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800544c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005450:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005454:	6822      	ldr	r2, [r4, #0]
 8005456:	4842      	ldr	r0, [pc, #264]	@ (8005560 <UART_CheckIdleState+0x2a8>)
 8005458:	6893      	ldr	r3, [r2, #8]
 800545a:	4003      	ands	r3, r0
 800545c:	6093      	str	r3, [r2, #8]
 800545e:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005462:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d10a      	bne.n	800547e <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005468:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005470:	2010      	movs	r0, #16
 8005472:	6822      	ldr	r2, [r4, #0]
 8005474:	6813      	ldr	r3, [r2, #0]
 8005476:	4383      	bics	r3, r0
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800547e:	2220      	movs	r2, #32
 8005480:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005482:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8005484:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005486:	2300      	movs	r3, #0
 8005488:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800548a:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800548c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 800548e:	3264      	adds	r2, #100	@ 0x64
 8005490:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005492:	e750      	b.n	8005336 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005494:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	2201      	movs	r2, #1
 800549c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054a0:	6821      	ldr	r1, [r4, #0]
 80054a2:	4d2e      	ldr	r5, [pc, #184]	@ (800555c <UART_CheckIdleState+0x2a4>)
 80054a4:	680b      	ldr	r3, [r1, #0]
 80054a6:	402b      	ands	r3, r5
 80054a8:	600b      	str	r3, [r1, #0]
 80054aa:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ae:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b2:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	4829      	ldr	r0, [pc, #164]	@ (8005560 <UART_CheckIdleState+0x2a8>)
 80054ba:	6893      	ldr	r3, [r2, #8]
 80054bc:	4003      	ands	r3, r0
 80054be:	6093      	str	r3, [r2, #8]
 80054c0:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10a      	bne.n	80054e0 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ca:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ce:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054d2:	2010      	movs	r0, #16
 80054d4:	6822      	ldr	r2, [r4, #0]
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	4383      	bics	r3, r0
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80054e0:	238c      	movs	r3, #140	@ 0x8c
 80054e2:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054e4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80054e6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ea:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ec:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80054ee:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054f0:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80054f2:	3a0c      	subs	r2, #12
 80054f4:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80054f6:	e74f      	b.n	8005398 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054fa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fe:	2201      	movs	r2, #1
 8005500:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	4d15      	ldr	r5, [pc, #84]	@ (800555c <UART_CheckIdleState+0x2a4>)
 8005508:	680b      	ldr	r3, [r1, #0]
 800550a:	402b      	ands	r3, r5
 800550c:	600b      	str	r3, [r1, #0]
 800550e:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005512:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005516:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800551a:	6822      	ldr	r2, [r4, #0]
 800551c:	4810      	ldr	r0, [pc, #64]	@ (8005560 <UART_CheckIdleState+0x2a8>)
 800551e:	6893      	ldr	r3, [r2, #8]
 8005520:	4003      	ands	r3, r0
 8005522:	6093      	str	r3, [r2, #8]
 8005524:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005528:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10a      	bne.n	8005544 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800552e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005536:	2010      	movs	r0, #16
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	6813      	ldr	r3, [r2, #0]
 800553c:	4383      	bics	r3, r0
 800553e:	6013      	str	r3, [r2, #0]
 8005540:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	2220      	movs	r2, #32
 8005546:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005548:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 800554a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800554c:	2300      	movs	r3, #0
 800554e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8005550:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005552:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8005554:	3264      	adds	r2, #100	@ 0x64
 8005556:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005558:	e71e      	b.n	8005398 <UART_CheckIdleState+0xe0>
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	fffffedf 	.word	0xfffffedf
 8005560:	effffffe 	.word	0xeffffffe

08005564 <HAL_UART_Init>:
{
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005568:	d03e      	beq.n	80055e8 <HAL_UART_Init+0x84>
  if (huart->gState == HAL_UART_STATE_RESET)
 800556a:	2388      	movs	r3, #136	@ 0x88
 800556c:	58c3      	ldr	r3, [r0, r3]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d100      	bne.n	8005574 <HAL_UART_Init+0x10>
 8005572:	e07d      	b.n	8005670 <HAL_UART_Init+0x10c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005574:	2388      	movs	r3, #136	@ 0x88
 8005576:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005578:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800557a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	3a23      	subs	r2, #35	@ 0x23
 8005580:	4393      	bics	r3, r2
 8005582:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005584:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005586:	2b00      	cmp	r3, #0
 8005588:	d000      	beq.n	800558c <HAL_UART_Init+0x28>
 800558a:	e06d      	b.n	8005668 <HAL_UART_Init+0x104>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800558c:	6921      	ldr	r1, [r4, #16]
 800558e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005590:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005592:	430b      	orrs	r3, r1
 8005594:	6961      	ldr	r1, [r4, #20]
 8005596:	69e0      	ldr	r0, [r4, #28]
 8005598:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800559a:	498a      	ldr	r1, [pc, #552]	@ (80057c4 <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800559c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800559e:	400a      	ands	r2, r1
 80055a0:	4313      	orrs	r3, r2
 80055a2:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055a4:	686b      	ldr	r3, [r5, #4]
 80055a6:	4a88      	ldr	r2, [pc, #544]	@ (80057c8 <HAL_UART_Init+0x264>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055a8:	4988      	ldr	r1, [pc, #544]	@ (80057cc <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055aa:	4013      	ands	r3, r2
 80055ac:	68e2      	ldr	r2, [r4, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055b2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055b4:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055b6:	428d      	cmp	r5, r1
 80055b8:	d066      	beq.n	8005688 <HAL_UART_Init+0x124>
    tmpreg |= huart->Init.OneBitSampling;
 80055ba:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055bc:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80055be:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c0:	4e83      	ldr	r6, [pc, #524]	@ (80057d0 <HAL_UART_Init+0x26c>)
 80055c2:	4031      	ands	r1, r6
 80055c4:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055c6:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055c8:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055ca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80055cc:	438b      	bics	r3, r1
 80055ce:	4313      	orrs	r3, r2
 80055d0:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055d2:	4b80      	ldr	r3, [pc, #512]	@ (80057d4 <HAL_UART_Init+0x270>)
 80055d4:	429d      	cmp	r5, r3
 80055d6:	d009      	beq.n	80055ec <HAL_UART_Init+0x88>
 80055d8:	4b7f      	ldr	r3, [pc, #508]	@ (80057d8 <HAL_UART_Init+0x274>)
 80055da:	429d      	cmp	r5, r3
 80055dc:	d012      	beq.n	8005604 <HAL_UART_Init+0xa0>
  huart->NbRxDataToProcess = 1;
 80055de:	4b7f      	ldr	r3, [pc, #508]	@ (80057dc <HAL_UART_Init+0x278>)
 80055e0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80055e2:	2300      	movs	r3, #0
 80055e4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80055e6:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 80055e8:	2001      	movs	r0, #1
}
 80055ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055ec:	4b7c      	ldr	r3, [pc, #496]	@ (80057e0 <HAL_UART_Init+0x27c>)
 80055ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80055f0:	2303      	movs	r3, #3
 80055f2:	400b      	ands	r3, r1
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d040      	beq.n	800567a <HAL_UART_Init+0x116>
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d100      	bne.n	80055fe <HAL_UART_Init+0x9a>
 80055fc:	e0ab      	b.n	8005756 <HAL_UART_Init+0x1f2>
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d100      	bne.n	8005604 <HAL_UART_Init+0xa0>
 8005602:	e0a1      	b.n	8005748 <HAL_UART_Init+0x1e4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	4298      	cmp	r0, r3
 800560a:	d100      	bne.n	800560e <HAL_UART_Init+0xaa>
 800560c:	e0d4      	b.n	80057b8 <HAL_UART_Init+0x254>
        pclk = HAL_RCC_GetPCLK1Freq();
 800560e:	f7fe f889 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005612:	2800      	cmp	r0, #0
 8005614:	d100      	bne.n	8005618 <HAL_UART_Init+0xb4>
 8005616:	e091      	b.n	800573c <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005618:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800561a:	4b72      	ldr	r3, [pc, #456]	@ (80057e4 <HAL_UART_Init+0x280>)
 800561c:	0052      	lsls	r2, r2, #1
 800561e:	5ad1      	ldrh	r1, [r2, r3]
 8005620:	f7fa fd70 	bl	8000104 <__udivsi3>
 8005624:	6865      	ldr	r5, [r4, #4]
 8005626:	086b      	lsrs	r3, r5, #1
 8005628:	18c0      	adds	r0, r0, r3
 800562a:	0029      	movs	r1, r5
 800562c:	f7fa fd6a 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005630:	0002      	movs	r2, r0
 8005632:	4b6d      	ldr	r3, [pc, #436]	@ (80057e8 <HAL_UART_Init+0x284>)
 8005634:	3a10      	subs	r2, #16
 8005636:	429a      	cmp	r2, r3
 8005638:	d8d1      	bhi.n	80055de <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800563e:	4a67      	ldr	r2, [pc, #412]	@ (80057dc <HAL_UART_Init+0x278>)
 8005640:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005642:	2200      	movs	r2, #0
 8005644:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005646:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	4968      	ldr	r1, [pc, #416]	@ (80057ec <HAL_UART_Init+0x288>)
  return (UART_CheckIdleState(huart));
 800564c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800564e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005650:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	438a      	bics	r2, r1
 8005658:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	3929      	subs	r1, #41	@ 0x29
 800565e:	430a      	orrs	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005662:	f7ff fe29 	bl	80052b8 <UART_CheckIdleState>
 8005666:	e7c0      	b.n	80055ea <HAL_UART_Init+0x86>
    UART_AdvFeatureConfig(huart);
 8005668:	0020      	movs	r0, r4
 800566a:	f7ff fdbd 	bl	80051e8 <UART_AdvFeatureConfig>
 800566e:	e78d      	b.n	800558c <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8005670:	2284      	movs	r2, #132	@ 0x84
 8005672:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005674:	f7fc f95e 	bl	8001934 <HAL_UART_MspInit>
 8005678:	e77c      	b.n	8005574 <HAL_UART_Init+0x10>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	021b      	lsls	r3, r3, #8
 800567e:	4298      	cmp	r0, r3
 8005680:	d100      	bne.n	8005684 <HAL_UART_Init+0x120>
 8005682:	e093      	b.n	80057ac <HAL_UART_Init+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8005684:	485a      	ldr	r0, [pc, #360]	@ (80057f0 <HAL_UART_Init+0x28c>)
 8005686:	e7c8      	b.n	800561a <HAL_UART_Init+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005688:	68a9      	ldr	r1, [r5, #8]
 800568a:	4851      	ldr	r0, [pc, #324]	@ (80057d0 <HAL_UART_Init+0x26c>)
 800568c:	4001      	ands	r1, r0
 800568e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005690:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005692:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005694:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005696:	2080      	movs	r0, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005698:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800569a:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800569c:	4313      	orrs	r3, r2
 800569e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a0:	4b4f      	ldr	r3, [pc, #316]	@ (80057e0 <HAL_UART_Init+0x27c>)
 80056a2:	0109      	lsls	r1, r1, #4
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	0100      	lsls	r0, r0, #4
 80056a8:	400b      	ands	r3, r1
 80056aa:	4283      	cmp	r3, r0
 80056ac:	d100      	bne.n	80056b0 <HAL_UART_Init+0x14c>
 80056ae:	e086      	b.n	80057be <HAL_UART_Init+0x25a>
 80056b0:	d80d      	bhi.n	80056ce <HAL_UART_Init+0x16a>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d07c      	beq.n	80057b0 <HAL_UART_Init+0x24c>
 80056b6:	2280      	movs	r2, #128	@ 0x80
 80056b8:	00d2      	lsls	r2, r2, #3
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d000      	beq.n	80056c0 <HAL_UART_Init+0x15c>
 80056be:	e78e      	b.n	80055de <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 80056c0:	f7fd ff1a 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
 80056c4:	0005      	movs	r5, r0
    if (pclk != 0U)
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	d06a      	beq.n	80057a0 <HAL_UART_Init+0x23c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056ca:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80056cc:	e004      	b.n	80056d8 <HAL_UART_Init+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ce:	428b      	cmp	r3, r1
 80056d0:	d000      	beq.n	80056d4 <HAL_UART_Init+0x170>
 80056d2:	e784      	b.n	80055de <HAL_UART_Init+0x7a>
        pclk = (uint32_t) LSE_VALUE;
 80056d4:	2580      	movs	r5, #128	@ 0x80
 80056d6:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80056d8:	4b42      	ldr	r3, [pc, #264]	@ (80057e4 <HAL_UART_Init+0x280>)
 80056da:	0052      	lsls	r2, r2, #1
 80056dc:	5ad6      	ldrh	r6, [r2, r3]
 80056de:	0028      	movs	r0, r5
 80056e0:	0031      	movs	r1, r6
 80056e2:	f7fa fd0f 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056e6:	6867      	ldr	r7, [r4, #4]
 80056e8:	007b      	lsls	r3, r7, #1
 80056ea:	19db      	adds	r3, r3, r7
 80056ec:	4298      	cmp	r0, r3
 80056ee:	d200      	bcs.n	80056f2 <HAL_UART_Init+0x18e>
 80056f0:	e775      	b.n	80055de <HAL_UART_Init+0x7a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80056f2:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80056f4:	4298      	cmp	r0, r3
 80056f6:	d900      	bls.n	80056fa <HAL_UART_Init+0x196>
 80056f8:	e771      	b.n	80055de <HAL_UART_Init+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056fa:	0032      	movs	r2, r6
 80056fc:	2300      	movs	r3, #0
 80056fe:	0028      	movs	r0, r5
 8005700:	2100      	movs	r1, #0
 8005702:	f7fa fd8b 	bl	800021c <__aeabi_uldivmod>
 8005706:	2600      	movs	r6, #0
 8005708:	0e05      	lsrs	r5, r0, #24
 800570a:	020b      	lsls	r3, r1, #8
 800570c:	432b      	orrs	r3, r5
 800570e:	0202      	lsls	r2, r0, #8
 8005710:	087d      	lsrs	r5, r7, #1
 8005712:	1952      	adds	r2, r2, r5
 8005714:	4173      	adcs	r3, r6
 8005716:	0010      	movs	r0, r2
 8005718:	0019      	movs	r1, r3
 800571a:	003a      	movs	r2, r7
 800571c:	2300      	movs	r3, #0
 800571e:	f7fa fd7d 	bl	800021c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005722:	4b34      	ldr	r3, [pc, #208]	@ (80057f4 <HAL_UART_Init+0x290>)
 8005724:	18c2      	adds	r2, r0, r3
 8005726:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <HAL_UART_Init+0x294>)
 8005728:	429a      	cmp	r2, r3
 800572a:	d900      	bls.n	800572e <HAL_UART_Init+0x1ca>
 800572c:	e757      	b.n	80055de <HAL_UART_Init+0x7a>
          huart->Instance->BRR = usartdiv;
 800572e:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 8005730:	4a2a      	ldr	r2, [pc, #168]	@ (80057dc <HAL_UART_Init+0x278>)
          huart->Instance->BRR = usartdiv;
 8005732:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8005734:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005736:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005738:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 800573a:	e785      	b.n	8005648 <HAL_UART_Init+0xe4>
  huart->NbRxDataToProcess = 1;
 800573c:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 800573e:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005740:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005742:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	e77f      	b.n	8005648 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	4298      	cmp	r0, r3
 800574e:	d008      	beq.n	8005762 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8005750:	f7fd fed2 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
        break;
 8005754:	e75d      	b.n	8005612 <HAL_UART_Init+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005756:	2380      	movs	r3, #128	@ 0x80
 8005758:	021b      	lsls	r3, r3, #8
 800575a:	4298      	cmp	r0, r3
 800575c:	d006      	beq.n	800576c <HAL_UART_Init+0x208>
        pclk = (uint32_t) LSE_VALUE;
 800575e:	0018      	movs	r0, r3
 8005760:	e75b      	b.n	800561a <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fd fec9 	bl	80034f8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005766:	2800      	cmp	r0, #0
 8005768:	d0e8      	beq.n	800573c <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <HAL_UART_Init+0x280>)
 800576e:	0052      	lsls	r2, r2, #1
 8005770:	5ad1      	ldrh	r1, [r2, r3]
 8005772:	f7fa fcc7 	bl	8000104 <__udivsi3>
 8005776:	6865      	ldr	r5, [r4, #4]
 8005778:	0040      	lsls	r0, r0, #1
 800577a:	086b      	lsrs	r3, r5, #1
 800577c:	18c0      	adds	r0, r0, r3
 800577e:	0029      	movs	r1, r5
 8005780:	f7fa fcc0 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005784:	0002      	movs	r2, r0
 8005786:	4b18      	ldr	r3, [pc, #96]	@ (80057e8 <HAL_UART_Init+0x284>)
 8005788:	3a10      	subs	r2, #16
 800578a:	429a      	cmp	r2, r3
 800578c:	d900      	bls.n	8005790 <HAL_UART_Init+0x22c>
 800578e:	e726      	b.n	80055de <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005790:	4a1a      	ldr	r2, [pc, #104]	@ (80057fc <HAL_UART_Init+0x298>)
        huart->Instance->BRR = brrtemp;
 8005792:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005794:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005796:	0700      	lsls	r0, r0, #28
 8005798:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800579a:	4302      	orrs	r2, r0
 800579c:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800579e:	e74e      	b.n	800563e <HAL_UART_Init+0xda>
 80057a0:	4b0e      	ldr	r3, [pc, #56]	@ (80057dc <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 80057a2:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80057a4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80057a6:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	e74d      	b.n	8005648 <HAL_UART_Init+0xe4>
        pclk = (uint32_t) HSI_VALUE;
 80057ac:	4810      	ldr	r0, [pc, #64]	@ (80057f0 <HAL_UART_Init+0x28c>)
 80057ae:	e7dd      	b.n	800576c <HAL_UART_Init+0x208>
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b0:	f7fd ffb8 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 80057b4:	0005      	movs	r5, r0
        break;
 80057b6:	e786      	b.n	80056c6 <HAL_UART_Init+0x162>
        pclk = HAL_RCC_GetPCLK1Freq();
 80057b8:	f7fd ffb4 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
        break;
 80057bc:	e7d3      	b.n	8005766 <HAL_UART_Init+0x202>
        pclk = (uint32_t) HSI_VALUE;
 80057be:	4d0c      	ldr	r5, [pc, #48]	@ (80057f0 <HAL_UART_Init+0x28c>)
 80057c0:	e78a      	b.n	80056d8 <HAL_UART_Init+0x174>
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	cfff69f3 	.word	0xcfff69f3
 80057c8:	ffffcfff 	.word	0xffffcfff
 80057cc:	40008000 	.word	0x40008000
 80057d0:	11fff4ff 	.word	0x11fff4ff
 80057d4:	40013800 	.word	0x40013800
 80057d8:	40004400 	.word	0x40004400
 80057dc:	00010001 	.word	0x00010001
 80057e0:	40021000 	.word	0x40021000
 80057e4:	0800635c 	.word	0x0800635c
 80057e8:	0000ffef 	.word	0x0000ffef
 80057ec:	ffffb7ff 	.word	0xffffb7ff
 80057f0:	00f42400 	.word	0x00f42400
 80057f4:	fffffd00 	.word	0xfffffd00
 80057f8:	000ffcff 	.word	0x000ffcff
 80057fc:	0000fff0 	.word	0x0000fff0

08005800 <memset>:
 8005800:	0003      	movs	r3, r0
 8005802:	1882      	adds	r2, r0, r2
 8005804:	4293      	cmp	r3, r2
 8005806:	d100      	bne.n	800580a <memset+0xa>
 8005808:	4770      	bx	lr
 800580a:	7019      	strb	r1, [r3, #0]
 800580c:	3301      	adds	r3, #1
 800580e:	e7f9      	b.n	8005804 <memset+0x4>

08005810 <__libc_init_array>:
 8005810:	b570      	push	{r4, r5, r6, lr}
 8005812:	2600      	movs	r6, #0
 8005814:	4c0c      	ldr	r4, [pc, #48]	@ (8005848 <__libc_init_array+0x38>)
 8005816:	4d0d      	ldr	r5, [pc, #52]	@ (800584c <__libc_init_array+0x3c>)
 8005818:	1b64      	subs	r4, r4, r5
 800581a:	10a4      	asrs	r4, r4, #2
 800581c:	42a6      	cmp	r6, r4
 800581e:	d109      	bne.n	8005834 <__libc_init_array+0x24>
 8005820:	2600      	movs	r6, #0
 8005822:	f000 f819 	bl	8005858 <_init>
 8005826:	4c0a      	ldr	r4, [pc, #40]	@ (8005850 <__libc_init_array+0x40>)
 8005828:	4d0a      	ldr	r5, [pc, #40]	@ (8005854 <__libc_init_array+0x44>)
 800582a:	1b64      	subs	r4, r4, r5
 800582c:	10a4      	asrs	r4, r4, #2
 800582e:	42a6      	cmp	r6, r4
 8005830:	d105      	bne.n	800583e <__libc_init_array+0x2e>
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	00b3      	lsls	r3, r6, #2
 8005836:	58eb      	ldr	r3, [r5, r3]
 8005838:	4798      	blx	r3
 800583a:	3601      	adds	r6, #1
 800583c:	e7ee      	b.n	800581c <__libc_init_array+0xc>
 800583e:	00b3      	lsls	r3, r6, #2
 8005840:	58eb      	ldr	r3, [r5, r3]
 8005842:	4798      	blx	r3
 8005844:	3601      	adds	r6, #1
 8005846:	e7f2      	b.n	800582e <__libc_init_array+0x1e>
 8005848:	0800637c 	.word	0x0800637c
 800584c:	0800637c 	.word	0x0800637c
 8005850:	08006380 	.word	0x08006380
 8005854:	0800637c 	.word	0x0800637c

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	46c0      	nop			@ (mov r8, r8)
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
