
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3a4  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800d460  0800d460  0000e460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ded0  0800ded0  0000f458  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ded0  0800ded0  0000eed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ded8  0800ded8  0000f458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ded8  0800ded8  0000eed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dedc  0800dedc  0000eedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000458  20000000  0800dee0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000458  0800e338  0000f458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce8  0800e338  0000fce8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020f6b  00000000  00000000  0000f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000472f  00000000  00000000  000303eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d0  00000000  00000000  00034b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000126c  00000000  00000000  000362f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001596e  00000000  00000000  0003755c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000833f  00000000  00000000  0004ceca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00055209  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000054a0  00000000  00000000  0005524c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000054  00000000  00000000  0005a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000458 	.word	0x20000458
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800d448 	.word	0x0800d448

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000045c 	.word	0x2000045c
 8000100:	0800d448 	.word	0x0800d448

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000474 	.word	0x20000474
 80004fc:	0800d460 	.word	0x0800d460
 8000500:	20000484 	.word	0x20000484
 8000504:	20000000 	.word	0x20000000
 8000508:	0800d468 	.word	0x0800d468
 800050c:	20000008 	.word	0x20000008
 8000510:	0800d470 	.word	0x0800d470
 8000514:	20000010 	.word	0x20000010
 8000518:	0800d478 	.word	0x0800d478
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000438 	.word	0x20000438
 80006cc:	20000c74 	.word	0x20000c74
 80006d0:	20000c50 	.word	0x20000c50
 80006d4:	20000430 	.word	0x20000430
 80006d8:	20000434 	.word	0x20000434
 80006dc:	2000043c 	.word	0x2000043c
 80006e0:	20000440 	.word	0x20000440
 80006e4:	200004bc 	.word	0x200004bc
 80006e8:	20000494 	.word	0x20000494
 80006ec:	200004c4 	.word	0x200004c4
 80006f0:	200004c5 	.word	0x200004c5
 80006f4:	200004c6 	.word	0x200004c6
 80006f8:	200004c7 	.word	0x200004c7
 80006fc:	200004c8 	.word	0x200004c8

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f005 fb3c 	bl	8005fb8 <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f005 fb19 	bl	8005f94 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b01      	cmp	r3, #1
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f005 fb03 	bl	8005f94 <Set_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b00      	cmp	r3, #0
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f005 fb02 	bl	8005fb8 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000438 	.word	0x20000438
 8000c3c:	200004c4 	.word	0x200004c4

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000430 	.word	0x20000430
 8000c70:	200004c4 	.word	0x200004c4

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	20000434 	.word	0x20000434
 8000ca4:	200004c4 	.word	0x200004c4

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	2000043c 	.word	0x2000043c
 8000cd8:	200004c4 	.word	0x200004c4

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000440 	.word	0x20000440
 8000d0c:	200004c4 	.word	0x200004c4

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000438 	.word	0x20000438
 8000d70:	20000430 	.word	0x20000430
 8000d74:	20000434 	.word	0x20000434
 8000d78:	2000043c 	.word	0x2000043c
 8000d7c:	20000440 	.word	0x20000440

08000d80 <set_LED_to_state>:

//VARIABLE DEFINITIONS
volatile uint8_t LED_counter = 0;
volatile uint32_t led_blink_period = LED_BLINK_PERIOD;

uint8_t set_LED_to_state(volatile struct LED_FSM *LED_FSM_ptr, enum LED_States desired_state){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	000a      	movs	r2, r1
 8000d8a:	1cfb      	adds	r3, r7, #3
 8000d8c:	701a      	strb	r2, [r3, #0]

	if(desired_state == LED_CONFIRM){
 8000d8e:	1cfb      	adds	r3, r7, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b07      	cmp	r3, #7
 8000d94:	d114      	bne.n	8000dc0 <set_LED_to_state+0x40>

		if(LED_fsm.current_state != LED_CONFIRM){
 8000d96:	4b1d      	ldr	r3, [pc, #116]	@ (8000e0c <set_LED_to_state+0x8c>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d026      	beq.n	8000dee <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000da0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e10 <set_LED_to_state+0x90>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD >> 1;
 8000da8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e14 <set_LED_to_state+0x94>)
 8000daa:	2296      	movs	r2, #150	@ 0x96
 8000dac:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	@ (8000e18 <set_LED_to_state+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000db4:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <set_LED_to_state+0x90>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a16      	ldr	r2, [pc, #88]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dba:	6812      	ldr	r2, [r2, #0]
 8000dbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dbe:	e016      	b.n	8000dee <set_LED_to_state+0x6e>
		}
	}
	else{

		if(LED_FSM_ptr->current_state != desired_state){
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	1cfa      	adds	r2, r7, #3
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d00f      	beq.n	8000dee <set_LED_to_state+0x6e>

			__HAL_TIM_SET_COUNTER(&htim14, 0);
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <set_LED_to_state+0x90>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	@ 0x24
			led_blink_period = LED_BLINK_PERIOD;
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dd8:	2296      	movs	r2, #150	@ 0x96
 8000dda:	0052      	lsls	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
			LED_counter = 0;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	@ (8000e18 <set_LED_to_state+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, led_blink_period);
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <set_LED_to_state+0x90>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <set_LED_to_state+0x94>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}

	LED_FSM_ptr->prev_state = LED_FSM_ptr->current_state;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	705a      	strb	r2, [r3, #1]
	LED_FSM_ptr->current_state = desired_state;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	1cfa      	adds	r2, r7, #3
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]

	return 1;
 8000e00:	2301      	movs	r3, #1
}
 8000e02:	0018      	movs	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b002      	add	sp, #8
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000448 	.word	0x20000448
 8000e10:	200005e0 	.word	0x200005e0
 8000e14:	20000020 	.word	0x20000020
 8000e18:	200004c9 	.word	0x200004c9

08000e1c <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	7812      	ldrb	r2, [r2, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	187a      	adds	r2, r7, r1
 8000e32:	7812      	ldrb	r2, [r2, #0]
 8000e34:	09d2      	lsrs	r2, r2, #7
 8000e36:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000e44:	2300      	movs	r3, #0
	}
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b004      	add	sp, #16
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000e56:	210f      	movs	r1, #15
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	7812      	ldrb	r2, [r2, #0]
 8000e5e:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	187a      	adds	r2, r7, r1
 8000e64:	7812      	ldrb	r2, [r2, #0]
 8000e66:	09d2      	lsrs	r2, r2, #7
 8000e68:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000e76:	2301      	movs	r3, #1
	}
}
 8000e78:	0018      	movs	r0, r3
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000e88:	210f      	movs	r1, #15
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	200e      	movs	r0, #14
 8000e98:	183b      	adds	r3, r7, r0
 8000e9a:	0912      	lsrs	r2, r2, #4
 8000e9c:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e9e:	183a      	adds	r2, r7, r0
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d101      	bne.n	8000eae <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e000      	b.n	8000eb0 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000eae:	2300      	movs	r3, #0
	}
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	220b      	movs	r2, #11
 8000ec6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	200e      	movs	r0, #14
 8000ed0:	183b      	adds	r3, r7, r0
 8000ed2:	0912      	lsrs	r2, r2, #4
 8000ed4:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000ed6:	183a      	adds	r2, r7, r0
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	7812      	ldrb	r2, [r2, #0]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d101      	bne.n	8000ee6 <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000ee6:	2300      	movs	r3, #0
	}
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b004      	add	sp, #16
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b77      	cmp	r3, #119	@ 0x77
 8000f00:	d91d      	bls.n	8000f3e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b79      	cmp	r3, #121	@ 0x79
 8000f0a:	d101      	bne.n	8000f10 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e017      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f18:	d101      	bne.n	8000f1e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e010      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f26:	d101      	bne.n	8000f2c <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e009      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f34:	d101      	bne.n	8000f3a <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000f3e:	2300      	movs	r3, #0
	}
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b002      	add	sp, #8
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b77      	cmp	r3, #119	@ 0x77
 8000f58:	d901      	bls.n	8000f5e <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e023      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b14      	cmp	r3, #20
 8000f66:	d101      	bne.n	8000f6c <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e01c      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	2b15      	cmp	r3, #21
 8000f74:	d101      	bne.n	8000f7a <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e015      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b16      	cmp	r3, #22
 8000f82:	d101      	bne.n	8000f88 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e00e      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	2b17      	cmp	r3, #23
 8000f90:	d101      	bne.n	8000f96 <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e007      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b18      	cmp	r3, #24
 8000f9e:	d101      	bne.n	8000fa4 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e000      	b.n	8000fa6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000fa4:	2300      	movs	r3, #0
		}
	}
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}

08000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b79      	cmp	r3, #121	@ 0x79
 8000fc0:	d108      	bne.n	8000fd4 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d101      	bne.n	8000fd0 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e031      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e02f      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b7a      	cmp	r3, #122	@ 0x7a
 8000fdc:	d10d      	bne.n	8000ffa <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d004      	beq.n	8000ff2 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff0:	d101      	bne.n	8000ff6 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01e      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e01c      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b7c      	cmp	r3, #124	@ 0x7c
 8001002:	d108      	bne.n	8001016 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 800100e:	2301      	movs	r3, #1
 8001010:	e010      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001012:	2300      	movs	r3, #0
 8001014:	e00e      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b7d      	cmp	r3, #125	@ 0x7d
 800101e:	d108      	bne.n	8001032 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8001032:	2300      	movs	r3, #0
	}
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b002      	add	sp, #8
 800103a:	bd80      	pop	{r7, pc}

0800103c <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2bf0      	cmp	r3, #240	@ 0xf0
 800104c:	d101      	bne.n	8001052 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001052:	2300      	movs	r3, #0
	}
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b002      	add	sp, #8
 800105a:	bd80      	pop	{r7, pc}

0800105c <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	000a      	movs	r2, r1
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	200f      	movs	r0, #15
 8001072:	183b      	adds	r3, r7, r0
 8001074:	210f      	movs	r1, #15
 8001076:	400a      	ands	r2, r1
 8001078:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 800107a:	210e      	movs	r1, #14
 800107c:	187b      	adds	r3, r7, r1
 800107e:	1cfa      	adds	r2, r7, #3
 8001080:	7812      	ldrb	r2, [r2, #0]
 8001082:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8001084:	183a      	adds	r2, r7, r0
 8001086:	187b      	adds	r3, r7, r1
 8001088:	7812      	ldrb	r2, [r2, #0]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	429a      	cmp	r2, r3
 800108e:	d101      	bne.n	8001094 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8001094:	2300      	movs	r3, #0
	}
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b084      	sub	sp, #16
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 80010a6:	230e      	movs	r3, #14
 80010a8:	18fb      	adds	r3, r7, r3
 80010aa:	2200      	movs	r2, #0
 80010ac:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010ae:	230d      	movs	r3, #13
 80010b0:	18fb      	adds	r3, r7, r3
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e011      	b.n	80010dc <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 80010b8:	200d      	movs	r0, #13
 80010ba:	183b      	adds	r3, r7, r0
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	5cd3      	ldrb	r3, [r2, r3]
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	0019      	movs	r1, r3
 80010c6:	220e      	movs	r2, #14
 80010c8:	18bb      	adds	r3, r7, r2
 80010ca:	18ba      	adds	r2, r7, r2
 80010cc:	8812      	ldrh	r2, [r2, #0]
 80010ce:	188a      	adds	r2, r1, r2
 80010d0:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80010d2:	183b      	adds	r3, r7, r0
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	183b      	adds	r3, r7, r0
 80010d8:	3201      	adds	r2, #1
 80010da:	701a      	strb	r2, [r3, #0]
 80010dc:	230d      	movs	r3, #13
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	d9e8      	bls.n	80010b8 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 80010e6:	230e      	movs	r3, #14
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d101      	bne.n	80010f4 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e000      	b.n	80010f6 <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 80010f4:	2300      	movs	r3, #0
	}
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}

080010fe <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001106:	230f      	movs	r3, #15
 8001108:	18fb      	adds	r3, r7, r3
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	e00a      	b.n	8001126 <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001110:	200f      	movs	r0, #15
 8001112:	183b      	adds	r3, r7, r0
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	2100      	movs	r1, #0
 800111a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800111c:	183b      	adds	r3, r7, r0
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	183b      	adds	r3, r7, r0
 8001122:	3201      	adds	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b09      	cmp	r3, #9
 800112e:	d9ef      	bls.n	8001110 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001130:	2301      	movs	r3, #1
}
 8001132:	0018      	movs	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	b004      	add	sp, #16
 8001138:	bd80      	pop	{r7, pc}

0800113a <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
 8001142:	000a      	movs	r2, r1
 8001144:	1cfb      	adds	r3, r7, #3
 8001146:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	1cfa      	adds	r2, r7, #3
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d901      	bls.n	800115a <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 8001156:	2301      	movs	r3, #1
 8001158:	e000      	b.n	800115c <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800115a:	2300      	movs	r3, #0
	}
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b002      	add	sp, #8
 8001162:	bd80      	pop	{r7, pc}

08001164 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2bf8      	cmp	r3, #248	@ 0xf8
 8001174:	d101      	bne.n	800117a <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 8001176:	2301      	movs	r3, #1
 8001178:	e023      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2bfa      	cmp	r3, #250	@ 0xfa
 8001182:	d101      	bne.n	8001188 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 8001184:	2301      	movs	r3, #1
 8001186:	e01c      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2bfb      	cmp	r3, #251	@ 0xfb
 8001190:	d101      	bne.n	8001196 <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 8001192:	2301      	movs	r3, #1
 8001194:	e015      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2bfc      	cmp	r3, #252	@ 0xfc
 800119e:	d101      	bne.n	80011a4 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 80011a0:	2301      	movs	r3, #1
 80011a2:	e00e      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2bfe      	cmp	r3, #254	@ 0xfe
 80011ac:	d101      	bne.n	80011b2 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e007      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2bff      	cmp	r3, #255	@ 0xff
 80011ba:	d101      	bne.n	80011c0 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 80011c0:	2300      	movs	r3, #0
	}
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}

080011ca <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 80011ca:	b5b0      	push	{r4, r5, r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80011d2:	250f      	movs	r5, #15
 80011d4:	197c      	adds	r4, r7, r5
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	00da      	lsls	r2, r3, #3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	0011      	movs	r1, r2
 80011de:	0018      	movs	r0, r3
 80011e0:	f004 fec4 	bl	8005f6c <Get_Status_Bit>
 80011e4:	0003      	movs	r3, r0
 80011e6:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 80011e8:	197b      	adds	r3, r7, r5
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 80011f4:	2300      	movs	r3, #0
	}
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bdb0      	pop	{r4, r5, r7, pc}

080011fe <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001208:	2380      	movs	r3, #128	@ 0x80
 800120a:	005a      	lsls	r2, r3, #1
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	0018      	movs	r0, r3
 8001212:	f004 fed1 	bl	8005fb8 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8001216:	2380      	movs	r3, #128	@ 0x80
 8001218:	009a      	lsls	r2, r3, #2
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f004 feca 	bl	8005fb8 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]

	return 1;
 800122a:	2301      	movs	r3, #1
}
 800122c:	0018      	movs	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	b002      	add	sp, #8
 8001232:	bd80      	pop	{r7, pc}

08001234 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	b2da      	uxtb	r2, r3
 8001244:	4b22      	ldr	r3, [pc, #136]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001246:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001248:	4b22      	ldr	r3, [pc, #136]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 8001250:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001252:	4b21      	ldr	r3, [pc, #132]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 800125a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800125c:	4b1f      	ldr	r3, [pc, #124]	@ (80012dc <Reset_All_Controllers+0xa8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <Reset_All_Controllers+0xa8>)
 8001264:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001266:	4b1e      	ldr	r3, [pc, #120]	@ (80012e0 <Reset_All_Controllers+0xac>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	4b1c      	ldr	r3, [pc, #112]	@ (80012e0 <Reset_All_Controllers+0xac>)
 800126e:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <Reset_All_Controllers+0x9c>)
 8001272:	2202      	movs	r2, #2
 8001274:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <Reset_All_Controllers+0xa0>)
 8001278:	2202      	movs	r2, #2
 800127a:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <Reset_All_Controllers+0xa4>)
 800127e:	2202      	movs	r2, #2
 8001280:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <Reset_All_Controllers+0xa8>)
 8001284:	2202      	movs	r2, #2
 8001286:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <Reset_All_Controllers+0xac>)
 800128a:	2202      	movs	r2, #2
 800128c:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 800128e:	230e      	movs	r3, #14
 8001290:	18fb      	adds	r3, r7, r3
 8001292:	223f      	movs	r2, #63	@ 0x3f
 8001294:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001296:	230f      	movs	r3, #15
 8001298:	18fb      	adds	r3, r7, r3
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
 800129e:	e00c      	b.n	80012ba <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 80012a0:	200f      	movs	r0, #15
 80012a2:	183b      	adds	r3, r7, r0
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4a0f      	ldr	r2, [pc, #60]	@ (80012e4 <Reset_All_Controllers+0xb0>)
 80012a8:	210e      	movs	r1, #14
 80012aa:	1879      	adds	r1, r7, r1
 80012ac:	7809      	ldrb	r1, [r1, #0]
 80012ae:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	183b      	adds	r3, r7, r0
 80012b6:	3201      	adds	r2, #1
 80012b8:	701a      	strb	r2, [r3, #0]
 80012ba:	230f      	movs	r3, #15
 80012bc:	18fb      	adds	r3, r7, r3
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d9ed      	bls.n	80012a0 <Reset_All_Controllers+0x6c>
	}

	return 1;
 80012c4:	2301      	movs	r3, #1
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			@ (mov r8, r8)
 80012d0:	20000438 	.word	0x20000438
 80012d4:	20000430 	.word	0x20000430
 80012d8:	20000434 	.word	0x20000434
 80012dc:	2000043c 	.word	0x2000043c
 80012e0:	20000440 	.word	0x20000440
 80012e4:	200004c4 	.word	0x200004c4

080012e8 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012ec:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <Set_Local_Control+0x5c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <Set_Local_Control+0x5c>)
 80012f4:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012f6:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <Set_Local_Control+0x60>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <Set_Local_Control+0x60>)
 80012fe:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <Set_Local_Control+0x64>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2da      	uxtb	r2, r3
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <Set_Local_Control+0x64>)
 8001308:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <Set_Local_Control+0x68>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <Set_Local_Control+0x68>)
 8001312:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001314:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <Set_Local_Control+0x6c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b0e      	ldr	r3, [pc, #56]	@ (8001354 <Set_Local_Control+0x6c>)
 800131c:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <Set_Local_Control+0x5c>)
 8001320:	2201      	movs	r2, #1
 8001322:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <Set_Local_Control+0x60>)
 8001326:	2201      	movs	r2, #1
 8001328:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800132a:	4b08      	ldr	r3, [pc, #32]	@ (800134c <Set_Local_Control+0x64>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Set_Local_Control+0x68>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8001336:	4b07      	ldr	r3, [pc, #28]	@ (8001354 <Set_Local_Control+0x6c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]

	return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000438 	.word	0x20000438
 8001348:	20000430 	.word	0x20000430
 800134c:	20000434 	.word	0x20000434
 8001350:	2000043c 	.word	0x2000043c
 8001354:	20000440 	.word	0x20000440

08001358 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	00da      	lsls	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f004 fe25 	bl	8005fb8 <Clear_Status_Bit>

	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b002      	add	sp, #8
 8001376:	bd80      	pop	{r7, pc}

08001378 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	00da      	lsls	r2, r3, #3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	0011      	movs	r1, r2
 8001388:	0018      	movs	r0, r3
 800138a:	f004 fe03 	bl	8005f94 <Set_Status_Bit>

	return 1;
 800138e:	2301      	movs	r3, #1
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b002      	add	sp, #8
 8001396:	bd80      	pop	{r7, pc}

08001398 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800139c:	4904      	ldr	r1, [pc, #16]	@ (80013b0 <Start_UART_Receive+0x18>)
 800139e:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <Start_UART_Receive+0x1c>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	0018      	movs	r0, r3
 80013a4:	f00a fcf8 	bl	800bd98 <HAL_UART_Receive_DMA>

	return 1;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	0018      	movs	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200004dc 	.word	0x200004dc
 80013b4:	20000a48 	.word	0x20000a48

080013b8 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	000a      	movs	r2, r1
 80013c2:	1cfb      	adds	r3, r7, #3
 80013c4:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 80013d6:	2117      	movs	r1, #23
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 80013e6:	1cfb      	adds	r3, r7, #3
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10d      	bne.n	800140a <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 80013ee:	4b6d      	ldr	r3, [pc, #436]	@ (80015a4 <Pot_Check+0x1ec>)
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 80013f2:	4b6d      	ldr	r3, [pc, #436]	@ (80015a8 <Pot_Check+0x1f0>)
 80013f4:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 80013f6:	4b6d      	ldr	r3, [pc, #436]	@ (80015ac <Pot_Check+0x1f4>)
 80013f8:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 80013fe:	187b      	adds	r3, r7, r1
 8001400:	2246      	movs	r2, #70	@ 0x46
 8001402:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001404:	4b6a      	ldr	r3, [pc, #424]	@ (80015b0 <Pot_Check+0x1f8>)
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	e04e      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 800140a:	1cfb      	adds	r3, r7, #3
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d10f      	bne.n	8001432 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001412:	4b68      	ldr	r3, [pc, #416]	@ (80015b4 <Pot_Check+0x1fc>)
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001416:	4b68      	ldr	r3, [pc, #416]	@ (80015b8 <Pot_Check+0x200>)
 8001418:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 800141a:	4b68      	ldr	r3, [pc, #416]	@ (80015bc <Pot_Check+0x204>)
 800141c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3302      	adds	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001424:	2317      	movs	r3, #23
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2246      	movs	r2, #70	@ 0x46
 800142a:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <Pot_Check+0x208>)
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e03a      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001432:	1cfb      	adds	r3, r7, #3
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d10f      	bne.n	800145a <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 800143a:	4b62      	ldr	r3, [pc, #392]	@ (80015c4 <Pot_Check+0x20c>)
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 800143e:	4b62      	ldr	r3, [pc, #392]	@ (80015c8 <Pot_Check+0x210>)
 8001440:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001442:	4b62      	ldr	r3, [pc, #392]	@ (80015cc <Pot_Check+0x214>)
 8001444:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	3304      	adds	r3, #4
 800144a:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 800144c:	2317      	movs	r3, #23
 800144e:	18fb      	adds	r3, r7, r3
 8001450:	2246      	movs	r2, #70	@ 0x46
 8001452:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <Pot_Check+0x218>)
 8001456:	613b      	str	r3, [r7, #16]
 8001458:	e026      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 800145a:	1cfb      	adds	r3, r7, #3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b03      	cmp	r3, #3
 8001460:	d10f      	bne.n	8001482 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001462:	4b5c      	ldr	r3, [pc, #368]	@ (80015d4 <Pot_Check+0x21c>)
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001466:	4b5c      	ldr	r3, [pc, #368]	@ (80015d8 <Pot_Check+0x220>)
 8001468:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <Pot_Check+0x224>)
 800146c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3306      	adds	r3, #6
 8001472:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001474:	2317      	movs	r3, #23
 8001476:	18fb      	adds	r3, r7, r3
 8001478:	2246      	movs	r2, #70	@ 0x46
 800147a:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 800147c:	4b58      	ldr	r3, [pc, #352]	@ (80015e0 <Pot_Check+0x228>)
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	e012      	b.n	80014a8 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b04      	cmp	r3, #4
 8001488:	d10e      	bne.n	80014a8 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 800148a:	4b56      	ldr	r3, [pc, #344]	@ (80015e4 <Pot_Check+0x22c>)
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 800148e:	4b56      	ldr	r3, [pc, #344]	@ (80015e8 <Pot_Check+0x230>)
 8001490:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001492:	4b56      	ldr	r3, [pc, #344]	@ (80015ec <Pot_Check+0x234>)
 8001494:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3308      	adds	r3, #8
 800149a:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 800149c:	2317      	movs	r3, #23
 800149e:	18fb      	adds	r3, r7, r3
 80014a0:	2246      	movs	r2, #70	@ 0x46
 80014a2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 80014a4:	4b52      	ldr	r3, [pc, #328]	@ (80015f0 <Pot_Check+0x238>)
 80014a6:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10b      	bne.n	80014ca <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e066      	b.n	8001598 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d10b      	bne.n	80014ec <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	881a      	ldrh	r2, [r3, #0]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	701a      	strb	r2, [r3, #0]
 80014ea:	e055      	b.n	8001598 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d150      	bne.n	8001598 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 80014fc:	200a      	movs	r0, #10
 80014fe:	183b      	adds	r3, r7, r0
 8001500:	2200      	movs	r2, #0
 8001502:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	6a3b      	ldr	r3, [r7, #32]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d907      	bls.n	8001520 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	8819      	ldrh	r1, [r3, #0]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	881a      	ldrh	r2, [r3, #0]
 8001518:	183b      	adds	r3, r7, r0
 800151a:	1a8a      	subs	r2, r1, r2
 800151c:	801a      	strh	r2, [r3, #0]
 800151e:	e00d      	b.n	800153c <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	881a      	ldrh	r2, [r3, #0]
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	429a      	cmp	r2, r3
 800152a:	d907      	bls.n	800153c <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 800152c:	6a3b      	ldr	r3, [r7, #32]
 800152e:	8819      	ldrh	r1, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	881a      	ldrh	r2, [r3, #0]
 8001534:	230a      	movs	r3, #10
 8001536:	18fb      	adds	r3, r7, r3
 8001538:	1a8a      	subs	r2, r1, r2
 800153a:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 800153c:	2317      	movs	r3, #23
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	220a      	movs	r2, #10
 8001546:	18ba      	adds	r2, r7, r2
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	429a      	cmp	r2, r3
 800154c:	d924      	bls.n	8001598 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
 8001564:	e018      	b.n	8001598 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	7812      	ldrb	r2, [r2, #0]
 8001572:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <Pot_Check+0x23c>)
 800157c:	2120      	movs	r1, #32
 800157e:	0018      	movs	r0, r3
 8001580:	f004 fd1a 	bl	8005fb8 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <Pot_Check+0x23c>)
 8001586:	2140      	movs	r1, #64	@ 0x40
 8001588:	0018      	movs	r0, r3
 800158a:	f004 fd15 	bl	8005fb8 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 800158e:	4b19      	ldr	r3, [pc, #100]	@ (80015f4 <Pot_Check+0x23c>)
 8001590:	2108      	movs	r1, #8
 8001592:	0018      	movs	r0, r3
 8001594:	f004 fd10 	bl	8005fb8 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001598:	2301      	movs	r3, #1
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b00a      	add	sp, #40	@ 0x28
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	200004e4 	.word	0x200004e4
 80015a8:	200004e6 	.word	0x200004e6
 80015ac:	200004dd 	.word	0x200004dd
 80015b0:	20000438 	.word	0x20000438
 80015b4:	200004e8 	.word	0x200004e8
 80015b8:	200004ea 	.word	0x200004ea
 80015bc:	200004de 	.word	0x200004de
 80015c0:	20000430 	.word	0x20000430
 80015c4:	200004ec 	.word	0x200004ec
 80015c8:	200004ee 	.word	0x200004ee
 80015cc:	200004df 	.word	0x200004df
 80015d0:	20000434 	.word	0x20000434
 80015d4:	200004f0 	.word	0x200004f0
 80015d8:	200004f2 	.word	0x200004f2
 80015dc:	200004e0 	.word	0x200004e0
 80015e0:	2000043c 	.word	0x2000043c
 80015e4:	200004f4 	.word	0x200004f4
 80015e8:	200004f6 	.word	0x200004f6
 80015ec:	200004e1 	.word	0x200004e1
 80015f0:	20000440 	.word	0x20000440
 80015f4:	20000c38 	.word	0x20000c38

080015f8 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 80015f8:	b5b0      	push	{r4, r5, r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001600:	250f      	movs	r5, #15
 8001602:	197c      	adds	r4, r7, r5
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	23a0      	movs	r3, #160	@ 0xa0
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f006 fd52 	bl	80080b8 <HAL_GPIO_ReadPin>
 8001614:	0003      	movs	r3, r0
 8001616:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001618:	197b      	adds	r3, r7, r5
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10a      	bne.n	8001636 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001620:	4b1b      	ldr	r3, [pc, #108]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01e      	beq.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e017      	b.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001636:	4b16      	ldr	r3, [pc, #88]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0e      	cmp	r3, #14
 800163c:	d013      	beq.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d109      	bne.n	800165a <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001650:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
 8001658:	e005      	b.n	8001666 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3301      	adds	r3, #1
 8001660:	b2da      	uxtb	r2, r3
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001664:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d103      	bne.n	8001676 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	701a      	strb	r2, [r3, #0]
 8001674:	e006      	b.n	8001684 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001676:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <Check_Tap_Tempo_Switch_State+0x98>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b0e      	cmp	r3, #14
 800167c:	d102      	bne.n	8001684 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	0018      	movs	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	b004      	add	sp, #16
 800168c:	bdb0      	pop	{r4, r5, r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	20000024 	.word	0x20000024
 8001694:	200004f8 	.word	0x200004f8

08001698 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b093      	sub	sp, #76	@ 0x4c
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	2410      	movs	r4, #16
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	2338      	movs	r3, #56	@ 0x38
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f00b fe97 	bl	800d3dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	003b      	movs	r3, r7
 80016b0:	0018      	movs	r0, r3
 80016b2:	2310      	movs	r3, #16
 80016b4:	001a      	movs	r2, r3
 80016b6:	2100      	movs	r1, #0
 80016b8:	f00b fe90 	bl	800d3dc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016bc:	2380      	movs	r3, #128	@ 0x80
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	0018      	movs	r0, r3
 80016c2:	f007 f96b 	bl	800899c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	2202      	movs	r2, #2
 80016ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016cc:	193b      	adds	r3, r7, r4
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	0052      	lsls	r2, r2, #1
 80016d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80016d4:	0021      	movs	r1, r4
 80016d6:	187b      	adds	r3, r7, r1
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	187b      	adds	r3, r7, r1
 80016de:	2240      	movs	r2, #64	@ 0x40
 80016e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e2:	187b      	adds	r3, r7, r1
 80016e4:	2202      	movs	r2, #2
 80016e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2202      	movs	r2, #2
 80016ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016ee:	187b      	adds	r3, r7, r1
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	2208      	movs	r2, #8
 80016f8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	0292      	lsls	r2, r2, #10
 8001700:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	22c0      	movs	r2, #192	@ 0xc0
 8001706:	04d2      	lsls	r2, r2, #19
 8001708:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800170a:	187b      	adds	r3, r7, r1
 800170c:	2280      	movs	r2, #128	@ 0x80
 800170e:	0592      	lsls	r2, r2, #22
 8001710:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001712:	187b      	adds	r3, r7, r1
 8001714:	0018      	movs	r0, r3
 8001716:	f007 f98d 	bl	8008a34 <HAL_RCC_OscConfig>
 800171a:	1e03      	subs	r3, r0, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800171e:	f000 fdb9 	bl	8002294 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	003b      	movs	r3, r7
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001728:	003b      	movs	r3, r7
 800172a:	2202      	movs	r2, #2
 800172c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800172e:	003b      	movs	r3, r7
 8001730:	2200      	movs	r2, #0
 8001732:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001734:	003b      	movs	r3, r7
 8001736:	2200      	movs	r2, #0
 8001738:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800173a:	003b      	movs	r3, r7
 800173c:	2102      	movs	r1, #2
 800173e:	0018      	movs	r0, r3
 8001740:	f007 fc92 	bl	8009068 <HAL_RCC_ClockConfig>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001748:	f000 fda4 	bl	8002294 <Error_Handler>
  }
}
 800174c:	46c0      	nop			@ (mov r8, r8)
 800174e:	46bd      	mov	sp, r7
 8001750:	b013      	add	sp, #76	@ 0x4c
 8001752:	bd90      	pop	{r4, r7, pc}

08001754 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	0018      	movs	r0, r3
 800175e:	230c      	movs	r3, #12
 8001760:	001a      	movs	r2, r3
 8001762:	2100      	movs	r1, #0
 8001764:	f00b fe3a 	bl	800d3dc <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001768:	4b54      	ldr	r3, [pc, #336]	@ (80018bc <MX_ADC1_Init+0x168>)
 800176a:	4a55      	ldr	r2, [pc, #340]	@ (80018c0 <MX_ADC1_Init+0x16c>)
 800176c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800176e:	4b53      	ldr	r3, [pc, #332]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001770:	2280      	movs	r2, #128	@ 0x80
 8001772:	05d2      	lsls	r2, r2, #23
 8001774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001776:	4b51      	ldr	r3, [pc, #324]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177c:	4b4f      	ldr	r3, [pc, #316]	@ (80018bc <MX_ADC1_Init+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001782:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001784:	2280      	movs	r2, #128	@ 0x80
 8001786:	0392      	lsls	r2, r2, #14
 8001788:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800178a:	4b4c      	ldr	r3, [pc, #304]	@ (80018bc <MX_ADC1_Init+0x168>)
 800178c:	2208      	movs	r2, #8
 800178e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001790:	4b4a      	ldr	r3, [pc, #296]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001792:	2200      	movs	r2, #0
 8001794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001796:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001798:	2200      	movs	r2, #0
 800179a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800179c:	4b47      	ldr	r3, [pc, #284]	@ (80018bc <MX_ADC1_Init+0x168>)
 800179e:	2200      	movs	r2, #0
 80017a0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 80017a2:	4b46      	ldr	r3, [pc, #280]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017a4:	2205      	movs	r2, #5
 80017a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017a8:	4b44      	ldr	r3, [pc, #272]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017aa:	2220      	movs	r2, #32
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017b0:	4b42      	ldr	r3, [pc, #264]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017b6:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017bc:	4b3f      	ldr	r3, [pc, #252]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017be:	222c      	movs	r2, #44	@ 0x2c
 80017c0:	2100      	movs	r1, #0
 80017c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017c4:	4b3d      	ldr	r3, [pc, #244]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80017ca:	4b3c      	ldr	r3, [pc, #240]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80017d0:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80017d6:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017d8:	223c      	movs	r2, #60	@ 0x3c
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80017de:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <MX_ADC1_Init+0x168>)
 80017e6:	0018      	movs	r0, r3
 80017e8:	f004 fe14 	bl	8006414 <HAL_ADC_Init>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80017f0:	f000 fd50 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2200      	movs	r2, #0
 80017fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001806:	1d3a      	adds	r2, r7, #4
 8001808:	4b2c      	ldr	r3, [pc, #176]	@ (80018bc <MX_ADC1_Init+0x168>)
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f005 f985 	bl	8006b1c <HAL_ADC_ConfigChannel>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001816:	f000 fd3d 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	4a29      	ldr	r2, [pc, #164]	@ (80018c4 <MX_ADC1_Init+0x170>)
 800181e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2204      	movs	r2, #4
 8001824:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800182c:	1d3a      	adds	r2, r7, #4
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f005 f972 	bl	8006b1c <HAL_ADC_ConfigChannel>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800183c:	f000 fd2a 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a21      	ldr	r2, [pc, #132]	@ (80018c8 <MX_ADC1_Init+0x174>)
 8001844:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001846:	1d3b      	adds	r3, r7, #4
 8001848:	2208      	movs	r2, #8
 800184a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	1d3a      	adds	r2, r7, #4
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <MX_ADC1_Init+0x168>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f005 f95f 	bl	8006b1c <HAL_ADC_ConfigChannel>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001862:	f000 fd17 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	4a18      	ldr	r2, [pc, #96]	@ (80018cc <MX_ADC1_Init+0x178>)
 800186a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	220c      	movs	r2, #12
 8001870:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	1d3a      	adds	r2, r7, #4
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <MX_ADC1_Init+0x168>)
 800187c:	0011      	movs	r1, r2
 800187e:	0018      	movs	r0, r3
 8001880:	f005 f94c 	bl	8006b1c <HAL_ADC_ConfigChannel>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001888:	f000 fd04 	bl	8002294 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	4a10      	ldr	r2, [pc, #64]	@ (80018d0 <MX_ADC1_Init+0x17c>)
 8001890:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001892:	1d3b      	adds	r3, r7, #4
 8001894:	2210      	movs	r2, #16
 8001896:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800189e:	1d3a      	adds	r2, r7, #4
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <MX_ADC1_Init+0x168>)
 80018a2:	0011      	movs	r1, r2
 80018a4:	0018      	movs	r0, r3
 80018a6:	f005 f939 	bl	8006b1c <HAL_ADC_ConfigChannel>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 80018ae:	f000 fcf1 	bl	8002294 <Error_Handler>
  }
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b004      	add	sp, #16
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	200004fc 	.word	0x200004fc
 80018c0:	40012400 	.word	0x40012400
 80018c4:	04000002 	.word	0x04000002
 80018c8:	10000010 	.word	0x10000010
 80018cc:	14000020 	.word	0x14000020
 80018d0:	18000040 	.word	0x18000040

080018d4 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b094      	sub	sp, #80	@ 0x50
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018da:	2334      	movs	r3, #52	@ 0x34
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	0018      	movs	r0, r3
 80018e0:	231c      	movs	r3, #28
 80018e2:	001a      	movs	r2, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	f00b fd79 	bl	800d3dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ea:	003b      	movs	r3, r7
 80018ec:	0018      	movs	r0, r3
 80018ee:	2334      	movs	r3, #52	@ 0x34
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f00b fd72 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018f8:	4b3a      	ldr	r3, [pc, #232]	@ (80019e4 <MX_TIM16_Init+0x110>)
 80018fa:	4a3b      	ldr	r2, [pc, #236]	@ (80019e8 <MX_TIM16_Init+0x114>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80018fe:	4b39      	ldr	r3, [pc, #228]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001904:	4b37      	ldr	r3, [pc, #220]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800190a:	4b36      	ldr	r3, [pc, #216]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800190c:	22ff      	movs	r2, #255	@ 0xff
 800190e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001910:	4b34      	ldr	r3, [pc, #208]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001912:	2280      	movs	r2, #128	@ 0x80
 8001914:	0092      	lsls	r2, r2, #2
 8001916:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001918:	4b32      	ldr	r3, [pc, #200]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800191a:	2200      	movs	r2, #0
 800191c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800191e:	4b31      	ldr	r3, [pc, #196]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001920:	2280      	movs	r2, #128	@ 0x80
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001924:	4b2f      	ldr	r3, [pc, #188]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001926:	0018      	movs	r0, r3
 8001928:	f007 fec2 	bl	80096b0 <HAL_TIM_Base_Init>
 800192c:	1e03      	subs	r3, r0, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001930:	f000 fcb0 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001934:	4b2b      	ldr	r3, [pc, #172]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001936:	0018      	movs	r0, r3
 8001938:	f007 ffc0 	bl	80098bc <HAL_TIM_OC_Init>
 800193c:	1e03      	subs	r3, r0, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001940:	f000 fca8 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001944:	2134      	movs	r1, #52	@ 0x34
 8001946:	187b      	adds	r3, r7, r1
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 800194c:	187b      	adds	r3, r7, r1
 800194e:	22ff      	movs	r2, #255	@ 0xff
 8001950:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001952:	187b      	adds	r3, r7, r1
 8001954:	2200      	movs	r2, #0
 8001956:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001958:	187b      	adds	r3, r7, r1
 800195a:	2200      	movs	r2, #0
 800195c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195e:	187b      	adds	r3, r7, r1
 8001960:	2200      	movs	r2, #0
 8001962:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001964:	187b      	adds	r3, r7, r1
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800196a:	187b      	adds	r3, r7, r1
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001970:	1879      	adds	r1, r7, r1
 8001972:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001974:	2200      	movs	r2, #0
 8001976:	0018      	movs	r0, r3
 8001978:	f008 fe14 	bl	800a5a4 <HAL_TIM_OC_ConfigChannel>
 800197c:	1e03      	subs	r3, r0, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001980:	f000 fc88 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <MX_TIM16_Init+0x110>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <MX_TIM16_Init+0x110>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2108      	movs	r1, #8
 8001990:	438a      	bics	r2, r1
 8001992:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001994:	003b      	movs	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800199a:	003b      	movs	r3, r7
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019a0:	003b      	movs	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019a6:	003b      	movs	r3, r7
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ac:	003b      	movs	r3, r7
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019b2:	003b      	movs	r3, r7
 80019b4:	2280      	movs	r2, #128	@ 0x80
 80019b6:	0192      	lsls	r2, r2, #6
 80019b8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019ba:	003b      	movs	r3, r7
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c0:	003b      	movs	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80019c6:	003a      	movs	r2, r7
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_TIM16_Init+0x110>)
 80019ca:	0011      	movs	r1, r2
 80019cc:	0018      	movs	r0, r3
 80019ce:	f00a f80f 	bl	800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d2:	1e03      	subs	r3, r0, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80019d6:	f000 fc5d 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	46bd      	mov	sp, r7
 80019de:	b014      	add	sp, #80	@ 0x50
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			@ (mov r8, r8)
 80019e4:	20000758 	.word	0x20000758
 80019e8:	40014400 	.word	0x40014400

080019ec <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019f2:	2320      	movs	r3, #32
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	0018      	movs	r0, r3
 80019f8:	2310      	movs	r3, #16
 80019fa:	001a      	movs	r2, r3
 80019fc:	2100      	movs	r1, #0
 80019fe:	f00b fced 	bl	800d3dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a02:	2314      	movs	r3, #20
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	0018      	movs	r0, r3
 8001a08:	230c      	movs	r3, #12
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	f00b fce5 	bl	800d3dc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	0018      	movs	r0, r3
 8001a16:	2310      	movs	r3, #16
 8001a18:	001a      	movs	r2, r3
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f00b fcde 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	05d2      	lsls	r2, r2, #23
 8001a26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a2a:	223f      	movs	r2, #63	@ 0x3f
 8001a2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8001a34:	4b29      	ldr	r3, [pc, #164]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a36:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <MX_TIM2_Init+0xf4>)
 8001a38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001a3a:	4b28      	ldr	r3, [pc, #160]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a3c:	2280      	movs	r2, #128	@ 0x80
 8001a3e:	0092      	lsls	r2, r2, #2
 8001a40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a42:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a44:	2280      	movs	r2, #128	@ 0x80
 8001a46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f007 fe30 	bl	80096b0 <HAL_TIM_Base_Init>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8001a54:	f000 fc1e 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a58:	2120      	movs	r1, #32
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	2280      	movs	r2, #128	@ 0x80
 8001a5e:	0152      	lsls	r2, r2, #5
 8001a60:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	187a      	adds	r2, r7, r1
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a66:	0011      	movs	r1, r2
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f008 ff9f 	bl	800a9ac <HAL_TIM_ConfigClockSource>
 8001a6e:	1e03      	subs	r3, r0, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a72:	f000 fc0f 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a76:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f008 facb 	bl	800a014 <HAL_TIM_IC_Init>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d001      	beq.n	8001a86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a82:	f000 fc07 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a86:	2114      	movs	r1, #20
 8001a88:	187b      	adds	r3, r7, r1
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8e:	187b      	adds	r3, r7, r1
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a94:	187a      	adds	r2, r7, r1
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f009 ff40 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa0:	1e03      	subs	r3, r0, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001aa4:	f000 fbf6 	bl	8002294 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001aae:	1d3b      	adds	r3, r7, #4
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	220f      	movs	r2, #15
 8001abe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ac0:	1d39      	adds	r1, r7, #4
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <MX_TIM2_Init+0xf0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f008 fdcc 	bl	800a664 <HAL_TIM_IC_ConfigChannel>
 8001acc:	1e03      	subs	r3, r0, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001ad0:	f000 fbe0 	bl	8002294 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ad4:	46c0      	nop			@ (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b00c      	add	sp, #48	@ 0x30
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000814 	.word	0x20000814
 8001ae0:	001fffff 	.word	0x001fffff

08001ae4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08e      	sub	sp, #56	@ 0x38
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	2328      	movs	r3, #40	@ 0x28
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	0018      	movs	r0, r3
 8001af0:	2310      	movs	r3, #16
 8001af2:	001a      	movs	r2, r3
 8001af4:	2100      	movs	r1, #0
 8001af6:	f00b fc71 	bl	800d3dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	231c      	movs	r3, #28
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	0018      	movs	r0, r3
 8001b00:	230c      	movs	r3, #12
 8001b02:	001a      	movs	r2, r3
 8001b04:	2100      	movs	r1, #0
 8001b06:	f00b fc69 	bl	800d3dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b0a:	003b      	movs	r3, r7
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	231c      	movs	r3, #28
 8001b10:	001a      	movs	r2, r3
 8001b12:	2100      	movs	r1, #0
 8001b14:	f00b fc62 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b18:	4b32      	ldr	r3, [pc, #200]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b1a:	4a33      	ldr	r2, [pc, #204]	@ (8001be8 <MX_TIM3_Init+0x104>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b20:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <MX_TIM3_Init+0x108>)
 8001b22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b2c:	4a30      	ldr	r2, [pc, #192]	@ (8001bf0 <MX_TIM3_Init+0x10c>)
 8001b2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3e:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f007 fdb5 	bl	80096b0 <HAL_TIM_Base_Init>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001b4a:	f000 fba3 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4e:	2128      	movs	r1, #40	@ 0x28
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	0152      	lsls	r2, r2, #5
 8001b56:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b58:	187a      	adds	r2, r7, r1
 8001b5a:	4b22      	ldr	r3, [pc, #136]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f008 ff24 	bl	800a9ac <HAL_TIM_ConfigClockSource>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001b68:	f000 fb94 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f007 fea4 	bl	80098bc <HAL_TIM_OC_Init>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b78:	f000 fb8c 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	211c      	movs	r1, #28
 8001b7e:	187b      	adds	r3, r7, r1
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b8a:	187a      	adds	r2, r7, r1
 8001b8c:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001b8e:	0011      	movs	r1, r2
 8001b90:	0018      	movs	r0, r3
 8001b92:	f009 fec5 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001b9a:	f000 fb7b 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b9e:	003b      	movs	r3, r7
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	003b      	movs	r3, r7
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001baa:	003b      	movs	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb0:	003b      	movs	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	0039      	movs	r1, r7
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f008 fcf1 	bl	800a5a4 <HAL_TIM_OC_ConfigChannel>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001bc6:	f000 fb65 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699a      	ldr	r2, [r3, #24]
 8001bd0:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <MX_TIM3_Init+0x100>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2108      	movs	r1, #8
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bda:	46c0      	nop			@ (mov r8, r8)
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b00e      	add	sp, #56	@ 0x38
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	200008d0 	.word	0x200008d0
 8001be8:	40000400 	.word	0x40000400
 8001bec:	00007fff 	.word	0x00007fff
 8001bf0:	00000fff 	.word	0x00000fff

08001bf4 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	@ 0x70
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	2360      	movs	r3, #96	@ 0x60
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	0018      	movs	r0, r3
 8001c00:	2310      	movs	r3, #16
 8001c02:	001a      	movs	r2, r3
 8001c04:	2100      	movs	r1, #0
 8001c06:	f00b fbe9 	bl	800d3dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	2354      	movs	r3, #84	@ 0x54
 8001c0c:	18fb      	adds	r3, r7, r3
 8001c0e:	0018      	movs	r0, r3
 8001c10:	230c      	movs	r3, #12
 8001c12:	001a      	movs	r2, r3
 8001c14:	2100      	movs	r1, #0
 8001c16:	f00b fbe1 	bl	800d3dc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1a:	2338      	movs	r3, #56	@ 0x38
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	0018      	movs	r0, r3
 8001c20:	231c      	movs	r3, #28
 8001c22:	001a      	movs	r2, r3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f00b fbd9 	bl	800d3dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	2334      	movs	r3, #52	@ 0x34
 8001c30:	001a      	movs	r2, r3
 8001c32:	2100      	movs	r1, #0
 8001c34:	f00b fbd2 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c3a:	4a60      	ldr	r2, [pc, #384]	@ (8001dbc <MX_TIM1_Init+0x1c8>)
 8001c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c44:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c4c:	4a5c      	ldr	r2, [pc, #368]	@ (8001dc0 <MX_TIM1_Init+0x1cc>)
 8001c4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c50:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c52:	2280      	movs	r2, #128	@ 0x80
 8001c54:	0052      	lsls	r2, r2, #1
 8001c56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c58:	4b57      	ldr	r3, [pc, #348]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c5e:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c60:	2280      	movs	r2, #128	@ 0x80
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c64:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f007 fd22 	bl	80096b0 <HAL_TIM_Base_Init>
 8001c6c:	1e03      	subs	r3, r0, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001c70:	f000 fb10 	bl	8002294 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	2160      	movs	r1, #96	@ 0x60
 8001c76:	187b      	adds	r3, r7, r1
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	0152      	lsls	r2, r2, #5
 8001c7c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c7e:	187a      	adds	r2, r7, r1
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c82:	0011      	movs	r1, r2
 8001c84:	0018      	movs	r0, r3
 8001c86:	f008 fe91 	bl	800a9ac <HAL_TIM_ConfigClockSource>
 8001c8a:	1e03      	subs	r3, r0, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c8e:	f000 fb01 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c92:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001c94:	0018      	movs	r0, r3
 8001c96:	f008 f871 	bl	8009d7c <HAL_TIM_PWM_Init>
 8001c9a:	1e03      	subs	r3, r0, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c9e:	f000 faf9 	bl	8002294 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2154      	movs	r1, #84	@ 0x54
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cb6:	187a      	adds	r2, r7, r1
 8001cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001cba:	0011      	movs	r1, r2
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f009 fe2f 	bl	800b920 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001cc6:	f000 fae5 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2138      	movs	r1, #56	@ 0x38
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2260      	movs	r2, #96	@ 0x60
 8001cd0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cd2:	187b      	adds	r3, r7, r1
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd8:	187b      	adds	r3, r7, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cde:	187b      	adds	r3, r7, r1
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce4:	187b      	adds	r3, r7, r1
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf6:	1879      	adds	r1, r7, r1
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f008 fd55 	bl	800a7ac <HAL_TIM_PWM_ConfigChannel>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001d06:	f000 fac5 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	492b      	ldr	r1, [pc, #172]	@ (8001dc4 <MX_TIM1_Init+0x1d0>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1a:	2338      	movs	r3, #56	@ 0x38
 8001d1c:	18f9      	adds	r1, r7, r3
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d20:	220c      	movs	r2, #12
 8001d22:	0018      	movs	r0, r3
 8001d24:	f008 fd42 	bl	800a7ac <HAL_TIM_PWM_ConfigChannel>
 8001d28:	1e03      	subs	r3, r0, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001d2c:	f000 fab2 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001d30:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4922      	ldr	r1, [pc, #136]	@ (8001dc4 <MX_TIM1_Init+0x1d0>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2200      	movs	r2, #0
 8001d4a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2280      	movs	r2, #128	@ 0x80
 8001d62:	0192      	lsls	r2, r2, #6
 8001d64:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d72:	1d3b      	adds	r3, r7, #4
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2280      	movs	r2, #128	@ 0x80
 8001d7c:	0492      	lsls	r2, r2, #18
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d92:	1d3a      	adds	r2, r7, #4
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001d96:	0011      	movs	r1, r2
 8001d98:	0018      	movs	r0, r3
 8001d9a:	f009 fe29 	bl	800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d9e:	1e03      	subs	r3, r0, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001da2:	f000 fa77 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001da6:	4b04      	ldr	r3, [pc, #16]	@ (8001db8 <MX_TIM1_Init+0x1c4>)
 8001da8:	0018      	movs	r0, r3
 8001daa:	f003 fa8b 	bl	80052c4 <HAL_TIM_MspPostInit>

}
 8001dae:	46c0      	nop			@ (mov r8, r8)
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b01c      	add	sp, #112	@ 0x70
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	2000098c 	.word	0x2000098c
 8001dbc:	40012c00 	.word	0x40012c00
 8001dc0:	000003ff 	.word	0x000003ff
 8001dc4:	fffff7ff 	.word	0xfffff7ff

08001dc8 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	@ 0x50
 8001dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dce:	2334      	movs	r3, #52	@ 0x34
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	231c      	movs	r3, #28
 8001dd6:	001a      	movs	r2, r3
 8001dd8:	2100      	movs	r1, #0
 8001dda:	f00b faff 	bl	800d3dc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001dde:	003b      	movs	r3, r7
 8001de0:	0018      	movs	r0, r3
 8001de2:	2334      	movs	r3, #52	@ 0x34
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f00b faf8 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dec:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001dee:	4a3b      	ldr	r2, [pc, #236]	@ (8001edc <MX_TIM17_Init+0x114>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001df2:	4b39      	ldr	r3, [pc, #228]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001df4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee0 <MX_TIM17_Init+0x118>)
 8001df6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b37      	ldr	r3, [pc, #220]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 8001dfe:	4b36      	ldr	r3, [pc, #216]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e00:	4a38      	ldr	r2, [pc, #224]	@ (8001ee4 <MX_TIM17_Init+0x11c>)
 8001e02:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001e04:	4b34      	ldr	r3, [pc, #208]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	0092      	lsls	r2, r2, #2
 8001e0a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e0c:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e14:	2280      	movs	r2, #128	@ 0x80
 8001e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e18:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f007 fc48 	bl	80096b0 <HAL_TIM_Base_Init>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001e24:	f000 fa36 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001e28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f007 fd46 	bl	80098bc <HAL_TIM_OC_Init>
 8001e30:	1e03      	subs	r3, r0, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001e34:	f000 fa2e 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001e38:	2134      	movs	r1, #52	@ 0x34
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	4a29      	ldr	r2, [pc, #164]	@ (8001ee8 <MX_TIM17_Init+0x120>)
 8001e44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e52:	187b      	adds	r3, r7, r1
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e58:	187b      	adds	r3, r7, r1
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e5e:	187b      	adds	r3, r7, r1
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e64:	1879      	adds	r1, r7, r1
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	f008 fb9a 	bl	800a5a4 <HAL_TIM_OC_ConfigChannel>
 8001e70:	1e03      	subs	r3, r0, #0
 8001e72:	d001      	beq.n	8001e78 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001e74:	f000 fa0e 	bl	8002294 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	699a      	ldr	r2, [r3, #24]
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2108      	movs	r1, #8
 8001e84:	430a      	orrs	r2, r1
 8001e86:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e88:	003b      	movs	r3, r7
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e8e:	003b      	movs	r3, r7
 8001e90:	2200      	movs	r2, #0
 8001e92:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e94:	003b      	movs	r3, r7
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e9a:	003b      	movs	r3, r7
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ea0:	003b      	movs	r3, r7
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	2280      	movs	r2, #128	@ 0x80
 8001eaa:	0192      	lsls	r2, r2, #6
 8001eac:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eae:	003b      	movs	r3, r7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001eb4:	003b      	movs	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001eba:	003a      	movs	r2, r7
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <MX_TIM17_Init+0x110>)
 8001ebe:	0011      	movs	r1, r2
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f009 fd95 	bl	800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ec6:	1e03      	subs	r3, r0, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001eca:	f000 f9e3 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b014      	add	sp, #80	@ 0x50
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	2000069c 	.word	0x2000069c
 8001edc:	40014800 	.word	0x40014800
 8001ee0:	00007fff 	.word	0x00007fff
 8001ee4:	000003ff 	.word	0x000003ff
 8001ee8:	000001ff 	.word	0x000001ff

08001eec <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <MX_LPTIM1_Init+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001efe:	22e0      	movs	r2, #224	@ 0xe0
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001f04:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f06:	4a14      	ldr	r2, [pc, #80]	@ (8001f58 <MX_LPTIM1_Init+0x6c>)
 8001f08:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001f0a:	4b11      	ldr	r3, [pc, #68]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f12:	2280      	movs	r2, #128	@ 0x80
 8001f14:	03d2      	lsls	r2, r2, #15
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <MX_LPTIM1_Init+0x64>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f006 f927 	bl	8008180 <HAL_LPTIM_Init>
 8001f32:	1e03      	subs	r3, r0, #0
 8001f34:	d001      	beq.n	8001f3a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001f36:	f000 f9ad 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	2011      	movs	r0, #17
 8001f40:	f005 fbf6 	bl	8007730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001f44:	2011      	movs	r0, #17
 8001f46:	f005 fc08 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000bcc 	.word	0x20000bcc
 8001f54:	40007c00 	.word	0x40007c00
 8001f58:	0000ffff 	.word	0x0000ffff

08001f5c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	0018      	movs	r0, r3
 8001f66:	231c      	movs	r3, #28
 8001f68:	001a      	movs	r2, r3
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	f00b fa36 	bl	800d3dc <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001f70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f72:	4a20      	ldr	r2, [pc, #128]	@ (8001ff4 <MX_TIM14_Init+0x98>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f78:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff8 <MX_TIM14_Init+0x9c>)
 8001f7a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <MX_TIM14_Init+0xa0>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f88:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f8c:	2280      	movs	r2, #128	@ 0x80
 8001f8e:	0092      	lsls	r2, r2, #2
 8001f90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f007 fb88 	bl	80096b0 <HAL_TIM_Base_Init>
 8001fa0:	1e03      	subs	r3, r0, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8001fa4:	f000 f976 	bl	8002294 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001fa8:	4b11      	ldr	r3, [pc, #68]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f007 fc86 	bl	80098bc <HAL_TIM_OC_Init>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8001fb4:	f000 f96e 	bl	8002294 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001ffc <MX_TIM14_Init+0xa0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	1e5a      	subs	r2, r3, #1
 8001fc4:	1d3b      	adds	r3, r7, #4
 8001fc6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd4:	1d39      	adds	r1, r7, #4
 8001fd6:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <MX_TIM14_Init+0x94>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f008 fae2 	bl	800a5a4 <HAL_TIM_OC_ConfigChannel>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d001      	beq.n	8001fe8 <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8001fe4:	f000 f956 	bl	8002294 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b008      	add	sp, #32
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200005e0 	.word	0x200005e0
 8001ff4:	40002000 	.word	0x40002000
 8001ff8:	00007fff 	.word	0x00007fff
 8001ffc:	20000020 	.word	0x20000020

08002000 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002006:	4a16      	ldr	r2, [pc, #88]	@ (8002060 <MX_USART2_UART_Init+0x60>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800200c:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <MX_USART2_UART_Init+0x64>)
 800200e:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002012:	2200      	movs	r2, #0
 8002014:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002018:	2200      	movs	r2, #0
 800201a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800201e:	2200      	movs	r2, #0
 8002020:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002024:	220c      	movs	r2, #12
 8002026:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002030:	2200      	movs	r2, #0
 8002032:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002036:	2200      	movs	r2, #0
 8002038:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800203a:	4b08      	ldr	r3, [pc, #32]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 800203c:	2200      	movs	r2, #0
 800203e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002042:	2200      	movs	r2, #0
 8002044:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <MX_USART2_UART_Init+0x5c>)
 8002048:	0018      	movs	r0, r3
 800204a:	f009 fd8d 	bl	800bb68 <HAL_UART_Init>
 800204e:	1e03      	subs	r3, r0, #0
 8002050:	d001      	beq.n	8002056 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002052:	f000 f91f 	bl	8002294 <Error_Handler>
  }
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000a48 	.word	0x20000a48
 8002060:	40004400 	.word	0x40004400
 8002064:	00007a12 	.word	0x00007a12

08002068 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <MX_DMA_Init+0x48>)
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	639a      	str	r2, [r3, #56]	@ 0x38
 800207a:	4b0d      	ldr	r3, [pc, #52]	@ (80020b0 <MX_DMA_Init+0x48>)
 800207c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2009      	movs	r0, #9
 800208c:	f005 fb50 	bl	8007730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002090:	2009      	movs	r0, #9
 8002092:	f005 fb62 	bl	800775a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 8002096:	2202      	movs	r2, #2
 8002098:	2102      	movs	r1, #2
 800209a:	200a      	movs	r0, #10
 800209c:	f005 fb48 	bl	8007730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80020a0:	200a      	movs	r0, #10
 80020a2:	f005 fb5a 	bl	800775a <HAL_NVIC_EnableIRQ>

}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			@ (mov r8, r8)
 80020b0:	40021000 	.word	0x40021000

080020b4 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08b      	sub	sp, #44	@ 0x2c
 80020b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ba:	2414      	movs	r4, #20
 80020bc:	193b      	adds	r3, r7, r4
 80020be:	0018      	movs	r0, r3
 80020c0:	2314      	movs	r3, #20
 80020c2:	001a      	movs	r2, r3
 80020c4:	2100      	movs	r1, #0
 80020c6:	f00b f989 	bl	800d3dc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b6e      	ldr	r3, [pc, #440]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d0:	2104      	movs	r1, #4
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80020d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020da:	2204      	movs	r2, #4
 80020dc:	4013      	ands	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020e2:	4b68      	ldr	r3, [pc, #416]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020e6:	4b67      	ldr	r3, [pc, #412]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020e8:	2120      	movs	r1, #32
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020f2:	2220      	movs	r2, #32
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b62      	ldr	r3, [pc, #392]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 80020fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002100:	2101      	movs	r1, #1
 8002102:	430a      	orrs	r2, r1
 8002104:	635a      	str	r2, [r3, #52]	@ 0x34
 8002106:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	2201      	movs	r2, #1
 800210c:	4013      	ands	r3, r2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002118:	2102      	movs	r1, #2
 800211a:	430a      	orrs	r2, r1
 800211c:	635a      	str	r2, [r3, #52]	@ 0x34
 800211e:	4b59      	ldr	r3, [pc, #356]	@ (8002284 <MX_GPIO_Init+0x1d0>)
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	2202      	movs	r2, #2
 8002124:	4013      	ands	r3, r2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800212a:	4b57      	ldr	r3, [pc, #348]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800212c:	2200      	movs	r2, #0
 800212e:	2140      	movs	r1, #64	@ 0x40
 8002130:	0018      	movs	r0, r3
 8002132:	f005 ffde 	bl	80080f2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002136:	193b      	adds	r3, r7, r4
 8002138:	2204      	movs	r2, #4
 800213a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2288      	movs	r2, #136	@ 0x88
 8002140:	0352      	lsls	r2, r2, #13
 8002142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800214a:	193b      	adds	r3, r7, r4
 800214c:	4a4f      	ldr	r2, [pc, #316]	@ (800228c <MX_GPIO_Init+0x1d8>)
 800214e:	0019      	movs	r1, r3
 8002150:	0010      	movs	r0, r2
 8002152:	f005 fe4d 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8002156:	0021      	movs	r1, r4
 8002158:	193b      	adds	r3, r7, r4
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002160:	000c      	movs	r4, r1
 8002162:	193b      	adds	r3, r7, r4
 8002164:	2201      	movs	r2, #1
 8002166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	193b      	adds	r3, r7, r4
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216e:	193b      	adds	r3, r7, r4
 8002170:	2200      	movs	r2, #0
 8002172:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 8002174:	193a      	adds	r2, r7, r4
 8002176:	23a0      	movs	r3, #160	@ 0xa0
 8002178:	05db      	lsls	r3, r3, #23
 800217a:	0011      	movs	r1, r2
 800217c:	0018      	movs	r0, r3
 800217e:	f005 fe37 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002182:	193b      	adds	r3, r7, r4
 8002184:	2240      	movs	r2, #64	@ 0x40
 8002186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	193b      	adds	r3, r7, r4
 800218a:	2201      	movs	r2, #1
 800218c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	193b      	adds	r3, r7, r4
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	193b      	adds	r3, r7, r4
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800219a:	193b      	adds	r3, r7, r4
 800219c:	4a3a      	ldr	r2, [pc, #232]	@ (8002288 <MX_GPIO_Init+0x1d4>)
 800219e:	0019      	movs	r1, r3
 80021a0:	0010      	movs	r0, r2
 80021a2:	f005 fe25 	bl	8007df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80021a6:	193b      	adds	r3, r7, r4
 80021a8:	2280      	movs	r2, #128	@ 0x80
 80021aa:	00d2      	lsls	r2, r2, #3
 80021ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b4:	193b      	adds	r3, r7, r4
 80021b6:	2201      	movs	r2, #1
 80021b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80021ba:	193a      	adds	r2, r7, r4
 80021bc:	23a0      	movs	r3, #160	@ 0xa0
 80021be:	05db      	lsls	r3, r3, #23
 80021c0:	0011      	movs	r1, r2
 80021c2:	0018      	movs	r0, r3
 80021c4:	f005 fe14 	bl	8007df0 <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	2240      	movs	r2, #64	@ 0x40
 80021cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ce:	193b      	adds	r3, r7, r4
 80021d0:	2201      	movs	r2, #1
 80021d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	193b      	adds	r3, r7, r4
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	2200      	movs	r2, #0
 80021de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 80021e0:	193b      	adds	r3, r7, r4
 80021e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 80021e4:	0019      	movs	r1, r3
 80021e6:	0010      	movs	r0, r2
 80021e8:	f005 fe02 	bl	8007df0 <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80021ec:	0021      	movs	r1, r4
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2280      	movs	r2, #128	@ 0x80
 80021f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80021f4:	187b      	adds	r3, r7, r1
 80021f6:	22c4      	movs	r2, #196	@ 0xc4
 80021f8:	0392      	lsls	r2, r2, #14
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 80021fc:	000c      	movs	r4, r1
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	2202      	movs	r2, #2
 8002202:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	2200      	movs	r2, #0
 8002208:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800220a:	193b      	adds	r3, r7, r4
 800220c:	4a20      	ldr	r2, [pc, #128]	@ (8002290 <MX_GPIO_Init+0x1dc>)
 800220e:	0019      	movs	r1, r3
 8002210:	0010      	movs	r0, r2
 8002212:	f005 fded 	bl	8007df0 <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 8002216:	0021      	movs	r1, r4
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2280      	movs	r2, #128	@ 0x80
 800221c:	0152      	lsls	r2, r2, #5
 800221e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	000c      	movs	r4, r1
 8002222:	193b      	adds	r3, r7, r4
 8002224:	2201      	movs	r2, #1
 8002226:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	193b      	adds	r3, r7, r4
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002234:	193a      	adds	r2, r7, r4
 8002236:	23a0      	movs	r3, #160	@ 0xa0
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	0011      	movs	r1, r2
 800223c:	0018      	movs	r0, r3
 800223e:	f005 fdd7 	bl	8007df0 <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002242:	0021      	movs	r1, r4
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2280      	movs	r2, #128	@ 0x80
 8002248:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2201      	movs	r2, #1
 800224e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 800225c:	187a      	adds	r2, r7, r1
 800225e:	23a0      	movs	r3, #160	@ 0xa0
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	0011      	movs	r1, r2
 8002264:	0018      	movs	r0, r3
 8002266:	f005 fdc3 	bl	8007df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 800226a:	2202      	movs	r2, #2
 800226c:	2102      	movs	r1, #2
 800226e:	2007      	movs	r0, #7
 8002270:	f005 fa5e 	bl	8007730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002274:	2007      	movs	r0, #7
 8002276:	f005 fa70 	bl	800775a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800227a:	46c0      	nop			@ (mov r8, r8)
 800227c:	46bd      	mov	sp, r7
 800227e:	b00b      	add	sp, #44	@ 0x2c
 8002280:	bd90      	pop	{r4, r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	50000800 	.word	0x50000800
 800228c:	50001400 	.word	0x50001400
 8002290:	50000400 	.word	0x50000400

08002294 <Error_Handler>:

void Error_Handler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002298:	b672      	cpsid	i
}
 800229a:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	e7fd      	b.n	800229c <Error_Handler+0x8>

080022a0 <System_Init>:
  {

  }
}

void System_Init(void){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80022a4:	f003 fec6 	bl	8006034 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80022a8:	f7ff f9f6 	bl	8001698 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022ac:	f7ff ff02 	bl	80020b4 <MX_GPIO_Init>
	MX_DMA_Init();
 80022b0:	f7ff feda 	bl	8002068 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80022b4:	f7ff fea4 	bl	8002000 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80022b8:	f7ff fa4c 	bl	8001754 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 80022bc:	f7ff fb0a 	bl	80018d4 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 80022c0:	f7ff fb94 	bl	80019ec <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 80022c4:	f7ff fc0e 	bl	8001ae4 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 80022c8:	f7ff fc94 	bl	8001bf4 <MX_TIM1_Init>
	MX_TIM17_Init();
 80022cc:	f7ff fd7c 	bl	8001dc8 <MX_TIM17_Init>
	MX_TIM14_Init();
 80022d0:	f7ff fe44 	bl	8001f5c <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 80022d4:	f7ff fe0a 	bl	8001eec <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 80022d8:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <System_Init+0xc0>)
 80022da:	0018      	movs	r0, r3
 80022dc:	f005 f846 	bl	800736c <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 80022e0:	4a20      	ldr	r2, [pc, #128]	@ (8002364 <System_Init+0xc4>)
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <System_Init+0xc8>)
 80022e4:	210e      	movs	r1, #14
 80022e6:	0018      	movs	r0, r3
 80022e8:	f008 fcba 	bl	800ac60 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 80022ec:	4a1f      	ldr	r2, [pc, #124]	@ (800236c <System_Init+0xcc>)
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <System_Init+0xc0>)
 80022f0:	2100      	movs	r1, #0
 80022f2:	0018      	movs	r0, r3
 80022f4:	f004 fa66 	bl	80067c4 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 80022f8:	4a1d      	ldr	r2, [pc, #116]	@ (8002370 <System_Init+0xd0>)
 80022fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002374 <System_Init+0xd4>)
 80022fc:	2112      	movs	r1, #18
 80022fe:	0018      	movs	r0, r3
 8002300:	f008 fcae 	bl	800ac60 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002304:	4a1c      	ldr	r2, [pc, #112]	@ (8002378 <System_Init+0xd8>)
 8002306:	4b1b      	ldr	r3, [pc, #108]	@ (8002374 <System_Init+0xd4>)
 8002308:	210e      	movs	r1, #14
 800230a:	0018      	movs	r0, r3
 800230c:	f008 fca8 	bl	800ac60 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <System_Init+0xdc>)
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <System_Init+0xe0>)
 8002314:	2114      	movs	r1, #20
 8002316:	0018      	movs	r0, r3
 8002318:	f008 fca2 	bl	800ac60 <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 800231c:	4a19      	ldr	r2, [pc, #100]	@ (8002384 <System_Init+0xe4>)
 800231e:	4b1a      	ldr	r3, [pc, #104]	@ (8002388 <System_Init+0xe8>)
 8002320:	2101      	movs	r1, #1
 8002322:	0018      	movs	r0, r3
 8002324:	f009 fc88 	bl	800bc38 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 8002328:	4a18      	ldr	r2, [pc, #96]	@ (800238c <System_Init+0xec>)
 800232a:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <System_Init+0xe8>)
 800232c:	2103      	movs	r1, #3
 800232e:	0018      	movs	r0, r3
 8002330:	f009 fc82 	bl	800bc38 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002334:	4a16      	ldr	r2, [pc, #88]	@ (8002390 <System_Init+0xf0>)
 8002336:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <System_Init+0xf4>)
 8002338:	2102      	movs	r1, #2
 800233a:	0018      	movs	r0, r3
 800233c:	f006 f946 	bl	80085cc <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002340:	4a15      	ldr	r2, [pc, #84]	@ (8002398 <System_Init+0xf8>)
 8002342:	4b16      	ldr	r3, [pc, #88]	@ (800239c <System_Init+0xfc>)
 8002344:	2114      	movs	r1, #20
 8002346:	0018      	movs	r0, r3
 8002348:	f008 fc8a 	bl	800ac60 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 800234c:	4a14      	ldr	r2, [pc, #80]	@ (80023a0 <System_Init+0x100>)
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <System_Init+0x104>)
 8002350:	2114      	movs	r1, #20
 8002352:	0018      	movs	r0, r3
 8002354:	f008 fc84 	bl	800ac60 <HAL_TIM_RegisterCallback>
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	200004fc 	.word	0x200004fc
 8002364:	080023a9 	.word	0x080023a9
 8002368:	20000758 	.word	0x20000758
 800236c:	080023fd 	.word	0x080023fd
 8002370:	08002491 	.word	0x08002491
 8002374:	20000814 	.word	0x20000814
 8002378:	080025ad 	.word	0x080025ad
 800237c:	080026b9 	.word	0x080026b9
 8002380:	200008d0 	.word	0x200008d0
 8002384:	080027f5 	.word	0x080027f5
 8002388:	20000a48 	.word	0x20000a48
 800238c:	08002805 	.word	0x08002805
 8002390:	08003be5 	.word	0x08003be5
 8002394:	20000bcc 	.word	0x20000bcc
 8002398:	08004001 	.word	0x08004001
 800239c:	2000069c 	.word	0x2000069c
 80023a0:	08004011 	.word	0x08004011
 80023a4:	200005e0 	.word	0x200005e0

080023a8 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <TIM16_callback+0x40>)
 80023b2:	0018      	movs	r0, r3
 80023b4:	f002 fa1e 	bl	80047f4 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 80023b8:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <TIM16_callback+0x40>)
 80023ba:	2100      	movs	r1, #0
 80023bc:	0018      	movs	r0, r3
 80023be:	f002 fa45 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80023c2:	4a0a      	ldr	r2, [pc, #40]	@ (80023ec <TIM16_callback+0x44>)
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <TIM16_callback+0x40>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f002 fb35 	bl	8004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <TIM16_callback+0x48>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	001a      	movs	r2, r3
 80023d4:	4907      	ldr	r1, [pc, #28]	@ (80023f4 <TIM16_callback+0x4c>)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <TIM16_callback+0x50>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f004 fa7f 	bl	80068dc <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b002      	add	sp, #8
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	20000c50 	.word	0x20000c50
 80023ec:	20000028 	.word	0x20000028
 80023f0:	0800dc80 	.word	0x0800dc80
 80023f4:	20000c44 	.word	0x20000c44
 80023f8:	200004fc 	.word	0x200004fc

080023fc <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 80023fc:	b5b0      	push	{r4, r5, r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f004 faf6 	bl	80069f8 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 800240c:	4a1b      	ldr	r2, [pc, #108]	@ (800247c <ADC_DMA_conversion_complete_callback+0x80>)
 800240e:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <ADC_DMA_conversion_complete_callback+0x84>)
 8002410:	0011      	movs	r1, r2
 8002412:	0018      	movs	r0, r3
 8002414:	f002 fba6 	bl	8004b64 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002418:	f7fe f882 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 800241c:	250f      	movs	r5, #15
 800241e:	197c      	adds	r4, r7, r5
 8002420:	4b18      	ldr	r3, [pc, #96]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 8002422:	2108      	movs	r1, #8
 8002424:	0018      	movs	r0, r3
 8002426:	f003 fda1 	bl	8005f6c <Get_Status_Bit>
 800242a:	0003      	movs	r3, r0
 800242c:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 800242e:	197b      	adds	r3, r7, r5
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10a      	bne.n	800244c <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002436:	4b14      	ldr	r3, [pc, #80]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002438:	8a5b      	ldrh	r3, [r3, #18]
 800243a:	b29a      	uxth	r2, r3
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800243e:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <ADC_DMA_conversion_complete_callback+0x8c>)
 8002442:	8b5b      	ldrh	r3, [r3, #26]
 8002444:	b29a      	uxth	r2, r3
 8002446:	4b11      	ldr	r3, [pc, #68]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002448:	835a      	strh	r2, [r3, #26]
 800244a:	e003      	b.n	8002454 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 800244c:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 800244e:	0018      	movs	r0, r3
 8002450:	f002 f99a 	bl	8004788 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <ADC_DMA_conversion_complete_callback+0x90>)
 8002456:	0018      	movs	r0, r3
 8002458:	f003 f8fa 	bl	8005650 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 800245c:	4b09      	ldr	r3, [pc, #36]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800245e:	2110      	movs	r1, #16
 8002460:	0018      	movs	r0, r3
 8002462:	f003 fd83 	bl	8005f6c <Get_Status_Bit>
 8002466:	1e03      	subs	r3, r0, #0
 8002468:	d104      	bne.n	8002474 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <ADC_DMA_conversion_complete_callback+0x88>)
 800246c:	2110      	movs	r1, #16
 800246e:	0018      	movs	r0, r3
 8002470:	f003 fd90 	bl	8005f94 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bdb0      	pop	{r4, r5, r7, pc}
 800247c:	20000c44 	.word	0x20000c44
 8002480:	20000c74 	.word	0x20000c74
 8002484:	20000c38 	.word	0x20000c38
 8002488:	20000cbc 	.word	0x20000cbc
 800248c:	20000c50 	.word	0x20000c50

08002490 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2100      	movs	r1, #0
 800249c:	0018      	movs	r0, r3
 800249e:	f008 fb5b 	bl	800ab58 <HAL_TIM_ReadCapturedValue>
 80024a2:	0002      	movs	r2, r0
 80024a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024a6:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 80024a8:	4b39      	ldr	r3, [pc, #228]	@ (8002590 <TIM2_ch1_IP_capture_callback+0x100>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0a5b      	lsrs	r3, r3, #9
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024b2:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 80024b4:	4b38      	ldr	r3, [pc, #224]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d108      	bne.n	80024d0 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 80024be:	f002 f871 	bl	80045a4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80024c2:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 80024c8:	4b33      	ldr	r3, [pc, #204]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80024ce:	e05b      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d124      	bne.n	8002524 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 80024da:	4b2e      	ldr	r3, [pc, #184]	@ (8002594 <TIM2_ch1_IP_capture_callback+0x104>)
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b80      	cmp	r3, #128	@ 0x80
 80024e2:	d951      	bls.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 80024e4:	f002 f840 	bl	8004568 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024ea:	2202      	movs	r2, #2
 80024ec:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80024ee:	4b2a      	ldr	r3, [pc, #168]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 80024f4:	4a29      	ldr	r2, [pc, #164]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 80024f6:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 80024f8:	0011      	movs	r1, r2
 80024fa:	0018      	movs	r0, r3
 80024fc:	f002 f822 	bl	8004544 <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002500:	4b28      	ldr	r3, [pc, #160]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b05      	cmp	r3, #5
 8002508:	d004      	beq.n	8002514 <TIM2_ch1_IP_capture_callback+0x84>
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b07      	cmp	r3, #7
 8002512:	d101      	bne.n	8002518 <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002514:	f002 fc72 	bl	8004dfc <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 800251a:	2104      	movs	r1, #4
 800251c:	0018      	movs	r0, r3
 800251e:	f003 fd39 	bl	8005f94 <Set_Status_Bit>
}
 8002522:	e031      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d108      	bne.n	8002540 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 800252e:	f002 f839 	bl	80045a4 <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002532:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002534:	2203      	movs	r2, #3
 8002536:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002538:	4b17      	ldr	r3, [pc, #92]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 800253a:	2202      	movs	r2, #2
 800253c:	705a      	strb	r2, [r3, #1]
}
 800253e:	e023      	b.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002540:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b03      	cmp	r3, #3
 8002548:	d11e      	bne.n	8002588 <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 800254a:	f002 f80d 	bl	8004568 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800254e:	4b12      	ldr	r3, [pc, #72]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002550:	2202      	movs	r2, #2
 8002552:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002554:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <TIM2_ch1_IP_capture_callback+0x108>)
 8002556:	2203      	movs	r2, #3
 8002558:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 800255a:	4a10      	ldr	r2, [pc, #64]	@ (800259c <TIM2_ch1_IP_capture_callback+0x10c>)
 800255c:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <TIM2_ch1_IP_capture_callback+0x110>)
 800255e:	0011      	movs	r1, r2
 8002560:	0018      	movs	r0, r3
 8002562:	f001 ffef 	bl	8004544 <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b05      	cmp	r3, #5
 800256e:	d004      	beq.n	800257a <TIM2_ch1_IP_capture_callback+0xea>
 8002570:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <TIM2_ch1_IP_capture_callback+0x114>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b07      	cmp	r3, #7
 8002578:	d101      	bne.n	800257e <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 800257a:	f002 fc3f 	bl	8004dfc <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <TIM2_ch1_IP_capture_callback+0x118>)
 8002580:	2104      	movs	r1, #4
 8002582:	0018      	movs	r0, r3
 8002584:	f003 fd06 	bl	8005f94 <Set_Status_Bit>
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}
 8002590:	20000c30 	.word	0x20000c30
 8002594:	20000c34 	.word	0x20000c34
 8002598:	20000444 	.word	0x20000444
 800259c:	20000c98 	.word	0x20000c98
 80025a0:	20000c50 	.word	0x20000c50
 80025a4:	20000430 	.word	0x20000430
 80025a8:	20000c38 	.word	0x20000c38

080025ac <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 80025b4:	240c      	movs	r4, #12
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	4a3a      	ldr	r2, [pc, #232]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025ba:	7852      	ldrb	r2, [r2, #1]
 80025bc:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d131      	bne.n	800262c <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 80025c8:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 80025d0:	2201      	movs	r2, #1
 80025d2:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 80025d4:	4b35      	ldr	r3, [pc, #212]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025da:	4b35      	ldr	r3, [pc, #212]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025e0:	2380      	movs	r3, #128	@ 0x80
 80025e2:	0099      	lsls	r1, r3, #2
 80025e4:	23a0      	movs	r3, #160	@ 0xa0
 80025e6:	05db      	lsls	r3, r3, #23
 80025e8:	2201      	movs	r2, #1
 80025ea:	0018      	movs	r0, r3
 80025ec:	f005 fd81 	bl	80080f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	2140      	movs	r1, #64	@ 0x40
 80025f6:	0018      	movs	r0, r3
 80025f8:	f005 fd7b 	bl	80080f2 <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b04      	cmp	r3, #4
 8002604:	d049      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b06      	cmp	r3, #6
 800260e:	d044      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 8002610:	4b24      	ldr	r3, [pc, #144]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002616:	2b08      	cmp	r3, #8
 8002618:	d03f      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800261a:	4b22      	ldr	r3, [pc, #136]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261c:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002622:	4b20      	ldr	r3, [pc, #128]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002624:	193a      	adds	r2, r7, r4
 8002626:	7812      	ldrb	r2, [r2, #0]
 8002628:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800262a:	e036      	b.n	800269a <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800262c:	4b1e      	ldr	r3, [pc, #120]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b03      	cmp	r3, #3
 8002634:	d131      	bne.n	800269a <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002636:	4b1c      	ldr	r3, [pc, #112]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 800263c:	4b1a      	ldr	r3, [pc, #104]	@ (80026a8 <TIM2_ch1_overflow_callback+0xfc>)
 800263e:	2203      	movs	r2, #3
 8002640:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002642:	4b1a      	ldr	r3, [pc, #104]	@ (80026ac <TIM2_ch1_overflow_callback+0x100>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002648:	4b19      	ldr	r3, [pc, #100]	@ (80026b0 <TIM2_ch1_overflow_callback+0x104>)
 800264a:	2200      	movs	r2, #0
 800264c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800264e:	2380      	movs	r3, #128	@ 0x80
 8002650:	0099      	lsls	r1, r3, #2
 8002652:	23a0      	movs	r3, #160	@ 0xa0
 8002654:	05db      	lsls	r3, r3, #23
 8002656:	2201      	movs	r2, #1
 8002658:	0018      	movs	r0, r3
 800265a:	f005 fd4a 	bl	80080f2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <TIM2_ch1_overflow_callback+0x108>)
 8002660:	2200      	movs	r2, #0
 8002662:	2140      	movs	r1, #64	@ 0x40
 8002664:	0018      	movs	r0, r3
 8002666:	f005 fd44 	bl	80080f2 <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800266a:	4b0e      	ldr	r3, [pc, #56]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b04      	cmp	r3, #4
 8002672:	d012      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002674:	4b0b      	ldr	r3, [pc, #44]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b06      	cmp	r3, #6
 800267c:	d00d      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
 800267e:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002684:	2b08      	cmp	r3, #8
 8002686:	d008      	beq.n	800269a <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002688:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268a:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 800268c:	7812      	ldrb	r2, [r2, #0]
 800268e:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002690:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <TIM2_ch1_overflow_callback+0xf8>)
 8002692:	220c      	movs	r2, #12
 8002694:	18ba      	adds	r2, r7, r2
 8002696:	7812      	ldrb	r2, [r2, #0]
 8002698:	701a      	strb	r2, [r3, #0]
}
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b005      	add	sp, #20
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	46c0      	nop			@ (mov r8, r8)
 80026a4:	20000430 	.word	0x20000430
 80026a8:	20000444 	.word	0x20000444
 80026ac:	20000ce0 	.word	0x20000ce0
 80026b0:	20000c36 	.word	0x20000c36
 80026b4:	50000800 	.word	0x50000800

080026b8 <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026c0:	4b41      	ldr	r3, [pc, #260]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d01c      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026ca:	4b3f      	ldr	r3, [pc, #252]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b0c      	cmp	r3, #12
 80026d2:	d017      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026d4:	4b3c      	ldr	r3, [pc, #240]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b0d      	cmp	r3, #13
 80026dc:	d012      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026de:	4b3a      	ldr	r3, [pc, #232]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d00d      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026e8:	4b37      	ldr	r3, [pc, #220]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b11      	cmp	r3, #17
 80026f0:	d008      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026f2:	4b35      	ldr	r3, [pc, #212]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026f8:	2b12      	cmp	r3, #18
 80026fa:	d003      	beq.n	8002704 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 80026fc:	4b33      	ldr	r3, [pc, #204]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026fe:	0018      	movs	r0, r3
 8002700:	f002 f878 	bl	80047f4 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002704:	4b32      	ldr	r3, [pc, #200]	@ (80027d0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002706:	2100      	movs	r1, #0
 8002708:	0018      	movs	r0, r3
 800270a:	f003 fbc8 	bl	8005e9e <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 800270e:	4b31      	ldr	r3, [pc, #196]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d106      	bne.n	8002726 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002718:	4b2e      	ldr	r3, [pc, #184]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 800271e:	4b2d      	ldr	r3, [pc, #180]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002720:	2202      	movs	r2, #2
 8002722:	705a      	strb	r2, [r3, #1]
 8002724:	e00a      	b.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b03      	cmp	r3, #3
 800272e:	d105      	bne.n	800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002730:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002738:	2203      	movs	r2, #3
 800273a:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800273c:	4b22      	ldr	r3, [pc, #136]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b0b      	cmp	r3, #11
 8002744:	d03c      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002746:	4b20      	ldr	r3, [pc, #128]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d037      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002750:	4b1d      	ldr	r3, [pc, #116]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d032      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 800275a:	4b1b      	ldr	r3, [pc, #108]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b10      	cmp	r3, #16
 8002762:	d02d      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002764:	4b18      	ldr	r3, [pc, #96]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b11      	cmp	r3, #17
 800276c:	d028      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 800276e:	4b16      	ldr	r3, [pc, #88]	@ (80027c8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002774:	2b12      	cmp	r3, #18
 8002776:	d023      	beq.n	80027c0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002778:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 800277a:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 800277c:	0011      	movs	r1, r2
 800277e:	0018      	movs	r0, r3
 8002780:	f001 fee0 	bl	8004544 <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002786:	4b11      	ldr	r3, [pc, #68]	@ (80027cc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002788:	0011      	movs	r1, r2
 800278a:	0018      	movs	r0, r3
 800278c:	f001 feda 	bl	8004544 <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002792:	2108      	movs	r1, #8
 8002794:	0018      	movs	r0, r3
 8002796:	f003 fbfd 	bl	8005f94 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f002 f854 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80027a4:	4a0f      	ldr	r2, [pc, #60]	@ (80027e4 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 80027a6:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80027a8:	0011      	movs	r1, r2
 80027aa:	0018      	movs	r0, r3
 80027ac:	f002 f944 	bl	8004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 80027b0:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	001a      	movs	r2, r3
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 80027b8:	4b0d      	ldr	r3, [pc, #52]	@ (80027f0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f004 f88e 	bl	80068dc <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80027c0:	46c0      	nop			@ (mov r8, r8)
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000430 	.word	0x20000430
 80027cc:	20000c98 	.word	0x20000c98
 80027d0:	200008d0 	.word	0x200008d0
 80027d4:	20000444 	.word	0x20000444
 80027d8:	20000cbc 	.word	0x20000cbc
 80027dc:	20000c50 	.word	0x20000c50
 80027e0:	20000c38 	.word	0x20000c38
 80027e4:	20000028 	.word	0x20000028
 80027e8:	0800dc80 	.word	0x0800dc80
 80027ec:	20000c44 	.word	0x20000c44
 80027f0:	200004fc 	.word	0x200004fc

080027f4 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 80027fc:	46c0      	nop			@ (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}

08002804 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 800280c:	4bbe      	ldr	r3, [pc, #760]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800280e:	0018      	movs	r0, r3
 8002810:	f7fe fca8 	bl	8001164 <Is_System_Real_Time_Status_Byte>
 8002814:	0003      	movs	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d001      	beq.n	800281e <UART2_RX_transfer_complete_callback+0x1a>
 800281a:	f000 fc0c 	bl	8003036 <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 800281e:	4bbb      	ldr	r3, [pc, #748]	@ (8002b0c <UART2_RX_transfer_complete_callback+0x308>)
 8002820:	2180      	movs	r1, #128	@ 0x80
 8002822:	0018      	movs	r0, r3
 8002824:	f003 fba2 	bl	8005f6c <Get_Status_Bit>
 8002828:	0003      	movs	r3, r0
 800282a:	2b01      	cmp	r3, #1
 800282c:	d001      	beq.n	8002832 <UART2_RX_transfer_complete_callback+0x2e>
 800282e:	f001 f895 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002832:	4bb7      	ldr	r3, [pc, #732]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d159      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
 800283c:	4bb5      	ldr	r3, [pc, #724]	@ (8002b14 <UART2_RX_transfer_complete_callback+0x310>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d154      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002846:	4bb4      	ldr	r3, [pc, #720]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b04      	cmp	r3, #4
 800284e:	d013      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002850:	4bb1      	ldr	r3, [pc, #708]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b01      	cmp	r3, #1
 8002858:	d00e      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 800285a:	4baf      	ldr	r3, [pc, #700]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b06      	cmp	r3, #6
 8002862:	d009      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002864:	4bac      	ldr	r3, [pc, #688]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b03      	cmp	r3, #3
 800286c:	d004      	beq.n	8002878 <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 800286e:	4baa      	ldr	r3, [pc, #680]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d13b      	bne.n	80028f0 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002878:	4ba3      	ldr	r3, [pc, #652]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002880:	d10b      	bne.n	800289a <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002882:	4ba5      	ldr	r3, [pc, #660]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002884:	4aa4      	ldr	r2, [pc, #656]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002886:	7812      	ldrb	r2, [r2, #0]
 8002888:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 800288a:	4ba3      	ldr	r3, [pc, #652]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800288c:	2209      	movs	r2, #9
 800288e:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002890:	4ba2      	ldr	r3, [pc, #648]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002892:	2200      	movs	r2, #0
 8002894:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002896:	f001 f85e 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800289a:	4b9b      	ldr	r3, [pc, #620]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2bf8      	cmp	r3, #248	@ 0xf8
 80028a2:	d001      	beq.n	80028a8 <UART2_RX_transfer_complete_callback+0xa4>
 80028a4:	f001 f857 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 80028a8:	4b9b      	ldr	r3, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028aa:	4a9b      	ldr	r2, [pc, #620]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028ac:	7812      	ldrb	r2, [r2, #0]
 80028ae:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 80028b0:	4b99      	ldr	r3, [pc, #612]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028b2:	220b      	movs	r2, #11
 80028b4:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 80028b6:	4b99      	ldr	r3, [pc, #612]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	23a0      	movs	r3, #160	@ 0xa0
 80028c2:	05db      	lsls	r3, r3, #23
 80028c4:	2200      	movs	r2, #0
 80028c6:	0018      	movs	r0, r3
 80028c8:	f005 fc13 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028cc:	4b94      	ldr	r3, [pc, #592]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	2140      	movs	r1, #64	@ 0x40
 80028d2:	0018      	movs	r0, r3
 80028d4:	f005 fc0d 	bl	80080f2 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80028d8:	4b8d      	ldr	r3, [pc, #564]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80028da:	2201      	movs	r2, #1
 80028dc:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028de:	4b8f      	ldr	r3, [pc, #572]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b8c      	ldr	r3, [pc, #560]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80028ea:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80028ec:	f001 f833 	bl	8003956 <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 80028f0:	4b89      	ldr	r3, [pc, #548]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d123      	bne.n	8002942 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028fa:	4b83      	ldr	r3, [pc, #524]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2bf8      	cmp	r3, #248	@ 0xf8
 8002902:	d001      	beq.n	8002908 <UART2_RX_transfer_complete_callback+0x104>
 8002904:	f001 f82a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	0099      	lsls	r1, r3, #2
 800290c:	23a0      	movs	r3, #160	@ 0xa0
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	2200      	movs	r2, #0
 8002912:	0018      	movs	r0, r3
 8002914:	f005 fbed 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800291a:	2201      	movs	r2, #1
 800291c:	2140      	movs	r1, #64	@ 0x40
 800291e:	0018      	movs	r0, r3
 8002920:	f005 fbe7 	bl	80080f2 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002924:	4b7a      	ldr	r3, [pc, #488]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800292a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3301      	adds	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b79      	ldr	r3, [pc, #484]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002936:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002938:	4b77      	ldr	r3, [pc, #476]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 800293a:	220a      	movs	r2, #10
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	f001 f80d 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002942:	4b75      	ldr	r3, [pc, #468]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b0a      	cmp	r3, #10
 800294a:	d145      	bne.n	80029d8 <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800294c:	4b6e      	ldr	r3, [pc, #440]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2bf8      	cmp	r3, #248	@ 0xf8
 8002954:	d001      	beq.n	800295a <UART2_RX_transfer_complete_callback+0x156>
 8002956:	f001 f801 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800295a:	4b6d      	ldr	r3, [pc, #436]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002960:	4b6e      	ldr	r3, [pc, #440]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	b2db      	uxtb	r3, r3
 8002966:	3301      	adds	r3, #1
 8002968:	b2da      	uxtb	r2, r3
 800296a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800296c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800296e:	4b6b      	ldr	r3, [pc, #428]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b0b      	cmp	r3, #11
 8002976:	d80f      	bhi.n	8002998 <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	0099      	lsls	r1, r3, #2
 800297c:	23a0      	movs	r3, #160	@ 0xa0
 800297e:	05db      	lsls	r3, r3, #23
 8002980:	2200      	movs	r2, #0
 8002982:	0018      	movs	r0, r3
 8002984:	f005 fbb5 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002988:	4b65      	ldr	r3, [pc, #404]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 800298a:	2201      	movs	r2, #1
 800298c:	2140      	movs	r1, #64	@ 0x40
 800298e:	0018      	movs	r0, r3
 8002990:	f005 fbaf 	bl	80080f2 <HAL_GPIO_WritePin>
 8002994:	f000 ffe2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002998:	4b60      	ldr	r3, [pc, #384]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b18      	cmp	r3, #24
 80029a0:	d80f      	bhi.n	80029c2 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029a2:	2380      	movs	r3, #128	@ 0x80
 80029a4:	0099      	lsls	r1, r3, #2
 80029a6:	23a0      	movs	r3, #160	@ 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	2201      	movs	r2, #1
 80029ac:	0018      	movs	r0, r3
 80029ae:	f005 fba0 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	2140      	movs	r1, #64	@ 0x40
 80029b8:	0018      	movs	r0, r3
 80029ba:	f005 fb9a 	bl	80080f2 <HAL_GPIO_WritePin>
 80029be:	f000 ffcd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80029c2:	4b55      	ldr	r3, [pc, #340]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029c4:	220a      	movs	r2, #10
 80029c6:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80029c8:	4b53      	ldr	r3, [pc, #332]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029ca:	2208      	movs	r2, #8
 80029cc:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 80029ce:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
 80029d4:	f000 ffc2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 80029d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b0b      	cmp	r3, #11
 80029e0:	d142      	bne.n	8002a68 <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029e2:	4b49      	ldr	r3, [pc, #292]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ea:	d001      	beq.n	80029f0 <UART2_RX_transfer_complete_callback+0x1ec>
 80029ec:	f000 ffb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029f0:	4b47      	ldr	r3, [pc, #284]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029f6:	4b49      	ldr	r3, [pc, #292]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b46      	ldr	r3, [pc, #280]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a02:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a04:	4b45      	ldr	r3, [pc, #276]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b0b      	cmp	r3, #11
 8002a0c:	d80f      	bhi.n	8002a2e <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	0099      	lsls	r1, r3, #2
 8002a12:	23a0      	movs	r3, #160	@ 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	2200      	movs	r2, #0
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f005 fb6a 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a1e:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	0018      	movs	r0, r3
 8002a26:	f005 fb64 	bl	80080f2 <HAL_GPIO_WritePin>
 8002a2a:	f000 ff97 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002a2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	d80f      	bhi.n	8002a58 <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	23a0      	movs	r3, #160	@ 0xa0
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	2201      	movs	r2, #1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f005 fb55 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a48:	4b35      	ldr	r3, [pc, #212]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f005 fb4f 	bl	80080f2 <HAL_GPIO_WritePin>
 8002a54:	f000 ff82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a58:	4b30      	ldr	r3, [pc, #192]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a60:	220c      	movs	r2, #12
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	f000 ff7a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 8002a68:	4b2b      	ldr	r3, [pc, #172]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d158      	bne.n	8002b24 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2bf8      	cmp	r3, #248	@ 0xf8
 8002a7a:	d138      	bne.n	8002aee <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002a7c:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <UART2_RX_transfer_complete_callback+0x30c>)
 8002a7e:	2201      	movs	r2, #1
 8002a80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002a82:	4b26      	ldr	r3, [pc, #152]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4b23      	ldr	r3, [pc, #140]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a8e:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a90:	4b22      	ldr	r3, [pc, #136]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b0b      	cmp	r3, #11
 8002a98:	d80f      	bhi.n	8002aba <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	0099      	lsls	r1, r3, #2
 8002a9e:	23a0      	movs	r3, #160	@ 0xa0
 8002aa0:	05db      	lsls	r3, r3, #23
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f005 fb24 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002aac:	2201      	movs	r2, #1
 8002aae:	2140      	movs	r1, #64	@ 0x40
 8002ab0:	0018      	movs	r0, r3
 8002ab2:	f005 fb1e 	bl	80080f2 <HAL_GPIO_WritePin>
 8002ab6:	f000 ff51 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002aba:	4b18      	ldr	r3, [pc, #96]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b18      	cmp	r3, #24
 8002ac2:	d80f      	bhi.n	8002ae4 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	0099      	lsls	r1, r3, #2
 8002ac8:	23a0      	movs	r3, #160	@ 0xa0
 8002aca:	05db      	lsls	r3, r3, #23
 8002acc:	2201      	movs	r2, #1
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f005 fb0f 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ad4:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <UART2_RX_transfer_complete_callback+0x31c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2140      	movs	r1, #64	@ 0x40
 8002ada:	0018      	movs	r0, r3
 8002adc:	f005 fb09 	bl	80080f2 <HAL_GPIO_WritePin>
 8002ae0:	f000 ff3c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <UART2_RX_transfer_complete_callback+0x318>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	f000 ff37 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002aee:	4b06      	ldr	r3, [pc, #24]	@ (8002b08 <UART2_RX_transfer_complete_callback+0x304>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2bfa      	cmp	r3, #250	@ 0xfa
 8002af6:	d001      	beq.n	8002afc <UART2_RX_transfer_complete_callback+0x2f8>
 8002af8:	f000 ff30 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002afc:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <UART2_RX_transfer_complete_callback+0x314>)
 8002afe:	220d      	movs	r2, #13
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	f000 ff2b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	200004dc 	.word	0x200004dc
 8002b0c:	20000c38 	.word	0x20000c38
 8002b10:	20000ce0 	.word	0x20000ce0
 8002b14:	20000444 	.word	0x20000444
 8002b18:	20000430 	.word	0x20000430
 8002b1c:	20000c36 	.word	0x20000c36
 8002b20:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002b24:	4bdc      	ldr	r3, [pc, #880]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b0d      	cmp	r3, #13
 8002b2c:	d160      	bne.n	8002bf0 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b2e:	4bdb      	ldr	r3, [pc, #876]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b36:	d001      	beq.n	8002b3c <UART2_RX_transfer_complete_callback+0x338>
 8002b38:	f000 ff10 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002b3c:	4bd8      	ldr	r3, [pc, #864]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 fe58 	bl	80047f4 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	0099      	lsls	r1, r3, #2
 8002b48:	23a0      	movs	r3, #160	@ 0xa0
 8002b4a:	05db      	lsls	r3, r3, #23
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f005 facf 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002b54:	4bd3      	ldr	r3, [pc, #844]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	2140      	movs	r1, #64	@ 0x40
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f005 fac9 	bl	80080f2 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	23a0      	movs	r3, #160	@ 0xa0
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	2200      	movs	r2, #0
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f005 fac1 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002b70:	4bcc      	ldr	r3, [pc, #816]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	2140      	movs	r1, #64	@ 0x40
 8002b76:	0018      	movs	r0, r3
 8002b78:	f005 fabb 	bl	80080f2 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b7c:	4bca      	ldr	r3, [pc, #808]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002b82:	4bca      	ldr	r3, [pc, #808]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002b88:	4bc3      	ldr	r3, [pc, #780]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b8a:	220d      	movs	r2, #13
 8002b8c:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b8e:	4bc2      	ldr	r3, [pc, #776]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002b90:	2208      	movs	r2, #8
 8002b92:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b94:	4bc6      	ldr	r3, [pc, #792]	@ (8002eb0 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b96:	2100      	movs	r1, #0
 8002b98:	0018      	movs	r0, r3
 8002b9a:	f003 f980 	bl	8005e9e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002b9e:	4bc5      	ldr	r3, [pc, #788]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002ba4:	4ac4      	ldr	r2, [pc, #784]	@ (8002eb8 <UART2_RX_transfer_complete_callback+0x6b4>)
 8002ba6:	4bbe      	ldr	r3, [pc, #760]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f001 fcca 	bl	8004544 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002bb0:	4ac2      	ldr	r2, [pc, #776]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bb2:	4bbb      	ldr	r3, [pc, #748]	@ (8002ea0 <UART2_RX_transfer_complete_callback+0x69c>)
 8002bb4:	0011      	movs	r1, r2
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f001 fcc4 	bl	8004544 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002bbc:	4bc0      	ldr	r3, [pc, #768]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bbe:	2108      	movs	r1, #8
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f003 f9e7 	bl	8005f94 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002bc6:	4bbd      	ldr	r3, [pc, #756]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bc8:	2100      	movs	r1, #0
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f001 fe3e 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002bd0:	4abc      	ldr	r2, [pc, #752]	@ (8002ec4 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002bd2:	4bba      	ldr	r3, [pc, #744]	@ (8002ebc <UART2_RX_transfer_complete_callback+0x6b8>)
 8002bd4:	0011      	movs	r1, r2
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 ff2e 	bl	8004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002bdc:	4bba      	ldr	r3, [pc, #744]	@ (8002ec8 <UART2_RX_transfer_complete_callback+0x6c4>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	001a      	movs	r2, r3
 8002be2:	49ba      	ldr	r1, [pc, #744]	@ (8002ecc <UART2_RX_transfer_complete_callback+0x6c8>)
 8002be4:	4bba      	ldr	r3, [pc, #744]	@ (8002ed0 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002be6:	0018      	movs	r0, r3
 8002be8:	f003 fe78 	bl	80068dc <HAL_ADC_Start_DMA>
 8002bec:	f000 feb6 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002bf0:	4ba9      	ldr	r3, [pc, #676]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d146      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>
 8002bfa:	4bb1      	ldr	r3, [pc, #708]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f003 f9b4 	bl	8005f6c <Get_Status_Bit>
 8002c04:	1e03      	subs	r3, r0, #0
 8002c06:	d13f      	bne.n	8002c88 <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c08:	4ba4      	ldr	r3, [pc, #656]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c10:	d001      	beq.n	8002c16 <UART2_RX_transfer_complete_callback+0x412>
 8002c12:	f000 fea3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002c16:	4ba4      	ldr	r3, [pc, #656]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c1c:	4ba3      	ldr	r3, [pc, #652]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4ba1      	ldr	r3, [pc, #644]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c28:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002c2a:	4ba0      	ldr	r3, [pc, #640]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b0b      	cmp	r3, #11
 8002c32:	d80f      	bhi.n	8002c54 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	23a0      	movs	r3, #160	@ 0xa0
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f005 fa57 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002c44:	4b97      	ldr	r3, [pc, #604]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f005 fa51 	bl	80080f2 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c50:	f000 fe84 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002c54:	4b95      	ldr	r3, [pc, #596]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b18      	cmp	r3, #24
 8002c5c:	d80f      	bhi.n	8002c7e <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c5e:	2380      	movs	r3, #128	@ 0x80
 8002c60:	0099      	lsls	r1, r3, #2
 8002c62:	23a0      	movs	r3, #160	@ 0xa0
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	2201      	movs	r2, #1
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f005 fa42 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	2140      	movs	r1, #64	@ 0x40
 8002c74:	0018      	movs	r0, r3
 8002c76:	f005 fa3c 	bl	80080f2 <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c7a:	f000 fe6f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002c7e:	4b8b      	ldr	r3, [pc, #556]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c84:	f000 fe6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002c88:	4b83      	ldr	r3, [pc, #524]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d14c      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c92:	4b88      	ldr	r3, [pc, #544]	@ (8002eb4 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d147      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>
 8002c9c:	4b88      	ldr	r3, [pc, #544]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c9e:	2120      	movs	r1, #32
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f003 f963 	bl	8005f6c <Get_Status_Bit>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d13f      	bne.n	8002d2c <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cac:	4b7b      	ldr	r3, [pc, #492]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cb4:	d11e      	bne.n	8002cf4 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cc8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002cd0:	4b71      	ldr	r3, [pc, #452]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002cd6:	4b70      	ldr	r3, [pc, #448]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002cd8:	2208      	movs	r2, #8
 8002cda:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002cde:	2120      	movs	r1, #32
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f003 f969 	bl	8005fb8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002ce6:	4b76      	ldr	r3, [pc, #472]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002ce8:	2140      	movs	r1, #64	@ 0x40
 8002cea:	0018      	movs	r0, r3
 8002cec:	f003 f964 	bl	8005fb8 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cf0:	f000 fe33 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002cf4:	4b69      	ldr	r3, [pc, #420]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2bfa      	cmp	r3, #250	@ 0xfa
 8002cfc:	d001      	beq.n	8002d02 <UART2_RX_transfer_complete_callback+0x4fe>
 8002cfe:	f000 fe2c 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8002d02:	4b6a      	ldr	r3, [pc, #424]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d0a:	220e      	movs	r2, #14
 8002d0c:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d0e:	4b62      	ldr	r3, [pc, #392]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d10:	2208      	movs	r2, #8
 8002d12:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002d14:	4b6a      	ldr	r3, [pc, #424]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d16:	2120      	movs	r1, #32
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f003 f94d 	bl	8005fb8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002d1e:	4b68      	ldr	r3, [pc, #416]	@ (8002ec0 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002d20:	2140      	movs	r1, #64	@ 0x40
 8002d22:	0018      	movs	r0, r3
 8002d24:	f003 f948 	bl	8005fb8 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d28:	f000 fe17 	bl	800395a <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b0e      	cmp	r3, #14
 8002d34:	d123      	bne.n	8002d7e <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d36:	4b59      	ldr	r3, [pc, #356]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d3e:	d001      	beq.n	8002d44 <UART2_RX_transfer_complete_callback+0x540>
 8002d40:	f000 fe0c 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d44:	2380      	movs	r3, #128	@ 0x80
 8002d46:	0099      	lsls	r1, r3, #2
 8002d48:	23a0      	movs	r3, #160	@ 0xa0
 8002d4a:	05db      	lsls	r3, r3, #23
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f005 f9cf 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d54:	4b53      	ldr	r3, [pc, #332]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	2140      	movs	r1, #64	@ 0x40
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f005 f9c9 	bl	80080f2 <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002d60:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <UART2_RX_transfer_complete_callback+0x6a4>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	4b4e      	ldr	r3, [pc, #312]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d72:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d74:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d76:	220f      	movs	r2, #15
 8002d78:	701a      	strb	r2, [r3, #0]
 8002d7a:	f000 fdef 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002d7e:	4b46      	ldr	r3, [pc, #280]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d142      	bne.n	8002e0e <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d88:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d90:	d001      	beq.n	8002d96 <UART2_RX_transfer_complete_callback+0x592>
 8002d92:	f000 fde3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 8002d96:	4b45      	ldr	r3, [pc, #276]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	4b42      	ldr	r3, [pc, #264]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b0b      	cmp	r3, #11
 8002dac:	d80f      	bhi.n	8002dce <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002dae:	2380      	movs	r3, #128	@ 0x80
 8002db0:	0099      	lsls	r1, r3, #2
 8002db2:	23a0      	movs	r3, #160	@ 0xa0
 8002db4:	05db      	lsls	r3, r3, #23
 8002db6:	2200      	movs	r2, #0
 8002db8:	0018      	movs	r0, r3
 8002dba:	f005 f99a 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dbe:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	2140      	movs	r1, #64	@ 0x40
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	f005 f994 	bl	80080f2 <HAL_GPIO_WritePin>
 8002dca:	f000 fdc7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b18      	cmp	r3, #24
 8002dd6:	d80f      	bhi.n	8002df8 <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	0099      	lsls	r1, r3, #2
 8002ddc:	23a0      	movs	r3, #160	@ 0xa0
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	2201      	movs	r2, #1
 8002de2:	0018      	movs	r0, r3
 8002de4:	f005 f985 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002de8:	4b2e      	ldr	r3, [pc, #184]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	2140      	movs	r1, #64	@ 0x40
 8002dee:	0018      	movs	r0, r3
 8002df0:	f005 f97f 	bl	80080f2 <HAL_GPIO_WritePin>
 8002df4:	f000 fdb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002df8:	4b27      	ldr	r3, [pc, #156]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002dfa:	220f      	movs	r2, #15
 8002dfc:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002dfe:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e00:	2208      	movs	r2, #8
 8002e02:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	f000 fda7 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002e0e:	4b22      	ldr	r3, [pc, #136]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d15d      	bne.n	8002ed4 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e18:	4b20      	ldr	r3, [pc, #128]	@ (8002e9c <UART2_RX_transfer_complete_callback+0x698>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e20:	d001      	beq.n	8002e26 <UART2_RX_transfer_complete_callback+0x622>
 8002e22:	f000 fd9b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002e26:	4b21      	ldr	r3, [pc, #132]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b1e      	ldr	r3, [pc, #120]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e32:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b0b      	cmp	r3, #11
 8002e3c:	d80f      	bhi.n	8002e5e <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e3e:	2380      	movs	r3, #128	@ 0x80
 8002e40:	0099      	lsls	r1, r3, #2
 8002e42:	23a0      	movs	r3, #160	@ 0xa0
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	2200      	movs	r2, #0
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f005 f952 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	2140      	movs	r1, #64	@ 0x40
 8002e54:	0018      	movs	r0, r3
 8002e56:	f005 f94c 	bl	80080f2 <HAL_GPIO_WritePin>
 8002e5a:	f000 fd7f 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002e5e:	4b13      	ldr	r3, [pc, #76]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b18      	cmp	r3, #24
 8002e66:	d80f      	bhi.n	8002e88 <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e68:	2380      	movs	r3, #128	@ 0x80
 8002e6a:	0099      	lsls	r1, r3, #2
 8002e6c:	23a0      	movs	r3, #160	@ 0xa0
 8002e6e:	05db      	lsls	r3, r3, #23
 8002e70:	2201      	movs	r2, #1
 8002e72:	0018      	movs	r0, r3
 8002e74:	f005 f93d 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2140      	movs	r1, #64	@ 0x40
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f005 f937 	bl	80080f2 <HAL_GPIO_WritePin>
 8002e84:	f000 fd6a 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002e88:	4b03      	ldr	r3, [pc, #12]	@ (8002e98 <UART2_RX_transfer_complete_callback+0x694>)
 8002e8a:	2211      	movs	r2, #17
 8002e8c:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e8e:	4b07      	ldr	r3, [pc, #28]	@ (8002eac <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	f000 fd62 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8002e98:	20000430 	.word	0x20000430
 8002e9c:	200004dc 	.word	0x200004dc
 8002ea0:	20000c98 	.word	0x20000c98
 8002ea4:	50000800 	.word	0x50000800
 8002ea8:	20000ce0 	.word	0x20000ce0
 8002eac:	20000c36 	.word	0x20000c36
 8002eb0:	200008d0 	.word	0x200008d0
 8002eb4:	20000444 	.word	0x20000444
 8002eb8:	20000cbc 	.word	0x20000cbc
 8002ebc:	20000c50 	.word	0x20000c50
 8002ec0:	20000c38 	.word	0x20000c38
 8002ec4:	20000028 	.word	0x20000028
 8002ec8:	0800dc80 	.word	0x0800dc80
 8002ecc:	20000c44 	.word	0x20000c44
 8002ed0:	200004fc 	.word	0x200004fc
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002ed4:	4bed      	ldr	r3, [pc, #948]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b11      	cmp	r3, #17
 8002edc:	d146      	bne.n	8002f6c <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002ede:	4bec      	ldr	r3, [pc, #944]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ee6:	d135      	bne.n	8002f54 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002ee8:	4bea      	ldr	r3, [pc, #936]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	3301      	adds	r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4be8      	ldr	r3, [pc, #928]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef4:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002ef6:	4be7      	ldr	r3, [pc, #924]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b0b      	cmp	r3, #11
 8002efe:	d80f      	bhi.n	8002f20 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f00:	2380      	movs	r3, #128	@ 0x80
 8002f02:	0099      	lsls	r1, r3, #2
 8002f04:	23a0      	movs	r3, #160	@ 0xa0
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	2200      	movs	r2, #0
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f005 f8f1 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f10:	4be1      	ldr	r3, [pc, #900]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	2140      	movs	r1, #64	@ 0x40
 8002f16:	0018      	movs	r0, r3
 8002f18:	f005 f8eb 	bl	80080f2 <HAL_GPIO_WritePin>
 8002f1c:	f000 fd1e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002f20:	4bdc      	ldr	r3, [pc, #880]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b18      	cmp	r3, #24
 8002f28:	d80f      	bhi.n	8002f4a <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f2a:	2380      	movs	r3, #128	@ 0x80
 8002f2c:	0099      	lsls	r1, r3, #2
 8002f2e:	23a0      	movs	r3, #160	@ 0xa0
 8002f30:	05db      	lsls	r3, r3, #23
 8002f32:	2201      	movs	r2, #1
 8002f34:	0018      	movs	r0, r3
 8002f36:	f005 f8dc 	bl	80080f2 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f3a:	4bd7      	ldr	r3, [pc, #860]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	@ 0x40
 8002f40:	0018      	movs	r0, r3
 8002f42:	f005 f8d6 	bl	80080f2 <HAL_GPIO_WritePin>
 8002f46:	f000 fd09 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8002f4a:	4bd2      	ldr	r3, [pc, #840]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	f000 fd04 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f54:	4bce      	ldr	r3, [pc, #824]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	2bfa      	cmp	r3, #250	@ 0xfa
 8002f5c:	d001      	beq.n	8002f62 <UART2_RX_transfer_complete_callback+0x75e>
 8002f5e:	f000 fcfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f62:	4bca      	ldr	r3, [pc, #808]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f64:	2212      	movs	r2, #18
 8002f66:	701a      	strb	r2, [r3, #0]
 8002f68:	f000 fcf8 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002f6c:	4bc7      	ldr	r3, [pc, #796]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b12      	cmp	r3, #18
 8002f74:	d001      	beq.n	8002f7a <UART2_RX_transfer_complete_callback+0x776>
 8002f76:	f000 fcf1 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f7a:	4bc5      	ldr	r3, [pc, #788]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f82:	d001      	beq.n	8002f88 <UART2_RX_transfer_complete_callback+0x784>
 8002f84:	f000 fcea 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002f88:	4bc4      	ldr	r3, [pc, #784]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f001 fc32 	bl	80047f4 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	0099      	lsls	r1, r3, #2
 8002f94:	23a0      	movs	r3, #160	@ 0xa0
 8002f96:	05db      	lsls	r3, r3, #23
 8002f98:	2201      	movs	r2, #1
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f005 f8a9 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002fa0:	4bbd      	ldr	r3, [pc, #756]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	2140      	movs	r1, #64	@ 0x40
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f005 f8a3 	bl	80080f2 <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	0099      	lsls	r1, r3, #2
 8002fb0:	23a0      	movs	r3, #160	@ 0xa0
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f005 f89b 	bl	80080f2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	@ (8003298 <UART2_RX_transfer_complete_callback+0xa94>)
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	2140      	movs	r1, #64	@ 0x40
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	f005 f895 	bl	80080f2 <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002fc8:	4bb0      	ldr	r3, [pc, #704]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fca:	2212      	movs	r2, #18
 8002fcc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002fce:	4baf      	ldr	r3, [pc, #700]	@ (800328c <UART2_RX_transfer_complete_callback+0xa88>)
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002fd4:	4baf      	ldr	r3, [pc, #700]	@ (8003294 <UART2_RX_transfer_complete_callback+0xa90>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002fda:	4bb1      	ldr	r3, [pc, #708]	@ (80032a0 <UART2_RX_transfer_complete_callback+0xa9c>)
 8002fdc:	2100      	movs	r1, #0
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f002 ff5d 	bl	8005e9e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002fe4:	4baf      	ldr	r3, [pc, #700]	@ (80032a4 <UART2_RX_transfer_complete_callback+0xaa0>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002fea:	4aaf      	ldr	r2, [pc, #700]	@ (80032a8 <UART2_RX_transfer_complete_callback+0xaa4>)
 8002fec:	4bab      	ldr	r3, [pc, #684]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002fee:	0011      	movs	r1, r2
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f001 faa7 	bl	8004544 <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002ff6:	4aad      	ldr	r2, [pc, #692]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 8002ff8:	4ba8      	ldr	r3, [pc, #672]	@ (800329c <UART2_RX_transfer_complete_callback+0xa98>)
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f001 faa1 	bl	8004544 <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003002:	4bab      	ldr	r3, [pc, #684]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003004:	2108      	movs	r1, #8
 8003006:	0018      	movs	r0, r3
 8003008:	f002 ffc4 	bl	8005f94 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800300c:	4ba7      	ldr	r3, [pc, #668]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800300e:	2100      	movs	r1, #0
 8003010:	0018      	movs	r0, r3
 8003012:	f001 fc1b 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003016:	4aa7      	ldr	r2, [pc, #668]	@ (80032b4 <UART2_RX_transfer_complete_callback+0xab0>)
 8003018:	4ba4      	ldr	r3, [pc, #656]	@ (80032ac <UART2_RX_transfer_complete_callback+0xaa8>)
 800301a:	0011      	movs	r1, r2
 800301c:	0018      	movs	r0, r3
 800301e:	f001 fd0b 	bl	8004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003022:	4ba5      	ldr	r3, [pc, #660]	@ (80032b8 <UART2_RX_transfer_complete_callback+0xab4>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	001a      	movs	r2, r3
 8003028:	49a4      	ldr	r1, [pc, #656]	@ (80032bc <UART2_RX_transfer_complete_callback+0xab8>)
 800302a:	4ba5      	ldr	r3, [pc, #660]	@ (80032c0 <UART2_RX_transfer_complete_callback+0xabc>)
 800302c:	0018      	movs	r0, r3
 800302e:	f003 fc55 	bl	80068dc <HAL_ADC_Start_DMA>
 8003032:	f000 fc93 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8003036:	4ba3      	ldr	r3, [pc, #652]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d000      	beq.n	8003042 <UART2_RX_transfer_complete_callback+0x83e>
 8003040:	e29e      	b.n	8003580 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8003042:	4ba1      	ldr	r3, [pc, #644]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d000      	beq.n	800304e <UART2_RX_transfer_complete_callback+0x84a>
 800304c:	e0a3      	b.n	8003196 <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800304e:	4b9f      	ldr	r3, [pc, #636]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003050:	0018      	movs	r0, r3
 8003052:	f7fe f824 	bl	800109e <Is_Data_Buffer_Empty>
 8003056:	0003      	movs	r3, r0
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <UART2_RX_transfer_complete_callback+0x85c>
 800305c:	f000 fc7e 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 8003060:	4b8b      	ldr	r3, [pc, #556]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fd feda 	bl	8000e1c <Is_Status_Byte>
 8003068:	0003      	movs	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <UART2_RX_transfer_complete_callback+0x86e>
 800306e:	f000 fc75 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003072:	4b87      	ldr	r3, [pc, #540]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003074:	0018      	movs	r0, r3
 8003076:	f7fd ff03 	bl	8000e80 <Is_PC_Status_Byte>
 800307a:	0003      	movs	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d134      	bne.n	80030ea <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 8003080:	4b83      	ldr	r3, [pc, #524]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4b90      	ldr	r3, [pc, #576]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003088:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800308a:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b7f      	ldr	r3, [pc, #508]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003092:	0011      	movs	r1, r2
 8003094:	0018      	movs	r0, r3
 8003096:	f7fd ffe1 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800309a:	0003      	movs	r3, r0
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10d      	bne.n	80030bc <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80030a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	4b87      	ldr	r3, [pc, #540]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030a8:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	4b80      	ldr	r3, [pc, #512]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030b0:	0011      	movs	r1, r2
 80030b2:	0018      	movs	r0, r3
 80030b4:	f002 ff6e 	bl	8005f94 <Set_Status_Bit>
 80030b8:	f000 fc50 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 80030bc:	4b7c      	ldr	r3, [pc, #496]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030be:	0018      	movs	r0, r3
 80030c0:	f7fe f883 	bl	80011ca <Is_OMNI_On>
 80030c4:	0003      	movs	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d001      	beq.n	80030ce <UART2_RX_transfer_complete_callback+0x8ca>
 80030ca:	f000 fc47 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 80030ce:	4b70      	ldr	r3, [pc, #448]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b7b      	ldr	r3, [pc, #492]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 80030d6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	005a      	lsls	r2, r3, #1
 80030dc:	4b74      	ldr	r3, [pc, #464]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80030de:	0011      	movs	r1, r2
 80030e0:	0018      	movs	r0, r3
 80030e2:	f002 ff57 	bl	8005f94 <Set_Status_Bit>
 80030e6:	f000 fc39 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80030ea:	4b69      	ldr	r3, [pc, #420]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd fee3 	bl	8000eb8 <Is_CC_Status_Byte>
 80030f2:	0003      	movs	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d134      	bne.n	8003162 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 80030f8:	4b65      	ldr	r3, [pc, #404]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2da      	uxtb	r2, r3
 80030fe:	4b72      	ldr	r3, [pc, #456]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003100:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003102:	4b73      	ldr	r3, [pc, #460]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	4b61      	ldr	r3, [pc, #388]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7fd ffa5 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003112:	0003      	movs	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 8003118:	4b5d      	ldr	r3, [pc, #372]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b69      	ldr	r3, [pc, #420]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003120:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003122:	2380      	movs	r3, #128	@ 0x80
 8003124:	005a      	lsls	r2, r3, #1
 8003126:	4b62      	ldr	r3, [pc, #392]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003128:	0011      	movs	r1, r2
 800312a:	0018      	movs	r0, r3
 800312c:	f002 ff32 	bl	8005f94 <Set_Status_Bit>
 8003130:	f000 fc14 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003134:	4b5e      	ldr	r3, [pc, #376]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003136:	0018      	movs	r0, r3
 8003138:	f7fe f847 	bl	80011ca <Is_OMNI_On>
 800313c:	0003      	movs	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d001      	beq.n	8003146 <UART2_RX_transfer_complete_callback+0x942>
 8003142:	f000 fc0b 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003146:	4b52      	ldr	r3, [pc, #328]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	4b5d      	ldr	r3, [pc, #372]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800314e:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	005a      	lsls	r2, r3, #1
 8003154:	4b56      	ldr	r3, [pc, #344]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f002 ff1b 	bl	8005f94 <Set_Status_Bit>
 800315e:	f000 fbfd 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003162:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd ff69 	bl	800103c <Is_Sysex_Start_Status_Byte>
 800316a:	0003      	movs	r3, r0
 800316c:	2b01      	cmp	r3, #1
 800316e:	d001      	beq.n	8003174 <UART2_RX_transfer_complete_callback+0x970>
 8003170:	f000 fbf4 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 8003174:	4b46      	ldr	r3, [pc, #280]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	4b52      	ldr	r3, [pc, #328]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 800317c:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 800317e:	4b52      	ldr	r3, [pc, #328]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003184:	2380      	movs	r3, #128	@ 0x80
 8003186:	005a      	lsls	r2, r3, #1
 8003188:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800318a:	0011      	movs	r1, r2
 800318c:	0018      	movs	r0, r3
 800318e:	f002 ff01 	bl	8005f94 <Set_Status_Bit>
 8003192:	f000 fbe3 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 8003196:	4b4c      	ldr	r3, [pc, #304]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <UART2_RX_transfer_complete_callback+0x9a0>
 80031a0:	f000 fbdc 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80031a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd fe51 	bl	8000e4e <Is_Data_Byte>
 80031ac:	0003      	movs	r3, r0
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d000      	beq.n	80031b4 <UART2_RX_transfer_complete_callback+0x9b0>
 80031b2:	e151      	b.n	8003458 <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	005a      	lsls	r2, r3, #1
 80031b8:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031ba:	0011      	movs	r1, r2
 80031bc:	0018      	movs	r0, r3
 80031be:	f002 fee9 	bl	8005f94 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7fd fe5b 	bl	8000e80 <Is_PC_Status_Byte>
 80031ca:	0003      	movs	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d143      	bne.n	8003258 <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80031d0:	4b3f      	ldr	r3, [pc, #252]	@ (80032d0 <UART2_RX_transfer_complete_callback+0xacc>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b3c      	ldr	r3, [pc, #240]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 80031d8:	0011      	movs	r1, r2
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd ff3e 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80031e0:	0003      	movs	r3, r0
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d008      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 80031e6:	4b32      	ldr	r3, [pc, #200]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7fd ffee 	bl	80011ca <Is_OMNI_On>
 80031ee:	0003      	movs	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d001      	beq.n	80031f8 <UART2_RX_transfer_complete_callback+0x9f4>
 80031f4:	f000 fbb2 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80031f8:	4b34      	ldr	r3, [pc, #208]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 80031fa:	0018      	movs	r0, r3
 80031fc:	f7fd ff4f 	bl	800109e <Is_Data_Buffer_Empty>
 8003200:	0003      	movs	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d001      	beq.n	800320a <UART2_RX_transfer_complete_callback+0xa06>
 8003206:	f000 fba9 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800320a:	4b21      	ldr	r3, [pc, #132]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800320c:	2104      	movs	r1, #4
 800320e:	0018      	movs	r0, r3
 8003210:	f7fd ff93 	bl	800113a <Is_Program_Change_Data_Byte_In_Range>
 8003214:	0003      	movs	r3, r0
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10f      	bne.n	800323a <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800321a:	f7fd fd79 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 800321e:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b2da      	uxtb	r2, r3
 8003228:	4b2a      	ldr	r3, [pc, #168]	@ (80032d4 <UART2_RX_transfer_complete_callback+0xad0>)
 800322a:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800322c:	f7fd f978 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003230:	4b1f      	ldr	r3, [pc, #124]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 8003232:	2108      	movs	r1, #8
 8003234:	0018      	movs	r0, r3
 8003236:	f002 febf 	bl	8005fb8 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800323a:	4b24      	ldr	r3, [pc, #144]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd ff5e 	bl	80010fe <Clear_Data_Buffer>
								active_status_byte = 0;
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <UART2_RX_transfer_complete_callback+0xac0>)
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003248:	4a19      	ldr	r2, [pc, #100]	@ (80032b0 <UART2_RX_transfer_complete_callback+0xaac>)
 800324a:	4b23      	ldr	r3, [pc, #140]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f7fd ffd5 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 8003254:	f000 fb82 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 8003258:	4b1b      	ldr	r3, [pc, #108]	@ (80032c8 <UART2_RX_transfer_complete_callback+0xac4>)
 800325a:	0018      	movs	r0, r3
 800325c:	f7fd fe2c 	bl	8000eb8 <Is_CC_Status_Byte>
 8003260:	0003      	movs	r3, r0
 8003262:	2b01      	cmp	r3, #1
 8003264:	d001      	beq.n	800326a <UART2_RX_transfer_complete_callback+0xa66>
 8003266:	f000 fb79 	bl	800395c <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800326a:	4b18      	ldr	r3, [pc, #96]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 800326c:	0018      	movs	r0, r3
 800326e:	f7fd ff16 	bl	800109e <Is_Data_Buffer_Empty>
 8003272:	0003      	movs	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d131      	bne.n	80032dc <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <UART2_RX_transfer_complete_callback+0xa8c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b13      	ldr	r3, [pc, #76]	@ (80032cc <UART2_RX_transfer_complete_callback+0xac8>)
 8003280:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003282:	4b15      	ldr	r3, [pc, #84]	@ (80032d8 <UART2_RX_transfer_complete_callback+0xad4>)
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	e368      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 800328a:	46c0      	nop			@ (mov r8, r8)
 800328c:	20000430 	.word	0x20000430
 8003290:	200004dc 	.word	0x200004dc
 8003294:	20000c36 	.word	0x20000c36
 8003298:	50000800 	.word	0x50000800
 800329c:	20000c98 	.word	0x20000c98
 80032a0:	200008d0 	.word	0x200008d0
 80032a4:	20000444 	.word	0x20000444
 80032a8:	20000cbc 	.word	0x20000cbc
 80032ac:	20000c50 	.word	0x20000c50
 80032b0:	20000c38 	.word	0x20000c38
 80032b4:	20000028 	.word	0x20000028
 80032b8:	0800dc80 	.word	0x0800dc80
 80032bc:	20000c44 	.word	0x20000c44
 80032c0:	200004fc 	.word	0x200004fc
 80032c4:	200004cb 	.word	0x200004cb
 80032c8:	200004cc 	.word	0x200004cc
 80032cc:	200004d0 	.word	0x200004d0
 80032d0:	200004ca 	.word	0x200004ca
 80032d4:	200004bc 	.word	0x200004bc
 80032d8:	20000c40 	.word	0x20000c40

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 80032dc:	4bd6      	ldr	r3, [pc, #856]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4bd6      	ldr	r3, [pc, #856]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032e4:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80032e6:	4ad6      	ldr	r2, [pc, #856]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80032e8:	4bd6      	ldr	r3, [pc, #856]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80032ea:	0011      	movs	r1, r2
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7fd ff86 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032f2:	4bd2      	ldr	r3, [pc, #840]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7fd fdfb 	bl	8000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80032fa:	0003      	movs	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d14c      	bne.n	800339a <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003300:	4bd1      	ldr	r3, [pc, #836]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	4bd1      	ldr	r3, [pc, #836]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003308:	0011      	movs	r1, r2
 800330a:	0018      	movs	r0, r3
 800330c:	f7fd fea6 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003310:	0003      	movs	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d139      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003316:	4ace      	ldr	r2, [pc, #824]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003318:	4bc8      	ldr	r3, [pc, #800]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd fe46 	bl	8000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003322:	0003      	movs	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d130      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003328:	4bc4      	ldr	r3, [pc, #784]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b79      	cmp	r3, #121	@ 0x79
 8003330:	d10b      	bne.n	800334a <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003332:	4ac8      	ldr	r2, [pc, #800]	@ (8003654 <UART2_RX_transfer_complete_callback+0xe50>)
 8003334:	4bc8      	ldr	r3, [pc, #800]	@ (8003658 <UART2_RX_transfer_complete_callback+0xe54>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd ff7b 	bl	8001234 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800333e:	4bc0      	ldr	r3, [pc, #768]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003340:	2108      	movs	r1, #8
 8003342:	0018      	movs	r0, r3
 8003344:	f002 fe38 	bl	8005fb8 <Clear_Status_Bit>
 8003348:	e01f      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800334a:	4bbc      	ldr	r3, [pc, #752]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b7a      	cmp	r3, #122	@ 0x7a
 8003352:	d107      	bne.n	8003364 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 8003354:	f7fd ffc8 	bl	80012e8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003358:	4bb9      	ldr	r3, [pc, #740]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800335a:	2108      	movs	r1, #8
 800335c:	0018      	movs	r0, r3
 800335e:	f002 fe2b 	bl	8005fb8 <Clear_Status_Bit>
 8003362:	e012      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003364:	4bb5      	ldr	r3, [pc, #724]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b7c      	cmp	r3, #124	@ 0x7c
 800336c:	d104      	bne.n	8003378 <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 800336e:	4bb4      	ldr	r3, [pc, #720]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003370:	0018      	movs	r0, r3
 8003372:	f7fd fff1 	bl	8001358 <Set_OMNI_Off>
 8003376:	e008      	b.n	800338a <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003378:	4bb0      	ldr	r3, [pc, #704]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b7d      	cmp	r3, #125	@ 0x7d
 8003380:	d103      	bne.n	800338a <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 8003382:	4baf      	ldr	r3, [pc, #700]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003384:	0018      	movs	r0, r3
 8003386:	f7fd fff7 	bl	8001378 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 800338a:	4bb4      	ldr	r3, [pc, #720]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003390:	4baa      	ldr	r3, [pc, #680]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003392:	0018      	movs	r0, r3
 8003394:	f7fd feb3 	bl	80010fe <Clear_Data_Buffer>
 8003398:	e2e0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800339a:	4ba8      	ldr	r3, [pc, #672]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800339c:	0018      	movs	r0, r3
 800339e:	f7fd fdd3 	bl	8000f48 <Is_Utilised_CC_First_Data_Byte>
 80033a2:	0003      	movs	r3, r0
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d14f      	bne.n	8003448 <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80033a8:	4ba7      	ldr	r3, [pc, #668]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4ba7      	ldr	r3, [pc, #668]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80033b0:	0011      	movs	r1, r2
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fd fe52 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80033b8:	0003      	movs	r3, r0
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d006      	beq.n	80033cc <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 80033be:	4ba0      	ldr	r3, [pc, #640]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033c0:	0018      	movs	r0, r3
 80033c2:	f7fd ff02 	bl	80011ca <Is_OMNI_On>
 80033c6:	0003      	movs	r3, r0
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d135      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80033cc:	4b9b      	ldr	r3, [pc, #620]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b14      	cmp	r3, #20
 80033d4:	d104      	bne.n	80033e0 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033d6:	4b9e      	ldr	r3, [pc, #632]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033d8:	0018      	movs	r0, r3
 80033da:	f7fd fc17 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80033de:	e02b      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80033e0:	4b96      	ldr	r3, [pc, #600]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b15      	cmp	r3, #21
 80033e8:	d109      	bne.n	80033fe <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80033ea:	4b99      	ldr	r3, [pc, #612]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7fd fc27 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80033f2:	4b93      	ldr	r3, [pc, #588]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80033f4:	2108      	movs	r1, #8
 80033f6:	0018      	movs	r0, r3
 80033f8:	f002 fdde 	bl	8005fb8 <Clear_Status_Bit>
 80033fc:	e01c      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80033fe:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b16      	cmp	r3, #22
 8003406:	d104      	bne.n	8003412 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003408:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fc32 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003410:	e012      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003412:	4b8a      	ldr	r3, [pc, #552]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b17      	cmp	r3, #23
 800341a:	d104      	bne.n	8003426 <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800341c:	4b8c      	ldr	r3, [pc, #560]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 800341e:	0018      	movs	r0, r3
 8003420:	f7fd fc42 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 8003424:	e008      	b.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003426:	4b85      	ldr	r3, [pc, #532]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b18      	cmp	r3, #24
 800342e:	d103      	bne.n	8003438 <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003430:	4b87      	ldr	r3, [pc, #540]	@ (8003650 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003432:	0018      	movs	r0, r3
 8003434:	f7fd fc52 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800343a:	2200      	movs	r2, #0
 800343c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800343e:	4b7f      	ldr	r3, [pc, #508]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003440:	0018      	movs	r0, r3
 8003442:	f7fd fe5c 	bl	80010fe <Clear_Data_Buffer>
 8003446:	e289      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003448:	4b84      	ldr	r3, [pc, #528]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800344e:	4b7b      	ldr	r3, [pc, #492]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 8003450:	0018      	movs	r0, r3
 8003452:	f7fd fe54 	bl	80010fe <Clear_Data_Buffer>
 8003456:	e281      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003458:	4b78      	ldr	r3, [pc, #480]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fe4f 	bl	80010fe <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003460:	4a77      	ldr	r2, [pc, #476]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003462:	4b78      	ldr	r3, [pc, #480]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f7fd fec9 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 800346c:	4b72      	ldr	r3, [pc, #456]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800346e:	0018      	movs	r0, r3
 8003470:	f7fd fd06 	bl	8000e80 <Is_PC_Status_Byte>
 8003474:	0003      	movs	r3, r0
 8003476:	2b01      	cmp	r3, #1
 8003478:	d131      	bne.n	80034de <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 800347a:	4b6f      	ldr	r3, [pc, #444]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b72      	ldr	r3, [pc, #456]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 8003482:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003484:	4b70      	ldr	r3, [pc, #448]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	b2da      	uxtb	r2, r3
 800348a:	4b6b      	ldr	r3, [pc, #428]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800348c:	0011      	movs	r1, r2
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd fde4 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003494:	0003      	movs	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10c      	bne.n	80034b4 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 800349a:	4b67      	ldr	r3, [pc, #412]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	4b6e      	ldr	r3, [pc, #440]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034a2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034a4:	2380      	movs	r3, #128	@ 0x80
 80034a6:	005a      	lsls	r2, r3, #1
 80034a8:	4b65      	ldr	r3, [pc, #404]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034aa:	0011      	movs	r1, r2
 80034ac:	0018      	movs	r0, r3
 80034ae:	f002 fd71 	bl	8005f94 <Set_Status_Bit>
 80034b2:	e253      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80034b4:	4b62      	ldr	r3, [pc, #392]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034b6:	0018      	movs	r0, r3
 80034b8:	f7fd fe87 	bl	80011ca <Is_OMNI_On>
 80034bc:	0003      	movs	r3, r0
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d000      	beq.n	80034c4 <UART2_RX_transfer_complete_callback+0xcc0>
 80034c2:	e24b      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 80034c4:	4b5c      	ldr	r3, [pc, #368]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4b64      	ldr	r3, [pc, #400]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80034cc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	005a      	lsls	r2, r3, #1
 80034d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80034d4:	0011      	movs	r1, r2
 80034d6:	0018      	movs	r0, r3
 80034d8:	f002 fd5c 	bl	8005f94 <Set_Status_Bit>
 80034dc:	e23e      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80034de:	4b56      	ldr	r3, [pc, #344]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034e0:	0018      	movs	r0, r3
 80034e2:	f7fd fce9 	bl	8000eb8 <Is_CC_Status_Byte>
 80034e6:	0003      	movs	r3, r0
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d131      	bne.n	8003550 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	4b56      	ldr	r3, [pc, #344]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 80034f4:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80034f6:	4b54      	ldr	r3, [pc, #336]	@ (8003648 <UART2_RX_transfer_complete_callback+0xe44>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	4b4e      	ldr	r3, [pc, #312]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f7fd fdab 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003506:	0003      	movs	r3, r0
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 800350c:	4b4a      	ldr	r3, [pc, #296]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	4b52      	ldr	r3, [pc, #328]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003514:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003516:	2380      	movs	r3, #128	@ 0x80
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	4b49      	ldr	r3, [pc, #292]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800351c:	0011      	movs	r1, r2
 800351e:	0018      	movs	r0, r3
 8003520:	f002 fd38 	bl	8005f94 <Set_Status_Bit>
 8003524:	e21a      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003526:	4b46      	ldr	r3, [pc, #280]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003528:	0018      	movs	r0, r3
 800352a:	f7fd fe4e 	bl	80011ca <Is_OMNI_On>
 800352e:	0003      	movs	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d000      	beq.n	8003536 <UART2_RX_transfer_complete_callback+0xd32>
 8003534:	e212      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003536:	4b40      	ldr	r3, [pc, #256]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	4b47      	ldr	r3, [pc, #284]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 800353e:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003540:	2380      	movs	r3, #128	@ 0x80
 8003542:	005a      	lsls	r2, r3, #1
 8003544:	4b3e      	ldr	r3, [pc, #248]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003546:	0011      	movs	r1, r2
 8003548:	0018      	movs	r0, r3
 800354a:	f002 fd23 	bl	8005f94 <Set_Status_Bit>
 800354e:	e205      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003550:	4b39      	ldr	r3, [pc, #228]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003552:	0018      	movs	r0, r3
 8003554:	f7fd fd72 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003558:	0003      	movs	r3, r0
 800355a:	2b01      	cmp	r3, #1
 800355c:	d000      	beq.n	8003560 <UART2_RX_transfer_complete_callback+0xd5c>
 800355e:	e1fd      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003560:	4b35      	ldr	r3, [pc, #212]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	b2da      	uxtb	r2, r3
 8003566:	4b3d      	ldr	r3, [pc, #244]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003568:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 800356a:	4b38      	ldr	r3, [pc, #224]	@ (800364c <UART2_RX_transfer_complete_callback+0xe48>)
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003570:	2380      	movs	r3, #128	@ 0x80
 8003572:	005a      	lsls	r2, r3, #1
 8003574:	4b32      	ldr	r3, [pc, #200]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003576:	0011      	movs	r1, r2
 8003578:	0018      	movs	r0, r3
 800357a:	f002 fd0b 	bl	8005f94 <Set_Status_Bit>
 800357e:	e1ed      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003580:	4b36      	ldr	r3, [pc, #216]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d100      	bne.n	800358c <UART2_RX_transfer_complete_callback+0xd88>
 800358a:	e1e7      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f002 fce9 	bl	8005f6c <Get_Status_Bit>
 800359a:	0003      	movs	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 80035a0:	4b2e      	ldr	r3, [pc, #184]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 80035a6:	4b25      	ldr	r3, [pc, #148]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035a8:	0018      	movs	r0, r3
 80035aa:	f7fd fda8 	bl	80010fe <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80035ae:	4a24      	ldr	r2, [pc, #144]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 80035b0:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 80035b2:	0011      	movs	r1, r2
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7fd fe22 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 80035ba:	e1cf      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80035bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035be:	0018      	movs	r0, r3
 80035c0:	f7fd fc45 	bl	8000e4e <Is_Data_Byte>
 80035c4:	0003      	movs	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d000      	beq.n	80035cc <UART2_RX_transfer_complete_callback+0xdc8>
 80035ca:	e133      	b.n	8003834 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80035cc:	4b23      	ldr	r3, [pc, #140]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7fd fc56 	bl	8000e80 <Is_PC_Status_Byte>
 80035d4:	0003      	movs	r3, r0
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d144      	bne.n	8003664 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80035da:	4b18      	ldr	r3, [pc, #96]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fd fd5e 	bl	800109e <Is_Data_Buffer_Empty>
 80035e2:	0003      	movs	r3, r0
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d000      	beq.n	80035ea <UART2_RX_transfer_complete_callback+0xde6>
 80035e8:	e1b8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80035ea:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 80035ec:	2104      	movs	r1, #4
 80035ee:	0018      	movs	r0, r3
 80035f0:	f7fd fda3 	bl	800113a <Is_Program_Change_Data_Byte_In_Range>
 80035f4:	0003      	movs	r3, r0
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10f      	bne.n	800361a <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 80035fa:	f7fd fb89 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80035fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <UART2_RX_transfer_complete_callback+0xe34>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	3301      	adds	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b15      	ldr	r3, [pc, #84]	@ (8003660 <UART2_RX_transfer_complete_callback+0xe5c>)
 800360a:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800360c:	f7fc ff88 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003612:	2108      	movs	r1, #8
 8003614:	0018      	movs	r0, r3
 8003616:	f002 fccf 	bl	8005fb8 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 800361a:	4b08      	ldr	r3, [pc, #32]	@ (800363c <UART2_RX_transfer_complete_callback+0xe38>)
 800361c:	0018      	movs	r0, r3
 800361e:	f7fd fd6e 	bl	80010fe <Clear_Data_Buffer>
							active_status_byte = 0;
 8003622:	4b0e      	ldr	r3, [pc, #56]	@ (800365c <UART2_RX_transfer_complete_callback+0xe58>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003628:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <UART2_RX_transfer_complete_callback+0xe3c>)
 800362a:	4b06      	ldr	r3, [pc, #24]	@ (8003644 <UART2_RX_transfer_complete_callback+0xe40>)
 800362c:	0011      	movs	r1, r2
 800362e:	0018      	movs	r0, r3
 8003630:	f7fd fde5 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
 8003634:	e192      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	200004dc 	.word	0x200004dc
 800363c:	200004d0 	.word	0x200004d0
 8003640:	20000c38 	.word	0x20000c38
 8003644:	20000c40 	.word	0x20000c40
 8003648:	200004ca 	.word	0x200004ca
 800364c:	200004cc 	.word	0x200004cc
 8003650:	200004d1 	.word	0x200004d1
 8003654:	20000028 	.word	0x20000028
 8003658:	20000c50 	.word	0x20000c50
 800365c:	200004cb 	.word	0x200004cb
 8003660:	200004bc 	.word	0x200004bc

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003664:	4bc4      	ldr	r3, [pc, #784]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003666:	0018      	movs	r0, r3
 8003668:	f7fd fc26 	bl	8000eb8 <Is_CC_Status_Byte>
 800366c:	0003      	movs	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d000      	beq.n	8003674 <UART2_RX_transfer_complete_callback+0xe70>
 8003672:	e0d2      	b.n	800381a <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003674:	4bc1      	ldr	r3, [pc, #772]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003676:	0018      	movs	r0, r3
 8003678:	f7fd fd11 	bl	800109e <Is_Data_Buffer_Empty>
 800367c:	0003      	movs	r3, r0
 800367e:	2b01      	cmp	r3, #1
 8003680:	d108      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003682:	4bbf      	ldr	r3, [pc, #764]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4bbc      	ldr	r3, [pc, #752]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800368a:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 800368c:	4bbd      	ldr	r3, [pc, #756]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
 8003692:	e163      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003694:	4bba      	ldr	r3, [pc, #744]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4bb8      	ldr	r3, [pc, #736]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800369c:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800369e:	4aba      	ldr	r2, [pc, #744]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fd fdaa 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80036aa:	4bb7      	ldr	r3, [pc, #732]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80036ac:	2108      	movs	r1, #8
 80036ae:	0018      	movs	r0, r3
 80036b0:	f002 fc82 	bl	8005fb8 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80036b4:	4bb1      	ldr	r3, [pc, #708]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd fc1a 	bl	8000ef0 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d14c      	bne.n	800375c <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80036c2:	4bb2      	ldr	r3, [pc, #712]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4bab      	ldr	r3, [pc, #684]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80036ca:	0011      	movs	r1, r2
 80036cc:	0018      	movs	r0, r3
 80036ce:	f7fd fcc5 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036d2:	0003      	movs	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d139      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80036d8:	4aad      	ldr	r2, [pc, #692]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80036da:	4ba8      	ldr	r3, [pc, #672]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f7fd fc65 	bl	8000fae <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80036e4:	0003      	movs	r3, r0
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d130      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80036ea:	4ba4      	ldr	r3, [pc, #656]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b79      	cmp	r3, #121	@ 0x79
 80036f2:	d10b      	bne.n	800370c <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 80036f4:	4aa7      	ldr	r2, [pc, #668]	@ (8003994 <UART2_RX_transfer_complete_callback+0x1190>)
 80036f6:	4ba8      	ldr	r3, [pc, #672]	@ (8003998 <UART2_RX_transfer_complete_callback+0x1194>)
 80036f8:	0011      	movs	r1, r2
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7fd fd9a 	bl	8001234 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003700:	4ba1      	ldr	r3, [pc, #644]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003702:	2108      	movs	r1, #8
 8003704:	0018      	movs	r0, r3
 8003706:	f002 fc57 	bl	8005fb8 <Clear_Status_Bit>
 800370a:	e01f      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800370c:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800370e:	785b      	ldrb	r3, [r3, #1]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b7a      	cmp	r3, #122	@ 0x7a
 8003714:	d107      	bne.n	8003726 <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003716:	f7fd fde7 	bl	80012e8 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 800371a:	4b9b      	ldr	r3, [pc, #620]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800371c:	2108      	movs	r1, #8
 800371e:	0018      	movs	r0, r3
 8003720:	f002 fc4a 	bl	8005fb8 <Clear_Status_Bit>
 8003724:	e012      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003726:	4b95      	ldr	r3, [pc, #596]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003728:	785b      	ldrb	r3, [r3, #1]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b7c      	cmp	r3, #124	@ 0x7c
 800372e:	d104      	bne.n	800373a <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003730:	4b95      	ldr	r3, [pc, #596]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003732:	0018      	movs	r0, r3
 8003734:	f7fd fe10 	bl	8001358 <Set_OMNI_Off>
 8003738:	e008      	b.n	800374c <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 800373a:	4b90      	ldr	r3, [pc, #576]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800373c:	785b      	ldrb	r3, [r3, #1]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b7d      	cmp	r3, #125	@ 0x7d
 8003742:	d103      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003744:	4b90      	ldr	r3, [pc, #576]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003746:	0018      	movs	r0, r3
 8003748:	f7fd fe16 	bl	8001378 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 800374c:	4b8a      	ldr	r3, [pc, #552]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003752:	4b8a      	ldr	r3, [pc, #552]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003754:	0018      	movs	r0, r3
 8003756:	f7fd fcd2 	bl	80010fe <Clear_Data_Buffer>
 800375a:	e0ff      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 800375c:	4b87      	ldr	r3, [pc, #540]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800375e:	0018      	movs	r0, r3
 8003760:	f7fd fbf2 	bl	8000f48 <Is_Utilised_CC_First_Data_Byte>
 8003764:	0003      	movs	r3, r0
 8003766:	2b01      	cmp	r3, #1
 8003768:	d14f      	bne.n	800380a <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 800376a:	4b88      	ldr	r3, [pc, #544]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b81      	ldr	r3, [pc, #516]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003772:	0011      	movs	r1, r2
 8003774:	0018      	movs	r0, r3
 8003776:	f7fd fc71 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 800377a:	0003      	movs	r3, r0
 800377c:	2b01      	cmp	r3, #1
 800377e:	d006      	beq.n	800378e <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003780:	4b81      	ldr	r3, [pc, #516]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003782:	0018      	movs	r0, r3
 8003784:	f7fd fd21 	bl	80011ca <Is_OMNI_On>
 8003788:	0003      	movs	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d135      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 800378e:	4b7b      	ldr	r3, [pc, #492]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b14      	cmp	r3, #20
 8003796:	d104      	bne.n	80037a2 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003798:	4b7d      	ldr	r3, [pc, #500]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 800379a:	0018      	movs	r0, r3
 800379c:	f7fd fa36 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80037a0:	e02b      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80037a2:	4b76      	ldr	r3, [pc, #472]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b15      	cmp	r3, #21
 80037aa:	d109      	bne.n	80037c0 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ac:	4b78      	ldr	r3, [pc, #480]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7fd fa46 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80037b4:	4b74      	ldr	r3, [pc, #464]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80037b6:	2108      	movs	r1, #8
 80037b8:	0018      	movs	r0, r3
 80037ba:	f002 fbfd 	bl	8005fb8 <Clear_Status_Bit>
 80037be:	e01c      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 80037c0:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b16      	cmp	r3, #22
 80037c8:	d104      	bne.n	80037d4 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037ca:	4b71      	ldr	r3, [pc, #452]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7fd fa51 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 80037d2:	e012      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 80037d4:	4b69      	ldr	r3, [pc, #420]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b17      	cmp	r3, #23
 80037dc:	d104      	bne.n	80037e8 <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037de:	4b6c      	ldr	r3, [pc, #432]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037e0:	0018      	movs	r0, r3
 80037e2:	f7fd fa61 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 80037e6:	e008      	b.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80037e8:	4b64      	ldr	r3, [pc, #400]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b18      	cmp	r3, #24
 80037f0:	d103      	bne.n	80037fa <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80037f2:	4b67      	ldr	r3, [pc, #412]	@ (8003990 <UART2_RX_transfer_complete_callback+0x118c>)
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fd fa71 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80037fa:	4b5f      	ldr	r3, [pc, #380]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003800:	4b5e      	ldr	r3, [pc, #376]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003802:	0018      	movs	r0, r3
 8003804:	f7fd fc7b 	bl	80010fe <Clear_Data_Buffer>
 8003808:	e0a8      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003810:	4b5a      	ldr	r3, [pc, #360]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003812:	0018      	movs	r0, r3
 8003814:	f7fd fc73 	bl	80010fe <Clear_Data_Buffer>
 8003818:	e0a0      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 800381a:	4b57      	ldr	r3, [pc, #348]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800381c:	0018      	movs	r0, r3
 800381e:	f7fd fc0d 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003822:	0003      	movs	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d000      	beq.n	800382a <UART2_RX_transfer_complete_callback+0x1026>
 8003828:	e098      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800382a:	4b54      	ldr	r3, [pc, #336]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 800382c:	0018      	movs	r0, r3
 800382e:	f7fd fc36 	bl	800109e <Is_Data_Buffer_Empty>
 8003832:	e093      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003834:	4b51      	ldr	r3, [pc, #324]	@ (800397c <UART2_RX_transfer_complete_callback+0x1178>)
 8003836:	0018      	movs	r0, r3
 8003838:	f7fd fc61 	bl	80010fe <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800383c:	4a52      	ldr	r2, [pc, #328]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800383e:	4b51      	ldr	r3, [pc, #324]	@ (8003984 <UART2_RX_transfer_complete_callback+0x1180>)
 8003840:	0011      	movs	r1, r2
 8003842:	0018      	movs	r0, r3
 8003844:	f7fd fcdb 	bl	80011fe <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003848:	4b4d      	ldr	r3, [pc, #308]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800384a:	0018      	movs	r0, r3
 800384c:	f7fd fb18 	bl	8000e80 <Is_PC_Status_Byte>
 8003850:	0003      	movs	r3, r0
 8003852:	2b01      	cmp	r3, #1
 8003854:	d130      	bne.n	80038b8 <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b4f      	ldr	r3, [pc, #316]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 800385e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003860:	4b4a      	ldr	r3, [pc, #296]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f7fd fbf6 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003870:	0003      	movs	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10c      	bne.n	8003890 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003876:	4b42      	ldr	r3, [pc, #264]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b3e      	ldr	r3, [pc, #248]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800387e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	005a      	lsls	r2, r3, #1
 8003884:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003886:	0011      	movs	r1, r2
 8003888:	0018      	movs	r0, r3
 800388a:	f002 fb83 	bl	8005f94 <Set_Status_Bit>
 800388e:	e065      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003890:	4b3d      	ldr	r3, [pc, #244]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003892:	0018      	movs	r0, r3
 8003894:	f7fd fc99 	bl	80011ca <Is_OMNI_On>
 8003898:	0003      	movs	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d15e      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800389e:	4b38      	ldr	r3, [pc, #224]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b34      	ldr	r3, [pc, #208]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038a6:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	005a      	lsls	r2, r3, #1
 80038ac:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038ae:	0011      	movs	r1, r2
 80038b0:	0018      	movs	r0, r3
 80038b2:	f002 fb6f 	bl	8005f94 <Set_Status_Bit>
 80038b6:	e051      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7fd fafc 	bl	8000eb8 <Is_CC_Status_Byte>
 80038c0:	0003      	movs	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d130      	bne.n	8003928 <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b33      	ldr	r3, [pc, #204]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 80038ce:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80038d0:	4b2e      	ldr	r3, [pc, #184]	@ (800398c <UART2_RX_transfer_complete_callback+0x1188>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038d8:	0011      	movs	r1, r2
 80038da:	0018      	movs	r0, r3
 80038dc:	f7fd fbbe 	bl	800105c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80038e0:	0003      	movs	r3, r0
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d10c      	bne.n	8003900 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 80038e6:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 80038ee:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80038f0:	2380      	movs	r3, #128	@ 0x80
 80038f2:	005a      	lsls	r2, r3, #1
 80038f4:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f002 fb4b 	bl	8005f94 <Set_Status_Bit>
 80038fe:	e02d      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fd fc61 	bl	80011ca <Is_OMNI_On>
 8003908:	0003      	movs	r3, r0
 800390a:	2b01      	cmp	r3, #1
 800390c:	d126      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 800390e:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b18      	ldr	r3, [pc, #96]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 8003916:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	005a      	lsls	r2, r3, #1
 800391c:	4b1a      	ldr	r3, [pc, #104]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800391e:	0011      	movs	r1, r2
 8003920:	0018      	movs	r0, r3
 8003922:	f002 fb37 	bl	8005f94 <Set_Status_Bit>
 8003926:	e019      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fd fb86 	bl	800103c <Is_Sysex_Start_Status_Byte>
 8003930:	0003      	movs	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d112      	bne.n	800395c <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003936:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b2da      	uxtb	r2, r3
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <UART2_RX_transfer_complete_callback+0x1174>)
 800393e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003940:	4b16      	ldr	r3, [pc, #88]	@ (800399c <UART2_RX_transfer_complete_callback+0x1198>)
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003946:	2380      	movs	r3, #128	@ 0x80
 8003948:	005a      	lsls	r2, r3, #1
 800394a:	4b0f      	ldr	r3, [pc, #60]	@ (8003988 <UART2_RX_transfer_complete_callback+0x1184>)
 800394c:	0011      	movs	r1, r2
 800394e:	0018      	movs	r0, r3
 8003950:	f002 fb20 	bl	8005f94 <Set_Status_Bit>
 8003954:	e002      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	e000      	b.n	800395c <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800395a:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 800395c:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003962:	4907      	ldr	r1, [pc, #28]	@ (8003980 <UART2_RX_transfer_complete_callback+0x117c>)
 8003964:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <UART2_RX_transfer_complete_callback+0x119c>)
 8003966:	2201      	movs	r2, #1
 8003968:	0018      	movs	r0, r3
 800396a:	f008 fa15 	bl	800bd98 <HAL_UART_Receive_DMA>
}
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	46bd      	mov	sp, r7
 8003972:	b002      	add	sp, #8
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			@ (mov r8, r8)
 8003978:	200004cb 	.word	0x200004cb
 800397c:	200004d0 	.word	0x200004d0
 8003980:	200004dc 	.word	0x200004dc
 8003984:	20000c40 	.word	0x20000c40
 8003988:	20000c38 	.word	0x20000c38
 800398c:	200004ca 	.word	0x200004ca
 8003990:	200004d1 	.word	0x200004d1
 8003994:	20000028 	.word	0x20000028
 8003998:	20000c50 	.word	0x20000c50
 800399c:	200004cc 	.word	0x200004cc
 80039a0:	20000a48 	.word	0x20000a48

080039a4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	0002      	movs	r2, r0
 80039ac:	1dbb      	adds	r3, r7, #6
 80039ae:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 80039b0:	1dbb      	adds	r3, r7, #6
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	2b80      	cmp	r3, #128	@ 0x80
 80039b6:	d117      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b06      	cmp	r3, #6
 80039c0:	d004      	beq.n	80039cc <HAL_GPIO_EXTI_Falling_Callback+0x28>
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b07      	cmp	r3, #7
 80039ca:	d10d      	bne.n	80039e8 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80039cc:	2380      	movs	r3, #128	@ 0x80
 80039ce:	0099      	lsls	r1, r3, #2
 80039d0:	23a0      	movs	r3, #160	@ 0xa0
 80039d2:	05db      	lsls	r3, r3, #23
 80039d4:	2201      	movs	r2, #1
 80039d6:	0018      	movs	r0, r3
 80039d8:	f004 fb8b 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 80039de:	2200      	movs	r2, #0
 80039e0:	2140      	movs	r1, #64	@ 0x40
 80039e2:	0018      	movs	r0, r3
 80039e4:	f004 fb85 	bl	80080f2 <HAL_GPIO_WritePin>
		}
	}
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000430 	.word	0x20000430
 80039f4:	50000800 	.word	0x50000800

080039f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	0002      	movs	r2, r0
 8003a00:	1dbb      	adds	r3, r7, #6
 8003a02:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8003a04:	1dbb      	adds	r3, r7, #6
 8003a06:	881b      	ldrh	r3, [r3, #0]
 8003a08:	2b80      	cmp	r3, #128	@ 0x80
 8003a0a:	d000      	beq.n	8003a0e <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8003a0c:	e0dd      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8003a0e:	4b71      	ldr	r3, [pc, #452]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d114      	bne.n	8003a42 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	23a0      	movs	r3, #160	@ 0xa0
 8003a1e:	05db      	lsls	r3, r3, #23
 8003a20:	2200      	movs	r2, #0
 8003a22:	0018      	movs	r0, r3
 8003a24:	f004 fb65 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a28:	4b6b      	ldr	r3, [pc, #428]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2140      	movs	r1, #64	@ 0x40
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f004 fb5f 	bl	80080f2 <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003a34:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a3a:	4b66      	ldr	r3, [pc, #408]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8003a40:	e0c3      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8003a42:	4b64      	ldr	r3, [pc, #400]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d114      	bne.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	0099      	lsls	r1, r3, #2
 8003a50:	23a0      	movs	r3, #160	@ 0xa0
 8003a52:	05db      	lsls	r3, r3, #23
 8003a54:	2200      	movs	r2, #0
 8003a56:	0018      	movs	r0, r3
 8003a58:	f004 fb4b 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a5c:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	2140      	movs	r1, #64	@ 0x40
 8003a62:	0018      	movs	r0, r3
 8003a64:	f004 fb45 	bl	80080f2 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003a68:	4b5a      	ldr	r3, [pc, #360]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a6a:	2203      	movs	r2, #3
 8003a6c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a6e:	4b59      	ldr	r3, [pc, #356]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a70:	2207      	movs	r2, #7
 8003a72:	701a      	strb	r2, [r3, #0]
}
 8003a74:	e0a9      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003a76:	4b57      	ldr	r3, [pc, #348]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d114      	bne.n	8003aaa <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a80:	2380      	movs	r3, #128	@ 0x80
 8003a82:	0099      	lsls	r1, r3, #2
 8003a84:	23a0      	movs	r3, #160	@ 0xa0
 8003a86:	05db      	lsls	r3, r3, #23
 8003a88:	2200      	movs	r2, #0
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	f004 fb31 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a90:	4b51      	ldr	r3, [pc, #324]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a92:	2201      	movs	r2, #1
 8003a94:	2140      	movs	r1, #64	@ 0x40
 8003a96:	0018      	movs	r0, r3
 8003a98:	f004 fb2b 	bl	80080f2 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003a9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aa4:	2207      	movs	r2, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
}
 8003aa8:	e08f      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d12b      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003ab4:	4b49      	ldr	r3, [pc, #292]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d126      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003abe:	4b48      	ldr	r3, [pc, #288]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f002 fa52 	bl	8005f6c <Get_Status_Bit>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d11e      	bne.n	8003b0c <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003ace:	2380      	movs	r3, #128	@ 0x80
 8003ad0:	0099      	lsls	r1, r3, #2
 8003ad2:	23a0      	movs	r3, #160	@ 0xa0
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f004 fb0a 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003ade:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2140      	movs	r1, #64	@ 0x40
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f004 fb04 	bl	80080f2 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003aea:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003aec:	2204      	movs	r2, #4
 8003aee:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003af0:	4b38      	ldr	r3, [pc, #224]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003af2:	2207      	movs	r2, #7
 8003af4:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003af6:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003af8:	2120      	movs	r1, #32
 8003afa:	0018      	movs	r0, r3
 8003afc:	f002 fa5c 	bl	8005fb8 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b00:	4b37      	ldr	r3, [pc, #220]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b02:	2140      	movs	r1, #64	@ 0x40
 8003b04:	0018      	movs	r0, r3
 8003b06:	f002 fa57 	bl	8005fb8 <Clear_Status_Bit>
 8003b0a:	e05e      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b0c:	4b31      	ldr	r3, [pc, #196]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b08      	cmp	r3, #8
 8003b14:	d12b      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b16:	4b31      	ldr	r3, [pc, #196]	@ (8003bdc <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d126      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8003b20:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b22:	2120      	movs	r1, #32
 8003b24:	0018      	movs	r0, r3
 8003b26:	f002 fa21 	bl	8005f6c <Get_Status_Bit>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d11e      	bne.n	8003b6e <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b30:	2380      	movs	r3, #128	@ 0x80
 8003b32:	0099      	lsls	r1, r3, #2
 8003b34:	23a0      	movs	r3, #160	@ 0xa0
 8003b36:	05db      	lsls	r3, r3, #23
 8003b38:	2200      	movs	r2, #0
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f004 fad9 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b42:	2201      	movs	r2, #1
 8003b44:	2140      	movs	r1, #64	@ 0x40
 8003b46:	0018      	movs	r0, r3
 8003b48:	f004 fad3 	bl	80080f2 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003b4c:	4b21      	ldr	r3, [pc, #132]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b4e:	2208      	movs	r2, #8
 8003b50:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b54:	2207      	movs	r2, #7
 8003b56:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f002 fa2b 	bl	8005fb8 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b62:	4b1f      	ldr	r3, [pc, #124]	@ (8003be0 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003b64:	2140      	movs	r1, #64	@ 0x40
 8003b66:	0018      	movs	r0, r3
 8003b68:	f002 fa26 	bl	8005fb8 <Clear_Status_Bit>
 8003b6c:	e02d      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003b6e:	4b19      	ldr	r3, [pc, #100]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b07      	cmp	r3, #7
 8003b76:	d114      	bne.n	8003ba2 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003b78:	2380      	movs	r3, #128	@ 0x80
 8003b7a:	0099      	lsls	r1, r3, #2
 8003b7c:	23a0      	movs	r3, #160	@ 0xa0
 8003b7e:	05db      	lsls	r3, r3, #23
 8003b80:	2200      	movs	r2, #0
 8003b82:	0018      	movs	r0, r3
 8003b84:	f004 fab5 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003b88:	4b13      	ldr	r3, [pc, #76]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2140      	movs	r1, #64	@ 0x40
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f004 faaf 	bl	80080f2 <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003b94:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b96:	2207      	movs	r2, #7
 8003b98:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003b9c:	2206      	movs	r2, #6
 8003b9e:	701a      	strb	r2, [r3, #0]
}
 8003ba0:	e013      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd4 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b06      	cmp	r3, #6
 8003baa:	d10e      	bne.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	0099      	lsls	r1, r3, #2
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	05db      	lsls	r3, r3, #23
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f004 fa9b 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	@ (8003bd8 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	2140      	movs	r1, #64	@ 0x40
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f004 fa95 	bl	80080f2 <HAL_GPIO_WritePin>
}
 8003bc8:	e7ff      	b.n	8003bca <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b002      	add	sp, #8
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	20000430 	.word	0x20000430
 8003bd8:	50000800 	.word	0x50000800
 8003bdc:	20000444 	.word	0x20000444
 8003be0:	20000c38 	.word	0x20000c38

08003be4 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003bec:	250f      	movs	r5, #15
 8003bee:	197c      	adds	r4, r7, r5
 8003bf0:	2380      	movs	r3, #128	@ 0x80
 8003bf2:	00da      	lsls	r2, r3, #3
 8003bf4:	23a0      	movs	r3, #160	@ 0xa0
 8003bf6:	05db      	lsls	r3, r3, #23
 8003bf8:	0011      	movs	r1, r2
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f004 fa5c 	bl	80080b8 <HAL_GPIO_ReadPin>
 8003c00:	0003      	movs	r3, r0
 8003c02:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003c04:	4bae      	ldr	r3, [pc, #696]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d10a      	bne.n	8003c24 <LPTIM1_callback+0x40>
 8003c0e:	197b      	adds	r3, r7, r5
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c16:	4baa      	ldr	r3, [pc, #680]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c18:	2205      	movs	r2, #5
 8003c1a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003c1c:	4ba8      	ldr	r3, [pc, #672]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
 8003c22:	e070      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003c24:	4ba6      	ldr	r3, [pc, #664]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d10b      	bne.n	8003c46 <LPTIM1_callback+0x62>
 8003c2e:	230f      	movs	r3, #15
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c38:	4ba1      	ldr	r3, [pc, #644]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c3a:	2205      	movs	r2, #5
 8003c3c:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003c3e:	4ba0      	ldr	r3, [pc, #640]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c40:	2202      	movs	r2, #2
 8003c42:	705a      	strb	r2, [r3, #1]
 8003c44:	e05f      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003c46:	4b9e      	ldr	r3, [pc, #632]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b03      	cmp	r3, #3
 8003c4e:	d10b      	bne.n	8003c68 <LPTIM1_callback+0x84>
 8003c50:	230f      	movs	r3, #15
 8003c52:	18fb      	adds	r3, r7, r3
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c5a:	4b99      	ldr	r3, [pc, #612]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003c60:	4b97      	ldr	r3, [pc, #604]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c62:	2203      	movs	r2, #3
 8003c64:	705a      	strb	r2, [r3, #1]
 8003c66:	e04e      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003c68:	4b95      	ldr	r3, [pc, #596]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d122      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c72:	230f      	movs	r3, #15
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11d      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c7c:	4b91      	ldr	r3, [pc, #580]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d118      	bne.n	8003cb8 <LPTIM1_callback+0xd4>
 8003c86:	4b90      	ldr	r3, [pc, #576]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003c88:	2120      	movs	r1, #32
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f002 f96e 	bl	8005f6c <Get_Status_Bit>
 8003c90:	0003      	movs	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d110      	bne.n	8003cb8 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003c96:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c98:	2205      	movs	r2, #5
 8003c9a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003c9c:	4b88      	ldr	r3, [pc, #544]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003c9e:	2206      	movs	r2, #6
 8003ca0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ca2:	4b89      	ldr	r3, [pc, #548]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f002 f986 	bl	8005fb8 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cac:	4b86      	ldr	r3, [pc, #536]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cae:	2140      	movs	r1, #64	@ 0x40
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f002 f981 	bl	8005fb8 <Clear_Status_Bit>
 8003cb6:	e026      	b.n	8003d06 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003cb8:	4b81      	ldr	r3, [pc, #516]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d121      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d11c      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d117      	bne.n	8003d06 <LPTIM1_callback+0x122>
 8003cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cd8:	2120      	movs	r1, #32
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f002 f946 	bl	8005f6c <Get_Status_Bit>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d10f      	bne.n	8003d06 <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ce6:	4b76      	ldr	r3, [pc, #472]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003ce8:	2205      	movs	r2, #5
 8003cea:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003cec:	4b74      	ldr	r3, [pc, #464]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003cee:	2208      	movs	r2, #8
 8003cf0:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003cf2:	4b75      	ldr	r3, [pc, #468]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cf4:	2120      	movs	r1, #32
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f002 f95e 	bl	8005fb8 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003cfc:	4b72      	ldr	r3, [pc, #456]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003cfe:	2140      	movs	r1, #64	@ 0x40
 8003d00:	0018      	movs	r0, r3
 8003d02:	f002 f959 	bl	8005fb8 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE

	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003d06:	4b71      	ldr	r3, [pc, #452]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fd fc75 	bl	80015f8 <Check_Tap_Tempo_Switch_State>

	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003d0e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d004      	beq.n	8003d22 <LPTIM1_callback+0x13e>
 8003d18:	4b69      	ldr	r3, [pc, #420]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	d126      	bne.n	8003d70 <LPTIM1_callback+0x18c>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d22:	4b6a      	ldr	r3, [pc, #424]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10e      	bne.n	8003d4a <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	0099      	lsls	r1, r3, #2
 8003d30:	23a0      	movs	r3, #160	@ 0xa0
 8003d32:	05db      	lsls	r3, r3, #23
 8003d34:	2200      	movs	r2, #0
 8003d36:	0018      	movs	r0, r3
 8003d38:	f004 f9db 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003d3c:	4b64      	ldr	r3, [pc, #400]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2140      	movs	r1, #64	@ 0x40
 8003d42:	0018      	movs	r0, r3
 8003d44:	f004 f9d5 	bl	80080f2 <HAL_GPIO_WritePin>
 8003d48:	e012      	b.n	8003d70 <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003d4a:	4b60      	ldr	r3, [pc, #384]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	23a0      	movs	r3, #160	@ 0xa0
 8003d5a:	05db      	lsls	r3, r3, #23
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f004 f9c7 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003d64:	4b5a      	ldr	r3, [pc, #360]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	2140      	movs	r1, #64	@ 0x40
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f004 f9c1 	bl	80080f2 <HAL_GPIO_WritePin>

	//enum Validate timeout = Get_Status_Bit(&statuses, Tap_Tempo_Switch_Hold_Timer_Has_Timed_Out);

	static uint32_t depressed_num = 0;

	if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003d70:	4b56      	ldr	r3, [pc, #344]	@ (8003ecc <LPTIM1_callback+0x2e8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d12c      	bne.n	8003dd4 <LPTIM1_callback+0x1f0>

		if(depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_HOLD_TIME_COUNT){
 8003d7a:	4b56      	ldr	r3, [pc, #344]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	23fa      	movs	r3, #250	@ 0xfa
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d205      	bcs.n	8003d92 <LPTIM1_callback+0x1ae>

			depressed_num++;
 8003d86:	4b53      	ldr	r3, [pc, #332]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	4b51      	ldr	r3, [pc, #324]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e023      	b.n	8003dda <LPTIM1_callback+0x1f6>
		else{

			//enter PRESET SAVE MODE

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	0099      	lsls	r1, r3, #2
 8003d96:	23a0      	movs	r3, #160	@ 0xa0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	0018      	movs	r0, r3
 8003d9e:	f004 f9a8 	bl	80080f2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003da2:	4b4b      	ldr	r3, [pc, #300]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	@ 0x40
 8003da8:	0018      	movs	r0, r3
 8003daa:	f004 f9a2 	bl	80080f2 <HAL_GPIO_WritePin>

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8003dae:	4b44      	ldr	r3, [pc, #272]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d110      	bne.n	8003dda <LPTIM1_callback+0x1f6>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 8003db8:	210c      	movs	r1, #12
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	4a40      	ldr	r2, [pc, #256]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dbe:	7812      	ldrb	r2, [r2, #0]
 8003dc0:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dc4:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dc6:	7852      	ldrb	r2, [r2, #1]
 8003dc8:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8003dca:	4b3d      	ldr	r3, [pc, #244]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003dcc:	187a      	adds	r2, r7, r1
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	705a      	strb	r2, [r3, #1]
 8003dd2:	e002      	b.n	8003dda <LPTIM1_callback+0x1f6>
			}
		}
	}
	else{

		depressed_num = 0;
 8003dd4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ed4 <LPTIM1_callback+0x2f0>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
	}

	//CHECK FOR SPEED POT CHANGES
	if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 8003dda:	2380      	movs	r3, #128	@ 0x80
 8003ddc:	011a      	lsls	r2, r3, #4
 8003dde:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003de0:	0011      	movs	r1, r2
 8003de2:	0018      	movs	r0, r3
 8003de4:	f002 f8c2 	bl	8005f6c <Get_Status_Bit>
 8003de8:	0003      	movs	r3, r0
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d000      	beq.n	8003df0 <LPTIM1_callback+0x20c>
 8003dee:	e0d4      	b.n	8003f9a <LPTIM1_callback+0x3b6>

		Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	011a      	lsls	r2, r3, #4
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003df6:	0011      	movs	r1, r2
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f002 f8dd 	bl	8005fb8 <Clear_Status_Bit>

		pots_counter = 0;
 8003dfe:	4b36      	ldr	r3, [pc, #216]	@ (8003ed8 <LPTIM1_callback+0x2f4>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]

		//PERFORM SPEED POT CHECKING
		if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 8003e04:	4b2e      	ldr	r3, [pc, #184]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d004      	beq.n	8003e18 <LPTIM1_callback+0x234>
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d105      	bne.n	8003e24 <LPTIM1_callback+0x240>

			Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e18:	4b30      	ldr	r3, [pc, #192]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	f7fd facb 	bl	80013b8 <Pot_Check>
 8003e22:	e07d      	b.n	8003f20 <LPTIM1_callback+0x33c>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e24:	4b26      	ldr	r3, [pc, #152]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b06      	cmp	r3, #6
 8003e2c:	d117      	bne.n	8003e5e <LPTIM1_callback+0x27a>
 8003e2e:	4b25      	ldr	r3, [pc, #148]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d112      	bne.n	8003e5e <LPTIM1_callback+0x27a>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e38:	4b23      	ldr	r3, [pc, #140]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e3a:	2140      	movs	r1, #64	@ 0x40
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	f002 f8a9 	bl	8005f94 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e42:	4b21      	ldr	r3, [pc, #132]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e44:	2120      	movs	r1, #32
 8003e46:	0018      	movs	r0, r3
 8003e48:	f002 f890 	bl	8005f6c <Get_Status_Bit>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d166      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003e52:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd faae 	bl	80013b8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e5c:	e060      	b.n	8003f20 <LPTIM1_callback+0x33c>
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003e5e:	4b18      	ldr	r3, [pc, #96]	@ (8003ec0 <LPTIM1_callback+0x2dc>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d13f      	bne.n	8003ee8 <LPTIM1_callback+0x304>
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <LPTIM1_callback+0x2e0>)
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d13a      	bne.n	8003ee8 <LPTIM1_callback+0x304>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003e72:	4b15      	ldr	r3, [pc, #84]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e74:	2140      	movs	r1, #64	@ 0x40
 8003e76:	0018      	movs	r0, r3
 8003e78:	f002 f88c 	bl	8005f94 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003e7c:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <LPTIM1_callback+0x2e4>)
 8003e7e:	2120      	movs	r1, #32
 8003e80:	0018      	movs	r0, r3
 8003e82:	f002 f873 	bl	8005f6c <Get_Status_Bit>
 8003e86:	0003      	movs	r3, r0
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d149      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003e8c:	2380      	movs	r3, #128	@ 0x80
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	23a0      	movs	r3, #160	@ 0xa0
 8003e92:	05db      	lsls	r3, r3, #23
 8003e94:	2201      	movs	r2, #1
 8003e96:	0018      	movs	r0, r3
 8003e98:	f004 f92b 	bl	80080f2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed0 <LPTIM1_callback+0x2ec>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2140      	movs	r1, #64	@ 0x40
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f004 f925 	bl	80080f2 <HAL_GPIO_WritePin>

				MIDI_CLK_fsm = NOT_COMPILING;
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <LPTIM1_callback+0x2fc>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	701a      	strb	r2, [r3, #0]
				MIDI_CLK_tag = 0;
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <LPTIM1_callback+0x300>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003eb4:	4b09      	ldr	r3, [pc, #36]	@ (8003edc <LPTIM1_callback+0x2f8>)
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f7fd fa7d 	bl	80013b8 <Pot_Check>
			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003ebe:	e02f      	b.n	8003f20 <LPTIM1_callback+0x33c>
 8003ec0:	20000430 	.word	0x20000430
 8003ec4:	20000444 	.word	0x20000444
 8003ec8:	20000c38 	.word	0x20000c38
 8003ecc:	20000c28 	.word	0x20000c28
 8003ed0:	50000800 	.word	0x50000800
 8003ed4:	20000c2c 	.word	0x20000c2c
 8003ed8:	200004e2 	.word	0x200004e2
 8003edc:	20000c44 	.word	0x20000c44
 8003ee0:	20000ce0 	.word	0x20000ce0
 8003ee4:	20000c36 	.word	0x20000c36
			}
		}
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8003ee8:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd8 <LPTIM1_callback+0x3f4>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d116      	bne.n	8003f20 <LPTIM1_callback+0x33c>
 8003ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8003fdc <LPTIM1_callback+0x3f8>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d111      	bne.n	8003f20 <LPTIM1_callback+0x33c>

			Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003efc:	4b38      	ldr	r3, [pc, #224]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003efe:	2140      	movs	r1, #64	@ 0x40
 8003f00:	0018      	movs	r0, r3
 8003f02:	f002 f847 	bl	8005f94 <Set_Status_Bit>

			if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8003f06:	4b36      	ldr	r3, [pc, #216]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003f08:	2120      	movs	r1, #32
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f002 f82e 	bl	8005f6c <Get_Status_Bit>
 8003f10:	0003      	movs	r3, r0
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d104      	bne.n	8003f20 <LPTIM1_callback+0x33c>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 8003f16:	4b33      	ldr	r3, [pc, #204]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f18:	2101      	movs	r1, #1
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f7fd fa4c 	bl	80013b8 <Pot_Check>
			}
		}

		if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 8003f20:	4b31      	ldr	r3, [pc, #196]	@ (8003fe8 <LPTIM1_callback+0x404>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d004      	beq.n	8003f34 <LPTIM1_callback+0x350>
 8003f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fe8 <LPTIM1_callback+0x404>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d104      	bne.n	8003f3e <LPTIM1_callback+0x35a>
			Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 8003f34:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f36:	2100      	movs	r1, #0
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fd fa3d 	bl	80013b8 <Pot_Check>
		}
		if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8003fec <LPTIM1_callback+0x408>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d004      	beq.n	8003f52 <LPTIM1_callback+0x36e>
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <LPTIM1_callback+0x408>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d104      	bne.n	8003f5c <LPTIM1_callback+0x378>
			Pot_Check(ADCResultsDMA, DEPTH_POT);
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f54:	2102      	movs	r1, #2
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fd fa2e 	bl	80013b8 <Pot_Check>
		}
		if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <LPTIM1_callback+0x40c>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d004      	beq.n	8003f70 <LPTIM1_callback+0x38c>
 8003f66:	4b22      	ldr	r3, [pc, #136]	@ (8003ff0 <LPTIM1_callback+0x40c>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d104      	bne.n	8003f7a <LPTIM1_callback+0x396>
			Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 8003f70:	4b1c      	ldr	r3, [pc, #112]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f72:	2103      	movs	r1, #3
 8003f74:	0018      	movs	r0, r3
 8003f76:	f7fd fa1f 	bl	80013b8 <Pot_Check>
		}
		if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ff4 <LPTIM1_callback+0x410>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d004      	beq.n	8003f8e <LPTIM1_callback+0x3aa>
 8003f84:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <LPTIM1_callback+0x410>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d119      	bne.n	8003fc2 <LPTIM1_callback+0x3de>
			Pot_Check(ADCResultsDMA, PHASE_POT);
 8003f8e:	4b15      	ldr	r3, [pc, #84]	@ (8003fe4 <LPTIM1_callback+0x400>)
 8003f90:	2104      	movs	r1, #4
 8003f92:	0018      	movs	r0, r3
 8003f94:	f7fd fa10 	bl	80013b8 <Pot_Check>
 8003f98:	e013      	b.n	8003fc2 <LPTIM1_callback+0x3de>
		}

	}
	else{

		if(pots_counter == POT_COUNTER_COUNT){
 8003f9a:	4b17      	ldr	r3, [pc, #92]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	2b40      	cmp	r3, #64	@ 0x40
 8003fa2:	d107      	bne.n	8003fb4 <LPTIM1_callback+0x3d0>

			Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8003fa4:	2380      	movs	r3, #128	@ 0x80
 8003fa6:	011a      	lsls	r2, r3, #4
 8003fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <LPTIM1_callback+0x3fc>)
 8003faa:	0011      	movs	r1, r2
 8003fac:	0018      	movs	r0, r3
 8003fae:	f001 fff1 	bl	8005f94 <Set_Status_Bit>
 8003fb2:	e006      	b.n	8003fc2 <LPTIM1_callback+0x3de>
		}
		else{

			pots_counter++;
 8003fb4:	4b10      	ldr	r3, [pc, #64]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff8 <LPTIM1_callback+0x414>)
 8003fc0:	701a      	strb	r2, [r3, #0]
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <LPTIM1_callback+0x418>)
 8003fc4:	22fa      	movs	r2, #250	@ 0xfa
 8003fc6:	21fa      	movs	r1, #250	@ 0xfa
 8003fc8:	0018      	movs	r0, r3
 8003fca:	f004 f989 	bl	80082e0 <HAL_LPTIM_SetOnce_Start_IT>

}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	b004      	add	sp, #16
 8003fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	20000430 	.word	0x20000430
 8003fdc:	20000444 	.word	0x20000444
 8003fe0:	20000c38 	.word	0x20000c38
 8003fe4:	20000c44 	.word	0x20000c44
 8003fe8:	20000438 	.word	0x20000438
 8003fec:	20000434 	.word	0x20000434
 8003ff0:	2000043c 	.word	0x2000043c
 8003ff4:	20000440 	.word	0x20000440
 8003ff8:	200004e2 	.word	0x200004e2
 8003ffc:	20000bcc 	.word	0x20000bcc

08004000 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]


}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 8004018:	4bd4      	ldr	r3, [pc, #848]	@ (800436c <TIM14_callback+0x35c>)
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d106      	bne.n	8004030 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004022:	4bd3      	ldr	r3, [pc, #844]	@ (8004370 <TIM14_callback+0x360>)
 8004024:	2201      	movs	r2, #1
 8004026:	2140      	movs	r1, #64	@ 0x40
 8004028:	0018      	movs	r0, r3
 800402a:	f004 f862 	bl	80080f2 <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 800402e:	e1c9      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if((LED_fsm.current_state == LED_OFF) || (LED_fsm.current_state == LED_NONE)){
 8004030:	4bce      	ldr	r3, [pc, #824]	@ (800436c <TIM14_callback+0x35c>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	b2db      	uxtb	r3, r3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d004      	beq.n	8004044 <TIM14_callback+0x34>
 800403a:	4bcc      	ldr	r3, [pc, #816]	@ (800436c <TIM14_callback+0x35c>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <TIM14_callback+0x42>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004044:	4bca      	ldr	r3, [pc, #808]	@ (8004370 <TIM14_callback+0x360>)
 8004046:	2200      	movs	r2, #0
 8004048:	2140      	movs	r1, #64	@ 0x40
 800404a:	0018      	movs	r0, r3
 800404c:	f004 f851 	bl	80080f2 <HAL_GPIO_WritePin>
 8004050:	e1b8      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 8004052:	4bc6      	ldr	r3, [pc, #792]	@ (800436c <TIM14_callback+0x35c>)
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b03      	cmp	r3, #3
 800405a:	d133      	bne.n	80040c4 <TIM14_callback+0xb4>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 800405c:	4bc5      	ldr	r3, [pc, #788]	@ (8004374 <TIM14_callback+0x364>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 8004064:	4bc4      	ldr	r3, [pc, #784]	@ (8004378 <TIM14_callback+0x368>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10d      	bne.n	800408a <TIM14_callback+0x7a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800406e:	4bc0      	ldr	r3, [pc, #768]	@ (8004370 <TIM14_callback+0x360>)
 8004070:	2201      	movs	r2, #1
 8004072:	2140      	movs	r1, #64	@ 0x40
 8004074:	0018      	movs	r0, r3
 8004076:	f004 f83c 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 800407a:	4bbf      	ldr	r3, [pc, #764]	@ (8004378 <TIM14_callback+0x368>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	3301      	adds	r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	4bbc      	ldr	r3, [pc, #752]	@ (8004378 <TIM14_callback+0x368>)
 8004086:	701a      	strb	r2, [r3, #0]
}
 8004088:	e19c      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 800408a:	4bbb      	ldr	r3, [pc, #748]	@ (8004378 <TIM14_callback+0x368>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b04      	cmp	r3, #4
 8004092:	d900      	bls.n	8004096 <TIM14_callback+0x86>
 8004094:	e196      	b.n	80043c4 <TIM14_callback+0x3b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004096:	4bb6      	ldr	r3, [pc, #728]	@ (8004370 <TIM14_callback+0x360>)
 8004098:	2200      	movs	r2, #0
 800409a:	2140      	movs	r1, #64	@ 0x40
 800409c:	0018      	movs	r0, r3
 800409e:	f004 f828 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80040a2:	4bb5      	ldr	r3, [pc, #724]	@ (8004378 <TIM14_callback+0x368>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	3301      	adds	r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4bb2      	ldr	r3, [pc, #712]	@ (8004378 <TIM14_callback+0x368>)
 80040ae:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 80040b0:	4bb1      	ldr	r3, [pc, #708]	@ (8004378 <TIM14_callback+0x368>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b05      	cmp	r3, #5
 80040b8:	d000      	beq.n	80040bc <TIM14_callback+0xac>
 80040ba:	e183      	b.n	80043c4 <TIM14_callback+0x3b4>
				LED_counter = 0;
 80040bc:	4bae      	ldr	r3, [pc, #696]	@ (8004378 <TIM14_callback+0x368>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
}
 80040c2:	e17f      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 80040c4:	4ba9      	ldr	r3, [pc, #676]	@ (800436c <TIM14_callback+0x35c>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d156      	bne.n	800417c <TIM14_callback+0x16c>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80040ce:	4ba9      	ldr	r3, [pc, #676]	@ (8004374 <TIM14_callback+0x364>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 80040d6:	4ba8      	ldr	r3, [pc, #672]	@ (8004378 <TIM14_callback+0x368>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d815      	bhi.n	800410c <TIM14_callback+0xfc>
 80040e0:	4ba5      	ldr	r3, [pc, #660]	@ (8004378 <TIM14_callback+0x368>)
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2201      	movs	r2, #1
 80040e8:	4013      	ands	r3, r2
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d10d      	bne.n	800410c <TIM14_callback+0xfc>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040f0:	4b9f      	ldr	r3, [pc, #636]	@ (8004370 <TIM14_callback+0x360>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	2140      	movs	r1, #64	@ 0x40
 80040f6:	0018      	movs	r0, r3
 80040f8:	f003 fffb 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80040fc:	4b9e      	ldr	r3, [pc, #632]	@ (8004378 <TIM14_callback+0x368>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b9c      	ldr	r3, [pc, #624]	@ (8004378 <TIM14_callback+0x368>)
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e15b      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 800410c:	4b9a      	ldr	r3, [pc, #616]	@ (8004378 <TIM14_callback+0x368>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d815      	bhi.n	8004142 <TIM14_callback+0x132>
 8004116:	4b98      	ldr	r3, [pc, #608]	@ (8004378 <TIM14_callback+0x368>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2201      	movs	r2, #1
 800411e:	4013      	ands	r3, r2
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b01      	cmp	r3, #1
 8004124:	d10d      	bne.n	8004142 <TIM14_callback+0x132>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004126:	4b92      	ldr	r3, [pc, #584]	@ (8004370 <TIM14_callback+0x360>)
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	@ 0x40
 800412c:	0018      	movs	r0, r3
 800412e:	f003 ffe0 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 8004132:	4b91      	ldr	r3, [pc, #580]	@ (8004378 <TIM14_callback+0x368>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	b2db      	uxtb	r3, r3
 8004138:	3301      	adds	r3, #1
 800413a:	b2da      	uxtb	r2, r3
 800413c:	4b8e      	ldr	r3, [pc, #568]	@ (8004378 <TIM14_callback+0x368>)
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e140      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004142:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <TIM14_callback+0x368>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b06      	cmp	r3, #6
 800414a:	d900      	bls.n	800414e <TIM14_callback+0x13e>
 800414c:	e13a      	b.n	80043c4 <TIM14_callback+0x3b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800414e:	4b88      	ldr	r3, [pc, #544]	@ (8004370 <TIM14_callback+0x360>)
 8004150:	2200      	movs	r2, #0
 8004152:	2140      	movs	r1, #64	@ 0x40
 8004154:	0018      	movs	r0, r3
 8004156:	f003 ffcc 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 800415a:	4b87      	ldr	r3, [pc, #540]	@ (8004378 <TIM14_callback+0x368>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	3301      	adds	r3, #1
 8004162:	b2da      	uxtb	r2, r3
 8004164:	4b84      	ldr	r3, [pc, #528]	@ (8004378 <TIM14_callback+0x368>)
 8004166:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004168:	4b83      	ldr	r3, [pc, #524]	@ (8004378 <TIM14_callback+0x368>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b07      	cmp	r3, #7
 8004170:	d000      	beq.n	8004174 <TIM14_callback+0x164>
 8004172:	e127      	b.n	80043c4 <TIM14_callback+0x3b4>
				LED_counter = 0;
 8004174:	4b80      	ldr	r3, [pc, #512]	@ (8004378 <TIM14_callback+0x368>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
}
 800417a:	e123      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 800417c:	4b7b      	ldr	r3, [pc, #492]	@ (800436c <TIM14_callback+0x35c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b05      	cmp	r3, #5
 8004184:	d156      	bne.n	8004234 <TIM14_callback+0x224>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004186:	4b7b      	ldr	r3, [pc, #492]	@ (8004374 <TIM14_callback+0x364>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 800418e:	4b7a      	ldr	r3, [pc, #488]	@ (8004378 <TIM14_callback+0x368>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b04      	cmp	r3, #4
 8004196:	d815      	bhi.n	80041c4 <TIM14_callback+0x1b4>
 8004198:	4b77      	ldr	r3, [pc, #476]	@ (8004378 <TIM14_callback+0x368>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2201      	movs	r2, #1
 80041a0:	4013      	ands	r3, r2
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <TIM14_callback+0x1b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041a8:	4b71      	ldr	r3, [pc, #452]	@ (8004370 <TIM14_callback+0x360>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	2140      	movs	r1, #64	@ 0x40
 80041ae:	0018      	movs	r0, r3
 80041b0:	f003 ff9f 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80041b4:	4b70      	ldr	r3, [pc, #448]	@ (8004378 <TIM14_callback+0x368>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	4b6e      	ldr	r3, [pc, #440]	@ (8004378 <TIM14_callback+0x368>)
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	e0ff      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 80041c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004378 <TIM14_callback+0x368>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d815      	bhi.n	80041fa <TIM14_callback+0x1ea>
 80041ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004378 <TIM14_callback+0x368>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2201      	movs	r2, #1
 80041d6:	4013      	ands	r3, r2
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d10d      	bne.n	80041fa <TIM14_callback+0x1ea>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80041de:	4b64      	ldr	r3, [pc, #400]	@ (8004370 <TIM14_callback+0x360>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	0018      	movs	r0, r3
 80041e6:	f003 ff84 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80041ea:	4b63      	ldr	r3, [pc, #396]	@ (8004378 <TIM14_callback+0x368>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	3301      	adds	r3, #1
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4b60      	ldr	r3, [pc, #384]	@ (8004378 <TIM14_callback+0x368>)
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e0e4      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 80041fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004378 <TIM14_callback+0x368>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b08      	cmp	r3, #8
 8004202:	d900      	bls.n	8004206 <TIM14_callback+0x1f6>
 8004204:	e0de      	b.n	80043c4 <TIM14_callback+0x3b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004206:	4b5a      	ldr	r3, [pc, #360]	@ (8004370 <TIM14_callback+0x360>)
 8004208:	2200      	movs	r2, #0
 800420a:	2140      	movs	r1, #64	@ 0x40
 800420c:	0018      	movs	r0, r3
 800420e:	f003 ff70 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 8004212:	4b59      	ldr	r3, [pc, #356]	@ (8004378 <TIM14_callback+0x368>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	3301      	adds	r3, #1
 800421a:	b2da      	uxtb	r2, r3
 800421c:	4b56      	ldr	r3, [pc, #344]	@ (8004378 <TIM14_callback+0x368>)
 800421e:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004220:	4b55      	ldr	r3, [pc, #340]	@ (8004378 <TIM14_callback+0x368>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b09      	cmp	r3, #9
 8004228:	d000      	beq.n	800422c <TIM14_callback+0x21c>
 800422a:	e0cb      	b.n	80043c4 <TIM14_callback+0x3b4>
				LED_counter = 0;
 800422c:	4b52      	ldr	r3, [pc, #328]	@ (8004378 <TIM14_callback+0x368>)
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
}
 8004232:	e0c7      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004234:	4b4d      	ldr	r3, [pc, #308]	@ (800436c <TIM14_callback+0x35c>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b06      	cmp	r3, #6
 800423c:	d156      	bne.n	80042ec <TIM14_callback+0x2dc>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 800423e:	4b4d      	ldr	r3, [pc, #308]	@ (8004374 <TIM14_callback+0x364>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2200      	movs	r2, #0
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004246:	4b4c      	ldr	r3, [pc, #304]	@ (8004378 <TIM14_callback+0x368>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b06      	cmp	r3, #6
 800424e:	d815      	bhi.n	800427c <TIM14_callback+0x26c>
 8004250:	4b49      	ldr	r3, [pc, #292]	@ (8004378 <TIM14_callback+0x368>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2201      	movs	r2, #1
 8004258:	4013      	ands	r3, r2
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <TIM14_callback+0x26c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004260:	4b43      	ldr	r3, [pc, #268]	@ (8004370 <TIM14_callback+0x360>)
 8004262:	2201      	movs	r2, #1
 8004264:	2140      	movs	r1, #64	@ 0x40
 8004266:	0018      	movs	r0, r3
 8004268:	f003 ff43 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 800426c:	4b42      	ldr	r3, [pc, #264]	@ (8004378 <TIM14_callback+0x368>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3301      	adds	r3, #1
 8004274:	b2da      	uxtb	r2, r3
 8004276:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <TIM14_callback+0x368>)
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e0a3      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 800427c:	4b3e      	ldr	r3, [pc, #248]	@ (8004378 <TIM14_callback+0x368>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b06      	cmp	r3, #6
 8004284:	d815      	bhi.n	80042b2 <TIM14_callback+0x2a2>
 8004286:	4b3c      	ldr	r3, [pc, #240]	@ (8004378 <TIM14_callback+0x368>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2201      	movs	r2, #1
 800428e:	4013      	ands	r3, r2
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b01      	cmp	r3, #1
 8004294:	d10d      	bne.n	80042b2 <TIM14_callback+0x2a2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004296:	4b36      	ldr	r3, [pc, #216]	@ (8004370 <TIM14_callback+0x360>)
 8004298:	2200      	movs	r2, #0
 800429a:	2140      	movs	r1, #64	@ 0x40
 800429c:	0018      	movs	r0, r3
 800429e:	f003 ff28 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80042a2:	4b35      	ldr	r3, [pc, #212]	@ (8004378 <TIM14_callback+0x368>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	3301      	adds	r3, #1
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	4b32      	ldr	r3, [pc, #200]	@ (8004378 <TIM14_callback+0x368>)
 80042ae:	701a      	strb	r2, [r3, #0]
 80042b0:	e088      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 80042b2:	4b31      	ldr	r3, [pc, #196]	@ (8004378 <TIM14_callback+0x368>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b0a      	cmp	r3, #10
 80042ba:	d900      	bls.n	80042be <TIM14_callback+0x2ae>
 80042bc:	e082      	b.n	80043c4 <TIM14_callback+0x3b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80042be:	4b2c      	ldr	r3, [pc, #176]	@ (8004370 <TIM14_callback+0x360>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	2140      	movs	r1, #64	@ 0x40
 80042c4:	0018      	movs	r0, r3
 80042c6:	f003 ff14 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 80042ca:	4b2b      	ldr	r3, [pc, #172]	@ (8004378 <TIM14_callback+0x368>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	3301      	adds	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b28      	ldr	r3, [pc, #160]	@ (8004378 <TIM14_callback+0x368>)
 80042d6:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80042d8:	4b27      	ldr	r3, [pc, #156]	@ (8004378 <TIM14_callback+0x368>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b0b      	cmp	r3, #11
 80042e0:	d000      	beq.n	80042e4 <TIM14_callback+0x2d4>
 80042e2:	e06f      	b.n	80043c4 <TIM14_callback+0x3b4>
				LED_counter = 0;
 80042e4:	4b24      	ldr	r3, [pc, #144]	@ (8004378 <TIM14_callback+0x368>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	701a      	strb	r2, [r3, #0]
}
 80042ea:	e06b      	b.n	80043c4 <TIM14_callback+0x3b4>
	else if(LED_fsm.current_state == LED_CONFIRM){
 80042ec:	4b1f      	ldr	r3, [pc, #124]	@ (800436c <TIM14_callback+0x35c>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b07      	cmp	r3, #7
 80042f4:	d166      	bne.n	80043c4 <TIM14_callback+0x3b4>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80042f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <TIM14_callback+0x364>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2200      	movs	r2, #0
 80042fc:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 80042fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <TIM14_callback+0x368>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b06      	cmp	r3, #6
 8004306:	d815      	bhi.n	8004334 <TIM14_callback+0x324>
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <TIM14_callback+0x368>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2201      	movs	r2, #1
 8004310:	4013      	ands	r3, r2
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10d      	bne.n	8004334 <TIM14_callback+0x324>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004318:	4b15      	ldr	r3, [pc, #84]	@ (8004370 <TIM14_callback+0x360>)
 800431a:	2201      	movs	r2, #1
 800431c:	2140      	movs	r1, #64	@ 0x40
 800431e:	0018      	movs	r0, r3
 8004320:	f003 fee7 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 8004324:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <TIM14_callback+0x368>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	3301      	adds	r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <TIM14_callback+0x368>)
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e047      	b.n	80043c4 <TIM14_callback+0x3b4>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <TIM14_callback+0x368>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b06      	cmp	r3, #6
 800433c:	d81e      	bhi.n	800437c <TIM14_callback+0x36c>
 800433e:	4b0e      	ldr	r3, [pc, #56]	@ (8004378 <TIM14_callback+0x368>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b01      	cmp	r3, #1
 800434c:	d116      	bne.n	800437c <TIM14_callback+0x36c>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800434e:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <TIM14_callback+0x360>)
 8004350:	2200      	movs	r2, #0
 8004352:	2140      	movs	r1, #64	@ 0x40
 8004354:	0018      	movs	r0, r3
 8004356:	f003 fecc 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 800435a:	4b07      	ldr	r3, [pc, #28]	@ (8004378 <TIM14_callback+0x368>)
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	3301      	adds	r3, #1
 8004362:	b2da      	uxtb	r2, r3
 8004364:	4b04      	ldr	r3, [pc, #16]	@ (8004378 <TIM14_callback+0x368>)
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e02c      	b.n	80043c4 <TIM14_callback+0x3b4>
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	20000448 	.word	0x20000448
 8004370:	50000800 	.word	0x50000800
 8004374:	200005e0 	.word	0x200005e0
 8004378:	200004c9 	.word	0x200004c9
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 800437c:	4b13      	ldr	r3, [pc, #76]	@ (80043cc <TIM14_callback+0x3bc>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b0a      	cmp	r3, #10
 8004384:	d81e      	bhi.n	80043c4 <TIM14_callback+0x3b4>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <TIM14_callback+0x3c0>)
 8004388:	2200      	movs	r2, #0
 800438a:	2140      	movs	r1, #64	@ 0x40
 800438c:	0018      	movs	r0, r3
 800438e:	f003 feb0 	bl	80080f2 <HAL_GPIO_WritePin>
			LED_counter++;
 8004392:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <TIM14_callback+0x3bc>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3301      	adds	r3, #1
 800439a:	b2da      	uxtb	r2, r3
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <TIM14_callback+0x3bc>)
 800439e:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 80043a0:	4b0a      	ldr	r3, [pc, #40]	@ (80043cc <TIM14_callback+0x3bc>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b0b      	cmp	r3, #11
 80043a8:	d10c      	bne.n	80043c4 <TIM14_callback+0x3b4>
				enum LED_States prev = LED_fsm.prev_state;
 80043aa:	210f      	movs	r1, #15
 80043ac:	187b      	adds	r3, r7, r1
 80043ae:	4a09      	ldr	r2, [pc, #36]	@ (80043d4 <TIM14_callback+0x3c4>)
 80043b0:	7852      	ldrb	r2, [r2, #1]
 80043b2:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 80043b4:	187b      	adds	r3, r7, r1
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <TIM14_callback+0x3c4>)
 80043ba:	0011      	movs	r1, r2
 80043bc:	0018      	movs	r0, r3
 80043be:	f7fc fcdf 	bl	8000d80 <set_LED_to_state>
}
 80043c2:	e7ff      	b.n	80043c4 <TIM14_callback+0x3b4>
 80043c4:	46c0      	nop			@ (mov r8, r8)
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b004      	add	sp, #16
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	200004c9 	.word	0x200004c9
 80043d0:	50000800 	.word	0x50000800
 80043d4:	20000448 	.word	0x20000448

080043d8 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	0002      	movs	r2, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	1dbb      	adds	r3, r7, #6
 80043e4:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 80043e6:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <Input_Capture_Processing+0xe0>)
 80043e8:	2104      	movs	r1, #4
 80043ea:	0018      	movs	r0, r3
 80043ec:	f001 fde4 	bl	8005fb8 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 80043f0:	1dbb      	adds	r3, r7, #6
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	0018      	movs	r0, r3
 80043f8:	f001 fd6d 	bl	8005ed6 <isPrime>
 80043fc:	0003      	movs	r3, r0
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d106      	bne.n	8004410 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004402:	1dbb      	adds	r3, r7, #6
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29b      	uxth	r3, r3
 8004408:	3301      	adds	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	1dbb      	adds	r3, r7, #6
 800440e:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004410:	1dbb      	adds	r3, r7, #6
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	b29b      	uxth	r3, r3
 8004416:	019b      	lsls	r3, r3, #6
 8004418:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 800441a:	2317      	movs	r3, #23
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2200      	movs	r2, #0
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e02d      	b.n	8004480 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004424:	2317      	movs	r3, #23
 8004426:	18fb      	adds	r3, r7, r3
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	2280      	movs	r2, #128	@ 0x80
 800442e:	0052      	lsls	r2, r2, #1
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	b29a      	uxth	r2, r3
 8004434:	1dbb      	adds	r3, r7, #6
 8004436:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004438:	1dbb      	adds	r3, r7, #6
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	001a      	movs	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	0011      	movs	r1, r2
 8004444:	0018      	movs	r0, r3
 8004446:	f7fb fee3 	bl	8000210 <__aeabi_uidivmod>
 800444a:	000b      	movs	r3, r1
 800444c:	001a      	movs	r2, r3
 800444e:	210e      	movs	r1, #14
 8004450:	187b      	adds	r3, r7, r1
 8004452:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004454:	187b      	adds	r3, r7, r1
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 800445c:	1dbb      	adds	r3, r7, #6
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	0019      	movs	r1, r3
 8004464:	6938      	ldr	r0, [r7, #16]
 8004466:	f7fb fe4d 	bl	8000104 <__udivsi3>
 800446a:	0003      	movs	r3, r0
 800446c:	b29a      	uxth	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	835a      	strh	r2, [r3, #26]
			break;
 8004472:	e00a      	b.n	800448a <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004474:	2117      	movs	r1, #23
 8004476:	187b      	adds	r3, r7, r1
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	187b      	adds	r3, r7, r1
 800447c:	3201      	adds	r2, #1
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	2317      	movs	r3, #23
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b80      	cmp	r3, #128	@ 0x80
 8004488:	d9cc      	bls.n	8004424 <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 800448a:	1dbb      	adds	r3, r7, #6
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	b29b      	uxth	r3, r3
 8004490:	2280      	movs	r2, #128	@ 0x80
 8004492:	0052      	lsls	r2, r2, #1
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	b29a      	uxth	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2101      	movs	r1, #1
 80044a0:	0018      	movs	r0, r3
 80044a2:	f000 f9d3 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f001 f8d1 	bl	8005650 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 80044ae:	2301      	movs	r3, #1
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b006      	add	sp, #24
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000c38 	.word	0x20000c38

080044bc <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 80044c2:	1dfc      	adds	r4, r7, #7
 80044c4:	4b09      	ldr	r3, [pc, #36]	@ (80044ec <Start_Input_Capture_Timer+0x30>)
 80044c6:	2100      	movs	r1, #0
 80044c8:	0018      	movs	r0, r3
 80044ca:	f000 f811 	bl	80044f0 <Start_IC_TIM>
 80044ce:	0003      	movs	r3, r0
 80044d0:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80044d2:	1dfb      	adds	r3, r7, #7
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 80044da:	f7fd fedb 	bl	8002294 <Error_Handler>
	}

	return ok;
 80044de:	1dfb      	adds	r3, r7, #7
 80044e0:	781b      	ldrb	r3, [r3, #0]
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	b003      	add	sp, #12
 80044e8:	bd90      	pop	{r4, r7, pc}
 80044ea:	46c0      	nop			@ (mov r8, r8)
 80044ec:	20000814 	.word	0x20000814

080044f0 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 80044f0:	b5b0      	push	{r4, r5, r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 80044fa:	250f      	movs	r5, #15
 80044fc:	197c      	adds	r4, r7, r5
 80044fe:	4b10      	ldr	r3, [pc, #64]	@ (8004540 <Start_IC_TIM+0x50>)
 8004500:	0018      	movs	r0, r3
 8004502:	f005 f987 	bl	8009814 <HAL_TIM_Base_Start_IT>
 8004506:	0003      	movs	r3, r0
 8004508:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	4b0c      	ldr	r3, [pc, #48]	@ (8004540 <Start_IC_TIM+0x50>)
 800450e:	0011      	movs	r1, r2
 8004510:	0018      	movs	r0, r3
 8004512:	f005 fded 	bl	800a0f0 <HAL_TIM_IC_Start_IT>
 8004516:	0003      	movs	r3, r0
 8004518:	0019      	movs	r1, r3
 800451a:	197b      	adds	r3, r7, r5
 800451c:	197a      	adds	r2, r7, r5
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	400a      	ands	r2, r1
 8004522:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004524:	197b      	adds	r3, r7, r5
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <Start_IC_TIM+0x40>

		Error_Handler();
 800452c:	f7fd feb2 	bl	8002294 <Error_Handler>
	}

	return ok_AND;
 8004530:	230f      	movs	r3, #15
 8004532:	18fb      	adds	r3, r7, r3
 8004534:	781b      	ldrb	r3, [r3, #0]
}
 8004536:	0018      	movs	r0, r3
 8004538:	46bd      	mov	sp, r7
 800453a:	b004      	add	sp, #16
 800453c:	bdb0      	pop	{r4, r5, r7, pc}
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	20000814 	.word	0x20000814

08004544 <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0010      	movs	r0, r2
 8004554:	0019      	movs	r1, r3
 8004556:	2324      	movs	r3, #36	@ 0x24
 8004558:	001a      	movs	r2, r3
 800455a:	f008 ff6b 	bl	800d434 <memcpy>

	return 1;
 800455e:	2301      	movs	r3, #1
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}

08004568 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 800456c:	4b0b      	ldr	r3, [pc, #44]	@ (800459c <Start_Measurement_Reelapse_Timer+0x34>)
 800456e:	2100      	movs	r1, #0
 8004570:	0018      	movs	r0, r3
 8004572:	f001 fc94 	bl	8005e9e <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004576:	4b09      	ldr	r3, [pc, #36]	@ (800459c <Start_Measurement_Reelapse_Timer+0x34>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 800457e:	4b08      	ldr	r3, [pc, #32]	@ (80045a0 <Start_Measurement_Reelapse_Timer+0x38>)
 8004580:	881b      	ldrh	r3, [r3, #0]
 8004582:	b29a      	uxth	r2, r3
 8004584:	4b05      	ldr	r3, [pc, #20]	@ (800459c <Start_Measurement_Reelapse_Timer+0x34>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 800458a:	4b04      	ldr	r3, [pc, #16]	@ (800459c <Start_Measurement_Reelapse_Timer+0x34>)
 800458c:	2100      	movs	r1, #0
 800458e:	0018      	movs	r0, r3
 8004590:	f001 fc69 	bl	8005e66 <Start_OC_TIM>

	return 1;
 8004594:	2301      	movs	r3, #1
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	200008d0 	.word	0x200008d0
 80045a0:	20000c34 	.word	0x20000c34

080045a4 <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 80045a8:	4b03      	ldr	r3, [pc, #12]	@ (80045b8 <Begin_Input_Capture_Measurement+0x14>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 80045b0:	2301      	movs	r3, #1
}
 80045b2:	0018      	movs	r0, r3
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000814 	.word	0x20000814

080045bc <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 80045c0:	f7fd fe6e 	bl	80022a0 <System_Init>

	//STARTUP
	Startup();
 80045c4:	f000 fb38 	bl	8004c38 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80045c8:	4b3b      	ldr	r3, [pc, #236]	@ (80046b8 <main+0xfc>)
 80045ca:	2104      	movs	r1, #4
 80045cc:	0018      	movs	r0, r3
 80045ce:	f001 fccd 	bl	8005f6c <Get_Status_Bit>
 80045d2:	0003      	movs	r3, r0
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d107      	bne.n	80045e8 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 80045d8:	4b38      	ldr	r3, [pc, #224]	@ (80046bc <main+0x100>)
 80045da:	881b      	ldrh	r3, [r3, #0]
 80045dc:	b29b      	uxth	r3, r3
 80045de:	4a38      	ldr	r2, [pc, #224]	@ (80046c0 <main+0x104>)
 80045e0:	0011      	movs	r1, r2
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff fef8 	bl	80043d8 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 80045e8:	4b33      	ldr	r3, [pc, #204]	@ (80046b8 <main+0xfc>)
 80045ea:	2140      	movs	r1, #64	@ 0x40
 80045ec:	0018      	movs	r0, r3
 80045ee:	f001 fcbd 	bl	8005f6c <Get_Status_Bit>
 80045f2:	0003      	movs	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d12b      	bne.n	8004650 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 80045f8:	4b32      	ldr	r3, [pc, #200]	@ (80046c4 <main+0x108>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	23fa      	movs	r3, #250	@ 0xfa
 80045fe:	01db      	lsls	r3, r3, #7
 8004600:	429a      	cmp	r2, r3
 8004602:	d218      	bcs.n	8004636 <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004604:	4b30      	ldr	r3, [pc, #192]	@ (80046c8 <main+0x10c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00d      	beq.n	800462a <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800460e:	4b2a      	ldr	r3, [pc, #168]	@ (80046b8 <main+0xfc>)
 8004610:	2140      	movs	r1, #64	@ 0x40
 8004612:	0018      	movs	r0, r3
 8004614:	f001 fcd0 	bl	8005fb8 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004618:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <main+0xfc>)
 800461a:	2120      	movs	r1, #32
 800461c:	0018      	movs	r0, r3
 800461e:	f001 fccb 	bl	8005fb8 <Clear_Status_Bit>
					idle_counter = 0;
 8004622:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <main+0x108>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e012      	b.n	8004650 <main+0x94>
				}
				else{

					idle_counter++;
 800462a:	4b26      	ldr	r3, [pc, #152]	@ (80046c4 <main+0x108>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	4b24      	ldr	r3, [pc, #144]	@ (80046c4 <main+0x108>)
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e00c      	b.n	8004650 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004636:	4b20      	ldr	r3, [pc, #128]	@ (80046b8 <main+0xfc>)
 8004638:	2140      	movs	r1, #64	@ 0x40
 800463a:	0018      	movs	r0, r3
 800463c:	f001 fcbc 	bl	8005fb8 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004640:	4b1d      	ldr	r3, [pc, #116]	@ (80046b8 <main+0xfc>)
 8004642:	2120      	movs	r1, #32
 8004644:	0018      	movs	r0, r3
 8004646:	f001 fca5 	bl	8005f94 <Set_Status_Bit>
				idle_counter = 0;
 800464a:	4b1e      	ldr	r3, [pc, #120]	@ (80046c4 <main+0x108>)
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004650:	2380      	movs	r3, #128	@ 0x80
 8004652:	005a      	lsls	r2, r3, #1
 8004654:	4b18      	ldr	r3, [pc, #96]	@ (80046b8 <main+0xfc>)
 8004656:	0011      	movs	r1, r2
 8004658:	0018      	movs	r0, r3
 800465a:	f001 fc87 	bl	8005f6c <Get_Status_Bit>
 800465e:	0003      	movs	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d123      	bne.n	80046ac <main+0xf0>

			if(midi_counter < MIDI_COUNT){
 8004664:	4b19      	ldr	r3, [pc, #100]	@ (80046cc <main+0x110>)
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	23fa      	movs	r3, #250	@ 0xfa
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	429a      	cmp	r2, r3
 800466e:	d205      	bcs.n	800467c <main+0xc0>

				midi_counter++;
 8004670:	4b16      	ldr	r3, [pc, #88]	@ (80046cc <main+0x110>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <main+0x110>)
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	e017      	b.n	80046ac <main+0xf0>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800467c:	2380      	movs	r3, #128	@ 0x80
 800467e:	005a      	lsls	r2, r3, #1
 8004680:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <main+0xfc>)
 8004682:	0011      	movs	r1, r2
 8004684:	0018      	movs	r0, r3
 8004686:	f001 fc97 	bl	8005fb8 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	009a      	lsls	r2, r3, #2
 800468e:	4b0a      	ldr	r3, [pc, #40]	@ (80046b8 <main+0xfc>)
 8004690:	0011      	movs	r1, r2
 8004692:	0018      	movs	r0, r3
 8004694:	f001 fc7e 	bl	8005f94 <Set_Status_Bit>
				active_status_byte = 0;
 8004698:	4b0d      	ldr	r3, [pc, #52]	@ (80046d0 <main+0x114>)
 800469a:	2200      	movs	r2, #0
 800469c:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <main+0x118>)
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7fc fd2c 	bl	80010fe <Clear_Data_Buffer>
				midi_counter = 0;
 80046a6:	4b09      	ldr	r3, [pc, #36]	@ (80046cc <main+0x110>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
			}
		}
		set_LED_to_state(&LED_fsm, LED_CONFIRM);
 80046ac:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <main+0x11c>)
 80046ae:	2107      	movs	r1, #7
 80046b0:	0018      	movs	r0, r3
 80046b2:	f7fc fb65 	bl	8000d80 <set_LED_to_state>
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 80046b6:	e787      	b.n	80045c8 <main+0xc>
 80046b8:	20000c38 	.word	0x20000c38
 80046bc:	20000c34 	.word	0x20000c34
 80046c0:	20000c98 	.word	0x20000c98
 80046c4:	20000c3c 	.word	0x20000c3c
 80046c8:	20000444 	.word	0x20000444
 80046cc:	20000c40 	.word	0x20000c40
 80046d0:	200004cb 	.word	0x200004cb
 80046d4:	200004d0 	.word	0x200004d0
 80046d8:	20000448 	.word	0x20000448

080046dc <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 80046e8:	2417      	movs	r4, #23
 80046ea:	193b      	adds	r3, r7, r4
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	0018      	movs	r0, r3
 80046f4:	f005 f842 	bl	800977c <HAL_TIM_Base_Start>
 80046f8:	0003      	movs	r3, r0
 80046fa:	0019      	movs	r1, r3
 80046fc:	193b      	adds	r3, r7, r4
 80046fe:	193a      	adds	r2, r7, r4
 8004700:	7812      	ldrb	r2, [r2, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f005 fba3 	bl	8009e58 <HAL_TIM_PWM_Start>
 8004712:	0003      	movs	r3, r0
 8004714:	0019      	movs	r1, r3
 8004716:	193b      	adds	r3, r7, r4
 8004718:	193a      	adds	r2, r7, r4
 800471a:	7812      	ldrb	r2, [r2, #0]
 800471c:	430a      	orrs	r2, r1
 800471e:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	0011      	movs	r1, r2
 8004726:	0018      	movs	r0, r3
 8004728:	f005 fb96 	bl	8009e58 <HAL_TIM_PWM_Start>
 800472c:	0003      	movs	r3, r0
 800472e:	0019      	movs	r1, r3
 8004730:	193b      	adds	r3, r7, r4
 8004732:	193a      	adds	r2, r7, r4
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 800473a:	193b      	adds	r3, r7, r4
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8004742:	f7fd fda7 	bl	8002294 <Error_Handler>
	}

	return ok_OR;
 8004746:	2317      	movs	r3, #23
 8004748:	18fb      	adds	r3, r7, r3
 800474a:	781b      	ldrb	r3, [r3, #0]
}
 800474c:	0018      	movs	r0, r3
 800474e:	46bd      	mov	sp, r7
 8004750:	b007      	add	sp, #28
 8004752:	bd90      	pop	{r4, r7, pc}

08004754 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8004754:	b590      	push	{r4, r7, lr}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 800475a:	1dfc      	adds	r4, r7, #7
 800475c:	4b09      	ldr	r3, [pc, #36]	@ (8004784 <Start_Freq_Gen_Timer+0x30>)
 800475e:	2100      	movs	r1, #0
 8004760:	0018      	movs	r0, r3
 8004762:	f001 fb80 	bl	8005e66 <Start_OC_TIM>
 8004766:	0003      	movs	r3, r0
 8004768:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800476a:	1dfb      	adds	r3, r7, #7
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004772:	f7fd fd8f 	bl	8002294 <Error_Handler>
	}

	return ok;
 8004776:	1dfb      	adds	r3, r7, #7
 8004778:	781b      	ldrb	r3, [r3, #0]
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b003      	add	sp, #12
 8004780:	bd90      	pop	{r4, r7, pc}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	20000758 	.word	0x20000758

08004788 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004794:	210b      	movs	r1, #11
 8004796:	187b      	adds	r3, r7, r1
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	891b      	ldrh	r3, [r3, #8]
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	001a      	movs	r2, r3
 80047a4:	0013      	movs	r3, r2
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	189b      	adds	r3, r3, r2
 80047aa:	019b      	lsls	r3, r3, #6
 80047ac:	189b      	adds	r3, r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	189b      	adds	r3, r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	0a9b      	lsrs	r3, r3, #10
 80047b8:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	09da      	lsrs	r2, r3, #7
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	187b      	adds	r3, r7, r1
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	01db      	lsls	r3, r3, #7
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	00d2      	lsls	r2, r2, #3
 80047e0:	411a      	asrs	r2, r3
 80047e2:	0013      	movs	r3, r2
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	835a      	strh	r2, [r3, #26]

    return 1;
 80047ea:	2301      	movs	r3, #1
}
 80047ec:	0018      	movs	r0, r3
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b004      	add	sp, #16
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8b1b      	ldrh	r3, [r3, #24]
 8004800:	b29a      	uxth	r2, r3
 8004802:	4b10      	ldr	r3, [pc, #64]	@ (8004844 <Set_Oscillator_Values+0x50>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8b1b      	ldrh	r3, [r3, #24]
 800480c:	b29b      	uxth	r3, r3
 800480e:	001a      	movs	r2, r3
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <Set_Oscillator_Values+0x50>)
 8004812:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	8bdb      	ldrh	r3, [r3, #30]
 8004818:	b29a      	uxth	r2, r3
 800481a:	4b0a      	ldr	r3, [pc, #40]	@ (8004844 <Set_Oscillator_Values+0x50>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	885b      	ldrh	r3, [r3, #2]
 8004824:	b29a      	uxth	r2, r3
 8004826:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <Set_Oscillator_Values+0x54>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	889b      	ldrh	r3, [r3, #4]
 8004830:	b29a      	uxth	r2, r3
 8004832:	4b05      	ldr	r3, [pc, #20]	@ (8004848 <Set_Oscillator_Values+0x54>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 8004838:	2301      	movs	r3, #1
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b002      	add	sp, #8
 8004840:	bd80      	pop	{r7, pc}
 8004842:	46c0      	nop			@ (mov r8, r8)
 8004844:	20000758 	.word	0x20000758
 8004848:	2000098c 	.word	0x2000098c

0800484c <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	000a      	movs	r2, r1
 8004856:	1cfb      	adds	r3, r7, #3
 8004858:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 800485a:	1cfb      	adds	r3, r7, #3
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d144      	bne.n	80048ec <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	89db      	ldrh	r3, [r3, #14]
 8004866:	b29b      	uxth	r3, r3
 8004868:	3301      	adds	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	89db      	ldrh	r3, [r3, #14]
 8004874:	b29a      	uxth	r2, r3
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	429a      	cmp	r2, r3
 800487c:	d102      	bne.n	8004884 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	89db      	ldrh	r3, [r3, #14]
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	741a      	strb	r2, [r3, #16]
 800489a:	e05a      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	89db      	ldrh	r3, [r3, #14]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	2b80      	cmp	r3, #128	@ 0x80
 80048a4:	d106      	bne.n	80048b4 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	741a      	strb	r2, [r3, #16]
 80048b2:	e04e      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	89db      	ldrh	r3, [r3, #14]
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	429a      	cmp	r2, r3
 80048c0:	d106      	bne.n	80048d0 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	741a      	strb	r2, [r3, #16]
 80048ce:	e040      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	89db      	ldrh	r3, [r3, #14]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	23c0      	movs	r3, #192	@ 0xc0
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	429a      	cmp	r2, r3
 80048dc:	d139      	bne.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	741a      	strb	r2, [r3, #16]
 80048ea:	e032      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 80048ec:	1cfb      	adds	r3, r7, #3
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d11f      	bne.n	8004934 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	799b      	ldrb	r3, [r3, #6]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d004      	beq.n	8004908 <Calculate_Next_Main_Oscillator_Values+0xbc>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	799b      	ldrb	r3, [r3, #6]
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	22a7      	movs	r2, #167	@ 0xa7
 800490c:	0052      	lsls	r2, r2, #1
 800490e:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	741a      	strb	r2, [r3, #16]
 800491c:	e019      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2280      	movs	r2, #128	@ 0x80
 8004922:	0052      	lsls	r2, r2, #1
 8004924:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	741a      	strb	r2, [r3, #16]
 8004932:	e00e      	b.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 8004934:	1cfb      	adds	r3, r7, #3
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d10a      	bne.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	89db      	ldrh	r3, [r3, #14]
 8004940:	b29b      	uxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	799b      	ldrb	r3, [r3, #6]
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d109      	bne.n	8004970 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	89db      	ldrh	r3, [r3, #14]
 8004960:	b29b      	uxth	r3, r3
 8004962:	001a      	movs	r2, r3
 8004964:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 8004966:	0052      	lsls	r2, r2, #1
 8004968:	5ad2      	ldrh	r2, [r2, r3]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	e029      	b.n	80049c4 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	799b      	ldrb	r3, [r3, #6]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	d109      	bne.n	800498e <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	89db      	ldrh	r3, [r3, #14]
 800497e:	b29b      	uxth	r3, r3
 8004980:	001a      	movs	r2, r3
 8004982:	4b2b      	ldr	r3, [pc, #172]	@ (8004a30 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004984:	0052      	lsls	r2, r2, #1
 8004986:	5ad2      	ldrh	r2, [r2, r3]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	e01a      	b.n	80049c4 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	799b      	ldrb	r3, [r3, #6]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d108      	bne.n	80049aa <Calculate_Next_Main_Oscillator_Values+0x15e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	89db      	ldrh	r3, [r3, #14]
 800499c:	b29b      	uxth	r3, r3
 800499e:	2bff      	cmp	r3, #255	@ 0xff
 80049a0:	d803      	bhi.n	80049aa <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a23      	ldr	r2, [pc, #140]	@ (8004a34 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80049a6:	801a      	strh	r2, [r3, #0]
 80049a8:	e00c      	b.n	80049c4 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	799b      	ldrb	r3, [r3, #6]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d107      	bne.n	80049c4 <Calculate_Next_Main_Oscillator_Values+0x178>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	89db      	ldrh	r3, [r3, #14]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2bff      	cmp	r3, #255	@ 0xff
 80049bc:	d902      	bls.n	80049c4 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	7a9b      	ldrb	r3, [r3, #10]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80049cc:	d108      	bne.n	80049e0 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	4a17      	ldr	r2, [pc, #92]	@ (8004a34 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	b29a      	uxth	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e01b      	b.n	8004a18 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	7a9b      	ldrb	r3, [r3, #10]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d013      	beq.n	8004a12 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	001a      	movs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	7a9b      	ldrb	r3, [r3, #10]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4353      	muls	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	4a0b      	ldr	r2, [pc, #44]	@ (8004a34 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	e002      	b.n	8004a18 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8004a16:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	805a      	strh	r2, [r3, #2]

	return 1;
 8004a22:	2301      	movs	r3, #1
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b004      	add	sp, #16
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	0800d880 	.word	0x0800d880
 8004a30:	0800d480 	.word	0x0800d480
 8004a34:	000003ff 	.word	0x000003ff

08004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	4a44      	ldr	r2, [pc, #272]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004a46:	5a9b      	ldrh	r3, [r3, r2]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	4a41      	ldr	r2, [pc, #260]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004a52:	5a9b      	ldrh	r3, [r3, r2]
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	1e5a      	subs	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	881b      	ldrh	r3, [r3, #0]
 8004a5c:	b299      	uxth	r1, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	0052      	lsls	r2, r2, #1
 8004a62:	52d1      	strh	r1, [r2, r3]
 8004a64:	e006      	b.n	8004a74 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	b299      	uxth	r1, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	4a38      	ldr	r2, [pc, #224]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004a78:	5a9b      	ldrh	r3, [r3, r2]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10e      	bne.n	8004a9e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4a35      	ldr	r2, [pc, #212]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004a84:	2180      	movs	r1, #128	@ 0x80
 8004a86:	0089      	lsls	r1, r1, #2
 8004a88:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	4a33      	ldr	r2, [pc, #204]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004a8e:	5a9b      	ldrh	r3, [r3, r2]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	3b01      	subs	r3, #1
 8004a94:	b299      	uxth	r1, r3
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	4a30      	ldr	r2, [pc, #192]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004a9a:	5299      	strh	r1, [r3, r2]
 8004a9c:	e026      	b.n	8004aec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004aa2:	5a9b      	ldrh	r3, [r3, r2]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10e      	bne.n	8004ac8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	4a2b      	ldr	r2, [pc, #172]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004aae:	2180      	movs	r1, #128	@ 0x80
 8004ab0:	0089      	lsls	r1, r1, #2
 8004ab2:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4a28      	ldr	r2, [pc, #160]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ab8:	5a9b      	ldrh	r3, [r3, r2]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	3b01      	subs	r3, #1
 8004abe:	b299      	uxth	r1, r3
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4a25      	ldr	r2, [pc, #148]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ac4:	5299      	strh	r1, [r3, r2]
 8004ac6:	e011      	b.n	8004aec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	4a23      	ldr	r2, [pc, #140]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004acc:	5a9b      	ldrh	r3, [r3, r2]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b299      	uxth	r1, r3
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	4a20      	ldr	r2, [pc, #128]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004ad8:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004ade:	5a9b      	ldrh	r3, [r3, r2]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b299      	uxth	r1, r3
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8004b5c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004aea:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	4a1a      	ldr	r2, [pc, #104]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004af0:	5a9b      	ldrh	r3, [r3, r2]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	001a      	movs	r2, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	18d2      	adds	r2, r2, r3
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	429a      	cmp	r2, r3
 8004b04:	dd13      	ble.n	8004b2e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	4913      	ldr	r1, [pc, #76]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004b0c:	5a5b      	ldrh	r3, [r3, r1]
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	0019      	movs	r1, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	18cb      	adds	r3, r1, r3
 8004b1a:	4911      	ldr	r1, [pc, #68]	@ (8004b60 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 8004b1c:	468c      	mov	ip, r1
 8004b1e:	4463      	add	r3, ip
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	18d3      	adds	r3, r2, r3
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	809a      	strh	r2, [r3, #4]
 8004b2c:	e00f      	b.n	8004b4e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	4909      	ldr	r1, [pc, #36]	@ (8004b58 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004b34:	5a5b      	ldrh	r3, [r3, r1]
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	0019      	movs	r1, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	18cb      	adds	r3, r1, r3
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b002      	add	sp, #8
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	00000402 	.word	0x00000402
 8004b5c:	00000404 	.word	0x00000404
 8004b60:	7ffffe00 	.word	0x7ffffe00

08004b64 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	881b      	ldrh	r3, [r3, #0]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	2116      	movs	r1, #22
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	0952      	lsrs	r2, r2, #5
 8004b7a:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004b7c:	187b      	adds	r3, r7, r1
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b82:	d803      	bhi.n	8004b8c <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	719a      	strb	r2, [r3, #6]
 8004b8a:	e010      	b.n	8004bae <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004b8c:	2316      	movs	r3, #22
 8004b8e:	18fb      	adds	r3, r7, r3
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	2b55      	cmp	r3, #85	@ 0x55
 8004b94:	d803      	bhi.n	8004b9e <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	719a      	strb	r2, [r3, #6]
 8004b9c:	e007      	b.n	8004bae <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004b9e:	2316      	movs	r3, #22
 8004ba0:	18fb      	adds	r3, r7, r3
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ba6:	d802      	bhi.n	8004bae <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	2114      	movs	r1, #20
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	0952      	lsrs	r2, r2, #5
 8004bbc:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	187a      	adds	r2, r7, r1
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	00d2      	lsls	r2, r2, #3
 8004bc6:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	187a      	adds	r2, r7, r1
 8004bcc:	8812      	ldrh	r2, [r2, #0]
 8004bce:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	881b      	ldrh	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	2113      	movs	r1, #19
 8004bde:	187b      	adds	r3, r7, r1
 8004be0:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	187a      	adds	r2, r7, r1
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	3306      	adds	r3, #6
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	2110      	movs	r1, #16
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	0952      	lsrs	r2, r2, #5
 8004bf8:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 8004bfa:	187a      	adds	r2, r7, r1
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	18db      	adds	r3, r3, r3
 8004c02:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	187a      	adds	r2, r7, r1
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	210e      	movs	r1, #14
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	0952      	lsrs	r2, r2, #5
 8004c1a:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 8004c1c:	187b      	adds	r3, r7, r1
 8004c1e:	187a      	adds	r2, r7, r1
 8004c20:	8812      	ldrh	r2, [r2, #0]
 8004c22:	0092      	lsls	r2, r2, #2
 8004c24:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	187a      	adds	r2, r7, r1
 8004c2a:	8812      	ldrh	r2, [r2, #0]
 8004c2c:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8004c2e:	2301      	movs	r3, #1
}
 8004c30:	0018      	movs	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	b006      	add	sp, #24
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 8004c3e:	2007      	movs	r0, #7
 8004c40:	f002 fd9b 	bl	800777a <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 8004c44:	4b5a      	ldr	r3, [pc, #360]	@ (8004db0 <Startup+0x178>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68da      	ldr	r2, [r3, #12]
 8004c4a:	4b59      	ldr	r3, [pc, #356]	@ (8004db0 <Startup+0x178>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2101      	movs	r1, #1
 8004c50:	430a      	orrs	r2, r1
 8004c52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 8004c54:	4b57      	ldr	r3, [pc, #348]	@ (8004db4 <Startup+0x17c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68da      	ldr	r2, [r3, #12]
 8004c5a:	4b56      	ldr	r3, [pc, #344]	@ (8004db4 <Startup+0x17c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 8004c64:	2380      	movs	r3, #128	@ 0x80
 8004c66:	0099      	lsls	r1, r3, #2
 8004c68:	23a0      	movs	r3, #160	@ 0xa0
 8004c6a:	05db      	lsls	r3, r3, #23
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f003 fa3f 	bl	80080f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	0159      	lsls	r1, r3, #5
 8004c78:	23a0      	movs	r3, #160	@ 0xa0
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f003 fa37 	bl	80080f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004c84:	23a0      	movs	r3, #160	@ 0xa0
 8004c86:	05db      	lsls	r3, r3, #23
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2180      	movs	r1, #128	@ 0x80
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f003 fa30 	bl	80080f2 <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004c92:	f7fb fbd9 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8004c96:	f7fb ff07 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 8004c9a:	4b47      	ldr	r3, [pc, #284]	@ (8004db8 <Startup+0x180>)
 8004c9c:	4a47      	ldr	r2, [pc, #284]	@ (8004dbc <Startup+0x184>)
 8004c9e:	4948      	ldr	r1, [pc, #288]	@ (8004dc0 <Startup+0x188>)
 8004ca0:	4c48      	ldr	r4, [pc, #288]	@ (8004dc4 <Startup+0x18c>)
 8004ca2:	2004      	movs	r0, #4
 8004ca4:	9000      	str	r0, [sp, #0]
 8004ca6:	0020      	movs	r0, r4
 8004ca8:	f7fb fdf1 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004cac:	4b46      	ldr	r3, [pc, #280]	@ (8004dc8 <Startup+0x190>)
 8004cae:	4a47      	ldr	r2, [pc, #284]	@ (8004dcc <Startup+0x194>)
 8004cb0:	4943      	ldr	r1, [pc, #268]	@ (8004dc0 <Startup+0x188>)
 8004cb2:	4847      	ldr	r0, [pc, #284]	@ (8004dd0 <Startup+0x198>)
 8004cb4:	2404      	movs	r4, #4
 8004cb6:	9400      	str	r4, [sp, #0]
 8004cb8:	f7fb fe9f 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004cbc:	4b45      	ldr	r3, [pc, #276]	@ (8004dd4 <Startup+0x19c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	001a      	movs	r2, r3
 8004cc2:	4945      	ldr	r1, [pc, #276]	@ (8004dd8 <Startup+0x1a0>)
 8004cc4:	4b45      	ldr	r3, [pc, #276]	@ (8004ddc <Startup+0x1a4>)
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f001 fe08 	bl	80068dc <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004ccc:	46c0      	nop			@ (mov r8, r8)
 8004cce:	4b3b      	ldr	r3, [pc, #236]	@ (8004dbc <Startup+0x184>)
 8004cd0:	2110      	movs	r1, #16
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	f001 f94a 	bl	8005f6c <Get_Status_Bit>
 8004cd8:	1e03      	subs	r3, r0, #0
 8004cda:	d0f8      	beq.n	8004cce <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004cdc:	1dbb      	adds	r3, r7, #6
 8004cde:	2200      	movs	r2, #0
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	e02c      	b.n	8004d3e <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004ce4:	4b3e      	ldr	r3, [pc, #248]	@ (8004de0 <Startup+0x1a8>)
 8004ce6:	799b      	ldrb	r3, [r3, #6]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d111      	bne.n	8004d12 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004cee:	4b3c      	ldr	r3, [pc, #240]	@ (8004de0 <Startup+0x1a8>)
 8004cf0:	7a9b      	ldrb	r3, [r3, #10]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	001a      	movs	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	029b      	lsls	r3, r3, #10
 8004cfa:	1a9b      	subs	r3, r3, r2
 8004cfc:	11db      	asrs	r3, r3, #7
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	1dba      	adds	r2, r7, #6
 8004d02:	8812      	ldrh	r2, [r2, #0]
 8004d04:	4937      	ldr	r1, [pc, #220]	@ (8004de4 <Startup+0x1ac>)
 8004d06:	1acb      	subs	r3, r1, r3
 8004d08:	b299      	uxth	r1, r3
 8004d0a:	4b37      	ldr	r3, [pc, #220]	@ (8004de8 <Startup+0x1b0>)
 8004d0c:	0052      	lsls	r2, r2, #1
 8004d0e:	52d1      	strh	r1, [r2, r3]
 8004d10:	e010      	b.n	8004d34 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8004d12:	4b33      	ldr	r3, [pc, #204]	@ (8004de0 <Startup+0x1a8>)
 8004d14:	7a9b      	ldrb	r3, [r3, #10]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	001a      	movs	r2, r3
 8004d1a:	0013      	movs	r3, r2
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	1a9b      	subs	r3, r3, r2
 8004d20:	121b      	asrs	r3, r3, #8
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	1dba      	adds	r2, r7, #6
 8004d26:	8812      	ldrh	r2, [r2, #0]
 8004d28:	492e      	ldr	r1, [pc, #184]	@ (8004de4 <Startup+0x1ac>)
 8004d2a:	1acb      	subs	r3, r1, r3
 8004d2c:	b299      	uxth	r1, r3
 8004d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8004de8 <Startup+0x1b0>)
 8004d30:	0052      	lsls	r2, r2, #1
 8004d32:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004d34:	1dbb      	adds	r3, r7, #6
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	3201      	adds	r2, #1
 8004d3c:	801a      	strh	r2, [r3, #0]
 8004d3e:	1dbb      	adds	r3, r7, #6
 8004d40:	881a      	ldrh	r2, [r3, #0]
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d9cc      	bls.n	8004ce4 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 8004d4a:	4b25      	ldr	r3, [pc, #148]	@ (8004de0 <Startup+0x1a8>)
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f7ff fd7c 	bl	800484c <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8004d54:	4a24      	ldr	r2, [pc, #144]	@ (8004de8 <Startup+0x1b0>)
 8004d56:	4b22      	ldr	r3, [pc, #136]	@ (8004de0 <Startup+0x1a8>)
 8004d58:	0011      	movs	r1, r2
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f7ff fe6c 	bl	8004a38 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 8004d60:	4b1f      	ldr	r3, [pc, #124]	@ (8004de0 <Startup+0x1a8>)
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fd46 	bl	80047f4 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 8004d68:	4b20      	ldr	r3, [pc, #128]	@ (8004dec <Startup+0x1b4>)
 8004d6a:	220c      	movs	r2, #12
 8004d6c:	2104      	movs	r1, #4
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f7ff fcb4 	bl	80046dc <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004d74:	f7ff fcee 	bl	8004754 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 8004d78:	f7fc fb0e 	bl	8001398 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004d7c:	f7ff fb9e 	bl	80044bc <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004d80:	f001 f8ec 	bl	8005f5c <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004d84:	4b1a      	ldr	r3, [pc, #104]	@ (8004df0 <Startup+0x1b8>)
 8004d86:	22fa      	movs	r2, #250	@ 0xfa
 8004d88:	21fa      	movs	r1, #250	@ 0xfa
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f003 faa8 	bl	80082e0 <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8004d90:	4b18      	ldr	r3, [pc, #96]	@ (8004df4 <Startup+0x1bc>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8004d96:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <Startup+0x1c0>)
 8004d98:	2100      	movs	r1, #0
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f001 f863 	bl	8005e66 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004da0:	2007      	movs	r0, #7
 8004da2:	f002 fcda 	bl	800775a <HAL_NVIC_EnableIRQ>

	return 1;
 8004da6:	2301      	movs	r3, #1
}
 8004da8:	0018      	movs	r0, r3
 8004daa:	46bd      	mov	sp, r7
 8004dac:	b003      	add	sp, #12
 8004dae:	bd90      	pop	{r4, r7, pc}
 8004db0:	20000814 	.word	0x20000814
 8004db4:	20000758 	.word	0x20000758
 8004db8:	200004ca 	.word	0x200004ca
 8004dbc:	20000c38 	.word	0x20000c38
 8004dc0:	200004c0 	.word	0x200004c0
 8004dc4:	0800f820 	.word	0x0800f820
 8004dc8:	20000484 	.word	0x20000484
 8004dcc:	20000474 	.word	0x20000474
 8004dd0:	20000494 	.word	0x20000494
 8004dd4:	0800dc80 	.word	0x0800dc80
 8004dd8:	20000c44 	.word	0x20000c44
 8004ddc:	200004fc 	.word	0x200004fc
 8004de0:	20000c50 	.word	0x20000c50
 8004de4:	000003ff 	.word	0x000003ff
 8004de8:	20000028 	.word	0x20000028
 8004dec:	2000098c 	.word	0x2000098c
 8004df0:	20000bcc 	.word	0x20000bcc
 8004df4:	20000448 	.word	0x20000448
 8004df8:	200005e0 	.word	0x200005e0

08004dfc <Advance_Pending_States>:
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;
volatile struct LED_FSM LED_fsm = {.current_state = LED_OFF, .prev_state = LED_NONE};

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 8004e02:	1d3b      	adds	r3, r7, #4
 8004e04:	4a12      	ldr	r2, [pc, #72]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e06:	7812      	ldrb	r2, [r2, #0]
 8004e08:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004e0a:	4b11      	ldr	r3, [pc, #68]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b05      	cmp	r3, #5
 8004e12:	d103      	bne.n	8004e1c <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004e14:	4b0e      	ldr	r3, [pc, #56]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e16:	2204      	movs	r2, #4
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	e007      	b.n	8004e2c <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b07      	cmp	r3, #7
 8004e24:	d102      	bne.n	8004e2c <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8004e26:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e28:	2206      	movs	r2, #6
 8004e2a:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 8004e2c:	1d3b      	adds	r3, r7, #4
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b06      	cmp	r3, #6
 8004e32:	d007      	beq.n	8004e44 <Advance_Pending_States+0x48>
 8004e34:	1d3b      	adds	r3, r7, #4
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d003      	beq.n	8004e44 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 8004e3c:	4b04      	ldr	r3, [pc, #16]	@ (8004e50 <Advance_Pending_States+0x54>)
 8004e3e:	1d3a      	adds	r2, r7, #4
 8004e40:	7812      	ldrb	r2, [r2, #0]
 8004e42:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 8004e44:	2301      	movs	r3, #1
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b002      	add	sp, #8
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	20000430 	.word	0x20000430

08004e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e60:	2101      	movs	r1, #1
 8004e62:	430a      	orrs	r2, r1
 8004e64:	641a      	str	r2, [r3, #64]	@ 0x40
 8004e66:	4b0c      	ldr	r3, [pc, #48]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e72:	4b09      	ldr	r3, [pc, #36]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e76:	4b08      	ldr	r3, [pc, #32]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e78:	2180      	movs	r1, #128	@ 0x80
 8004e7a:	0549      	lsls	r1, r1, #21
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <HAL_MspInit+0x44>)
 8004e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e84:	2380      	movs	r3, #128	@ 0x80
 8004e86:	055b      	lsls	r3, r3, #21
 8004e88:	4013      	ands	r3, r2
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e8e:	46c0      	nop			@ (mov r8, r8)
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b002      	add	sp, #8
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	40021000 	.word	0x40021000

08004e9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b08b      	sub	sp, #44	@ 0x2c
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	2414      	movs	r4, #20
 8004ea6:	193b      	adds	r3, r7, r4
 8004ea8:	0018      	movs	r0, r3
 8004eaa:	2314      	movs	r3, #20
 8004eac:	001a      	movs	r2, r3
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f008 fa94 	bl	800d3dc <memset>
  if(hadc->Instance==ADC1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8004f74 <HAL_ADC_MspInit+0xd8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d155      	bne.n	8004f6a <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004ec4:	2180      	movs	r1, #128	@ 0x80
 8004ec6:	0349      	lsls	r1, r1, #13
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed0:	2380      	movs	r3, #128	@ 0x80
 8004ed2:	035b      	lsls	r3, r3, #13
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eda:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004edc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ede:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	430a      	orrs	r2, r1
 8004ee4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ee6:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <HAL_ADC_MspInit+0xdc>)
 8004ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eea:	2201      	movs	r2, #1
 8004eec:	4013      	ands	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	2273      	movs	r2, #115	@ 0x73
 8004ef6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ef8:	193b      	adds	r3, r7, r4
 8004efa:	2203      	movs	r2, #3
 8004efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	2200      	movs	r2, #0
 8004f02:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f04:	193a      	adds	r2, r7, r4
 8004f06:	23a0      	movs	r3, #160	@ 0xa0
 8004f08:	05db      	lsls	r3, r3, #23
 8004f0a:	0011      	movs	r1, r2
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	f002 ff6f 	bl	8007df0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004f12:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f14:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <HAL_ADC_MspInit+0xe4>)
 8004f16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004f18:	4b18      	ldr	r3, [pc, #96]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f24:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004f2a:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f2c:	2280      	movs	r2, #128	@ 0x80
 8004f2e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004f30:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f32:	2280      	movs	r2, #128	@ 0x80
 8004f34:	0052      	lsls	r2, r2, #1
 8004f36:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004f38:	4b10      	ldr	r3, [pc, #64]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f3a:	2280      	movs	r2, #128	@ 0x80
 8004f3c:	00d2      	lsls	r2, r2, #3
 8004f3e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8004f40:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f48:	2280      	movs	r2, #128	@ 0x80
 8004f4a:	0192      	lsls	r2, r2, #6
 8004f4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f50:	0018      	movs	r0, r3
 8004f52:	f002 fc2f 	bl	80077b4 <HAL_DMA_Init>
 8004f56:	1e03      	subs	r3, r0, #0
 8004f58:	d001      	beq.n	8004f5e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004f5a:	f7fd f99b 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a06      	ldr	r2, [pc, #24]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f62:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <HAL_ADC_MspInit+0xe0>)
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004f6a:	46c0      	nop			@ (mov r8, r8)
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	b00b      	add	sp, #44	@ 0x2c
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	46c0      	nop			@ (mov r8, r8)
 8004f74:	40012400 	.word	0x40012400
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	20000584 	.word	0x20000584
 8004f80:	40020008 	.word	0x40020008

08004f84 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b097      	sub	sp, #92	@ 0x5c
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f8c:	2344      	movs	r3, #68	@ 0x44
 8004f8e:	18fb      	adds	r3, r7, r3
 8004f90:	0018      	movs	r0, r3
 8004f92:	2314      	movs	r3, #20
 8004f94:	001a      	movs	r2, r3
 8004f96:	2100      	movs	r1, #0
 8004f98:	f008 fa20 	bl	800d3dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f9c:	241c      	movs	r4, #28
 8004f9e:	193b      	adds	r3, r7, r4
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	2328      	movs	r3, #40	@ 0x28
 8004fa4:	001a      	movs	r2, r3
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	f008 fa18 	bl	800d3dc <memset>
  if(hlptim->Instance==LPTIM1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a46      	ldr	r2, [pc, #280]	@ (80050cc <HAL_LPTIM_MspInit+0x148>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d13e      	bne.n	8005034 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	2280      	movs	r2, #128	@ 0x80
 8004fba:	0092      	lsls	r2, r2, #2
 8004fbc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8004fbe:	193b      	adds	r3, r7, r4
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fc4:	193b      	adds	r3, r7, r4
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f004 f9f8 	bl	80093bc <HAL_RCCEx_PeriphCLKConfig>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8004fd0:	f7fd f960 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004fd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004fda:	2180      	movs	r1, #128	@ 0x80
 8004fdc:	0609      	lsls	r1, r1, #24
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe6:	0fdb      	lsrs	r3, r3, #31
 8004fe8:	07db      	lsls	r3, r3, #31
 8004fea:	61bb      	str	r3, [r7, #24]
 8004fec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fee:	4b38      	ldr	r3, [pc, #224]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ff2:	4b37      	ldr	r3, [pc, #220]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004ff4:	2102      	movs	r1, #2
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ffa:	4b35      	ldr	r3, [pc, #212]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8004ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ffe:	2202      	movs	r2, #2
 8005000:	4013      	ands	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005006:	2144      	movs	r1, #68	@ 0x44
 8005008:	187b      	adds	r3, r7, r1
 800500a:	2201      	movs	r2, #1
 800500c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500e:	187b      	adds	r3, r7, r1
 8005010:	2202      	movs	r2, #2
 8005012:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005014:	187b      	adds	r3, r7, r1
 8005016:	2200      	movs	r2, #0
 8005018:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501a:	187b      	adds	r3, r7, r1
 800501c:	2200      	movs	r2, #0
 800501e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 8005020:	187b      	adds	r3, r7, r1
 8005022:	2205      	movs	r2, #5
 8005024:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005026:	187b      	adds	r3, r7, r1
 8005028:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <HAL_LPTIM_MspInit+0x150>)
 800502a:	0019      	movs	r1, r3
 800502c:	0010      	movs	r0, r2
 800502e:	f002 fedf 	bl	8007df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 8005032:	e046      	b.n	80050c2 <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <HAL_LPTIM_MspInit+0x154>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d141      	bne.n	80050c2 <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 800503e:	211c      	movs	r1, #28
 8005040:	187b      	adds	r3, r7, r1
 8005042:	2280      	movs	r2, #128	@ 0x80
 8005044:	00d2      	lsls	r2, r2, #3
 8005046:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 8005048:	187b      	adds	r3, r7, r1
 800504a:	2200      	movs	r2, #0
 800504c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800504e:	187b      	adds	r3, r7, r1
 8005050:	0018      	movs	r0, r3
 8005052:	f004 f9b3 	bl	80093bc <HAL_RCCEx_PeriphCLKConfig>
 8005056:	1e03      	subs	r3, r0, #0
 8005058:	d001      	beq.n	800505e <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 800505a:	f7fd f91b 	bl	8002294 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 800505e:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8005060:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8005064:	2180      	movs	r1, #128	@ 0x80
 8005066:	05c9      	lsls	r1, r1, #23
 8005068:	430a      	orrs	r2, r1
 800506a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800506c:	4b18      	ldr	r3, [pc, #96]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 800506e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005070:	2380      	movs	r3, #128	@ 0x80
 8005072:	05db      	lsls	r3, r3, #23
 8005074:	4013      	ands	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
 8005078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800507a:	4b15      	ldr	r3, [pc, #84]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 800507c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800507e:	4b14      	ldr	r3, [pc, #80]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8005080:	2101      	movs	r1, #1
 8005082:	430a      	orrs	r2, r1
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_LPTIM_MspInit+0x14c>)
 8005088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005092:	2144      	movs	r1, #68	@ 0x44
 8005094:	187b      	adds	r3, r7, r1
 8005096:	2280      	movs	r2, #128	@ 0x80
 8005098:	0052      	lsls	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509c:	187b      	adds	r3, r7, r1
 800509e:	2202      	movs	r2, #2
 80050a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a2:	187b      	adds	r3, r7, r1
 80050a4:	2200      	movs	r2, #0
 80050a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a8:	187b      	adds	r3, r7, r1
 80050aa:	2200      	movs	r2, #0
 80050ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 80050ae:	187b      	adds	r3, r7, r1
 80050b0:	2205      	movs	r2, #5
 80050b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050b4:	187a      	adds	r2, r7, r1
 80050b6:	23a0      	movs	r3, #160	@ 0xa0
 80050b8:	05db      	lsls	r3, r3, #23
 80050ba:	0011      	movs	r1, r2
 80050bc:	0018      	movs	r0, r3
 80050be:	f002 fe97 	bl	8007df0 <HAL_GPIO_Init>
}
 80050c2:	46c0      	nop			@ (mov r8, r8)
 80050c4:	46bd      	mov	sp, r7
 80050c6:	b017      	add	sp, #92	@ 0x5c
 80050c8:	bd90      	pop	{r4, r7, pc}
 80050ca:	46c0      	nop			@ (mov r8, r8)
 80050cc:	40007c00 	.word	0x40007c00
 80050d0:	40021000 	.word	0x40021000
 80050d4:	50000400 	.word	0x50000400
 80050d8:	40009400 	.word	0x40009400

080050dc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b099      	sub	sp, #100	@ 0x64
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	234c      	movs	r3, #76	@ 0x4c
 80050e6:	18fb      	adds	r3, r7, r3
 80050e8:	0018      	movs	r0, r3
 80050ea:	2314      	movs	r3, #20
 80050ec:	001a      	movs	r2, r3
 80050ee:	2100      	movs	r1, #0
 80050f0:	f008 f974 	bl	800d3dc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050f4:	2424      	movs	r4, #36	@ 0x24
 80050f6:	193b      	adds	r3, r7, r4
 80050f8:	0018      	movs	r0, r3
 80050fa:	2328      	movs	r3, #40	@ 0x28
 80050fc:	001a      	movs	r2, r3
 80050fe:	2100      	movs	r1, #0
 8005100:	f008 f96c 	bl	800d3dc <memset>
  if(htim_base->Instance==TIM1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a68      	ldr	r2, [pc, #416]	@ (80052ac <HAL_TIM_Base_MspInit+0x1d0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d11d      	bne.n	800514a <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800510e:	193b      	adds	r3, r7, r4
 8005110:	2280      	movs	r2, #128	@ 0x80
 8005112:	0392      	lsls	r2, r2, #14
 8005114:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8005116:	193b      	adds	r3, r7, r4
 8005118:	2200      	movs	r2, #0
 800511a:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800511c:	193b      	adds	r3, r7, r4
 800511e:	0018      	movs	r0, r3
 8005120:	f004 f94c 	bl	80093bc <HAL_RCCEx_PeriphCLKConfig>
 8005124:	1e03      	subs	r3, r0, #0
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 8005128:	f7fd f8b4 	bl	8002294 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800512c:	4b60      	ldr	r3, [pc, #384]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800512e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005130:	4b5f      	ldr	r3, [pc, #380]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005132:	2180      	movs	r1, #128	@ 0x80
 8005134:	0109      	lsls	r1, r1, #4
 8005136:	430a      	orrs	r2, r1
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40
 800513a:	4b5d      	ldr	r3, [pc, #372]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800513c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	4013      	ands	r3, r2
 8005144:	623b      	str	r3, [r7, #32]
 8005146:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 8005148:	e0ab      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	05db      	lsls	r3, r3, #23
 8005152:	429a      	cmp	r2, r3
 8005154:	d138      	bne.n	80051c8 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005156:	4b56      	ldr	r3, [pc, #344]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005158:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800515a:	4b55      	ldr	r3, [pc, #340]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800515c:	2101      	movs	r1, #1
 800515e:	430a      	orrs	r2, r1
 8005160:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005162:	4b53      	ldr	r3, [pc, #332]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005166:	2201      	movs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
 800516c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516e:	4b50      	ldr	r3, [pc, #320]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005172:	4b4f      	ldr	r3, [pc, #316]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005174:	2101      	movs	r1, #1
 8005176:	430a      	orrs	r2, r1
 8005178:	635a      	str	r2, [r3, #52]	@ 0x34
 800517a:	4b4d      	ldr	r3, [pc, #308]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	2201      	movs	r2, #1
 8005180:	4013      	ands	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8005186:	214c      	movs	r1, #76	@ 0x4c
 8005188:	187b      	adds	r3, r7, r1
 800518a:	2280      	movs	r2, #128	@ 0x80
 800518c:	0212      	lsls	r2, r2, #8
 800518e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005190:	187b      	adds	r3, r7, r1
 8005192:	2202      	movs	r2, #2
 8005194:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8005196:	187b      	adds	r3, r7, r1
 8005198:	2201      	movs	r2, #1
 800519a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800519c:	187b      	adds	r3, r7, r1
 800519e:	2200      	movs	r2, #0
 80051a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80051a2:	187b      	adds	r3, r7, r1
 80051a4:	2202      	movs	r2, #2
 80051a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 80051a8:	187a      	adds	r2, r7, r1
 80051aa:	23a0      	movs	r3, #160	@ 0xa0
 80051ac:	05db      	lsls	r3, r3, #23
 80051ae:	0011      	movs	r1, r2
 80051b0:	0018      	movs	r0, r3
 80051b2:	f002 fe1d 	bl	8007df0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 80051b6:	2202      	movs	r2, #2
 80051b8:	2102      	movs	r1, #2
 80051ba:	200f      	movs	r0, #15
 80051bc:	f002 fab8 	bl	8007730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051c0:	200f      	movs	r0, #15
 80051c2:	f002 faca 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 80051c6:	e06c      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a39      	ldr	r2, [pc, #228]	@ (80052b4 <HAL_TIM_Base_MspInit+0x1d8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d114      	bne.n	80051fc <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051d2:	4b37      	ldr	r3, [pc, #220]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 80051d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051d6:	4b36      	ldr	r3, [pc, #216]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 80051d8:	2102      	movs	r1, #2
 80051da:	430a      	orrs	r2, r1
 80051dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80051de:	4b34      	ldr	r3, [pc, #208]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 80051e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e2:	2202      	movs	r2, #2
 80051e4:	4013      	ands	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2100      	movs	r1, #0
 80051ee:	2010      	movs	r0, #16
 80051f0:	f002 fa9e 	bl	8007730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80051f4:	2010      	movs	r0, #16
 80051f6:	f002 fab0 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 80051fa:	e052      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <HAL_TIM_Base_MspInit+0x1dc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d116      	bne.n	8005234 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005206:	4b2a      	ldr	r3, [pc, #168]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005208:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800520c:	2180      	movs	r1, #128	@ 0x80
 800520e:	0289      	lsls	r1, r1, #10
 8005210:	430a      	orrs	r2, r1
 8005212:	641a      	str	r2, [r3, #64]	@ 0x40
 8005214:	4b26      	ldr	r3, [pc, #152]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005216:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	029b      	lsls	r3, r3, #10
 800521c:	4013      	ands	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8005222:	2200      	movs	r2, #0
 8005224:	2100      	movs	r1, #0
 8005226:	2015      	movs	r0, #21
 8005228:	f002 fa82 	bl	8007730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800522c:	2015      	movs	r0, #21
 800522e:	f002 fa94 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 8005232:	e036      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <HAL_TIM_Base_MspInit+0x1e0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d116      	bne.n	800526c <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800523e:	4b1c      	ldr	r3, [pc, #112]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005240:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005242:	4b1b      	ldr	r3, [pc, #108]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005244:	2180      	movs	r1, #128	@ 0x80
 8005246:	02c9      	lsls	r1, r1, #11
 8005248:	430a      	orrs	r2, r1
 800524a:	641a      	str	r2, [r3, #64]	@ 0x40
 800524c:	4b18      	ldr	r3, [pc, #96]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800524e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005250:	2380      	movs	r3, #128	@ 0x80
 8005252:	02db      	lsls	r3, r3, #11
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 800525a:	2203      	movs	r2, #3
 800525c:	2103      	movs	r1, #3
 800525e:	2016      	movs	r0, #22
 8005260:	f002 fa66 	bl	8007730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005264:	2016      	movs	r0, #22
 8005266:	f002 fa78 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 800526a:	e01a      	b.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a13      	ldr	r2, [pc, #76]	@ (80052c0 <HAL_TIM_Base_MspInit+0x1e4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d115      	bne.n	80052a2 <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8005276:	4b0e      	ldr	r3, [pc, #56]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005278:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800527a:	4b0d      	ldr	r3, [pc, #52]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 800527c:	2180      	movs	r1, #128	@ 0x80
 800527e:	0209      	lsls	r1, r1, #8
 8005280:	430a      	orrs	r2, r1
 8005282:	641a      	str	r2, [r3, #64]	@ 0x40
 8005284:	4b0a      	ldr	r3, [pc, #40]	@ (80052b0 <HAL_TIM_Base_MspInit+0x1d4>)
 8005286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005288:	2380      	movs	r3, #128	@ 0x80
 800528a:	021b      	lsls	r3, r3, #8
 800528c:	4013      	ands	r3, r2
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8005292:	2203      	movs	r2, #3
 8005294:	2103      	movs	r1, #3
 8005296:	2013      	movs	r0, #19
 8005298:	f002 fa4a 	bl	8007730 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800529c:	2013      	movs	r0, #19
 800529e:	f002 fa5c 	bl	800775a <HAL_NVIC_EnableIRQ>
}
 80052a2:	46c0      	nop			@ (mov r8, r8)
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b019      	add	sp, #100	@ 0x64
 80052a8:	bd90      	pop	{r4, r7, pc}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40000400 	.word	0x40000400
 80052b8:	40014400 	.word	0x40014400
 80052bc:	40014800 	.word	0x40014800
 80052c0:	40002000 	.word	0x40002000

080052c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b08b      	sub	sp, #44	@ 0x2c
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052cc:	2414      	movs	r4, #20
 80052ce:	193b      	adds	r3, r7, r4
 80052d0:	0018      	movs	r0, r3
 80052d2:	2314      	movs	r3, #20
 80052d4:	001a      	movs	r2, r3
 80052d6:	2100      	movs	r1, #0
 80052d8:	f008 f880 	bl	800d3dc <memset>
  if(htim->Instance==TIM1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a25      	ldr	r2, [pc, #148]	@ (8005378 <HAL_TIM_MspPostInit+0xb4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d144      	bne.n	8005370 <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e6:	4b25      	ldr	r3, [pc, #148]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 80052e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052ea:	4b24      	ldr	r3, [pc, #144]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 80052ec:	2101      	movs	r1, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80052f2:	4b22      	ldr	r3, [pc, #136]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 80052f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f6:	2201      	movs	r2, #1
 80052f8:	4013      	ands	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
 80052fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052fe:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 8005300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005302:	4b1e      	ldr	r3, [pc, #120]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 8005304:	2102      	movs	r1, #2
 8005306:	430a      	orrs	r2, r1
 8005308:	635a      	str	r2, [r3, #52]	@ 0x34
 800530a:	4b1c      	ldr	r3, [pc, #112]	@ (800537c <HAL_TIM_MspPostInit+0xb8>)
 800530c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800530e:	2202      	movs	r2, #2
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8005316:	193b      	adds	r3, r7, r4
 8005318:	2280      	movs	r2, #128	@ 0x80
 800531a:	0112      	lsls	r2, r2, #4
 800531c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531e:	193b      	adds	r3, r7, r4
 8005320:	2202      	movs	r2, #2
 8005322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005324:	193b      	adds	r3, r7, r4
 8005326:	2200      	movs	r2, #0
 8005328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800532a:	193b      	adds	r3, r7, r4
 800532c:	2200      	movs	r2, #0
 800532e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005330:	193b      	adds	r3, r7, r4
 8005332:	2202      	movs	r2, #2
 8005334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005336:	193a      	adds	r2, r7, r4
 8005338:	23a0      	movs	r3, #160	@ 0xa0
 800533a:	05db      	lsls	r3, r3, #23
 800533c:	0011      	movs	r1, r2
 800533e:	0018      	movs	r0, r3
 8005340:	f002 fd56 	bl	8007df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8005344:	0021      	movs	r1, r4
 8005346:	187b      	adds	r3, r7, r1
 8005348:	2208      	movs	r2, #8
 800534a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	187b      	adds	r3, r7, r1
 800534e:	2202      	movs	r2, #2
 8005350:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	187b      	adds	r3, r7, r1
 8005354:	2200      	movs	r2, #0
 8005356:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005358:	187b      	adds	r3, r7, r1
 800535a:	2200      	movs	r2, #0
 800535c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800535e:	187b      	adds	r3, r7, r1
 8005360:	2201      	movs	r2, #1
 8005362:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8005364:	187b      	adds	r3, r7, r1
 8005366:	4a06      	ldr	r2, [pc, #24]	@ (8005380 <HAL_TIM_MspPostInit+0xbc>)
 8005368:	0019      	movs	r1, r3
 800536a:	0010      	movs	r0, r2
 800536c:	f002 fd40 	bl	8007df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	46bd      	mov	sp, r7
 8005374:	b00b      	add	sp, #44	@ 0x2c
 8005376:	bd90      	pop	{r4, r7, pc}
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40021000 	.word	0x40021000
 8005380:	50000400 	.word	0x50000400

08005384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b08b      	sub	sp, #44	@ 0x2c
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800538c:	2414      	movs	r4, #20
 800538e:	193b      	adds	r3, r7, r4
 8005390:	0018      	movs	r0, r3
 8005392:	2314      	movs	r3, #20
 8005394:	001a      	movs	r2, r3
 8005396:	2100      	movs	r1, #0
 8005398:	f008 f820 	bl	800d3dc <memset>
  if(huart->Instance==USART2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a4a      	ldr	r2, [pc, #296]	@ (80054cc <HAL_UART_MspInit+0x148>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d000      	beq.n	80053a8 <HAL_UART_MspInit+0x24>
 80053a6:	e08d      	b.n	80054c4 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053a8:	4b49      	ldr	r3, [pc, #292]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ac:	4b48      	ldr	r3, [pc, #288]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053ae:	2180      	movs	r1, #128	@ 0x80
 80053b0:	0289      	lsls	r1, r1, #10
 80053b2:	430a      	orrs	r2, r1
 80053b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80053b6:	4b46      	ldr	r3, [pc, #280]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	4013      	ands	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053c4:	4b42      	ldr	r3, [pc, #264]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	4b41      	ldr	r3, [pc, #260]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053ca:	2101      	movs	r1, #1
 80053cc:	430a      	orrs	r2, r1
 80053ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80053d0:	4b3f      	ldr	r3, [pc, #252]	@ (80054d0 <HAL_UART_MspInit+0x14c>)
 80053d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d4:	2201      	movs	r2, #1
 80053d6:	4013      	ands	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 80053dc:	0021      	movs	r1, r4
 80053de:	187b      	adds	r3, r7, r1
 80053e0:	220c      	movs	r2, #12
 80053e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e4:	187b      	adds	r3, r7, r1
 80053e6:	2202      	movs	r2, #2
 80053e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053ea:	187b      	adds	r3, r7, r1
 80053ec:	2201      	movs	r2, #1
 80053ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	2200      	movs	r2, #0
 80053f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80053f6:	187b      	adds	r3, r7, r1
 80053f8:	2201      	movs	r2, #1
 80053fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053fc:	187a      	adds	r2, r7, r1
 80053fe:	23a0      	movs	r3, #160	@ 0xa0
 8005400:	05db      	lsls	r3, r3, #23
 8005402:	0011      	movs	r1, r2
 8005404:	0018      	movs	r0, r3
 8005406:	f002 fcf3 	bl	8007df0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800540a:	4b32      	ldr	r3, [pc, #200]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 800540c:	4a32      	ldr	r2, [pc, #200]	@ (80054d8 <HAL_UART_MspInit+0x154>)
 800540e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005410:	4b30      	ldr	r3, [pc, #192]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005412:	2234      	movs	r2, #52	@ 0x34
 8005414:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005416:	4b2f      	ldr	r3, [pc, #188]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005418:	2200      	movs	r2, #0
 800541a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800541c:	4b2d      	ldr	r3, [pc, #180]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 800541e:	2200      	movs	r2, #0
 8005420:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005422:	4b2c      	ldr	r3, [pc, #176]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005424:	2280      	movs	r2, #128	@ 0x80
 8005426:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005428:	4b2a      	ldr	r3, [pc, #168]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 800542a:	2200      	movs	r2, #0
 800542c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800542e:	4b29      	ldr	r3, [pc, #164]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005430:	2200      	movs	r2, #0
 8005432:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005434:	4b27      	ldr	r3, [pc, #156]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005436:	2200      	movs	r2, #0
 8005438:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800543a:	4b26      	ldr	r3, [pc, #152]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 800543c:	2280      	movs	r2, #128	@ 0x80
 800543e:	0152      	lsls	r2, r2, #5
 8005440:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005442:	4b24      	ldr	r3, [pc, #144]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005444:	0018      	movs	r0, r3
 8005446:	f002 f9b5 	bl	80077b4 <HAL_DMA_Init>
 800544a:	1e03      	subs	r3, r0, #0
 800544c:	d001      	beq.n	8005452 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800544e:	f7fc ff21 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2180      	movs	r1, #128	@ 0x80
 8005456:	4a1f      	ldr	r2, [pc, #124]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 8005458:	505a      	str	r2, [r3, r1]
 800545a:	4b1e      	ldr	r3, [pc, #120]	@ (80054d4 <HAL_UART_MspInit+0x150>)
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8005460:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005462:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_UART_MspInit+0x15c>)
 8005464:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005466:	4b1d      	ldr	r3, [pc, #116]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005468:	2235      	movs	r2, #53	@ 0x35
 800546a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800546c:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <HAL_UART_MspInit+0x158>)
 800546e:	2210      	movs	r2, #16
 8005470:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005472:	4b1a      	ldr	r3, [pc, #104]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005474:	2200      	movs	r2, #0
 8005476:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005478:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <HAL_UART_MspInit+0x158>)
 800547a:	2280      	movs	r2, #128	@ 0x80
 800547c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800547e:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005480:	2200      	movs	r2, #0
 8005482:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005484:	4b15      	ldr	r3, [pc, #84]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005486:	2200      	movs	r2, #0
 8005488:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800548a:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <HAL_UART_MspInit+0x158>)
 800548c:	2200      	movs	r2, #0
 800548e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <HAL_UART_MspInit+0x158>)
 8005492:	2280      	movs	r2, #128	@ 0x80
 8005494:	0152      	lsls	r2, r2, #5
 8005496:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005498:	4b10      	ldr	r3, [pc, #64]	@ (80054dc <HAL_UART_MspInit+0x158>)
 800549a:	0018      	movs	r0, r3
 800549c:	f002 f98a 	bl	80077b4 <HAL_DMA_Init>
 80054a0:	1e03      	subs	r3, r0, #0
 80054a2:	d001      	beq.n	80054a8 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 80054a4:	f7fc fef6 	bl	8002294 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a0c      	ldr	r2, [pc, #48]	@ (80054dc <HAL_UART_MspInit+0x158>)
 80054ac:	67da      	str	r2, [r3, #124]	@ 0x7c
 80054ae:	4b0b      	ldr	r3, [pc, #44]	@ (80054dc <HAL_UART_MspInit+0x158>)
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 80054b4:	2201      	movs	r2, #1
 80054b6:	2101      	movs	r1, #1
 80054b8:	201c      	movs	r0, #28
 80054ba:	f002 f939 	bl	8007730 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054be:	201c      	movs	r0, #28
 80054c0:	f002 f94b 	bl	800775a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80054c4:	46c0      	nop			@ (mov r8, r8)
 80054c6:	46bd      	mov	sp, r7
 80054c8:	b00b      	add	sp, #44	@ 0x2c
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	40004400 	.word	0x40004400
 80054d0:	40021000 	.word	0x40021000
 80054d4:	20000b14 	.word	0x20000b14
 80054d8:	4002001c 	.word	0x4002001c
 80054dc:	20000b70 	.word	0x20000b70
 80054e0:	40020030 	.word	0x40020030

080054e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80054e8:	46c0      	nop			@ (mov r8, r8)
 80054ea:	e7fd      	b.n	80054e8 <NMI_Handler+0x4>

080054ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80054f0:	46c0      	nop			@ (mov r8, r8)
 80054f2:	e7fd      	b.n	80054f0 <HardFault_Handler+0x4>

080054f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80054f8:	46c0      	nop			@ (mov r8, r8)
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005502:	46c0      	nop			@ (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800550c:	f000 fdfc 	bl	8006108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005510:	46c0      	nop			@ (mov r8, r8)
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 800551a:	2080      	movs	r0, #128	@ 0x80
 800551c:	f002 fe06 	bl	800812c <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
	...

08005528 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800552c:	4b03      	ldr	r3, [pc, #12]	@ (800553c <DMA1_Channel1_IRQHandler+0x14>)
 800552e:	0018      	movs	r0, r3
 8005530:	f002 fb1c 	bl	8007b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005534:	46c0      	nop			@ (mov r8, r8)
 8005536:	46bd      	mov	sp, r7
 8005538:	bd80      	pop	{r7, pc}
 800553a:	46c0      	nop			@ (mov r8, r8)
 800553c:	20000584 	.word	0x20000584

08005540 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005544:	4b05      	ldr	r3, [pc, #20]	@ (800555c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005546:	0018      	movs	r0, r3
 8005548:	f002 fb10 	bl	8007b6c <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <DMA1_Channel2_3_IRQHandler+0x20>)
 800554e:	0018      	movs	r0, r3
 8005550:	f002 fb0c 	bl	8007b6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005554:	46c0      	nop			@ (mov r8, r8)
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	46c0      	nop			@ (mov r8, r8)
 800555c:	20000b14 	.word	0x20000b14
 8005560:	20000b70 	.word	0x20000b70

08005564 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005568:	4b03      	ldr	r3, [pc, #12]	@ (8005578 <TIM2_IRQHandler+0x14>)
 800556a:	0018      	movs	r0, r3
 800556c:	f004 fef0 	bl	800a350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	20000814 	.word	0x20000814

0800557c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005580:	4b03      	ldr	r3, [pc, #12]	@ (8005590 <TIM3_IRQHandler+0x14>)
 8005582:	0018      	movs	r0, r3
 8005584:	f004 fee4 	bl	800a350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005588:	46c0      	nop			@ (mov r8, r8)
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	46c0      	nop			@ (mov r8, r8)
 8005590:	200008d0 	.word	0x200008d0

08005594 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005598:	4b03      	ldr	r3, [pc, #12]	@ (80055a8 <TIM16_IRQHandler+0x14>)
 800559a:	0018      	movs	r0, r3
 800559c:	f004 fed8 	bl	800a350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80055a0:	46c0      	nop			@ (mov r8, r8)
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	20000758 	.word	0x20000758

080055ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80055b0:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <USART2_IRQHandler+0x14>)
 80055b2:	0018      	movs	r0, r3
 80055b4:	f006 fc4e 	bl	800be54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80055b8:	46c0      	nop			@ (mov r8, r8)
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	20000a48 	.word	0x20000a48

080055c4 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 80055c8:	4b03      	ldr	r3, [pc, #12]	@ (80055d8 <LPTIM1_IRQHandler+0x14>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f002 ff1c 	bl	8008408 <HAL_LPTIM_IRQHandler>
}
 80055d0:	46c0      	nop			@ (mov r8, r8)
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	46c0      	nop			@ (mov r8, r8)
 80055d8:	20000bcc 	.word	0x20000bcc

080055dc <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80055e0:	4b03      	ldr	r3, [pc, #12]	@ (80055f0 <TIM17_IRQHandler+0x14>)
 80055e2:	0018      	movs	r0, r3
 80055e4:	f004 feb4 	bl	800a350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	46c0      	nop			@ (mov r8, r8)
 80055f0:	2000069c 	.word	0x2000069c

080055f4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80055f8:	4b03      	ldr	r3, [pc, #12]	@ (8005608 <TIM14_IRQHandler+0x14>)
 80055fa:	0018      	movs	r0, r3
 80055fc:	f004 fea8 	bl	800a350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	46c0      	nop			@ (mov r8, r8)
 8005608:	200005e0 	.word	0x200005e0

0800560c <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	5c9b      	ldrb	r3, [r3, r2]
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b01      	cmp	r3, #1
 800561e:	d107      	bne.n	8005630 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8b5b      	ldrh	r3, [r3, #26]
 8005624:	b29b      	uxth	r3, r3
 8005626:	18db      	adds	r3, r3, r3
 8005628:	b29a      	uxth	r2, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	839a      	strh	r2, [r3, #28]
 800562e:	e00a      	b.n	8005646 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	5c9b      	ldrb	r3, [r3, r2]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8b5b      	ldrh	r3, [r3, #26]
 8005640:	b29a      	uxth	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005646:	2301      	movs	r3, #1
}
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005658:	2317      	movs	r3, #23
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8005660:	2316      	movs	r3, #22
 8005662:	18fb      	adds	r3, r7, r3
 8005664:	2200      	movs	r2, #0
 8005666:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8005668:	2315      	movs	r3, #21
 800566a:	18fb      	adds	r3, r7, r3
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8005670:	2114      	movs	r1, #20
 8005672:	187b      	adds	r3, r7, r1
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	899b      	ldrh	r3, [r3, #12]
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005680:	d803      	bhi.n	800568a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8005682:	187b      	adds	r3, r7, r1
 8005684:	2200      	movs	r2, #0
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e003      	b.n	8005692 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 800568a:	2314      	movs	r3, #20
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	2201      	movs	r2, #1
 8005690:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	799b      	ldrb	r3, [r3, #6]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b01      	cmp	r3, #1
 800569a:	d004      	beq.n	80056a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	799b      	ldrb	r3, [r3, #6]
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d146      	bne.n	8005734 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7c1b      	ldrb	r3, [r3, #16]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7c5b      	ldrb	r3, [r3, #17]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	7c1b      	ldrb	r3, [r3, #16]
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d113      	bne.n	80056ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7c5b      	ldrb	r3, [r3, #17]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d10e      	bne.n	80056ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 80056ce:	2314      	movs	r3, #20
 80056d0:	18fb      	adds	r3, r7, r3
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 80056d8:	2316      	movs	r3, #22
 80056da:	18fb      	adds	r3, r7, r3
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80056e0:	e027      	b.n	8005732 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80056e2:	2316      	movs	r3, #22
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 80056ea:	e022      	b.n	8005732 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7c1b      	ldrb	r3, [r3, #16]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d104      	bne.n	8005700 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	7c5b      	ldrb	r3, [r3, #17]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d009      	beq.n	8005714 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	7c1b      	ldrb	r3, [r3, #16]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d13c      	bne.n	8005784 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	7c5b      	ldrb	r3, [r3, #17]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d137      	bne.n	8005784 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8005714:	2314      	movs	r3, #20
 8005716:	18fb      	adds	r3, r7, r3
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d104      	bne.n	8005728 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 800571e:	2316      	movs	r3, #22
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005726:	e02d      	b.n	8005784 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8005728:	2316      	movs	r3, #22
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2201      	movs	r2, #1
 800572e:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005730:	e028      	b.n	8005784 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8005732:	e027      	b.n	8005784 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	799b      	ldrb	r3, [r3, #6]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d123      	bne.n	8005786 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	7c1b      	ldrb	r3, [r3, #16]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8005748:	2314      	movs	r3, #20
 800574a:	18fb      	adds	r3, r7, r3
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8005752:	2316      	movs	r3, #22
 8005754:	18fb      	adds	r3, r7, r3
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e014      	b.n	8005786 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 800575c:	2316      	movs	r3, #22
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e00f      	b.n	8005786 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8005766:	2314      	movs	r3, #20
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d104      	bne.n	800577a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8005770:	2316      	movs	r3, #22
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	2200      	movs	r2, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	e005      	b.n	8005786 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 800577a:	2316      	movs	r3, #22
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e000      	b.n	8005786 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005784:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005786:	2314      	movs	r3, #20
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d109      	bne.n	80057a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	899b      	ldrh	r3, [r3, #12]
 8005794:	b29b      	uxth	r3, r3
 8005796:	b2da      	uxtb	r2, r3
 8005798:	2315      	movs	r3, #21
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	217f      	movs	r1, #127	@ 0x7f
 800579e:	1a8a      	subs	r2, r1, r2
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e007      	b.n	80057b4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	899b      	ldrh	r3, [r3, #12]
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	b2da      	uxtb	r2, r3
 80057ac:	2315      	movs	r3, #21
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	3a80      	subs	r2, #128	@ 0x80
 80057b2:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8a5b      	ldrh	r3, [r3, #18]
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	200e      	movs	r0, #14
 80057bc:	183b      	adds	r3, r7, r0
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	0049      	lsls	r1, r1, #1
 80057c2:	1a8a      	subs	r2, r1, r2
 80057c4:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 80057c6:	0001      	movs	r1, r0
 80057c8:	187b      	adds	r3, r7, r1
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	2215      	movs	r2, #21
 80057ce:	18ba      	adds	r2, r7, r2
 80057d0:	7812      	ldrb	r2, [r2, #0]
 80057d2:	435a      	muls	r2, r3
 80057d4:	0013      	movs	r3, r2
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	189b      	adds	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	10da      	asrs	r2, r3, #3
 80057de:	240c      	movs	r4, #12
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 80057e4:	250a      	movs	r5, #10
 80057e6:	197b      	adds	r3, r7, r5
 80057e8:	193a      	adds	r2, r7, r4
 80057ea:	8812      	ldrh	r2, [r2, #0]
 80057ec:	0a12      	lsrs	r2, r2, #8
 80057ee:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 80057f0:	2312      	movs	r3, #18
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	0008      	movs	r0, r1
 80057f6:	1879      	adds	r1, r7, r1
 80057f8:	197a      	adds	r2, r7, r5
 80057fa:	8809      	ldrh	r1, [r1, #0]
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	1a8a      	subs	r2, r1, r2
 8005800:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8005802:	2610      	movs	r6, #16
 8005804:	19bb      	adds	r3, r7, r6
 8005806:	1839      	adds	r1, r7, r0
 8005808:	197a      	adds	r2, r7, r5
 800580a:	8809      	ldrh	r1, [r1, #0]
 800580c:	8812      	ldrh	r2, [r2, #0]
 800580e:	188a      	adds	r2, r1, r2
 8005810:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8005812:	19bb      	adds	r3, r7, r6
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	2bff      	cmp	r3, #255	@ 0xff
 8005818:	d90f      	bls.n	800583a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800581a:	19bb      	adds	r3, r7, r6
 800581c:	881a      	ldrh	r2, [r3, #0]
 800581e:	2380      	movs	r3, #128	@ 0x80
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	429a      	cmp	r2, r3
 8005824:	d000      	beq.n	8005828 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8005826:	e0b0      	b.n	800598a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8005828:	193b      	adds	r3, r7, r4
 800582a:	881b      	ldrh	r3, [r3, #0]
 800582c:	2108      	movs	r1, #8
 800582e:	0018      	movs	r0, r3
 8005830:	f000 fb80 	bl	8005f34 <unsigned_bitwise_modulo>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d000      	beq.n	800583a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005838:	e0a7      	b.n	800598a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800583a:	230c      	movs	r3, #12
 800583c:	18fb      	adds	r3, r7, r3
 800583e:	881b      	ldrh	r3, [r3, #0]
 8005840:	2108      	movs	r1, #8
 8005842:	0018      	movs	r0, r3
 8005844:	f000 fb76 	bl	8005f34 <unsigned_bitwise_modulo>
 8005848:	0003      	movs	r3, r0
 800584a:	2b80      	cmp	r3, #128	@ 0x80
 800584c:	d117      	bne.n	800587e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 800584e:	2316      	movs	r3, #22
 8005850:	18fb      	adds	r3, r7, r3
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8005858:	2317      	movs	r3, #23
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	2202      	movs	r2, #2
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	e008      	b.n	8005874 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005862:	2316      	movs	r3, #22
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d103      	bne.n	8005874 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800586c:	2317      	movs	r3, #23
 800586e:	18fb      	adds	r3, r7, r3
 8005870:	2201      	movs	r2, #1
 8005872:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	2100      	movs	r1, #0
 800587a:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800587c:	e21f      	b.n	8005cbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 800587e:	230c      	movs	r3, #12
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	2108      	movs	r1, #8
 8005886:	0018      	movs	r0, r3
 8005888:	f000 fb54 	bl	8005f34 <unsigned_bitwise_modulo>
 800588c:	1e03      	subs	r3, r0, #0
 800588e:	d121      	bne.n	80058d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005890:	2212      	movs	r2, #18
 8005892:	18bb      	adds	r3, r7, r2
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800589a:	2210      	movs	r2, #16
 800589c:	18bb      	adds	r3, r7, r2
 800589e:	18ba      	adds	r2, r7, r2
 80058a0:	8812      	ldrh	r2, [r2, #0]
 80058a2:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80058a4:	2316      	movs	r3, #22
 80058a6:	18fb      	adds	r3, r7, r3
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d104      	bne.n	80058b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80058ae:	2317      	movs	r3, #23
 80058b0:	18fb      	adds	r3, r7, r3
 80058b2:	2200      	movs	r2, #0
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e008      	b.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80058b8:	2316      	movs	r3, #22
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d103      	bne.n	80058ca <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80058c2:	2317      	movs	r3, #23
 80058c4:	18fb      	adds	r3, r7, r3
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	2100      	movs	r1, #0
 80058d0:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80058d2:	e1f4      	b.n	8005cbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80058d4:	230c      	movs	r3, #12
 80058d6:	18fb      	adds	r3, r7, r3
 80058d8:	881b      	ldrh	r3, [r3, #0]
 80058da:	2108      	movs	r1, #8
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 fb29 	bl	8005f34 <unsigned_bitwise_modulo>
 80058e2:	0003      	movs	r3, r0
 80058e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e6:	d821      	bhi.n	800592c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80058e8:	2212      	movs	r2, #18
 80058ea:	18bb      	adds	r3, r7, r2
 80058ec:	18ba      	adds	r2, r7, r2
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80058f2:	2210      	movs	r2, #16
 80058f4:	18bb      	adds	r3, r7, r2
 80058f6:	18ba      	adds	r2, r7, r2
 80058f8:	8812      	ldrh	r2, [r2, #0]
 80058fa:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80058fc:	2316      	movs	r3, #22
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005906:	2317      	movs	r3, #23
 8005908:	18fb      	adds	r3, r7, r3
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	e008      	b.n	8005922 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005910:	2316      	movs	r3, #22
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d103      	bne.n	8005922 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800591a:	2317      	movs	r3, #23
 800591c:	18fb      	adds	r3, r7, r3
 800591e:	2200      	movs	r2, #0
 8005920:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2220      	movs	r2, #32
 8005926:	2100      	movs	r1, #0
 8005928:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800592a:	e1c8      	b.n	8005cbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800592c:	230c      	movs	r3, #12
 800592e:	18fb      	adds	r3, r7, r3
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	2108      	movs	r1, #8
 8005934:	0018      	movs	r0, r3
 8005936:	f000 fafd 	bl	8005f34 <unsigned_bitwise_modulo>
 800593a:	0003      	movs	r3, r0
 800593c:	2b80      	cmp	r3, #128	@ 0x80
 800593e:	d800      	bhi.n	8005942 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 8005940:	e1bd      	b.n	8005cbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005942:	2212      	movs	r2, #18
 8005944:	18bb      	adds	r3, r7, r2
 8005946:	18ba      	adds	r2, r7, r2
 8005948:	8812      	ldrh	r2, [r2, #0]
 800594a:	3a01      	subs	r2, #1
 800594c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800594e:	2210      	movs	r2, #16
 8005950:	18bb      	adds	r3, r7, r2
 8005952:	18ba      	adds	r2, r7, r2
 8005954:	8812      	ldrh	r2, [r2, #0]
 8005956:	3201      	adds	r2, #1
 8005958:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 800595a:	2316      	movs	r3, #22
 800595c:	18fb      	adds	r3, r7, r3
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d104      	bne.n	800596e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005964:	2317      	movs	r3, #23
 8005966:	18fb      	adds	r3, r7, r3
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e008      	b.n	8005980 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800596e:	2316      	movs	r3, #22
 8005970:	18fb      	adds	r3, r7, r3
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d103      	bne.n	8005980 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005978:	2317      	movs	r3, #23
 800597a:	18fb      	adds	r3, r7, r3
 800597c:	2200      	movs	r2, #0
 800597e:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	2100      	movs	r1, #0
 8005986:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005988:	e199      	b.n	8005cbe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 800598a:	2110      	movs	r1, #16
 800598c:	187b      	adds	r3, r7, r1
 800598e:	881a      	ldrh	r2, [r3, #0]
 8005990:	2380      	movs	r3, #128	@ 0x80
 8005992:	005b      	lsls	r3, r3, #1
 8005994:	429a      	cmp	r2, r3
 8005996:	d810      	bhi.n	80059ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005998:	187b      	adds	r3, r7, r1
 800599a:	881a      	ldrh	r2, [r3, #0]
 800599c:	2380      	movs	r3, #128	@ 0x80
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d000      	beq.n	80059a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 80059a4:	e18c      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 80059a6:	230c      	movs	r3, #12
 80059a8:	18fb      	adds	r3, r7, r3
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	2108      	movs	r1, #8
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 fac0 	bl	8005f34 <unsigned_bitwise_modulo>
 80059b4:	1e03      	subs	r3, r0, #0
 80059b6:	d100      	bne.n	80059ba <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 80059b8:	e182      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80059ba:	230c      	movs	r3, #12
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	2108      	movs	r1, #8
 80059c2:	0018      	movs	r0, r3
 80059c4:	f000 fab6 	bl	8005f34 <unsigned_bitwise_modulo>
 80059c8:	0003      	movs	r3, r0
 80059ca:	2b80      	cmp	r3, #128	@ 0x80
 80059cc:	d159      	bne.n	8005a82 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80059ce:	2212      	movs	r2, #18
 80059d0:	18bb      	adds	r3, r7, r2
 80059d2:	18ba      	adds	r2, r7, r2
 80059d4:	8812      	ldrh	r2, [r2, #0]
 80059d6:	3a01      	subs	r2, #1
 80059d8:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80059da:	2110      	movs	r1, #16
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	187a      	adds	r2, r7, r1
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	3201      	adds	r2, #1
 80059e4:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80059e6:	000c      	movs	r4, r1
 80059e8:	187b      	adds	r3, r7, r1
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	2101      	movs	r1, #1
 80059ee:	0018      	movs	r0, r3
 80059f0:	f000 faa0 	bl	8005f34 <unsigned_bitwise_modulo>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d121      	bne.n	8005a3c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80059f8:	193b      	adds	r3, r7, r4
 80059fa:	193a      	adds	r2, r7, r4
 80059fc:	8812      	ldrh	r2, [r2, #0]
 80059fe:	0852      	lsrs	r2, r2, #1
 8005a00:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005a02:	2316      	movs	r3, #22
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d108      	bne.n	8005a1e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a0c:	2317      	movs	r3, #23
 8005a0e:	18fb      	adds	r3, r7, r3
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	2100      	movs	r1, #0
 8005a1a:	5499      	strb	r1, [r3, r2]
 8005a1c:	e150      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005a1e:	2316      	movs	r3, #22
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d000      	beq.n	8005a2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8005a28:	e14a      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a2a:	2317      	movs	r3, #23
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	2200      	movs	r2, #0
 8005a30:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2220      	movs	r2, #32
 8005a36:	2101      	movs	r1, #1
 8005a38:	5499      	strb	r1, [r3, r2]
 8005a3a:	e141      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	18bb      	adds	r3, r7, r2
 8005a40:	18ba      	adds	r2, r7, r2
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	0852      	lsrs	r2, r2, #1
 8005a46:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005a48:	2316      	movs	r3, #22
 8005a4a:	18fb      	adds	r3, r7, r3
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d108      	bne.n	8005a64 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005a52:	2317      	movs	r3, #23
 8005a54:	18fb      	adds	r3, r7, r3
 8005a56:	2200      	movs	r2, #0
 8005a58:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	2100      	movs	r1, #0
 8005a60:	5499      	strb	r1, [r3, r2]
 8005a62:	e12d      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005a64:	2316      	movs	r3, #22
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d000      	beq.n	8005a70 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 8005a6e:	e127      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005a70:	2317      	movs	r3, #23
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	2101      	movs	r1, #1
 8005a7e:	5499      	strb	r1, [r3, r2]
 8005a80:	e11e      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8005a82:	230c      	movs	r3, #12
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	881b      	ldrh	r3, [r3, #0]
 8005a88:	2108      	movs	r1, #8
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f000 fa52 	bl	8005f34 <unsigned_bitwise_modulo>
 8005a90:	1e03      	subs	r3, r0, #0
 8005a92:	d152      	bne.n	8005b3a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005a94:	2212      	movs	r2, #18
 8005a96:	18bb      	adds	r3, r7, r2
 8005a98:	18ba      	adds	r2, r7, r2
 8005a9a:	8812      	ldrh	r2, [r2, #0]
 8005a9c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005a9e:	2410      	movs	r4, #16
 8005aa0:	193b      	adds	r3, r7, r4
 8005aa2:	881b      	ldrh	r3, [r3, #0]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	0018      	movs	r0, r3
 8005aa8:	f000 fa44 	bl	8005f34 <unsigned_bitwise_modulo>
 8005aac:	1e03      	subs	r3, r0, #0
 8005aae:	d121      	bne.n	8005af4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005ab0:	193b      	adds	r3, r7, r4
 8005ab2:	193a      	adds	r2, r7, r4
 8005ab4:	8812      	ldrh	r2, [r2, #0]
 8005ab6:	0852      	lsrs	r2, r2, #1
 8005ab8:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005aba:	2316      	movs	r3, #22
 8005abc:	18fb      	adds	r3, r7, r3
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d108      	bne.n	8005ad6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ac4:	2317      	movs	r3, #23
 8005ac6:	18fb      	adds	r3, r7, r3
 8005ac8:	2200      	movs	r2, #0
 8005aca:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	5499      	strb	r1, [r3, r2]
 8005ad4:	e0f4      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ad6:	2316      	movs	r3, #22
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d000      	beq.n	8005ae2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8005ae0:	e0ee      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ae2:	2317      	movs	r3, #23
 8005ae4:	18fb      	adds	r3, r7, r3
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	2101      	movs	r1, #1
 8005af0:	5499      	strb	r1, [r3, r2]
 8005af2:	e0e5      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005af4:	2210      	movs	r2, #16
 8005af6:	18bb      	adds	r3, r7, r2
 8005af8:	18ba      	adds	r2, r7, r2
 8005afa:	8812      	ldrh	r2, [r2, #0]
 8005afc:	0852      	lsrs	r2, r2, #1
 8005afe:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005b00:	2316      	movs	r3, #22
 8005b02:	18fb      	adds	r3, r7, r3
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d108      	bne.n	8005b1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b0a:	2317      	movs	r3, #23
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2200      	movs	r2, #0
 8005b10:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	2100      	movs	r1, #0
 8005b18:	5499      	strb	r1, [r3, r2]
 8005b1a:	e0d1      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005b1c:	2316      	movs	r3, #22
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d000      	beq.n	8005b28 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8005b26:	e0cb      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005b28:	2317      	movs	r3, #23
 8005b2a:	18fb      	adds	r3, r7, r3
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	2101      	movs	r1, #1
 8005b36:	5499      	strb	r1, [r3, r2]
 8005b38:	e0c2      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005b3a:	230c      	movs	r3, #12
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	2108      	movs	r1, #8
 8005b42:	0018      	movs	r0, r3
 8005b44:	f000 f9f6 	bl	8005f34 <unsigned_bitwise_modulo>
 8005b48:	0003      	movs	r3, r0
 8005b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b4c:	d856      	bhi.n	8005bfc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005b4e:	2212      	movs	r2, #18
 8005b50:	18bb      	adds	r3, r7, r2
 8005b52:	18ba      	adds	r2, r7, r2
 8005b54:	8812      	ldrh	r2, [r2, #0]
 8005b56:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005b58:	2410      	movs	r4, #16
 8005b5a:	193b      	adds	r3, r7, r4
 8005b5c:	193a      	adds	r2, r7, r4
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005b62:	193b      	adds	r3, r7, r4
 8005b64:	881b      	ldrh	r3, [r3, #0]
 8005b66:	2101      	movs	r1, #1
 8005b68:	0018      	movs	r0, r3
 8005b6a:	f000 f9e3 	bl	8005f34 <unsigned_bitwise_modulo>
 8005b6e:	1e03      	subs	r3, r0, #0
 8005b70:	d121      	bne.n	8005bb6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005b72:	193b      	adds	r3, r7, r4
 8005b74:	193a      	adds	r2, r7, r4
 8005b76:	8812      	ldrh	r2, [r2, #0]
 8005b78:	0852      	lsrs	r2, r2, #1
 8005b7a:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005b7c:	2316      	movs	r3, #22
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d108      	bne.n	8005b98 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005b86:	2317      	movs	r3, #23
 8005b88:	18fb      	adds	r3, r7, r3
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2220      	movs	r2, #32
 8005b92:	2100      	movs	r1, #0
 8005b94:	5499      	strb	r1, [r3, r2]
 8005b96:	e093      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005b98:	2316      	movs	r3, #22
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d000      	beq.n	8005ba4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8005ba2:	e08d      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005ba4:	2317      	movs	r3, #23
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	5499      	strb	r1, [r3, r2]
 8005bb4:	e084      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005bb6:	2210      	movs	r2, #16
 8005bb8:	18bb      	adds	r3, r7, r2
 8005bba:	18ba      	adds	r2, r7, r2
 8005bbc:	8812      	ldrh	r2, [r2, #0]
 8005bbe:	0852      	lsrs	r2, r2, #1
 8005bc0:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005bc2:	2316      	movs	r3, #22
 8005bc4:	18fb      	adds	r3, r7, r3
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005bcc:	2317      	movs	r3, #23
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	2100      	movs	r1, #0
 8005bda:	5499      	strb	r1, [r3, r2]
 8005bdc:	e070      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005bde:	2316      	movs	r3, #22
 8005be0:	18fb      	adds	r3, r7, r3
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d000      	beq.n	8005bea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005be8:	e06a      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005bea:	2317      	movs	r3, #23
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	5499      	strb	r1, [r3, r2]
 8005bfa:	e061      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005bfc:	230c      	movs	r3, #12
 8005bfe:	18fb      	adds	r3, r7, r3
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	2108      	movs	r1, #8
 8005c04:	0018      	movs	r0, r3
 8005c06:	f000 f995 	bl	8005f34 <unsigned_bitwise_modulo>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	2b80      	cmp	r3, #128	@ 0x80
 8005c0e:	d957      	bls.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8005c10:	2212      	movs	r2, #18
 8005c12:	18bb      	adds	r3, r7, r2
 8005c14:	18ba      	adds	r2, r7, r2
 8005c16:	8812      	ldrh	r2, [r2, #0]
 8005c18:	3a01      	subs	r2, #1
 8005c1a:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005c1c:	2410      	movs	r4, #16
 8005c1e:	193b      	adds	r3, r7, r4
 8005c20:	193a      	adds	r2, r7, r4
 8005c22:	8812      	ldrh	r2, [r2, #0]
 8005c24:	3201      	adds	r2, #1
 8005c26:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005c28:	193b      	adds	r3, r7, r4
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f980 	bl	8005f34 <unsigned_bitwise_modulo>
 8005c34:	1e03      	subs	r3, r0, #0
 8005c36:	d120      	bne.n	8005c7a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c38:	193b      	adds	r3, r7, r4
 8005c3a:	193a      	adds	r2, r7, r4
 8005c3c:	8812      	ldrh	r2, [r2, #0]
 8005c3e:	0852      	lsrs	r2, r2, #1
 8005c40:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c42:	2316      	movs	r3, #22
 8005c44:	18fb      	adds	r3, r7, r3
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d108      	bne.n	8005c5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c4c:	2317      	movs	r3, #23
 8005c4e:	18fb      	adds	r3, r7, r3
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2220      	movs	r2, #32
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]
 8005c5c:	e030      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005c5e:	2316      	movs	r3, #22
 8005c60:	18fb      	adds	r3, r7, r3
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d12b      	bne.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c68:	2317      	movs	r3, #23
 8005c6a:	18fb      	adds	r3, r7, r3
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2220      	movs	r2, #32
 8005c74:	2101      	movs	r1, #1
 8005c76:	5499      	strb	r1, [r3, r2]
 8005c78:	e022      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	18bb      	adds	r3, r7, r2
 8005c7e:	18ba      	adds	r2, r7, r2
 8005c80:	8812      	ldrh	r2, [r2, #0]
 8005c82:	0852      	lsrs	r2, r2, #1
 8005c84:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005c86:	2316      	movs	r3, #22
 8005c88:	18fb      	adds	r3, r7, r3
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d108      	bne.n	8005ca2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005c90:	2317      	movs	r3, #23
 8005c92:	18fb      	adds	r3, r7, r3
 8005c94:	2200      	movs	r2, #0
 8005c96:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	5499      	strb	r1, [r3, r2]
 8005ca0:	e00e      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005ca2:	2316      	movs	r3, #22
 8005ca4:	18fb      	adds	r3, r7, r3
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d109      	bne.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005cac:	2317      	movs	r3, #23
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	2101      	movs	r1, #1
 8005cba:	5499      	strb	r1, [r3, r2]
 8005cbc:	e000      	b.n	8005cc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005cbe:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8005cc0:	2316      	movs	r3, #22
 8005cc2:	18fb      	adds	r3, r7, r3
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d152      	bne.n	8005d70 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005cca:	2317      	movs	r3, #23
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005cd4:	2312      	movs	r3, #18
 8005cd6:	18fb      	adds	r3, r7, r3
 8005cd8:	881b      	ldrh	r3, [r3, #0]
 8005cda:	2280      	movs	r2, #128	@ 0x80
 8005cdc:	0052      	lsls	r2, r2, #1
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	829a      	strh	r2, [r3, #20]
 8005ce6:	e099      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005ce8:	2317      	movs	r3, #23
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d11b      	bne.n	8005d2a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	89db      	ldrh	r3, [r3, #14]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	0018      	movs	r0, r3
 8005cfc:	f000 f91a 	bl	8005f34 <unsigned_bitwise_modulo>
 8005d00:	1e03      	subs	r3, r0, #0
 8005d02:	d109      	bne.n	8005d18 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005d04:	2312      	movs	r3, #18
 8005d06:	18fb      	adds	r3, r7, r3
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	2280      	movs	r2, #128	@ 0x80
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	829a      	strh	r2, [r3, #20]
 8005d16:	e081      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005d18:	2312      	movs	r3, #18
 8005d1a:	18fb      	adds	r3, r7, r3
 8005d1c:	881b      	ldrh	r3, [r3, #0]
 8005d1e:	22ff      	movs	r2, #255	@ 0xff
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	829a      	strh	r2, [r3, #20]
 8005d28:	e078      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005d2a:	2317      	movs	r3, #23
 8005d2c:	18fb      	adds	r3, r7, r3
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d000      	beq.n	8005d36 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 8005d34:	e072      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	89db      	ldrh	r3, [r3, #14]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f000 f8f8 	bl	8005f34 <unsigned_bitwise_modulo>
 8005d44:	1e03      	subs	r3, r0, #0
 8005d46:	d109      	bne.n	8005d5c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005d48:	2312      	movs	r3, #18
 8005d4a:	18fb      	adds	r3, r7, r3
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	2280      	movs	r2, #128	@ 0x80
 8005d50:	0052      	lsls	r2, r2, #1
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	829a      	strh	r2, [r3, #20]
 8005d5a:	e05f      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 8005d5c:	2312      	movs	r3, #18
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	2202      	movs	r2, #2
 8005d64:	32ff      	adds	r2, #255	@ 0xff
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	829a      	strh	r2, [r3, #20]
 8005d6e:	e055      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005d70:	2316      	movs	r3, #22
 8005d72:	18fb      	adds	r3, r7, r3
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d150      	bne.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005d7a:	2317      	movs	r3, #23
 8005d7c:	18fb      	adds	r3, r7, r3
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d109      	bne.n	8005d98 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005d84:	2310      	movs	r3, #16
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	2280      	movs	r2, #128	@ 0x80
 8005d8c:	0052      	lsls	r2, r2, #1
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	829a      	strh	r2, [r3, #20]
 8005d96:	e041      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005d98:	2317      	movs	r3, #23
 8005d9a:	18fb      	adds	r3, r7, r3
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d11b      	bne.n	8005dda <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	89db      	ldrh	r3, [r3, #14]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2101      	movs	r1, #1
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f8c2 	bl	8005f34 <unsigned_bitwise_modulo>
 8005db0:	1e03      	subs	r3, r0, #0
 8005db2:	d109      	bne.n	8005dc8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005db4:	2310      	movs	r3, #16
 8005db6:	18fb      	adds	r3, r7, r3
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	2280      	movs	r2, #128	@ 0x80
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	829a      	strh	r2, [r3, #20]
 8005dc6:	e029      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005dc8:	2310      	movs	r3, #16
 8005dca:	18fb      	adds	r3, r7, r3
 8005dcc:	881b      	ldrh	r3, [r3, #0]
 8005dce:	22ff      	movs	r2, #255	@ 0xff
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	829a      	strh	r2, [r3, #20]
 8005dd8:	e020      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005dda:	2317      	movs	r3, #23
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d11b      	bne.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	89db      	ldrh	r3, [r3, #14]
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2101      	movs	r1, #1
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 f8a1 	bl	8005f34 <unsigned_bitwise_modulo>
 8005df2:	1e03      	subs	r3, r0, #0
 8005df4:	d109      	bne.n	8005e0a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005df6:	2310      	movs	r3, #16
 8005df8:	18fb      	adds	r3, r7, r3
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2280      	movs	r2, #128	@ 0x80
 8005dfe:	0052      	lsls	r2, r2, #1
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	829a      	strh	r2, [r3, #20]
 8005e08:	e008      	b.n	8005e1c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005e0a:	2310      	movs	r3, #16
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	2202      	movs	r2, #2
 8005e12:	32ff      	adds	r2, #255	@ 0xff
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	0018      	movs	r0, r3
 8005e20:	f7ff fbf4 	bl	800560c <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	8a9b      	ldrh	r3, [r3, #20]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	2280      	movs	r2, #128	@ 0x80
 8005e2c:	0052      	lsls	r2, r2, #1
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	8adb      	ldrh	r3, [r3, #22]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	8b9b      	ldrh	r3, [r3, #28]
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	83da      	strh	r2, [r3, #30]

    return 1;
 8005e52:	2301      	movs	r3, #1
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b007      	add	sp, #28
 8005e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005e60:	46c0      	nop			@ (mov r8, r8)
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005e66:	b5b0      	push	{r4, r5, r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8005e70:	250f      	movs	r5, #15
 8005e72:	197c      	adds	r4, r7, r5
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	0011      	movs	r1, r2
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f003 fd8c 	bl	8009998 <HAL_TIM_OC_Start_IT>
 8005e80:	0003      	movs	r3, r0
 8005e82:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005e84:	197b      	adds	r3, r7, r5
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <Start_OC_TIM+0x2a>

		Error_Handler();
 8005e8c:	f7fc fa02 	bl	8002294 <Error_Handler>
	}

	return ok;
 8005e90:	230f      	movs	r3, #15
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	781b      	ldrb	r3, [r3, #0]
}
 8005e96:	0018      	movs	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	b004      	add	sp, #16
 8005e9c:	bdb0      	pop	{r4, r5, r7, pc}

08005e9e <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8005e9e:	b5b0      	push	{r4, r5, r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8005ea8:	250f      	movs	r5, #15
 8005eaa:	197c      	adds	r4, r7, r5
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	0011      	movs	r1, r2
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f003 fe94 	bl	8009be0 <HAL_TIM_OC_Stop_IT>
 8005eb8:	0003      	movs	r3, r0
 8005eba:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005ebc:	197b      	adds	r3, r7, r5
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005ec4:	f7fc f9e6 	bl	8002294 <Error_Handler>
	}

	return ok;
 8005ec8:	230f      	movs	r3, #15
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	781b      	ldrb	r3, [r3, #0]
}
 8005ece:	0018      	movs	r0, r3
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	b004      	add	sp, #16
 8005ed4:	bdb0      	pop	{r4, r5, r7, pc}

08005ed6 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	0002      	movs	r2, r0
 8005ede:	1dbb      	adds	r3, r7, #6
 8005ee0:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8005ee2:	230e      	movs	r3, #14
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	801a      	strh	r2, [r3, #0]
 8005eea:	e014      	b.n	8005f16 <isPrime+0x40>
        if (x % d == 0)
 8005eec:	1dba      	adds	r2, r7, #6
 8005eee:	230e      	movs	r3, #14
 8005ef0:	18fb      	adds	r3, r7, r3
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	881b      	ldrh	r3, [r3, #0]
 8005ef6:	0019      	movs	r1, r3
 8005ef8:	0010      	movs	r0, r2
 8005efa:	f7fa f989 	bl	8000210 <__aeabi_uidivmod>
 8005efe:	000b      	movs	r3, r1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <isPrime+0x34>
            return NO;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e010      	b.n	8005f2c <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8005f0a:	210e      	movs	r1, #14
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	881a      	ldrh	r2, [r3, #0]
 8005f10:	187b      	adds	r3, r7, r1
 8005f12:	3201      	adds	r2, #1
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	220e      	movs	r2, #14
 8005f18:	18bb      	adds	r3, r7, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	18ba      	adds	r2, r7, r2
 8005f1e:	8812      	ldrh	r2, [r2, #0]
 8005f20:	435a      	muls	r2, r3
 8005f22:	1dbb      	adds	r3, r7, #6
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	dde0      	ble.n	8005eec <isPrime+0x16>
    }
    return YES;
 8005f2a:	2301      	movs	r3, #1
}
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b004      	add	sp, #16
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	000a      	movs	r2, r1
 8005f3e:	1cfb      	adds	r3, r7, #3
 8005f40:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8005f42:	1cfb      	adds	r3, r7, #3
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	0013      	movs	r3, r2
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	001a      	movs	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4013      	ands	r3, r2
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8005f60:	b662      	cpsie	i
}
 8005f62:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8005f64:	2301      	movs	r3, #1
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	000a      	movs	r2, r1
 8005f76:	1cbb      	adds	r3, r7, #2
 8005f78:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	1cba      	adds	r2, r7, #2
 8005f80:	8812      	ldrh	r2, [r2, #0]
 8005f82:	4013      	ands	r3, r2
 8005f84:	d001      	beq.n	8005f8a <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e000      	b.n	8005f8c <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005f8a:	2300      	movs	r3, #0
    }
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	000a      	movs	r2, r1
 8005f9e:	1cbb      	adds	r3, r7, #2
 8005fa0:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	1cbb      	adds	r3, r7, #2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b002      	add	sp, #8
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	000a      	movs	r2, r1
 8005fc2:	1cbb      	adds	r3, r7, #2
 8005fc4:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	1cba      	adds	r2, r7, #2
 8005fcc:	8812      	ldrh	r2, [r2, #0]
 8005fce:	43d2      	mvns	r2, r2
 8005fd0:	401a      	ands	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	601a      	str	r2, [r3, #0]
}
 8005fd6:	46c0      	nop			@ (mov r8, r8)
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	b002      	add	sp, #8
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005fe0:	480d      	ldr	r0, [pc, #52]	@ (8006018 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005fe2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005fe4:	f7ff ff3a 	bl	8005e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fe8:	480c      	ldr	r0, [pc, #48]	@ (800601c <LoopForever+0x6>)
  ldr r1, =_edata
 8005fea:	490d      	ldr	r1, [pc, #52]	@ (8006020 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fec:	4a0d      	ldr	r2, [pc, #52]	@ (8006024 <LoopForever+0xe>)
  movs r3, #0
 8005fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005ff0:	e002      	b.n	8005ff8 <LoopCopyDataInit>

08005ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ff6:	3304      	adds	r3, #4

08005ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ffc:	d3f9      	bcc.n	8005ff2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8006028 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006000:	4c0a      	ldr	r4, [pc, #40]	@ (800602c <LoopForever+0x16>)
  movs r3, #0
 8006002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006004:	e001      	b.n	800600a <LoopFillZerobss>

08006006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006008:	3204      	adds	r2, #4

0800600a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800600a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800600c:	d3fb      	bcc.n	8006006 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800600e:	f007 f9ed 	bl	800d3ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8006012:	f7fe fad3 	bl	80045bc <main>

08006016 <LoopForever>:

LoopForever:
  b LoopForever
 8006016:	e7fe      	b.n	8006016 <LoopForever>
  ldr   r0, =_estack
 8006018:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800601c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006020:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8006024:	0800dee0 	.word	0x0800dee0
  ldr r2, =_sbss
 8006028:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 800602c:	20000ce8 	.word	0x20000ce8

08006030 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006030:	e7fe      	b.n	8006030 <ADC1_IRQHandler>
	...

08006034 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800603a:	1dfb      	adds	r3, r7, #7
 800603c:	2200      	movs	r2, #0
 800603e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006040:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <HAL_Init+0x3c>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	4b0a      	ldr	r3, [pc, #40]	@ (8006070 <HAL_Init+0x3c>)
 8006046:	2180      	movs	r1, #128	@ 0x80
 8006048:	0049      	lsls	r1, r1, #1
 800604a:	430a      	orrs	r2, r1
 800604c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800604e:	2000      	movs	r0, #0
 8006050:	f000 f810 	bl	8006074 <HAL_InitTick>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d003      	beq.n	8006060 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8006058:	1dfb      	adds	r3, r7, #7
 800605a:	2201      	movs	r2, #1
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e001      	b.n	8006064 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8006060:	f7fe fef8 	bl	8004e54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006064:	1dfb      	adds	r3, r7, #7
 8006066:	781b      	ldrb	r3, [r3, #0]
}
 8006068:	0018      	movs	r0, r3
 800606a:	46bd      	mov	sp, r7
 800606c:	b002      	add	sp, #8
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40022000 	.word	0x40022000

08006074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800607c:	230f      	movs	r3, #15
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8006084:	4b1d      	ldr	r3, [pc, #116]	@ (80060fc <HAL_InitTick+0x88>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d02b      	beq.n	80060e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800608c:	4b1c      	ldr	r3, [pc, #112]	@ (8006100 <HAL_InitTick+0x8c>)
 800608e:	681c      	ldr	r4, [r3, #0]
 8006090:	4b1a      	ldr	r3, [pc, #104]	@ (80060fc <HAL_InitTick+0x88>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	0019      	movs	r1, r3
 8006096:	23fa      	movs	r3, #250	@ 0xfa
 8006098:	0098      	lsls	r0, r3, #2
 800609a:	f7fa f833 	bl	8000104 <__udivsi3>
 800609e:	0003      	movs	r3, r0
 80060a0:	0019      	movs	r1, r3
 80060a2:	0020      	movs	r0, r4
 80060a4:	f7fa f82e 	bl	8000104 <__udivsi3>
 80060a8:	0003      	movs	r3, r0
 80060aa:	0018      	movs	r0, r3
 80060ac:	f001 fb75 	bl	800779a <HAL_SYSTICK_Config>
 80060b0:	1e03      	subs	r3, r0, #0
 80060b2:	d112      	bne.n	80060da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b03      	cmp	r3, #3
 80060b8:	d80a      	bhi.n	80060d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	2301      	movs	r3, #1
 80060be:	425b      	negs	r3, r3
 80060c0:	2200      	movs	r2, #0
 80060c2:	0018      	movs	r0, r3
 80060c4:	f001 fb34 	bl	8007730 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80060c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <HAL_InitTick+0x90>)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e00d      	b.n	80060ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80060d0:	230f      	movs	r3, #15
 80060d2:	18fb      	adds	r3, r7, r3
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e008      	b.n	80060ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80060da:	230f      	movs	r3, #15
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2201      	movs	r2, #1
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e003      	b.n	80060ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80060e4:	230f      	movs	r3, #15
 80060e6:	18fb      	adds	r3, r7, r3
 80060e8:	2201      	movs	r2, #1
 80060ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80060ec:	230f      	movs	r3, #15
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	781b      	ldrb	r3, [r3, #0]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b005      	add	sp, #20
 80060f8:	bd90      	pop	{r4, r7, pc}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	20000454 	.word	0x20000454
 8006100:	2000044c 	.word	0x2000044c
 8006104:	20000450 	.word	0x20000450

08006108 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <HAL_IncTick+0x1c>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	001a      	movs	r2, r3
 8006112:	4b05      	ldr	r3, [pc, #20]	@ (8006128 <HAL_IncTick+0x20>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	18d2      	adds	r2, r2, r3
 8006118:	4b03      	ldr	r3, [pc, #12]	@ (8006128 <HAL_IncTick+0x20>)
 800611a:	601a      	str	r2, [r3, #0]
}
 800611c:	46c0      	nop			@ (mov r8, r8)
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	46c0      	nop			@ (mov r8, r8)
 8006124:	20000454 	.word	0x20000454
 8006128:	20000ce4 	.word	0x20000ce4

0800612c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  return uwTick;
 8006130:	4b02      	ldr	r3, [pc, #8]	@ (800613c <HAL_GetTick+0x10>)
 8006132:	681b      	ldr	r3, [r3, #0]
}
 8006134:	0018      	movs	r0, r3
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	20000ce4 	.word	0x20000ce4

08006140 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a05      	ldr	r2, [pc, #20]	@ (8006164 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006150:	401a      	ands	r2, r3
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	431a      	orrs	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
}
 800615a:	46c0      	nop			@ (mov r8, r8)
 800615c:	46bd      	mov	sp, r7
 800615e:	b002      	add	sp, #8
 8006160:	bd80      	pop	{r7, pc}
 8006162:	46c0      	nop			@ (mov r8, r8)
 8006164:	fe3fffff 	.word	0xfe3fffff

08006168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	23e0      	movs	r3, #224	@ 0xe0
 8006176:	045b      	lsls	r3, r3, #17
 8006178:	4013      	ands	r3, r2
}
 800617a:	0018      	movs	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	b002      	add	sp, #8
 8006180:	bd80      	pop	{r7, pc}

08006182 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b084      	sub	sp, #16
 8006186:	af00      	add	r7, sp, #0
 8006188:	60f8      	str	r0, [r7, #12]
 800618a:	60b9      	str	r1, [r7, #8]
 800618c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	2104      	movs	r1, #4
 8006196:	400a      	ands	r2, r1
 8006198:	2107      	movs	r1, #7
 800619a:	4091      	lsls	r1, r2
 800619c:	000a      	movs	r2, r1
 800619e:	43d2      	mvns	r2, r2
 80061a0:	401a      	ands	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2104      	movs	r1, #4
 80061a6:	400b      	ands	r3, r1
 80061a8:	6879      	ldr	r1, [r7, #4]
 80061aa:	4099      	lsls	r1, r3
 80061ac:	000b      	movs	r3, r1
 80061ae:	431a      	orrs	r2, r3
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80061b4:	46c0      	nop			@ (mov r8, r8)
 80061b6:	46bd      	mov	sp, r7
 80061b8:	b004      	add	sp, #16
 80061ba:	bd80      	pop	{r7, pc}

080061bc <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	695b      	ldr	r3, [r3, #20]
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	2104      	movs	r1, #4
 80061ce:	400a      	ands	r2, r1
 80061d0:	2107      	movs	r1, #7
 80061d2:	4091      	lsls	r1, r2
 80061d4:	000a      	movs	r2, r1
 80061d6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2104      	movs	r1, #4
 80061dc:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80061de:	40da      	lsrs	r2, r3
 80061e0:	0013      	movs	r3, r2
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b002      	add	sp, #8
 80061e8:	bd80      	pop	{r7, pc}

080061ea <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b082      	sub	sp, #8
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	23c0      	movs	r3, #192	@ 0xc0
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	4013      	ands	r3, r2
 80061fc:	d101      	bne.n	8006202 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80061fe:	2301      	movs	r3, #1
 8006200:	e000      	b.n	8006204 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006202:	2300      	movs	r3, #0
}
 8006204:	0018      	movs	r0, r3
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}

0800620c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b084      	sub	sp, #16
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	211f      	movs	r1, #31
 8006220:	400a      	ands	r2, r1
 8006222:	210f      	movs	r1, #15
 8006224:	4091      	lsls	r1, r2
 8006226:	000a      	movs	r2, r1
 8006228:	43d2      	mvns	r2, r2
 800622a:	401a      	ands	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	0e9b      	lsrs	r3, r3, #26
 8006230:	210f      	movs	r1, #15
 8006232:	4019      	ands	r1, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	201f      	movs	r0, #31
 8006238:	4003      	ands	r3, r0
 800623a:	4099      	lsls	r1, r3
 800623c:	000b      	movs	r3, r1
 800623e:	431a      	orrs	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006244:	46c0      	nop			@ (mov r8, r8)
 8006246:	46bd      	mov	sp, r7
 8006248:	b004      	add	sp, #16
 800624a:	bd80      	pop	{r7, pc}

0800624c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	035b      	lsls	r3, r3, #13
 800625e:	0b5b      	lsrs	r3, r3, #13
 8006260:	431a      	orrs	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	46bd      	mov	sp, r7
 800626a:	b002      	add	sp, #8
 800626c:	bd80      	pop	{r7, pc}

0800626e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	683a      	ldr	r2, [r7, #0]
 800627e:	0352      	lsls	r2, r2, #13
 8006280:	0b52      	lsrs	r2, r2, #13
 8006282:	43d2      	mvns	r2, r2
 8006284:	401a      	ands	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b002      	add	sp, #8
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	695b      	ldr	r3, [r3, #20]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	0212      	lsls	r2, r2, #8
 80062a8:	43d2      	mvns	r2, r2
 80062aa:	401a      	ands	r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	400b      	ands	r3, r1
 80062b4:	4904      	ldr	r1, [pc, #16]	@ (80062c8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80062b6:	400b      	ands	r3, r1
 80062b8:	431a      	orrs	r2, r3
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80062be:	46c0      	nop			@ (mov r8, r8)
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b004      	add	sp, #16
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	07ffff00 	.word	0x07ffff00

080062cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	4a05      	ldr	r2, [pc, #20]	@ (80062f0 <LL_ADC_EnableInternalRegulator+0x24>)
 80062da:	4013      	ands	r3, r2
 80062dc:	2280      	movs	r2, #128	@ 0x80
 80062de:	0552      	lsls	r2, r2, #21
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80062e6:	46c0      	nop			@ (mov r8, r8)
 80062e8:	46bd      	mov	sp, r7
 80062ea:	b002      	add	sp, #8
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	46c0      	nop			@ (mov r8, r8)
 80062f0:	6fffffe8 	.word	0x6fffffe8

080062f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	055b      	lsls	r3, r3, #21
 8006304:	401a      	ands	r2, r3
 8006306:	2380      	movs	r3, #128	@ 0x80
 8006308:	055b      	lsls	r3, r3, #21
 800630a:	429a      	cmp	r2, r3
 800630c:	d101      	bne.n	8006312 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800630e:	2301      	movs	r3, #1
 8006310:	e000      	b.n	8006314 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006312:	2300      	movs	r3, #0
}
 8006314:	0018      	movs	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}

0800631c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a04      	ldr	r2, [pc, #16]	@ (800633c <LL_ADC_Enable+0x20>)
 800632a:	4013      	ands	r3, r2
 800632c:	2201      	movs	r2, #1
 800632e:	431a      	orrs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006334:	46c0      	nop			@ (mov r8, r8)
 8006336:	46bd      	mov	sp, r7
 8006338:	b002      	add	sp, #8
 800633a:	bd80      	pop	{r7, pc}
 800633c:	7fffffe8 	.word	0x7fffffe8

08006340 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	4a04      	ldr	r2, [pc, #16]	@ (8006360 <LL_ADC_Disable+0x20>)
 800634e:	4013      	ands	r3, r2
 8006350:	2202      	movs	r2, #2
 8006352:	431a      	orrs	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006358:	46c0      	nop			@ (mov r8, r8)
 800635a:	46bd      	mov	sp, r7
 800635c:	b002      	add	sp, #8
 800635e:	bd80      	pop	{r7, pc}
 8006360:	7fffffe8 	.word	0x7fffffe8

08006364 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	2201      	movs	r2, #1
 8006372:	4013      	ands	r3, r2
 8006374:	2b01      	cmp	r3, #1
 8006376:	d101      	bne.n	800637c <LL_ADC_IsEnabled+0x18>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <LL_ADC_IsEnabled+0x1a>
 800637c:	2300      	movs	r3, #0
}
 800637e:	0018      	movs	r0, r3
 8006380:	46bd      	mov	sp, r7
 8006382:	b002      	add	sp, #8
 8006384:	bd80      	pop	{r7, pc}

08006386 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	2202      	movs	r2, #2
 8006394:	4013      	ands	r3, r2
 8006396:	2b02      	cmp	r3, #2
 8006398:	d101      	bne.n	800639e <LL_ADC_IsDisableOngoing+0x18>
 800639a:	2301      	movs	r3, #1
 800639c:	e000      	b.n	80063a0 <LL_ADC_IsDisableOngoing+0x1a>
 800639e:	2300      	movs	r3, #0
}
 80063a0:	0018      	movs	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	b002      	add	sp, #8
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	4a04      	ldr	r2, [pc, #16]	@ (80063c8 <LL_ADC_REG_StartConversion+0x20>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	2204      	movs	r2, #4
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80063c0:	46c0      	nop			@ (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	7fffffe8 	.word	0x7fffffe8

080063cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	4a04      	ldr	r2, [pc, #16]	@ (80063ec <LL_ADC_REG_StopConversion+0x20>)
 80063da:	4013      	ands	r3, r2
 80063dc:	2210      	movs	r2, #16
 80063de:	431a      	orrs	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80063e4:	46c0      	nop			@ (mov r8, r8)
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b002      	add	sp, #8
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	7fffffe8 	.word	0x7fffffe8

080063f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2204      	movs	r2, #4
 80063fe:	4013      	ands	r3, r2
 8006400:	2b04      	cmp	r3, #4
 8006402:	d101      	bne.n	8006408 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006404:	2301      	movs	r3, #1
 8006406:	e000      	b.n	800640a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006408:	2300      	movs	r3, #0
}
 800640a:	0018      	movs	r0, r3
 800640c:	46bd      	mov	sp, r7
 800640e:	b002      	add	sp, #8
 8006410:	bd80      	pop	{r7, pc}
	...

08006414 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800641c:	231f      	movs	r3, #31
 800641e:	18fb      	adds	r3, r7, r3
 8006420:	2200      	movs	r2, #0
 8006422:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8006424:	2300      	movs	r3, #0
 8006426:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e19f      	b.n	800677a <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643e:	2b00      	cmp	r3, #0
 8006440:	d12a      	bne.n	8006498 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4acf      	ldr	r2, [pc, #828]	@ (8006784 <HAL_ADC_Init+0x370>)
 8006446:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4acf      	ldr	r2, [pc, #828]	@ (8006788 <HAL_ADC_Init+0x374>)
 800644c:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4ace      	ldr	r2, [pc, #824]	@ (800678c <HAL_ADC_Init+0x378>)
 8006452:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4ace      	ldr	r2, [pc, #824]	@ (8006790 <HAL_ADC_Init+0x37c>)
 8006458:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4acd      	ldr	r2, [pc, #820]	@ (8006794 <HAL_ADC_Init+0x380>)
 800645e:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4acd      	ldr	r2, [pc, #820]	@ (8006798 <HAL_ADC_Init+0x384>)
 8006464:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4acc      	ldr	r2, [pc, #816]	@ (800679c <HAL_ADC_Init+0x388>)
 800646a:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2280      	movs	r2, #128	@ 0x80
 8006470:	589b      	ldr	r3, [r3, r2]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d103      	bne.n	800647e <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2180      	movs	r1, #128	@ 0x80
 800647a:	4ac9      	ldr	r2, [pc, #804]	@ (80067a0 <HAL_ADC_Init+0x38c>)
 800647c:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2280      	movs	r2, #128	@ 0x80
 8006482:	589b      	ldr	r3, [r3, r2]
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	0010      	movs	r0, r2
 8006488:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2254      	movs	r2, #84	@ 0x54
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	0018      	movs	r0, r3
 800649e:	f7ff ff29 	bl	80062f4 <LL_ADC_IsInternalRegulatorEnabled>
 80064a2:	1e03      	subs	r3, r0, #0
 80064a4:	d115      	bne.n	80064d2 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	0018      	movs	r0, r3
 80064ac:	f7ff ff0e 	bl	80062cc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80064b0:	4bbc      	ldr	r3, [pc, #752]	@ (80067a4 <HAL_ADC_Init+0x390>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	49bc      	ldr	r1, [pc, #752]	@ (80067a8 <HAL_ADC_Init+0x394>)
 80064b6:	0018      	movs	r0, r3
 80064b8:	f7f9 fe24 	bl	8000104 <__udivsi3>
 80064bc:	0003      	movs	r3, r0
 80064be:	3301      	adds	r3, #1
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064c4:	e002      	b.n	80064cc <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1f9      	bne.n	80064c6 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	0018      	movs	r0, r3
 80064d8:	f7ff ff0c 	bl	80062f4 <LL_ADC_IsInternalRegulatorEnabled>
 80064dc:	1e03      	subs	r3, r0, #0
 80064de:	d10f      	bne.n	8006500 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e4:	2210      	movs	r2, #16
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064f0:	2201      	movs	r2, #1
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80064f8:	231f      	movs	r3, #31
 80064fa:	18fb      	adds	r3, r7, r3
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	0018      	movs	r0, r3
 8006506:	f7ff ff73 	bl	80063f0 <LL_ADC_REG_IsConversionOngoing>
 800650a:	0003      	movs	r3, r0
 800650c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006512:	2210      	movs	r2, #16
 8006514:	4013      	ands	r3, r2
 8006516:	d000      	beq.n	800651a <HAL_ADC_Init+0x106>
 8006518:	e122      	b.n	8006760 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d000      	beq.n	8006522 <HAL_ADC_Init+0x10e>
 8006520:	e11e      	b.n	8006760 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006526:	4aa1      	ldr	r2, [pc, #644]	@ (80067ac <HAL_ADC_Init+0x398>)
 8006528:	4013      	ands	r3, r2
 800652a:	2202      	movs	r2, #2
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	0018      	movs	r0, r3
 8006538:	f7ff ff14 	bl	8006364 <LL_ADC_IsEnabled>
 800653c:	1e03      	subs	r3, r0, #0
 800653e:	d000      	beq.n	8006542 <HAL_ADC_Init+0x12e>
 8006540:	e0ad      	b.n	800669e <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7e1b      	ldrb	r3, [r3, #24]
 800654a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800654c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7e5b      	ldrb	r3, [r3, #25]
 8006552:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8006554:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	7e9b      	ldrb	r3, [r3, #26]
 800655a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800655c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	2b00      	cmp	r3, #0
 8006564:	d002      	beq.n	800656c <HAL_ADC_Init+0x158>
 8006566:	2380      	movs	r3, #128	@ 0x80
 8006568:	015b      	lsls	r3, r3, #5
 800656a:	e000      	b.n	800656e <HAL_ADC_Init+0x15a>
 800656c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800656e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8006574:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	da04      	bge.n	8006588 <HAL_ADC_Init+0x174>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	085b      	lsrs	r3, r3, #1
 8006586:	e001      	b.n	800658c <HAL_ADC_Init+0x178>
 8006588:	2380      	movs	r3, #128	@ 0x80
 800658a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800658c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	212c      	movs	r1, #44	@ 0x2c
 8006592:	5c5b      	ldrb	r3, [r3, r1]
 8006594:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8006596:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	4313      	orrs	r3, r2
 800659c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2220      	movs	r2, #32
 80065a2:	5c9b      	ldrb	r3, [r3, r2]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d115      	bne.n	80065d4 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	7e9b      	ldrb	r3, [r3, #26]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	2280      	movs	r2, #128	@ 0x80
 80065b4:	0252      	lsls	r2, r2, #9
 80065b6:	4313      	orrs	r3, r2
 80065b8:	61bb      	str	r3, [r7, #24]
 80065ba:	e00b      	b.n	80065d4 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c0:	2220      	movs	r2, #32
 80065c2:	431a      	orrs	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065cc:	2201      	movs	r2, #1
 80065ce:	431a      	orrs	r2, r3
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065e0:	23e0      	movs	r3, #224	@ 0xe0
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80065ea:	4313      	orrs	r3, r2
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4a6d      	ldr	r2, [pc, #436]	@ (80067b0 <HAL_ADC_Init+0x39c>)
 80065fa:	4013      	ands	r3, r2
 80065fc:	0019      	movs	r1, r3
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69ba      	ldr	r2, [r7, #24]
 8006604:	430a      	orrs	r2, r1
 8006606:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	0f9b      	lsrs	r3, r3, #30
 800660e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006614:	4313      	orrs	r3, r2
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	223c      	movs	r2, #60	@ 0x3c
 8006620:	5c9b      	ldrb	r3, [r3, r2]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d111      	bne.n	800664a <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	0f9b      	lsrs	r3, r3, #30
 800662c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8006632:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8006638:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800663e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	2201      	movs	r2, #1
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	4a58      	ldr	r2, [pc, #352]	@ (80067b4 <HAL_ADC_Init+0x3a0>)
 8006652:	4013      	ands	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	430a      	orrs	r2, r1
 800665e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	23c0      	movs	r3, #192	@ 0xc0
 8006666:	061b      	lsls	r3, r3, #24
 8006668:	429a      	cmp	r2, r3
 800666a:	d018      	beq.n	800669e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8006670:	2380      	movs	r3, #128	@ 0x80
 8006672:	05db      	lsls	r3, r3, #23
 8006674:	429a      	cmp	r2, r3
 8006676:	d012      	beq.n	800669e <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800667c:	2380      	movs	r3, #128	@ 0x80
 800667e:	061b      	lsls	r3, r3, #24
 8006680:	429a      	cmp	r2, r3
 8006682:	d00c      	beq.n	800669e <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8006684:	4b4c      	ldr	r3, [pc, #304]	@ (80067b8 <HAL_ADC_Init+0x3a4>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a4c      	ldr	r2, [pc, #304]	@ (80067bc <HAL_ADC_Init+0x3a8>)
 800668a:	4013      	ands	r3, r2
 800668c:	0019      	movs	r1, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	23f0      	movs	r3, #240	@ 0xf0
 8006694:	039b      	lsls	r3, r3, #14
 8006696:	401a      	ands	r2, r3
 8006698:	4b47      	ldr	r3, [pc, #284]	@ (80067b8 <HAL_ADC_Init+0x3a4>)
 800669a:	430a      	orrs	r2, r1
 800669c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6818      	ldr	r0, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066a6:	001a      	movs	r2, r3
 80066a8:	2100      	movs	r1, #0
 80066aa:	f7ff fd6a 	bl	8006182 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b6:	4942      	ldr	r1, [pc, #264]	@ (80067c0 <HAL_ADC_Init+0x3ac>)
 80066b8:	001a      	movs	r2, r3
 80066ba:	f7ff fd62 	bl	8006182 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d109      	bne.n	80066da <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2110      	movs	r1, #16
 80066d2:	4249      	negs	r1, r1
 80066d4:	430a      	orrs	r2, r1
 80066d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80066d8:	e018      	b.n	800670c <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	691a      	ldr	r2, [r3, #16]
 80066de:	2380      	movs	r3, #128	@ 0x80
 80066e0:	039b      	lsls	r3, r3, #14
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d112      	bne.n	800670c <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	221c      	movs	r2, #28
 80066f6:	4013      	ands	r3, r2
 80066f8:	2210      	movs	r2, #16
 80066fa:	4252      	negs	r2, r2
 80066fc:	409a      	lsls	r2, r3
 80066fe:	0011      	movs	r1, r2
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2100      	movs	r1, #0
 8006712:	0018      	movs	r0, r3
 8006714:	f7ff fd52 	bl	80061bc <LL_ADC_GetSamplingTimeCommonChannels>
 8006718:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800671e:	429a      	cmp	r2, r3
 8006720:	d10b      	bne.n	800673a <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800672c:	2203      	movs	r2, #3
 800672e:	4393      	bics	r3, r2
 8006730:	2201      	movs	r2, #1
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006738:	e01c      	b.n	8006774 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800673e:	2212      	movs	r2, #18
 8006740:	4393      	bics	r3, r2
 8006742:	2210      	movs	r2, #16
 8006744:	431a      	orrs	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800674e:	2201      	movs	r2, #1
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8006756:	231f      	movs	r3, #31
 8006758:	18fb      	adds	r3, r7, r3
 800675a:	2201      	movs	r2, #1
 800675c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800675e:	e009      	b.n	8006774 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006764:	2210      	movs	r2, #16
 8006766:	431a      	orrs	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800676c:	231f      	movs	r3, #31
 800676e:	18fb      	adds	r3, r7, r3
 8006770:	2201      	movs	r2, #1
 8006772:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006774:	231f      	movs	r3, #31
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	781b      	ldrb	r3, [r3, #0]
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b008      	add	sp, #32
 8006780:	bd80      	pop	{r7, pc}
 8006782:	46c0      	nop			@ (mov r8, r8)
 8006784:	08006add 	.word	0x08006add
 8006788:	08006aed 	.word	0x08006aed
 800678c:	08006afd 	.word	0x08006afd
 8006790:	08006b0d 	.word	0x08006b0d
 8006794:	08007565 	.word	0x08007565
 8006798:	08007575 	.word	0x08007575
 800679c:	08007585 	.word	0x08007585
 80067a0:	08004e9d 	.word	0x08004e9d
 80067a4:	2000044c 	.word	0x2000044c
 80067a8:	00030d40 	.word	0x00030d40
 80067ac:	fffffefd 	.word	0xfffffefd
 80067b0:	ffde0201 	.word	0xffde0201
 80067b4:	1ffffc02 	.word	0x1ffffc02
 80067b8:	40012708 	.word	0x40012708
 80067bc:	ffc3ffff 	.word	0xffc3ffff
 80067c0:	07ffff04 	.word	0x07ffff04

080067c4 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	607a      	str	r2, [r7, #4]
 80067ce:	230b      	movs	r3, #11
 80067d0:	18fb      	adds	r3, r7, r3
 80067d2:	1c0a      	adds	r2, r1, #0
 80067d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067d6:	2317      	movs	r3, #23
 80067d8:	18fb      	adds	r3, r7, r3
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067e8:	2210      	movs	r2, #16
 80067ea:	431a      	orrs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e06d      	b.n	80068d0 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	2201      	movs	r2, #1
 80067fa:	4013      	ands	r3, r2
 80067fc:	d03a      	beq.n	8006874 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 80067fe:	230b      	movs	r3, #11
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	2b0a      	cmp	r3, #10
 8006806:	d82a      	bhi.n	800685e <HAL_ADC_RegisterCallback+0x9a>
 8006808:	009a      	lsls	r2, r3, #2
 800680a:	4b33      	ldr	r3, [pc, #204]	@ (80068d8 <HAL_ADC_RegisterCallback+0x114>)
 800680c:	18d3      	adds	r3, r2, r3
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006818:	e057      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006820:	e053      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006828:	e04f      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006830:	e04b      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006838:	e047      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006840:	e043      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8006848:	e03f      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2180      	movs	r1, #128	@ 0x80
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	505a      	str	r2, [r3, r1]
        break;
 8006852:	e03a      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2184      	movs	r1, #132	@ 0x84
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	505a      	str	r2, [r3, r1]
        break;
 800685c:	e035      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006862:	2210      	movs	r2, #16
 8006864:	431a      	orrs	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 800686a:	2317      	movs	r3, #23
 800686c:	18fb      	adds	r3, r7, r3
 800686e:	2201      	movs	r2, #1
 8006870:	701a      	strb	r2, [r3, #0]
        break;
 8006872:	e02a      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006878:	2b00      	cmp	r3, #0
 800687a:	d11c      	bne.n	80068b6 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 800687c:	230b      	movs	r3, #11
 800687e:	18fb      	adds	r3, r7, r3
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b09      	cmp	r3, #9
 8006884:	d002      	beq.n	800688c <HAL_ADC_RegisterCallback+0xc8>
 8006886:	2b0a      	cmp	r3, #10
 8006888:	d005      	beq.n	8006896 <HAL_ADC_RegisterCallback+0xd2>
 800688a:	e009      	b.n	80068a0 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2180      	movs	r1, #128	@ 0x80
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	505a      	str	r2, [r3, r1]
        break;
 8006894:	e019      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2184      	movs	r1, #132	@ 0x84
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	505a      	str	r2, [r3, r1]
        break;
 800689e:	e014      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a4:	2210      	movs	r2, #16
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80068ac:	2317      	movs	r3, #23
 80068ae:	18fb      	adds	r3, r7, r3
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
        break;
 80068b4:	e009      	b.n	80068ca <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ba:	2210      	movs	r2, #16
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 80068c2:	2317      	movs	r3, #23
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	2201      	movs	r2, #1
 80068c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80068ca:	2317      	movs	r3, #23
 80068cc:	18fb      	adds	r3, r7, r3
 80068ce:	781b      	ldrb	r3, [r3, #0]
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b006      	add	sp, #24
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	0800dce4 	.word	0x0800dce4

080068dc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80068dc:	b5b0      	push	{r4, r5, r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	0018      	movs	r0, r3
 80068ee:	f7ff fd7f 	bl	80063f0 <LL_ADC_REG_IsConversionOngoing>
 80068f2:	1e03      	subs	r3, r0, #0
 80068f4:	d16c      	bne.n	80069d0 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2254      	movs	r2, #84	@ 0x54
 80068fa:	5c9b      	ldrb	r3, [r3, r2]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d101      	bne.n	8006904 <HAL_ADC_Start_DMA+0x28>
 8006900:	2302      	movs	r3, #2
 8006902:	e06c      	b.n	80069de <HAL_ADC_Start_DMA+0x102>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2254      	movs	r2, #84	@ 0x54
 8006908:	2101      	movs	r1, #1
 800690a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	4013      	ands	r3, r2
 8006916:	d113      	bne.n	8006940 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	0018      	movs	r0, r3
 800691e:	f7ff fd21 	bl	8006364 <LL_ADC_IsEnabled>
 8006922:	1e03      	subs	r3, r0, #0
 8006924:	d004      	beq.n	8006930 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	0018      	movs	r0, r3
 800692c:	f7ff fd08 	bl	8006340 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2101      	movs	r1, #1
 800693c:	430a      	orrs	r2, r1
 800693e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006940:	2517      	movs	r5, #23
 8006942:	197c      	adds	r4, r7, r5
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	0018      	movs	r0, r3
 8006948:	f000 fb02 	bl	8006f50 <ADC_Enable>
 800694c:	0003      	movs	r3, r0
 800694e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006950:	002c      	movs	r4, r5
 8006952:	193b      	adds	r3, r7, r4
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d13e      	bne.n	80069d8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800695e:	4a22      	ldr	r2, [pc, #136]	@ (80069e8 <HAL_ADC_Start_DMA+0x10c>)
 8006960:	4013      	ands	r3, r2
 8006962:	2280      	movs	r2, #128	@ 0x80
 8006964:	0052      	lsls	r2, r2, #1
 8006966:	431a      	orrs	r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006976:	4a1d      	ldr	r2, [pc, #116]	@ (80069ec <HAL_ADC_Start_DMA+0x110>)
 8006978:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800697e:	4a1c      	ldr	r2, [pc, #112]	@ (80069f0 <HAL_ADC_Start_DMA+0x114>)
 8006980:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006986:	4a1b      	ldr	r2, [pc, #108]	@ (80069f4 <HAL_ADC_Start_DMA+0x118>)
 8006988:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	221c      	movs	r2, #28
 8006990:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2254      	movs	r2, #84	@ 0x54
 8006996:	2100      	movs	r1, #0
 8006998:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2110      	movs	r1, #16
 80069a6:	430a      	orrs	r2, r1
 80069a8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	3340      	adds	r3, #64	@ 0x40
 80069b4:	0019      	movs	r1, r3
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	193c      	adds	r4, r7, r4
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f000 ff84 	bl	80078c8 <HAL_DMA_Start_IT>
 80069c0:	0003      	movs	r3, r0
 80069c2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	0018      	movs	r0, r3
 80069ca:	f7ff fced 	bl	80063a8 <LL_ADC_REG_StartConversion>
 80069ce:	e003      	b.n	80069d8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80069d0:	2317      	movs	r3, #23
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2202      	movs	r2, #2
 80069d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80069d8:	2317      	movs	r3, #23
 80069da:	18fb      	adds	r3, r7, r3
 80069dc:	781b      	ldrb	r3, [r3, #0]
}
 80069de:	0018      	movs	r0, r3
 80069e0:	46bd      	mov	sp, r7
 80069e2:	b006      	add	sp, #24
 80069e4:	bdb0      	pop	{r4, r5, r7, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	fffff0fe 	.word	0xfffff0fe
 80069ec:	08007119 	.word	0x08007119
 80069f0:	080071e5 	.word	0x080071e5
 80069f4:	08007205 	.word	0x08007205

080069f8 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80069f8:	b5b0      	push	{r4, r5, r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2254      	movs	r2, #84	@ 0x54
 8006a04:	5c9b      	ldrb	r3, [r3, r2]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_ADC_Stop_DMA+0x16>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e05f      	b.n	8006ace <HAL_ADC_Stop_DMA+0xd6>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2254      	movs	r2, #84	@ 0x54
 8006a12:	2101      	movs	r1, #1
 8006a14:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006a16:	250f      	movs	r5, #15
 8006a18:	197c      	adds	r4, r7, r5
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	0018      	movs	r0, r3
 8006a1e:	f000 fa55 	bl	8006ecc <ADC_ConversionStop>
 8006a22:	0003      	movs	r3, r0
 8006a24:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006a26:	0029      	movs	r1, r5
 8006a28:	187b      	adds	r3, r7, r1
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d147      	bne.n	8006ac0 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a34:	2225      	movs	r2, #37	@ 0x25
 8006a36:	5c9b      	ldrb	r3, [r3, r2]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d112      	bne.n	8006a64 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a42:	000d      	movs	r5, r1
 8006a44:	187c      	adds	r4, r7, r1
 8006a46:	0018      	movs	r0, r3
 8006a48:	f000 ffc4 	bl	80079d4 <HAL_DMA_Abort>
 8006a4c:	0003      	movs	r3, r0
 8006a4e:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8006a50:	197b      	adds	r3, r7, r5
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d005      	beq.n	8006a64 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a5c:	2240      	movs	r2, #64	@ 0x40
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	685a      	ldr	r2, [r3, #4]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2110      	movs	r1, #16
 8006a70:	438a      	bics	r2, r1
 8006a72:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8006a74:	220f      	movs	r2, #15
 8006a76:	18bb      	adds	r3, r7, r2
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d107      	bne.n	8006a8e <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8006a7e:	18bc      	adds	r4, r7, r2
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	0018      	movs	r0, r3
 8006a84:	f000 faea 	bl	800705c <ADC_Disable>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	7023      	strb	r3, [r4, #0]
 8006a8c:	e003      	b.n	8006a96 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 fae3 	bl	800705c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006a96:	230f      	movs	r3, #15
 8006a98:	18fb      	adds	r3, r7, r3
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d107      	bne.n	8006ab0 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <HAL_ADC_Stop_DMA+0xe0>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2101      	movs	r1, #1
 8006abc:	438a      	bics	r2, r1
 8006abe:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2254      	movs	r2, #84	@ 0x54
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006ac8:	230f      	movs	r3, #15
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	781b      	ldrb	r3, [r3, #0]
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b004      	add	sp, #16
 8006ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ad6:	46c0      	nop			@ (mov r8, r8)
 8006ad8:	fffffefe 	.word	0xfffffefe

08006adc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006ae4:	46c0      	nop			@ (mov r8, r8)
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	b002      	add	sp, #8
 8006aea:	bd80      	pop	{r7, pc}

08006aec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b082      	sub	sp, #8
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006af4:	46c0      	nop			@ (mov r8, r8)
 8006af6:	46bd      	mov	sp, r7
 8006af8:	b002      	add	sp, #8
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006b04:	46c0      	nop			@ (mov r8, r8)
 8006b06:	46bd      	mov	sp, r7
 8006b08:	b002      	add	sp, #8
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006b14:	46c0      	nop			@ (mov r8, r8)
 8006b16:	46bd      	mov	sp, r7
 8006b18:	b002      	add	sp, #8
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b26:	2317      	movs	r3, #23
 8006b28:	18fb      	adds	r3, r7, r3
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2254      	movs	r2, #84	@ 0x54
 8006b36:	5c9b      	ldrb	r3, [r3, r2]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_ADC_ConfigChannel+0x24>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e1c0      	b.n	8006ec2 <HAL_ADC_ConfigChannel+0x3a6>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2254      	movs	r2, #84	@ 0x54
 8006b44:	2101      	movs	r1, #1
 8006b46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f7ff fc4f 	bl	80063f0 <LL_ADC_REG_IsConversionOngoing>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d000      	beq.n	8006b58 <HAL_ADC_ConfigChannel+0x3c>
 8006b56:	e1a3      	b.n	8006ea0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d100      	bne.n	8006b62 <HAL_ADC_ConfigChannel+0x46>
 8006b60:	e143      	b.n	8006dea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	2380      	movs	r3, #128	@ 0x80
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d004      	beq.n	8006b78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006b72:	4ac1      	ldr	r2, [pc, #772]	@ (8006e78 <HAL_ADC_ConfigChannel+0x35c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d108      	bne.n	8006b8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	0019      	movs	r1, r3
 8006b82:	0010      	movs	r0, r2
 8006b84:	f7ff fb62 	bl	800624c <LL_ADC_REG_SetSequencerChAdd>
 8006b88:	e0c9      	b.n	8006d1e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	211f      	movs	r1, #31
 8006b94:	400b      	ands	r3, r1
 8006b96:	210f      	movs	r1, #15
 8006b98:	4099      	lsls	r1, r3
 8006b9a:	000b      	movs	r3, r1
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	0019      	movs	r1, r3
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	035b      	lsls	r3, r3, #13
 8006ba8:	0b5b      	lsrs	r3, r3, #13
 8006baa:	d105      	bne.n	8006bb8 <HAL_ADC_ConfigChannel+0x9c>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	0e9b      	lsrs	r3, r3, #26
 8006bb2:	221f      	movs	r2, #31
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	e098      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	d000      	beq.n	8006bc4 <HAL_ADC_ConfigChannel+0xa8>
 8006bc2:	e091      	b.n	8006ce8 <HAL_ADC_ConfigChannel+0x1cc>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d000      	beq.n	8006bd0 <HAL_ADC_ConfigChannel+0xb4>
 8006bce:	e089      	b.n	8006ce4 <HAL_ADC_ConfigChannel+0x1c8>
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2204      	movs	r2, #4
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	d000      	beq.n	8006bdc <HAL_ADC_ConfigChannel+0xc0>
 8006bda:	e081      	b.n	8006ce0 <HAL_ADC_ConfigChannel+0x1c4>
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	4013      	ands	r3, r2
 8006be4:	d000      	beq.n	8006be8 <HAL_ADC_ConfigChannel+0xcc>
 8006be6:	e079      	b.n	8006cdc <HAL_ADC_ConfigChannel+0x1c0>
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2210      	movs	r2, #16
 8006bee:	4013      	ands	r3, r2
 8006bf0:	d000      	beq.n	8006bf4 <HAL_ADC_ConfigChannel+0xd8>
 8006bf2:	e071      	b.n	8006cd8 <HAL_ADC_ConfigChannel+0x1bc>
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d000      	beq.n	8006c00 <HAL_ADC_ConfigChannel+0xe4>
 8006bfe:	e069      	b.n	8006cd4 <HAL_ADC_ConfigChannel+0x1b8>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2240      	movs	r2, #64	@ 0x40
 8006c06:	4013      	ands	r3, r2
 8006c08:	d000      	beq.n	8006c0c <HAL_ADC_ConfigChannel+0xf0>
 8006c0a:	e061      	b.n	8006cd0 <HAL_ADC_ConfigChannel+0x1b4>
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2280      	movs	r2, #128	@ 0x80
 8006c12:	4013      	ands	r3, r2
 8006c14:	d000      	beq.n	8006c18 <HAL_ADC_ConfigChannel+0xfc>
 8006c16:	e059      	b.n	8006ccc <HAL_ADC_ConfigChannel+0x1b0>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	2380      	movs	r3, #128	@ 0x80
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4013      	ands	r3, r2
 8006c22:	d151      	bne.n	8006cc8 <HAL_ADC_ConfigChannel+0x1ac>
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	2380      	movs	r3, #128	@ 0x80
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d149      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x1a8>
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	2380      	movs	r3, #128	@ 0x80
 8006c36:	00db      	lsls	r3, r3, #3
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d141      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x1a4>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	2380      	movs	r3, #128	@ 0x80
 8006c42:	011b      	lsls	r3, r3, #4
 8006c44:	4013      	ands	r3, r2
 8006c46:	d139      	bne.n	8006cbc <HAL_ADC_ConfigChannel+0x1a0>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	2380      	movs	r3, #128	@ 0x80
 8006c4e:	015b      	lsls	r3, r3, #5
 8006c50:	4013      	ands	r3, r2
 8006c52:	d131      	bne.n	8006cb8 <HAL_ADC_ConfigChannel+0x19c>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	2380      	movs	r3, #128	@ 0x80
 8006c5a:	019b      	lsls	r3, r3, #6
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	d129      	bne.n	8006cb4 <HAL_ADC_ConfigChannel+0x198>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	2380      	movs	r3, #128	@ 0x80
 8006c66:	01db      	lsls	r3, r3, #7
 8006c68:	4013      	ands	r3, r2
 8006c6a:	d121      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x194>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	021b      	lsls	r3, r3, #8
 8006c74:	4013      	ands	r3, r2
 8006c76:	d119      	bne.n	8006cac <HAL_ADC_ConfigChannel+0x190>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	2380      	movs	r3, #128	@ 0x80
 8006c7e:	025b      	lsls	r3, r3, #9
 8006c80:	4013      	ands	r3, r2
 8006c82:	d111      	bne.n	8006ca8 <HAL_ADC_ConfigChannel+0x18c>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	029b      	lsls	r3, r3, #10
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d109      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0x188>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	2380      	movs	r3, #128	@ 0x80
 8006c96:	02db      	lsls	r3, r3, #11
 8006c98:	4013      	ands	r3, r2
 8006c9a:	d001      	beq.n	8006ca0 <HAL_ADC_ConfigChannel+0x184>
 8006c9c:	2312      	movs	r3, #18
 8006c9e:	e024      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	e022      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ca4:	2311      	movs	r3, #17
 8006ca6:	e020      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	e01e      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cac:	230f      	movs	r3, #15
 8006cae:	e01c      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cb0:	230e      	movs	r3, #14
 8006cb2:	e01a      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cb4:	230d      	movs	r3, #13
 8006cb6:	e018      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	e016      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cbc:	230b      	movs	r3, #11
 8006cbe:	e014      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cc0:	230a      	movs	r3, #10
 8006cc2:	e012      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cc4:	2309      	movs	r3, #9
 8006cc6:	e010      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cc8:	2308      	movs	r3, #8
 8006cca:	e00e      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ccc:	2307      	movs	r3, #7
 8006cce:	e00c      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cd0:	2306      	movs	r3, #6
 8006cd2:	e00a      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cd4:	2305      	movs	r3, #5
 8006cd6:	e008      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	e006      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e004      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e002      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e000      	b.n	8006cea <HAL_ADC_ConfigChannel+0x1ce>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	6852      	ldr	r2, [r2, #4]
 8006cee:	201f      	movs	r0, #31
 8006cf0:	4002      	ands	r2, r0
 8006cf2:	4093      	lsls	r3, r2
 8006cf4:	000a      	movs	r2, r1
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	089b      	lsrs	r3, r3, #2
 8006d02:	1c5a      	adds	r2, r3, #1
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d808      	bhi.n	8006d1e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6818      	ldr	r0, [r3, #0]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	6859      	ldr	r1, [r3, #4]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	001a      	movs	r2, r3
 8006d1a:	f7ff fa77 	bl	800620c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6819      	ldr	r1, [r3, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	001a      	movs	r2, r3
 8006d2c:	f7ff fab2 	bl	8006294 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	db00      	blt.n	8006d3a <HAL_ADC_ConfigChannel+0x21e>
 8006d38:	e0bc      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d3a:	4b50      	ldr	r3, [pc, #320]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7ff fa13 	bl	8006168 <LL_ADC_GetCommonPathInternalCh>
 8006d42:	0003      	movs	r3, r0
 8006d44:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8006e80 <HAL_ADC_ConfigChannel+0x364>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d122      	bne.n	8006d96 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	2380      	movs	r3, #128	@ 0x80
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d58:	d11d      	bne.n	8006d96 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	2280      	movs	r2, #128	@ 0x80
 8006d5e:	0412      	lsls	r2, r2, #16
 8006d60:	4313      	orrs	r3, r2
 8006d62:	4a46      	ldr	r2, [pc, #280]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006d64:	0019      	movs	r1, r3
 8006d66:	0010      	movs	r0, r2
 8006d68:	f7ff f9ea 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d6c:	4b45      	ldr	r3, [pc, #276]	@ (8006e84 <HAL_ADC_ConfigChannel+0x368>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4945      	ldr	r1, [pc, #276]	@ (8006e88 <HAL_ADC_ConfigChannel+0x36c>)
 8006d72:	0018      	movs	r0, r3
 8006d74:	f7f9 f9c6 	bl	8000104 <__udivsi3>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	0013      	movs	r3, r2
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	189b      	adds	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d86:	e002      	b.n	8006d8e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1f9      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006d94:	e08e      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3c      	ldr	r2, [pc, #240]	@ (8006e8c <HAL_ADC_ConfigChannel+0x370>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10e      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	2380      	movs	r3, #128	@ 0x80
 8006da4:	045b      	lsls	r3, r3, #17
 8006da6:	4013      	ands	r3, r2
 8006da8:	d109      	bne.n	8006dbe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2280      	movs	r2, #128	@ 0x80
 8006dae:	0452      	lsls	r2, r2, #17
 8006db0:	4313      	orrs	r3, r2
 8006db2:	4a32      	ldr	r2, [pc, #200]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006db4:	0019      	movs	r1, r3
 8006db6:	0010      	movs	r0, r2
 8006db8:	f7ff f9c2 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
 8006dbc:	e07a      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a33      	ldr	r2, [pc, #204]	@ (8006e90 <HAL_ADC_ConfigChannel+0x374>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d000      	beq.n	8006dca <HAL_ADC_ConfigChannel+0x2ae>
 8006dc8:	e074      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	2380      	movs	r3, #128	@ 0x80
 8006dce:	03db      	lsls	r3, r3, #15
 8006dd0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006dd2:	d000      	beq.n	8006dd6 <HAL_ADC_ConfigChannel+0x2ba>
 8006dd4:	e06e      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2280      	movs	r2, #128	@ 0x80
 8006dda:	03d2      	lsls	r2, r2, #15
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	4a27      	ldr	r2, [pc, #156]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006de0:	0019      	movs	r1, r3
 8006de2:	0010      	movs	r0, r2
 8006de4:	f7ff f9ac 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
 8006de8:	e064      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	2380      	movs	r3, #128	@ 0x80
 8006df0:	061b      	lsls	r3, r3, #24
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d004      	beq.n	8006e00 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8006e78 <HAL_ADC_ConfigChannel+0x35c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d107      	bne.n	8006e10 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	0019      	movs	r1, r3
 8006e0a:	0010      	movs	r0, r2
 8006e0c:	f7ff fa2f 	bl	800626e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	da4d      	bge.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006e18:	4b18      	ldr	r3, [pc, #96]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f7ff f9a4 	bl	8006168 <LL_ADC_GetCommonPathInternalCh>
 8006e20:	0003      	movs	r3, r0
 8006e22:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a15      	ldr	r2, [pc, #84]	@ (8006e80 <HAL_ADC_ConfigChannel+0x364>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d108      	bne.n	8006e40 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	4a18      	ldr	r2, [pc, #96]	@ (8006e94 <HAL_ADC_ConfigChannel+0x378>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	4a11      	ldr	r2, [pc, #68]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006e36:	0019      	movs	r1, r3
 8006e38:	0010      	movs	r0, r2
 8006e3a:	f7ff f981 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
 8006e3e:	e039      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a11      	ldr	r2, [pc, #68]	@ (8006e8c <HAL_ADC_ConfigChannel+0x370>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4a12      	ldr	r2, [pc, #72]	@ (8006e98 <HAL_ADC_ConfigChannel+0x37c>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	4a0a      	ldr	r2, [pc, #40]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006e52:	0019      	movs	r1, r3
 8006e54:	0010      	movs	r0, r2
 8006e56:	f7ff f973 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
 8006e5a:	e02b      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a0b      	ldr	r2, [pc, #44]	@ (8006e90 <HAL_ADC_ConfigChannel+0x374>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d126      	bne.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	4a0c      	ldr	r2, [pc, #48]	@ (8006e9c <HAL_ADC_ConfigChannel+0x380>)
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	4a03      	ldr	r2, [pc, #12]	@ (8006e7c <HAL_ADC_ConfigChannel+0x360>)
 8006e6e:	0019      	movs	r1, r3
 8006e70:	0010      	movs	r0, r2
 8006e72:	f7ff f965 	bl	8006140 <LL_ADC_SetCommonPathInternalCh>
 8006e76:	e01d      	b.n	8006eb4 <HAL_ADC_ConfigChannel+0x398>
 8006e78:	80000004 	.word	0x80000004
 8006e7c:	40012708 	.word	0x40012708
 8006e80:	b0001000 	.word	0xb0001000
 8006e84:	2000044c 	.word	0x2000044c
 8006e88:	00030d40 	.word	0x00030d40
 8006e8c:	b8004000 	.word	0xb8004000
 8006e90:	b4002000 	.word	0xb4002000
 8006e94:	ff7fffff 	.word	0xff7fffff
 8006e98:	feffffff 	.word	0xfeffffff
 8006e9c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006eac:	2317      	movs	r3, #23
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2254      	movs	r2, #84	@ 0x54
 8006eb8:	2100      	movs	r1, #0
 8006eba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006ebc:	2317      	movs	r3, #23
 8006ebe:	18fb      	adds	r3, r7, r3
 8006ec0:	781b      	ldrb	r3, [r3, #0]
}
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	b006      	add	sp, #24
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	46c0      	nop			@ (mov r8, r8)

08006ecc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	0018      	movs	r0, r3
 8006eda:	f7ff fa89 	bl	80063f0 <LL_ADC_REG_IsConversionOngoing>
 8006ede:	1e03      	subs	r3, r0, #0
 8006ee0:	d031      	beq.n	8006f46 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7ff fa4d 	bl	8006386 <LL_ADC_IsDisableOngoing>
 8006eec:	1e03      	subs	r3, r0, #0
 8006eee:	d104      	bne.n	8006efa <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f7ff fa69 	bl	80063cc <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006efa:	f7ff f917 	bl	800612c <HAL_GetTick>
 8006efe:	0003      	movs	r3, r0
 8006f00:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006f02:	e01a      	b.n	8006f3a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006f04:	f7ff f912 	bl	800612c <HAL_GetTick>
 8006f08:	0002      	movs	r2, r0
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d913      	bls.n	8006f3a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2204      	movs	r2, #4
 8006f1a:	4013      	ands	r3, r2
 8006f1c:	d00d      	beq.n	8006f3a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f22:	2210      	movs	r2, #16
 8006f24:	431a      	orrs	r2, r3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2e:	2201      	movs	r2, #1
 8006f30:	431a      	orrs	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e006      	b.n	8006f48 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	2204      	movs	r2, #4
 8006f42:	4013      	ands	r3, r2
 8006f44:	d1de      	bne.n	8006f04 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	0018      	movs	r0, r3
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	b004      	add	sp, #16
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	0018      	movs	r0, r3
 8006f62:	f7ff f9ff 	bl	8006364 <LL_ADC_IsEnabled>
 8006f66:	1e03      	subs	r3, r0, #0
 8006f68:	d000      	beq.n	8006f6c <ADC_Enable+0x1c>
 8006f6a:	e069      	b.n	8007040 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	4a36      	ldr	r2, [pc, #216]	@ (800704c <ADC_Enable+0xfc>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	d00d      	beq.n	8006f94 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7c:	2210      	movs	r2, #16
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f88:	2201      	movs	r2, #1
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e056      	b.n	8007042 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	0018      	movs	r0, r3
 8006f9a:	f7ff f9bf 	bl	800631c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8006f9e:	4b2c      	ldr	r3, [pc, #176]	@ (8007050 <ADC_Enable+0x100>)
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f7ff f8e1 	bl	8006168 <LL_ADC_GetCommonPathInternalCh>
 8006fa6:	0002      	movs	r2, r0
 8006fa8:	2380      	movs	r3, #128	@ 0x80
 8006faa:	041b      	lsls	r3, r3, #16
 8006fac:	4013      	ands	r3, r2
 8006fae:	d00f      	beq.n	8006fd0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fb0:	4b28      	ldr	r3, [pc, #160]	@ (8007054 <ADC_Enable+0x104>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4928      	ldr	r1, [pc, #160]	@ (8007058 <ADC_Enable+0x108>)
 8006fb6:	0018      	movs	r0, r3
 8006fb8:	f7f9 f8a4 	bl	8000104 <__udivsi3>
 8006fbc:	0003      	movs	r3, r0
 8006fbe:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8006fc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fc2:	e002      	b.n	8006fca <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1f9      	bne.n	8006fc4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7e5b      	ldrb	r3, [r3, #25]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d033      	beq.n	8007040 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006fd8:	f7ff f8a8 	bl	800612c <HAL_GetTick>
 8006fdc:	0003      	movs	r3, r0
 8006fde:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fe0:	e027      	b.n	8007032 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff f9bc 	bl	8006364 <LL_ADC_IsEnabled>
 8006fec:	1e03      	subs	r3, r0, #0
 8006fee:	d104      	bne.n	8006ffa <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	0018      	movs	r0, r3
 8006ff6:	f7ff f991 	bl	800631c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006ffa:	f7ff f897 	bl	800612c <HAL_GetTick>
 8006ffe:	0002      	movs	r2, r0
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	2b02      	cmp	r3, #2
 8007006:	d914      	bls.n	8007032 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2201      	movs	r2, #1
 8007010:	4013      	ands	r3, r2
 8007012:	2b01      	cmp	r3, #1
 8007014:	d00d      	beq.n	8007032 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800701a:	2210      	movs	r2, #16
 800701c:	431a      	orrs	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007026:	2201      	movs	r2, #1
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e007      	b.n	8007042 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2201      	movs	r2, #1
 800703a:	4013      	ands	r3, r2
 800703c:	2b01      	cmp	r3, #1
 800703e:	d1d0      	bne.n	8006fe2 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	0018      	movs	r0, r3
 8007044:	46bd      	mov	sp, r7
 8007046:	b004      	add	sp, #16
 8007048:	bd80      	pop	{r7, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	80000017 	.word	0x80000017
 8007050:	40012708 	.word	0x40012708
 8007054:	2000044c 	.word	0x2000044c
 8007058:	00030d40 	.word	0x00030d40

0800705c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	0018      	movs	r0, r3
 800706a:	f7ff f98c 	bl	8006386 <LL_ADC_IsDisableOngoing>
 800706e:	0003      	movs	r3, r0
 8007070:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	0018      	movs	r0, r3
 8007078:	f7ff f974 	bl	8006364 <LL_ADC_IsEnabled>
 800707c:	1e03      	subs	r3, r0, #0
 800707e:	d046      	beq.n	800710e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d143      	bne.n	800710e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	2205      	movs	r2, #5
 800708e:	4013      	ands	r3, r2
 8007090:	2b01      	cmp	r3, #1
 8007092:	d10d      	bne.n	80070b0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	0018      	movs	r0, r3
 800709a:	f7ff f951 	bl	8006340 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2203      	movs	r2, #3
 80070a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80070a6:	f7ff f841 	bl	800612c <HAL_GetTick>
 80070aa:	0003      	movs	r3, r0
 80070ac:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070ae:	e028      	b.n	8007102 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b4:	2210      	movs	r2, #16
 80070b6:	431a      	orrs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070c0:	2201      	movs	r2, #1
 80070c2:	431a      	orrs	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e021      	b.n	8007110 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80070cc:	f7ff f82e 	bl	800612c <HAL_GetTick>
 80070d0:	0002      	movs	r2, r0
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d913      	bls.n	8007102 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2201      	movs	r2, #1
 80070e2:	4013      	ands	r3, r2
 80070e4:	d00d      	beq.n	8007102 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	2210      	movs	r2, #16
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070f6:	2201      	movs	r2, #1
 80070f8:	431a      	orrs	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e006      	b.n	8007110 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	2201      	movs	r2, #1
 800710a:	4013      	ands	r3, r2
 800710c:	d1de      	bne.n	80070cc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	0018      	movs	r0, r3
 8007112:	46bd      	mov	sp, r7
 8007114:	b004      	add	sp, #16
 8007116:	bd80      	pop	{r7, pc}

08007118 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800712a:	2250      	movs	r2, #80	@ 0x50
 800712c:	4013      	ands	r3, r2
 800712e:	d142      	bne.n	80071b6 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007134:	2280      	movs	r2, #128	@ 0x80
 8007136:	0092      	lsls	r2, r2, #2
 8007138:	431a      	orrs	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	0018      	movs	r0, r3
 8007144:	f7ff f851 	bl	80061ea <LL_ADC_REG_IsTriggerSourceSWStart>
 8007148:	1e03      	subs	r3, r0, #0
 800714a:	d02e      	beq.n	80071aa <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	7e9b      	ldrb	r3, [r3, #26]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d12a      	bne.n	80071aa <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	4013      	ands	r3, r2
 800715e:	2b08      	cmp	r3, #8
 8007160:	d123      	bne.n	80071aa <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	0018      	movs	r0, r3
 8007168:	f7ff f942 	bl	80063f0 <LL_ADC_REG_IsConversionOngoing>
 800716c:	1e03      	subs	r3, r0, #0
 800716e:	d110      	bne.n	8007192 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	210c      	movs	r1, #12
 800717c:	438a      	bics	r2, r1
 800717e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007184:	4a16      	ldr	r2, [pc, #88]	@ (80071e0 <ADC_DMAConvCplt+0xc8>)
 8007186:	4013      	ands	r3, r2
 8007188:	2201      	movs	r2, #1
 800718a:	431a      	orrs	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007190:	e00b      	b.n	80071aa <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007196:	2220      	movs	r2, #32
 8007198:	431a      	orrs	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071a2:	2201      	movs	r2, #1
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	0010      	movs	r0, r2
 80071b2:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80071b4:	e010      	b.n	80071d8 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071ba:	2210      	movs	r2, #16
 80071bc:	4013      	ands	r3, r2
 80071be:	d005      	beq.n	80071cc <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	0010      	movs	r0, r2
 80071c8:	4798      	blx	r3
}
 80071ca:	e005      	b.n	80071d8 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	0010      	movs	r0, r2
 80071d6:	4798      	blx	r3
}
 80071d8:	46c0      	nop			@ (mov r8, r8)
 80071da:	46bd      	mov	sp, r7
 80071dc:	b004      	add	sp, #16
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	fffffefe 	.word	0xfffffefe

080071e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	0010      	movs	r0, r2
 80071fa:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071fc:	46c0      	nop			@ (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b004      	add	sp, #16
 8007202:	bd80      	pop	{r7, pc}

08007204 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007210:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007216:	2240      	movs	r2, #64	@ 0x40
 8007218:	431a      	orrs	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007222:	2204      	movs	r2, #4
 8007224:	431a      	orrs	r2, r3
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800722e:	68fa      	ldr	r2, [r7, #12]
 8007230:	0010      	movs	r0, r2
 8007232:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007234:	46c0      	nop			@ (mov r8, r8)
 8007236:	46bd      	mov	sp, r7
 8007238:	b004      	add	sp, #16
 800723a:	bd80      	pop	{r7, pc}

0800723c <LL_ADC_GetCommonClock>:
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	23f0      	movs	r3, #240	@ 0xf0
 800724a:	039b      	lsls	r3, r3, #14
 800724c:	4013      	ands	r3, r2
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b002      	add	sp, #8
 8007254:	bd80      	pop	{r7, pc}

08007256 <LL_ADC_GetClock>:
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	0f9b      	lsrs	r3, r3, #30
 8007264:	079b      	lsls	r3, r3, #30
}
 8007266:	0018      	movs	r0, r3
 8007268:	46bd      	mov	sp, r7
 800726a:	b002      	add	sp, #8
 800726c:	bd80      	pop	{r7, pc}

0800726e <LL_ADC_SetCalibrationFactor>:
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	22b4      	movs	r2, #180	@ 0xb4
 800727c:	589b      	ldr	r3, [r3, r2]
 800727e:	227f      	movs	r2, #127	@ 0x7f
 8007280:	4393      	bics	r3, r2
 8007282:	001a      	movs	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	21b4      	movs	r1, #180	@ 0xb4
 800728c:	505a      	str	r2, [r3, r1]
}
 800728e:	46c0      	nop			@ (mov r8, r8)
 8007290:	46bd      	mov	sp, r7
 8007292:	b002      	add	sp, #8
 8007294:	bd80      	pop	{r7, pc}

08007296 <LL_ADC_GetCalibrationFactor>:
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	22b4      	movs	r2, #180	@ 0xb4
 80072a2:	589b      	ldr	r3, [r3, r2]
 80072a4:	227f      	movs	r2, #127	@ 0x7f
 80072a6:	4013      	ands	r3, r2
}
 80072a8:	0018      	movs	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b002      	add	sp, #8
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <LL_ADC_Enable>:
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	4a04      	ldr	r2, [pc, #16]	@ (80072d0 <LL_ADC_Enable+0x20>)
 80072be:	4013      	ands	r3, r2
 80072c0:	2201      	movs	r2, #1
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	609a      	str	r2, [r3, #8]
}
 80072c8:	46c0      	nop			@ (mov r8, r8)
 80072ca:	46bd      	mov	sp, r7
 80072cc:	b002      	add	sp, #8
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	7fffffe8 	.word	0x7fffffe8

080072d4 <LL_ADC_Disable>:
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a04      	ldr	r2, [pc, #16]	@ (80072f4 <LL_ADC_Disable+0x20>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	2202      	movs	r2, #2
 80072e6:	431a      	orrs	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	609a      	str	r2, [r3, #8]
}
 80072ec:	46c0      	nop			@ (mov r8, r8)
 80072ee:	46bd      	mov	sp, r7
 80072f0:	b002      	add	sp, #8
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	7fffffe8 	.word	0x7fffffe8

080072f8 <LL_ADC_IsEnabled>:
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	2201      	movs	r2, #1
 8007306:	4013      	ands	r3, r2
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <LL_ADC_IsEnabled+0x18>
 800730c:	2301      	movs	r3, #1
 800730e:	e000      	b.n	8007312 <LL_ADC_IsEnabled+0x1a>
 8007310:	2300      	movs	r3, #0
}
 8007312:	0018      	movs	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	b002      	add	sp, #8
 8007318:	bd80      	pop	{r7, pc}
	...

0800731c <LL_ADC_StartCalibration>:
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	4a05      	ldr	r2, [pc, #20]	@ (8007340 <LL_ADC_StartCalibration+0x24>)
 800732a:	4013      	ands	r3, r2
 800732c:	2280      	movs	r2, #128	@ 0x80
 800732e:	0612      	lsls	r2, r2, #24
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	609a      	str	r2, [r3, #8]
}
 8007336:	46c0      	nop			@ (mov r8, r8)
 8007338:	46bd      	mov	sp, r7
 800733a:	b002      	add	sp, #8
 800733c:	bd80      	pop	{r7, pc}
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	7fffffe8 	.word	0x7fffffe8

08007344 <LL_ADC_IsCalibrationOnGoing>:
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	0fdb      	lsrs	r3, r3, #31
 8007352:	07da      	lsls	r2, r3, #31
 8007354:	2380      	movs	r3, #128	@ 0x80
 8007356:	061b      	lsls	r3, r3, #24
 8007358:	429a      	cmp	r2, r3
 800735a:	d101      	bne.n	8007360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800735c:	2301      	movs	r3, #1
 800735e:	e000      	b.n	8007362 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007360:	2300      	movs	r3, #0
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b002      	add	sp, #8
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800736c:	b590      	push	{r4, r7, lr}
 800736e:	b08b      	sub	sp, #44	@ 0x2c
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007374:	2300      	movs	r3, #0
 8007376:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2254      	movs	r2, #84	@ 0x54
 8007380:	5c9b      	ldrb	r3, [r3, r2]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d101      	bne.n	800738a <HAL_ADCEx_Calibration_Start+0x1e>
 8007386:	2302      	movs	r3, #2
 8007388:	e0dd      	b.n	8007546 <HAL_ADCEx_Calibration_Start+0x1da>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2254      	movs	r2, #84	@ 0x54
 800738e:	2101      	movs	r1, #1
 8007390:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007392:	231f      	movs	r3, #31
 8007394:	18fc      	adds	r4, r7, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0018      	movs	r0, r3
 800739a:	f7ff fe5f 	bl	800705c <ADC_Disable>
 800739e:	0003      	movs	r3, r0
 80073a0:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	0018      	movs	r0, r3
 80073a8:	f7ff ffa6 	bl	80072f8 <LL_ADC_IsEnabled>
 80073ac:	1e03      	subs	r3, r0, #0
 80073ae:	d000      	beq.n	80073b2 <HAL_ADCEx_Calibration_Start+0x46>
 80073b0:	e0bc      	b.n	800752c <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b6:	4a66      	ldr	r2, [pc, #408]	@ (8007550 <HAL_ADCEx_Calibration_Start+0x1e4>)
 80073b8:	4013      	ands	r3, r2
 80073ba:	2202      	movs	r2, #2
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	4a62      	ldr	r2, [pc, #392]	@ (8007554 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80073ca:	4013      	ands	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	495f      	ldr	r1, [pc, #380]	@ (8007558 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80073da:	400a      	ands	r2, r1
 80073dc:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80073de:	2300      	movs	r3, #0
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80073e2:	e02d      	b.n	8007440 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	0018      	movs	r0, r3
 80073ea:	f7ff ff97 	bl	800731c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80073ee:	e014      	b.n	800741a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3301      	adds	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4a58      	ldr	r2, [pc, #352]	@ (800755c <HAL_ADCEx_Calibration_Start+0x1f0>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d90d      	bls.n	800741a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007402:	2212      	movs	r2, #18
 8007404:	4393      	bics	r3, r2
 8007406:	2210      	movs	r2, #16
 8007408:	431a      	orrs	r2, r3
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2254      	movs	r2, #84	@ 0x54
 8007412:	2100      	movs	r1, #0
 8007414:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e095      	b.n	8007546 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	0018      	movs	r0, r3
 8007420:	f7ff ff90 	bl	8007344 <LL_ADC_IsCalibrationOnGoing>
 8007424:	1e03      	subs	r3, r0, #0
 8007426:	d1e3      	bne.n	80073f0 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	0018      	movs	r0, r3
 800742e:	f7ff ff32 	bl	8007296 <LL_ADC_GetCalibrationFactor>
 8007432:	0002      	movs	r2, r0
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	189b      	adds	r3, r3, r2
 8007438:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800743a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743c:	3301      	adds	r3, #1
 800743e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	2b07      	cmp	r3, #7
 8007444:	d9ce      	bls.n	80073e4 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8007446:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007448:	6a38      	ldr	r0, [r7, #32]
 800744a:	f7f8 fe5b 	bl	8000104 <__udivsi3>
 800744e:	0003      	movs	r3, r0
 8007450:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	0018      	movs	r0, r3
 8007458:	f7ff ff2a 	bl	80072b0 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	0018      	movs	r0, r3
 8007462:	f7ff fef8 	bl	8007256 <LL_ADC_GetClock>
 8007466:	1e03      	subs	r3, r0, #0
 8007468:	d11b      	bne.n	80074a2 <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800746a:	4b3d      	ldr	r3, [pc, #244]	@ (8007560 <HAL_ADCEx_Calibration_Start+0x1f4>)
 800746c:	0018      	movs	r0, r3
 800746e:	f7ff fee5 	bl	800723c <LL_ADC_GetCommonClock>
 8007472:	0003      	movs	r3, r0
 8007474:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	23e0      	movs	r3, #224	@ 0xe0
 800747a:	035b      	lsls	r3, r3, #13
 800747c:	429a      	cmp	r2, r3
 800747e:	d310      	bcc.n	80074a2 <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	0c9b      	lsrs	r3, r3, #18
 8007484:	3b03      	subs	r3, #3
 8007486:	2201      	movs	r2, #1
 8007488:	409a      	lsls	r2, r3
 800748a:	0013      	movs	r3, r2
 800748c:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	085b      	lsrs	r3, r3, #1
 8007492:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8007494:	e002      	b.n	800749c <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	3b01      	subs	r3, #1
 800749a:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1f9      	bne.n	8007496 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6a3a      	ldr	r2, [r7, #32]
 80074a8:	0011      	movs	r1, r2
 80074aa:	0018      	movs	r0, r3
 80074ac:	f7ff fedf 	bl	800726e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	0018      	movs	r0, r3
 80074b6:	f7ff ff0d 	bl	80072d4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80074ba:	f7fe fe37 	bl	800612c <HAL_GetTick>
 80074be:	0003      	movs	r3, r0
 80074c0:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80074c2:	e01b      	b.n	80074fc <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80074c4:	f7fe fe32 	bl	800612c <HAL_GetTick>
 80074c8:	0002      	movs	r2, r0
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d914      	bls.n	80074fc <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	0018      	movs	r0, r3
 80074d8:	f7ff ff0e 	bl	80072f8 <LL_ADC_IsEnabled>
 80074dc:	1e03      	subs	r3, r0, #0
 80074de:	d00d      	beq.n	80074fc <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e4:	2210      	movs	r2, #16
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074f0:	2201      	movs	r2, #1
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e024      	b.n	8007546 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	0018      	movs	r0, r3
 8007502:	f7ff fef9 	bl	80072f8 <LL_ADC_IsEnabled>
 8007506:	1e03      	subs	r3, r0, #0
 8007508:	d1dc      	bne.n	80074c4 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68d9      	ldr	r1, [r3, #12]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	69ba      	ldr	r2, [r7, #24]
 8007516:	430a      	orrs	r2, r1
 8007518:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800751e:	2203      	movs	r2, #3
 8007520:	4393      	bics	r3, r2
 8007522:	2201      	movs	r2, #1
 8007524:	431a      	orrs	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	659a      	str	r2, [r3, #88]	@ 0x58
 800752a:	e005      	b.n	8007538 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007530:	2210      	movs	r2, #16
 8007532:	431a      	orrs	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2254      	movs	r2, #84	@ 0x54
 800753c:	2100      	movs	r1, #0
 800753e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8007540:	231f      	movs	r3, #31
 8007542:	18fb      	adds	r3, r7, r3
 8007544:	781b      	ldrb	r3, [r3, #0]
}
 8007546:	0018      	movs	r0, r3
 8007548:	46bd      	mov	sp, r7
 800754a:	b00b      	add	sp, #44	@ 0x2c
 800754c:	bd90      	pop	{r4, r7, pc}
 800754e:	46c0      	nop			@ (mov r8, r8)
 8007550:	fffffefd 	.word	0xfffffefd
 8007554:	00008003 	.word	0x00008003
 8007558:	ffff7ffc 	.word	0xffff7ffc
 800755c:	0002f1ff 	.word	0x0002f1ff
 8007560:	40012708 	.word	0x40012708

08007564 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800756c:	46c0      	nop			@ (mov r8, r8)
 800756e:	46bd      	mov	sp, r7
 8007570:	b002      	add	sp, #8
 8007572:	bd80      	pop	{r7, pc}

08007574 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	b002      	add	sp, #8
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800758c:	46c0      	nop			@ (mov r8, r8)
 800758e:	46bd      	mov	sp, r7
 8007590:	b002      	add	sp, #8
 8007592:	bd80      	pop	{r7, pc}

08007594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	0002      	movs	r2, r0
 800759c:	1dfb      	adds	r3, r7, #7
 800759e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80075a0:	1dfb      	adds	r3, r7, #7
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80075a6:	d809      	bhi.n	80075bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075a8:	1dfb      	adds	r3, r7, #7
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	001a      	movs	r2, r3
 80075ae:	231f      	movs	r3, #31
 80075b0:	401a      	ands	r2, r3
 80075b2:	4b04      	ldr	r3, [pc, #16]	@ (80075c4 <__NVIC_EnableIRQ+0x30>)
 80075b4:	2101      	movs	r1, #1
 80075b6:	4091      	lsls	r1, r2
 80075b8:	000a      	movs	r2, r1
 80075ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80075bc:	46c0      	nop			@ (mov r8, r8)
 80075be:	46bd      	mov	sp, r7
 80075c0:	b002      	add	sp, #8
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	e000e100 	.word	0xe000e100

080075c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	0002      	movs	r2, r0
 80075d0:	1dfb      	adds	r3, r7, #7
 80075d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80075d4:	1dfb      	adds	r3, r7, #7
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80075da:	d810      	bhi.n	80075fe <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80075dc:	1dfb      	adds	r3, r7, #7
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	001a      	movs	r2, r3
 80075e2:	231f      	movs	r3, #31
 80075e4:	4013      	ands	r3, r2
 80075e6:	4908      	ldr	r1, [pc, #32]	@ (8007608 <__NVIC_DisableIRQ+0x40>)
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	0013      	movs	r3, r2
 80075ee:	2280      	movs	r2, #128	@ 0x80
 80075f0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80075f2:	f3bf 8f4f 	dsb	sy
}
 80075f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80075f8:	f3bf 8f6f 	isb	sy
}
 80075fc:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80075fe:	46c0      	nop			@ (mov r8, r8)
 8007600:	46bd      	mov	sp, r7
 8007602:	b002      	add	sp, #8
 8007604:	bd80      	pop	{r7, pc}
 8007606:	46c0      	nop			@ (mov r8, r8)
 8007608:	e000e100 	.word	0xe000e100

0800760c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800760c:	b590      	push	{r4, r7, lr}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	0002      	movs	r2, r0
 8007614:	6039      	str	r1, [r7, #0]
 8007616:	1dfb      	adds	r3, r7, #7
 8007618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800761a:	1dfb      	adds	r3, r7, #7
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007620:	d828      	bhi.n	8007674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007622:	4a2f      	ldr	r2, [pc, #188]	@ (80076e0 <__NVIC_SetPriority+0xd4>)
 8007624:	1dfb      	adds	r3, r7, #7
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	b25b      	sxtb	r3, r3
 800762a:	089b      	lsrs	r3, r3, #2
 800762c:	33c0      	adds	r3, #192	@ 0xc0
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	589b      	ldr	r3, [r3, r2]
 8007632:	1dfa      	adds	r2, r7, #7
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	0011      	movs	r1, r2
 8007638:	2203      	movs	r2, #3
 800763a:	400a      	ands	r2, r1
 800763c:	00d2      	lsls	r2, r2, #3
 800763e:	21ff      	movs	r1, #255	@ 0xff
 8007640:	4091      	lsls	r1, r2
 8007642:	000a      	movs	r2, r1
 8007644:	43d2      	mvns	r2, r2
 8007646:	401a      	ands	r2, r3
 8007648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	019b      	lsls	r3, r3, #6
 800764e:	22ff      	movs	r2, #255	@ 0xff
 8007650:	401a      	ands	r2, r3
 8007652:	1dfb      	adds	r3, r7, #7
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	0018      	movs	r0, r3
 8007658:	2303      	movs	r3, #3
 800765a:	4003      	ands	r3, r0
 800765c:	00db      	lsls	r3, r3, #3
 800765e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007660:	481f      	ldr	r0, [pc, #124]	@ (80076e0 <__NVIC_SetPriority+0xd4>)
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	b25b      	sxtb	r3, r3
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	430a      	orrs	r2, r1
 800766c:	33c0      	adds	r3, #192	@ 0xc0
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8007672:	e031      	b.n	80076d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007674:	4a1b      	ldr	r2, [pc, #108]	@ (80076e4 <__NVIC_SetPriority+0xd8>)
 8007676:	1dfb      	adds	r3, r7, #7
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	0019      	movs	r1, r3
 800767c:	230f      	movs	r3, #15
 800767e:	400b      	ands	r3, r1
 8007680:	3b08      	subs	r3, #8
 8007682:	089b      	lsrs	r3, r3, #2
 8007684:	3306      	adds	r3, #6
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	18d3      	adds	r3, r2, r3
 800768a:	3304      	adds	r3, #4
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	1dfa      	adds	r2, r7, #7
 8007690:	7812      	ldrb	r2, [r2, #0]
 8007692:	0011      	movs	r1, r2
 8007694:	2203      	movs	r2, #3
 8007696:	400a      	ands	r2, r1
 8007698:	00d2      	lsls	r2, r2, #3
 800769a:	21ff      	movs	r1, #255	@ 0xff
 800769c:	4091      	lsls	r1, r2
 800769e:	000a      	movs	r2, r1
 80076a0:	43d2      	mvns	r2, r2
 80076a2:	401a      	ands	r2, r3
 80076a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	019b      	lsls	r3, r3, #6
 80076aa:	22ff      	movs	r2, #255	@ 0xff
 80076ac:	401a      	ands	r2, r3
 80076ae:	1dfb      	adds	r3, r7, #7
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	0018      	movs	r0, r3
 80076b4:	2303      	movs	r3, #3
 80076b6:	4003      	ands	r3, r0
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80076bc:	4809      	ldr	r0, [pc, #36]	@ (80076e4 <__NVIC_SetPriority+0xd8>)
 80076be:	1dfb      	adds	r3, r7, #7
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	001c      	movs	r4, r3
 80076c4:	230f      	movs	r3, #15
 80076c6:	4023      	ands	r3, r4
 80076c8:	3b08      	subs	r3, #8
 80076ca:	089b      	lsrs	r3, r3, #2
 80076cc:	430a      	orrs	r2, r1
 80076ce:	3306      	adds	r3, #6
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	18c3      	adds	r3, r0, r3
 80076d4:	3304      	adds	r3, #4
 80076d6:	601a      	str	r2, [r3, #0]
}
 80076d8:	46c0      	nop			@ (mov r8, r8)
 80076da:	46bd      	mov	sp, r7
 80076dc:	b003      	add	sp, #12
 80076de:	bd90      	pop	{r4, r7, pc}
 80076e0:	e000e100 	.word	0xe000e100
 80076e4:	e000ed00 	.word	0xe000ed00

080076e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	1e5a      	subs	r2, r3, #1
 80076f4:	2380      	movs	r3, #128	@ 0x80
 80076f6:	045b      	lsls	r3, r3, #17
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d301      	bcc.n	8007700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80076fc:	2301      	movs	r3, #1
 80076fe:	e010      	b.n	8007722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007700:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <SysTick_Config+0x44>)
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	3a01      	subs	r2, #1
 8007706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007708:	2301      	movs	r3, #1
 800770a:	425b      	negs	r3, r3
 800770c:	2103      	movs	r1, #3
 800770e:	0018      	movs	r0, r3
 8007710:	f7ff ff7c 	bl	800760c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007714:	4b05      	ldr	r3, [pc, #20]	@ (800772c <SysTick_Config+0x44>)
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800771a:	4b04      	ldr	r3, [pc, #16]	@ (800772c <SysTick_Config+0x44>)
 800771c:	2207      	movs	r2, #7
 800771e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007720:	2300      	movs	r3, #0
}
 8007722:	0018      	movs	r0, r3
 8007724:	46bd      	mov	sp, r7
 8007726:	b002      	add	sp, #8
 8007728:	bd80      	pop	{r7, pc}
 800772a:	46c0      	nop			@ (mov r8, r8)
 800772c:	e000e010 	.word	0xe000e010

08007730 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
 800773a:	210f      	movs	r1, #15
 800773c:	187b      	adds	r3, r7, r1
 800773e:	1c02      	adds	r2, r0, #0
 8007740:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007742:	68ba      	ldr	r2, [r7, #8]
 8007744:	187b      	adds	r3, r7, r1
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	b25b      	sxtb	r3, r3
 800774a:	0011      	movs	r1, r2
 800774c:	0018      	movs	r0, r3
 800774e:	f7ff ff5d 	bl	800760c <__NVIC_SetPriority>
}
 8007752:	46c0      	nop			@ (mov r8, r8)
 8007754:	46bd      	mov	sp, r7
 8007756:	b004      	add	sp, #16
 8007758:	bd80      	pop	{r7, pc}

0800775a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	0002      	movs	r2, r0
 8007762:	1dfb      	adds	r3, r7, #7
 8007764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007766:	1dfb      	adds	r3, r7, #7
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	b25b      	sxtb	r3, r3
 800776c:	0018      	movs	r0, r3
 800776e:	f7ff ff11 	bl	8007594 <__NVIC_EnableIRQ>
}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b002      	add	sp, #8
 8007778:	bd80      	pop	{r7, pc}

0800777a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	0002      	movs	r2, r0
 8007782:	1dfb      	adds	r3, r7, #7
 8007784:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007786:	1dfb      	adds	r3, r7, #7
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	b25b      	sxtb	r3, r3
 800778c:	0018      	movs	r0, r3
 800778e:	f7ff ff1b 	bl	80075c8 <__NVIC_DisableIRQ>
}
 8007792:	46c0      	nop			@ (mov r8, r8)
 8007794:	46bd      	mov	sp, r7
 8007796:	b002      	add	sp, #8
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f7ff ff9f 	bl	80076e8 <SysTick_Config>
 80077aa:	0003      	movs	r3, r0
}
 80077ac:	0018      	movs	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e077      	b.n	80078b6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a3d      	ldr	r2, [pc, #244]	@ (80078c0 <HAL_DMA_Init+0x10c>)
 80077cc:	4694      	mov	ip, r2
 80077ce:	4463      	add	r3, ip
 80077d0:	2114      	movs	r1, #20
 80077d2:	0018      	movs	r0, r3
 80077d4:	f7f8 fc96 	bl	8000104 <__udivsi3>
 80077d8:	0003      	movs	r3, r0
 80077da:	009a      	lsls	r2, r3, #2
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2225      	movs	r2, #37	@ 0x25
 80077e4:	2102      	movs	r1, #2
 80077e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4934      	ldr	r1, [pc, #208]	@ (80078c4 <HAL_DMA_Init+0x110>)
 80077f4:	400a      	ands	r2, r1
 80077f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6819      	ldr	r1, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689a      	ldr	r2, [r3, #8]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	431a      	orrs	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	431a      	orrs	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	431a      	orrs	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	431a      	orrs	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0018      	movs	r0, r3
 8007832:	f000 fa8d 	bl	8007d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	2380      	movs	r3, #128	@ 0x80
 800783c:	01db      	lsls	r3, r3, #7
 800783e:	429a      	cmp	r2, r3
 8007840:	d102      	bne.n	8007848 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685a      	ldr	r2, [r3, #4]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007850:	213f      	movs	r1, #63	@ 0x3f
 8007852:	400a      	ands	r2, r1
 8007854:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800785e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d011      	beq.n	800788c <HAL_DMA_Init+0xd8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	2b04      	cmp	r3, #4
 800786e:	d80d      	bhi.n	800788c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	0018      	movs	r0, r3
 8007874:	f000 fa98 	bl	8007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007888:	605a      	str	r2, [r3, #4]
 800788a:	e008      	b.n	800789e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2225      	movs	r2, #37	@ 0x25
 80078a8:	2101      	movs	r1, #1
 80078aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2224      	movs	r2, #36	@ 0x24
 80078b0:	2100      	movs	r1, #0
 80078b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80078b4:	2300      	movs	r3, #0
}
 80078b6:	0018      	movs	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	b002      	add	sp, #8
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	46c0      	nop			@ (mov r8, r8)
 80078c0:	bffdfff8 	.word	0xbffdfff8
 80078c4:	ffff800f 	.word	0xffff800f

080078c8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
 80078d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078d6:	2317      	movs	r3, #23
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	2200      	movs	r2, #0
 80078dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2224      	movs	r2, #36	@ 0x24
 80078e2:	5c9b      	ldrb	r3, [r3, r2]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_DMA_Start_IT+0x24>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e06f      	b.n	80079cc <HAL_DMA_Start_IT+0x104>
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2224      	movs	r2, #36	@ 0x24
 80078f0:	2101      	movs	r1, #1
 80078f2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2225      	movs	r2, #37	@ 0x25
 80078f8:	5c9b      	ldrb	r3, [r3, r2]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d157      	bne.n	80079b0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2225      	movs	r2, #37	@ 0x25
 8007904:	2102      	movs	r1, #2
 8007906:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2101      	movs	r1, #1
 800791a:	438a      	bics	r2, r1
 800791c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	68b9      	ldr	r1, [r7, #8]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 f9d3 	bl	8007cd0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800792e:	2b00      	cmp	r3, #0
 8007930:	d008      	beq.n	8007944 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	210e      	movs	r1, #14
 800793e:	430a      	orrs	r2, r1
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	e00f      	b.n	8007964 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2104      	movs	r1, #4
 8007950:	438a      	bics	r2, r1
 8007952:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	210a      	movs	r1, #10
 8007960:	430a      	orrs	r2, r1
 8007962:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	2380      	movs	r3, #128	@ 0x80
 800796c:	025b      	lsls	r3, r3, #9
 800796e:	4013      	ands	r3, r2
 8007970:	d008      	beq.n	8007984 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797c:	2180      	movs	r1, #128	@ 0x80
 800797e:	0049      	lsls	r1, r1, #1
 8007980:	430a      	orrs	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007988:	2b00      	cmp	r3, #0
 800798a:	d008      	beq.n	800799e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007996:	2180      	movs	r1, #128	@ 0x80
 8007998:	0049      	lsls	r1, r1, #1
 800799a:	430a      	orrs	r2, r1
 800799c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2101      	movs	r1, #1
 80079aa:	430a      	orrs	r2, r1
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	e00a      	b.n	80079c6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2280      	movs	r2, #128	@ 0x80
 80079b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2224      	movs	r2, #36	@ 0x24
 80079ba:	2100      	movs	r1, #0
 80079bc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80079be:	2317      	movs	r3, #23
 80079c0:	18fb      	adds	r3, r7, r3
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80079c6:	2317      	movs	r3, #23
 80079c8:	18fb      	adds	r3, r7, r3
 80079ca:	781b      	ldrb	r3, [r3, #0]
}
 80079cc:	0018      	movs	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b006      	add	sp, #24
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e050      	b.n	8007a88 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2225      	movs	r2, #37	@ 0x25
 80079ea:	5c9b      	ldrb	r3, [r3, r2]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d008      	beq.n	8007a04 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2204      	movs	r2, #4
 80079f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2224      	movs	r2, #36	@ 0x24
 80079fc:	2100      	movs	r1, #0
 80079fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007a00:	2301      	movs	r3, #1
 8007a02:	e041      	b.n	8007a88 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	210e      	movs	r1, #14
 8007a10:	438a      	bics	r2, r1
 8007a12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a1e:	491c      	ldr	r1, [pc, #112]	@ (8007a90 <HAL_DMA_Abort+0xbc>)
 8007a20:	400a      	ands	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2101      	movs	r1, #1
 8007a30:	438a      	bics	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8007a34:	4b17      	ldr	r3, [pc, #92]	@ (8007a94 <HAL_DMA_Abort+0xc0>)
 8007a36:	6859      	ldr	r1, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a3c:	221c      	movs	r2, #28
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2201      	movs	r2, #1
 8007a42:	409a      	lsls	r2, r3
 8007a44:	4b13      	ldr	r3, [pc, #76]	@ (8007a94 <HAL_DMA_Abort+0xc0>)
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007a52:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00c      	beq.n	8007a76 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a66:	490a      	ldr	r1, [pc, #40]	@ (8007a90 <HAL_DMA_Abort+0xbc>)
 8007a68:	400a      	ands	r2, r1
 8007a6a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007a74:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2225      	movs	r2, #37	@ 0x25
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2224      	movs	r2, #36	@ 0x24
 8007a82:	2100      	movs	r1, #0
 8007a84:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	0018      	movs	r0, r3
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	fffffeff 	.word	0xfffffeff
 8007a94:	40020000 	.word	0x40020000

08007a98 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aa0:	210f      	movs	r1, #15
 8007aa2:	187b      	adds	r3, r7, r1
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2225      	movs	r2, #37	@ 0x25
 8007aac:	5c9b      	ldrb	r3, [r3, r2]
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d006      	beq.n	8007ac2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007aba:	187b      	adds	r3, r7, r1
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e049      	b.n	8007b56 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	210e      	movs	r1, #14
 8007ace:	438a      	bics	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2101      	movs	r1, #1
 8007ade:	438a      	bics	r2, r1
 8007ae0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	491d      	ldr	r1, [pc, #116]	@ (8007b64 <HAL_DMA_Abort_IT+0xcc>)
 8007aee:	400a      	ands	r2, r1
 8007af0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8007af2:	4b1d      	ldr	r3, [pc, #116]	@ (8007b68 <HAL_DMA_Abort_IT+0xd0>)
 8007af4:	6859      	ldr	r1, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	221c      	movs	r2, #28
 8007afc:	4013      	ands	r3, r2
 8007afe:	2201      	movs	r2, #1
 8007b00:	409a      	lsls	r2, r3
 8007b02:	4b19      	ldr	r3, [pc, #100]	@ (8007b68 <HAL_DMA_Abort_IT+0xd0>)
 8007b04:	430a      	orrs	r2, r1
 8007b06:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00c      	beq.n	8007b34 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b24:	490f      	ldr	r1, [pc, #60]	@ (8007b64 <HAL_DMA_Abort_IT+0xcc>)
 8007b26:	400a      	ands	r2, r1
 8007b28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007b32:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2225      	movs	r2, #37	@ 0x25
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2224      	movs	r2, #36	@ 0x24
 8007b40:	2100      	movs	r1, #0
 8007b42:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d004      	beq.n	8007b56 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	0010      	movs	r0, r2
 8007b54:	4798      	blx	r3
    }
  }
  return status;
 8007b56:	230f      	movs	r3, #15
 8007b58:	18fb      	adds	r3, r7, r3
 8007b5a:	781b      	ldrb	r3, [r3, #0]
}
 8007b5c:	0018      	movs	r0, r3
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	b004      	add	sp, #16
 8007b62:	bd80      	pop	{r7, pc}
 8007b64:	fffffeff 	.word	0xfffffeff
 8007b68:	40020000 	.word	0x40020000

08007b6c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8007b74:	4b55      	ldr	r3, [pc, #340]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	221c      	movs	r2, #28
 8007b88:	4013      	ands	r3, r2
 8007b8a:	2204      	movs	r2, #4
 8007b8c:	409a      	lsls	r2, r3
 8007b8e:	0013      	movs	r3, r2
 8007b90:	68fa      	ldr	r2, [r7, #12]
 8007b92:	4013      	ands	r3, r2
 8007b94:	d027      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x7a>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2204      	movs	r2, #4
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	d023      	beq.n	8007be6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d107      	bne.n	8007bba <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2104      	movs	r1, #4
 8007bb6:	438a      	bics	r2, r1
 8007bb8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007bba:	4b44      	ldr	r3, [pc, #272]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007bbc:	6859      	ldr	r1, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc2:	221c      	movs	r2, #28
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	409a      	lsls	r2, r3
 8007bca:	4b40      	ldr	r3, [pc, #256]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007bcc:	430a      	orrs	r2, r1
 8007bce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d100      	bne.n	8007bda <HAL_DMA_IRQHandler+0x6e>
 8007bd8:	e073      	b.n	8007cc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	0010      	movs	r0, r2
 8007be2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007be4:	e06d      	b.n	8007cc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bea:	221c      	movs	r2, #28
 8007bec:	4013      	ands	r3, r2
 8007bee:	2202      	movs	r2, #2
 8007bf0:	409a      	lsls	r2, r3
 8007bf2:	0013      	movs	r3, r2
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	d02e      	beq.n	8007c58 <HAL_DMA_IRQHandler+0xec>
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	4013      	ands	r3, r2
 8007c00:	d02a      	beq.n	8007c58 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	d10b      	bne.n	8007c26 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	210a      	movs	r1, #10
 8007c1a:	438a      	bics	r2, r1
 8007c1c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2225      	movs	r2, #37	@ 0x25
 8007c22:	2101      	movs	r1, #1
 8007c24:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8007c26:	4b29      	ldr	r3, [pc, #164]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007c28:	6859      	ldr	r1, [r3, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	221c      	movs	r2, #28
 8007c30:	4013      	ands	r3, r2
 8007c32:	2202      	movs	r2, #2
 8007c34:	409a      	lsls	r2, r3
 8007c36:	4b25      	ldr	r3, [pc, #148]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2224      	movs	r2, #36	@ 0x24
 8007c40:	2100      	movs	r1, #0
 8007c42:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d03a      	beq.n	8007cc2 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	0010      	movs	r0, r2
 8007c54:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8007c56:	e034      	b.n	8007cc2 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5c:	221c      	movs	r2, #28
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2208      	movs	r2, #8
 8007c62:	409a      	lsls	r2, r3
 8007c64:	0013      	movs	r3, r2
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d02b      	beq.n	8007cc4 <HAL_DMA_IRQHandler+0x158>
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	4013      	ands	r3, r2
 8007c72:	d027      	beq.n	8007cc4 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	210e      	movs	r1, #14
 8007c80:	438a      	bics	r2, r1
 8007c82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007c84:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c8c:	221c      	movs	r2, #28
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2201      	movs	r2, #1
 8007c92:	409a      	lsls	r2, r3
 8007c94:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <HAL_DMA_IRQHandler+0x160>)
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2225      	movs	r2, #37	@ 0x25
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2224      	movs	r2, #36	@ 0x24
 8007cac:	2100      	movs	r1, #0
 8007cae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	0010      	movs	r0, r2
 8007cc0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007cc2:	46c0      	nop			@ (mov r8, r8)
 8007cc4:	46c0      	nop			@ (mov r8, r8)
}
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	b004      	add	sp, #16
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	40020000 	.word	0x40020000

08007cd0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
 8007cdc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ce2:	68fa      	ldr	r2, [r7, #12]
 8007ce4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007ce6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d004      	beq.n	8007cfa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007cf8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007cfa:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <DMA_SetConfig+0x7c>)
 8007cfc:	6859      	ldr	r1, [r3, #4]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d02:	221c      	movs	r2, #28
 8007d04:	4013      	ands	r3, r2
 8007d06:	2201      	movs	r2, #1
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	4b10      	ldr	r3, [pc, #64]	@ (8007d4c <DMA_SetConfig+0x7c>)
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d108      	bne.n	8007d32 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007d30:	e007      	b.n	8007d42 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	60da      	str	r2, [r3, #12]
}
 8007d42:	46c0      	nop			@ (mov r8, r8)
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b004      	add	sp, #16
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	46c0      	nop			@ (mov r8, r8)
 8007d4c:	40020000 	.word	0x40020000

08007d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5c:	089b      	lsrs	r3, r3, #2
 8007d5e:	4a10      	ldr	r2, [pc, #64]	@ (8007da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8007d60:	4694      	mov	ip, r2
 8007d62:	4463      	add	r3, ip
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	001a      	movs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	001a      	movs	r2, r3
 8007d72:	23ff      	movs	r3, #255	@ 0xff
 8007d74:	4013      	ands	r3, r2
 8007d76:	3b08      	subs	r3, #8
 8007d78:	2114      	movs	r1, #20
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	f7f8 f9c2 	bl	8000104 <__udivsi3>
 8007d80:	0003      	movs	r3, r0
 8007d82:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a07      	ldr	r2, [pc, #28]	@ (8007da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007d88:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	221f      	movs	r2, #31
 8007d8e:	4013      	ands	r3, r2
 8007d90:	2201      	movs	r2, #1
 8007d92:	409a      	lsls	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007d98:	46c0      	nop			@ (mov r8, r8)
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b004      	add	sp, #16
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	10008200 	.word	0x10008200
 8007da4:	40020880 	.word	0x40020880

08007da8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	223f      	movs	r2, #63	@ 0x3f
 8007db6:	4013      	ands	r3, r2
 8007db8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007de8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007dbe:	4694      	mov	ip, r2
 8007dc0:	4463      	add	r3, ip
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	001a      	movs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a07      	ldr	r2, [pc, #28]	@ (8007dec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007dce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	2201      	movs	r2, #1
 8007dda:	409a      	lsls	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007de0:	46c0      	nop			@ (mov r8, r8)
 8007de2:	46bd      	mov	sp, r7
 8007de4:	b004      	add	sp, #16
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	1000823f 	.word	0x1000823f
 8007dec:	40020940 	.word	0x40020940

08007df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007dfe:	e147      	b.n	8008090 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2101      	movs	r1, #1
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	4091      	lsls	r1, r2
 8007e0a:	000a      	movs	r2, r1
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d100      	bne.n	8007e18 <HAL_GPIO_Init+0x28>
 8007e16:	e138      	b.n	800808a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2203      	movs	r2, #3
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d005      	beq.n	8007e30 <HAL_GPIO_Init+0x40>
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	2203      	movs	r2, #3
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d130      	bne.n	8007e92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	005b      	lsls	r3, r3, #1
 8007e3a:	2203      	movs	r2, #3
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	0013      	movs	r3, r2
 8007e40:	43da      	mvns	r2, r3
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	4013      	ands	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	409a      	lsls	r2, r3
 8007e52:	0013      	movs	r3, r2
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e66:	2201      	movs	r2, #1
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	409a      	lsls	r2, r3
 8007e6c:	0013      	movs	r3, r2
 8007e6e:	43da      	mvns	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	4013      	ands	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	091b      	lsrs	r3, r3, #4
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	401a      	ands	r2, r3
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	409a      	lsls	r2, r3
 8007e84:	0013      	movs	r3, r2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	2203      	movs	r2, #3
 8007e98:	4013      	ands	r3, r2
 8007e9a:	2b03      	cmp	r3, #3
 8007e9c:	d017      	beq.n	8007ece <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	409a      	lsls	r2, r3
 8007eac:	0013      	movs	r3, r2
 8007eae:	43da      	mvns	r2, r3
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	005b      	lsls	r3, r3, #1
 8007ebe:	409a      	lsls	r2, r3
 8007ec0:	0013      	movs	r3, r2
 8007ec2:	693a      	ldr	r2, [r7, #16]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	693a      	ldr	r2, [r7, #16]
 8007ecc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	d123      	bne.n	8007f22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	08da      	lsrs	r2, r3, #3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	3208      	adds	r2, #8
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	58d3      	ldr	r3, [r2, r3]
 8007ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2207      	movs	r2, #7
 8007eec:	4013      	ands	r3, r2
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	220f      	movs	r2, #15
 8007ef2:	409a      	lsls	r2, r3
 8007ef4:	0013      	movs	r3, r2
 8007ef6:	43da      	mvns	r2, r3
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	4013      	ands	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	691a      	ldr	r2, [r3, #16]
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2107      	movs	r1, #7
 8007f06:	400b      	ands	r3, r1
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	409a      	lsls	r2, r3
 8007f0c:	0013      	movs	r3, r2
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	08da      	lsrs	r2, r3, #3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3208      	adds	r2, #8
 8007f1c:	0092      	lsls	r2, r2, #2
 8007f1e:	6939      	ldr	r1, [r7, #16]
 8007f20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	409a      	lsls	r2, r3
 8007f30:	0013      	movs	r3, r2
 8007f32:	43da      	mvns	r2, r3
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	4013      	ands	r3, r2
 8007f38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	401a      	ands	r2, r3
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	005b      	lsls	r3, r3, #1
 8007f46:	409a      	lsls	r2, r3
 8007f48:	0013      	movs	r3, r2
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	23c0      	movs	r3, #192	@ 0xc0
 8007f5c:	029b      	lsls	r3, r3, #10
 8007f5e:	4013      	ands	r3, r2
 8007f60:	d100      	bne.n	8007f64 <HAL_GPIO_Init+0x174>
 8007f62:	e092      	b.n	800808a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007f64:	4a50      	ldr	r2, [pc, #320]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	089b      	lsrs	r3, r3, #2
 8007f6a:	3318      	adds	r3, #24
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	589b      	ldr	r3, [r3, r2]
 8007f70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2203      	movs	r2, #3
 8007f76:	4013      	ands	r3, r2
 8007f78:	00db      	lsls	r3, r3, #3
 8007f7a:	220f      	movs	r2, #15
 8007f7c:	409a      	lsls	r2, r3
 8007f7e:	0013      	movs	r3, r2
 8007f80:	43da      	mvns	r2, r3
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4013      	ands	r3, r2
 8007f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	23a0      	movs	r3, #160	@ 0xa0
 8007f8c:	05db      	lsls	r3, r3, #23
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d013      	beq.n	8007fba <HAL_GPIO_Init+0x1ca>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a45      	ldr	r2, [pc, #276]	@ (80080ac <HAL_GPIO_Init+0x2bc>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d00d      	beq.n	8007fb6 <HAL_GPIO_Init+0x1c6>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a44      	ldr	r2, [pc, #272]	@ (80080b0 <HAL_GPIO_Init+0x2c0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d007      	beq.n	8007fb2 <HAL_GPIO_Init+0x1c2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a43      	ldr	r2, [pc, #268]	@ (80080b4 <HAL_GPIO_Init+0x2c4>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d101      	bne.n	8007fae <HAL_GPIO_Init+0x1be>
 8007faa:	2303      	movs	r3, #3
 8007fac:	e006      	b.n	8007fbc <HAL_GPIO_Init+0x1cc>
 8007fae:	2305      	movs	r3, #5
 8007fb0:	e004      	b.n	8007fbc <HAL_GPIO_Init+0x1cc>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e002      	b.n	8007fbc <HAL_GPIO_Init+0x1cc>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e000      	b.n	8007fbc <HAL_GPIO_Init+0x1cc>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	2103      	movs	r1, #3
 8007fc0:	400a      	ands	r2, r1
 8007fc2:	00d2      	lsls	r2, r2, #3
 8007fc4:	4093      	lsls	r3, r2
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007fcc:	4936      	ldr	r1, [pc, #216]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	089b      	lsrs	r3, r3, #2
 8007fd2:	3318      	adds	r3, #24
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	693a      	ldr	r2, [r7, #16]
 8007fd8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fda:	4b33      	ldr	r3, [pc, #204]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	43da      	mvns	r2, r3
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	2380      	movs	r3, #128	@ 0x80
 8007ff0:	035b      	lsls	r3, r3, #13
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007ff6:	693a      	ldr	r2, [r7, #16]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008004:	4b28      	ldr	r3, [pc, #160]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	43da      	mvns	r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	4013      	ands	r3, r2
 8008012:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	2380      	movs	r3, #128	@ 0x80
 800801a:	039b      	lsls	r3, r3, #14
 800801c:	4013      	ands	r3, r2
 800801e:	d003      	beq.n	8008028 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8008020:	693a      	ldr	r2, [r7, #16]
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008028:	4b1f      	ldr	r3, [pc, #124]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800802e:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8008030:	2384      	movs	r3, #132	@ 0x84
 8008032:	58d3      	ldr	r3, [r2, r3]
 8008034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	43da      	mvns	r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4013      	ands	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	685a      	ldr	r2, [r3, #4]
 8008044:	2380      	movs	r3, #128	@ 0x80
 8008046:	029b      	lsls	r3, r3, #10
 8008048:	4013      	ands	r3, r2
 800804a:	d003      	beq.n	8008054 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008054:	4914      	ldr	r1, [pc, #80]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8008056:	2284      	movs	r2, #132	@ 0x84
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800805c:	4a12      	ldr	r2, [pc, #72]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 800805e:	2380      	movs	r3, #128	@ 0x80
 8008060:	58d3      	ldr	r3, [r2, r3]
 8008062:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	43da      	mvns	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	4013      	ands	r3, r2
 800806c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	2380      	movs	r3, #128	@ 0x80
 8008074:	025b      	lsls	r3, r3, #9
 8008076:	4013      	ands	r3, r2
 8008078:	d003      	beq.n	8008082 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800807a:	693a      	ldr	r2, [r7, #16]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008082:	4909      	ldr	r1, [pc, #36]	@ (80080a8 <HAL_GPIO_Init+0x2b8>)
 8008084:	2280      	movs	r2, #128	@ 0x80
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	3301      	adds	r3, #1
 800808e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	40da      	lsrs	r2, r3
 8008098:	1e13      	subs	r3, r2, #0
 800809a:	d000      	beq.n	800809e <HAL_GPIO_Init+0x2ae>
 800809c:	e6b0      	b.n	8007e00 <HAL_GPIO_Init+0x10>
  }
}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	46c0      	nop			@ (mov r8, r8)
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b006      	add	sp, #24
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40021800 	.word	0x40021800
 80080ac:	50000400 	.word	0x50000400
 80080b0:	50000800 	.word	0x50000800
 80080b4:	50000c00 	.word	0x50000c00

080080b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	000a      	movs	r2, r1
 80080c2:	1cbb      	adds	r3, r7, #2
 80080c4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	1cba      	adds	r2, r7, #2
 80080cc:	8812      	ldrh	r2, [r2, #0]
 80080ce:	4013      	ands	r3, r2
 80080d0:	d004      	beq.n	80080dc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80080d2:	230f      	movs	r3, #15
 80080d4:	18fb      	adds	r3, r7, r3
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
 80080da:	e003      	b.n	80080e4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80080dc:	230f      	movs	r3, #15
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80080e4:	230f      	movs	r3, #15
 80080e6:	18fb      	adds	r3, r7, r3
 80080e8:	781b      	ldrb	r3, [r3, #0]
}
 80080ea:	0018      	movs	r0, r3
 80080ec:	46bd      	mov	sp, r7
 80080ee:	b004      	add	sp, #16
 80080f0:	bd80      	pop	{r7, pc}

080080f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b082      	sub	sp, #8
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	0008      	movs	r0, r1
 80080fc:	0011      	movs	r1, r2
 80080fe:	1cbb      	adds	r3, r7, #2
 8008100:	1c02      	adds	r2, r0, #0
 8008102:	801a      	strh	r2, [r3, #0]
 8008104:	1c7b      	adds	r3, r7, #1
 8008106:	1c0a      	adds	r2, r1, #0
 8008108:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800810a:	1c7b      	adds	r3, r7, #1
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d004      	beq.n	800811c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008112:	1cbb      	adds	r3, r7, #2
 8008114:	881a      	ldrh	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800811a:	e003      	b.n	8008124 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800811c:	1cbb      	adds	r3, r7, #2
 800811e:	881a      	ldrh	r2, [r3, #0]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008124:	46c0      	nop			@ (mov r8, r8)
 8008126:	46bd      	mov	sp, r7
 8008128:	b002      	add	sp, #8
 800812a:	bd80      	pop	{r7, pc}

0800812c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	0002      	movs	r2, r0
 8008134:	1dbb      	adds	r3, r7, #6
 8008136:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8008138:	4b10      	ldr	r3, [pc, #64]	@ (800817c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	1dba      	adds	r2, r7, #6
 800813e:	8812      	ldrh	r2, [r2, #0]
 8008140:	4013      	ands	r3, r2
 8008142:	d008      	beq.n	8008156 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8008144:	4b0d      	ldr	r3, [pc, #52]	@ (800817c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008146:	1dba      	adds	r2, r7, #6
 8008148:	8812      	ldrh	r2, [r2, #0]
 800814a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800814c:	1dbb      	adds	r3, r7, #6
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	0018      	movs	r0, r3
 8008152:	f7fb fc51 	bl	80039f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	1dba      	adds	r2, r7, #6
 800815c:	8812      	ldrh	r2, [r2, #0]
 800815e:	4013      	ands	r3, r2
 8008160:	d008      	beq.n	8008174 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8008162:	4b06      	ldr	r3, [pc, #24]	@ (800817c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008164:	1dba      	adds	r2, r7, #6
 8008166:	8812      	ldrh	r2, [r2, #0]
 8008168:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800816a:	1dbb      	adds	r3, r7, #6
 800816c:	881b      	ldrh	r3, [r3, #0]
 800816e:	0018      	movs	r0, r3
 8008170:	f7fb fc18 	bl	80039a4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8008174:	46c0      	nop			@ (mov r8, r8)
 8008176:	46bd      	mov	sp, r7
 8008178:	b002      	add	sp, #8
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40021800 	.word	0x40021800

08008180 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d101      	bne.n	8008192 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	e097      	b.n	80082c2 <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2236      	movs	r2, #54	@ 0x36
 8008196:	5c9b      	ldrb	r3, [r3, r2]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d113      	bne.n	80081c6 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2235      	movs	r2, #53	@ 0x35
 80081a2:	2100      	movs	r1, #0
 80081a4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0018      	movs	r0, r3
 80081aa:	f000 fa8f 	bl	80086cc <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d102      	bne.n	80081bc <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a44      	ldr	r2, [pc, #272]	@ (80082cc <HAL_LPTIM_Init+0x14c>)
 80081ba:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	0010      	movs	r0, r2
 80081c4:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2236      	movs	r2, #54	@ 0x36
 80081ca:	2102      	movs	r1, #2
 80081cc:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d005      	beq.n	80081ea <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80081e2:	2380      	movs	r3, #128	@ 0x80
 80081e4:	041b      	lsls	r3, r3, #16
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d103      	bne.n	80081f2 <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	221e      	movs	r2, #30
 80081ee:	4393      	bics	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	4a36      	ldr	r2, [pc, #216]	@ (80082d0 <HAL_LPTIM_Init+0x150>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4a35      	ldr	r2, [pc, #212]	@ (80082d4 <HAL_LPTIM_Init+0x154>)
 8008200:	4013      	ands	r3, r2
 8008202:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	4a34      	ldr	r2, [pc, #208]	@ (80082d8 <HAL_LPTIM_Init+0x158>)
 8008208:	4013      	ands	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008214:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800821a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8008220:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8008226:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d107      	bne.n	8008246 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800823e:	4313      	orrs	r3, r2
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d005      	beq.n	800825a <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008252:	2380      	movs	r3, #128	@ 0x80
 8008254:	041b      	lsls	r3, r3, #16
 8008256:	429a      	cmp	r2, r3
 8008258:	d107      	bne.n	800826a <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008262:	4313      	orrs	r3, r2
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4313      	orrs	r3, r2
 8008268:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	4a18      	ldr	r2, [pc, #96]	@ (80082d0 <HAL_LPTIM_Init+0x150>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00a      	beq.n	800828a <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800827c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8008282:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a11      	ldr	r2, [pc, #68]	@ (80082dc <HAL_LPTIM_Init+0x15c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d108      	bne.n	80082ae <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80082ac:	e004      	b.n	80082b8 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80082b6:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2236      	movs	r2, #54	@ 0x36
 80082bc:	2101      	movs	r1, #1
 80082be:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	0018      	movs	r0, r3
 80082c4:	46bd      	mov	sp, r7
 80082c6:	b004      	add	sp, #16
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	46c0      	nop			@ (mov r8, r8)
 80082cc:	08004f85 	.word	0x08004f85
 80082d0:	0000ffff 	.word	0x0000ffff
 80082d4:	ffff1f3f 	.word	0xffff1f3f
 80082d8:	ff19f1fe 	.word	0xff19f1fe
 80082dc:	40007c00 	.word	0x40007c00

080082e0 <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2236      	movs	r2, #54	@ 0x36
 80082f0:	2102      	movs	r1, #2
 80082f2:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68da      	ldr	r2, [r3, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2180      	movs	r1, #128	@ 0x80
 8008300:	0349      	lsls	r1, r1, #13
 8008302:	430a      	orrs	r2, r1
 8008304:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	691a      	ldr	r2, [r3, #16]
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2101      	movs	r1, #1
 8008312:	430a      	orrs	r2, r1
 8008314:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2210      	movs	r2, #16
 800831c:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2110      	movs	r1, #16
 800832a:	0018      	movs	r0, r3
 800832c:	f000 f9fa 	bl	8008724 <LPTIM_WaitForFlag>
 8008330:	0003      	movs	r3, r0
 8008332:	2b03      	cmp	r3, #3
 8008334:	d101      	bne.n	800833a <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e060      	b.n	80083fc <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2208      	movs	r2, #8
 8008340:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2108      	movs	r1, #8
 800834e:	0018      	movs	r0, r3
 8008350:	f000 f9e8 	bl	8008724 <LPTIM_WaitForFlag>
 8008354:	0003      	movs	r3, r0
 8008356:	2b03      	cmp	r3, #3
 8008358:	d101      	bne.n	800835e <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e04e      	b.n	80083fc <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	0018      	movs	r0, r3
 8008362:	f000 fa17 	bl	8008794 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	0018      	movs	r0, r3
 800836a:	f000 f9a3 	bl	80086b4 <HAL_LPTIM_GetState>
 800836e:	0003      	movs	r3, r0
 8008370:	2b03      	cmp	r3, #3
 8008372:	d101      	bne.n	8008378 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e041      	b.n	80083fc <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2110      	movs	r1, #16
 8008384:	430a      	orrs	r2, r1
 8008386:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2108      	movs	r1, #8
 8008394:	430a      	orrs	r2, r1
 8008396:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	689a      	ldr	r2, [r3, #8]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2102      	movs	r1, #2
 80083a4:	430a      	orrs	r2, r1
 80083a6:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2101      	movs	r1, #1
 80083b4:	430a      	orrs	r2, r1
 80083b6:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	4a11      	ldr	r2, [pc, #68]	@ (8008404 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d007      	beq.n	80083d2 <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2104      	movs	r1, #4
 80083ce:	430a      	orrs	r2, r1
 80083d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	691a      	ldr	r2, [r3, #16]
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2101      	movs	r1, #1
 80083de:	430a      	orrs	r2, r1
 80083e0:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	691a      	ldr	r2, [r3, #16]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2102      	movs	r1, #2
 80083ee:	430a      	orrs	r2, r1
 80083f0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2236      	movs	r2, #54	@ 0x36
 80083f6:	2101      	movs	r1, #1
 80083f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	0018      	movs	r0, r3
 80083fe:	46bd      	mov	sp, r7
 8008400:	b004      	add	sp, #16
 8008402:	bd80      	pop	{r7, pc}
 8008404:	0000ffff 	.word	0x0000ffff

08008408 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2201      	movs	r2, #1
 8008418:	4013      	ands	r3, r2
 800841a:	2b01      	cmp	r3, #1
 800841c:	d10f      	bne.n	800843e <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2201      	movs	r2, #1
 8008426:	4013      	ands	r3, r2
 8008428:	2b01      	cmp	r3, #1
 800842a:	d108      	bne.n	800843e <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2201      	movs	r2, #1
 8008432:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	0010      	movs	r0, r2
 800843c:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2202      	movs	r2, #2
 8008446:	4013      	ands	r3, r2
 8008448:	2b02      	cmp	r3, #2
 800844a:	d10f      	bne.n	800846c <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	2202      	movs	r2, #2
 8008454:	4013      	ands	r3, r2
 8008456:	2b02      	cmp	r3, #2
 8008458:	d108      	bne.n	800846c <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2202      	movs	r2, #2
 8008460:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	0010      	movs	r0, r2
 800846a:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2204      	movs	r2, #4
 8008474:	4013      	ands	r3, r2
 8008476:	2b04      	cmp	r3, #4
 8008478:	d10f      	bne.n	800849a <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	2204      	movs	r2, #4
 8008482:	4013      	ands	r3, r2
 8008484:	2b04      	cmp	r3, #4
 8008486:	d108      	bne.n	800849a <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2204      	movs	r2, #4
 800848e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	0010      	movs	r0, r2
 8008498:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2208      	movs	r2, #8
 80084a2:	4013      	ands	r3, r2
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d10f      	bne.n	80084c8 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	2208      	movs	r2, #8
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b08      	cmp	r3, #8
 80084b4:	d108      	bne.n	80084c8 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2208      	movs	r2, #8
 80084bc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	0010      	movs	r0, r2
 80084c6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2210      	movs	r2, #16
 80084d0:	4013      	ands	r3, r2
 80084d2:	2b10      	cmp	r3, #16
 80084d4:	d10f      	bne.n	80084f6 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2210      	movs	r2, #16
 80084de:	4013      	ands	r3, r2
 80084e0:	2b10      	cmp	r3, #16
 80084e2:	d108      	bne.n	80084f6 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2210      	movs	r2, #16
 80084ea:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	0010      	movs	r0, r2
 80084f4:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2220      	movs	r2, #32
 80084fe:	4013      	ands	r3, r2
 8008500:	2b20      	cmp	r3, #32
 8008502:	d10f      	bne.n	8008524 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	2220      	movs	r2, #32
 800850c:	4013      	ands	r3, r2
 800850e:	2b20      	cmp	r3, #32
 8008510:	d108      	bne.n	8008524 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2220      	movs	r2, #32
 8008518:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	0010      	movs	r0, r2
 8008522:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2240      	movs	r2, #64	@ 0x40
 800852c:	4013      	ands	r3, r2
 800852e:	2b40      	cmp	r3, #64	@ 0x40
 8008530:	d10f      	bne.n	8008552 <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	2240      	movs	r2, #64	@ 0x40
 800853a:	4013      	ands	r3, r2
 800853c:	2b40      	cmp	r3, #64	@ 0x40
 800853e:	d108      	bne.n	8008552 <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2240      	movs	r2, #64	@ 0x40
 8008546:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	0010      	movs	r0, r2
 8008550:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8008552:	46c0      	nop			@ (mov r8, r8)
 8008554:	46bd      	mov	sp, r7
 8008556:	b002      	add	sp, #8
 8008558:	bd80      	pop	{r7, pc}

0800855a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800855a:	b580      	push	{r7, lr}
 800855c:	b082      	sub	sp, #8
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8008562:	46c0      	nop			@ (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	b002      	add	sp, #8
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8008572:	46c0      	nop			@ (mov r8, r8)
 8008574:	46bd      	mov	sp, r7
 8008576:	b002      	add	sp, #8
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b082      	sub	sp, #8
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8008582:	46c0      	nop			@ (mov r8, r8)
 8008584:	46bd      	mov	sp, r7
 8008586:	b002      	add	sp, #8
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008592:	46c0      	nop			@ (mov r8, r8)
 8008594:	46bd      	mov	sp, r7
 8008596:	b002      	add	sp, #8
 8008598:	bd80      	pop	{r7, pc}

0800859a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	b082      	sub	sp, #8
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80085a2:	46c0      	nop			@ (mov r8, r8)
 80085a4:	46bd      	mov	sp, r7
 80085a6:	b002      	add	sp, #8
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b082      	sub	sp, #8
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80085b2:	46c0      	nop			@ (mov r8, r8)
 80085b4:	46bd      	mov	sp, r7
 80085b6:	b002      	add	sp, #8
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80085c2:	46c0      	nop			@ (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	b002      	add	sp, #8
 80085c8:	bd80      	pop	{r7, pc}
	...

080085cc <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	607a      	str	r2, [r7, #4]
 80085d6:	230b      	movs	r3, #11
 80085d8:	18fb      	adds	r3, r7, r3
 80085da:	1c0a      	adds	r2, r1, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085de:	2317      	movs	r3, #23
 80085e0:	18fb      	adds	r3, r7, r3
 80085e2:	2200      	movs	r2, #0
 80085e4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d101      	bne.n	80085f0 <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e05a      	b.n	80086a6 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2236      	movs	r2, #54	@ 0x36
 80085f4:	5c9b      	ldrb	r3, [r3, r2]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d132      	bne.n	8008662 <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 80085fc:	230b      	movs	r3, #11
 80085fe:	18fb      	adds	r3, r7, r3
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2b08      	cmp	r3, #8
 8008604:	d828      	bhi.n	8008658 <HAL_LPTIM_RegisterCallback+0x8c>
 8008606:	009a      	lsls	r2, r3, #2
 8008608:	4b29      	ldr	r3, [pc, #164]	@ (80086b0 <HAL_LPTIM_RegisterCallback+0xe4>)
 800860a:	18d3      	adds	r3, r2, r3
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008616:	e043      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800861e:	e03f      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8008626:	e03b      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 800862e:	e037      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8008636:	e033      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800863e:	e02f      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008646:	e02b      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800864e:	e027      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008656:	e023      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8008658:	2317      	movs	r3, #23
 800865a:	18fb      	adds	r3, r7, r3
 800865c:	2201      	movs	r2, #1
 800865e:	701a      	strb	r2, [r3, #0]
        break;
 8008660:	e01e      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2236      	movs	r2, #54	@ 0x36
 8008666:	5c9b      	ldrb	r3, [r3, r2]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d114      	bne.n	8008698 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 800866e:	230b      	movs	r3, #11
 8008670:	18fb      	adds	r3, r7, r3
 8008672:	781b      	ldrb	r3, [r3, #0]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <HAL_LPTIM_RegisterCallback+0xb2>
 8008678:	2b01      	cmp	r3, #1
 800867a:	d004      	beq.n	8008686 <HAL_LPTIM_RegisterCallback+0xba>
 800867c:	e007      	b.n	800868e <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8008684:	e00c      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 800868c:	e008      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 800868e:	2317      	movs	r3, #23
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	2201      	movs	r2, #1
 8008694:	701a      	strb	r2, [r3, #0]
        break;
 8008696:	e003      	b.n	80086a0 <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8008698:	2317      	movs	r3, #23
 800869a:	18fb      	adds	r3, r7, r3
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80086a0:	2317      	movs	r3, #23
 80086a2:	18fb      	adds	r3, r7, r3
 80086a4:	781b      	ldrb	r3, [r3, #0]
}
 80086a6:	0018      	movs	r0, r3
 80086a8:	46bd      	mov	sp, r7
 80086aa:	b006      	add	sp, #24
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	46c0      	nop			@ (mov r8, r8)
 80086b0:	0800dd10 	.word	0x0800dd10

080086b4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2236      	movs	r2, #54	@ 0x36
 80086c0:	5c9b      	ldrb	r3, [r3, r2]
 80086c2:	b2db      	uxtb	r3, r3
}
 80086c4:	0018      	movs	r0, r3
 80086c6:	46bd      	mov	sp, r7
 80086c8:	b002      	add	sp, #8
 80086ca:	bd80      	pop	{r7, pc}

080086cc <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008708 <LPTIM_ResetCallback+0x3c>)
 80086d8:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a0b      	ldr	r2, [pc, #44]	@ (800870c <LPTIM_ResetCallback+0x40>)
 80086de:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a0b      	ldr	r2, [pc, #44]	@ (8008710 <LPTIM_ResetCallback+0x44>)
 80086e4:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	4a0a      	ldr	r2, [pc, #40]	@ (8008714 <LPTIM_ResetCallback+0x48>)
 80086ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008718 <LPTIM_ResetCallback+0x4c>)
 80086f0:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a09      	ldr	r2, [pc, #36]	@ (800871c <LPTIM_ResetCallback+0x50>)
 80086f6:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a09      	ldr	r2, [pc, #36]	@ (8008720 <LPTIM_ResetCallback+0x54>)
 80086fc:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80086fe:	46c0      	nop			@ (mov r8, r8)
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}
 8008706:	46c0      	nop			@ (mov r8, r8)
 8008708:	0800855b 	.word	0x0800855b
 800870c:	0800856b 	.word	0x0800856b
 8008710:	0800857b 	.word	0x0800857b
 8008714:	0800858b 	.word	0x0800858b
 8008718:	0800859b 	.word	0x0800859b
 800871c:	080085ab 	.word	0x080085ab
 8008720:	080085bb 	.word	0x080085bb

08008724 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800872e:	230f      	movs	r3, #15
 8008730:	18fb      	adds	r3, r7, r3
 8008732:	2200      	movs	r2, #0
 8008734:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008736:	4b15      	ldr	r3, [pc, #84]	@ (800878c <LPTIM_WaitForFlag+0x68>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4915      	ldr	r1, [pc, #84]	@ (8008790 <LPTIM_WaitForFlag+0x6c>)
 800873c:	0018      	movs	r0, r3
 800873e:	f7f7 fce1 	bl	8000104 <__udivsi3>
 8008742:	0003      	movs	r3, r0
 8008744:	001a      	movs	r2, r3
 8008746:	0013      	movs	r3, r2
 8008748:	015b      	lsls	r3, r3, #5
 800874a:	1a9b      	subs	r3, r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	189b      	adds	r3, r3, r2
 8008750:	00db      	lsls	r3, r3, #3
 8008752:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3b01      	subs	r3, #1
 8008758:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8008760:	230f      	movs	r3, #15
 8008762:	18fb      	adds	r3, r7, r3
 8008764:	2203      	movs	r2, #3
 8008766:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4013      	ands	r3, r2
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d002      	beq.n	800877e <LPTIM_WaitForFlag+0x5a>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1ea      	bne.n	8008754 <LPTIM_WaitForFlag+0x30>

  return result;
 800877e:	230f      	movs	r3, #15
 8008780:	18fb      	adds	r3, r7, r3
 8008782:	781b      	ldrb	r3, [r3, #0]
}
 8008784:	0018      	movs	r0, r3
 8008786:	46bd      	mov	sp, r7
 8008788:	b004      	add	sp, #16
 800878a:	bd80      	pop	{r7, pc}
 800878c:	2000044c 	.word	0x2000044c
 8008790:	00004e20 	.word	0x00004e20

08008794 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08c      	sub	sp, #48	@ 0x30
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087a0:	f3ef 8310 	mrs	r3, PRIMASK
 80087a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80087a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80087a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087aa:	2301      	movs	r3, #1
 80087ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f383 8810 	msr	PRIMASK, r3
}
 80087b4:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a72      	ldr	r2, [pc, #456]	@ (8008984 <LPTIM_Disable+0x1f0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <LPTIM_Disable+0x34>
 80087c0:	4a71      	ldr	r2, [pc, #452]	@ (8008988 <LPTIM_Disable+0x1f4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d007      	beq.n	80087d6 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80087c6:	e00d      	b.n	80087e4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80087c8:	4b70      	ldr	r3, [pc, #448]	@ (800898c <LPTIM_Disable+0x1f8>)
 80087ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087cc:	23c0      	movs	r3, #192	@ 0xc0
 80087ce:	031b      	lsls	r3, r3, #12
 80087d0:	4013      	ands	r3, r2
 80087d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80087d4:	e006      	b.n	80087e4 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80087d6:	4b6d      	ldr	r3, [pc, #436]	@ (800898c <LPTIM_Disable+0x1f8>)
 80087d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80087da:	23c0      	movs	r3, #192	@ 0xc0
 80087dc:	039b      	lsls	r3, r3, #14
 80087de:	4013      	ands	r3, r2
 80087e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80087e2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880a:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a5c      	ldr	r2, [pc, #368]	@ (8008984 <LPTIM_Disable+0x1f0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d003      	beq.n	800881e <LPTIM_Disable+0x8a>
 8008816:	4a5c      	ldr	r2, [pc, #368]	@ (8008988 <LPTIM_Disable+0x1f4>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00e      	beq.n	800883a <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800881c:	e01b      	b.n	8008856 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800881e:	4b5b      	ldr	r3, [pc, #364]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008820:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008822:	4b5a      	ldr	r3, [pc, #360]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008824:	2180      	movs	r1, #128	@ 0x80
 8008826:	0609      	lsls	r1, r1, #24
 8008828:	430a      	orrs	r2, r1
 800882a:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800882c:	4b57      	ldr	r3, [pc, #348]	@ (800898c <LPTIM_Disable+0x1f8>)
 800882e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008830:	4b56      	ldr	r3, [pc, #344]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008832:	0052      	lsls	r2, r2, #1
 8008834:	0852      	lsrs	r2, r2, #1
 8008836:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008838:	e00d      	b.n	8008856 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800883a:	4b54      	ldr	r3, [pc, #336]	@ (800898c <LPTIM_Disable+0x1f8>)
 800883c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883e:	4b53      	ldr	r3, [pc, #332]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008840:	2180      	movs	r1, #128	@ 0x80
 8008842:	05c9      	lsls	r1, r1, #23
 8008844:	430a      	orrs	r2, r1
 8008846:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008848:	4b50      	ldr	r3, [pc, #320]	@ (800898c <LPTIM_Disable+0x1f8>)
 800884a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800884c:	4b4f      	ldr	r3, [pc, #316]	@ (800898c <LPTIM_Disable+0x1f8>)
 800884e:	4950      	ldr	r1, [pc, #320]	@ (8008990 <LPTIM_Disable+0x1fc>)
 8008850:	400a      	ands	r2, r1
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 8008854:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d103      	bne.n	8008864 <LPTIM_Disable+0xd0>
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d100      	bne.n	8008864 <LPTIM_Disable+0xd0>
 8008862:	e071      	b.n	8008948 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a46      	ldr	r2, [pc, #280]	@ (8008984 <LPTIM_Disable+0x1f0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d003      	beq.n	8008876 <LPTIM_Disable+0xe2>
 800886e:	4a46      	ldr	r2, [pc, #280]	@ (8008988 <LPTIM_Disable+0x1f4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d007      	beq.n	8008884 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8008874:	e00d      	b.n	8008892 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8008876:	4b45      	ldr	r3, [pc, #276]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008878:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800887a:	4b44      	ldr	r3, [pc, #272]	@ (800898c <LPTIM_Disable+0x1f8>)
 800887c:	4945      	ldr	r1, [pc, #276]	@ (8008994 <LPTIM_Disable+0x200>)
 800887e:	400a      	ands	r2, r1
 8008880:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008882:	e006      	b.n	8008892 <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008884:	4b41      	ldr	r3, [pc, #260]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008886:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008888:	4b40      	ldr	r3, [pc, #256]	@ (800898c <LPTIM_Disable+0x1f8>)
 800888a:	4943      	ldr	r1, [pc, #268]	@ (8008998 <LPTIM_Disable+0x204>)
 800888c:	400a      	ands	r2, r1
 800888e:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008890:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d01b      	beq.n	80088d0 <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	691a      	ldr	r2, [r3, #16]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2101      	movs	r1, #1
 80088a4:	430a      	orrs	r2, r1
 80088a6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69fa      	ldr	r2, [r7, #28]
 80088ae:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2108      	movs	r1, #8
 80088b4:	0018      	movs	r0, r3
 80088b6:	f7ff ff35 	bl	8008724 <LPTIM_WaitForFlag>
 80088ba:	0003      	movs	r3, r0
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d103      	bne.n	80088c8 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2236      	movs	r2, #54	@ 0x36
 80088c4:	2103      	movs	r1, #3
 80088c6:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2208      	movs	r2, #8
 80088ce:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d01b      	beq.n	800890e <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2101      	movs	r1, #1
 80088e2:	430a      	orrs	r2, r1
 80088e4:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	69ba      	ldr	r2, [r7, #24]
 80088ec:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2110      	movs	r1, #16
 80088f2:	0018      	movs	r0, r3
 80088f4:	f7ff ff16 	bl	8008724 <LPTIM_WaitForFlag>
 80088f8:	0003      	movs	r3, r0
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d103      	bne.n	8008906 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2236      	movs	r2, #54	@ 0x36
 8008902:	2103      	movs	r1, #3
 8008904:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2210      	movs	r2, #16
 800890c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1c      	ldr	r2, [pc, #112]	@ (8008984 <LPTIM_Disable+0x1f0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d003      	beq.n	8008920 <LPTIM_Disable+0x18c>
 8008918:	4a1b      	ldr	r2, [pc, #108]	@ (8008988 <LPTIM_Disable+0x1f4>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d00a      	beq.n	8008934 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800891e:	e013      	b.n	8008948 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008920:	4b1a      	ldr	r3, [pc, #104]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008924:	4a1b      	ldr	r2, [pc, #108]	@ (8008994 <LPTIM_Disable+0x200>)
 8008926:	4013      	ands	r3, r2
 8008928:	0019      	movs	r1, r3
 800892a:	4b18      	ldr	r3, [pc, #96]	@ (800898c <LPTIM_Disable+0x1f8>)
 800892c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800892e:	430a      	orrs	r2, r1
 8008930:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008932:	e009      	b.n	8008948 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8008934:	4b15      	ldr	r3, [pc, #84]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008938:	4a17      	ldr	r2, [pc, #92]	@ (8008998 <LPTIM_Disable+0x204>)
 800893a:	4013      	ands	r3, r2
 800893c:	0019      	movs	r1, r3
 800893e:	4b13      	ldr	r3, [pc, #76]	@ (800898c <LPTIM_Disable+0x1f8>)
 8008940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008942:	430a      	orrs	r2, r1
 8008944:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008946:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	691a      	ldr	r2, [r3, #16]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2101      	movs	r1, #1
 8008954:	438a      	bics	r2, r1
 8008956:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800895e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f383 8810 	msr	PRIMASK, r3
}
 800897a:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800897c:	46c0      	nop			@ (mov r8, r8)
 800897e:	46bd      	mov	sp, r7
 8008980:	b00c      	add	sp, #48	@ 0x30
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40007c00 	.word	0x40007c00
 8008988:	40009400 	.word	0x40009400
 800898c:	40021000 	.word	0x40021000
 8008990:	bfffffff 	.word	0xbfffffff
 8008994:	fff3ffff 	.word	0xfff3ffff
 8008998:	ffcfffff 	.word	0xffcfffff

0800899c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80089a4:	4b19      	ldr	r3, [pc, #100]	@ (8008a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a19      	ldr	r2, [pc, #100]	@ (8008a10 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80089aa:	4013      	ands	r3, r2
 80089ac:	0019      	movs	r1, r3
 80089ae:	4b17      	ldr	r3, [pc, #92]	@ (8008a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	2380      	movs	r3, #128	@ 0x80
 80089ba:	009b      	lsls	r3, r3, #2
 80089bc:	429a      	cmp	r2, r3
 80089be:	d11f      	bne.n	8008a00 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80089c0:	4b14      	ldr	r3, [pc, #80]	@ (8008a14 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	0013      	movs	r3, r2
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	189b      	adds	r3, r3, r2
 80089ca:	005b      	lsls	r3, r3, #1
 80089cc:	4912      	ldr	r1, [pc, #72]	@ (8008a18 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7f7 fb98 	bl	8000104 <__udivsi3>
 80089d4:	0003      	movs	r3, r0
 80089d6:	3301      	adds	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089da:	e008      	b.n	80089ee <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	60fb      	str	r3, [r7, #12]
 80089e8:	e001      	b.n	80089ee <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e009      	b.n	8008a02 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089ee:	4b07      	ldr	r3, [pc, #28]	@ (8008a0c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80089f0:	695a      	ldr	r2, [r3, #20]
 80089f2:	2380      	movs	r3, #128	@ 0x80
 80089f4:	00db      	lsls	r3, r3, #3
 80089f6:	401a      	ands	r2, r3
 80089f8:	2380      	movs	r3, #128	@ 0x80
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d0ed      	beq.n	80089dc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	0018      	movs	r0, r3
 8008a04:	46bd      	mov	sp, r7
 8008a06:	b004      	add	sp, #16
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	46c0      	nop			@ (mov r8, r8)
 8008a0c:	40007000 	.word	0x40007000
 8008a10:	fffff9ff 	.word	0xfffff9ff
 8008a14:	2000044c 	.word	0x2000044c
 8008a18:	000f4240 	.word	0x000f4240

08008a1c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8008a20:	4b03      	ldr	r3, [pc, #12]	@ (8008a30 <LL_RCC_GetAPB1Prescaler+0x14>)
 8008a22:	689a      	ldr	r2, [r3, #8]
 8008a24:	23e0      	movs	r3, #224	@ 0xe0
 8008a26:	01db      	lsls	r3, r3, #7
 8008a28:	4013      	ands	r3, r2
}
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	40021000 	.word	0x40021000

08008a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b088      	sub	sp, #32
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e2fe      	b.n	8009044 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d100      	bne.n	8008a52 <HAL_RCC_OscConfig+0x1e>
 8008a50:	e07c      	b.n	8008b4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a52:	4bc3      	ldr	r3, [pc, #780]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	2238      	movs	r2, #56	@ 0x38
 8008a58:	4013      	ands	r3, r2
 8008a5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a5c:	4bc0      	ldr	r3, [pc, #768]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	2203      	movs	r2, #3
 8008a62:	4013      	ands	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d102      	bne.n	8008a72 <HAL_RCC_OscConfig+0x3e>
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d002      	beq.n	8008a78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d10b      	bne.n	8008a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a78:	4bb9      	ldr	r3, [pc, #740]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	2380      	movs	r3, #128	@ 0x80
 8008a7e:	029b      	lsls	r3, r3, #10
 8008a80:	4013      	ands	r3, r2
 8008a82:	d062      	beq.n	8008b4a <HAL_RCC_OscConfig+0x116>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d15e      	bne.n	8008b4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	e2d9      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	2380      	movs	r3, #128	@ 0x80
 8008a96:	025b      	lsls	r3, r3, #9
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d107      	bne.n	8008aac <HAL_RCC_OscConfig+0x78>
 8008a9c:	4bb0      	ldr	r3, [pc, #704]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4baf      	ldr	r3, [pc, #700]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008aa2:	2180      	movs	r1, #128	@ 0x80
 8008aa4:	0249      	lsls	r1, r1, #9
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e020      	b.n	8008aee <HAL_RCC_OscConfig+0xba>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685a      	ldr	r2, [r3, #4]
 8008ab0:	23a0      	movs	r3, #160	@ 0xa0
 8008ab2:	02db      	lsls	r3, r3, #11
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d10e      	bne.n	8008ad6 <HAL_RCC_OscConfig+0xa2>
 8008ab8:	4ba9      	ldr	r3, [pc, #676]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	4ba8      	ldr	r3, [pc, #672]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008abe:	2180      	movs	r1, #128	@ 0x80
 8008ac0:	02c9      	lsls	r1, r1, #11
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	4ba6      	ldr	r3, [pc, #664]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	4ba5      	ldr	r3, [pc, #660]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008acc:	2180      	movs	r1, #128	@ 0x80
 8008ace:	0249      	lsls	r1, r1, #9
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	e00b      	b.n	8008aee <HAL_RCC_OscConfig+0xba>
 8008ad6:	4ba2      	ldr	r3, [pc, #648]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	4ba1      	ldr	r3, [pc, #644]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008adc:	49a1      	ldr	r1, [pc, #644]	@ (8008d64 <HAL_RCC_OscConfig+0x330>)
 8008ade:	400a      	ands	r2, r1
 8008ae0:	601a      	str	r2, [r3, #0]
 8008ae2:	4b9f      	ldr	r3, [pc, #636]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ae8:	499f      	ldr	r1, [pc, #636]	@ (8008d68 <HAL_RCC_OscConfig+0x334>)
 8008aea:	400a      	ands	r2, r1
 8008aec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d014      	beq.n	8008b20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fd fb19 	bl	800612c <HAL_GetTick>
 8008afa:	0003      	movs	r3, r0
 8008afc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008afe:	e008      	b.n	8008b12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b00:	f7fd fb14 	bl	800612c <HAL_GetTick>
 8008b04:	0002      	movs	r2, r0
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	2b64      	cmp	r3, #100	@ 0x64
 8008b0c:	d901      	bls.n	8008b12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8008b0e:	2303      	movs	r3, #3
 8008b10:	e298      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b12:	4b93      	ldr	r3, [pc, #588]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	2380      	movs	r3, #128	@ 0x80
 8008b18:	029b      	lsls	r3, r3, #10
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	d0f0      	beq.n	8008b00 <HAL_RCC_OscConfig+0xcc>
 8008b1e:	e015      	b.n	8008b4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fd fb04 	bl	800612c <HAL_GetTick>
 8008b24:	0003      	movs	r3, r0
 8008b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b28:	e008      	b.n	8008b3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b2a:	f7fd faff 	bl	800612c <HAL_GetTick>
 8008b2e:	0002      	movs	r2, r0
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	1ad3      	subs	r3, r2, r3
 8008b34:	2b64      	cmp	r3, #100	@ 0x64
 8008b36:	d901      	bls.n	8008b3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e283      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b3c:	4b88      	ldr	r3, [pc, #544]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	2380      	movs	r3, #128	@ 0x80
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	4013      	ands	r3, r2
 8008b46:	d1f0      	bne.n	8008b2a <HAL_RCC_OscConfig+0xf6>
 8008b48:	e000      	b.n	8008b4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b4a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2202      	movs	r2, #2
 8008b52:	4013      	ands	r3, r2
 8008b54:	d100      	bne.n	8008b58 <HAL_RCC_OscConfig+0x124>
 8008b56:	e099      	b.n	8008c8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b58:	4b81      	ldr	r3, [pc, #516]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	2238      	movs	r2, #56	@ 0x38
 8008b5e:	4013      	ands	r3, r2
 8008b60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b62:	4b7f      	ldr	r3, [pc, #508]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	2203      	movs	r2, #3
 8008b68:	4013      	ands	r3, r2
 8008b6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	2b10      	cmp	r3, #16
 8008b70:	d102      	bne.n	8008b78 <HAL_RCC_OscConfig+0x144>
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d002      	beq.n	8008b7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d135      	bne.n	8008bea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b7e:	4b78      	ldr	r3, [pc, #480]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	2380      	movs	r3, #128	@ 0x80
 8008b84:	00db      	lsls	r3, r3, #3
 8008b86:	4013      	ands	r3, r2
 8008b88:	d005      	beq.n	8008b96 <HAL_RCC_OscConfig+0x162>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	e256      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b96:	4b72      	ldr	r3, [pc, #456]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	4a74      	ldr	r2, [pc, #464]	@ (8008d6c <HAL_RCC_OscConfig+0x338>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	0019      	movs	r1, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	021a      	lsls	r2, r3, #8
 8008ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d112      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008bb2:	4b6b      	ldr	r3, [pc, #428]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a6e      	ldr	r2, [pc, #440]	@ (8008d70 <HAL_RCC_OscConfig+0x33c>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	0019      	movs	r1, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691a      	ldr	r2, [r3, #16]
 8008bc0:	4b67      	ldr	r3, [pc, #412]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008bc6:	4b66      	ldr	r3, [pc, #408]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	0adb      	lsrs	r3, r3, #11
 8008bcc:	2207      	movs	r2, #7
 8008bce:	4013      	ands	r3, r2
 8008bd0:	4a68      	ldr	r2, [pc, #416]	@ (8008d74 <HAL_RCC_OscConfig+0x340>)
 8008bd2:	40da      	lsrs	r2, r3
 8008bd4:	4b68      	ldr	r3, [pc, #416]	@ (8008d78 <HAL_RCC_OscConfig+0x344>)
 8008bd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008bd8:	4b68      	ldr	r3, [pc, #416]	@ (8008d7c <HAL_RCC_OscConfig+0x348>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f7fd fa49 	bl	8006074 <HAL_InitTick>
 8008be2:	1e03      	subs	r3, r0, #0
 8008be4:	d051      	beq.n	8008c8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e22c      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d030      	beq.n	8008c54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8008bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8008d70 <HAL_RCC_OscConfig+0x33c>)
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	0019      	movs	r1, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	4b57      	ldr	r3, [pc, #348]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c02:	430a      	orrs	r2, r1
 8008c04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008c06:	4b56      	ldr	r3, [pc, #344]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b55      	ldr	r3, [pc, #340]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c0c:	2180      	movs	r1, #128	@ 0x80
 8008c0e:	0049      	lsls	r1, r1, #1
 8008c10:	430a      	orrs	r2, r1
 8008c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c14:	f7fd fa8a 	bl	800612c <HAL_GetTick>
 8008c18:	0003      	movs	r3, r0
 8008c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c1c:	e008      	b.n	8008c30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c1e:	f7fd fa85 	bl	800612c <HAL_GetTick>
 8008c22:	0002      	movs	r2, r0
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	1ad3      	subs	r3, r2, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d901      	bls.n	8008c30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	e209      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c30:	4b4b      	ldr	r3, [pc, #300]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c32:	681a      	ldr	r2, [r3, #0]
 8008c34:	2380      	movs	r3, #128	@ 0x80
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	4013      	ands	r3, r2
 8008c3a:	d0f0      	beq.n	8008c1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c3c:	4b48      	ldr	r3, [pc, #288]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	4a4a      	ldr	r2, [pc, #296]	@ (8008d6c <HAL_RCC_OscConfig+0x338>)
 8008c42:	4013      	ands	r3, r2
 8008c44:	0019      	movs	r1, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	021a      	lsls	r2, r3, #8
 8008c4c:	4b44      	ldr	r3, [pc, #272]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	605a      	str	r2, [r3, #4]
 8008c52:	e01b      	b.n	8008c8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8008c54:	4b42      	ldr	r3, [pc, #264]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	4b41      	ldr	r3, [pc, #260]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c5a:	4949      	ldr	r1, [pc, #292]	@ (8008d80 <HAL_RCC_OscConfig+0x34c>)
 8008c5c:	400a      	ands	r2, r1
 8008c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c60:	f7fd fa64 	bl	800612c <HAL_GetTick>
 8008c64:	0003      	movs	r3, r0
 8008c66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c68:	e008      	b.n	8008c7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c6a:	f7fd fa5f 	bl	800612c <HAL_GetTick>
 8008c6e:	0002      	movs	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e1e3      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c7c:	4b38      	ldr	r3, [pc, #224]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	2380      	movs	r3, #128	@ 0x80
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	4013      	ands	r3, r2
 8008c86:	d1f0      	bne.n	8008c6a <HAL_RCC_OscConfig+0x236>
 8008c88:	e000      	b.n	8008c8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c8a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2208      	movs	r2, #8
 8008c92:	4013      	ands	r3, r2
 8008c94:	d047      	beq.n	8008d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008c96:	4b32      	ldr	r3, [pc, #200]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	2238      	movs	r2, #56	@ 0x38
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	2b18      	cmp	r3, #24
 8008ca0:	d10a      	bne.n	8008cb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8008ca2:	4b2f      	ldr	r3, [pc, #188]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	4013      	ands	r3, r2
 8008caa:	d03c      	beq.n	8008d26 <HAL_RCC_OscConfig+0x2f2>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d138      	bne.n	8008d26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e1c5      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d019      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8008cc0:	4b27      	ldr	r3, [pc, #156]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008cc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008cc4:	4b26      	ldr	r3, [pc, #152]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ccc:	f7fd fa2e 	bl	800612c <HAL_GetTick>
 8008cd0:	0003      	movs	r3, r0
 8008cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cd6:	f7fd fa29 	bl	800612c <HAL_GetTick>
 8008cda:	0002      	movs	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e1ad      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cec:	2202      	movs	r2, #2
 8008cee:	4013      	ands	r3, r2
 8008cf0:	d0f1      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x2a2>
 8008cf2:	e018      	b.n	8008d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008cf6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008cf8:	4b19      	ldr	r3, [pc, #100]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	438a      	bics	r2, r1
 8008cfe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d00:	f7fd fa14 	bl	800612c <HAL_GetTick>
 8008d04:	0003      	movs	r3, r0
 8008d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d08:	e008      	b.n	8008d1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d0a:	f7fd fa0f 	bl	800612c <HAL_GetTick>
 8008d0e:	0002      	movs	r2, r0
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e193      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008d1c:	4b10      	ldr	r3, [pc, #64]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d20:	2202      	movs	r2, #2
 8008d22:	4013      	ands	r3, r2
 8008d24:	d1f1      	bne.n	8008d0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	4013      	ands	r3, r2
 8008d2e:	d100      	bne.n	8008d32 <HAL_RCC_OscConfig+0x2fe>
 8008d30:	e0c6      	b.n	8008ec0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d32:	231f      	movs	r3, #31
 8008d34:	18fb      	adds	r3, r7, r3
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008d3a:	4b09      	ldr	r3, [pc, #36]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2238      	movs	r2, #56	@ 0x38
 8008d40:	4013      	ands	r3, r2
 8008d42:	2b20      	cmp	r3, #32
 8008d44:	d11e      	bne.n	8008d84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8008d46:	4b06      	ldr	r3, [pc, #24]	@ (8008d60 <HAL_RCC_OscConfig+0x32c>)
 8008d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	d100      	bne.n	8008d52 <HAL_RCC_OscConfig+0x31e>
 8008d50:	e0b6      	b.n	8008ec0 <HAL_RCC_OscConfig+0x48c>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d000      	beq.n	8008d5c <HAL_RCC_OscConfig+0x328>
 8008d5a:	e0b1      	b.n	8008ec0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e171      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
 8008d60:	40021000 	.word	0x40021000
 8008d64:	fffeffff 	.word	0xfffeffff
 8008d68:	fffbffff 	.word	0xfffbffff
 8008d6c:	ffff80ff 	.word	0xffff80ff
 8008d70:	ffffc7ff 	.word	0xffffc7ff
 8008d74:	00f42400 	.word	0x00f42400
 8008d78:	2000044c 	.word	0x2000044c
 8008d7c:	20000450 	.word	0x20000450
 8008d80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d84:	4bb1      	ldr	r3, [pc, #708]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008d86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d88:	2380      	movs	r3, #128	@ 0x80
 8008d8a:	055b      	lsls	r3, r3, #21
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	d101      	bne.n	8008d94 <HAL_RCC_OscConfig+0x360>
 8008d90:	2301      	movs	r3, #1
 8008d92:	e000      	b.n	8008d96 <HAL_RCC_OscConfig+0x362>
 8008d94:	2300      	movs	r3, #0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d011      	beq.n	8008dbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008d9a:	4bac      	ldr	r3, [pc, #688]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d9e:	4bab      	ldr	r3, [pc, #684]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008da0:	2180      	movs	r1, #128	@ 0x80
 8008da2:	0549      	lsls	r1, r1, #21
 8008da4:	430a      	orrs	r2, r1
 8008da6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008da8:	4ba8      	ldr	r3, [pc, #672]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	055b      	lsls	r3, r3, #21
 8008db0:	4013      	ands	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
 8008db4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008db6:	231f      	movs	r3, #31
 8008db8:	18fb      	adds	r3, r7, r3
 8008dba:	2201      	movs	r2, #1
 8008dbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008dbe:	4ba4      	ldr	r3, [pc, #656]	@ (8009050 <HAL_RCC_OscConfig+0x61c>)
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	2380      	movs	r3, #128	@ 0x80
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	4013      	ands	r3, r2
 8008dc8:	d11a      	bne.n	8008e00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dca:	4ba1      	ldr	r3, [pc, #644]	@ (8009050 <HAL_RCC_OscConfig+0x61c>)
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	4ba0      	ldr	r3, [pc, #640]	@ (8009050 <HAL_RCC_OscConfig+0x61c>)
 8008dd0:	2180      	movs	r1, #128	@ 0x80
 8008dd2:	0049      	lsls	r1, r1, #1
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008dd8:	f7fd f9a8 	bl	800612c <HAL_GetTick>
 8008ddc:	0003      	movs	r3, r0
 8008dde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008de0:	e008      	b.n	8008df4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008de2:	f7fd f9a3 	bl	800612c <HAL_GetTick>
 8008de6:	0002      	movs	r2, r0
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d901      	bls.n	8008df4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e127      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008df4:	4b96      	ldr	r3, [pc, #600]	@ (8009050 <HAL_RCC_OscConfig+0x61c>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	2380      	movs	r3, #128	@ 0x80
 8008dfa:	005b      	lsls	r3, r3, #1
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d0f0      	beq.n	8008de2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d106      	bne.n	8008e16 <HAL_RCC_OscConfig+0x3e2>
 8008e08:	4b90      	ldr	r3, [pc, #576]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e0c:	4b8f      	ldr	r3, [pc, #572]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e0e:	2101      	movs	r1, #1
 8008e10:	430a      	orrs	r2, r1
 8008e12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e14:	e01c      	b.n	8008e50 <HAL_RCC_OscConfig+0x41c>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCC_OscConfig+0x404>
 8008e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e22:	4b8a      	ldr	r3, [pc, #552]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e24:	2104      	movs	r1, #4
 8008e26:	430a      	orrs	r2, r1
 8008e28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e2a:	4b88      	ldr	r3, [pc, #544]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e2e:	4b87      	ldr	r3, [pc, #540]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e30:	2101      	movs	r1, #1
 8008e32:	430a      	orrs	r2, r1
 8008e34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e36:	e00b      	b.n	8008e50 <HAL_RCC_OscConfig+0x41c>
 8008e38:	4b84      	ldr	r3, [pc, #528]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e3a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e3c:	4b83      	ldr	r3, [pc, #524]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e3e:	2101      	movs	r1, #1
 8008e40:	438a      	bics	r2, r1
 8008e42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008e44:	4b81      	ldr	r3, [pc, #516]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008e48:	4b80      	ldr	r3, [pc, #512]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e4a:	2104      	movs	r1, #4
 8008e4c:	438a      	bics	r2, r1
 8008e4e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d014      	beq.n	8008e82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e58:	f7fd f968 	bl	800612c <HAL_GetTick>
 8008e5c:	0003      	movs	r3, r0
 8008e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e60:	e009      	b.n	8008e76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e62:	f7fd f963 	bl	800612c <HAL_GetTick>
 8008e66:	0002      	movs	r2, r0
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	1ad3      	subs	r3, r2, r3
 8008e6c:	4a79      	ldr	r2, [pc, #484]	@ (8009054 <HAL_RCC_OscConfig+0x620>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d901      	bls.n	8008e76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8008e72:	2303      	movs	r3, #3
 8008e74:	e0e6      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e76:	4b75      	ldr	r3, [pc, #468]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008e78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	d0f0      	beq.n	8008e62 <HAL_RCC_OscConfig+0x42e>
 8008e80:	e013      	b.n	8008eaa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e82:	f7fd f953 	bl	800612c <HAL_GetTick>
 8008e86:	0003      	movs	r3, r0
 8008e88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e8a:	e009      	b.n	8008ea0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e8c:	f7fd f94e 	bl	800612c <HAL_GetTick>
 8008e90:	0002      	movs	r2, r0
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	4a6f      	ldr	r2, [pc, #444]	@ (8009054 <HAL_RCC_OscConfig+0x620>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d901      	bls.n	8008ea0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e0d1      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008ea0:	4b6a      	ldr	r3, [pc, #424]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	4013      	ands	r3, r2
 8008ea8:	d1f0      	bne.n	8008e8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008eaa:	231f      	movs	r3, #31
 8008eac:	18fb      	adds	r3, r7, r3
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d105      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008eb4:	4b65      	ldr	r3, [pc, #404]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008eb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008eb8:	4b64      	ldr	r3, [pc, #400]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008eba:	4967      	ldr	r1, [pc, #412]	@ (8009058 <HAL_RCC_OscConfig+0x624>)
 8008ebc:	400a      	ands	r2, r1
 8008ebe:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d100      	bne.n	8008eca <HAL_RCC_OscConfig+0x496>
 8008ec8:	e0bb      	b.n	8009042 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008eca:	4b60      	ldr	r3, [pc, #384]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2238      	movs	r2, #56	@ 0x38
 8008ed0:	4013      	ands	r3, r2
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d100      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x4a4>
 8008ed6:	e07b      	b.n	8008fd0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d156      	bne.n	8008f8e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	4b59      	ldr	r3, [pc, #356]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008ee6:	495d      	ldr	r1, [pc, #372]	@ (800905c <HAL_RCC_OscConfig+0x628>)
 8008ee8:	400a      	ands	r2, r1
 8008eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eec:	f7fd f91e 	bl	800612c <HAL_GetTick>
 8008ef0:	0003      	movs	r3, r0
 8008ef2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ef4:	e008      	b.n	8008f08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ef6:	f7fd f919 	bl	800612c <HAL_GetTick>
 8008efa:	0002      	movs	r2, r0
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d901      	bls.n	8008f08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008f04:	2303      	movs	r3, #3
 8008f06:	e09d      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f08:	4b50      	ldr	r3, [pc, #320]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	2380      	movs	r3, #128	@ 0x80
 8008f0e:	049b      	lsls	r3, r3, #18
 8008f10:	4013      	ands	r3, r2
 8008f12:	d1f0      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f14:	4b4d      	ldr	r3, [pc, #308]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f16:	68db      	ldr	r3, [r3, #12]
 8008f18:	4a51      	ldr	r2, [pc, #324]	@ (8009060 <HAL_RCC_OscConfig+0x62c>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	0019      	movs	r1, r3
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1a      	ldr	r2, [r3, #32]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f26:	431a      	orrs	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2c:	021b      	lsls	r3, r3, #8
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f34:	431a      	orrs	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f3a:	431a      	orrs	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008f40:	431a      	orrs	r2, r3
 8008f42:	4b42      	ldr	r3, [pc, #264]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f44:	430a      	orrs	r2, r1
 8008f46:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f48:	4b40      	ldr	r3, [pc, #256]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f4e:	2180      	movs	r1, #128	@ 0x80
 8008f50:	0449      	lsls	r1, r1, #17
 8008f52:	430a      	orrs	r2, r1
 8008f54:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8008f56:	4b3d      	ldr	r3, [pc, #244]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f58:	68da      	ldr	r2, [r3, #12]
 8008f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f5c:	2180      	movs	r1, #128	@ 0x80
 8008f5e:	0549      	lsls	r1, r1, #21
 8008f60:	430a      	orrs	r2, r1
 8008f62:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7fd f8e2 	bl	800612c <HAL_GetTick>
 8008f68:	0003      	movs	r3, r0
 8008f6a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f6c:	e008      	b.n	8008f80 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6e:	f7fd f8dd 	bl	800612c <HAL_GetTick>
 8008f72:	0002      	movs	r2, r0
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	1ad3      	subs	r3, r2, r3
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d901      	bls.n	8008f80 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e061      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f80:	4b32      	ldr	r3, [pc, #200]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	2380      	movs	r3, #128	@ 0x80
 8008f86:	049b      	lsls	r3, r3, #18
 8008f88:	4013      	ands	r3, r2
 8008f8a:	d0f0      	beq.n	8008f6e <HAL_RCC_OscConfig+0x53a>
 8008f8c:	e059      	b.n	8009042 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	4b2e      	ldr	r3, [pc, #184]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008f94:	4931      	ldr	r1, [pc, #196]	@ (800905c <HAL_RCC_OscConfig+0x628>)
 8008f96:	400a      	ands	r2, r1
 8008f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fd f8c7 	bl	800612c <HAL_GetTick>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fa4:	f7fd f8c2 	bl	800612c <HAL_GetTick>
 8008fa8:	0002      	movs	r2, r0
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e046      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fb6:	4b25      	ldr	r3, [pc, #148]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	2380      	movs	r3, #128	@ 0x80
 8008fbc:	049b      	lsls	r3, r3, #18
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	d1f0      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8008fc2:	4b22      	ldr	r3, [pc, #136]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008fc4:	68da      	ldr	r2, [r3, #12]
 8008fc6:	4b21      	ldr	r3, [pc, #132]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008fc8:	4926      	ldr	r1, [pc, #152]	@ (8009064 <HAL_RCC_OscConfig+0x630>)
 8008fca:	400a      	ands	r2, r1
 8008fcc:	60da      	str	r2, [r3, #12]
 8008fce:	e038      	b.n	8009042 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	d101      	bne.n	8008fdc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e033      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800904c <HAL_RCC_OscConfig+0x618>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	401a      	ands	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d126      	bne.n	800903e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2270      	movs	r2, #112	@ 0x70
 8008ff4:	401a      	ands	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d11f      	bne.n	800903e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	23fe      	movs	r3, #254	@ 0xfe
 8009002:	01db      	lsls	r3, r3, #7
 8009004:	401a      	ands	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800900c:	429a      	cmp	r2, r3
 800900e:	d116      	bne.n	800903e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	23f8      	movs	r3, #248	@ 0xf8
 8009014:	039b      	lsls	r3, r3, #14
 8009016:	401a      	ands	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d10e      	bne.n	800903e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	23e0      	movs	r3, #224	@ 0xe0
 8009024:	051b      	lsls	r3, r3, #20
 8009026:	401a      	ands	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800902c:	429a      	cmp	r2, r3
 800902e:	d106      	bne.n	800903e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	0f5b      	lsrs	r3, r3, #29
 8009034:	075a      	lsls	r2, r3, #29
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800903a:	429a      	cmp	r2, r3
 800903c:	d001      	beq.n	8009042 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e000      	b.n	8009044 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	0018      	movs	r0, r3
 8009046:	46bd      	mov	sp, r7
 8009048:	b008      	add	sp, #32
 800904a:	bd80      	pop	{r7, pc}
 800904c:	40021000 	.word	0x40021000
 8009050:	40007000 	.word	0x40007000
 8009054:	00001388 	.word	0x00001388
 8009058:	efffffff 	.word	0xefffffff
 800905c:	feffffff 	.word	0xfeffffff
 8009060:	11c1808c 	.word	0x11c1808c
 8009064:	eefefffc 	.word	0xeefefffc

08009068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d101      	bne.n	800907c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e0e9      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800907c:	4b76      	ldr	r3, [pc, #472]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2207      	movs	r2, #7
 8009082:	4013      	ands	r3, r2
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	429a      	cmp	r2, r3
 8009088:	d91e      	bls.n	80090c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800908a:	4b73      	ldr	r3, [pc, #460]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2207      	movs	r2, #7
 8009090:	4393      	bics	r3, r2
 8009092:	0019      	movs	r1, r3
 8009094:	4b70      	ldr	r3, [pc, #448]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	430a      	orrs	r2, r1
 800909a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800909c:	f7fd f846 	bl	800612c <HAL_GetTick>
 80090a0:	0003      	movs	r3, r0
 80090a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090a4:	e009      	b.n	80090ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090a6:	f7fd f841 	bl	800612c <HAL_GetTick>
 80090aa:	0002      	movs	r2, r0
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	4a6a      	ldr	r2, [pc, #424]	@ (800925c <HAL_RCC_ClockConfig+0x1f4>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d901      	bls.n	80090ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80090b6:	2303      	movs	r3, #3
 80090b8:	e0ca      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80090ba:	4b67      	ldr	r3, [pc, #412]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2207      	movs	r2, #7
 80090c0:	4013      	ands	r3, r2
 80090c2:	683a      	ldr	r2, [r7, #0]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d1ee      	bne.n	80090a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2202      	movs	r2, #2
 80090ce:	4013      	ands	r3, r2
 80090d0:	d015      	beq.n	80090fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2204      	movs	r2, #4
 80090d8:	4013      	ands	r3, r2
 80090da:	d006      	beq.n	80090ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80090dc:	4b60      	ldr	r3, [pc, #384]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	4b5f      	ldr	r3, [pc, #380]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 80090e2:	21e0      	movs	r1, #224	@ 0xe0
 80090e4:	01c9      	lsls	r1, r1, #7
 80090e6:	430a      	orrs	r2, r1
 80090e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090ea:	4b5d      	ldr	r3, [pc, #372]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	4a5d      	ldr	r2, [pc, #372]	@ (8009264 <HAL_RCC_ClockConfig+0x1fc>)
 80090f0:	4013      	ands	r3, r2
 80090f2:	0019      	movs	r1, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	689a      	ldr	r2, [r3, #8]
 80090f8:	4b59      	ldr	r3, [pc, #356]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 80090fa:	430a      	orrs	r2, r1
 80090fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2201      	movs	r2, #1
 8009104:	4013      	ands	r3, r2
 8009106:	d057      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d107      	bne.n	8009120 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009110:	4b53      	ldr	r3, [pc, #332]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	2380      	movs	r3, #128	@ 0x80
 8009116:	029b      	lsls	r3, r3, #10
 8009118:	4013      	ands	r3, r2
 800911a:	d12b      	bne.n	8009174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	e097      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d107      	bne.n	8009138 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009128:	4b4d      	ldr	r3, [pc, #308]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	2380      	movs	r3, #128	@ 0x80
 800912e:	049b      	lsls	r3, r3, #18
 8009130:	4013      	ands	r3, r2
 8009132:	d11f      	bne.n	8009174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	e08b      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d107      	bne.n	8009150 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009140:	4b47      	ldr	r3, [pc, #284]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	2380      	movs	r3, #128	@ 0x80
 8009146:	00db      	lsls	r3, r3, #3
 8009148:	4013      	ands	r3, r2
 800914a:	d113      	bne.n	8009174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e07f      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b03      	cmp	r3, #3
 8009156:	d106      	bne.n	8009166 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009158:	4b41      	ldr	r3, [pc, #260]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 800915a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800915c:	2202      	movs	r2, #2
 800915e:	4013      	ands	r3, r2
 8009160:	d108      	bne.n	8009174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e074      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009166:	4b3e      	ldr	r3, [pc, #248]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916a:	2202      	movs	r2, #2
 800916c:	4013      	ands	r3, r2
 800916e:	d101      	bne.n	8009174 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e06d      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009174:	4b3a      	ldr	r3, [pc, #232]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	2207      	movs	r2, #7
 800917a:	4393      	bics	r3, r2
 800917c:	0019      	movs	r1, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685a      	ldr	r2, [r3, #4]
 8009182:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009184:	430a      	orrs	r2, r1
 8009186:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009188:	f7fc ffd0 	bl	800612c <HAL_GetTick>
 800918c:	0003      	movs	r3, r0
 800918e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009190:	e009      	b.n	80091a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009192:	f7fc ffcb 	bl	800612c <HAL_GetTick>
 8009196:	0002      	movs	r2, r0
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	4a2f      	ldr	r2, [pc, #188]	@ (800925c <HAL_RCC_ClockConfig+0x1f4>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d901      	bls.n	80091a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e054      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a6:	4b2e      	ldr	r3, [pc, #184]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	2238      	movs	r2, #56	@ 0x38
 80091ac:	401a      	ands	r2, r3
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	00db      	lsls	r3, r3, #3
 80091b4:	429a      	cmp	r2, r3
 80091b6:	d1ec      	bne.n	8009192 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091b8:	4b27      	ldr	r3, [pc, #156]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2207      	movs	r2, #7
 80091be:	4013      	ands	r3, r2
 80091c0:	683a      	ldr	r2, [r7, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d21e      	bcs.n	8009204 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091c6:	4b24      	ldr	r3, [pc, #144]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2207      	movs	r2, #7
 80091cc:	4393      	bics	r3, r2
 80091ce:	0019      	movs	r1, r3
 80091d0:	4b21      	ldr	r3, [pc, #132]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	430a      	orrs	r2, r1
 80091d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80091d8:	f7fc ffa8 	bl	800612c <HAL_GetTick>
 80091dc:	0003      	movs	r3, r0
 80091de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80091e0:	e009      	b.n	80091f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091e2:	f7fc ffa3 	bl	800612c <HAL_GetTick>
 80091e6:	0002      	movs	r2, r0
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	1ad3      	subs	r3, r2, r3
 80091ec:	4a1b      	ldr	r2, [pc, #108]	@ (800925c <HAL_RCC_ClockConfig+0x1f4>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d901      	bls.n	80091f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e02c      	b.n	8009250 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80091f6:	4b18      	ldr	r3, [pc, #96]	@ (8009258 <HAL_RCC_ClockConfig+0x1f0>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2207      	movs	r2, #7
 80091fc:	4013      	ands	r3, r2
 80091fe:	683a      	ldr	r2, [r7, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d1ee      	bne.n	80091e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2204      	movs	r2, #4
 800920a:	4013      	ands	r3, r2
 800920c:	d009      	beq.n	8009222 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800920e:	4b14      	ldr	r3, [pc, #80]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	4a15      	ldr	r2, [pc, #84]	@ (8009268 <HAL_RCC_ClockConfig+0x200>)
 8009214:	4013      	ands	r3, r2
 8009216:	0019      	movs	r1, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	4b10      	ldr	r3, [pc, #64]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 800921e:	430a      	orrs	r2, r1
 8009220:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8009222:	f000 f829 	bl	8009278 <HAL_RCC_GetSysClockFreq>
 8009226:	0001      	movs	r1, r0
 8009228:	4b0d      	ldr	r3, [pc, #52]	@ (8009260 <HAL_RCC_ClockConfig+0x1f8>)
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	220f      	movs	r2, #15
 8009230:	401a      	ands	r2, r3
 8009232:	4b0e      	ldr	r3, [pc, #56]	@ (800926c <HAL_RCC_ClockConfig+0x204>)
 8009234:	0092      	lsls	r2, r2, #2
 8009236:	58d3      	ldr	r3, [r2, r3]
 8009238:	221f      	movs	r2, #31
 800923a:	4013      	ands	r3, r2
 800923c:	000a      	movs	r2, r1
 800923e:	40da      	lsrs	r2, r3
 8009240:	4b0b      	ldr	r3, [pc, #44]	@ (8009270 <HAL_RCC_ClockConfig+0x208>)
 8009242:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009244:	4b0b      	ldr	r3, [pc, #44]	@ (8009274 <HAL_RCC_ClockConfig+0x20c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	0018      	movs	r0, r3
 800924a:	f7fc ff13 	bl	8006074 <HAL_InitTick>
 800924e:	0003      	movs	r3, r0
}
 8009250:	0018      	movs	r0, r3
 8009252:	46bd      	mov	sp, r7
 8009254:	b004      	add	sp, #16
 8009256:	bd80      	pop	{r7, pc}
 8009258:	40022000 	.word	0x40022000
 800925c:	00001388 	.word	0x00001388
 8009260:	40021000 	.word	0x40021000
 8009264:	fffff0ff 	.word	0xfffff0ff
 8009268:	ffff8fff 	.word	0xffff8fff
 800926c:	0800dc84 	.word	0x0800dc84
 8009270:	2000044c 	.word	0x2000044c
 8009274:	20000450 	.word	0x20000450

08009278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800927e:	4b3c      	ldr	r3, [pc, #240]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	2238      	movs	r2, #56	@ 0x38
 8009284:	4013      	ands	r3, r2
 8009286:	d10f      	bne.n	80092a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8009288:	4b39      	ldr	r3, [pc, #228]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	0adb      	lsrs	r3, r3, #11
 800928e:	2207      	movs	r2, #7
 8009290:	4013      	ands	r3, r2
 8009292:	2201      	movs	r2, #1
 8009294:	409a      	lsls	r2, r3
 8009296:	0013      	movs	r3, r2
 8009298:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800929a:	6839      	ldr	r1, [r7, #0]
 800929c:	4835      	ldr	r0, [pc, #212]	@ (8009374 <HAL_RCC_GetSysClockFreq+0xfc>)
 800929e:	f7f6 ff31 	bl	8000104 <__udivsi3>
 80092a2:	0003      	movs	r3, r0
 80092a4:	613b      	str	r3, [r7, #16]
 80092a6:	e05d      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80092a8:	4b31      	ldr	r3, [pc, #196]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	2238      	movs	r2, #56	@ 0x38
 80092ae:	4013      	ands	r3, r2
 80092b0:	2b08      	cmp	r3, #8
 80092b2:	d102      	bne.n	80092ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092b4:	4b30      	ldr	r3, [pc, #192]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x100>)
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	e054      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80092ba:	4b2d      	ldr	r3, [pc, #180]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	2238      	movs	r2, #56	@ 0x38
 80092c0:	4013      	ands	r3, r2
 80092c2:	2b10      	cmp	r3, #16
 80092c4:	d138      	bne.n	8009338 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80092c6:	4b2a      	ldr	r3, [pc, #168]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	2203      	movs	r2, #3
 80092cc:	4013      	ands	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092d0:	4b27      	ldr	r3, [pc, #156]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	091b      	lsrs	r3, r3, #4
 80092d6:	2207      	movs	r2, #7
 80092d8:	4013      	ands	r3, r2
 80092da:	3301      	adds	r3, #1
 80092dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d10d      	bne.n	8009300 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80092e4:	68b9      	ldr	r1, [r7, #8]
 80092e6:	4824      	ldr	r0, [pc, #144]	@ (8009378 <HAL_RCC_GetSysClockFreq+0x100>)
 80092e8:	f7f6 ff0c 	bl	8000104 <__udivsi3>
 80092ec:	0003      	movs	r3, r0
 80092ee:	0019      	movs	r1, r3
 80092f0:	4b1f      	ldr	r3, [pc, #124]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	0a1b      	lsrs	r3, r3, #8
 80092f6:	227f      	movs	r2, #127	@ 0x7f
 80092f8:	4013      	ands	r3, r2
 80092fa:	434b      	muls	r3, r1
 80092fc:	617b      	str	r3, [r7, #20]
        break;
 80092fe:	e00d      	b.n	800931c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8009300:	68b9      	ldr	r1, [r7, #8]
 8009302:	481c      	ldr	r0, [pc, #112]	@ (8009374 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009304:	f7f6 fefe 	bl	8000104 <__udivsi3>
 8009308:	0003      	movs	r3, r0
 800930a:	0019      	movs	r1, r3
 800930c:	4b18      	ldr	r3, [pc, #96]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	0a1b      	lsrs	r3, r3, #8
 8009312:	227f      	movs	r2, #127	@ 0x7f
 8009314:	4013      	ands	r3, r2
 8009316:	434b      	muls	r3, r1
 8009318:	617b      	str	r3, [r7, #20]
        break;
 800931a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800931c:	4b14      	ldr	r3, [pc, #80]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	0f5b      	lsrs	r3, r3, #29
 8009322:	2207      	movs	r2, #7
 8009324:	4013      	ands	r3, r2
 8009326:	3301      	adds	r3, #1
 8009328:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	6978      	ldr	r0, [r7, #20]
 800932e:	f7f6 fee9 	bl	8000104 <__udivsi3>
 8009332:	0003      	movs	r3, r0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	e015      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009338:	4b0d      	ldr	r3, [pc, #52]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2238      	movs	r2, #56	@ 0x38
 800933e:	4013      	ands	r3, r2
 8009340:	2b20      	cmp	r3, #32
 8009342:	d103      	bne.n	800934c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8009344:	2380      	movs	r3, #128	@ 0x80
 8009346:	021b      	lsls	r3, r3, #8
 8009348:	613b      	str	r3, [r7, #16]
 800934a:	e00b      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800934c:	4b08      	ldr	r3, [pc, #32]	@ (8009370 <HAL_RCC_GetSysClockFreq+0xf8>)
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	2238      	movs	r2, #56	@ 0x38
 8009352:	4013      	ands	r3, r2
 8009354:	2b18      	cmp	r3, #24
 8009356:	d103      	bne.n	8009360 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8009358:	23fa      	movs	r3, #250	@ 0xfa
 800935a:	01db      	lsls	r3, r3, #7
 800935c:	613b      	str	r3, [r7, #16]
 800935e:	e001      	b.n	8009364 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8009360:	2300      	movs	r3, #0
 8009362:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009364:	693b      	ldr	r3, [r7, #16]
}
 8009366:	0018      	movs	r0, r3
 8009368:	46bd      	mov	sp, r7
 800936a:	b006      	add	sp, #24
 800936c:	bd80      	pop	{r7, pc}
 800936e:	46c0      	nop			@ (mov r8, r8)
 8009370:	40021000 	.word	0x40021000
 8009374:	00f42400 	.word	0x00f42400
 8009378:	007a1200 	.word	0x007a1200

0800937c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009380:	4b02      	ldr	r3, [pc, #8]	@ (800938c <HAL_RCC_GetHCLKFreq+0x10>)
 8009382:	681b      	ldr	r3, [r3, #0]
}
 8009384:	0018      	movs	r0, r3
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	46c0      	nop			@ (mov r8, r8)
 800938c:	2000044c 	.word	0x2000044c

08009390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009390:	b5b0      	push	{r4, r5, r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009394:	f7ff fff2 	bl	800937c <HAL_RCC_GetHCLKFreq>
 8009398:	0004      	movs	r4, r0
 800939a:	f7ff fb3f 	bl	8008a1c <LL_RCC_GetAPB1Prescaler>
 800939e:	0003      	movs	r3, r0
 80093a0:	0b1a      	lsrs	r2, r3, #12
 80093a2:	4b05      	ldr	r3, [pc, #20]	@ (80093b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80093a4:	0092      	lsls	r2, r2, #2
 80093a6:	58d3      	ldr	r3, [r2, r3]
 80093a8:	221f      	movs	r2, #31
 80093aa:	4013      	ands	r3, r2
 80093ac:	40dc      	lsrs	r4, r3
 80093ae:	0023      	movs	r3, r4
}
 80093b0:	0018      	movs	r0, r3
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bdb0      	pop	{r4, r5, r7, pc}
 80093b6:	46c0      	nop			@ (mov r8, r8)
 80093b8:	0800dcc4 	.word	0x0800dcc4

080093bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80093c4:	2313      	movs	r3, #19
 80093c6:	18fb      	adds	r3, r7, r3
 80093c8:	2200      	movs	r2, #0
 80093ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80093cc:	2312      	movs	r3, #18
 80093ce:	18fb      	adds	r3, r7, r3
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	2380      	movs	r3, #128	@ 0x80
 80093da:	029b      	lsls	r3, r3, #10
 80093dc:	4013      	ands	r3, r2
 80093de:	d100      	bne.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80093e0:	e0a3      	b.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093e2:	2011      	movs	r0, #17
 80093e4:	183b      	adds	r3, r7, r0
 80093e6:	2200      	movs	r2, #0
 80093e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ea:	4ba5      	ldr	r3, [pc, #660]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093ee:	2380      	movs	r3, #128	@ 0x80
 80093f0:	055b      	lsls	r3, r3, #21
 80093f2:	4013      	ands	r3, r2
 80093f4:	d110      	bne.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093f6:	4ba2      	ldr	r3, [pc, #648]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093fa:	4ba1      	ldr	r3, [pc, #644]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80093fc:	2180      	movs	r1, #128	@ 0x80
 80093fe:	0549      	lsls	r1, r1, #21
 8009400:	430a      	orrs	r2, r1
 8009402:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009404:	4b9e      	ldr	r3, [pc, #632]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009406:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009408:	2380      	movs	r3, #128	@ 0x80
 800940a:	055b      	lsls	r3, r3, #21
 800940c:	4013      	ands	r3, r2
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009412:	183b      	adds	r3, r7, r0
 8009414:	2201      	movs	r2, #1
 8009416:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009418:	4b9a      	ldr	r3, [pc, #616]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	4b99      	ldr	r3, [pc, #612]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800941e:	2180      	movs	r1, #128	@ 0x80
 8009420:	0049      	lsls	r1, r1, #1
 8009422:	430a      	orrs	r2, r1
 8009424:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009426:	f7fc fe81 	bl	800612c <HAL_GetTick>
 800942a:	0003      	movs	r3, r0
 800942c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800942e:	e00b      	b.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009430:	f7fc fe7c 	bl	800612c <HAL_GetTick>
 8009434:	0002      	movs	r2, r0
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d904      	bls.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800943e:	2313      	movs	r3, #19
 8009440:	18fb      	adds	r3, r7, r3
 8009442:	2203      	movs	r2, #3
 8009444:	701a      	strb	r2, [r3, #0]
        break;
 8009446:	e005      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009448:	4b8e      	ldr	r3, [pc, #568]	@ (8009684 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	2380      	movs	r3, #128	@ 0x80
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	4013      	ands	r3, r2
 8009452:	d0ed      	beq.n	8009430 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8009454:	2313      	movs	r3, #19
 8009456:	18fb      	adds	r3, r7, r3
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d154      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800945e:	4b88      	ldr	r3, [pc, #544]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009462:	23c0      	movs	r3, #192	@ 0xc0
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4013      	ands	r3, r2
 8009468:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d019      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	429a      	cmp	r2, r3
 8009478:	d014      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800947a:	4b81      	ldr	r3, [pc, #516]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800947c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800947e:	4a82      	ldr	r2, [pc, #520]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8009480:	4013      	ands	r3, r2
 8009482:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009484:	4b7e      	ldr	r3, [pc, #504]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009486:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009488:	4b7d      	ldr	r3, [pc, #500]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800948a:	2180      	movs	r1, #128	@ 0x80
 800948c:	0249      	lsls	r1, r1, #9
 800948e:	430a      	orrs	r2, r1
 8009490:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009492:	4b7b      	ldr	r3, [pc, #492]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009494:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009496:	4b7a      	ldr	r3, [pc, #488]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009498:	497c      	ldr	r1, [pc, #496]	@ (800968c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800949a:	400a      	ands	r2, r1
 800949c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800949e:	4b78      	ldr	r3, [pc, #480]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094a0:	697a      	ldr	r2, [r7, #20]
 80094a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2201      	movs	r2, #1
 80094a8:	4013      	ands	r3, r2
 80094aa:	d016      	beq.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ac:	f7fc fe3e 	bl	800612c <HAL_GetTick>
 80094b0:	0003      	movs	r3, r0
 80094b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094b4:	e00c      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094b6:	f7fc fe39 	bl	800612c <HAL_GetTick>
 80094ba:	0002      	movs	r2, r0
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	4a73      	ldr	r2, [pc, #460]	@ (8009690 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d904      	bls.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80094c6:	2313      	movs	r3, #19
 80094c8:	18fb      	adds	r3, r7, r3
 80094ca:	2203      	movs	r2, #3
 80094cc:	701a      	strb	r2, [r3, #0]
            break;
 80094ce:	e004      	b.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80094d0:	4b6b      	ldr	r3, [pc, #428]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094d4:	2202      	movs	r2, #2
 80094d6:	4013      	ands	r3, r2
 80094d8:	d0ed      	beq.n	80094b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80094da:	2313      	movs	r3, #19
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d10a      	bne.n	80094fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80094e4:	4b66      	ldr	r3, [pc, #408]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094e8:	4a67      	ldr	r2, [pc, #412]	@ (8009688 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80094ea:	4013      	ands	r3, r2
 80094ec:	0019      	movs	r1, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80094f2:	4b63      	ldr	r3, [pc, #396]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80094f4:	430a      	orrs	r2, r1
 80094f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80094f8:	e00c      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80094fa:	2312      	movs	r3, #18
 80094fc:	18fb      	adds	r3, r7, r3
 80094fe:	2213      	movs	r2, #19
 8009500:	18ba      	adds	r2, r7, r2
 8009502:	7812      	ldrb	r2, [r2, #0]
 8009504:	701a      	strb	r2, [r3, #0]
 8009506:	e005      	b.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009508:	2312      	movs	r3, #18
 800950a:	18fb      	adds	r3, r7, r3
 800950c:	2213      	movs	r2, #19
 800950e:	18ba      	adds	r2, r7, r2
 8009510:	7812      	ldrb	r2, [r2, #0]
 8009512:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009514:	2311      	movs	r3, #17
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d105      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800951e:	4b58      	ldr	r3, [pc, #352]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009522:	4b57      	ldr	r3, [pc, #348]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009524:	495b      	ldr	r1, [pc, #364]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009526:	400a      	ands	r2, r1
 8009528:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2201      	movs	r2, #1
 8009530:	4013      	ands	r3, r2
 8009532:	d009      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009534:	4b52      	ldr	r3, [pc, #328]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009538:	2203      	movs	r2, #3
 800953a:	4393      	bics	r3, r2
 800953c:	0019      	movs	r1, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685a      	ldr	r2, [r3, #4]
 8009542:	4b4f      	ldr	r3, [pc, #316]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009544:	430a      	orrs	r2, r1
 8009546:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2210      	movs	r2, #16
 800954e:	4013      	ands	r3, r2
 8009550:	d009      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009552:	4b4b      	ldr	r3, [pc, #300]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009556:	4a50      	ldr	r2, [pc, #320]	@ (8009698 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8009558:	4013      	ands	r3, r2
 800955a:	0019      	movs	r1, r3
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689a      	ldr	r2, [r3, #8]
 8009560:	4b47      	ldr	r3, [pc, #284]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009562:	430a      	orrs	r2, r1
 8009564:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	2380      	movs	r3, #128	@ 0x80
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4013      	ands	r3, r2
 8009570:	d009      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009572:	4b43      	ldr	r3, [pc, #268]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009576:	4a49      	ldr	r2, [pc, #292]	@ (800969c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8009578:	4013      	ands	r3, r2
 800957a:	0019      	movs	r1, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	695a      	ldr	r2, [r3, #20]
 8009580:	4b3f      	ldr	r3, [pc, #252]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009582:	430a      	orrs	r2, r1
 8009584:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	2380      	movs	r3, #128	@ 0x80
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	4013      	ands	r3, r2
 8009590:	d009      	beq.n	80095a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009592:	4b3b      	ldr	r3, [pc, #236]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009596:	4a42      	ldr	r2, [pc, #264]	@ (80096a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8009598:	4013      	ands	r3, r2
 800959a:	0019      	movs	r1, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699a      	ldr	r2, [r3, #24]
 80095a0:	4b37      	ldr	r3, [pc, #220]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095a2:	430a      	orrs	r2, r1
 80095a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2220      	movs	r2, #32
 80095ac:	4013      	ands	r3, r2
 80095ae:	d009      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80095b0:	4b33      	ldr	r3, [pc, #204]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095b4:	4a3b      	ldr	r2, [pc, #236]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80095b6:	4013      	ands	r3, r2
 80095b8:	0019      	movs	r1, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68da      	ldr	r2, [r3, #12]
 80095be:	4b30      	ldr	r3, [pc, #192]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095c0:	430a      	orrs	r2, r1
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	2380      	movs	r3, #128	@ 0x80
 80095ca:	01db      	lsls	r3, r3, #7
 80095cc:	4013      	ands	r3, r2
 80095ce:	d015      	beq.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80095d0:	4b2b      	ldr	r3, [pc, #172]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	0899      	lsrs	r1, r3, #2
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	69da      	ldr	r2, [r3, #28]
 80095dc:	4b28      	ldr	r3, [pc, #160]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095de:	430a      	orrs	r2, r1
 80095e0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69da      	ldr	r2, [r3, #28]
 80095e6:	2380      	movs	r3, #128	@ 0x80
 80095e8:	05db      	lsls	r3, r3, #23
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d106      	bne.n	80095fc <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80095ee:	4b24      	ldr	r3, [pc, #144]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f0:	68da      	ldr	r2, [r3, #12]
 80095f2:	4b23      	ldr	r3, [pc, #140]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80095f4:	2180      	movs	r1, #128	@ 0x80
 80095f6:	0249      	lsls	r1, r1, #9
 80095f8:	430a      	orrs	r2, r1
 80095fa:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	2380      	movs	r3, #128	@ 0x80
 8009602:	039b      	lsls	r3, r3, #14
 8009604:	4013      	ands	r3, r2
 8009606:	d016      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8009608:	4b1d      	ldr	r3, [pc, #116]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800960a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960c:	4a26      	ldr	r2, [pc, #152]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800960e:	4013      	ands	r3, r2
 8009610:	0019      	movs	r1, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6a1a      	ldr	r2, [r3, #32]
 8009616:	4b1a      	ldr	r3, [pc, #104]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009618:	430a      	orrs	r2, r1
 800961a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1a      	ldr	r2, [r3, #32]
 8009620:	2380      	movs	r3, #128	@ 0x80
 8009622:	03db      	lsls	r3, r3, #15
 8009624:	429a      	cmp	r2, r3
 8009626:	d106      	bne.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8009628:	4b15      	ldr	r3, [pc, #84]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	4b14      	ldr	r3, [pc, #80]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800962e:	2180      	movs	r1, #128	@ 0x80
 8009630:	0449      	lsls	r1, r1, #17
 8009632:	430a      	orrs	r2, r1
 8009634:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	2380      	movs	r3, #128	@ 0x80
 800963c:	011b      	lsls	r3, r3, #4
 800963e:	4013      	ands	r3, r2
 8009640:	d016      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8009642:	4b0f      	ldr	r3, [pc, #60]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	4a19      	ldr	r2, [pc, #100]	@ (80096ac <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8009648:	4013      	ands	r3, r2
 800964a:	0019      	movs	r1, r3
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	691a      	ldr	r2, [r3, #16]
 8009650:	4b0b      	ldr	r3, [pc, #44]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009652:	430a      	orrs	r2, r1
 8009654:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	691a      	ldr	r2, [r3, #16]
 800965a:	2380      	movs	r3, #128	@ 0x80
 800965c:	01db      	lsls	r3, r3, #7
 800965e:	429a      	cmp	r2, r3
 8009660:	d106      	bne.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8009662:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009664:	68da      	ldr	r2, [r3, #12]
 8009666:	4b06      	ldr	r3, [pc, #24]	@ (8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8009668:	2180      	movs	r1, #128	@ 0x80
 800966a:	0249      	lsls	r1, r1, #9
 800966c:	430a      	orrs	r2, r1
 800966e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8009670:	2312      	movs	r3, #18
 8009672:	18fb      	adds	r3, r7, r3
 8009674:	781b      	ldrb	r3, [r3, #0]
}
 8009676:	0018      	movs	r0, r3
 8009678:	46bd      	mov	sp, r7
 800967a:	b006      	add	sp, #24
 800967c:	bd80      	pop	{r7, pc}
 800967e:	46c0      	nop			@ (mov r8, r8)
 8009680:	40021000 	.word	0x40021000
 8009684:	40007000 	.word	0x40007000
 8009688:	fffffcff 	.word	0xfffffcff
 800968c:	fffeffff 	.word	0xfffeffff
 8009690:	00001388 	.word	0x00001388
 8009694:	efffffff 	.word	0xefffffff
 8009698:	fffff3ff 	.word	0xfffff3ff
 800969c:	fff3ffff 	.word	0xfff3ffff
 80096a0:	ffcfffff 	.word	0xffcfffff
 80096a4:	ffffcfff 	.word	0xffffcfff
 80096a8:	ffbfffff 	.word	0xffbfffff
 80096ac:	ffff3fff 	.word	0xffff3fff

080096b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d101      	bne.n	80096c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096be:	2301      	movs	r3, #1
 80096c0:	e056      	b.n	8009770 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	223d      	movs	r2, #61	@ 0x3d
 80096c6:	5c9b      	ldrb	r3, [r3, r2]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d113      	bne.n	80096f6 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	223c      	movs	r2, #60	@ 0x3c
 80096d2:	2100      	movs	r1, #0
 80096d4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	0018      	movs	r0, r3
 80096da:	f002 f8c5 	bl	800b868 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a23      	ldr	r2, [pc, #140]	@ (8009778 <HAL_TIM_Base_Init+0xc8>)
 80096ea:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	0010      	movs	r0, r2
 80096f4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	223d      	movs	r2, #61	@ 0x3d
 80096fa:	2102      	movs	r1, #2
 80096fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	3304      	adds	r3, #4
 8009706:	0019      	movs	r1, r3
 8009708:	0010      	movs	r0, r2
 800970a:	f001 fbaf 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2248      	movs	r2, #72	@ 0x48
 8009712:	2101      	movs	r1, #1
 8009714:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	223e      	movs	r2, #62	@ 0x3e
 800971a:	2101      	movs	r1, #1
 800971c:	5499      	strb	r1, [r3, r2]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	223f      	movs	r2, #63	@ 0x3f
 8009722:	2101      	movs	r1, #1
 8009724:	5499      	strb	r1, [r3, r2]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2240      	movs	r2, #64	@ 0x40
 800972a:	2101      	movs	r1, #1
 800972c:	5499      	strb	r1, [r3, r2]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2241      	movs	r2, #65	@ 0x41
 8009732:	2101      	movs	r1, #1
 8009734:	5499      	strb	r1, [r3, r2]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2242      	movs	r2, #66	@ 0x42
 800973a:	2101      	movs	r1, #1
 800973c:	5499      	strb	r1, [r3, r2]
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2243      	movs	r2, #67	@ 0x43
 8009742:	2101      	movs	r1, #1
 8009744:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2244      	movs	r2, #68	@ 0x44
 800974a:	2101      	movs	r1, #1
 800974c:	5499      	strb	r1, [r3, r2]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2245      	movs	r2, #69	@ 0x45
 8009752:	2101      	movs	r1, #1
 8009754:	5499      	strb	r1, [r3, r2]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2246      	movs	r2, #70	@ 0x46
 800975a:	2101      	movs	r1, #1
 800975c:	5499      	strb	r1, [r3, r2]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2247      	movs	r2, #71	@ 0x47
 8009762:	2101      	movs	r1, #1
 8009764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	223d      	movs	r2, #61	@ 0x3d
 800976a:	2101      	movs	r1, #1
 800976c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	0018      	movs	r0, r3
 8009772:	46bd      	mov	sp, r7
 8009774:	b002      	add	sp, #8
 8009776:	bd80      	pop	{r7, pc}
 8009778:	080050dd 	.word	0x080050dd

0800977c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b084      	sub	sp, #16
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	223d      	movs	r2, #61	@ 0x3d
 8009788:	5c9b      	ldrb	r3, [r3, r2]
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b01      	cmp	r3, #1
 800978e:	d001      	beq.n	8009794 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	e035      	b.n	8009800 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	223d      	movs	r2, #61	@ 0x3d
 8009798:	2102      	movs	r1, #2
 800979a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a19      	ldr	r2, [pc, #100]	@ (8009808 <HAL_TIM_Base_Start+0x8c>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d00a      	beq.n	80097bc <HAL_TIM_Base_Start+0x40>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	2380      	movs	r3, #128	@ 0x80
 80097ac:	05db      	lsls	r3, r3, #23
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d004      	beq.n	80097bc <HAL_TIM_Base_Start+0x40>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a15      	ldr	r2, [pc, #84]	@ (800980c <HAL_TIM_Base_Start+0x90>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d116      	bne.n	80097ea <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	689b      	ldr	r3, [r3, #8]
 80097c2:	4a13      	ldr	r2, [pc, #76]	@ (8009810 <HAL_TIM_Base_Start+0x94>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2b06      	cmp	r3, #6
 80097cc:	d016      	beq.n	80097fc <HAL_TIM_Base_Start+0x80>
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	2380      	movs	r3, #128	@ 0x80
 80097d2:	025b      	lsls	r3, r3, #9
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d011      	beq.n	80097fc <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2101      	movs	r1, #1
 80097e4:	430a      	orrs	r2, r1
 80097e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e8:	e008      	b.n	80097fc <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2101      	movs	r1, #1
 80097f6:	430a      	orrs	r2, r1
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e000      	b.n	80097fe <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b004      	add	sp, #16
 8009806:	bd80      	pop	{r7, pc}
 8009808:	40012c00 	.word	0x40012c00
 800980c:	40000400 	.word	0x40000400
 8009810:	00010007 	.word	0x00010007

08009814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	223d      	movs	r2, #61	@ 0x3d
 8009820:	5c9b      	ldrb	r3, [r3, r2]
 8009822:	b2db      	uxtb	r3, r3
 8009824:	2b01      	cmp	r3, #1
 8009826:	d001      	beq.n	800982c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009828:	2301      	movs	r3, #1
 800982a:	e03d      	b.n	80098a8 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	223d      	movs	r2, #61	@ 0x3d
 8009830:	2102      	movs	r1, #2
 8009832:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68da      	ldr	r2, [r3, #12]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2101      	movs	r1, #1
 8009840:	430a      	orrs	r2, r1
 8009842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a19      	ldr	r2, [pc, #100]	@ (80098b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00a      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x50>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	2380      	movs	r3, #128	@ 0x80
 8009854:	05db      	lsls	r3, r3, #23
 8009856:	429a      	cmp	r2, r3
 8009858:	d004      	beq.n	8009864 <HAL_TIM_Base_Start_IT+0x50>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a15      	ldr	r2, [pc, #84]	@ (80098b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d116      	bne.n	8009892 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	4a13      	ldr	r2, [pc, #76]	@ (80098b8 <HAL_TIM_Base_Start_IT+0xa4>)
 800986c:	4013      	ands	r3, r2
 800986e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b06      	cmp	r3, #6
 8009874:	d016      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x90>
 8009876:	68fa      	ldr	r2, [r7, #12]
 8009878:	2380      	movs	r3, #128	@ 0x80
 800987a:	025b      	lsls	r3, r3, #9
 800987c:	429a      	cmp	r2, r3
 800987e:	d011      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2101      	movs	r1, #1
 800988c:	430a      	orrs	r2, r1
 800988e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009890:	e008      	b.n	80098a4 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2101      	movs	r1, #1
 800989e:	430a      	orrs	r2, r1
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	e000      	b.n	80098a6 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098a4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	0018      	movs	r0, r3
 80098aa:	46bd      	mov	sp, r7
 80098ac:	b004      	add	sp, #16
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40012c00 	.word	0x40012c00
 80098b4:	40000400 	.word	0x40000400
 80098b8:	00010007 	.word	0x00010007

080098bc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e056      	b.n	800997c <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	223d      	movs	r2, #61	@ 0x3d
 80098d2:	5c9b      	ldrb	r3, [r3, r2]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d113      	bne.n	8009902 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	223c      	movs	r2, #60	@ 0x3c
 80098de:	2100      	movs	r1, #0
 80098e0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	0018      	movs	r0, r3
 80098e6:	f001 ffbf 	bl	800b868 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d102      	bne.n	80098f8 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a23      	ldr	r2, [pc, #140]	@ (8009984 <HAL_TIM_OC_Init+0xc8>)
 80098f6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	0010      	movs	r0, r2
 8009900:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	223d      	movs	r2, #61	@ 0x3d
 8009906:	2102      	movs	r1, #2
 8009908:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	3304      	adds	r3, #4
 8009912:	0019      	movs	r1, r3
 8009914:	0010      	movs	r0, r2
 8009916:	f001 faa9 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2248      	movs	r2, #72	@ 0x48
 800991e:	2101      	movs	r1, #1
 8009920:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	223e      	movs	r2, #62	@ 0x3e
 8009926:	2101      	movs	r1, #1
 8009928:	5499      	strb	r1, [r3, r2]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	223f      	movs	r2, #63	@ 0x3f
 800992e:	2101      	movs	r1, #1
 8009930:	5499      	strb	r1, [r3, r2]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2240      	movs	r2, #64	@ 0x40
 8009936:	2101      	movs	r1, #1
 8009938:	5499      	strb	r1, [r3, r2]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2241      	movs	r2, #65	@ 0x41
 800993e:	2101      	movs	r1, #1
 8009940:	5499      	strb	r1, [r3, r2]
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2242      	movs	r2, #66	@ 0x42
 8009946:	2101      	movs	r1, #1
 8009948:	5499      	strb	r1, [r3, r2]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2243      	movs	r2, #67	@ 0x43
 800994e:	2101      	movs	r1, #1
 8009950:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2244      	movs	r2, #68	@ 0x44
 8009956:	2101      	movs	r1, #1
 8009958:	5499      	strb	r1, [r3, r2]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2245      	movs	r2, #69	@ 0x45
 800995e:	2101      	movs	r1, #1
 8009960:	5499      	strb	r1, [r3, r2]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2246      	movs	r2, #70	@ 0x46
 8009966:	2101      	movs	r1, #1
 8009968:	5499      	strb	r1, [r3, r2]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2247      	movs	r2, #71	@ 0x47
 800996e:	2101      	movs	r1, #1
 8009970:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	223d      	movs	r2, #61	@ 0x3d
 8009976:	2101      	movs	r1, #1
 8009978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	0018      	movs	r0, r3
 800997e:	46bd      	mov	sp, r7
 8009980:	b002      	add	sp, #8
 8009982:	bd80      	pop	{r7, pc}
 8009984:	08009989 	.word	0x08009989

08009988 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009990:	46c0      	nop			@ (mov r8, r8)
 8009992:	46bd      	mov	sp, r7
 8009994:	b002      	add	sp, #8
 8009996:	bd80      	pop	{r7, pc}

08009998 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80099a2:	230f      	movs	r3, #15
 80099a4:	18fb      	adds	r3, r7, r3
 80099a6:	2200      	movs	r2, #0
 80099a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d108      	bne.n	80099c2 <HAL_TIM_OC_Start_IT+0x2a>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	223e      	movs	r2, #62	@ 0x3e
 80099b4:	5c9b      	ldrb	r3, [r3, r2]
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	3b01      	subs	r3, #1
 80099ba:	1e5a      	subs	r2, r3, #1
 80099bc:	4193      	sbcs	r3, r2
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	e037      	b.n	8009a32 <HAL_TIM_OC_Start_IT+0x9a>
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	2b04      	cmp	r3, #4
 80099c6:	d108      	bne.n	80099da <HAL_TIM_OC_Start_IT+0x42>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	223f      	movs	r2, #63	@ 0x3f
 80099cc:	5c9b      	ldrb	r3, [r3, r2]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	3b01      	subs	r3, #1
 80099d2:	1e5a      	subs	r2, r3, #1
 80099d4:	4193      	sbcs	r3, r2
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	e02b      	b.n	8009a32 <HAL_TIM_OC_Start_IT+0x9a>
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d108      	bne.n	80099f2 <HAL_TIM_OC_Start_IT+0x5a>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2240      	movs	r2, #64	@ 0x40
 80099e4:	5c9b      	ldrb	r3, [r3, r2]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	3b01      	subs	r3, #1
 80099ea:	1e5a      	subs	r2, r3, #1
 80099ec:	4193      	sbcs	r3, r2
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	e01f      	b.n	8009a32 <HAL_TIM_OC_Start_IT+0x9a>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b0c      	cmp	r3, #12
 80099f6:	d108      	bne.n	8009a0a <HAL_TIM_OC_Start_IT+0x72>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2241      	movs	r2, #65	@ 0x41
 80099fc:	5c9b      	ldrb	r3, [r3, r2]
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	3b01      	subs	r3, #1
 8009a02:	1e5a      	subs	r2, r3, #1
 8009a04:	4193      	sbcs	r3, r2
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	e013      	b.n	8009a32 <HAL_TIM_OC_Start_IT+0x9a>
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b10      	cmp	r3, #16
 8009a0e:	d108      	bne.n	8009a22 <HAL_TIM_OC_Start_IT+0x8a>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2242      	movs	r2, #66	@ 0x42
 8009a14:	5c9b      	ldrb	r3, [r3, r2]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	1e5a      	subs	r2, r3, #1
 8009a1c:	4193      	sbcs	r3, r2
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	e007      	b.n	8009a32 <HAL_TIM_OC_Start_IT+0x9a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2243      	movs	r2, #67	@ 0x43
 8009a26:	5c9b      	ldrb	r3, [r3, r2]
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	1e5a      	subs	r2, r3, #1
 8009a2e:	4193      	sbcs	r3, r2
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8009a36:	2301      	movs	r3, #1
 8009a38:	e0c4      	b.n	8009bc4 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d104      	bne.n	8009a4a <HAL_TIM_OC_Start_IT+0xb2>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	223e      	movs	r2, #62	@ 0x3e
 8009a44:	2102      	movs	r1, #2
 8009a46:	5499      	strb	r1, [r3, r2]
 8009a48:	e023      	b.n	8009a92 <HAL_TIM_OC_Start_IT+0xfa>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b04      	cmp	r3, #4
 8009a4e:	d104      	bne.n	8009a5a <HAL_TIM_OC_Start_IT+0xc2>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	223f      	movs	r2, #63	@ 0x3f
 8009a54:	2102      	movs	r1, #2
 8009a56:	5499      	strb	r1, [r3, r2]
 8009a58:	e01b      	b.n	8009a92 <HAL_TIM_OC_Start_IT+0xfa>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d104      	bne.n	8009a6a <HAL_TIM_OC_Start_IT+0xd2>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2240      	movs	r2, #64	@ 0x40
 8009a64:	2102      	movs	r1, #2
 8009a66:	5499      	strb	r1, [r3, r2]
 8009a68:	e013      	b.n	8009a92 <HAL_TIM_OC_Start_IT+0xfa>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b0c      	cmp	r3, #12
 8009a6e:	d104      	bne.n	8009a7a <HAL_TIM_OC_Start_IT+0xe2>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2241      	movs	r2, #65	@ 0x41
 8009a74:	2102      	movs	r1, #2
 8009a76:	5499      	strb	r1, [r3, r2]
 8009a78:	e00b      	b.n	8009a92 <HAL_TIM_OC_Start_IT+0xfa>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d104      	bne.n	8009a8a <HAL_TIM_OC_Start_IT+0xf2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2242      	movs	r2, #66	@ 0x42
 8009a84:	2102      	movs	r1, #2
 8009a86:	5499      	strb	r1, [r3, r2]
 8009a88:	e003      	b.n	8009a92 <HAL_TIM_OC_Start_IT+0xfa>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2243      	movs	r2, #67	@ 0x43
 8009a8e:	2102      	movs	r1, #2
 8009a90:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b0c      	cmp	r3, #12
 8009a96:	d02a      	beq.n	8009aee <HAL_TIM_OC_Start_IT+0x156>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b0c      	cmp	r3, #12
 8009a9c:	d830      	bhi.n	8009b00 <HAL_TIM_OC_Start_IT+0x168>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	2b08      	cmp	r3, #8
 8009aa2:	d01b      	beq.n	8009adc <HAL_TIM_OC_Start_IT+0x144>
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	2b08      	cmp	r3, #8
 8009aa8:	d82a      	bhi.n	8009b00 <HAL_TIM_OC_Start_IT+0x168>
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <HAL_TIM_OC_Start_IT+0x120>
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d009      	beq.n	8009aca <HAL_TIM_OC_Start_IT+0x132>
 8009ab6:	e023      	b.n	8009b00 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68da      	ldr	r2, [r3, #12]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2102      	movs	r1, #2
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	60da      	str	r2, [r3, #12]
      break;
 8009ac8:	e01f      	b.n	8009b0a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68da      	ldr	r2, [r3, #12]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2104      	movs	r1, #4
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	60da      	str	r2, [r3, #12]
      break;
 8009ada:	e016      	b.n	8009b0a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	68da      	ldr	r2, [r3, #12]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2108      	movs	r1, #8
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	60da      	str	r2, [r3, #12]
      break;
 8009aec:	e00d      	b.n	8009b0a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2110      	movs	r1, #16
 8009afa:	430a      	orrs	r2, r1
 8009afc:	60da      	str	r2, [r3, #12]
      break;
 8009afe:	e004      	b.n	8009b0a <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8009b00:	230f      	movs	r3, #15
 8009b02:	18fb      	adds	r3, r7, r3
 8009b04:	2201      	movs	r2, #1
 8009b06:	701a      	strb	r2, [r3, #0]
      break;
 8009b08:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009b0a:	230f      	movs	r3, #15
 8009b0c:	18fb      	adds	r3, r7, r3
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d154      	bne.n	8009bbe <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	0018      	movs	r0, r3
 8009b1e:	f001 fe7f 	bl	800b820 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a29      	ldr	r2, [pc, #164]	@ (8009bcc <HAL_TIM_OC_Start_IT+0x234>)
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d009      	beq.n	8009b40 <HAL_TIM_OC_Start_IT+0x1a8>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a27      	ldr	r2, [pc, #156]	@ (8009bd0 <HAL_TIM_OC_Start_IT+0x238>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIM_OC_Start_IT+0x1a8>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a26      	ldr	r2, [pc, #152]	@ (8009bd4 <HAL_TIM_OC_Start_IT+0x23c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d101      	bne.n	8009b44 <HAL_TIM_OC_Start_IT+0x1ac>
 8009b40:	2301      	movs	r3, #1
 8009b42:	e000      	b.n	8009b46 <HAL_TIM_OC_Start_IT+0x1ae>
 8009b44:	2300      	movs	r3, #0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d008      	beq.n	8009b5c <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2180      	movs	r1, #128	@ 0x80
 8009b56:	0209      	lsls	r1, r1, #8
 8009b58:	430a      	orrs	r2, r1
 8009b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a1a      	ldr	r2, [pc, #104]	@ (8009bcc <HAL_TIM_OC_Start_IT+0x234>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d00a      	beq.n	8009b7c <HAL_TIM_OC_Start_IT+0x1e4>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	2380      	movs	r3, #128	@ 0x80
 8009b6c:	05db      	lsls	r3, r3, #23
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d004      	beq.n	8009b7c <HAL_TIM_OC_Start_IT+0x1e4>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a18      	ldr	r2, [pc, #96]	@ (8009bd8 <HAL_TIM_OC_Start_IT+0x240>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d116      	bne.n	8009baa <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	689b      	ldr	r3, [r3, #8]
 8009b82:	4a16      	ldr	r2, [pc, #88]	@ (8009bdc <HAL_TIM_OC_Start_IT+0x244>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	2b06      	cmp	r3, #6
 8009b8c:	d016      	beq.n	8009bbc <HAL_TIM_OC_Start_IT+0x224>
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	2380      	movs	r3, #128	@ 0x80
 8009b92:	025b      	lsls	r3, r3, #9
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d011      	beq.n	8009bbc <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	430a      	orrs	r2, r1
 8009ba6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ba8:	e008      	b.n	8009bbc <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	601a      	str	r2, [r3, #0]
 8009bba:	e000      	b.n	8009bbe <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bbc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009bbe:	230f      	movs	r3, #15
 8009bc0:	18fb      	adds	r3, r7, r3
 8009bc2:	781b      	ldrb	r3, [r3, #0]
}
 8009bc4:	0018      	movs	r0, r3
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	b004      	add	sp, #16
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	40012c00 	.word	0x40012c00
 8009bd0:	40014400 	.word	0x40014400
 8009bd4:	40014800 	.word	0x40014800
 8009bd8:	40000400 	.word	0x40000400
 8009bdc:	00010007 	.word	0x00010007

08009be0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009bea:	230f      	movs	r3, #15
 8009bec:	18fb      	adds	r3, r7, r3
 8009bee:	2200      	movs	r2, #0
 8009bf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	2b0c      	cmp	r3, #12
 8009bf6:	d02a      	beq.n	8009c4e <HAL_TIM_OC_Stop_IT+0x6e>
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b0c      	cmp	r3, #12
 8009bfc:	d830      	bhi.n	8009c60 <HAL_TIM_OC_Stop_IT+0x80>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d01b      	beq.n	8009c3c <HAL_TIM_OC_Stop_IT+0x5c>
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	2b08      	cmp	r3, #8
 8009c08:	d82a      	bhi.n	8009c60 <HAL_TIM_OC_Stop_IT+0x80>
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_TIM_OC_Stop_IT+0x38>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d009      	beq.n	8009c2a <HAL_TIM_OC_Stop_IT+0x4a>
 8009c16:	e023      	b.n	8009c60 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2102      	movs	r1, #2
 8009c24:	438a      	bics	r2, r1
 8009c26:	60da      	str	r2, [r3, #12]
      break;
 8009c28:	e01f      	b.n	8009c6a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68da      	ldr	r2, [r3, #12]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	2104      	movs	r1, #4
 8009c36:	438a      	bics	r2, r1
 8009c38:	60da      	str	r2, [r3, #12]
      break;
 8009c3a:	e016      	b.n	8009c6a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2108      	movs	r1, #8
 8009c48:	438a      	bics	r2, r1
 8009c4a:	60da      	str	r2, [r3, #12]
      break;
 8009c4c:	e00d      	b.n	8009c6a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2110      	movs	r1, #16
 8009c5a:	438a      	bics	r2, r1
 8009c5c:	60da      	str	r2, [r3, #12]
      break;
 8009c5e:	e004      	b.n	8009c6a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8009c60:	230f      	movs	r3, #15
 8009c62:	18fb      	adds	r3, r7, r3
 8009c64:	2201      	movs	r2, #1
 8009c66:	701a      	strb	r2, [r3, #0]
      break;
 8009c68:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009c6a:	230f      	movs	r3, #15
 8009c6c:	18fb      	adds	r3, r7, r3
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d000      	beq.n	8009c76 <HAL_TIM_OC_Stop_IT+0x96>
 8009c74:	e06e      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f001 fdce 	bl	800b820 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a36      	ldr	r2, [pc, #216]	@ (8009d64 <HAL_TIM_OC_Stop_IT+0x184>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d009      	beq.n	8009ca2 <HAL_TIM_OC_Stop_IT+0xc2>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a35      	ldr	r2, [pc, #212]	@ (8009d68 <HAL_TIM_OC_Stop_IT+0x188>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d004      	beq.n	8009ca2 <HAL_TIM_OC_Stop_IT+0xc2>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a33      	ldr	r2, [pc, #204]	@ (8009d6c <HAL_TIM_OC_Stop_IT+0x18c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d101      	bne.n	8009ca6 <HAL_TIM_OC_Stop_IT+0xc6>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e000      	b.n	8009ca8 <HAL_TIM_OC_Stop_IT+0xc8>
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d013      	beq.n	8009cd4 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	4a2f      	ldr	r2, [pc, #188]	@ (8009d70 <HAL_TIM_OC_Stop_IT+0x190>)
 8009cb4:	4013      	ands	r3, r2
 8009cb6:	d10d      	bne.n	8009cd4 <HAL_TIM_OC_Stop_IT+0xf4>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8009d74 <HAL_TIM_OC_Stop_IT+0x194>)
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	d107      	bne.n	8009cd4 <HAL_TIM_OC_Stop_IT+0xf4>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	492a      	ldr	r1, [pc, #168]	@ (8009d78 <HAL_TIM_OC_Stop_IT+0x198>)
 8009cd0:	400a      	ands	r2, r1
 8009cd2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	4a25      	ldr	r2, [pc, #148]	@ (8009d70 <HAL_TIM_OC_Stop_IT+0x190>)
 8009cdc:	4013      	ands	r3, r2
 8009cde:	d10d      	bne.n	8009cfc <HAL_TIM_OC_Stop_IT+0x11c>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	4a23      	ldr	r2, [pc, #140]	@ (8009d74 <HAL_TIM_OC_Stop_IT+0x194>)
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d107      	bne.n	8009cfc <HAL_TIM_OC_Stop_IT+0x11c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	438a      	bics	r2, r1
 8009cfa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <HAL_TIM_OC_Stop_IT+0x12c>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	223e      	movs	r2, #62	@ 0x3e
 8009d06:	2101      	movs	r1, #1
 8009d08:	5499      	strb	r1, [r3, r2]
 8009d0a:	e023      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d104      	bne.n	8009d1c <HAL_TIM_OC_Stop_IT+0x13c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	223f      	movs	r2, #63	@ 0x3f
 8009d16:	2101      	movs	r1, #1
 8009d18:	5499      	strb	r1, [r3, r2]
 8009d1a:	e01b      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b08      	cmp	r3, #8
 8009d20:	d104      	bne.n	8009d2c <HAL_TIM_OC_Stop_IT+0x14c>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2240      	movs	r2, #64	@ 0x40
 8009d26:	2101      	movs	r1, #1
 8009d28:	5499      	strb	r1, [r3, r2]
 8009d2a:	e013      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d104      	bne.n	8009d3c <HAL_TIM_OC_Stop_IT+0x15c>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2241      	movs	r2, #65	@ 0x41
 8009d36:	2101      	movs	r1, #1
 8009d38:	5499      	strb	r1, [r3, r2]
 8009d3a:	e00b      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	2b10      	cmp	r3, #16
 8009d40:	d104      	bne.n	8009d4c <HAL_TIM_OC_Stop_IT+0x16c>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2242      	movs	r2, #66	@ 0x42
 8009d46:	2101      	movs	r1, #1
 8009d48:	5499      	strb	r1, [r3, r2]
 8009d4a:	e003      	b.n	8009d54 <HAL_TIM_OC_Stop_IT+0x174>
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2243      	movs	r2, #67	@ 0x43
 8009d50:	2101      	movs	r1, #1
 8009d52:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8009d54:	230f      	movs	r3, #15
 8009d56:	18fb      	adds	r3, r7, r3
 8009d58:	781b      	ldrb	r3, [r3, #0]
}
 8009d5a:	0018      	movs	r0, r3
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	b004      	add	sp, #16
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	46c0      	nop			@ (mov r8, r8)
 8009d64:	40012c00 	.word	0x40012c00
 8009d68:	40014400 	.word	0x40014400
 8009d6c:	40014800 	.word	0x40014800
 8009d70:	00001111 	.word	0x00001111
 8009d74:	00000444 	.word	0x00000444
 8009d78:	ffff7fff 	.word	0xffff7fff

08009d7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e056      	b.n	8009e3c <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	223d      	movs	r2, #61	@ 0x3d
 8009d92:	5c9b      	ldrb	r3, [r3, r2]
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d113      	bne.n	8009dc2 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	223c      	movs	r2, #60	@ 0x3c
 8009d9e:	2100      	movs	r1, #0
 8009da0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	0018      	movs	r0, r3
 8009da6:	f001 fd5f 	bl	800b868 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a23      	ldr	r2, [pc, #140]	@ (8009e44 <HAL_TIM_PWM_Init+0xc8>)
 8009db6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	0010      	movs	r0, r2
 8009dc0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	223d      	movs	r2, #61	@ 0x3d
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	0019      	movs	r1, r3
 8009dd4:	0010      	movs	r0, r2
 8009dd6:	f001 f849 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2248      	movs	r2, #72	@ 0x48
 8009dde:	2101      	movs	r1, #1
 8009de0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	223e      	movs	r2, #62	@ 0x3e
 8009de6:	2101      	movs	r1, #1
 8009de8:	5499      	strb	r1, [r3, r2]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	223f      	movs	r2, #63	@ 0x3f
 8009dee:	2101      	movs	r1, #1
 8009df0:	5499      	strb	r1, [r3, r2]
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2240      	movs	r2, #64	@ 0x40
 8009df6:	2101      	movs	r1, #1
 8009df8:	5499      	strb	r1, [r3, r2]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2241      	movs	r2, #65	@ 0x41
 8009dfe:	2101      	movs	r1, #1
 8009e00:	5499      	strb	r1, [r3, r2]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2242      	movs	r2, #66	@ 0x42
 8009e06:	2101      	movs	r1, #1
 8009e08:	5499      	strb	r1, [r3, r2]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2243      	movs	r2, #67	@ 0x43
 8009e0e:	2101      	movs	r1, #1
 8009e10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2244      	movs	r2, #68	@ 0x44
 8009e16:	2101      	movs	r1, #1
 8009e18:	5499      	strb	r1, [r3, r2]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2245      	movs	r2, #69	@ 0x45
 8009e1e:	2101      	movs	r1, #1
 8009e20:	5499      	strb	r1, [r3, r2]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2246      	movs	r2, #70	@ 0x46
 8009e26:	2101      	movs	r1, #1
 8009e28:	5499      	strb	r1, [r3, r2]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2247      	movs	r2, #71	@ 0x47
 8009e2e:	2101      	movs	r1, #1
 8009e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	223d      	movs	r2, #61	@ 0x3d
 8009e36:	2101      	movs	r1, #1
 8009e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b002      	add	sp, #8
 8009e42:	bd80      	pop	{r7, pc}
 8009e44:	08009e49 	.word	0x08009e49

08009e48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e50:	46c0      	nop			@ (mov r8, r8)
 8009e52:	46bd      	mov	sp, r7
 8009e54:	b002      	add	sp, #8
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b084      	sub	sp, #16
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d108      	bne.n	8009e7a <HAL_TIM_PWM_Start+0x22>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	223e      	movs	r2, #62	@ 0x3e
 8009e6c:	5c9b      	ldrb	r3, [r3, r2]
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	3b01      	subs	r3, #1
 8009e72:	1e5a      	subs	r2, r3, #1
 8009e74:	4193      	sbcs	r3, r2
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	e037      	b.n	8009eea <HAL_TIM_PWM_Start+0x92>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d108      	bne.n	8009e92 <HAL_TIM_PWM_Start+0x3a>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	223f      	movs	r2, #63	@ 0x3f
 8009e84:	5c9b      	ldrb	r3, [r3, r2]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	1e5a      	subs	r2, r3, #1
 8009e8c:	4193      	sbcs	r3, r2
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	e02b      	b.n	8009eea <HAL_TIM_PWM_Start+0x92>
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b08      	cmp	r3, #8
 8009e96:	d108      	bne.n	8009eaa <HAL_TIM_PWM_Start+0x52>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2240      	movs	r2, #64	@ 0x40
 8009e9c:	5c9b      	ldrb	r3, [r3, r2]
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	1e5a      	subs	r2, r3, #1
 8009ea4:	4193      	sbcs	r3, r2
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	e01f      	b.n	8009eea <HAL_TIM_PWM_Start+0x92>
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	2b0c      	cmp	r3, #12
 8009eae:	d108      	bne.n	8009ec2 <HAL_TIM_PWM_Start+0x6a>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2241      	movs	r2, #65	@ 0x41
 8009eb4:	5c9b      	ldrb	r3, [r3, r2]
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	3b01      	subs	r3, #1
 8009eba:	1e5a      	subs	r2, r3, #1
 8009ebc:	4193      	sbcs	r3, r2
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	e013      	b.n	8009eea <HAL_TIM_PWM_Start+0x92>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b10      	cmp	r3, #16
 8009ec6:	d108      	bne.n	8009eda <HAL_TIM_PWM_Start+0x82>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2242      	movs	r2, #66	@ 0x42
 8009ecc:	5c9b      	ldrb	r3, [r3, r2]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	1e5a      	subs	r2, r3, #1
 8009ed4:	4193      	sbcs	r3, r2
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	e007      	b.n	8009eea <HAL_TIM_PWM_Start+0x92>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2243      	movs	r2, #67	@ 0x43
 8009ede:	5c9b      	ldrb	r3, [r3, r2]
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	1e5a      	subs	r2, r3, #1
 8009ee6:	4193      	sbcs	r3, r2
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e081      	b.n	8009ff6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_PWM_Start+0xaa>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	223e      	movs	r2, #62	@ 0x3e
 8009efc:	2102      	movs	r1, #2
 8009efe:	5499      	strb	r1, [r3, r2]
 8009f00:	e023      	b.n	8009f4a <HAL_TIM_PWM_Start+0xf2>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Start+0xba>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	223f      	movs	r2, #63	@ 0x3f
 8009f0c:	2102      	movs	r1, #2
 8009f0e:	5499      	strb	r1, [r3, r2]
 8009f10:	e01b      	b.n	8009f4a <HAL_TIM_PWM_Start+0xf2>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Start+0xca>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2240      	movs	r2, #64	@ 0x40
 8009f1c:	2102      	movs	r1, #2
 8009f1e:	5499      	strb	r1, [r3, r2]
 8009f20:	e013      	b.n	8009f4a <HAL_TIM_PWM_Start+0xf2>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b0c      	cmp	r3, #12
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_PWM_Start+0xda>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2241      	movs	r2, #65	@ 0x41
 8009f2c:	2102      	movs	r1, #2
 8009f2e:	5499      	strb	r1, [r3, r2]
 8009f30:	e00b      	b.n	8009f4a <HAL_TIM_PWM_Start+0xf2>
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d104      	bne.n	8009f42 <HAL_TIM_PWM_Start+0xea>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2242      	movs	r2, #66	@ 0x42
 8009f3c:	2102      	movs	r1, #2
 8009f3e:	5499      	strb	r1, [r3, r2]
 8009f40:	e003      	b.n	8009f4a <HAL_TIM_PWM_Start+0xf2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2243      	movs	r2, #67	@ 0x43
 8009f46:	2102      	movs	r1, #2
 8009f48:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	6839      	ldr	r1, [r7, #0]
 8009f50:	2201      	movs	r2, #1
 8009f52:	0018      	movs	r0, r3
 8009f54:	f001 fc64 	bl	800b820 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a28      	ldr	r2, [pc, #160]	@ (800a000 <HAL_TIM_PWM_Start+0x1a8>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d009      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x11e>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a27      	ldr	r2, [pc, #156]	@ (800a004 <HAL_TIM_PWM_Start+0x1ac>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d004      	beq.n	8009f76 <HAL_TIM_PWM_Start+0x11e>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a25      	ldr	r2, [pc, #148]	@ (800a008 <HAL_TIM_PWM_Start+0x1b0>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d101      	bne.n	8009f7a <HAL_TIM_PWM_Start+0x122>
 8009f76:	2301      	movs	r3, #1
 8009f78:	e000      	b.n	8009f7c <HAL_TIM_PWM_Start+0x124>
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d008      	beq.n	8009f92 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2180      	movs	r1, #128	@ 0x80
 8009f8c:	0209      	lsls	r1, r1, #8
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a1a      	ldr	r2, [pc, #104]	@ (800a000 <HAL_TIM_PWM_Start+0x1a8>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00a      	beq.n	8009fb2 <HAL_TIM_PWM_Start+0x15a>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	2380      	movs	r3, #128	@ 0x80
 8009fa2:	05db      	lsls	r3, r3, #23
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d004      	beq.n	8009fb2 <HAL_TIM_PWM_Start+0x15a>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a17      	ldr	r2, [pc, #92]	@ (800a00c <HAL_TIM_PWM_Start+0x1b4>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d116      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	4a15      	ldr	r2, [pc, #84]	@ (800a010 <HAL_TIM_PWM_Start+0x1b8>)
 8009fba:	4013      	ands	r3, r2
 8009fbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2b06      	cmp	r3, #6
 8009fc2:	d016      	beq.n	8009ff2 <HAL_TIM_PWM_Start+0x19a>
 8009fc4:	68fa      	ldr	r2, [r7, #12]
 8009fc6:	2380      	movs	r3, #128	@ 0x80
 8009fc8:	025b      	lsls	r3, r3, #9
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d011      	beq.n	8009ff2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2101      	movs	r1, #1
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fde:	e008      	b.n	8009ff2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2101      	movs	r1, #1
 8009fec:	430a      	orrs	r2, r1
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e000      	b.n	8009ff4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	0018      	movs	r0, r3
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	b004      	add	sp, #16
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	46c0      	nop			@ (mov r8, r8)
 800a000:	40012c00 	.word	0x40012c00
 800a004:	40014400 	.word	0x40014400
 800a008:	40014800 	.word	0x40014800
 800a00c:	40000400 	.word	0x40000400
 800a010:	00010007 	.word	0x00010007

0800a014 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e056      	b.n	800a0d4 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	223d      	movs	r2, #61	@ 0x3d
 800a02a:	5c9b      	ldrb	r3, [r3, r2]
 800a02c:	b2db      	uxtb	r3, r3
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d113      	bne.n	800a05a <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	223c      	movs	r2, #60	@ 0x3c
 800a036:	2100      	movs	r1, #0
 800a038:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	0018      	movs	r0, r3
 800a03e:	f001 fc13 	bl	800b868 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a046:	2b00      	cmp	r3, #0
 800a048:	d102      	bne.n	800a050 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	4a23      	ldr	r2, [pc, #140]	@ (800a0dc <HAL_TIM_IC_Init+0xc8>)
 800a04e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	0010      	movs	r0, r2
 800a058:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	223d      	movs	r2, #61	@ 0x3d
 800a05e:	2102      	movs	r1, #2
 800a060:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	0019      	movs	r1, r3
 800a06c:	0010      	movs	r0, r2
 800a06e:	f000 fefd 	bl	800ae6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2248      	movs	r2, #72	@ 0x48
 800a076:	2101      	movs	r1, #1
 800a078:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	223e      	movs	r2, #62	@ 0x3e
 800a07e:	2101      	movs	r1, #1
 800a080:	5499      	strb	r1, [r3, r2]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	223f      	movs	r2, #63	@ 0x3f
 800a086:	2101      	movs	r1, #1
 800a088:	5499      	strb	r1, [r3, r2]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2240      	movs	r2, #64	@ 0x40
 800a08e:	2101      	movs	r1, #1
 800a090:	5499      	strb	r1, [r3, r2]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2241      	movs	r2, #65	@ 0x41
 800a096:	2101      	movs	r1, #1
 800a098:	5499      	strb	r1, [r3, r2]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2242      	movs	r2, #66	@ 0x42
 800a09e:	2101      	movs	r1, #1
 800a0a0:	5499      	strb	r1, [r3, r2]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2243      	movs	r2, #67	@ 0x43
 800a0a6:	2101      	movs	r1, #1
 800a0a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2244      	movs	r2, #68	@ 0x44
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	5499      	strb	r1, [r3, r2]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2245      	movs	r2, #69	@ 0x45
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	5499      	strb	r1, [r3, r2]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2246      	movs	r2, #70	@ 0x46
 800a0be:	2101      	movs	r1, #1
 800a0c0:	5499      	strb	r1, [r3, r2]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2247      	movs	r2, #71	@ 0x47
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	223d      	movs	r2, #61	@ 0x3d
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0d2:	2300      	movs	r3, #0
}
 800a0d4:	0018      	movs	r0, r3
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	b002      	add	sp, #8
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	0800a0e1 	.word	0x0800a0e1

0800a0e0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800a0e8:	46c0      	nop			@ (mov r8, r8)
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	b002      	add	sp, #8
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0fa:	230f      	movs	r3, #15
 800a0fc:	18fb      	adds	r3, r7, r3
 800a0fe:	2200      	movs	r2, #0
 800a100:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <HAL_TIM_IC_Start_IT+0x22>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	223e      	movs	r2, #62	@ 0x3e
 800a10c:	5c9b      	ldrb	r3, [r3, r2]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	e023      	b.n	800a15a <HAL_TIM_IC_Start_IT+0x6a>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b04      	cmp	r3, #4
 800a116:	d104      	bne.n	800a122 <HAL_TIM_IC_Start_IT+0x32>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	223f      	movs	r2, #63	@ 0x3f
 800a11c:	5c9b      	ldrb	r3, [r3, r2]
 800a11e:	b2db      	uxtb	r3, r3
 800a120:	e01b      	b.n	800a15a <HAL_TIM_IC_Start_IT+0x6a>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	2b08      	cmp	r3, #8
 800a126:	d104      	bne.n	800a132 <HAL_TIM_IC_Start_IT+0x42>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2240      	movs	r2, #64	@ 0x40
 800a12c:	5c9b      	ldrb	r3, [r3, r2]
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	e013      	b.n	800a15a <HAL_TIM_IC_Start_IT+0x6a>
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	2b0c      	cmp	r3, #12
 800a136:	d104      	bne.n	800a142 <HAL_TIM_IC_Start_IT+0x52>
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2241      	movs	r2, #65	@ 0x41
 800a13c:	5c9b      	ldrb	r3, [r3, r2]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	e00b      	b.n	800a15a <HAL_TIM_IC_Start_IT+0x6a>
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b10      	cmp	r3, #16
 800a146:	d104      	bne.n	800a152 <HAL_TIM_IC_Start_IT+0x62>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2242      	movs	r2, #66	@ 0x42
 800a14c:	5c9b      	ldrb	r3, [r3, r2]
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	e003      	b.n	800a15a <HAL_TIM_IC_Start_IT+0x6a>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2243      	movs	r2, #67	@ 0x43
 800a156:	5c9b      	ldrb	r3, [r3, r2]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	220e      	movs	r2, #14
 800a15c:	18ba      	adds	r2, r7, r2
 800a15e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d104      	bne.n	800a170 <HAL_TIM_IC_Start_IT+0x80>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2244      	movs	r2, #68	@ 0x44
 800a16a:	5c9b      	ldrb	r3, [r3, r2]
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	e013      	b.n	800a198 <HAL_TIM_IC_Start_IT+0xa8>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b04      	cmp	r3, #4
 800a174:	d104      	bne.n	800a180 <HAL_TIM_IC_Start_IT+0x90>
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2245      	movs	r2, #69	@ 0x45
 800a17a:	5c9b      	ldrb	r3, [r3, r2]
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	e00b      	b.n	800a198 <HAL_TIM_IC_Start_IT+0xa8>
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	2b08      	cmp	r3, #8
 800a184:	d104      	bne.n	800a190 <HAL_TIM_IC_Start_IT+0xa0>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2246      	movs	r2, #70	@ 0x46
 800a18a:	5c9b      	ldrb	r3, [r3, r2]
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e003      	b.n	800a198 <HAL_TIM_IC_Start_IT+0xa8>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2247      	movs	r2, #71	@ 0x47
 800a194:	5c9b      	ldrb	r3, [r3, r2]
 800a196:	b2db      	uxtb	r3, r3
 800a198:	210d      	movs	r1, #13
 800a19a:	187a      	adds	r2, r7, r1
 800a19c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800a19e:	230e      	movs	r3, #14
 800a1a0:	18fb      	adds	r3, r7, r3
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d103      	bne.n	800a1b0 <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1a8:	187b      	adds	r3, r7, r1
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d001      	beq.n	800a1b4 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e0c3      	b.n	800a33c <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d104      	bne.n	800a1c4 <HAL_TIM_IC_Start_IT+0xd4>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	223e      	movs	r2, #62	@ 0x3e
 800a1be:	2102      	movs	r1, #2
 800a1c0:	5499      	strb	r1, [r3, r2]
 800a1c2:	e023      	b.n	800a20c <HAL_TIM_IC_Start_IT+0x11c>
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d104      	bne.n	800a1d4 <HAL_TIM_IC_Start_IT+0xe4>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	223f      	movs	r2, #63	@ 0x3f
 800a1ce:	2102      	movs	r1, #2
 800a1d0:	5499      	strb	r1, [r3, r2]
 800a1d2:	e01b      	b.n	800a20c <HAL_TIM_IC_Start_IT+0x11c>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	2b08      	cmp	r3, #8
 800a1d8:	d104      	bne.n	800a1e4 <HAL_TIM_IC_Start_IT+0xf4>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2240      	movs	r2, #64	@ 0x40
 800a1de:	2102      	movs	r1, #2
 800a1e0:	5499      	strb	r1, [r3, r2]
 800a1e2:	e013      	b.n	800a20c <HAL_TIM_IC_Start_IT+0x11c>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b0c      	cmp	r3, #12
 800a1e8:	d104      	bne.n	800a1f4 <HAL_TIM_IC_Start_IT+0x104>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2241      	movs	r2, #65	@ 0x41
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	5499      	strb	r1, [r3, r2]
 800a1f2:	e00b      	b.n	800a20c <HAL_TIM_IC_Start_IT+0x11c>
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2b10      	cmp	r3, #16
 800a1f8:	d104      	bne.n	800a204 <HAL_TIM_IC_Start_IT+0x114>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2242      	movs	r2, #66	@ 0x42
 800a1fe:	2102      	movs	r1, #2
 800a200:	5499      	strb	r1, [r3, r2]
 800a202:	e003      	b.n	800a20c <HAL_TIM_IC_Start_IT+0x11c>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2243      	movs	r2, #67	@ 0x43
 800a208:	2102      	movs	r1, #2
 800a20a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d104      	bne.n	800a21c <HAL_TIM_IC_Start_IT+0x12c>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2244      	movs	r2, #68	@ 0x44
 800a216:	2102      	movs	r1, #2
 800a218:	5499      	strb	r1, [r3, r2]
 800a21a:	e013      	b.n	800a244 <HAL_TIM_IC_Start_IT+0x154>
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d104      	bne.n	800a22c <HAL_TIM_IC_Start_IT+0x13c>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2245      	movs	r2, #69	@ 0x45
 800a226:	2102      	movs	r1, #2
 800a228:	5499      	strb	r1, [r3, r2]
 800a22a:	e00b      	b.n	800a244 <HAL_TIM_IC_Start_IT+0x154>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b08      	cmp	r3, #8
 800a230:	d104      	bne.n	800a23c <HAL_TIM_IC_Start_IT+0x14c>
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2246      	movs	r2, #70	@ 0x46
 800a236:	2102      	movs	r1, #2
 800a238:	5499      	strb	r1, [r3, r2]
 800a23a:	e003      	b.n	800a244 <HAL_TIM_IC_Start_IT+0x154>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2247      	movs	r2, #71	@ 0x47
 800a240:	2102      	movs	r1, #2
 800a242:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	2b0c      	cmp	r3, #12
 800a248:	d02a      	beq.n	800a2a0 <HAL_TIM_IC_Start_IT+0x1b0>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b0c      	cmp	r3, #12
 800a24e:	d830      	bhi.n	800a2b2 <HAL_TIM_IC_Start_IT+0x1c2>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2b08      	cmp	r3, #8
 800a254:	d01b      	beq.n	800a28e <HAL_TIM_IC_Start_IT+0x19e>
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	2b08      	cmp	r3, #8
 800a25a:	d82a      	bhi.n	800a2b2 <HAL_TIM_IC_Start_IT+0x1c2>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <HAL_TIM_IC_Start_IT+0x17a>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	2b04      	cmp	r3, #4
 800a266:	d009      	beq.n	800a27c <HAL_TIM_IC_Start_IT+0x18c>
 800a268:	e023      	b.n	800a2b2 <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2102      	movs	r1, #2
 800a276:	430a      	orrs	r2, r1
 800a278:	60da      	str	r2, [r3, #12]
      break;
 800a27a:	e01f      	b.n	800a2bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	2104      	movs	r1, #4
 800a288:	430a      	orrs	r2, r1
 800a28a:	60da      	str	r2, [r3, #12]
      break;
 800a28c:	e016      	b.n	800a2bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68da      	ldr	r2, [r3, #12]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2108      	movs	r1, #8
 800a29a:	430a      	orrs	r2, r1
 800a29c:	60da      	str	r2, [r3, #12]
      break;
 800a29e:	e00d      	b.n	800a2bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68da      	ldr	r2, [r3, #12]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2110      	movs	r1, #16
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	60da      	str	r2, [r3, #12]
      break;
 800a2b0:	e004      	b.n	800a2bc <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 800a2b2:	230f      	movs	r3, #15
 800a2b4:	18fb      	adds	r3, r7, r3
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	701a      	strb	r2, [r3, #0]
      break;
 800a2ba:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800a2bc:	230f      	movs	r3, #15
 800a2be:	18fb      	adds	r3, r7, r3
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d137      	bne.n	800a336 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	0018      	movs	r0, r3
 800a2d0:	f001 faa6 	bl	800b820 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a344 <HAL_TIM_IC_Start_IT+0x254>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d00a      	beq.n	800a2f4 <HAL_TIM_IC_Start_IT+0x204>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	2380      	movs	r3, #128	@ 0x80
 800a2e4:	05db      	lsls	r3, r3, #23
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d004      	beq.n	800a2f4 <HAL_TIM_IC_Start_IT+0x204>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a16      	ldr	r2, [pc, #88]	@ (800a348 <HAL_TIM_IC_Start_IT+0x258>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d116      	bne.n	800a322 <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	4a14      	ldr	r2, [pc, #80]	@ (800a34c <HAL_TIM_IC_Start_IT+0x25c>)
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b06      	cmp	r3, #6
 800a304:	d016      	beq.n	800a334 <HAL_TIM_IC_Start_IT+0x244>
 800a306:	68ba      	ldr	r2, [r7, #8]
 800a308:	2380      	movs	r3, #128	@ 0x80
 800a30a:	025b      	lsls	r3, r3, #9
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d011      	beq.n	800a334 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2101      	movs	r1, #1
 800a31c:	430a      	orrs	r2, r1
 800a31e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a320:	e008      	b.n	800a334 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2101      	movs	r1, #1
 800a32e:	430a      	orrs	r2, r1
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	e000      	b.n	800a336 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a334:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800a336:	230f      	movs	r3, #15
 800a338:	18fb      	adds	r3, r7, r3
 800a33a:	781b      	ldrb	r3, [r3, #0]
}
 800a33c:	0018      	movs	r0, r3
 800a33e:	46bd      	mov	sp, r7
 800a340:	b004      	add	sp, #16
 800a342:	bd80      	pop	{r7, pc}
 800a344:	40012c00 	.word	0x40012c00
 800a348:	40000400 	.word	0x40000400
 800a34c:	00010007 	.word	0x00010007

0800a350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2202      	movs	r2, #2
 800a36c:	4013      	ands	r3, r2
 800a36e:	d027      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2202      	movs	r2, #2
 800a374:	4013      	ands	r3, r2
 800a376:	d023      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2203      	movs	r2, #3
 800a37e:	4252      	negs	r2, r2
 800a380:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	699b      	ldr	r3, [r3, #24]
 800a38e:	2203      	movs	r2, #3
 800a390:	4013      	ands	r3, r2
 800a392:	d006      	beq.n	800a3a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2294      	movs	r2, #148	@ 0x94
 800a398:	589b      	ldr	r3, [r3, r2]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	0010      	movs	r0, r2
 800a39e:	4798      	blx	r3
 800a3a0:	e00b      	b.n	800a3ba <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	229c      	movs	r2, #156	@ 0x9c
 800a3a6:	589b      	ldr	r3, [r3, r2]
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	0010      	movs	r0, r2
 800a3ac:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	22a0      	movs	r2, #160	@ 0xa0
 800a3b2:	589b      	ldr	r3, [r3, r2]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	0010      	movs	r0, r2
 800a3b8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	2204      	movs	r2, #4
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	d028      	beq.n	800a41a <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2204      	movs	r2, #4
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	d024      	beq.n	800a41a <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	2205      	movs	r2, #5
 800a3d6:	4252      	negs	r2, r2
 800a3d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2202      	movs	r2, #2
 800a3de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	23c0      	movs	r3, #192	@ 0xc0
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	d006      	beq.n	800a3fc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2294      	movs	r2, #148	@ 0x94
 800a3f2:	589b      	ldr	r3, [r3, r2]
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	0010      	movs	r0, r2
 800a3f8:	4798      	blx	r3
 800a3fa:	e00b      	b.n	800a414 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	229c      	movs	r2, #156	@ 0x9c
 800a400:	589b      	ldr	r3, [r3, r2]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	0010      	movs	r0, r2
 800a406:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	22a0      	movs	r2, #160	@ 0xa0
 800a40c:	589b      	ldr	r3, [r3, r2]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	0010      	movs	r0, r2
 800a412:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	2208      	movs	r2, #8
 800a41e:	4013      	ands	r3, r2
 800a420:	d027      	beq.n	800a472 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2208      	movs	r2, #8
 800a426:	4013      	ands	r3, r2
 800a428:	d023      	beq.n	800a472 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2209      	movs	r2, #9
 800a430:	4252      	negs	r2, r2
 800a432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2204      	movs	r2, #4
 800a438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	2203      	movs	r2, #3
 800a442:	4013      	ands	r3, r2
 800a444:	d006      	beq.n	800a454 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2294      	movs	r2, #148	@ 0x94
 800a44a:	589b      	ldr	r3, [r3, r2]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	0010      	movs	r0, r2
 800a450:	4798      	blx	r3
 800a452:	e00b      	b.n	800a46c <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	229c      	movs	r2, #156	@ 0x9c
 800a458:	589b      	ldr	r3, [r3, r2]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	0010      	movs	r0, r2
 800a45e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	22a0      	movs	r2, #160	@ 0xa0
 800a464:	589b      	ldr	r3, [r3, r2]
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	0010      	movs	r0, r2
 800a46a:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2200      	movs	r2, #0
 800a470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	2210      	movs	r2, #16
 800a476:	4013      	ands	r3, r2
 800a478:	d028      	beq.n	800a4cc <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2210      	movs	r2, #16
 800a47e:	4013      	ands	r3, r2
 800a480:	d024      	beq.n	800a4cc <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	2211      	movs	r2, #17
 800a488:	4252      	negs	r2, r2
 800a48a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2208      	movs	r2, #8
 800a490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69da      	ldr	r2, [r3, #28]
 800a498:	23c0      	movs	r3, #192	@ 0xc0
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4013      	ands	r3, r2
 800a49e:	d006      	beq.n	800a4ae <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2294      	movs	r2, #148	@ 0x94
 800a4a4:	589b      	ldr	r3, [r3, r2]
 800a4a6:	687a      	ldr	r2, [r7, #4]
 800a4a8:	0010      	movs	r0, r2
 800a4aa:	4798      	blx	r3
 800a4ac:	e00b      	b.n	800a4c6 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	229c      	movs	r2, #156	@ 0x9c
 800a4b2:	589b      	ldr	r3, [r3, r2]
 800a4b4:	687a      	ldr	r2, [r7, #4]
 800a4b6:	0010      	movs	r0, r2
 800a4b8:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	22a0      	movs	r2, #160	@ 0xa0
 800a4be:	589b      	ldr	r3, [r3, r2]
 800a4c0:	687a      	ldr	r2, [r7, #4]
 800a4c2:	0010      	movs	r0, r2
 800a4c4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	4013      	ands	r3, r2
 800a4d2:	d00e      	beq.n	800a4f2 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	4013      	ands	r3, r2
 800a4da:	d00a      	beq.n	800a4f2 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	4252      	negs	r2, r2
 800a4e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2284      	movs	r2, #132	@ 0x84
 800a4ea:	589b      	ldr	r3, [r3, r2]
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	0010      	movs	r0, r2
 800a4f0:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2280      	movs	r2, #128	@ 0x80
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	d104      	bne.n	800a504 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	2380      	movs	r3, #128	@ 0x80
 800a4fe:	019b      	lsls	r3, r3, #6
 800a500:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a502:	d00d      	beq.n	800a520 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2280      	movs	r2, #128	@ 0x80
 800a508:	4013      	ands	r3, r2
 800a50a:	d009      	beq.n	800a520 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a22      	ldr	r2, [pc, #136]	@ (800a59c <HAL_TIM_IRQHandler+0x24c>)
 800a512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	22b4      	movs	r2, #180	@ 0xb4
 800a518:	589b      	ldr	r3, [r3, r2]
 800a51a:	687a      	ldr	r2, [r7, #4]
 800a51c:	0010      	movs	r0, r2
 800a51e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a520:	68ba      	ldr	r2, [r7, #8]
 800a522:	2380      	movs	r3, #128	@ 0x80
 800a524:	005b      	lsls	r3, r3, #1
 800a526:	4013      	ands	r3, r2
 800a528:	d00d      	beq.n	800a546 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2280      	movs	r2, #128	@ 0x80
 800a52e:	4013      	ands	r3, r2
 800a530:	d009      	beq.n	800a546 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4a1a      	ldr	r2, [pc, #104]	@ (800a5a0 <HAL_TIM_IRQHandler+0x250>)
 800a538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	22b8      	movs	r2, #184	@ 0xb8
 800a53e:	589b      	ldr	r3, [r3, r2]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	0010      	movs	r0, r2
 800a544:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2240      	movs	r2, #64	@ 0x40
 800a54a:	4013      	ands	r3, r2
 800a54c:	d00e      	beq.n	800a56c <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2240      	movs	r2, #64	@ 0x40
 800a552:	4013      	ands	r3, r2
 800a554:	d00a      	beq.n	800a56c <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	2241      	movs	r2, #65	@ 0x41
 800a55c:	4252      	negs	r2, r2
 800a55e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	228c      	movs	r2, #140	@ 0x8c
 800a564:	589b      	ldr	r3, [r3, r2]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	0010      	movs	r0, r2
 800a56a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	2220      	movs	r2, #32
 800a570:	4013      	ands	r3, r2
 800a572:	d00e      	beq.n	800a592 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	4013      	ands	r3, r2
 800a57a:	d00a      	beq.n	800a592 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2221      	movs	r2, #33	@ 0x21
 800a582:	4252      	negs	r2, r2
 800a584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	22ac      	movs	r2, #172	@ 0xac
 800a58a:	589b      	ldr	r3, [r3, r2]
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	0010      	movs	r0, r2
 800a590:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a592:	46c0      	nop			@ (mov r8, r8)
 800a594:	46bd      	mov	sp, r7
 800a596:	b004      	add	sp, #16
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	46c0      	nop			@ (mov r8, r8)
 800a59c:	ffffdf7f 	.word	0xffffdf7f
 800a5a0:	fffffeff 	.word	0xfffffeff

0800a5a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b086      	sub	sp, #24
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5b0:	2317      	movs	r3, #23
 800a5b2:	18fb      	adds	r3, r7, r3
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	223c      	movs	r2, #60	@ 0x3c
 800a5bc:	5c9b      	ldrb	r3, [r3, r2]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_TIM_OC_ConfigChannel+0x22>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e048      	b.n	800a658 <HAL_TIM_OC_ConfigChannel+0xb4>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	223c      	movs	r2, #60	@ 0x3c
 800a5ca:	2101      	movs	r1, #1
 800a5cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b14      	cmp	r3, #20
 800a5d2:	d835      	bhi.n	800a640 <HAL_TIM_OC_ConfigChannel+0x9c>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	009a      	lsls	r2, r3, #2
 800a5d8:	4b21      	ldr	r3, [pc, #132]	@ (800a660 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800a5da:	18d3      	adds	r3, r2, r3
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	0011      	movs	r1, r2
 800a5e8:	0018      	movs	r0, r3
 800a5ea:	f000 fcc3 	bl	800af74 <TIM_OC1_SetConfig>
      break;
 800a5ee:	e02c      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	0011      	movs	r1, r2
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f000 fd3b 	bl	800b074 <TIM_OC2_SetConfig>
      break;
 800a5fe:	e024      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	0011      	movs	r1, r2
 800a608:	0018      	movs	r0, r3
 800a60a:	f000 fdb1 	bl	800b170 <TIM_OC3_SetConfig>
      break;
 800a60e:	e01c      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	68ba      	ldr	r2, [r7, #8]
 800a616:	0011      	movs	r1, r2
 800a618:	0018      	movs	r0, r3
 800a61a:	f000 fe2b 	bl	800b274 <TIM_OC4_SetConfig>
      break;
 800a61e:	e014      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68ba      	ldr	r2, [r7, #8]
 800a626:	0011      	movs	r1, r2
 800a628:	0018      	movs	r0, r3
 800a62a:	f000 fe87 	bl	800b33c <TIM_OC5_SetConfig>
      break;
 800a62e:	e00c      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	68ba      	ldr	r2, [r7, #8]
 800a636:	0011      	movs	r1, r2
 800a638:	0018      	movs	r0, r3
 800a63a:	f000 fed9 	bl	800b3f0 <TIM_OC6_SetConfig>
      break;
 800a63e:	e004      	b.n	800a64a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a640:	2317      	movs	r3, #23
 800a642:	18fb      	adds	r3, r7, r3
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
      break;
 800a648:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	223c      	movs	r2, #60	@ 0x3c
 800a64e:	2100      	movs	r1, #0
 800a650:	5499      	strb	r1, [r3, r2]

  return status;
 800a652:	2317      	movs	r3, #23
 800a654:	18fb      	adds	r3, r7, r3
 800a656:	781b      	ldrb	r3, [r3, #0]
}
 800a658:	0018      	movs	r0, r3
 800a65a:	46bd      	mov	sp, r7
 800a65c:	b006      	add	sp, #24
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	0800dd34 	.word	0x0800dd34

0800a664 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a670:	2317      	movs	r3, #23
 800a672:	18fb      	adds	r3, r7, r3
 800a674:	2200      	movs	r2, #0
 800a676:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	223c      	movs	r2, #60	@ 0x3c
 800a67c:	5c9b      	ldrb	r3, [r3, r2]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <HAL_TIM_IC_ConfigChannel+0x22>
 800a682:	2302      	movs	r3, #2
 800a684:	e08c      	b.n	800a7a0 <HAL_TIM_IC_ConfigChannel+0x13c>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	223c      	movs	r2, #60	@ 0x3c
 800a68a:	2101      	movs	r1, #1
 800a68c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11b      	bne.n	800a6cc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800a6a4:	f000 ff02 	bl	800b4ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	210c      	movs	r1, #12
 800a6b4:	438a      	bics	r2, r1
 800a6b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	6999      	ldr	r1, [r3, #24]
 800a6be:	68bb      	ldr	r3, [r7, #8]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	619a      	str	r2, [r3, #24]
 800a6ca:	e062      	b.n	800a792 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b04      	cmp	r3, #4
 800a6d0:	d11c      	bne.n	800a70c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800a6e2:	f000 ff67 	bl	800b5b4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	699a      	ldr	r2, [r3, #24]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	492d      	ldr	r1, [pc, #180]	@ (800a7a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a6f2:	400a      	ands	r2, r1
 800a6f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6999      	ldr	r1, [r3, #24]
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	689b      	ldr	r3, [r3, #8]
 800a700:	021a      	lsls	r2, r3, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	430a      	orrs	r2, r1
 800a708:	619a      	str	r2, [r3, #24]
 800a70a:	e042      	b.n	800a792 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b08      	cmp	r3, #8
 800a710:	d11b      	bne.n	800a74a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800a722:	f000 ffbb 	bl	800b69c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	69da      	ldr	r2, [r3, #28]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	210c      	movs	r1, #12
 800a732:	438a      	bics	r2, r1
 800a734:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69d9      	ldr	r1, [r3, #28]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	689a      	ldr	r2, [r3, #8]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	430a      	orrs	r2, r1
 800a746:	61da      	str	r2, [r3, #28]
 800a748:	e023      	b.n	800a792 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2b0c      	cmp	r3, #12
 800a74e:	d11c      	bne.n	800a78a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800a760:	f000 ffdc 	bl	800b71c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	69da      	ldr	r2, [r3, #28]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	490e      	ldr	r1, [pc, #56]	@ (800a7a8 <HAL_TIM_IC_ConfigChannel+0x144>)
 800a770:	400a      	ands	r2, r1
 800a772:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	69d9      	ldr	r1, [r3, #28]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	021a      	lsls	r2, r3, #8
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	61da      	str	r2, [r3, #28]
 800a788:	e003      	b.n	800a792 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a78a:	2317      	movs	r3, #23
 800a78c:	18fb      	adds	r3, r7, r3
 800a78e:	2201      	movs	r2, #1
 800a790:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	223c      	movs	r2, #60	@ 0x3c
 800a796:	2100      	movs	r1, #0
 800a798:	5499      	strb	r1, [r3, r2]

  return status;
 800a79a:	2317      	movs	r3, #23
 800a79c:	18fb      	adds	r3, r7, r3
 800a79e:	781b      	ldrb	r3, [r3, #0]
}
 800a7a0:	0018      	movs	r0, r3
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	b006      	add	sp, #24
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	fffff3ff 	.word	0xfffff3ff

0800a7ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7b8:	2317      	movs	r3, #23
 800a7ba:	18fb      	adds	r3, r7, r3
 800a7bc:	2200      	movs	r2, #0
 800a7be:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	223c      	movs	r2, #60	@ 0x3c
 800a7c4:	5c9b      	ldrb	r3, [r3, r2]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d101      	bne.n	800a7ce <HAL_TIM_PWM_ConfigChannel+0x22>
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	e0e5      	b.n	800a99a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	223c      	movs	r2, #60	@ 0x3c
 800a7d2:	2101      	movs	r1, #1
 800a7d4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	2b14      	cmp	r3, #20
 800a7da:	d900      	bls.n	800a7de <HAL_TIM_PWM_ConfigChannel+0x32>
 800a7dc:	e0d1      	b.n	800a982 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	009a      	lsls	r2, r3, #2
 800a7e2:	4b70      	ldr	r3, [pc, #448]	@ (800a9a4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a7e4:	18d3      	adds	r3, r2, r3
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	0011      	movs	r1, r2
 800a7f2:	0018      	movs	r0, r3
 800a7f4:	f000 fbbe 	bl	800af74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2108      	movs	r1, #8
 800a804:	430a      	orrs	r2, r1
 800a806:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	699a      	ldr	r2, [r3, #24]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2104      	movs	r1, #4
 800a814:	438a      	bics	r2, r1
 800a816:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	6999      	ldr	r1, [r3, #24]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	430a      	orrs	r2, r1
 800a828:	619a      	str	r2, [r3, #24]
      break;
 800a82a:	e0af      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	0011      	movs	r1, r2
 800a834:	0018      	movs	r0, r3
 800a836:	f000 fc1d 	bl	800b074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	699a      	ldr	r2, [r3, #24]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2180      	movs	r1, #128	@ 0x80
 800a846:	0109      	lsls	r1, r1, #4
 800a848:	430a      	orrs	r2, r1
 800a84a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	699a      	ldr	r2, [r3, #24]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	4954      	ldr	r1, [pc, #336]	@ (800a9a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a858:	400a      	ands	r2, r1
 800a85a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	6999      	ldr	r1, [r3, #24]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	021a      	lsls	r2, r3, #8
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	430a      	orrs	r2, r1
 800a86e:	619a      	str	r2, [r3, #24]
      break;
 800a870:	e08c      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	0011      	movs	r1, r2
 800a87a:	0018      	movs	r0, r3
 800a87c:	f000 fc78 	bl	800b170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	69da      	ldr	r2, [r3, #28]
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2108      	movs	r1, #8
 800a88c:	430a      	orrs	r2, r1
 800a88e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	69da      	ldr	r2, [r3, #28]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2104      	movs	r1, #4
 800a89c:	438a      	bics	r2, r1
 800a89e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	69d9      	ldr	r1, [r3, #28]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	691a      	ldr	r2, [r3, #16]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	61da      	str	r2, [r3, #28]
      break;
 800a8b2:	e06b      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68ba      	ldr	r2, [r7, #8]
 800a8ba:	0011      	movs	r1, r2
 800a8bc:	0018      	movs	r0, r3
 800a8be:	f000 fcd9 	bl	800b274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	69da      	ldr	r2, [r3, #28]
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2180      	movs	r1, #128	@ 0x80
 800a8ce:	0109      	lsls	r1, r1, #4
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	69da      	ldr	r2, [r3, #28]
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4932      	ldr	r1, [pc, #200]	@ (800a9a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a8e0:	400a      	ands	r2, r1
 800a8e2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	69d9      	ldr	r1, [r3, #28]
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	021a      	lsls	r2, r3, #8
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	61da      	str	r2, [r3, #28]
      break;
 800a8f8:	e048      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	0011      	movs	r1, r2
 800a902:	0018      	movs	r0, r3
 800a904:	f000 fd1a 	bl	800b33c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2108      	movs	r1, #8
 800a914:	430a      	orrs	r2, r1
 800a916:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2104      	movs	r1, #4
 800a924:	438a      	bics	r2, r1
 800a926:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a93a:	e027      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68ba      	ldr	r2, [r7, #8]
 800a942:	0011      	movs	r1, r2
 800a944:	0018      	movs	r0, r3
 800a946:	f000 fd53 	bl	800b3f0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2180      	movs	r1, #128	@ 0x80
 800a956:	0109      	lsls	r1, r1, #4
 800a958:	430a      	orrs	r2, r1
 800a95a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4910      	ldr	r1, [pc, #64]	@ (800a9a8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a968:	400a      	ands	r2, r1
 800a96a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	021a      	lsls	r2, r3, #8
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a980:	e004      	b.n	800a98c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a982:	2317      	movs	r3, #23
 800a984:	18fb      	adds	r3, r7, r3
 800a986:	2201      	movs	r2, #1
 800a988:	701a      	strb	r2, [r3, #0]
      break;
 800a98a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	223c      	movs	r2, #60	@ 0x3c
 800a990:	2100      	movs	r1, #0
 800a992:	5499      	strb	r1, [r3, r2]

  return status;
 800a994:	2317      	movs	r3, #23
 800a996:	18fb      	adds	r3, r7, r3
 800a998:	781b      	ldrb	r3, [r3, #0]
}
 800a99a:	0018      	movs	r0, r3
 800a99c:	46bd      	mov	sp, r7
 800a99e:	b006      	add	sp, #24
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	46c0      	nop			@ (mov r8, r8)
 800a9a4:	0800dd88 	.word	0x0800dd88
 800a9a8:	fffffbff 	.word	0xfffffbff

0800a9ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9b6:	230f      	movs	r3, #15
 800a9b8:	18fb      	adds	r3, r7, r3
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	223c      	movs	r2, #60	@ 0x3c
 800a9c2:	5c9b      	ldrb	r3, [r3, r2]
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d101      	bne.n	800a9cc <HAL_TIM_ConfigClockSource+0x20>
 800a9c8:	2302      	movs	r3, #2
 800a9ca:	e0bc      	b.n	800ab46 <HAL_TIM_ConfigClockSource+0x19a>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	223c      	movs	r2, #60	@ 0x3c
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	223d      	movs	r2, #61	@ 0x3d
 800a9d8:	2102      	movs	r1, #2
 800a9da:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	4a5a      	ldr	r2, [pc, #360]	@ (800ab50 <HAL_TIM_ConfigClockSource+0x1a4>)
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	4a59      	ldr	r2, [pc, #356]	@ (800ab54 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2280      	movs	r2, #128	@ 0x80
 800aa02:	0192      	lsls	r2, r2, #6
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d040      	beq.n	800aa8a <HAL_TIM_ConfigClockSource+0xde>
 800aa08:	2280      	movs	r2, #128	@ 0x80
 800aa0a:	0192      	lsls	r2, r2, #6
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d900      	bls.n	800aa12 <HAL_TIM_ConfigClockSource+0x66>
 800aa10:	e088      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa12:	2280      	movs	r2, #128	@ 0x80
 800aa14:	0152      	lsls	r2, r2, #5
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d100      	bne.n	800aa1c <HAL_TIM_ConfigClockSource+0x70>
 800aa1a:	e088      	b.n	800ab2e <HAL_TIM_ConfigClockSource+0x182>
 800aa1c:	2280      	movs	r2, #128	@ 0x80
 800aa1e:	0152      	lsls	r2, r2, #5
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d900      	bls.n	800aa26 <HAL_TIM_ConfigClockSource+0x7a>
 800aa24:	e07e      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa26:	2b70      	cmp	r3, #112	@ 0x70
 800aa28:	d018      	beq.n	800aa5c <HAL_TIM_ConfigClockSource+0xb0>
 800aa2a:	d900      	bls.n	800aa2e <HAL_TIM_ConfigClockSource+0x82>
 800aa2c:	e07a      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa2e:	2b60      	cmp	r3, #96	@ 0x60
 800aa30:	d04f      	beq.n	800aad2 <HAL_TIM_ConfigClockSource+0x126>
 800aa32:	d900      	bls.n	800aa36 <HAL_TIM_ConfigClockSource+0x8a>
 800aa34:	e076      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa36:	2b50      	cmp	r3, #80	@ 0x50
 800aa38:	d03b      	beq.n	800aab2 <HAL_TIM_ConfigClockSource+0x106>
 800aa3a:	d900      	bls.n	800aa3e <HAL_TIM_ConfigClockSource+0x92>
 800aa3c:	e072      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa3e:	2b40      	cmp	r3, #64	@ 0x40
 800aa40:	d057      	beq.n	800aaf2 <HAL_TIM_ConfigClockSource+0x146>
 800aa42:	d900      	bls.n	800aa46 <HAL_TIM_ConfigClockSource+0x9a>
 800aa44:	e06e      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa46:	2b30      	cmp	r3, #48	@ 0x30
 800aa48:	d063      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0x166>
 800aa4a:	d86b      	bhi.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa4c:	2b20      	cmp	r3, #32
 800aa4e:	d060      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0x166>
 800aa50:	d868      	bhi.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d05d      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0x166>
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d05b      	beq.n	800ab12 <HAL_TIM_ConfigClockSource+0x166>
 800aa5a:	e063      	b.n	800ab24 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa6c:	f000 feb8 	bl	800b7e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2277      	movs	r2, #119	@ 0x77
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	609a      	str	r2, [r3, #8]
      break;
 800aa88:	e052      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aa9a:	f000 fea1 	bl	800b7e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	689a      	ldr	r2, [r3, #8]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2180      	movs	r1, #128	@ 0x80
 800aaaa:	01c9      	lsls	r1, r1, #7
 800aaac:	430a      	orrs	r2, r1
 800aaae:	609a      	str	r2, [r3, #8]
      break;
 800aab0:	e03e      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aabe:	001a      	movs	r2, r3
 800aac0:	f000 fd4a 	bl	800b558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	2150      	movs	r1, #80	@ 0x50
 800aaca:	0018      	movs	r0, r3
 800aacc:	f000 fe6c 	bl	800b7a8 <TIM_ITRx_SetConfig>
      break;
 800aad0:	e02e      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aade:	001a      	movs	r2, r3
 800aae0:	f000 fdaa 	bl	800b638 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2160      	movs	r1, #96	@ 0x60
 800aaea:	0018      	movs	r0, r3
 800aaec:	f000 fe5c 	bl	800b7a8 <TIM_ITRx_SetConfig>
      break;
 800aaf0:	e01e      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aafe:	001a      	movs	r2, r3
 800ab00:	f000 fd2a 	bl	800b558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	2140      	movs	r1, #64	@ 0x40
 800ab0a:	0018      	movs	r0, r3
 800ab0c:	f000 fe4c 	bl	800b7a8 <TIM_ITRx_SetConfig>
      break;
 800ab10:	e00e      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	0019      	movs	r1, r3
 800ab1c:	0010      	movs	r0, r2
 800ab1e:	f000 fe43 	bl	800b7a8 <TIM_ITRx_SetConfig>
      break;
 800ab22:	e005      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800ab24:	230f      	movs	r3, #15
 800ab26:	18fb      	adds	r3, r7, r3
 800ab28:	2201      	movs	r2, #1
 800ab2a:	701a      	strb	r2, [r3, #0]
      break;
 800ab2c:	e000      	b.n	800ab30 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800ab2e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	223d      	movs	r2, #61	@ 0x3d
 800ab34:	2101      	movs	r1, #1
 800ab36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	223c      	movs	r2, #60	@ 0x3c
 800ab3c:	2100      	movs	r1, #0
 800ab3e:	5499      	strb	r1, [r3, r2]

  return status;
 800ab40:	230f      	movs	r3, #15
 800ab42:	18fb      	adds	r3, r7, r3
 800ab44:	781b      	ldrb	r3, [r3, #0]
}
 800ab46:	0018      	movs	r0, r3
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	b004      	add	sp, #16
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	46c0      	nop			@ (mov r8, r8)
 800ab50:	ffceff88 	.word	0xffceff88
 800ab54:	ffff00ff 	.word	0xffff00ff

0800ab58 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b0c      	cmp	r3, #12
 800ab6a:	d01e      	beq.n	800abaa <HAL_TIM_ReadCapturedValue+0x52>
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b0c      	cmp	r3, #12
 800ab70:	d820      	bhi.n	800abb4 <HAL_TIM_ReadCapturedValue+0x5c>
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d013      	beq.n	800aba0 <HAL_TIM_ReadCapturedValue+0x48>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b08      	cmp	r3, #8
 800ab7c:	d81a      	bhi.n	800abb4 <HAL_TIM_ReadCapturedValue+0x5c>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <HAL_TIM_ReadCapturedValue+0x34>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2b04      	cmp	r3, #4
 800ab88:	d005      	beq.n	800ab96 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800ab8a:	e013      	b.n	800abb4 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab92:	60fb      	str	r3, [r7, #12]
      break;
 800ab94:	e00f      	b.n	800abb6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	60fb      	str	r3, [r7, #12]
      break;
 800ab9e:	e00a      	b.n	800abb6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aba6:	60fb      	str	r3, [r7, #12]
      break;
 800aba8:	e005      	b.n	800abb6 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb0:	60fb      	str	r3, [r7, #12]
      break;
 800abb2:	e000      	b.n	800abb6 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800abb4:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800abb6:	68fb      	ldr	r3, [r7, #12]
}
 800abb8:	0018      	movs	r0, r3
 800abba:	46bd      	mov	sp, r7
 800abbc:	b004      	add	sp, #16
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800abc8:	46c0      	nop			@ (mov r8, r8)
 800abca:	46bd      	mov	sp, r7
 800abcc:	b002      	add	sp, #8
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800abd8:	46c0      	nop			@ (mov r8, r8)
 800abda:	46bd      	mov	sp, r7
 800abdc:	b002      	add	sp, #8
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abe8:	46c0      	nop			@ (mov r8, r8)
 800abea:	46bd      	mov	sp, r7
 800abec:	b002      	add	sp, #8
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abf8:	46c0      	nop			@ (mov r8, r8)
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b002      	add	sp, #8
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800ac08:	46c0      	nop			@ (mov r8, r8)
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	b002      	add	sp, #8
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ac18:	46c0      	nop			@ (mov r8, r8)
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	b002      	add	sp, #8
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ac28:	46c0      	nop			@ (mov r8, r8)
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	b002      	add	sp, #8
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b082      	sub	sp, #8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac38:	46c0      	nop			@ (mov r8, r8)
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	b002      	add	sp, #8
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ac48:	46c0      	nop			@ (mov r8, r8)
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	b002      	add	sp, #8
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ac58:	46c0      	nop			@ (mov r8, r8)
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	b002      	add	sp, #8
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	607a      	str	r2, [r7, #4]
 800ac6a:	230b      	movs	r3, #11
 800ac6c:	18fb      	adds	r3, r7, r3
 800ac6e:	1c0a      	adds	r2, r1, #0
 800ac70:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac72:	2317      	movs	r3, #23
 800ac74:	18fb      	adds	r3, r7, r3
 800ac76:	2200      	movs	r2, #0
 800ac78:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e0ea      	b.n	800ae5a <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	223d      	movs	r2, #61	@ 0x3d
 800ac88:	5c9b      	ldrb	r3, [r3, r2]
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d000      	beq.n	800ac92 <HAL_TIM_RegisterCallback+0x32>
 800ac90:	e08e      	b.n	800adb0 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800ac92:	230b      	movs	r3, #11
 800ac94:	18fb      	adds	r3, r7, r3
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b1b      	cmp	r3, #27
 800ac9a:	d900      	bls.n	800ac9e <HAL_TIM_RegisterCallback+0x3e>
 800ac9c:	e083      	b.n	800ada6 <HAL_TIM_RegisterCallback+0x146>
 800ac9e:	009a      	lsls	r2, r3, #2
 800aca0:	4b70      	ldr	r3, [pc, #448]	@ (800ae64 <HAL_TIM_RegisterCallback+0x204>)
 800aca2:	18d3      	adds	r3, r2, r3
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800acae:	e0d1      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800acb6:	e0cd      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800acbe:	e0c9      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800acc6:	e0c5      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800acce:	e0c1      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800acd6:	e0bd      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800acde:	e0b9      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ace6:	e0b5      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800acee:	e0b1      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800acf6:	e0ad      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800acfe:	e0a9      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ad06:	e0a5      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ad0e:	e0a1      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2180      	movs	r1, #128	@ 0x80
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	505a      	str	r2, [r3, r1]
        break;
 800ad18:	e09c      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2184      	movs	r1, #132	@ 0x84
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	505a      	str	r2, [r3, r1]
        break;
 800ad22:	e097      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2188      	movs	r1, #136	@ 0x88
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	505a      	str	r2, [r3, r1]
        break;
 800ad2c:	e092      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	218c      	movs	r1, #140	@ 0x8c
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	505a      	str	r2, [r3, r1]
        break;
 800ad36:	e08d      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2190      	movs	r1, #144	@ 0x90
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	505a      	str	r2, [r3, r1]
        break;
 800ad40:	e088      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2194      	movs	r1, #148	@ 0x94
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	505a      	str	r2, [r3, r1]
        break;
 800ad4a:	e083      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2198      	movs	r1, #152	@ 0x98
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	505a      	str	r2, [r3, r1]
        break;
 800ad54:	e07e      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	219c      	movs	r1, #156	@ 0x9c
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	505a      	str	r2, [r3, r1]
        break;
 800ad5e:	e079      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	21a0      	movs	r1, #160	@ 0xa0
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	505a      	str	r2, [r3, r1]
        break;
 800ad68:	e074      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	21a4      	movs	r1, #164	@ 0xa4
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	505a      	str	r2, [r3, r1]
        break;
 800ad72:	e06f      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	21a8      	movs	r1, #168	@ 0xa8
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	505a      	str	r2, [r3, r1]
        break;
 800ad7c:	e06a      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	21ac      	movs	r1, #172	@ 0xac
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	505a      	str	r2, [r3, r1]
        break;
 800ad86:	e065      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	21b0      	movs	r1, #176	@ 0xb0
 800ad8c:	687a      	ldr	r2, [r7, #4]
 800ad8e:	505a      	str	r2, [r3, r1]
        break;
 800ad90:	e060      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	21b4      	movs	r1, #180	@ 0xb4
 800ad96:	687a      	ldr	r2, [r7, #4]
 800ad98:	505a      	str	r2, [r3, r1]
        break;
 800ad9a:	e05b      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	21b8      	movs	r1, #184	@ 0xb8
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	505a      	str	r2, [r3, r1]
        break;
 800ada4:	e056      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ada6:	2317      	movs	r3, #23
 800ada8:	18fb      	adds	r3, r7, r3
 800adaa:	2201      	movs	r2, #1
 800adac:	701a      	strb	r2, [r3, #0]
        break;
 800adae:	e051      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	223d      	movs	r2, #61	@ 0x3d
 800adb4:	5c9b      	ldrb	r3, [r3, r2]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d147      	bne.n	800ae4c <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800adbc:	230b      	movs	r3, #11
 800adbe:	18fb      	adds	r3, r7, r3
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	2b0d      	cmp	r3, #13
 800adc4:	d83d      	bhi.n	800ae42 <HAL_TIM_RegisterCallback+0x1e2>
 800adc6:	009a      	lsls	r2, r3, #2
 800adc8:	4b27      	ldr	r3, [pc, #156]	@ (800ae68 <HAL_TIM_RegisterCallback+0x208>)
 800adca:	18d3      	adds	r3, r2, r3
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800add6:	e03d      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800adde:	e039      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ade6:	e035      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800adee:	e031      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800adf6:	e02d      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800adfe:	e029      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ae06:	e025      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ae0e:	e021      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ae16:	e01d      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ae1e:	e019      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ae26:	e015      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ae2e:	e011      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ae36:	e00d      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2180      	movs	r1, #128	@ 0x80
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	505a      	str	r2, [r3, r1]
        break;
 800ae40:	e008      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ae42:	2317      	movs	r3, #23
 800ae44:	18fb      	adds	r3, r7, r3
 800ae46:	2201      	movs	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
        break;
 800ae4a:	e003      	b.n	800ae54 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ae4c:	2317      	movs	r3, #23
 800ae4e:	18fb      	adds	r3, r7, r3
 800ae50:	2201      	movs	r2, #1
 800ae52:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ae54:	2317      	movs	r3, #23
 800ae56:	18fb      	adds	r3, r7, r3
 800ae58:	781b      	ldrb	r3, [r3, #0]
}
 800ae5a:	0018      	movs	r0, r3
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	b006      	add	sp, #24
 800ae60:	bd80      	pop	{r7, pc}
 800ae62:	46c0      	nop			@ (mov r8, r8)
 800ae64:	0800dddc 	.word	0x0800dddc
 800ae68:	0800de4c 	.word	0x0800de4c

0800ae6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a37      	ldr	r2, [pc, #220]	@ (800af5c <TIM_Base_SetConfig+0xf0>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d008      	beq.n	800ae96 <TIM_Base_SetConfig+0x2a>
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	2380      	movs	r3, #128	@ 0x80
 800ae88:	05db      	lsls	r3, r3, #23
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d003      	beq.n	800ae96 <TIM_Base_SetConfig+0x2a>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a33      	ldr	r2, [pc, #204]	@ (800af60 <TIM_Base_SetConfig+0xf4>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d108      	bne.n	800aea8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2270      	movs	r2, #112	@ 0x70
 800ae9a:	4393      	bics	r3, r2
 800ae9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	68fa      	ldr	r2, [r7, #12]
 800aea4:	4313      	orrs	r3, r2
 800aea6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4a2c      	ldr	r2, [pc, #176]	@ (800af5c <TIM_Base_SetConfig+0xf0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d014      	beq.n	800aeda <TIM_Base_SetConfig+0x6e>
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	2380      	movs	r3, #128	@ 0x80
 800aeb4:	05db      	lsls	r3, r3, #23
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d00f      	beq.n	800aeda <TIM_Base_SetConfig+0x6e>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	4a28      	ldr	r2, [pc, #160]	@ (800af60 <TIM_Base_SetConfig+0xf4>)
 800aebe:	4293      	cmp	r3, r2
 800aec0:	d00b      	beq.n	800aeda <TIM_Base_SetConfig+0x6e>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	4a27      	ldr	r2, [pc, #156]	@ (800af64 <TIM_Base_SetConfig+0xf8>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d007      	beq.n	800aeda <TIM_Base_SetConfig+0x6e>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	4a26      	ldr	r2, [pc, #152]	@ (800af68 <TIM_Base_SetConfig+0xfc>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d003      	beq.n	800aeda <TIM_Base_SetConfig+0x6e>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	4a25      	ldr	r2, [pc, #148]	@ (800af6c <TIM_Base_SetConfig+0x100>)
 800aed6:	4293      	cmp	r3, r2
 800aed8:	d108      	bne.n	800aeec <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	4a24      	ldr	r2, [pc, #144]	@ (800af70 <TIM_Base_SetConfig+0x104>)
 800aede:	4013      	ands	r3, r2
 800aee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	68fa      	ldr	r2, [r7, #12]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2280      	movs	r2, #128	@ 0x80
 800aef0:	4393      	bics	r3, r2
 800aef2:	001a      	movs	r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	68fa      	ldr	r2, [r7, #12]
 800af00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	681a      	ldr	r2, [r3, #0]
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a11      	ldr	r2, [pc, #68]	@ (800af5c <TIM_Base_SetConfig+0xf0>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d007      	beq.n	800af2a <TIM_Base_SetConfig+0xbe>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a12      	ldr	r2, [pc, #72]	@ (800af68 <TIM_Base_SetConfig+0xfc>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d003      	beq.n	800af2a <TIM_Base_SetConfig+0xbe>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a11      	ldr	r2, [pc, #68]	@ (800af6c <TIM_Base_SetConfig+0x100>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d103      	bne.n	800af32 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	691a      	ldr	r2, [r3, #16]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2201      	movs	r2, #1
 800af36:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	2201      	movs	r2, #1
 800af3e:	4013      	ands	r3, r2
 800af40:	2b01      	cmp	r3, #1
 800af42:	d106      	bne.n	800af52 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	2201      	movs	r2, #1
 800af4a:	4393      	bics	r3, r2
 800af4c:	001a      	movs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	611a      	str	r2, [r3, #16]
  }
}
 800af52:	46c0      	nop			@ (mov r8, r8)
 800af54:	46bd      	mov	sp, r7
 800af56:	b004      	add	sp, #16
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	46c0      	nop			@ (mov r8, r8)
 800af5c:	40012c00 	.word	0x40012c00
 800af60:	40000400 	.word	0x40000400
 800af64:	40002000 	.word	0x40002000
 800af68:	40014400 	.word	0x40014400
 800af6c:	40014800 	.word	0x40014800
 800af70:	fffffcff 	.word	0xfffffcff

0800af74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b086      	sub	sp, #24
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	2201      	movs	r2, #1
 800af8a:	4393      	bics	r3, r2
 800af8c:	001a      	movs	r2, r3
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4a2e      	ldr	r2, [pc, #184]	@ (800b05c <TIM_OC1_SetConfig+0xe8>)
 800afa2:	4013      	ands	r3, r2
 800afa4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2203      	movs	r2, #3
 800afaa:	4393      	bics	r3, r2
 800afac:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68fa      	ldr	r2, [r7, #12]
 800afb4:	4313      	orrs	r3, r2
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	2202      	movs	r2, #2
 800afbc:	4393      	bics	r3, r2
 800afbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a24      	ldr	r2, [pc, #144]	@ (800b060 <TIM_OC1_SetConfig+0xec>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d007      	beq.n	800afe2 <TIM_OC1_SetConfig+0x6e>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a23      	ldr	r2, [pc, #140]	@ (800b064 <TIM_OC1_SetConfig+0xf0>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d003      	beq.n	800afe2 <TIM_OC1_SetConfig+0x6e>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a22      	ldr	r2, [pc, #136]	@ (800b068 <TIM_OC1_SetConfig+0xf4>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d10c      	bne.n	800affc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2208      	movs	r2, #8
 800afe6:	4393      	bics	r3, r2
 800afe8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	2204      	movs	r2, #4
 800aff8:	4393      	bics	r3, r2
 800affa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a18      	ldr	r2, [pc, #96]	@ (800b060 <TIM_OC1_SetConfig+0xec>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d007      	beq.n	800b014 <TIM_OC1_SetConfig+0xa0>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a17      	ldr	r2, [pc, #92]	@ (800b064 <TIM_OC1_SetConfig+0xf0>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d003      	beq.n	800b014 <TIM_OC1_SetConfig+0xa0>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	4a16      	ldr	r2, [pc, #88]	@ (800b068 <TIM_OC1_SetConfig+0xf4>)
 800b010:	4293      	cmp	r3, r2
 800b012:	d111      	bne.n	800b038 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	4a15      	ldr	r2, [pc, #84]	@ (800b06c <TIM_OC1_SetConfig+0xf8>)
 800b018:	4013      	ands	r3, r2
 800b01a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	4a14      	ldr	r2, [pc, #80]	@ (800b070 <TIM_OC1_SetConfig+0xfc>)
 800b020:	4013      	ands	r3, r2
 800b022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	693a      	ldr	r2, [r7, #16]
 800b02a:	4313      	orrs	r3, r2
 800b02c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	693a      	ldr	r2, [r7, #16]
 800b03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68fa      	ldr	r2, [r7, #12]
 800b042:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685a      	ldr	r2, [r3, #4]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	697a      	ldr	r2, [r7, #20]
 800b050:	621a      	str	r2, [r3, #32]
}
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	46bd      	mov	sp, r7
 800b056:	b006      	add	sp, #24
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	46c0      	nop			@ (mov r8, r8)
 800b05c:	fffeff8f 	.word	0xfffeff8f
 800b060:	40012c00 	.word	0x40012c00
 800b064:	40014400 	.word	0x40014400
 800b068:	40014800 	.word	0x40014800
 800b06c:	fffffeff 	.word	0xfffffeff
 800b070:	fffffdff 	.word	0xfffffdff

0800b074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6a1b      	ldr	r3, [r3, #32]
 800b082:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	2210      	movs	r2, #16
 800b08a:	4393      	bics	r3, r2
 800b08c:	001a      	movs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	685b      	ldr	r3, [r3, #4]
 800b096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	699b      	ldr	r3, [r3, #24]
 800b09c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	4a2c      	ldr	r2, [pc, #176]	@ (800b154 <TIM_OC2_SetConfig+0xe0>)
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b158 <TIM_OC2_SetConfig+0xe4>)
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	021b      	lsls	r3, r3, #8
 800b0b4:	68fa      	ldr	r2, [r7, #12]
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	4393      	bics	r3, r2
 800b0c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	011b      	lsls	r3, r3, #4
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a22      	ldr	r2, [pc, #136]	@ (800b15c <TIM_OC2_SetConfig+0xe8>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d10d      	bne.n	800b0f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	2280      	movs	r2, #128	@ 0x80
 800b0da:	4393      	bics	r3, r2
 800b0dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	2240      	movs	r2, #64	@ 0x40
 800b0ee:	4393      	bics	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a19      	ldr	r2, [pc, #100]	@ (800b15c <TIM_OC2_SetConfig+0xe8>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <TIM_OC2_SetConfig+0x96>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a18      	ldr	r2, [pc, #96]	@ (800b160 <TIM_OC2_SetConfig+0xec>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d003      	beq.n	800b10a <TIM_OC2_SetConfig+0x96>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a17      	ldr	r2, [pc, #92]	@ (800b164 <TIM_OC2_SetConfig+0xf0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d113      	bne.n	800b132 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	4a16      	ldr	r2, [pc, #88]	@ (800b168 <TIM_OC2_SetConfig+0xf4>)
 800b10e:	4013      	ands	r3, r2
 800b110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b112:	693b      	ldr	r3, [r7, #16]
 800b114:	4a15      	ldr	r2, [pc, #84]	@ (800b16c <TIM_OC2_SetConfig+0xf8>)
 800b116:	4013      	ands	r3, r2
 800b118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	4313      	orrs	r3, r2
 800b124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	693a      	ldr	r2, [r7, #16]
 800b12e:	4313      	orrs	r3, r2
 800b130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	685a      	ldr	r2, [r3, #4]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	46c0      	nop			@ (mov r8, r8)
 800b14e:	46bd      	mov	sp, r7
 800b150:	b006      	add	sp, #24
 800b152:	bd80      	pop	{r7, pc}
 800b154:	feff8fff 	.word	0xfeff8fff
 800b158:	fffffcff 	.word	0xfffffcff
 800b15c:	40012c00 	.word	0x40012c00
 800b160:	40014400 	.word	0x40014400
 800b164:	40014800 	.word	0x40014800
 800b168:	fffffbff 	.word	0xfffffbff
 800b16c:	fffff7ff 	.word	0xfffff7ff

0800b170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b086      	sub	sp, #24
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6a1b      	ldr	r3, [r3, #32]
 800b17e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	4a31      	ldr	r2, [pc, #196]	@ (800b24c <TIM_OC3_SetConfig+0xdc>)
 800b186:	401a      	ands	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4a2d      	ldr	r2, [pc, #180]	@ (800b250 <TIM_OC3_SetConfig+0xe0>)
 800b19c:	4013      	ands	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2203      	movs	r2, #3
 800b1a4:	4393      	bics	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	4a27      	ldr	r2, [pc, #156]	@ (800b254 <TIM_OC3_SetConfig+0xe4>)
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	689b      	ldr	r3, [r3, #8]
 800b1be:	021b      	lsls	r3, r3, #8
 800b1c0:	697a      	ldr	r2, [r7, #20]
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a23      	ldr	r2, [pc, #140]	@ (800b258 <TIM_OC3_SetConfig+0xe8>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d10d      	bne.n	800b1ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	4a22      	ldr	r2, [pc, #136]	@ (800b25c <TIM_OC3_SetConfig+0xec>)
 800b1d2:	4013      	ands	r3, r2
 800b1d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	021b      	lsls	r3, r3, #8
 800b1dc:	697a      	ldr	r2, [r7, #20]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	4a1e      	ldr	r2, [pc, #120]	@ (800b260 <TIM_OC3_SetConfig+0xf0>)
 800b1e6:	4013      	ands	r3, r2
 800b1e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a1a      	ldr	r2, [pc, #104]	@ (800b258 <TIM_OC3_SetConfig+0xe8>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d007      	beq.n	800b202 <TIM_OC3_SetConfig+0x92>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a1b      	ldr	r2, [pc, #108]	@ (800b264 <TIM_OC3_SetConfig+0xf4>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d003      	beq.n	800b202 <TIM_OC3_SetConfig+0x92>
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	4a1a      	ldr	r2, [pc, #104]	@ (800b268 <TIM_OC3_SetConfig+0xf8>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d113      	bne.n	800b22a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	4a19      	ldr	r2, [pc, #100]	@ (800b26c <TIM_OC3_SetConfig+0xfc>)
 800b206:	4013      	ands	r3, r2
 800b208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	4a18      	ldr	r2, [pc, #96]	@ (800b270 <TIM_OC3_SetConfig+0x100>)
 800b20e:	4013      	ands	r3, r2
 800b210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	693a      	ldr	r2, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	011b      	lsls	r3, r3, #4
 800b224:	693a      	ldr	r2, [r7, #16]
 800b226:	4313      	orrs	r3, r2
 800b228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68fa      	ldr	r2, [r7, #12]
 800b234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	697a      	ldr	r2, [r7, #20]
 800b242:	621a      	str	r2, [r3, #32]
}
 800b244:	46c0      	nop			@ (mov r8, r8)
 800b246:	46bd      	mov	sp, r7
 800b248:	b006      	add	sp, #24
 800b24a:	bd80      	pop	{r7, pc}
 800b24c:	fffffeff 	.word	0xfffffeff
 800b250:	fffeff8f 	.word	0xfffeff8f
 800b254:	fffffdff 	.word	0xfffffdff
 800b258:	40012c00 	.word	0x40012c00
 800b25c:	fffff7ff 	.word	0xfffff7ff
 800b260:	fffffbff 	.word	0xfffffbff
 800b264:	40014400 	.word	0x40014400
 800b268:	40014800 	.word	0x40014800
 800b26c:	ffffefff 	.word	0xffffefff
 800b270:	ffffdfff 	.word	0xffffdfff

0800b274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6a1b      	ldr	r3, [r3, #32]
 800b282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	4a24      	ldr	r2, [pc, #144]	@ (800b31c <TIM_OC4_SetConfig+0xa8>)
 800b28a:	401a      	ands	r2, r3
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4a20      	ldr	r2, [pc, #128]	@ (800b320 <TIM_OC4_SetConfig+0xac>)
 800b2a0:	4013      	ands	r3, r2
 800b2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4a1f      	ldr	r2, [pc, #124]	@ (800b324 <TIM_OC4_SetConfig+0xb0>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	021b      	lsls	r3, r3, #8
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b328 <TIM_OC4_SetConfig+0xb4>)
 800b2bc:	4013      	ands	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	689b      	ldr	r3, [r3, #8]
 800b2c4:	031b      	lsls	r3, r3, #12
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a17      	ldr	r2, [pc, #92]	@ (800b32c <TIM_OC4_SetConfig+0xb8>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d007      	beq.n	800b2e4 <TIM_OC4_SetConfig+0x70>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	4a16      	ldr	r2, [pc, #88]	@ (800b330 <TIM_OC4_SetConfig+0xbc>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d003      	beq.n	800b2e4 <TIM_OC4_SetConfig+0x70>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	4a15      	ldr	r2, [pc, #84]	@ (800b334 <TIM_OC4_SetConfig+0xc0>)
 800b2e0:	4293      	cmp	r3, r2
 800b2e2:	d109      	bne.n	800b2f8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	4a14      	ldr	r2, [pc, #80]	@ (800b338 <TIM_OC4_SetConfig+0xc4>)
 800b2e8:	4013      	ands	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	019b      	lsls	r3, r3, #6
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	697a      	ldr	r2, [r7, #20]
 800b2fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68fa      	ldr	r2, [r7, #12]
 800b302:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685a      	ldr	r2, [r3, #4]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	693a      	ldr	r2, [r7, #16]
 800b310:	621a      	str	r2, [r3, #32]
}
 800b312:	46c0      	nop			@ (mov r8, r8)
 800b314:	46bd      	mov	sp, r7
 800b316:	b006      	add	sp, #24
 800b318:	bd80      	pop	{r7, pc}
 800b31a:	46c0      	nop			@ (mov r8, r8)
 800b31c:	ffffefff 	.word	0xffffefff
 800b320:	feff8fff 	.word	0xfeff8fff
 800b324:	fffffcff 	.word	0xfffffcff
 800b328:	ffffdfff 	.word	0xffffdfff
 800b32c:	40012c00 	.word	0x40012c00
 800b330:	40014400 	.word	0x40014400
 800b334:	40014800 	.word	0x40014800
 800b338:	ffffbfff 	.word	0xffffbfff

0800b33c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b086      	sub	sp, #24
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a1b      	ldr	r3, [r3, #32]
 800b350:	4a21      	ldr	r2, [pc, #132]	@ (800b3d8 <TIM_OC5_SetConfig+0x9c>)
 800b352:	401a      	ands	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4a1d      	ldr	r2, [pc, #116]	@ (800b3dc <TIM_OC5_SetConfig+0xa0>)
 800b368:	4013      	ands	r3, r2
 800b36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	68fa      	ldr	r2, [r7, #12]
 800b372:	4313      	orrs	r3, r2
 800b374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	4a19      	ldr	r2, [pc, #100]	@ (800b3e0 <TIM_OC5_SetConfig+0xa4>)
 800b37a:	4013      	ands	r3, r2
 800b37c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	041b      	lsls	r3, r3, #16
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	4313      	orrs	r3, r2
 800b388:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a15      	ldr	r2, [pc, #84]	@ (800b3e4 <TIM_OC5_SetConfig+0xa8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d007      	beq.n	800b3a2 <TIM_OC5_SetConfig+0x66>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a14      	ldr	r2, [pc, #80]	@ (800b3e8 <TIM_OC5_SetConfig+0xac>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d003      	beq.n	800b3a2 <TIM_OC5_SetConfig+0x66>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	4a13      	ldr	r2, [pc, #76]	@ (800b3ec <TIM_OC5_SetConfig+0xb0>)
 800b39e:	4293      	cmp	r3, r2
 800b3a0:	d109      	bne.n	800b3b6 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	4a0c      	ldr	r2, [pc, #48]	@ (800b3d8 <TIM_OC5_SetConfig+0x9c>)
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	021b      	lsls	r3, r3, #8
 800b3b0:	697a      	ldr	r2, [r7, #20]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	697a      	ldr	r2, [r7, #20]
 800b3ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	685a      	ldr	r2, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	693a      	ldr	r2, [r7, #16]
 800b3ce:	621a      	str	r2, [r3, #32]
}
 800b3d0:	46c0      	nop			@ (mov r8, r8)
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	b006      	add	sp, #24
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	fffeffff 	.word	0xfffeffff
 800b3dc:	fffeff8f 	.word	0xfffeff8f
 800b3e0:	fffdffff 	.word	0xfffdffff
 800b3e4:	40012c00 	.word	0x40012c00
 800b3e8:	40014400 	.word	0x40014400
 800b3ec:	40014800 	.word	0x40014800

0800b3f0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b086      	sub	sp, #24
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a1b      	ldr	r3, [r3, #32]
 800b404:	4a22      	ldr	r2, [pc, #136]	@ (800b490 <TIM_OC6_SetConfig+0xa0>)
 800b406:	401a      	ands	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4a1e      	ldr	r2, [pc, #120]	@ (800b494 <TIM_OC6_SetConfig+0xa4>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	021b      	lsls	r3, r3, #8
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	4313      	orrs	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4a1a      	ldr	r2, [pc, #104]	@ (800b498 <TIM_OC6_SetConfig+0xa8>)
 800b430:	4013      	ands	r3, r2
 800b432:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	051b      	lsls	r3, r3, #20
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a16      	ldr	r2, [pc, #88]	@ (800b49c <TIM_OC6_SetConfig+0xac>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d007      	beq.n	800b458 <TIM_OC6_SetConfig+0x68>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a15      	ldr	r2, [pc, #84]	@ (800b4a0 <TIM_OC6_SetConfig+0xb0>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d003      	beq.n	800b458 <TIM_OC6_SetConfig+0x68>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a14      	ldr	r2, [pc, #80]	@ (800b4a4 <TIM_OC6_SetConfig+0xb4>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d109      	bne.n	800b46c <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	4a13      	ldr	r2, [pc, #76]	@ (800b4a8 <TIM_OC6_SetConfig+0xb8>)
 800b45c:	4013      	ands	r3, r2
 800b45e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	695b      	ldr	r3, [r3, #20]
 800b464:	029b      	lsls	r3, r3, #10
 800b466:	697a      	ldr	r2, [r7, #20]
 800b468:	4313      	orrs	r3, r2
 800b46a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	621a      	str	r2, [r3, #32]
}
 800b486:	46c0      	nop			@ (mov r8, r8)
 800b488:	46bd      	mov	sp, r7
 800b48a:	b006      	add	sp, #24
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	46c0      	nop			@ (mov r8, r8)
 800b490:	ffefffff 	.word	0xffefffff
 800b494:	feff8fff 	.word	0xfeff8fff
 800b498:	ffdfffff 	.word	0xffdfffff
 800b49c:	40012c00 	.word	0x40012c00
 800b4a0:	40014400 	.word	0x40014400
 800b4a4:	40014800 	.word	0x40014800
 800b4a8:	fffbffff 	.word	0xfffbffff

0800b4ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	6a1b      	ldr	r3, [r3, #32]
 800b4be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6a1b      	ldr	r3, [r3, #32]
 800b4c4:	2201      	movs	r2, #1
 800b4c6:	4393      	bics	r3, r2
 800b4c8:	001a      	movs	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a1e      	ldr	r2, [pc, #120]	@ (800b550 <TIM_TI1_SetConfig+0xa4>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d008      	beq.n	800b4ee <TIM_TI1_SetConfig+0x42>
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	2380      	movs	r3, #128	@ 0x80
 800b4e0:	05db      	lsls	r3, r3, #23
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d003      	beq.n	800b4ee <TIM_TI1_SetConfig+0x42>
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	4a1a      	ldr	r2, [pc, #104]	@ (800b554 <TIM_TI1_SetConfig+0xa8>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d101      	bne.n	800b4f2 <TIM_TI1_SetConfig+0x46>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e000      	b.n	800b4f4 <TIM_TI1_SetConfig+0x48>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d008      	beq.n	800b50a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	4393      	bics	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800b500:	697a      	ldr	r2, [r7, #20]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4313      	orrs	r3, r2
 800b506:	617b      	str	r3, [r7, #20]
 800b508:	e003      	b.n	800b512 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	2201      	movs	r2, #1
 800b50e:	4313      	orrs	r3, r2
 800b510:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	22f0      	movs	r2, #240	@ 0xf0
 800b516:	4393      	bics	r3, r2
 800b518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	011b      	lsls	r3, r3, #4
 800b51e:	22ff      	movs	r2, #255	@ 0xff
 800b520:	4013      	ands	r3, r2
 800b522:	697a      	ldr	r2, [r7, #20]
 800b524:	4313      	orrs	r3, r2
 800b526:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	220a      	movs	r2, #10
 800b52c:	4393      	bics	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	220a      	movs	r2, #10
 800b534:	4013      	ands	r3, r2
 800b536:	693a      	ldr	r2, [r7, #16]
 800b538:	4313      	orrs	r3, r2
 800b53a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	697a      	ldr	r2, [r7, #20]
 800b540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	621a      	str	r2, [r3, #32]
}
 800b548:	46c0      	nop			@ (mov r8, r8)
 800b54a:	46bd      	mov	sp, r7
 800b54c:	b006      	add	sp, #24
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	40012c00 	.word	0x40012c00
 800b554:	40000400 	.word	0x40000400

0800b558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6a1b      	ldr	r3, [r3, #32]
 800b56e:	2201      	movs	r2, #1
 800b570:	4393      	bics	r3, r2
 800b572:	001a      	movs	r2, r3
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	22f0      	movs	r2, #240	@ 0xf0
 800b582:	4393      	bics	r3, r2
 800b584:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	011b      	lsls	r3, r3, #4
 800b58a:	693a      	ldr	r2, [r7, #16]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	220a      	movs	r2, #10
 800b594:	4393      	bics	r3, r2
 800b596:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b598:	697a      	ldr	r2, [r7, #20]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	693a      	ldr	r2, [r7, #16]
 800b5a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	621a      	str	r2, [r3, #32]
}
 800b5ac:	46c0      	nop			@ (mov r8, r8)
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	b006      	add	sp, #24
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	60b9      	str	r1, [r7, #8]
 800b5be:	607a      	str	r2, [r7, #4]
 800b5c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6a1b      	ldr	r3, [r3, #32]
 800b5cc:	2210      	movs	r2, #16
 800b5ce:	4393      	bics	r3, r2
 800b5d0:	001a      	movs	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	699b      	ldr	r3, [r3, #24]
 800b5da:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	4a14      	ldr	r2, [pc, #80]	@ (800b630 <TIM_TI2_SetConfig+0x7c>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	021b      	lsls	r3, r3, #8
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	4313      	orrs	r3, r2
 800b5ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	4a10      	ldr	r2, [pc, #64]	@ (800b634 <TIM_TI2_SetConfig+0x80>)
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	031b      	lsls	r3, r3, #12
 800b5fa:	041b      	lsls	r3, r3, #16
 800b5fc:	0c1b      	lsrs	r3, r3, #16
 800b5fe:	693a      	ldr	r2, [r7, #16]
 800b600:	4313      	orrs	r3, r2
 800b602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	22a0      	movs	r2, #160	@ 0xa0
 800b608:	4393      	bics	r3, r2
 800b60a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	22a0      	movs	r2, #160	@ 0xa0
 800b612:	4013      	ands	r3, r2
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	4313      	orrs	r3, r2
 800b618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	693a      	ldr	r2, [r7, #16]
 800b61e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	621a      	str	r2, [r3, #32]
}
 800b626:	46c0      	nop			@ (mov r8, r8)
 800b628:	46bd      	mov	sp, r7
 800b62a:	b006      	add	sp, #24
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	46c0      	nop			@ (mov r8, r8)
 800b630:	fffffcff 	.word	0xfffffcff
 800b634:	ffff0fff 	.word	0xffff0fff

0800b638 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6a1b      	ldr	r3, [r3, #32]
 800b648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	2210      	movs	r2, #16
 800b650:	4393      	bics	r3, r2
 800b652:	001a      	movs	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	699b      	ldr	r3, [r3, #24]
 800b65c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	4a0d      	ldr	r2, [pc, #52]	@ (800b698 <TIM_TI2_ConfigInputStage+0x60>)
 800b662:	4013      	ands	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	031b      	lsls	r3, r3, #12
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	22a0      	movs	r2, #160	@ 0xa0
 800b674:	4393      	bics	r3, r2
 800b676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	011b      	lsls	r3, r3, #4
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	4313      	orrs	r3, r2
 800b680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	697a      	ldr	r2, [r7, #20]
 800b68c:	621a      	str	r2, [r3, #32]
}
 800b68e:	46c0      	nop			@ (mov r8, r8)
 800b690:	46bd      	mov	sp, r7
 800b692:	b006      	add	sp, #24
 800b694:	bd80      	pop	{r7, pc}
 800b696:	46c0      	nop			@ (mov r8, r8)
 800b698:	ffff0fff 	.word	0xffff0fff

0800b69c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b086      	sub	sp, #24
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	60f8      	str	r0, [r7, #12]
 800b6a4:	60b9      	str	r1, [r7, #8]
 800b6a6:	607a      	str	r2, [r7, #4]
 800b6a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	6a1b      	ldr	r3, [r3, #32]
 800b6ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	6a1b      	ldr	r3, [r3, #32]
 800b6b4:	4a17      	ldr	r2, [pc, #92]	@ (800b714 <TIM_TI3_SetConfig+0x78>)
 800b6b6:	401a      	ands	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800b6c2:	693b      	ldr	r3, [r7, #16]
 800b6c4:	2203      	movs	r2, #3
 800b6c6:	4393      	bics	r3, r2
 800b6c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800b6d2:	693b      	ldr	r3, [r7, #16]
 800b6d4:	22f0      	movs	r2, #240	@ 0xf0
 800b6d6:	4393      	bics	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	011b      	lsls	r3, r3, #4
 800b6de:	22ff      	movs	r2, #255	@ 0xff
 800b6e0:	4013      	ands	r3, r2
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	4a0b      	ldr	r2, [pc, #44]	@ (800b718 <TIM_TI3_SetConfig+0x7c>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800b6f0:	68bb      	ldr	r3, [r7, #8]
 800b6f2:	021a      	lsls	r2, r3, #8
 800b6f4:	23a0      	movs	r3, #160	@ 0xa0
 800b6f6:	011b      	lsls	r3, r3, #4
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	697a      	ldr	r2, [r7, #20]
 800b70a:	621a      	str	r2, [r3, #32]
}
 800b70c:	46c0      	nop			@ (mov r8, r8)
 800b70e:	46bd      	mov	sp, r7
 800b710:	b006      	add	sp, #24
 800b712:	bd80      	pop	{r7, pc}
 800b714:	fffffeff 	.word	0xfffffeff
 800b718:	fffff5ff 	.word	0xfffff5ff

0800b71c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b086      	sub	sp, #24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
 800b728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6a1b      	ldr	r3, [r3, #32]
 800b72e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	4a18      	ldr	r2, [pc, #96]	@ (800b798 <TIM_TI4_SetConfig+0x7c>)
 800b736:	401a      	ands	r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	69db      	ldr	r3, [r3, #28]
 800b740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	4a15      	ldr	r2, [pc, #84]	@ (800b79c <TIM_TI4_SetConfig+0x80>)
 800b746:	4013      	ands	r3, r2
 800b748:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	021b      	lsls	r3, r3, #8
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	4a12      	ldr	r2, [pc, #72]	@ (800b7a0 <TIM_TI4_SetConfig+0x84>)
 800b758:	4013      	ands	r3, r2
 800b75a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	031b      	lsls	r3, r3, #12
 800b760:	041b      	lsls	r3, r3, #16
 800b762:	0c1b      	lsrs	r3, r3, #16
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	4313      	orrs	r3, r2
 800b768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	4a0d      	ldr	r2, [pc, #52]	@ (800b7a4 <TIM_TI4_SetConfig+0x88>)
 800b76e:	4013      	ands	r3, r2
 800b770:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	031a      	lsls	r2, r3, #12
 800b776:	23a0      	movs	r3, #160	@ 0xa0
 800b778:	021b      	lsls	r3, r3, #8
 800b77a:	4013      	ands	r3, r2
 800b77c:	697a      	ldr	r2, [r7, #20]
 800b77e:	4313      	orrs	r3, r2
 800b780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	693a      	ldr	r2, [r7, #16]
 800b786:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	621a      	str	r2, [r3, #32]
}
 800b78e:	46c0      	nop			@ (mov r8, r8)
 800b790:	46bd      	mov	sp, r7
 800b792:	b006      	add	sp, #24
 800b794:	bd80      	pop	{r7, pc}
 800b796:	46c0      	nop			@ (mov r8, r8)
 800b798:	ffffefff 	.word	0xffffefff
 800b79c:	fffffcff 	.word	0xfffffcff
 800b7a0:	ffff0fff 	.word	0xffff0fff
 800b7a4:	ffff5fff 	.word	0xffff5fff

0800b7a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4a08      	ldr	r2, [pc, #32]	@ (800b7dc <TIM_ITRx_SetConfig+0x34>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	2207      	movs	r2, #7
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	609a      	str	r2, [r3, #8]
}
 800b7d2:	46c0      	nop			@ (mov r8, r8)
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	b004      	add	sp, #16
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	46c0      	nop			@ (mov r8, r8)
 800b7dc:	ffcfff8f 	.word	0xffcfff8f

0800b7e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
 800b7ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	4a09      	ldr	r2, [pc, #36]	@ (800b81c <TIM_ETR_SetConfig+0x3c>)
 800b7f8:	4013      	ands	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	021a      	lsls	r2, r3, #8
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	431a      	orrs	r2, r3
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	4313      	orrs	r3, r2
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	4313      	orrs	r3, r2
 800b80c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	609a      	str	r2, [r3, #8]
}
 800b814:	46c0      	nop			@ (mov r8, r8)
 800b816:	46bd      	mov	sp, r7
 800b818:	b006      	add	sp, #24
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	ffff00ff 	.word	0xffff00ff

0800b820 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	221f      	movs	r2, #31
 800b830:	4013      	ands	r3, r2
 800b832:	2201      	movs	r2, #1
 800b834:	409a      	lsls	r2, r3
 800b836:	0013      	movs	r3, r2
 800b838:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	43d2      	mvns	r2, r2
 800b842:	401a      	ands	r2, r3
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a1a      	ldr	r2, [r3, #32]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	211f      	movs	r1, #31
 800b850:	400b      	ands	r3, r1
 800b852:	6879      	ldr	r1, [r7, #4]
 800b854:	4099      	lsls	r1, r3
 800b856:	000b      	movs	r3, r1
 800b858:	431a      	orrs	r2, r3
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	46c0      	nop			@ (mov r8, r8)
 800b860:	46bd      	mov	sp, r7
 800b862:	b006      	add	sp, #24
 800b864:	bd80      	pop	{r7, pc}
	...

0800b868 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2184      	movs	r1, #132	@ 0x84
 800b874:	4a1c      	ldr	r2, [pc, #112]	@ (800b8e8 <TIM_ResetCallback+0x80>)
 800b876:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2188      	movs	r1, #136	@ 0x88
 800b87c:	4a1b      	ldr	r2, [pc, #108]	@ (800b8ec <TIM_ResetCallback+0x84>)
 800b87e:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	218c      	movs	r1, #140	@ 0x8c
 800b884:	4a1a      	ldr	r2, [pc, #104]	@ (800b8f0 <TIM_ResetCallback+0x88>)
 800b886:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2190      	movs	r1, #144	@ 0x90
 800b88c:	4a19      	ldr	r2, [pc, #100]	@ (800b8f4 <TIM_ResetCallback+0x8c>)
 800b88e:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2194      	movs	r1, #148	@ 0x94
 800b894:	4a18      	ldr	r2, [pc, #96]	@ (800b8f8 <TIM_ResetCallback+0x90>)
 800b896:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2198      	movs	r1, #152	@ 0x98
 800b89c:	4a17      	ldr	r2, [pc, #92]	@ (800b8fc <TIM_ResetCallback+0x94>)
 800b89e:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	219c      	movs	r1, #156	@ 0x9c
 800b8a4:	4a16      	ldr	r2, [pc, #88]	@ (800b900 <TIM_ResetCallback+0x98>)
 800b8a6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	21a0      	movs	r1, #160	@ 0xa0
 800b8ac:	4a15      	ldr	r2, [pc, #84]	@ (800b904 <TIM_ResetCallback+0x9c>)
 800b8ae:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	21a4      	movs	r1, #164	@ 0xa4
 800b8b4:	4a14      	ldr	r2, [pc, #80]	@ (800b908 <TIM_ResetCallback+0xa0>)
 800b8b6:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	21a8      	movs	r1, #168	@ 0xa8
 800b8bc:	4a13      	ldr	r2, [pc, #76]	@ (800b90c <TIM_ResetCallback+0xa4>)
 800b8be:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	21ac      	movs	r1, #172	@ 0xac
 800b8c4:	4a12      	ldr	r2, [pc, #72]	@ (800b910 <TIM_ResetCallback+0xa8>)
 800b8c6:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	21b0      	movs	r1, #176	@ 0xb0
 800b8cc:	4a11      	ldr	r2, [pc, #68]	@ (800b914 <TIM_ResetCallback+0xac>)
 800b8ce:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	21b4      	movs	r1, #180	@ 0xb4
 800b8d4:	4a10      	ldr	r2, [pc, #64]	@ (800b918 <TIM_ResetCallback+0xb0>)
 800b8d6:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	21b8      	movs	r1, #184	@ 0xb8
 800b8dc:	4a0f      	ldr	r2, [pc, #60]	@ (800b91c <TIM_ResetCallback+0xb4>)
 800b8de:	505a      	str	r2, [r3, r1]
}
 800b8e0:	46c0      	nop			@ (mov r8, r8)
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	b002      	add	sp, #8
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	0800abc1 	.word	0x0800abc1
 800b8ec:	0800abd1 	.word	0x0800abd1
 800b8f0:	0800ac31 	.word	0x0800ac31
 800b8f4:	0800ac41 	.word	0x0800ac41
 800b8f8:	0800abf1 	.word	0x0800abf1
 800b8fc:	0800ac01 	.word	0x0800ac01
 800b900:	0800abe1 	.word	0x0800abe1
 800b904:	0800ac11 	.word	0x0800ac11
 800b908:	0800ac21 	.word	0x0800ac21
 800b90c:	0800ac51 	.word	0x0800ac51
 800b910:	0800bb29 	.word	0x0800bb29
 800b914:	0800bb39 	.word	0x0800bb39
 800b918:	0800bb49 	.word	0x0800bb49
 800b91c:	0800bb59 	.word	0x0800bb59

0800b920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b084      	sub	sp, #16
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	223c      	movs	r2, #60	@ 0x3c
 800b92e:	5c9b      	ldrb	r3, [r3, r2]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d101      	bne.n	800b938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b934:	2302      	movs	r3, #2
 800b936:	e050      	b.n	800b9da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	223c      	movs	r2, #60	@ 0x3c
 800b93c:	2101      	movs	r1, #1
 800b93e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	223d      	movs	r2, #61	@ 0x3d
 800b944:	2102      	movs	r1, #2
 800b946:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a21      	ldr	r2, [pc, #132]	@ (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d108      	bne.n	800b974 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4a20      	ldr	r2, [pc, #128]	@ (800b9e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b966:	4013      	ands	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2270      	movs	r2, #112	@ 0x70
 800b978:	4393      	bics	r3, r2
 800b97a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	4313      	orrs	r3, r2
 800b984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	4a14      	ldr	r2, [pc, #80]	@ (800b9e4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b994:	4293      	cmp	r3, r2
 800b996:	d00a      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	2380      	movs	r3, #128	@ 0x80
 800b99e:	05db      	lsls	r3, r3, #23
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d004      	beq.n	800b9ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a10      	ldr	r2, [pc, #64]	@ (800b9ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d10c      	bne.n	800b9c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2280      	movs	r2, #128	@ 0x80
 800b9b2:	4393      	bics	r3, r2
 800b9b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	689b      	ldr	r3, [r3, #8]
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	68ba      	ldr	r2, [r7, #8]
 800b9c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	223d      	movs	r2, #61	@ 0x3d
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	223c      	movs	r2, #60	@ 0x3c
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	0018      	movs	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	b004      	add	sp, #16
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	46c0      	nop			@ (mov r8, r8)
 800b9e4:	40012c00 	.word	0x40012c00
 800b9e8:	ff0fffff 	.word	0xff0fffff
 800b9ec:	40000400 	.word	0x40000400

0800b9f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	223c      	movs	r2, #60	@ 0x3c
 800ba02:	5c9b      	ldrb	r3, [r3, r2]
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	d101      	bne.n	800ba0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba08:	2302      	movs	r3, #2
 800ba0a:	e06f      	b.n	800baec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	223c      	movs	r2, #60	@ 0x3c
 800ba10:	2101      	movs	r1, #1
 800ba12:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	22ff      	movs	r2, #255	@ 0xff
 800ba18:	4393      	bics	r3, r2
 800ba1a:	001a      	movs	r2, r3
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	4313      	orrs	r3, r2
 800ba22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4a33      	ldr	r2, [pc, #204]	@ (800baf4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800ba28:	401a      	ands	r2, r3
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4a30      	ldr	r2, [pc, #192]	@ (800baf8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800ba36:	401a      	ands	r2, r3
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4a2e      	ldr	r2, [pc, #184]	@ (800bafc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800ba44:	401a      	ands	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	4a2b      	ldr	r2, [pc, #172]	@ (800bb00 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800ba52:	401a      	ands	r2, r3
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	4a29      	ldr	r2, [pc, #164]	@ (800bb04 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800ba60:	401a      	ands	r2, r3
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	4a26      	ldr	r2, [pc, #152]	@ (800bb08 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800ba6e:	401a      	ands	r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a24      	ldr	r2, [pc, #144]	@ (800bb0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ba7c:	401a      	ands	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	041b      	lsls	r3, r3, #16
 800ba84:	4313      	orrs	r3, r2
 800ba86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	4a21      	ldr	r2, [pc, #132]	@ (800bb10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ba8c:	401a      	ands	r2, r3
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	69db      	ldr	r3, [r3, #28]
 800ba92:	4313      	orrs	r3, r2
 800ba94:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1e      	ldr	r2, [pc, #120]	@ (800bb14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d11c      	bne.n	800bada <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4a1d      	ldr	r2, [pc, #116]	@ (800bb18 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800baa4:	401a      	ands	r2, r3
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baaa:	051b      	lsls	r3, r3, #20
 800baac:	4313      	orrs	r3, r2
 800baae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4a1a      	ldr	r2, [pc, #104]	@ (800bb1c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800bab4:	401a      	ands	r2, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	6a1b      	ldr	r3, [r3, #32]
 800baba:	4313      	orrs	r3, r2
 800babc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	4a17      	ldr	r2, [pc, #92]	@ (800bb20 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800bac2:	401a      	ands	r2, r3
 800bac4:	683b      	ldr	r3, [r7, #0]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac8:	4313      	orrs	r3, r2
 800baca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4a15      	ldr	r2, [pc, #84]	@ (800bb24 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800bad0:	401a      	ands	r2, r3
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad6:	4313      	orrs	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	223c      	movs	r2, #60	@ 0x3c
 800bae6:	2100      	movs	r1, #0
 800bae8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	0018      	movs	r0, r3
 800baee:	46bd      	mov	sp, r7
 800baf0:	b004      	add	sp, #16
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	fffffcff 	.word	0xfffffcff
 800baf8:	fffffbff 	.word	0xfffffbff
 800bafc:	fffff7ff 	.word	0xfffff7ff
 800bb00:	ffffefff 	.word	0xffffefff
 800bb04:	ffffdfff 	.word	0xffffdfff
 800bb08:	ffffbfff 	.word	0xffffbfff
 800bb0c:	fff0ffff 	.word	0xfff0ffff
 800bb10:	efffffff 	.word	0xefffffff
 800bb14:	40012c00 	.word	0x40012c00
 800bb18:	ff0fffff 	.word	0xff0fffff
 800bb1c:	feffffff 	.word	0xfeffffff
 800bb20:	fdffffff 	.word	0xfdffffff
 800bb24:	dfffffff 	.word	0xdfffffff

0800bb28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb30:	46c0      	nop			@ (mov r8, r8)
 800bb32:	46bd      	mov	sp, r7
 800bb34:	b002      	add	sp, #8
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bb40:	46c0      	nop			@ (mov r8, r8)
 800bb42:	46bd      	mov	sp, r7
 800bb44:	b002      	add	sp, #8
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb50:	46c0      	nop			@ (mov r8, r8)
 800bb52:	46bd      	mov	sp, r7
 800bb54:	b002      	add	sp, #8
 800bb56:	bd80      	pop	{r7, pc}

0800bb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bb60:	46c0      	nop			@ (mov r8, r8)
 800bb62:	46bd      	mov	sp, r7
 800bb64:	b002      	add	sp, #8
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b082      	sub	sp, #8
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d101      	bne.n	800bb7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e055      	b.n	800bc26 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2288      	movs	r2, #136	@ 0x88
 800bb7e:	589b      	ldr	r3, [r3, r2]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d116      	bne.n	800bbb2 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2284      	movs	r2, #132	@ 0x84
 800bb88:	2100      	movs	r1, #0
 800bb8a:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	0018      	movs	r0, r3
 800bb90:	f000 fce0 	bl	800c554 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	22c4      	movs	r2, #196	@ 0xc4
 800bb98:	589b      	ldr	r3, [r3, r2]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d103      	bne.n	800bba6 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	21c4      	movs	r1, #196	@ 0xc4
 800bba2:	4a23      	ldr	r2, [pc, #140]	@ (800bc30 <HAL_UART_Init+0xc8>)
 800bba4:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	22c4      	movs	r2, #196	@ 0xc4
 800bbaa:	589b      	ldr	r3, [r3, r2]
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	0010      	movs	r0, r2
 800bbb0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2288      	movs	r2, #136	@ 0x88
 800bbb6:	2124      	movs	r1, #36	@ 0x24
 800bbb8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2101      	movs	r1, #1
 800bbc6:	438a      	bics	r2, r1
 800bbc8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	0018      	movs	r0, r3
 800bbd6:	f000 ff85 	bl	800cae4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	0018      	movs	r0, r3
 800bbde:	f000 fd09 	bl	800c5f4 <UART_SetConfig>
 800bbe2:	0003      	movs	r3, r0
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e01c      	b.n	800bc26 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	490f      	ldr	r1, [pc, #60]	@ (800bc34 <HAL_UART_Init+0xcc>)
 800bbf8:	400a      	ands	r2, r1
 800bbfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	212a      	movs	r1, #42	@ 0x2a
 800bc08:	438a      	bics	r2, r1
 800bc0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2101      	movs	r1, #1
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	0018      	movs	r0, r3
 800bc20:	f001 f814 	bl	800cc4c <UART_CheckIdleState>
 800bc24:	0003      	movs	r3, r0
}
 800bc26:	0018      	movs	r0, r3
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	b002      	add	sp, #8
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	46c0      	nop			@ (mov r8, r8)
 800bc30:	08005385 	.word	0x08005385
 800bc34:	ffffb7ff 	.word	0xffffb7ff

0800bc38 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b086      	sub	sp, #24
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	60f8      	str	r0, [r7, #12]
 800bc40:	607a      	str	r2, [r7, #4]
 800bc42:	230b      	movs	r3, #11
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	1c0a      	adds	r2, r1, #0
 800bc48:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc4a:	2317      	movs	r3, #23
 800bc4c:	18fb      	adds	r3, r7, r3
 800bc4e:	2200      	movs	r2, #0
 800bc50:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d109      	bne.n	800bc6c <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2290      	movs	r2, #144	@ 0x90
 800bc5c:	589b      	ldr	r3, [r3, r2]
 800bc5e:	2240      	movs	r2, #64	@ 0x40
 800bc60:	431a      	orrs	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2190      	movs	r1, #144	@ 0x90
 800bc66:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e08f      	b.n	800bd8c <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2288      	movs	r2, #136	@ 0x88
 800bc70:	589b      	ldr	r3, [r3, r2]
 800bc72:	2b20      	cmp	r3, #32
 800bc74:	d157      	bne.n	800bd26 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800bc76:	230b      	movs	r3, #11
 800bc78:	18fb      	adds	r3, r7, r3
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b0c      	cmp	r3, #12
 800bc7e:	d845      	bhi.n	800bd0c <HAL_UART_RegisterCallback+0xd4>
 800bc80:	009a      	lsls	r2, r3, #2
 800bc82:	4b44      	ldr	r3, [pc, #272]	@ (800bd94 <HAL_UART_RegisterCallback+0x15c>)
 800bc84:	18d3      	adds	r3, r2, r3
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2194      	movs	r1, #148	@ 0x94
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	505a      	str	r2, [r3, r1]
        break;
 800bc92:	e078      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2198      	movs	r1, #152	@ 0x98
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	505a      	str	r2, [r3, r1]
        break;
 800bc9c:	e073      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	219c      	movs	r1, #156	@ 0x9c
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	505a      	str	r2, [r3, r1]
        break;
 800bca6:	e06e      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	21a0      	movs	r1, #160	@ 0xa0
 800bcac:	687a      	ldr	r2, [r7, #4]
 800bcae:	505a      	str	r2, [r3, r1]
        break;
 800bcb0:	e069      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	21a4      	movs	r1, #164	@ 0xa4
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	505a      	str	r2, [r3, r1]
        break;
 800bcba:	e064      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	21a8      	movs	r1, #168	@ 0xa8
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	505a      	str	r2, [r3, r1]
        break;
 800bcc4:	e05f      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	21ac      	movs	r1, #172	@ 0xac
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	505a      	str	r2, [r3, r1]
        break;
 800bcce:	e05a      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	21b0      	movs	r1, #176	@ 0xb0
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	505a      	str	r2, [r3, r1]
        break;
 800bcd8:	e055      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	21b4      	movs	r1, #180	@ 0xb4
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	505a      	str	r2, [r3, r1]
        break;
 800bce2:	e050      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	21b8      	movs	r1, #184	@ 0xb8
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	505a      	str	r2, [r3, r1]
        break;
 800bcec:	e04b      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	21bc      	movs	r1, #188	@ 0xbc
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	505a      	str	r2, [r3, r1]
        break;
 800bcf6:	e046      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	21c4      	movs	r1, #196	@ 0xc4
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	505a      	str	r2, [r3, r1]
        break;
 800bd00:	e041      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	21c8      	movs	r1, #200	@ 0xc8
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	505a      	str	r2, [r3, r1]
        break;
 800bd0a:	e03c      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2290      	movs	r2, #144	@ 0x90
 800bd10:	589b      	ldr	r3, [r3, r2]
 800bd12:	2240      	movs	r2, #64	@ 0x40
 800bd14:	431a      	orrs	r2, r3
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	2190      	movs	r1, #144	@ 0x90
 800bd1a:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bd1c:	2317      	movs	r3, #23
 800bd1e:	18fb      	adds	r3, r7, r3
 800bd20:	2201      	movs	r2, #1
 800bd22:	701a      	strb	r2, [r3, #0]
        break;
 800bd24:	e02f      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	2288      	movs	r2, #136	@ 0x88
 800bd2a:	589b      	ldr	r3, [r3, r2]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d11e      	bne.n	800bd6e <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800bd30:	230b      	movs	r3, #11
 800bd32:	18fb      	adds	r3, r7, r3
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b0b      	cmp	r3, #11
 800bd38:	d002      	beq.n	800bd40 <HAL_UART_RegisterCallback+0x108>
 800bd3a:	2b0c      	cmp	r3, #12
 800bd3c:	d005      	beq.n	800bd4a <HAL_UART_RegisterCallback+0x112>
 800bd3e:	e009      	b.n	800bd54 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	21c4      	movs	r1, #196	@ 0xc4
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	505a      	str	r2, [r3, r1]
        break;
 800bd48:	e01d      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	21c8      	movs	r1, #200	@ 0xc8
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	505a      	str	r2, [r3, r1]
        break;
 800bd52:	e018      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2290      	movs	r2, #144	@ 0x90
 800bd58:	589b      	ldr	r3, [r3, r2]
 800bd5a:	2240      	movs	r2, #64	@ 0x40
 800bd5c:	431a      	orrs	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2190      	movs	r1, #144	@ 0x90
 800bd62:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800bd64:	2317      	movs	r3, #23
 800bd66:	18fb      	adds	r3, r7, r3
 800bd68:	2201      	movs	r2, #1
 800bd6a:	701a      	strb	r2, [r3, #0]
        break;
 800bd6c:	e00b      	b.n	800bd86 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2290      	movs	r2, #144	@ 0x90
 800bd72:	589b      	ldr	r3, [r3, r2]
 800bd74:	2240      	movs	r2, #64	@ 0x40
 800bd76:	431a      	orrs	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	2190      	movs	r1, #144	@ 0x90
 800bd7c:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800bd7e:	2317      	movs	r3, #23
 800bd80:	18fb      	adds	r3, r7, r3
 800bd82:	2201      	movs	r2, #1
 800bd84:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800bd86:	2317      	movs	r3, #23
 800bd88:	18fb      	adds	r3, r7, r3
 800bd8a:	781b      	ldrb	r3, [r3, #0]
}
 800bd8c:	0018      	movs	r0, r3
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	b006      	add	sp, #24
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	0800de9c 	.word	0x0800de9c

0800bd98 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	1dbb      	adds	r3, r7, #6
 800bda4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	228c      	movs	r2, #140	@ 0x8c
 800bdaa:	589b      	ldr	r3, [r3, r2]
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d14a      	bne.n	800be46 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d003      	beq.n	800bdbe <HAL_UART_Receive_DMA+0x26>
 800bdb6:	1dbb      	adds	r3, r7, #6
 800bdb8:	881b      	ldrh	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e042      	b.n	800be48 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	689a      	ldr	r2, [r3, #8]
 800bdc6:	2380      	movs	r3, #128	@ 0x80
 800bdc8:	015b      	lsls	r3, r3, #5
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d109      	bne.n	800bde2 <HAL_UART_Receive_DMA+0x4a>
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d105      	bne.n	800bde2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	4013      	ands	r3, r2
 800bddc:	d001      	beq.n	800bde2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e032      	b.n	800be48 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4a18      	ldr	r2, [pc, #96]	@ (800be50 <HAL_UART_Receive_DMA+0xb8>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d020      	beq.n	800be34 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	685a      	ldr	r2, [r3, #4]
 800bdf8:	2380      	movs	r3, #128	@ 0x80
 800bdfa:	041b      	lsls	r3, r3, #16
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	d019      	beq.n	800be34 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be00:	f3ef 8310 	mrs	r3, PRIMASK
 800be04:	613b      	str	r3, [r7, #16]
  return(result);
 800be06:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800be08:	61fb      	str	r3, [r7, #28]
 800be0a:	2301      	movs	r3, #1
 800be0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	f383 8810 	msr	PRIMASK, r3
}
 800be14:	46c0      	nop			@ (mov r8, r8)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	681a      	ldr	r2, [r3, #0]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	2180      	movs	r1, #128	@ 0x80
 800be22:	04c9      	lsls	r1, r1, #19
 800be24:	430a      	orrs	r2, r1
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	69fb      	ldr	r3, [r7, #28]
 800be2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	f383 8810 	msr	PRIMASK, r3
}
 800be32:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800be34:	1dbb      	adds	r3, r7, #6
 800be36:	881a      	ldrh	r2, [r3, #0]
 800be38:	68b9      	ldr	r1, [r7, #8]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	0018      	movs	r0, r3
 800be3e:	f001 f81f 	bl	800ce80 <UART_Start_Receive_DMA>
 800be42:	0003      	movs	r3, r0
 800be44:	e000      	b.n	800be48 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800be46:	2302      	movs	r3, #2
  }
}
 800be48:	0018      	movs	r0, r3
 800be4a:	46bd      	mov	sp, r7
 800be4c:	b008      	add	sp, #32
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	40008000 	.word	0x40008000

0800be54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be54:	b5b0      	push	{r4, r5, r7, lr}
 800be56:	b0aa      	sub	sp, #168	@ 0xa8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	69db      	ldr	r3, [r3, #28]
 800be62:	22a4      	movs	r2, #164	@ 0xa4
 800be64:	18b9      	adds	r1, r7, r2
 800be66:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	20a0      	movs	r0, #160	@ 0xa0
 800be70:	1839      	adds	r1, r7, r0
 800be72:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	249c      	movs	r4, #156	@ 0x9c
 800be7c:	1939      	adds	r1, r7, r4
 800be7e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be80:	0011      	movs	r1, r2
 800be82:	18bb      	adds	r3, r7, r2
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4aa5      	ldr	r2, [pc, #660]	@ (800c11c <HAL_UART_IRQHandler+0x2c8>)
 800be88:	4013      	ands	r3, r2
 800be8a:	2298      	movs	r2, #152	@ 0x98
 800be8c:	18bd      	adds	r5, r7, r2
 800be8e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800be90:	18bb      	adds	r3, r7, r2
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d11a      	bne.n	800bece <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be98:	187b      	adds	r3, r7, r1
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	2220      	movs	r2, #32
 800be9e:	4013      	ands	r3, r2
 800bea0:	d015      	beq.n	800bece <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bea2:	183b      	adds	r3, r7, r0
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2220      	movs	r2, #32
 800bea8:	4013      	ands	r3, r2
 800beaa:	d105      	bne.n	800beb8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800beac:	193b      	adds	r3, r7, r4
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	2380      	movs	r3, #128	@ 0x80
 800beb2:	055b      	lsls	r3, r3, #21
 800beb4:	4013      	ands	r3, r2
 800beb6:	d00a      	beq.n	800bece <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d100      	bne.n	800bec2 <HAL_UART_IRQHandler+0x6e>
 800bec0:	e2ea      	b.n	800c498 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	0010      	movs	r0, r2
 800beca:	4798      	blx	r3
      }
      return;
 800becc:	e2e4      	b.n	800c498 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800bece:	2398      	movs	r3, #152	@ 0x98
 800bed0:	18fb      	adds	r3, r7, r3
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d100      	bne.n	800beda <HAL_UART_IRQHandler+0x86>
 800bed8:	e128      	b.n	800c12c <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800beda:	239c      	movs	r3, #156	@ 0x9c
 800bedc:	18fb      	adds	r3, r7, r3
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	4a8f      	ldr	r2, [pc, #572]	@ (800c120 <HAL_UART_IRQHandler+0x2cc>)
 800bee2:	4013      	ands	r3, r2
 800bee4:	d106      	bne.n	800bef4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bee6:	23a0      	movs	r3, #160	@ 0xa0
 800bee8:	18fb      	adds	r3, r7, r3
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4a8d      	ldr	r2, [pc, #564]	@ (800c124 <HAL_UART_IRQHandler+0x2d0>)
 800beee:	4013      	ands	r3, r2
 800bef0:	d100      	bne.n	800bef4 <HAL_UART_IRQHandler+0xa0>
 800bef2:	e11b      	b.n	800c12c <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bef4:	23a4      	movs	r3, #164	@ 0xa4
 800bef6:	18fb      	adds	r3, r7, r3
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2201      	movs	r2, #1
 800befc:	4013      	ands	r3, r2
 800befe:	d012      	beq.n	800bf26 <HAL_UART_IRQHandler+0xd2>
 800bf00:	23a0      	movs	r3, #160	@ 0xa0
 800bf02:	18fb      	adds	r3, r7, r3
 800bf04:	681a      	ldr	r2, [r3, #0]
 800bf06:	2380      	movs	r3, #128	@ 0x80
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	4013      	ands	r3, r2
 800bf0c:	d00b      	beq.n	800bf26 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	2201      	movs	r2, #1
 800bf14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2290      	movs	r2, #144	@ 0x90
 800bf1a:	589b      	ldr	r3, [r3, r2]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2190      	movs	r1, #144	@ 0x90
 800bf24:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf26:	23a4      	movs	r3, #164	@ 0xa4
 800bf28:	18fb      	adds	r3, r7, r3
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2202      	movs	r2, #2
 800bf2e:	4013      	ands	r3, r2
 800bf30:	d011      	beq.n	800bf56 <HAL_UART_IRQHandler+0x102>
 800bf32:	239c      	movs	r3, #156	@ 0x9c
 800bf34:	18fb      	adds	r3, r7, r3
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	4013      	ands	r3, r2
 800bf3c:	d00b      	beq.n	800bf56 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2202      	movs	r2, #2
 800bf44:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2290      	movs	r2, #144	@ 0x90
 800bf4a:	589b      	ldr	r3, [r3, r2]
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	431a      	orrs	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2190      	movs	r1, #144	@ 0x90
 800bf54:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bf56:	23a4      	movs	r3, #164	@ 0xa4
 800bf58:	18fb      	adds	r3, r7, r3
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2204      	movs	r2, #4
 800bf5e:	4013      	ands	r3, r2
 800bf60:	d011      	beq.n	800bf86 <HAL_UART_IRQHandler+0x132>
 800bf62:	239c      	movs	r3, #156	@ 0x9c
 800bf64:	18fb      	adds	r3, r7, r3
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2201      	movs	r2, #1
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	d00b      	beq.n	800bf86 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	2204      	movs	r2, #4
 800bf74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2290      	movs	r2, #144	@ 0x90
 800bf7a:	589b      	ldr	r3, [r3, r2]
 800bf7c:	2202      	movs	r2, #2
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2190      	movs	r1, #144	@ 0x90
 800bf84:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf86:	23a4      	movs	r3, #164	@ 0xa4
 800bf88:	18fb      	adds	r3, r7, r3
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	2208      	movs	r2, #8
 800bf8e:	4013      	ands	r3, r2
 800bf90:	d017      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf92:	23a0      	movs	r3, #160	@ 0xa0
 800bf94:	18fb      	adds	r3, r7, r3
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2220      	movs	r2, #32
 800bf9a:	4013      	ands	r3, r2
 800bf9c:	d105      	bne.n	800bfaa <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf9e:	239c      	movs	r3, #156	@ 0x9c
 800bfa0:	18fb      	adds	r3, r7, r3
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a5e      	ldr	r2, [pc, #376]	@ (800c120 <HAL_UART_IRQHandler+0x2cc>)
 800bfa6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bfa8:	d00b      	beq.n	800bfc2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	2208      	movs	r2, #8
 800bfb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2290      	movs	r2, #144	@ 0x90
 800bfb6:	589b      	ldr	r3, [r3, r2]
 800bfb8:	2208      	movs	r2, #8
 800bfba:	431a      	orrs	r2, r3
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2190      	movs	r1, #144	@ 0x90
 800bfc0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bfc2:	23a4      	movs	r3, #164	@ 0xa4
 800bfc4:	18fb      	adds	r3, r7, r3
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	2380      	movs	r3, #128	@ 0x80
 800bfca:	011b      	lsls	r3, r3, #4
 800bfcc:	4013      	ands	r3, r2
 800bfce:	d013      	beq.n	800bff8 <HAL_UART_IRQHandler+0x1a4>
 800bfd0:	23a0      	movs	r3, #160	@ 0xa0
 800bfd2:	18fb      	adds	r3, r7, r3
 800bfd4:	681a      	ldr	r2, [r3, #0]
 800bfd6:	2380      	movs	r3, #128	@ 0x80
 800bfd8:	04db      	lsls	r3, r3, #19
 800bfda:	4013      	ands	r3, r2
 800bfdc:	d00c      	beq.n	800bff8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	2280      	movs	r2, #128	@ 0x80
 800bfe4:	0112      	lsls	r2, r2, #4
 800bfe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2290      	movs	r2, #144	@ 0x90
 800bfec:	589b      	ldr	r3, [r3, r2]
 800bfee:	2220      	movs	r2, #32
 800bff0:	431a      	orrs	r2, r3
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2190      	movs	r1, #144	@ 0x90
 800bff6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2290      	movs	r2, #144	@ 0x90
 800bffc:	589b      	ldr	r3, [r3, r2]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d100      	bne.n	800c004 <HAL_UART_IRQHandler+0x1b0>
 800c002:	e24b      	b.n	800c49c <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c004:	23a4      	movs	r3, #164	@ 0xa4
 800c006:	18fb      	adds	r3, r7, r3
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2220      	movs	r2, #32
 800c00c:	4013      	ands	r3, r2
 800c00e:	d015      	beq.n	800c03c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c010:	23a0      	movs	r3, #160	@ 0xa0
 800c012:	18fb      	adds	r3, r7, r3
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2220      	movs	r2, #32
 800c018:	4013      	ands	r3, r2
 800c01a:	d106      	bne.n	800c02a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c01c:	239c      	movs	r3, #156	@ 0x9c
 800c01e:	18fb      	adds	r3, r7, r3
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	2380      	movs	r3, #128	@ 0x80
 800c024:	055b      	lsls	r3, r3, #21
 800c026:	4013      	ands	r3, r2
 800c028:	d008      	beq.n	800c03c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d004      	beq.n	800c03c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	0010      	movs	r0, r2
 800c03a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2290      	movs	r2, #144	@ 0x90
 800c040:	589b      	ldr	r3, [r3, r2]
 800c042:	2194      	movs	r1, #148	@ 0x94
 800c044:	187a      	adds	r2, r7, r1
 800c046:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	2240      	movs	r2, #64	@ 0x40
 800c050:	4013      	ands	r3, r2
 800c052:	2b40      	cmp	r3, #64	@ 0x40
 800c054:	d004      	beq.n	800c060 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c056:	187b      	adds	r3, r7, r1
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2228      	movs	r2, #40	@ 0x28
 800c05c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c05e:	d050      	beq.n	800c102 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	0018      	movs	r0, r3
 800c064:	f000 fff2 	bl	800d04c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	2240      	movs	r2, #64	@ 0x40
 800c070:	4013      	ands	r3, r2
 800c072:	2b40      	cmp	r3, #64	@ 0x40
 800c074:	d13e      	bne.n	800c0f4 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c076:	f3ef 8310 	mrs	r3, PRIMASK
 800c07a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800c07c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c07e:	2090      	movs	r0, #144	@ 0x90
 800c080:	183a      	adds	r2, r7, r0
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	2301      	movs	r3, #1
 800c086:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c088:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c08a:	f383 8810 	msr	PRIMASK, r3
}
 800c08e:	46c0      	nop			@ (mov r8, r8)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	689a      	ldr	r2, [r3, #8]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2140      	movs	r1, #64	@ 0x40
 800c09c:	438a      	bics	r2, r1
 800c09e:	609a      	str	r2, [r3, #8]
 800c0a0:	183b      	adds	r3, r7, r0
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a8:	f383 8810 	msr	PRIMASK, r3
}
 800c0ac:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2280      	movs	r2, #128	@ 0x80
 800c0b2:	589b      	ldr	r3, [r3, r2]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d016      	beq.n	800c0e6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2280      	movs	r2, #128	@ 0x80
 800c0bc:	589b      	ldr	r3, [r3, r2]
 800c0be:	4a1a      	ldr	r2, [pc, #104]	@ (800c128 <HAL_UART_IRQHandler+0x2d4>)
 800c0c0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2280      	movs	r2, #128	@ 0x80
 800c0c6:	589b      	ldr	r3, [r3, r2]
 800c0c8:	0018      	movs	r0, r3
 800c0ca:	f7fb fce5 	bl	8007a98 <HAL_DMA_Abort_IT>
 800c0ce:	1e03      	subs	r3, r0, #0
 800c0d0:	d022      	beq.n	800c118 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2280      	movs	r2, #128	@ 0x80
 800c0d6:	589b      	ldr	r3, [r3, r2]
 800c0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	2180      	movs	r1, #128	@ 0x80
 800c0de:	5852      	ldr	r2, [r2, r1]
 800c0e0:	0010      	movs	r0, r2
 800c0e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e4:	e018      	b.n	800c118 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	22a4      	movs	r2, #164	@ 0xa4
 800c0ea:	589b      	ldr	r3, [r3, r2]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	0010      	movs	r0, r2
 800c0f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0f2:	e011      	b.n	800c118 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	22a4      	movs	r2, #164	@ 0xa4
 800c0f8:	589b      	ldr	r3, [r3, r2]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	0010      	movs	r0, r2
 800c0fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c100:	e00a      	b.n	800c118 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	22a4      	movs	r2, #164	@ 0xa4
 800c106:	589b      	ldr	r3, [r3, r2]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	0010      	movs	r0, r2
 800c10c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2290      	movs	r2, #144	@ 0x90
 800c112:	2100      	movs	r1, #0
 800c114:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800c116:	e1c1      	b.n	800c49c <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c118:	46c0      	nop			@ (mov r8, r8)
    return;
 800c11a:	e1bf      	b.n	800c49c <HAL_UART_IRQHandler+0x648>
 800c11c:	0000080f 	.word	0x0000080f
 800c120:	10000001 	.word	0x10000001
 800c124:	04000120 	.word	0x04000120
 800c128:	0800d31f 	.word	0x0800d31f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c130:	2b01      	cmp	r3, #1
 800c132:	d000      	beq.n	800c136 <HAL_UART_IRQHandler+0x2e2>
 800c134:	e140      	b.n	800c3b8 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c136:	23a4      	movs	r3, #164	@ 0xa4
 800c138:	18fb      	adds	r3, r7, r3
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2210      	movs	r2, #16
 800c13e:	4013      	ands	r3, r2
 800c140:	d100      	bne.n	800c144 <HAL_UART_IRQHandler+0x2f0>
 800c142:	e139      	b.n	800c3b8 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c144:	23a0      	movs	r3, #160	@ 0xa0
 800c146:	18fb      	adds	r3, r7, r3
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	2210      	movs	r2, #16
 800c14c:	4013      	ands	r3, r2
 800c14e:	d100      	bne.n	800c152 <HAL_UART_IRQHandler+0x2fe>
 800c150:	e132      	b.n	800c3b8 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2210      	movs	r2, #16
 800c158:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	689b      	ldr	r3, [r3, #8]
 800c160:	2240      	movs	r2, #64	@ 0x40
 800c162:	4013      	ands	r3, r2
 800c164:	2b40      	cmp	r3, #64	@ 0x40
 800c166:	d000      	beq.n	800c16a <HAL_UART_IRQHandler+0x316>
 800c168:	e0a5      	b.n	800c2b6 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2280      	movs	r2, #128	@ 0x80
 800c16e:	589b      	ldr	r3, [r3, r2]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	685a      	ldr	r2, [r3, #4]
 800c174:	217e      	movs	r1, #126	@ 0x7e
 800c176:	187b      	adds	r3, r7, r1
 800c178:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800c17a:	187b      	adds	r3, r7, r1
 800c17c:	881b      	ldrh	r3, [r3, #0]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d100      	bne.n	800c184 <HAL_UART_IRQHandler+0x330>
 800c182:	e18d      	b.n	800c4a0 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	225c      	movs	r2, #92	@ 0x5c
 800c188:	5a9b      	ldrh	r3, [r3, r2]
 800c18a:	187a      	adds	r2, r7, r1
 800c18c:	8812      	ldrh	r2, [r2, #0]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d300      	bcc.n	800c194 <HAL_UART_IRQHandler+0x340>
 800c192:	e185      	b.n	800c4a0 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	187a      	adds	r2, r7, r1
 800c198:	215e      	movs	r1, #94	@ 0x5e
 800c19a:	8812      	ldrh	r2, [r2, #0]
 800c19c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2280      	movs	r2, #128	@ 0x80
 800c1a2:	589b      	ldr	r3, [r3, r2]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2220      	movs	r2, #32
 800c1aa:	4013      	ands	r3, r2
 800c1ac:	d170      	bne.n	800c290 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c1b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c1b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1be:	f383 8810 	msr	PRIMASK, r3
}
 800c1c2:	46c0      	nop			@ (mov r8, r8)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	49b8      	ldr	r1, [pc, #736]	@ (800c4b0 <HAL_UART_IRQHandler+0x65c>)
 800c1d0:	400a      	ands	r2, r1
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	f383 8810 	msr	PRIMASK, r3
}
 800c1de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800c1e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1e8:	677b      	str	r3, [r7, #116]	@ 0x74
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1f0:	f383 8810 	msr	PRIMASK, r3
}
 800c1f4:	46c0      	nop			@ (mov r8, r8)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	689a      	ldr	r2, [r3, #8]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2101      	movs	r1, #1
 800c202:	438a      	bics	r2, r1
 800c204:	609a      	str	r2, [r3, #8]
 800c206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c208:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c20a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c20c:	f383 8810 	msr	PRIMASK, r3
}
 800c210:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c212:	f3ef 8310 	mrs	r3, PRIMASK
 800c216:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800c218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c21a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c21c:	2301      	movs	r3, #1
 800c21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c222:	f383 8810 	msr	PRIMASK, r3
}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	689a      	ldr	r2, [r3, #8]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2140      	movs	r1, #64	@ 0x40
 800c234:	438a      	bics	r2, r1
 800c236:	609a      	str	r2, [r3, #8]
 800c238:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c23a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c23c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c23e:	f383 8810 	msr	PRIMASK, r3
}
 800c242:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	228c      	movs	r2, #140	@ 0x8c
 800c248:	2120      	movs	r1, #32
 800c24a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2200      	movs	r2, #0
 800c250:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c252:	f3ef 8310 	mrs	r3, PRIMASK
 800c256:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800c258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c25a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c25c:	2301      	movs	r3, #1
 800c25e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c260:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c262:	f383 8810 	msr	PRIMASK, r3
}
 800c266:	46c0      	nop			@ (mov r8, r8)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2110      	movs	r1, #16
 800c274:	438a      	bics	r2, r1
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c27a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c27c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c27e:	f383 8810 	msr	PRIMASK, r3
}
 800c282:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2280      	movs	r2, #128	@ 0x80
 800c288:	589b      	ldr	r3, [r3, r2]
 800c28a:	0018      	movs	r0, r3
 800c28c:	f7fb fba2 	bl	80079d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2202      	movs	r2, #2
 800c294:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	22c0      	movs	r2, #192	@ 0xc0
 800c29a:	589b      	ldr	r3, [r3, r2]
 800c29c:	687a      	ldr	r2, [r7, #4]
 800c29e:	215c      	movs	r1, #92	@ 0x5c
 800c2a0:	5a51      	ldrh	r1, [r2, r1]
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	205e      	movs	r0, #94	@ 0x5e
 800c2a6:	5a12      	ldrh	r2, [r2, r0]
 800c2a8:	b292      	uxth	r2, r2
 800c2aa:	1a8a      	subs	r2, r1, r2
 800c2ac:	b291      	uxth	r1, r2
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	0010      	movs	r0, r2
 800c2b2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c2b4:	e0f4      	b.n	800c4a0 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	225c      	movs	r2, #92	@ 0x5c
 800c2ba:	5a99      	ldrh	r1, [r3, r2]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	225e      	movs	r2, #94	@ 0x5e
 800c2c0:	5a9b      	ldrh	r3, [r3, r2]
 800c2c2:	b29a      	uxth	r2, r3
 800c2c4:	208e      	movs	r0, #142	@ 0x8e
 800c2c6:	183b      	adds	r3, r7, r0
 800c2c8:	1a8a      	subs	r2, r1, r2
 800c2ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	225e      	movs	r2, #94	@ 0x5e
 800c2d0:	5a9b      	ldrh	r3, [r3, r2]
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d100      	bne.n	800c2da <HAL_UART_IRQHandler+0x486>
 800c2d8:	e0e4      	b.n	800c4a4 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800c2da:	183b      	adds	r3, r7, r0
 800c2dc:	881b      	ldrh	r3, [r3, #0]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d100      	bne.n	800c2e4 <HAL_UART_IRQHandler+0x490>
 800c2e2:	e0df      	b.n	800c4a4 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2e4:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e8:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2ec:	2488      	movs	r4, #136	@ 0x88
 800c2ee:	193a      	adds	r2, r7, r4
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	f383 8810 	msr	PRIMASK, r3
}
 800c2fc:	46c0      	nop			@ (mov r8, r8)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	496a      	ldr	r1, [pc, #424]	@ (800c4b4 <HAL_UART_IRQHandler+0x660>)
 800c30a:	400a      	ands	r2, r1
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	193b      	adds	r3, r7, r4
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f383 8810 	msr	PRIMASK, r3
}
 800c31a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c31c:	f3ef 8310 	mrs	r3, PRIMASK
 800c320:	61bb      	str	r3, [r7, #24]
  return(result);
 800c322:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c324:	2484      	movs	r4, #132	@ 0x84
 800c326:	193a      	adds	r2, r7, r4
 800c328:	6013      	str	r3, [r2, #0]
 800c32a:	2301      	movs	r3, #1
 800c32c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c32e:	69fb      	ldr	r3, [r7, #28]
 800c330:	f383 8810 	msr	PRIMASK, r3
}
 800c334:	46c0      	nop			@ (mov r8, r8)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	689a      	ldr	r2, [r3, #8]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	495d      	ldr	r1, [pc, #372]	@ (800c4b8 <HAL_UART_IRQHandler+0x664>)
 800c342:	400a      	ands	r2, r1
 800c344:	609a      	str	r2, [r3, #8]
 800c346:	193b      	adds	r3, r7, r4
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	f383 8810 	msr	PRIMASK, r3
}
 800c352:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	228c      	movs	r2, #140	@ 0x8c
 800c358:	2120      	movs	r1, #32
 800c35a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c368:	f3ef 8310 	mrs	r3, PRIMASK
 800c36c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c36e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c370:	2480      	movs	r4, #128	@ 0x80
 800c372:	193a      	adds	r2, r7, r4
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	2301      	movs	r3, #1
 800c378:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c37a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37c:	f383 8810 	msr	PRIMASK, r3
}
 800c380:	46c0      	nop			@ (mov r8, r8)
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2110      	movs	r1, #16
 800c38e:	438a      	bics	r2, r1
 800c390:	601a      	str	r2, [r3, #0]
 800c392:	193b      	adds	r3, r7, r4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c39a:	f383 8810 	msr	PRIMASK, r3
}
 800c39e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	22c0      	movs	r2, #192	@ 0xc0
 800c3aa:	589b      	ldr	r3, [r3, r2]
 800c3ac:	183a      	adds	r2, r7, r0
 800c3ae:	8811      	ldrh	r1, [r2, #0]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	0010      	movs	r0, r2
 800c3b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3b6:	e075      	b.n	800c4a4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3b8:	23a4      	movs	r3, #164	@ 0xa4
 800c3ba:	18fb      	adds	r3, r7, r3
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	2380      	movs	r3, #128	@ 0x80
 800c3c0:	035b      	lsls	r3, r3, #13
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	d012      	beq.n	800c3ec <HAL_UART_IRQHandler+0x598>
 800c3c6:	239c      	movs	r3, #156	@ 0x9c
 800c3c8:	18fb      	adds	r3, r7, r3
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	2380      	movs	r3, #128	@ 0x80
 800c3ce:	03db      	lsls	r3, r3, #15
 800c3d0:	4013      	ands	r3, r2
 800c3d2:	d00b      	beq.n	800c3ec <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	2280      	movs	r2, #128	@ 0x80
 800c3da:	0352      	lsls	r2, r2, #13
 800c3dc:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	22b4      	movs	r2, #180	@ 0xb4
 800c3e2:	589b      	ldr	r3, [r3, r2]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	0010      	movs	r0, r2
 800c3e8:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3ea:	e05e      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3ec:	23a4      	movs	r3, #164	@ 0xa4
 800c3ee:	18fb      	adds	r3, r7, r3
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	2280      	movs	r2, #128	@ 0x80
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d016      	beq.n	800c426 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c3f8:	23a0      	movs	r3, #160	@ 0xa0
 800c3fa:	18fb      	adds	r3, r7, r3
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2280      	movs	r2, #128	@ 0x80
 800c400:	4013      	ands	r3, r2
 800c402:	d106      	bne.n	800c412 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c404:	239c      	movs	r3, #156	@ 0x9c
 800c406:	18fb      	adds	r3, r7, r3
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	2380      	movs	r3, #128	@ 0x80
 800c40c:	041b      	lsls	r3, r3, #16
 800c40e:	4013      	ands	r3, r2
 800c410:	d009      	beq.n	800c426 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c416:	2b00      	cmp	r3, #0
 800c418:	d046      	beq.n	800c4a8 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	0010      	movs	r0, r2
 800c422:	4798      	blx	r3
    }
    return;
 800c424:	e040      	b.n	800c4a8 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c426:	23a4      	movs	r3, #164	@ 0xa4
 800c428:	18fb      	adds	r3, r7, r3
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2240      	movs	r2, #64	@ 0x40
 800c42e:	4013      	ands	r3, r2
 800c430:	d00a      	beq.n	800c448 <HAL_UART_IRQHandler+0x5f4>
 800c432:	23a0      	movs	r3, #160	@ 0xa0
 800c434:	18fb      	adds	r3, r7, r3
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2240      	movs	r2, #64	@ 0x40
 800c43a:	4013      	ands	r3, r2
 800c43c:	d004      	beq.n	800c448 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	0018      	movs	r0, r3
 800c442:	f000 ff85 	bl	800d350 <UART_EndTransmit_IT>
    return;
 800c446:	e030      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c448:	23a4      	movs	r3, #164	@ 0xa4
 800c44a:	18fb      	adds	r3, r7, r3
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	2380      	movs	r3, #128	@ 0x80
 800c450:	041b      	lsls	r3, r3, #16
 800c452:	4013      	ands	r3, r2
 800c454:	d00d      	beq.n	800c472 <HAL_UART_IRQHandler+0x61e>
 800c456:	23a0      	movs	r3, #160	@ 0xa0
 800c458:	18fb      	adds	r3, r7, r3
 800c45a:	681a      	ldr	r2, [r3, #0]
 800c45c:	2380      	movs	r3, #128	@ 0x80
 800c45e:	05db      	lsls	r3, r3, #23
 800c460:	4013      	ands	r3, r2
 800c462:	d006      	beq.n	800c472 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	22bc      	movs	r2, #188	@ 0xbc
 800c468:	589b      	ldr	r3, [r3, r2]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	0010      	movs	r0, r2
 800c46e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c470:	e01b      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c472:	23a4      	movs	r3, #164	@ 0xa4
 800c474:	18fb      	adds	r3, r7, r3
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	2380      	movs	r3, #128	@ 0x80
 800c47a:	045b      	lsls	r3, r3, #17
 800c47c:	4013      	ands	r3, r2
 800c47e:	d014      	beq.n	800c4aa <HAL_UART_IRQHandler+0x656>
 800c480:	23a0      	movs	r3, #160	@ 0xa0
 800c482:	18fb      	adds	r3, r7, r3
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	da0f      	bge.n	800c4aa <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	22b8      	movs	r2, #184	@ 0xb8
 800c48e:	589b      	ldr	r3, [r3, r2]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	0010      	movs	r0, r2
 800c494:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c496:	e008      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
      return;
 800c498:	46c0      	nop			@ (mov r8, r8)
 800c49a:	e006      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
    return;
 800c49c:	46c0      	nop			@ (mov r8, r8)
 800c49e:	e004      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
      return;
 800c4a0:	46c0      	nop			@ (mov r8, r8)
 800c4a2:	e002      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
      return;
 800c4a4:	46c0      	nop			@ (mov r8, r8)
 800c4a6:	e000      	b.n	800c4aa <HAL_UART_IRQHandler+0x656>
    return;
 800c4a8:	46c0      	nop			@ (mov r8, r8)
  }
}
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	b02a      	add	sp, #168	@ 0xa8
 800c4ae:	bdb0      	pop	{r4, r5, r7, pc}
 800c4b0:	fffffeff 	.word	0xfffffeff
 800c4b4:	fffffedf 	.word	0xfffffedf
 800c4b8:	effffffe 	.word	0xeffffffe

0800c4bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4c4:	46c0      	nop			@ (mov r8, r8)
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	b002      	add	sp, #8
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4d4:	46c0      	nop			@ (mov r8, r8)
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	b002      	add	sp, #8
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b082      	sub	sp, #8
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c4e4:	46c0      	nop			@ (mov r8, r8)
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	b002      	add	sp, #8
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4f4:	46c0      	nop			@ (mov r8, r8)
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	b002      	add	sp, #8
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b082      	sub	sp, #8
 800c500:	af00      	add	r7, sp, #0
 800c502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c504:	46c0      	nop			@ (mov r8, r8)
 800c506:	46bd      	mov	sp, r7
 800c508:	b002      	add	sp, #8
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c514:	46c0      	nop			@ (mov r8, r8)
 800c516:	46bd      	mov	sp, r7
 800c518:	b002      	add	sp, #8
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c524:	46c0      	nop			@ (mov r8, r8)
 800c526:	46bd      	mov	sp, r7
 800c528:	b002      	add	sp, #8
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b082      	sub	sp, #8
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c534:	46c0      	nop			@ (mov r8, r8)
 800c536:	46bd      	mov	sp, r7
 800c538:	b002      	add	sp, #8
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b082      	sub	sp, #8
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	000a      	movs	r2, r1
 800c546:	1cbb      	adds	r3, r7, #2
 800c548:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c54a:	46c0      	nop			@ (mov r8, r8)
 800c54c:	46bd      	mov	sp, r7
 800c54e:	b002      	add	sp, #8
 800c550:	bd80      	pop	{r7, pc}
	...

0800c554 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2194      	movs	r1, #148	@ 0x94
 800c560:	4a18      	ldr	r2, [pc, #96]	@ (800c5c4 <UART_InitCallbacksToDefault+0x70>)
 800c562:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2198      	movs	r1, #152	@ 0x98
 800c568:	4a17      	ldr	r2, [pc, #92]	@ (800c5c8 <UART_InitCallbacksToDefault+0x74>)
 800c56a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	219c      	movs	r1, #156	@ 0x9c
 800c570:	4a16      	ldr	r2, [pc, #88]	@ (800c5cc <UART_InitCallbacksToDefault+0x78>)
 800c572:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	21a0      	movs	r1, #160	@ 0xa0
 800c578:	4a15      	ldr	r2, [pc, #84]	@ (800c5d0 <UART_InitCallbacksToDefault+0x7c>)
 800c57a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	21a4      	movs	r1, #164	@ 0xa4
 800c580:	4a14      	ldr	r2, [pc, #80]	@ (800c5d4 <UART_InitCallbacksToDefault+0x80>)
 800c582:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	21a8      	movs	r1, #168	@ 0xa8
 800c588:	4a13      	ldr	r2, [pc, #76]	@ (800c5d8 <UART_InitCallbacksToDefault+0x84>)
 800c58a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	21ac      	movs	r1, #172	@ 0xac
 800c590:	4a12      	ldr	r2, [pc, #72]	@ (800c5dc <UART_InitCallbacksToDefault+0x88>)
 800c592:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	21b0      	movs	r1, #176	@ 0xb0
 800c598:	4a11      	ldr	r2, [pc, #68]	@ (800c5e0 <UART_InitCallbacksToDefault+0x8c>)
 800c59a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	21b4      	movs	r1, #180	@ 0xb4
 800c5a0:	4a10      	ldr	r2, [pc, #64]	@ (800c5e4 <UART_InitCallbacksToDefault+0x90>)
 800c5a2:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	21b8      	movs	r1, #184	@ 0xb8
 800c5a8:	4a0f      	ldr	r2, [pc, #60]	@ (800c5e8 <UART_InitCallbacksToDefault+0x94>)
 800c5aa:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	21bc      	movs	r1, #188	@ 0xbc
 800c5b0:	4a0e      	ldr	r2, [pc, #56]	@ (800c5ec <UART_InitCallbacksToDefault+0x98>)
 800c5b2:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	21c0      	movs	r1, #192	@ 0xc0
 800c5b8:	4a0d      	ldr	r2, [pc, #52]	@ (800c5f0 <UART_InitCallbacksToDefault+0x9c>)
 800c5ba:	505a      	str	r2, [r3, r1]

}
 800c5bc:	46c0      	nop			@ (mov r8, r8)
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	b002      	add	sp, #8
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	0800c4cd 	.word	0x0800c4cd
 800c5c8:	0800c4bd 	.word	0x0800c4bd
 800c5cc:	0800c4ed 	.word	0x0800c4ed
 800c5d0:	0800c4dd 	.word	0x0800c4dd
 800c5d4:	0800c4fd 	.word	0x0800c4fd
 800c5d8:	0800c50d 	.word	0x0800c50d
 800c5dc:	0800c51d 	.word	0x0800c51d
 800c5e0:	0800c52d 	.word	0x0800c52d
 800c5e4:	0800d3ad 	.word	0x0800d3ad
 800c5e8:	0800d3bd 	.word	0x0800d3bd
 800c5ec:	0800d3cd 	.word	0x0800d3cd
 800c5f0:	0800c53d 	.word	0x0800c53d

0800c5f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5f4:	b5b0      	push	{r4, r5, r7, lr}
 800c5f6:	b090      	sub	sp, #64	@ 0x40
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5fc:	231a      	movs	r3, #26
 800c5fe:	2220      	movs	r2, #32
 800c600:	189b      	adds	r3, r3, r2
 800c602:	19db      	adds	r3, r3, r7
 800c604:	2200      	movs	r2, #0
 800c606:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	689a      	ldr	r2, [r3, #8]
 800c60c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60e:	691b      	ldr	r3, [r3, #16]
 800c610:	431a      	orrs	r2, r3
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	431a      	orrs	r2, r3
 800c618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4ac4      	ldr	r2, [pc, #784]	@ (800c938 <UART_SetConfig+0x344>)
 800c628:	4013      	ands	r3, r2
 800c62a:	0019      	movs	r1, r3
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	681a      	ldr	r2, [r3, #0]
 800c630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c632:	430b      	orrs	r3, r1
 800c634:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	4abf      	ldr	r2, [pc, #764]	@ (800c93c <UART_SetConfig+0x348>)
 800c63e:	4013      	ands	r3, r2
 800c640:	0018      	movs	r0, r3
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	68d9      	ldr	r1, [r3, #12]
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	0003      	movs	r3, r0
 800c64c:	430b      	orrs	r3, r1
 800c64e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4ab9      	ldr	r2, [pc, #740]	@ (800c940 <UART_SetConfig+0x34c>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d004      	beq.n	800c66a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c666:	4313      	orrs	r3, r2
 800c668:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	689b      	ldr	r3, [r3, #8]
 800c670:	4ab4      	ldr	r2, [pc, #720]	@ (800c944 <UART_SetConfig+0x350>)
 800c672:	4013      	ands	r3, r2
 800c674:	0019      	movs	r1, r3
 800c676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c678:	681a      	ldr	r2, [r3, #0]
 800c67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c67c:	430b      	orrs	r3, r1
 800c67e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c686:	220f      	movs	r2, #15
 800c688:	4393      	bics	r3, r2
 800c68a:	0018      	movs	r0, r3
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	0003      	movs	r3, r0
 800c696:	430b      	orrs	r3, r1
 800c698:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4aaa      	ldr	r2, [pc, #680]	@ (800c948 <UART_SetConfig+0x354>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d131      	bne.n	800c708 <UART_SetConfig+0x114>
 800c6a4:	4ba9      	ldr	r3, [pc, #676]	@ (800c94c <UART_SetConfig+0x358>)
 800c6a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a8:	2203      	movs	r2, #3
 800c6aa:	4013      	ands	r3, r2
 800c6ac:	2b03      	cmp	r3, #3
 800c6ae:	d01d      	beq.n	800c6ec <UART_SetConfig+0xf8>
 800c6b0:	d823      	bhi.n	800c6fa <UART_SetConfig+0x106>
 800c6b2:	2b02      	cmp	r3, #2
 800c6b4:	d00c      	beq.n	800c6d0 <UART_SetConfig+0xdc>
 800c6b6:	d820      	bhi.n	800c6fa <UART_SetConfig+0x106>
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d002      	beq.n	800c6c2 <UART_SetConfig+0xce>
 800c6bc:	2b01      	cmp	r3, #1
 800c6be:	d00e      	beq.n	800c6de <UART_SetConfig+0xea>
 800c6c0:	e01b      	b.n	800c6fa <UART_SetConfig+0x106>
 800c6c2:	231b      	movs	r3, #27
 800c6c4:	2220      	movs	r2, #32
 800c6c6:	189b      	adds	r3, r3, r2
 800c6c8:	19db      	adds	r3, r3, r7
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	701a      	strb	r2, [r3, #0]
 800c6ce:	e071      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c6d0:	231b      	movs	r3, #27
 800c6d2:	2220      	movs	r2, #32
 800c6d4:	189b      	adds	r3, r3, r2
 800c6d6:	19db      	adds	r3, r3, r7
 800c6d8:	2202      	movs	r2, #2
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	e06a      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c6de:	231b      	movs	r3, #27
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	189b      	adds	r3, r3, r2
 800c6e4:	19db      	adds	r3, r3, r7
 800c6e6:	2204      	movs	r2, #4
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	e063      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c6ec:	231b      	movs	r3, #27
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	189b      	adds	r3, r3, r2
 800c6f2:	19db      	adds	r3, r3, r7
 800c6f4:	2208      	movs	r2, #8
 800c6f6:	701a      	strb	r2, [r3, #0]
 800c6f8:	e05c      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c6fa:	231b      	movs	r3, #27
 800c6fc:	2220      	movs	r2, #32
 800c6fe:	189b      	adds	r3, r3, r2
 800c700:	19db      	adds	r3, r3, r7
 800c702:	2210      	movs	r2, #16
 800c704:	701a      	strb	r2, [r3, #0]
 800c706:	e055      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a90      	ldr	r2, [pc, #576]	@ (800c950 <UART_SetConfig+0x35c>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d106      	bne.n	800c720 <UART_SetConfig+0x12c>
 800c712:	231b      	movs	r3, #27
 800c714:	2220      	movs	r2, #32
 800c716:	189b      	adds	r3, r3, r2
 800c718:	19db      	adds	r3, r3, r7
 800c71a:	2200      	movs	r2, #0
 800c71c:	701a      	strb	r2, [r3, #0]
 800c71e:	e049      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4a86      	ldr	r2, [pc, #536]	@ (800c940 <UART_SetConfig+0x34c>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d13e      	bne.n	800c7a8 <UART_SetConfig+0x1b4>
 800c72a:	4b88      	ldr	r3, [pc, #544]	@ (800c94c <UART_SetConfig+0x358>)
 800c72c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c72e:	23c0      	movs	r3, #192	@ 0xc0
 800c730:	011b      	lsls	r3, r3, #4
 800c732:	4013      	ands	r3, r2
 800c734:	22c0      	movs	r2, #192	@ 0xc0
 800c736:	0112      	lsls	r2, r2, #4
 800c738:	4293      	cmp	r3, r2
 800c73a:	d027      	beq.n	800c78c <UART_SetConfig+0x198>
 800c73c:	22c0      	movs	r2, #192	@ 0xc0
 800c73e:	0112      	lsls	r2, r2, #4
 800c740:	4293      	cmp	r3, r2
 800c742:	d82a      	bhi.n	800c79a <UART_SetConfig+0x1a6>
 800c744:	2280      	movs	r2, #128	@ 0x80
 800c746:	0112      	lsls	r2, r2, #4
 800c748:	4293      	cmp	r3, r2
 800c74a:	d011      	beq.n	800c770 <UART_SetConfig+0x17c>
 800c74c:	2280      	movs	r2, #128	@ 0x80
 800c74e:	0112      	lsls	r2, r2, #4
 800c750:	4293      	cmp	r3, r2
 800c752:	d822      	bhi.n	800c79a <UART_SetConfig+0x1a6>
 800c754:	2b00      	cmp	r3, #0
 800c756:	d004      	beq.n	800c762 <UART_SetConfig+0x16e>
 800c758:	2280      	movs	r2, #128	@ 0x80
 800c75a:	00d2      	lsls	r2, r2, #3
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d00e      	beq.n	800c77e <UART_SetConfig+0x18a>
 800c760:	e01b      	b.n	800c79a <UART_SetConfig+0x1a6>
 800c762:	231b      	movs	r3, #27
 800c764:	2220      	movs	r2, #32
 800c766:	189b      	adds	r3, r3, r2
 800c768:	19db      	adds	r3, r3, r7
 800c76a:	2200      	movs	r2, #0
 800c76c:	701a      	strb	r2, [r3, #0]
 800c76e:	e021      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c770:	231b      	movs	r3, #27
 800c772:	2220      	movs	r2, #32
 800c774:	189b      	adds	r3, r3, r2
 800c776:	19db      	adds	r3, r3, r7
 800c778:	2202      	movs	r2, #2
 800c77a:	701a      	strb	r2, [r3, #0]
 800c77c:	e01a      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c77e:	231b      	movs	r3, #27
 800c780:	2220      	movs	r2, #32
 800c782:	189b      	adds	r3, r3, r2
 800c784:	19db      	adds	r3, r3, r7
 800c786:	2204      	movs	r2, #4
 800c788:	701a      	strb	r2, [r3, #0]
 800c78a:	e013      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c78c:	231b      	movs	r3, #27
 800c78e:	2220      	movs	r2, #32
 800c790:	189b      	adds	r3, r3, r2
 800c792:	19db      	adds	r3, r3, r7
 800c794:	2208      	movs	r2, #8
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	e00c      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c79a:	231b      	movs	r3, #27
 800c79c:	2220      	movs	r2, #32
 800c79e:	189b      	adds	r3, r3, r2
 800c7a0:	19db      	adds	r3, r3, r7
 800c7a2:	2210      	movs	r2, #16
 800c7a4:	701a      	strb	r2, [r3, #0]
 800c7a6:	e005      	b.n	800c7b4 <UART_SetConfig+0x1c0>
 800c7a8:	231b      	movs	r3, #27
 800c7aa:	2220      	movs	r2, #32
 800c7ac:	189b      	adds	r3, r3, r2
 800c7ae:	19db      	adds	r3, r3, r7
 800c7b0:	2210      	movs	r2, #16
 800c7b2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a61      	ldr	r2, [pc, #388]	@ (800c940 <UART_SetConfig+0x34c>)
 800c7ba:	4293      	cmp	r3, r2
 800c7bc:	d000      	beq.n	800c7c0 <UART_SetConfig+0x1cc>
 800c7be:	e092      	b.n	800c8e6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7c0:	231b      	movs	r3, #27
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	189b      	adds	r3, r3, r2
 800c7c6:	19db      	adds	r3, r3, r7
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b08      	cmp	r3, #8
 800c7cc:	d015      	beq.n	800c7fa <UART_SetConfig+0x206>
 800c7ce:	dc18      	bgt.n	800c802 <UART_SetConfig+0x20e>
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d00d      	beq.n	800c7f0 <UART_SetConfig+0x1fc>
 800c7d4:	dc15      	bgt.n	800c802 <UART_SetConfig+0x20e>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <UART_SetConfig+0x1ec>
 800c7da:	2b02      	cmp	r3, #2
 800c7dc:	d005      	beq.n	800c7ea <UART_SetConfig+0x1f6>
 800c7de:	e010      	b.n	800c802 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7e0:	f7fc fdd6 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 800c7e4:	0003      	movs	r3, r0
 800c7e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7e8:	e014      	b.n	800c814 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7ea:	4b5a      	ldr	r3, [pc, #360]	@ (800c954 <UART_SetConfig+0x360>)
 800c7ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7ee:	e011      	b.n	800c814 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7f0:	f7fc fd42 	bl	8009278 <HAL_RCC_GetSysClockFreq>
 800c7f4:	0003      	movs	r3, r0
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c7f8:	e00c      	b.n	800c814 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c7fa:	2380      	movs	r3, #128	@ 0x80
 800c7fc:	021b      	lsls	r3, r3, #8
 800c7fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c800:	e008      	b.n	800c814 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c802:	2300      	movs	r3, #0
 800c804:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c806:	231a      	movs	r3, #26
 800c808:	2220      	movs	r2, #32
 800c80a:	189b      	adds	r3, r3, r2
 800c80c:	19db      	adds	r3, r3, r7
 800c80e:	2201      	movs	r2, #1
 800c810:	701a      	strb	r2, [r3, #0]
        break;
 800c812:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c816:	2b00      	cmp	r3, #0
 800c818:	d100      	bne.n	800c81c <UART_SetConfig+0x228>
 800c81a:	e147      	b.n	800caac <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c820:	4b4d      	ldr	r3, [pc, #308]	@ (800c958 <UART_SetConfig+0x364>)
 800c822:	0052      	lsls	r2, r2, #1
 800c824:	5ad3      	ldrh	r3, [r2, r3]
 800c826:	0019      	movs	r1, r3
 800c828:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c82a:	f7f3 fc6b 	bl	8000104 <__udivsi3>
 800c82e:	0003      	movs	r3, r0
 800c830:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	0013      	movs	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	189b      	adds	r3, r3, r2
 800c83c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c83e:	429a      	cmp	r2, r3
 800c840:	d305      	bcc.n	800c84e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c848:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d906      	bls.n	800c85c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c84e:	231a      	movs	r3, #26
 800c850:	2220      	movs	r2, #32
 800c852:	189b      	adds	r3, r3, r2
 800c854:	19db      	adds	r3, r3, r7
 800c856:	2201      	movs	r2, #1
 800c858:	701a      	strb	r2, [r3, #0]
 800c85a:	e127      	b.n	800caac <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85e:	61bb      	str	r3, [r7, #24]
 800c860:	2300      	movs	r3, #0
 800c862:	61fb      	str	r3, [r7, #28]
 800c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c868:	4b3b      	ldr	r3, [pc, #236]	@ (800c958 <UART_SetConfig+0x364>)
 800c86a:	0052      	lsls	r2, r2, #1
 800c86c:	5ad3      	ldrh	r3, [r2, r3]
 800c86e:	613b      	str	r3, [r7, #16]
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	69b8      	ldr	r0, [r7, #24]
 800c87a:	69f9      	ldr	r1, [r7, #28]
 800c87c:	f7f3 fcce 	bl	800021c <__aeabi_uldivmod>
 800c880:	0002      	movs	r2, r0
 800c882:	000b      	movs	r3, r1
 800c884:	0e11      	lsrs	r1, r2, #24
 800c886:	021d      	lsls	r5, r3, #8
 800c888:	430d      	orrs	r5, r1
 800c88a:	0214      	lsls	r4, r2, #8
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	085b      	lsrs	r3, r3, #1
 800c892:	60bb      	str	r3, [r7, #8]
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	68b8      	ldr	r0, [r7, #8]
 800c89a:	68f9      	ldr	r1, [r7, #12]
 800c89c:	1900      	adds	r0, r0, r4
 800c89e:	4169      	adcs	r1, r5
 800c8a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a2:	685b      	ldr	r3, [r3, #4]
 800c8a4:	603b      	str	r3, [r7, #0]
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	607b      	str	r3, [r7, #4]
 800c8aa:	683a      	ldr	r2, [r7, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f7f3 fcb5 	bl	800021c <__aeabi_uldivmod>
 800c8b2:	0002      	movs	r2, r0
 800c8b4:	000b      	movs	r3, r1
 800c8b6:	0013      	movs	r3, r2
 800c8b8:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8bc:	23c0      	movs	r3, #192	@ 0xc0
 800c8be:	009b      	lsls	r3, r3, #2
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d309      	bcc.n	800c8d8 <UART_SetConfig+0x2e4>
 800c8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c6:	2380      	movs	r3, #128	@ 0x80
 800c8c8:	035b      	lsls	r3, r3, #13
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d204      	bcs.n	800c8d8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8d4:	60da      	str	r2, [r3, #12]
 800c8d6:	e0e9      	b.n	800caac <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c8d8:	231a      	movs	r3, #26
 800c8da:	2220      	movs	r2, #32
 800c8dc:	189b      	adds	r3, r3, r2
 800c8de:	19db      	adds	r3, r3, r7
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	701a      	strb	r2, [r3, #0]
 800c8e4:	e0e2      	b.n	800caac <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e8:	69da      	ldr	r2, [r3, #28]
 800c8ea:	2380      	movs	r3, #128	@ 0x80
 800c8ec:	021b      	lsls	r3, r3, #8
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d000      	beq.n	800c8f4 <UART_SetConfig+0x300>
 800c8f2:	e083      	b.n	800c9fc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c8f4:	231b      	movs	r3, #27
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	189b      	adds	r3, r3, r2
 800c8fa:	19db      	adds	r3, r3, r7
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	d015      	beq.n	800c92e <UART_SetConfig+0x33a>
 800c902:	dc2b      	bgt.n	800c95c <UART_SetConfig+0x368>
 800c904:	2b04      	cmp	r3, #4
 800c906:	d00d      	beq.n	800c924 <UART_SetConfig+0x330>
 800c908:	dc28      	bgt.n	800c95c <UART_SetConfig+0x368>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d002      	beq.n	800c914 <UART_SetConfig+0x320>
 800c90e:	2b02      	cmp	r3, #2
 800c910:	d005      	beq.n	800c91e <UART_SetConfig+0x32a>
 800c912:	e023      	b.n	800c95c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c914:	f7fc fd3c 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 800c918:	0003      	movs	r3, r0
 800c91a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c91c:	e027      	b.n	800c96e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c91e:	4b0d      	ldr	r3, [pc, #52]	@ (800c954 <UART_SetConfig+0x360>)
 800c920:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c922:	e024      	b.n	800c96e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c924:	f7fc fca8 	bl	8009278 <HAL_RCC_GetSysClockFreq>
 800c928:	0003      	movs	r3, r0
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c92c:	e01f      	b.n	800c96e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c92e:	2380      	movs	r3, #128	@ 0x80
 800c930:	021b      	lsls	r3, r3, #8
 800c932:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c934:	e01b      	b.n	800c96e <UART_SetConfig+0x37a>
 800c936:	46c0      	nop			@ (mov r8, r8)
 800c938:	cfff69f3 	.word	0xcfff69f3
 800c93c:	ffffcfff 	.word	0xffffcfff
 800c940:	40008000 	.word	0x40008000
 800c944:	11fff4ff 	.word	0x11fff4ff
 800c948:	40013800 	.word	0x40013800
 800c94c:	40021000 	.word	0x40021000
 800c950:	40004400 	.word	0x40004400
 800c954:	00f42400 	.word	0x00f42400
 800c958:	0800de84 	.word	0x0800de84
      default:
        pclk = 0U;
 800c95c:	2300      	movs	r3, #0
 800c95e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c960:	231a      	movs	r3, #26
 800c962:	2220      	movs	r2, #32
 800c964:	189b      	adds	r3, r3, r2
 800c966:	19db      	adds	r3, r3, r7
 800c968:	2201      	movs	r2, #1
 800c96a:	701a      	strb	r2, [r3, #0]
        break;
 800c96c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c970:	2b00      	cmp	r3, #0
 800c972:	d100      	bne.n	800c976 <UART_SetConfig+0x382>
 800c974:	e09a      	b.n	800caac <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c97a:	4b58      	ldr	r3, [pc, #352]	@ (800cadc <UART_SetConfig+0x4e8>)
 800c97c:	0052      	lsls	r2, r2, #1
 800c97e:	5ad3      	ldrh	r3, [r2, r3]
 800c980:	0019      	movs	r1, r3
 800c982:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c984:	f7f3 fbbe 	bl	8000104 <__udivsi3>
 800c988:	0003      	movs	r3, r0
 800c98a:	005a      	lsls	r2, r3, #1
 800c98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	085b      	lsrs	r3, r3, #1
 800c992:	18d2      	adds	r2, r2, r3
 800c994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c996:	685b      	ldr	r3, [r3, #4]
 800c998:	0019      	movs	r1, r3
 800c99a:	0010      	movs	r0, r2
 800c99c:	f7f3 fbb2 	bl	8000104 <__udivsi3>
 800c9a0:	0003      	movs	r3, r0
 800c9a2:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a6:	2b0f      	cmp	r3, #15
 800c9a8:	d921      	bls.n	800c9ee <UART_SetConfig+0x3fa>
 800c9aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c9ac:	2380      	movs	r3, #128	@ 0x80
 800c9ae:	025b      	lsls	r3, r3, #9
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d21c      	bcs.n	800c9ee <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	200e      	movs	r0, #14
 800c9ba:	2420      	movs	r4, #32
 800c9bc:	1903      	adds	r3, r0, r4
 800c9be:	19db      	adds	r3, r3, r7
 800c9c0:	210f      	movs	r1, #15
 800c9c2:	438a      	bics	r2, r1
 800c9c4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9c8:	085b      	lsrs	r3, r3, #1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	2207      	movs	r2, #7
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	b299      	uxth	r1, r3
 800c9d2:	1903      	adds	r3, r0, r4
 800c9d4:	19db      	adds	r3, r3, r7
 800c9d6:	1902      	adds	r2, r0, r4
 800c9d8:	19d2      	adds	r2, r2, r7
 800c9da:	8812      	ldrh	r2, [r2, #0]
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	1902      	adds	r2, r0, r4
 800c9e6:	19d2      	adds	r2, r2, r7
 800c9e8:	8812      	ldrh	r2, [r2, #0]
 800c9ea:	60da      	str	r2, [r3, #12]
 800c9ec:	e05e      	b.n	800caac <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c9ee:	231a      	movs	r3, #26
 800c9f0:	2220      	movs	r2, #32
 800c9f2:	189b      	adds	r3, r3, r2
 800c9f4:	19db      	adds	r3, r3, r7
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	701a      	strb	r2, [r3, #0]
 800c9fa:	e057      	b.n	800caac <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9fc:	231b      	movs	r3, #27
 800c9fe:	2220      	movs	r2, #32
 800ca00:	189b      	adds	r3, r3, r2
 800ca02:	19db      	adds	r3, r3, r7
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b08      	cmp	r3, #8
 800ca08:	d015      	beq.n	800ca36 <UART_SetConfig+0x442>
 800ca0a:	dc18      	bgt.n	800ca3e <UART_SetConfig+0x44a>
 800ca0c:	2b04      	cmp	r3, #4
 800ca0e:	d00d      	beq.n	800ca2c <UART_SetConfig+0x438>
 800ca10:	dc15      	bgt.n	800ca3e <UART_SetConfig+0x44a>
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d002      	beq.n	800ca1c <UART_SetConfig+0x428>
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d005      	beq.n	800ca26 <UART_SetConfig+0x432>
 800ca1a:	e010      	b.n	800ca3e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca1c:	f7fc fcb8 	bl	8009390 <HAL_RCC_GetPCLK1Freq>
 800ca20:	0003      	movs	r3, r0
 800ca22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca24:	e014      	b.n	800ca50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca26:	4b2e      	ldr	r3, [pc, #184]	@ (800cae0 <UART_SetConfig+0x4ec>)
 800ca28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca2a:	e011      	b.n	800ca50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca2c:	f7fc fc24 	bl	8009278 <HAL_RCC_GetSysClockFreq>
 800ca30:	0003      	movs	r3, r0
 800ca32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca34:	e00c      	b.n	800ca50 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca36:	2380      	movs	r3, #128	@ 0x80
 800ca38:	021b      	lsls	r3, r3, #8
 800ca3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ca3c:	e008      	b.n	800ca50 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800ca42:	231a      	movs	r3, #26
 800ca44:	2220      	movs	r2, #32
 800ca46:	189b      	adds	r3, r3, r2
 800ca48:	19db      	adds	r3, r3, r7
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	701a      	strb	r2, [r3, #0]
        break;
 800ca4e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800ca50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d02a      	beq.n	800caac <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca5a:	4b20      	ldr	r3, [pc, #128]	@ (800cadc <UART_SetConfig+0x4e8>)
 800ca5c:	0052      	lsls	r2, r2, #1
 800ca5e:	5ad3      	ldrh	r3, [r2, r3]
 800ca60:	0019      	movs	r1, r3
 800ca62:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800ca64:	f7f3 fb4e 	bl	8000104 <__udivsi3>
 800ca68:	0003      	movs	r3, r0
 800ca6a:	001a      	movs	r2, r3
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	085b      	lsrs	r3, r3, #1
 800ca72:	18d2      	adds	r2, r2, r3
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	0019      	movs	r1, r3
 800ca7a:	0010      	movs	r0, r2
 800ca7c:	f7f3 fb42 	bl	8000104 <__udivsi3>
 800ca80:	0003      	movs	r3, r0
 800ca82:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca86:	2b0f      	cmp	r3, #15
 800ca88:	d90a      	bls.n	800caa0 <UART_SetConfig+0x4ac>
 800ca8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca8c:	2380      	movs	r3, #128	@ 0x80
 800ca8e:	025b      	lsls	r3, r3, #9
 800ca90:	429a      	cmp	r2, r3
 800ca92:	d205      	bcs.n	800caa0 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	60da      	str	r2, [r3, #12]
 800ca9e:	e005      	b.n	800caac <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800caa0:	231a      	movs	r3, #26
 800caa2:	2220      	movs	r2, #32
 800caa4:	189b      	adds	r3, r3, r2
 800caa6:	19db      	adds	r3, r3, r7
 800caa8:	2201      	movs	r2, #1
 800caaa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	226a      	movs	r2, #106	@ 0x6a
 800cab0:	2101      	movs	r1, #1
 800cab2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800cab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab6:	2268      	movs	r2, #104	@ 0x68
 800cab8:	2101      	movs	r1, #1
 800caba:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	2200      	movs	r2, #0
 800cac0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	2200      	movs	r2, #0
 800cac6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cac8:	231a      	movs	r3, #26
 800caca:	2220      	movs	r2, #32
 800cacc:	189b      	adds	r3, r3, r2
 800cace:	19db      	adds	r3, r3, r7
 800cad0:	781b      	ldrb	r3, [r3, #0]
}
 800cad2:	0018      	movs	r0, r3
 800cad4:	46bd      	mov	sp, r7
 800cad6:	b010      	add	sp, #64	@ 0x40
 800cad8:	bdb0      	pop	{r4, r5, r7, pc}
 800cada:	46c0      	nop			@ (mov r8, r8)
 800cadc:	0800de84 	.word	0x0800de84
 800cae0:	00f42400 	.word	0x00f42400

0800cae4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf0:	2208      	movs	r2, #8
 800caf2:	4013      	ands	r3, r2
 800caf4:	d00b      	beq.n	800cb0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	4a4a      	ldr	r2, [pc, #296]	@ (800cc28 <UART_AdvFeatureConfig+0x144>)
 800cafe:	4013      	ands	r3, r2
 800cb00:	0019      	movs	r1, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	430a      	orrs	r2, r1
 800cb0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb12:	2201      	movs	r2, #1
 800cb14:	4013      	ands	r3, r2
 800cb16:	d00b      	beq.n	800cb30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	4a43      	ldr	r2, [pc, #268]	@ (800cc2c <UART_AdvFeatureConfig+0x148>)
 800cb20:	4013      	ands	r3, r2
 800cb22:	0019      	movs	r1, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	430a      	orrs	r2, r1
 800cb2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb34:	2202      	movs	r2, #2
 800cb36:	4013      	ands	r3, r2
 800cb38:	d00b      	beq.n	800cb52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	4a3b      	ldr	r2, [pc, #236]	@ (800cc30 <UART_AdvFeatureConfig+0x14c>)
 800cb42:	4013      	ands	r3, r2
 800cb44:	0019      	movs	r1, r3
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb56:	2204      	movs	r2, #4
 800cb58:	4013      	ands	r3, r2
 800cb5a:	d00b      	beq.n	800cb74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	4a34      	ldr	r2, [pc, #208]	@ (800cc34 <UART_AdvFeatureConfig+0x150>)
 800cb64:	4013      	ands	r3, r2
 800cb66:	0019      	movs	r1, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	430a      	orrs	r2, r1
 800cb72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb78:	2210      	movs	r2, #16
 800cb7a:	4013      	ands	r3, r2
 800cb7c:	d00b      	beq.n	800cb96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	4a2c      	ldr	r2, [pc, #176]	@ (800cc38 <UART_AdvFeatureConfig+0x154>)
 800cb86:	4013      	ands	r3, r2
 800cb88:	0019      	movs	r1, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb9a:	2220      	movs	r2, #32
 800cb9c:	4013      	ands	r3, r2
 800cb9e:	d00b      	beq.n	800cbb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	4a25      	ldr	r2, [pc, #148]	@ (800cc3c <UART_AdvFeatureConfig+0x158>)
 800cba8:	4013      	ands	r3, r2
 800cbaa:	0019      	movs	r1, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbbc:	2240      	movs	r2, #64	@ 0x40
 800cbbe:	4013      	ands	r3, r2
 800cbc0:	d01d      	beq.n	800cbfe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	4a1d      	ldr	r2, [pc, #116]	@ (800cc40 <UART_AdvFeatureConfig+0x15c>)
 800cbca:	4013      	ands	r3, r2
 800cbcc:	0019      	movs	r1, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbde:	2380      	movs	r3, #128	@ 0x80
 800cbe0:	035b      	lsls	r3, r3, #13
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d10b      	bne.n	800cbfe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	4a15      	ldr	r2, [pc, #84]	@ (800cc44 <UART_AdvFeatureConfig+0x160>)
 800cbee:	4013      	ands	r3, r2
 800cbf0:	0019      	movs	r1, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc02:	2280      	movs	r2, #128	@ 0x80
 800cc04:	4013      	ands	r3, r2
 800cc06:	d00b      	beq.n	800cc20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4a0e      	ldr	r2, [pc, #56]	@ (800cc48 <UART_AdvFeatureConfig+0x164>)
 800cc10:	4013      	ands	r3, r2
 800cc12:	0019      	movs	r1, r3
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	430a      	orrs	r2, r1
 800cc1e:	605a      	str	r2, [r3, #4]
  }
}
 800cc20:	46c0      	nop			@ (mov r8, r8)
 800cc22:	46bd      	mov	sp, r7
 800cc24:	b002      	add	sp, #8
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	ffff7fff 	.word	0xffff7fff
 800cc2c:	fffdffff 	.word	0xfffdffff
 800cc30:	fffeffff 	.word	0xfffeffff
 800cc34:	fffbffff 	.word	0xfffbffff
 800cc38:	ffffefff 	.word	0xffffefff
 800cc3c:	ffffdfff 	.word	0xffffdfff
 800cc40:	ffefffff 	.word	0xffefffff
 800cc44:	ff9fffff 	.word	0xff9fffff
 800cc48:	fff7ffff 	.word	0xfff7ffff

0800cc4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b092      	sub	sp, #72	@ 0x48
 800cc50:	af02      	add	r7, sp, #8
 800cc52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2290      	movs	r2, #144	@ 0x90
 800cc58:	2100      	movs	r1, #0
 800cc5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc5c:	f7f9 fa66 	bl	800612c <HAL_GetTick>
 800cc60:	0003      	movs	r3, r0
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	4013      	ands	r3, r2
 800cc6e:	2b08      	cmp	r3, #8
 800cc70:	d12d      	bne.n	800ccce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc74:	2280      	movs	r2, #128	@ 0x80
 800cc76:	0391      	lsls	r1, r2, #14
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	4a47      	ldr	r2, [pc, #284]	@ (800cd98 <UART_CheckIdleState+0x14c>)
 800cc7c:	9200      	str	r2, [sp, #0]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f000 f88e 	bl	800cda0 <UART_WaitOnFlagUntilTimeout>
 800cc84:	1e03      	subs	r3, r0, #0
 800cc86:	d022      	beq.n	800ccce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc88:	f3ef 8310 	mrs	r3, PRIMASK
 800cc8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800cc8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc90:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc92:	2301      	movs	r3, #1
 800cc94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc98:	f383 8810 	msr	PRIMASK, r3
}
 800cc9c:	46c0      	nop			@ (mov r8, r8)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	2180      	movs	r1, #128	@ 0x80
 800ccaa:	438a      	bics	r2, r1
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb4:	f383 8810 	msr	PRIMASK, r3
}
 800ccb8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	2288      	movs	r2, #136	@ 0x88
 800ccbe:	2120      	movs	r1, #32
 800ccc0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2284      	movs	r2, #132	@ 0x84
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccca:	2303      	movs	r3, #3
 800cccc:	e060      	b.n	800cd90 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	2204      	movs	r2, #4
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	2b04      	cmp	r3, #4
 800ccda:	d146      	bne.n	800cd6a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccde:	2280      	movs	r2, #128	@ 0x80
 800cce0:	03d1      	lsls	r1, r2, #15
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	4a2c      	ldr	r2, [pc, #176]	@ (800cd98 <UART_CheckIdleState+0x14c>)
 800cce6:	9200      	str	r2, [sp, #0]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f000 f859 	bl	800cda0 <UART_WaitOnFlagUntilTimeout>
 800ccee:	1e03      	subs	r3, r0, #0
 800ccf0:	d03b      	beq.n	800cd6a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccf6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccf8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccfa:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	f383 8810 	msr	PRIMASK, r3
}
 800cd06:	46c0      	nop			@ (mov r8, r8)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	4922      	ldr	r1, [pc, #136]	@ (800cd9c <UART_CheckIdleState+0x150>)
 800cd14:	400a      	ands	r2, r1
 800cd16:	601a      	str	r2, [r3, #0]
 800cd18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f383 8810 	msr	PRIMASK, r3
}
 800cd22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd24:	f3ef 8310 	mrs	r3, PRIMASK
 800cd28:	61bb      	str	r3, [r7, #24]
  return(result);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd2c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd2e:	2301      	movs	r3, #1
 800cd30:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd32:	69fb      	ldr	r3, [r7, #28]
 800cd34:	f383 8810 	msr	PRIMASK, r3
}
 800cd38:	46c0      	nop			@ (mov r8, r8)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	689a      	ldr	r2, [r3, #8]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	2101      	movs	r1, #1
 800cd46:	438a      	bics	r2, r1
 800cd48:	609a      	str	r2, [r3, #8]
 800cd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd4e:	6a3b      	ldr	r3, [r7, #32]
 800cd50:	f383 8810 	msr	PRIMASK, r3
}
 800cd54:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	228c      	movs	r2, #140	@ 0x8c
 800cd5a:	2120      	movs	r1, #32
 800cd5c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2284      	movs	r2, #132	@ 0x84
 800cd62:	2100      	movs	r1, #0
 800cd64:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd66:	2303      	movs	r3, #3
 800cd68:	e012      	b.n	800cd90 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2288      	movs	r2, #136	@ 0x88
 800cd6e:	2120      	movs	r1, #32
 800cd70:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	228c      	movs	r2, #140	@ 0x8c
 800cd76:	2120      	movs	r1, #32
 800cd78:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2284      	movs	r2, #132	@ 0x84
 800cd8a:	2100      	movs	r1, #0
 800cd8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd8e:	2300      	movs	r3, #0
}
 800cd90:	0018      	movs	r0, r3
 800cd92:	46bd      	mov	sp, r7
 800cd94:	b010      	add	sp, #64	@ 0x40
 800cd96:	bd80      	pop	{r7, pc}
 800cd98:	01ffffff 	.word	0x01ffffff
 800cd9c:	fffffedf 	.word	0xfffffedf

0800cda0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	1dfb      	adds	r3, r7, #7
 800cdae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdb0:	e051      	b.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	3301      	adds	r3, #1
 800cdb6:	d04e      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdb8:	f7f9 f9b8 	bl	800612c <HAL_GetTick>
 800cdbc:	0002      	movs	r2, r0
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	69ba      	ldr	r2, [r7, #24]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d302      	bcc.n	800cdce <UART_WaitOnFlagUntilTimeout+0x2e>
 800cdc8:	69bb      	ldr	r3, [r7, #24]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d101      	bne.n	800cdd2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800cdce:	2303      	movs	r3, #3
 800cdd0:	e051      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2204      	movs	r2, #4
 800cdda:	4013      	ands	r3, r2
 800cddc:	d03b      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b80      	cmp	r3, #128	@ 0x80
 800cde2:	d038      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	2b40      	cmp	r3, #64	@ 0x40
 800cde8:	d035      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	69db      	ldr	r3, [r3, #28]
 800cdf0:	2208      	movs	r2, #8
 800cdf2:	4013      	ands	r3, r2
 800cdf4:	2b08      	cmp	r3, #8
 800cdf6:	d111      	bne.n	800ce1c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2208      	movs	r2, #8
 800cdfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	0018      	movs	r0, r3
 800ce04:	f000 f922 	bl	800d04c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	2290      	movs	r2, #144	@ 0x90
 800ce0c:	2108      	movs	r1, #8
 800ce0e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2284      	movs	r2, #132	@ 0x84
 800ce14:	2100      	movs	r1, #0
 800ce16:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e02c      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	69da      	ldr	r2, [r3, #28]
 800ce22:	2380      	movs	r3, #128	@ 0x80
 800ce24:	011b      	lsls	r3, r3, #4
 800ce26:	401a      	ands	r2, r3
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	011b      	lsls	r3, r3, #4
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d112      	bne.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	2280      	movs	r2, #128	@ 0x80
 800ce36:	0112      	lsls	r2, r2, #4
 800ce38:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	f000 f905 	bl	800d04c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2290      	movs	r2, #144	@ 0x90
 800ce46:	2120      	movs	r1, #32
 800ce48:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2284      	movs	r2, #132	@ 0x84
 800ce4e:	2100      	movs	r1, #0
 800ce50:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e00f      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	69db      	ldr	r3, [r3, #28]
 800ce5c:	68ba      	ldr	r2, [r7, #8]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	425a      	negs	r2, r3
 800ce66:	4153      	adcs	r3, r2
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	001a      	movs	r2, r3
 800ce6c:	1dfb      	adds	r3, r7, #7
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d09e      	beq.n	800cdb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	0018      	movs	r0, r3
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	b004      	add	sp, #16
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b090      	sub	sp, #64	@ 0x40
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	1dbb      	adds	r3, r7, #6
 800ce8c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	1dba      	adds	r2, r7, #6
 800ce98:	215c      	movs	r1, #92	@ 0x5c
 800ce9a:	8812      	ldrh	r2, [r2, #0]
 800ce9c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2290      	movs	r2, #144	@ 0x90
 800cea2:	2100      	movs	r1, #0
 800cea4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	228c      	movs	r2, #140	@ 0x8c
 800ceaa:	2122      	movs	r1, #34	@ 0x22
 800ceac:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	2280      	movs	r2, #128	@ 0x80
 800ceb2:	589b      	ldr	r3, [r3, r2]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d02d      	beq.n	800cf14 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2280      	movs	r2, #128	@ 0x80
 800cebc:	589b      	ldr	r3, [r3, r2]
 800cebe:	4a40      	ldr	r2, [pc, #256]	@ (800cfc0 <UART_Start_Receive_DMA+0x140>)
 800cec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2280      	movs	r2, #128	@ 0x80
 800cec6:	589b      	ldr	r3, [r3, r2]
 800cec8:	4a3e      	ldr	r2, [pc, #248]	@ (800cfc4 <UART_Start_Receive_DMA+0x144>)
 800ceca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2280      	movs	r2, #128	@ 0x80
 800ced0:	589b      	ldr	r3, [r3, r2]
 800ced2:	4a3d      	ldr	r2, [pc, #244]	@ (800cfc8 <UART_Start_Receive_DMA+0x148>)
 800ced4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2280      	movs	r2, #128	@ 0x80
 800ceda:	589b      	ldr	r3, [r3, r2]
 800cedc:	2200      	movs	r2, #0
 800cede:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2280      	movs	r2, #128	@ 0x80
 800cee4:	5898      	ldr	r0, [r3, r2]
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3324      	adds	r3, #36	@ 0x24
 800ceec:	0019      	movs	r1, r3
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cef2:	001a      	movs	r2, r3
 800cef4:	1dbb      	adds	r3, r7, #6
 800cef6:	881b      	ldrh	r3, [r3, #0]
 800cef8:	f7fa fce6 	bl	80078c8 <HAL_DMA_Start_IT>
 800cefc:	1e03      	subs	r3, r0, #0
 800cefe:	d009      	beq.n	800cf14 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2290      	movs	r2, #144	@ 0x90
 800cf04:	2110      	movs	r1, #16
 800cf06:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	228c      	movs	r2, #140	@ 0x8c
 800cf0c:	2120      	movs	r1, #32
 800cf0e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800cf10:	2301      	movs	r3, #1
 800cf12:	e050      	b.n	800cfb6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	691b      	ldr	r3, [r3, #16]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d019      	beq.n	800cf50 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf1c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf20:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800cf22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf26:	2301      	movs	r3, #1
 800cf28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf2c:	f383 8810 	msr	PRIMASK, r3
}
 800cf30:	46c0      	nop			@ (mov r8, r8)
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2180      	movs	r1, #128	@ 0x80
 800cf3e:	0049      	lsls	r1, r1, #1
 800cf40:	430a      	orrs	r2, r1
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf46:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	f383 8810 	msr	PRIMASK, r3
}
 800cf4e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf50:	f3ef 8310 	mrs	r3, PRIMASK
 800cf54:	613b      	str	r3, [r7, #16]
  return(result);
 800cf56:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf58:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f383 8810 	msr	PRIMASK, r3
}
 800cf64:	46c0      	nop			@ (mov r8, r8)
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	689a      	ldr	r2, [r3, #8]
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2101      	movs	r1, #1
 800cf72:	430a      	orrs	r2, r1
 800cf74:	609a      	str	r2, [r3, #8]
 800cf76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf78:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	f383 8810 	msr	PRIMASK, r3
}
 800cf80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf82:	f3ef 8310 	mrs	r3, PRIMASK
 800cf86:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf88:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf90:	6a3b      	ldr	r3, [r7, #32]
 800cf92:	f383 8810 	msr	PRIMASK, r3
}
 800cf96:	46c0      	nop			@ (mov r8, r8)
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	689a      	ldr	r2, [r3, #8]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	2140      	movs	r1, #64	@ 0x40
 800cfa4:	430a      	orrs	r2, r1
 800cfa6:	609a      	str	r2, [r3, #8]
 800cfa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfaa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfae:	f383 8810 	msr	PRIMASK, r3
}
 800cfb2:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800cfb4:	2300      	movs	r3, #0
}
 800cfb6:	0018      	movs	r0, r3
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	b010      	add	sp, #64	@ 0x40
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	46c0      	nop			@ (mov r8, r8)
 800cfc0:	0800d119 	.word	0x0800d119
 800cfc4:	0800d24d 	.word	0x0800d24d
 800cfc8:	0800d295 	.word	0x0800d295

0800cfcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08a      	sub	sp, #40	@ 0x28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfd4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfd8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cfda:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cfdc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfde:	2301      	movs	r3, #1
 800cfe0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f383 8810 	msr	PRIMASK, r3
}
 800cfe8:	46c0      	nop			@ (mov r8, r8)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	681a      	ldr	r2, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	21c0      	movs	r1, #192	@ 0xc0
 800cff6:	438a      	bics	r2, r1
 800cff8:	601a      	str	r2, [r3, #0]
 800cffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cffc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f383 8810 	msr	PRIMASK, r3
}
 800d004:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d006:	f3ef 8310 	mrs	r3, PRIMASK
 800d00a:	617b      	str	r3, [r7, #20]
  return(result);
 800d00c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d00e:	623b      	str	r3, [r7, #32]
 800d010:	2301      	movs	r3, #1
 800d012:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	f383 8810 	msr	PRIMASK, r3
}
 800d01a:	46c0      	nop			@ (mov r8, r8)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	689a      	ldr	r2, [r3, #8]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4908      	ldr	r1, [pc, #32]	@ (800d048 <UART_EndTxTransfer+0x7c>)
 800d028:	400a      	ands	r2, r1
 800d02a:	609a      	str	r2, [r3, #8]
 800d02c:	6a3b      	ldr	r3, [r7, #32]
 800d02e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d030:	69fb      	ldr	r3, [r7, #28]
 800d032:	f383 8810 	msr	PRIMASK, r3
}
 800d036:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2288      	movs	r2, #136	@ 0x88
 800d03c:	2120      	movs	r1, #32
 800d03e:	5099      	str	r1, [r3, r2]
}
 800d040:	46c0      	nop			@ (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	b00a      	add	sp, #40	@ 0x28
 800d046:	bd80      	pop	{r7, pc}
 800d048:	ff7fffff 	.word	0xff7fffff

0800d04c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b08e      	sub	sp, #56	@ 0x38
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d054:	f3ef 8310 	mrs	r3, PRIMASK
 800d058:	617b      	str	r3, [r7, #20]
  return(result);
 800d05a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d05c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d05e:	2301      	movs	r3, #1
 800d060:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	f383 8810 	msr	PRIMASK, r3
}
 800d068:	46c0      	nop			@ (mov r8, r8)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4926      	ldr	r1, [pc, #152]	@ (800d110 <UART_EndRxTransfer+0xc4>)
 800d076:	400a      	ands	r2, r1
 800d078:	601a      	str	r2, [r3, #0]
 800d07a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d07c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	f383 8810 	msr	PRIMASK, r3
}
 800d084:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d086:	f3ef 8310 	mrs	r3, PRIMASK
 800d08a:	623b      	str	r3, [r7, #32]
  return(result);
 800d08c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d08e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d090:	2301      	movs	r3, #1
 800d092:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d096:	f383 8810 	msr	PRIMASK, r3
}
 800d09a:	46c0      	nop			@ (mov r8, r8)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	689a      	ldr	r2, [r3, #8]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	491b      	ldr	r1, [pc, #108]	@ (800d114 <UART_EndRxTransfer+0xc8>)
 800d0a8:	400a      	ands	r2, r1
 800d0aa:	609a      	str	r2, [r3, #8]
 800d0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b2:	f383 8810 	msr	PRIMASK, r3
}
 800d0b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d118      	bne.n	800d0f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0c0:	f3ef 8310 	mrs	r3, PRIMASK
 800d0c4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f383 8810 	msr	PRIMASK, r3
}
 800d0d4:	46c0      	nop			@ (mov r8, r8)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2110      	movs	r1, #16
 800d0e2:	438a      	bics	r2, r1
 800d0e4:	601a      	str	r2, [r3, #0]
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	f383 8810 	msr	PRIMASK, r3
}
 800d0f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	228c      	movs	r2, #140	@ 0x8c
 800d0f6:	2120      	movs	r1, #32
 800d0f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d106:	46c0      	nop			@ (mov r8, r8)
 800d108:	46bd      	mov	sp, r7
 800d10a:	b00e      	add	sp, #56	@ 0x38
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	46c0      	nop			@ (mov r8, r8)
 800d110:	fffffedf 	.word	0xfffffedf
 800d114:	effffffe 	.word	0xeffffffe

0800d118 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b094      	sub	sp, #80	@ 0x50
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d124:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	2220      	movs	r2, #32
 800d12e:	4013      	ands	r3, r2
 800d130:	d16f      	bne.n	800d212 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800d132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d134:	225e      	movs	r2, #94	@ 0x5e
 800d136:	2100      	movs	r1, #0
 800d138:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d13a:	f3ef 8310 	mrs	r3, PRIMASK
 800d13e:	61bb      	str	r3, [r7, #24]
  return(result);
 800d140:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d142:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d144:	2301      	movs	r3, #1
 800d146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d148:	69fb      	ldr	r3, [r7, #28]
 800d14a:	f383 8810 	msr	PRIMASK, r3
}
 800d14e:	46c0      	nop			@ (mov r8, r8)
 800d150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	681a      	ldr	r2, [r3, #0]
 800d156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	493b      	ldr	r1, [pc, #236]	@ (800d248 <UART_DMAReceiveCplt+0x130>)
 800d15c:	400a      	ands	r2, r1
 800d15e:	601a      	str	r2, [r3, #0]
 800d160:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d162:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d164:	6a3b      	ldr	r3, [r7, #32]
 800d166:	f383 8810 	msr	PRIMASK, r3
}
 800d16a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16c:	f3ef 8310 	mrs	r3, PRIMASK
 800d170:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d174:	647b      	str	r3, [r7, #68]	@ 0x44
 800d176:	2301      	movs	r3, #1
 800d178:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d17c:	f383 8810 	msr	PRIMASK, r3
}
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	2101      	movs	r1, #1
 800d18e:	438a      	bics	r2, r1
 800d190:	609a      	str	r2, [r3, #8]
 800d192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d198:	f383 8810 	msr	PRIMASK, r3
}
 800d19c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d19e:	f3ef 8310 	mrs	r3, PRIMASK
 800d1a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ae:	f383 8810 	msr	PRIMASK, r3
}
 800d1b2:	46c0      	nop			@ (mov r8, r8)
 800d1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	689a      	ldr	r2, [r3, #8]
 800d1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	2140      	movs	r1, #64	@ 0x40
 800d1c0:	438a      	bics	r2, r1
 800d1c2:	609a      	str	r2, [r3, #8]
 800d1c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ca:	f383 8810 	msr	PRIMASK, r3
}
 800d1ce:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d1d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1d2:	228c      	movs	r2, #140	@ 0x8c
 800d1d4:	2120      	movs	r1, #32
 800d1d6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d118      	bne.n	800d212 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d1e4:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	f383 8810 	msr	PRIMASK, r3
}
 800d1f4:	46c0      	nop			@ (mov r8, r8)
 800d1f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2110      	movs	r1, #16
 800d202:	438a      	bics	r2, r1
 800d204:	601a      	str	r2, [r3, #0]
 800d206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d208:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	f383 8810 	msr	PRIMASK, r3
}
 800d210:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d214:	2200      	movs	r2, #0
 800d216:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	d109      	bne.n	800d234 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d222:	22c0      	movs	r2, #192	@ 0xc0
 800d224:	589b      	ldr	r3, [r3, r2]
 800d226:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d228:	215c      	movs	r1, #92	@ 0x5c
 800d22a:	5a51      	ldrh	r1, [r2, r1]
 800d22c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d22e:	0010      	movs	r0, r2
 800d230:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d232:	e005      	b.n	800d240 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800d234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d236:	22a0      	movs	r2, #160	@ 0xa0
 800d238:	589b      	ldr	r3, [r3, r2]
 800d23a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d23c:	0010      	movs	r0, r2
 800d23e:	4798      	blx	r3
}
 800d240:	46c0      	nop			@ (mov r8, r8)
 800d242:	46bd      	mov	sp, r7
 800d244:	b014      	add	sp, #80	@ 0x50
 800d246:	bd80      	pop	{r7, pc}
 800d248:	fffffeff 	.word	0xfffffeff

0800d24c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d258:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2201      	movs	r2, #1
 800d25e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d264:	2b01      	cmp	r3, #1
 800d266:	d10b      	bne.n	800d280 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	22c0      	movs	r2, #192	@ 0xc0
 800d26c:	589b      	ldr	r3, [r3, r2]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	215c      	movs	r1, #92	@ 0x5c
 800d272:	5a52      	ldrh	r2, [r2, r1]
 800d274:	0852      	lsrs	r2, r2, #1
 800d276:	b291      	uxth	r1, r2
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	0010      	movs	r0, r2
 800d27c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d27e:	e005      	b.n	800d28c <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	229c      	movs	r2, #156	@ 0x9c
 800d284:	589b      	ldr	r3, [r3, r2]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	0010      	movs	r0, r2
 800d28a:	4798      	blx	r3
}
 800d28c:	46c0      	nop			@ (mov r8, r8)
 800d28e:	46bd      	mov	sp, r7
 800d290:	b004      	add	sp, #16
 800d292:	bd80      	pop	{r7, pc}

0800d294 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d294:	b580      	push	{r7, lr}
 800d296:	b086      	sub	sp, #24
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	2288      	movs	r2, #136	@ 0x88
 800d2a6:	589b      	ldr	r3, [r3, r2]
 800d2a8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	228c      	movs	r2, #140	@ 0x8c
 800d2ae:	589b      	ldr	r3, [r3, r2]
 800d2b0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	2280      	movs	r2, #128	@ 0x80
 800d2ba:	4013      	ands	r3, r2
 800d2bc:	2b80      	cmp	r3, #128	@ 0x80
 800d2be:	d10a      	bne.n	800d2d6 <UART_DMAError+0x42>
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	2b21      	cmp	r3, #33	@ 0x21
 800d2c4:	d107      	bne.n	800d2d6 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2256      	movs	r2, #86	@ 0x56
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f7ff fe7b 	bl	800cfcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d2d6:	697b      	ldr	r3, [r7, #20]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	2240      	movs	r2, #64	@ 0x40
 800d2de:	4013      	ands	r3, r2
 800d2e0:	2b40      	cmp	r3, #64	@ 0x40
 800d2e2:	d10a      	bne.n	800d2fa <UART_DMAError+0x66>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	2b22      	cmp	r3, #34	@ 0x22
 800d2e8:	d107      	bne.n	800d2fa <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	225e      	movs	r2, #94	@ 0x5e
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	0018      	movs	r0, r3
 800d2f6:	f7ff fea9 	bl	800d04c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	2290      	movs	r2, #144	@ 0x90
 800d2fe:	589b      	ldr	r3, [r3, r2]
 800d300:	2210      	movs	r2, #16
 800d302:	431a      	orrs	r2, r3
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2190      	movs	r1, #144	@ 0x90
 800d308:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	22a4      	movs	r2, #164	@ 0xa4
 800d30e:	589b      	ldr	r3, [r3, r2]
 800d310:	697a      	ldr	r2, [r7, #20]
 800d312:	0010      	movs	r0, r2
 800d314:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d316:	46c0      	nop			@ (mov r8, r8)
 800d318:	46bd      	mov	sp, r7
 800d31a:	b006      	add	sp, #24
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b084      	sub	sp, #16
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d32a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	225e      	movs	r2, #94	@ 0x5e
 800d330:	2100      	movs	r1, #0
 800d332:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2256      	movs	r2, #86	@ 0x56
 800d338:	2100      	movs	r1, #0
 800d33a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	22a4      	movs	r2, #164	@ 0xa4
 800d340:	589b      	ldr	r3, [r3, r2]
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	0010      	movs	r0, r2
 800d346:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d348:	46c0      	nop			@ (mov r8, r8)
 800d34a:	46bd      	mov	sp, r7
 800d34c:	b004      	add	sp, #16
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d358:	f3ef 8310 	mrs	r3, PRIMASK
 800d35c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d35e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d360:	617b      	str	r3, [r7, #20]
 800d362:	2301      	movs	r3, #1
 800d364:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	f383 8810 	msr	PRIMASK, r3
}
 800d36c:	46c0      	nop			@ (mov r8, r8)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	681a      	ldr	r2, [r3, #0]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2140      	movs	r1, #64	@ 0x40
 800d37a:	438a      	bics	r2, r1
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	f383 8810 	msr	PRIMASK, r3
}
 800d388:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2288      	movs	r2, #136	@ 0x88
 800d38e:	2120      	movs	r1, #32
 800d390:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2298      	movs	r2, #152	@ 0x98
 800d39c:	589b      	ldr	r3, [r3, r2]
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	0010      	movs	r0, r2
 800d3a2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3a4:	46c0      	nop			@ (mov r8, r8)
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	b006      	add	sp, #24
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d3b4:	46c0      	nop			@ (mov r8, r8)
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	b002      	add	sp, #8
 800d3ba:	bd80      	pop	{r7, pc}

0800d3bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d3c4:	46c0      	nop			@ (mov r8, r8)
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	b002      	add	sp, #8
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d3d4:	46c0      	nop			@ (mov r8, r8)
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	b002      	add	sp, #8
 800d3da:	bd80      	pop	{r7, pc}

0800d3dc <memset>:
 800d3dc:	0003      	movs	r3, r0
 800d3de:	1882      	adds	r2, r0, r2
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d100      	bne.n	800d3e6 <memset+0xa>
 800d3e4:	4770      	bx	lr
 800d3e6:	7019      	strb	r1, [r3, #0]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	e7f9      	b.n	800d3e0 <memset+0x4>

0800d3ec <__libc_init_array>:
 800d3ec:	b570      	push	{r4, r5, r6, lr}
 800d3ee:	2600      	movs	r6, #0
 800d3f0:	4c0c      	ldr	r4, [pc, #48]	@ (800d424 <__libc_init_array+0x38>)
 800d3f2:	4d0d      	ldr	r5, [pc, #52]	@ (800d428 <__libc_init_array+0x3c>)
 800d3f4:	1b64      	subs	r4, r4, r5
 800d3f6:	10a4      	asrs	r4, r4, #2
 800d3f8:	42a6      	cmp	r6, r4
 800d3fa:	d109      	bne.n	800d410 <__libc_init_array+0x24>
 800d3fc:	2600      	movs	r6, #0
 800d3fe:	f000 f823 	bl	800d448 <_init>
 800d402:	4c0a      	ldr	r4, [pc, #40]	@ (800d42c <__libc_init_array+0x40>)
 800d404:	4d0a      	ldr	r5, [pc, #40]	@ (800d430 <__libc_init_array+0x44>)
 800d406:	1b64      	subs	r4, r4, r5
 800d408:	10a4      	asrs	r4, r4, #2
 800d40a:	42a6      	cmp	r6, r4
 800d40c:	d105      	bne.n	800d41a <__libc_init_array+0x2e>
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	00b3      	lsls	r3, r6, #2
 800d412:	58eb      	ldr	r3, [r5, r3]
 800d414:	4798      	blx	r3
 800d416:	3601      	adds	r6, #1
 800d418:	e7ee      	b.n	800d3f8 <__libc_init_array+0xc>
 800d41a:	00b3      	lsls	r3, r6, #2
 800d41c:	58eb      	ldr	r3, [r5, r3]
 800d41e:	4798      	blx	r3
 800d420:	3601      	adds	r6, #1
 800d422:	e7f2      	b.n	800d40a <__libc_init_array+0x1e>
 800d424:	0800ded8 	.word	0x0800ded8
 800d428:	0800ded8 	.word	0x0800ded8
 800d42c:	0800dedc 	.word	0x0800dedc
 800d430:	0800ded8 	.word	0x0800ded8

0800d434 <memcpy>:
 800d434:	2300      	movs	r3, #0
 800d436:	b510      	push	{r4, lr}
 800d438:	429a      	cmp	r2, r3
 800d43a:	d100      	bne.n	800d43e <memcpy+0xa>
 800d43c:	bd10      	pop	{r4, pc}
 800d43e:	5ccc      	ldrb	r4, [r1, r3]
 800d440:	54c4      	strb	r4, [r0, r3]
 800d442:	3301      	adds	r3, #1
 800d444:	e7f8      	b.n	800d438 <memcpy+0x4>
	...

0800d448 <_init>:
 800d448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d44a:	46c0      	nop			@ (mov r8, r8)
 800d44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d44e:	bc08      	pop	{r3}
 800d450:	469e      	mov	lr, r3
 800d452:	4770      	bx	lr

0800d454 <_fini>:
 800d454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d456:	46c0      	nop			@ (mov r8, r8)
 800d458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d45a:	bc08      	pop	{r3}
 800d45c:	469e      	mov	lr, r3
 800d45e:	4770      	bx	lr
