
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006044  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08006100  08006100  00007100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006510  08006510  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006518  08006518  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006518  08006518  00007518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006520  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  2000000c  0800652c  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  0800652c  0000840c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147fd  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002886  00000000  00000000  0001c831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001f0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9d  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017861  00000000  00000000  00020fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014807  00000000  00000000  00038816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a850  00000000  00000000  0004d01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e786d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f2c  00000000  00000000  000e78b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000eb7dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080060e8 	.word	0x080060e8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080060e8 	.word	0x080060e8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f005 fe19 	bl	8006090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f005 fe12 	bl	8006090 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f002 ff61 	bl	8003338 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f002 ff83 	bl	80033d0 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fb29 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fa88 	bl	8003a04 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fb14 	bl	8000b24 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f005 fdbc 	bl	8006090 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b40      	ldr	r3, [pc, #256]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x140>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fa8e 	bl	8001ab8 <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fac0 	bl	8000b24 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f001 fdff 	bl	80021c0 <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 faad 	bl	8000b24 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ADC1_Init+0x148>)
 80005ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fdec 	bl	80021c0 <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005ec:	f000 fa9a 	bl	8000b24 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fdd9 	bl	80021c0 <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000612:	f000 fa87 	bl	8000b24 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_ADC1_Init+0x150>)
 800061a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f001 fdc6 	bl	80021c0 <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000638:	f000 fa74 	bl	8000b24 <Error_Handler>
  }
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f005 fd12 	bl	8006090 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_TIM14_Init+0x9c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_TIM14_Init+0xa0>)
 8000682:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000694:	0018      	movs	r0, r3
 8000696:	f003 fb5f 	bl	8003d58 <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fa41 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f003 fe69 	bl	800437c <HAL_TIM_PWM_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 fa39 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 400;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	22c8      	movs	r2, #200	@ 0xc8
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f004 f928 	bl	8004928 <HAL_TIM_PWM_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80006dc:	f000 fa22 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fcda 	bl	800109c <HAL_TIM_MspPostInit>

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b008      	add	sp, #32
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000010c 	.word	0x2000010c
 80006f4:	40002000 	.word	0x40002000
 80006f8:	000003ff 	.word	0x000003ff

080006fc <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	2334      	movs	r3, #52	@ 0x34
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	231c      	movs	r3, #28
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f005 fcbf 	bl	8006090 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f005 fcb8 	bl	8006090 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000720:	4b3a      	ldr	r3, [pc, #232]	@ (800080c <MX_TIM16_Init+0x110>)
 8000722:	4a3b      	ldr	r2, [pc, #236]	@ (8000810 <MX_TIM16_Init+0x114>)
 8000724:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <MX_TIM16_Init+0x110>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b37      	ldr	r3, [pc, #220]	@ (800080c <MX_TIM16_Init+0x110>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000732:	4b36      	ldr	r3, [pc, #216]	@ (800080c <MX_TIM16_Init+0x110>)
 8000734:	22ff      	movs	r2, #255	@ 0xff
 8000736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000738:	4b34      	ldr	r3, [pc, #208]	@ (800080c <MX_TIM16_Init+0x110>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000740:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_TIM16_Init+0x110>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b31      	ldr	r3, [pc, #196]	@ (800080c <MX_TIM16_Init+0x110>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800074c:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <MX_TIM16_Init+0x110>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 fb02 	bl	8003d58 <HAL_TIM_Base_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 f9e4 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800075c:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_TIM16_Init+0x110>)
 800075e:	0018      	movs	r0, r3
 8000760:	f003 fbac 	bl	8003ebc <HAL_TIM_OC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f9dc 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800076c:	2134      	movs	r1, #52	@ 0x34
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22ff      	movs	r2, #255	@ 0xff
 8000778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1879      	adds	r1, r7, r1
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM16_Init+0x110>)
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f004 f862 	bl	8004868 <HAL_TIM_OC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 f9bc 	bl	8000b24 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007ac:	4b17      	ldr	r3, [pc, #92]	@ (800080c <MX_TIM16_Init+0x110>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_TIM16_Init+0x110>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b06      	ldr	r3, [pc, #24]	@ (800080c <MX_TIM16_Init+0x110>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f004 fe8d 	bl	8005514 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007fe:	f000 f991 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b014      	add	sp, #80	@ 0x50
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	200001c8 	.word	0x200001c8
 8000810:	40014400 	.word	0x40014400

08000814 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b094      	sub	sp, #80	@ 0x50
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	2334      	movs	r3, #52	@ 0x34
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	231c      	movs	r3, #28
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f005 fc33 	bl	8006090 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2334      	movs	r3, #52	@ 0x34
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f005 fc2c 	bl	8006090 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000838:	4b3a      	ldr	r3, [pc, #232]	@ (8000924 <MX_TIM17_Init+0x110>)
 800083a:	4a3b      	ldr	r2, [pc, #236]	@ (8000928 <MX_TIM17_Init+0x114>)
 800083c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800083e:	4b39      	ldr	r3, [pc, #228]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b37      	ldr	r3, [pc, #220]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800084a:	4b36      	ldr	r3, [pc, #216]	@ (8000924 <MX_TIM17_Init+0x110>)
 800084c:	4a37      	ldr	r2, [pc, #220]	@ (800092c <MX_TIM17_Init+0x118>)
 800084e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000850:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0052      	lsls	r2, r2, #1
 8000856:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000858:	4b32      	ldr	r3, [pc, #200]	@ (8000924 <MX_TIM17_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800085e:	4b31      	ldr	r3, [pc, #196]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000860:	2280      	movs	r2, #128	@ 0x80
 8000862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000864:	4b2f      	ldr	r3, [pc, #188]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000866:	0018      	movs	r0, r3
 8000868:	f003 fa76 	bl	8003d58 <HAL_TIM_Base_Init>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000870:	f000 f958 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000874:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_TIM17_Init+0x110>)
 8000876:	0018      	movs	r0, r3
 8000878:	f003 fb20 	bl	8003ebc <HAL_TIM_OC_Init>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000880:	f000 f950 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000884:	2134      	movs	r1, #52	@ 0x34
 8000886:	187b      	adds	r3, r7, r1
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 40000;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	4a28      	ldr	r2, [pc, #160]	@ (8000930 <MX_TIM17_Init+0x11c>)
 8000890:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000892:	187b      	adds	r3, r7, r1
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000898:	187b      	adds	r3, r7, r1
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b0:	1879      	adds	r1, r7, r1
 80008b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	0018      	movs	r0, r3
 80008b8:	f003 ffd6 	bl	8004868 <HAL_TIM_OC_ConfigChannel>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80008c0:	f000 f930 	bl	8000b24 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	699a      	ldr	r2, [r3, #24]
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_TIM17_Init+0x110>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	2108      	movs	r1, #8
 80008d0:	430a      	orrs	r2, r1
 80008d2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d4:	003b      	movs	r3, r7
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008da:	003b      	movs	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008e0:	003b      	movs	r3, r7
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2280      	movs	r2, #128	@ 0x80
 80008f6:	0192      	lsls	r2, r2, #6
 80008f8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fa:	003b      	movs	r3, r7
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000900:	003b      	movs	r3, r7
 8000902:	2200      	movs	r2, #0
 8000904:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000906:	003a      	movs	r2, r7
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_TIM17_Init+0x110>)
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f004 fe01 	bl	8005514 <HAL_TIMEx_ConfigBreakDeadTime>
 8000912:	1e03      	subs	r3, r0, #0
 8000914:	d001      	beq.n	800091a <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000916:	f000 f905 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	46bd      	mov	sp, r7
 800091e:	b014      	add	sp, #80	@ 0x50
 8000920:	bd80      	pop	{r7, pc}
 8000922:	46c0      	nop			@ (mov r8, r8)
 8000924:	20000284 	.word	0x20000284
 8000928:	40014800 	.word	0x40014800
 800092c:	0000ffff 	.word	0x0000ffff
 8000930:	00009c40 	.word	0x00009c40

08000934 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000938:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 800093a:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_USART2_UART_Init+0x64>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000940:	22e1      	movs	r2, #225	@ 0xe1
 8000942:	0252      	lsls	r2, r2, #9
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b0b      	ldr	r3, [pc, #44]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b08      	ldr	r3, [pc, #32]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 800097c:	4b05      	ldr	r3, [pc, #20]	@ (8000994 <MX_USART2_UART_Init+0x60>)
 800097e:	0018      	movs	r0, r3
 8000980:	f004 fe84 	bl	800568c <HAL_UART_Init>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8cc 	bl	8000b24 <Error_Handler>
  }
}
 800098c:	46c0      	nop			@ (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	20000340 	.word	0x20000340
 8000998:	40004400 	.word	0x40004400

0800099c <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <MX_DMA_Init+0x48>)
 80009a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <MX_DMA_Init+0x48>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <MX_DMA_Init+0x48>)
 80009b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2100      	movs	r1, #0
 80009be:	2009      	movs	r0, #9
 80009c0:	f002 f852 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009c4:	2009      	movs	r0, #9
 80009c6:	f002 f864 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */ //- i think to do with scan mode adc
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	200b      	movs	r0, #11
 80009d0:	f002 f84a 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 80009d4:	200b      	movs	r0, #11
 80009d6:	f002 f85c 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	b002      	add	sp, #8
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	46c0      	nop			@ (mov r8, r8)
 80009e4:	40021000 	.word	0x40021000

080009e8 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	@ 0x24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	240c      	movs	r4, #12
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	0018      	movs	r0, r3
 80009f4:	2314      	movs	r3, #20
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f005 fb49 	bl	8006090 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fe:	4b46      	ldr	r3, [pc, #280]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0a:	4b43      	ldr	r3, [pc, #268]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0e:	2204      	movs	r2, #4
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a16:	4b40      	ldr	r3, [pc, #256]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a1a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a22:	4b3d      	ldr	r3, [pc, #244]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	2220      	movs	r2, #32
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a32:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a3a:	4b37      	ldr	r3, [pc, #220]	@ (8000b18 <MX_GPIO_Init+0x130>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a46:	4b35      	ldr	r3, [pc, #212]	@ (8000b1c <MX_GPIO_Init+0x134>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2140      	movs	r1, #64	@ 0x40
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f002 fc55 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000a52:	193b      	adds	r3, r7, r4
 8000a54:	2204      	movs	r2, #4
 8000a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	2288      	movs	r2, #136	@ 0x88
 8000a5c:	0352      	lsls	r2, r2, #13
 8000a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	193b      	adds	r3, r7, r4
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	4a2d      	ldr	r2, [pc, #180]	@ (8000b20 <MX_GPIO_Init+0x138>)
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f002 fae1 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	2240      	movs	r2, #64	@ 0x40
 8000a76:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	4a25      	ldr	r2, [pc, #148]	@ (8000b1c <MX_GPIO_Init+0x134>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f002 fad2 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2203      	movs	r2, #3
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	193a      	adds	r2, r7, r4
 8000aa4:	23a0      	movs	r3, #160	@ 0xa0
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fac2 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	2203      	movs	r2, #3
 8000aba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	193a      	adds	r2, r7, r4
 8000ac4:	23a0      	movs	r3, #160	@ 0xa0
 8000ac6:	05db      	lsls	r3, r3, #23
 8000ac8:	0011      	movs	r1, r2
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fab2 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2210      	movs	r2, #16
 8000ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2203      	movs	r2, #3
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000ae2:	193a      	adds	r2, r7, r4
 8000ae4:	23a0      	movs	r3, #160	@ 0xa0
 8000ae6:	05db      	lsls	r3, r3, #23
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 faa2 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2220      	movs	r2, #32
 8000af4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	2203      	movs	r2, #3
 8000afa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000b02:	193a      	adds	r2, r7, r4
 8000b04:	23a0      	movs	r3, #160	@ 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f002 fa92 	bl	8003034 <HAL_GPIO_Init>
  /*Configure GPIO pin : TIM14_CH1_Pin */
  /*GPIO_InitStruct.Pin = TIM14_CH1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TIM14_CH1_GPIO_Port, &GPIO_InitStruct);*/
}
 8000b10:	46c0      	nop			@ (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b009      	add	sp, #36	@ 0x24
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	50000800 	.word	0x50000800
 8000b20:	50001400 	.word	0x50001400

08000b24 <Error_Handler>:

void Error_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	e7fd      	b.n	8000b2c <Error_Handler+0x8>

08000b30 <System_Init>:
  {

  }
}

void System_Init(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b34:	f000 fdd0 	bl	80016d8 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000b38:	f7ff fc86 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b3c:	f7ff ff54 	bl	80009e8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000b40:	f7ff ff2c 	bl	800099c <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000b44:	f7ff fef6 	bl	8000934 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000b48:	f7ff fcdc 	bl	8000504 <MX_ADC1_Init>
	MX_TIM14_Init();
 8000b4c:	f7ff fd84 	bl	8000658 <MX_TIM14_Init>
	MX_TIM16_Init();
 8000b50:	f7ff fdd4 	bl	80006fc <MX_TIM16_Init>
	MX_TIM17_Init();
 8000b54:	f7ff fe5e 	bl	8000814 <MX_TIM17_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000b58:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <System_Init+0x54>)
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <System_Init+0x58>)
 8000b5c:	2114      	movs	r1, #20
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f004 f832 	bl	8004bc8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM16 (adc trig.) to the callback function in TIMx_callback.c for TIM17.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8000b64:	4a09      	ldr	r2, [pc, #36]	@ (8000b8c <System_Init+0x5c>)
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <System_Init+0x60>)
 8000b68:	2114      	movs	r1, #20
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 f82c 	bl	8004bc8 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000b70:	4a08      	ldr	r2, [pc, #32]	@ (8000b94 <System_Init+0x64>)
 8000b72:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <System_Init+0x68>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 f976 	bl	8001e68 <HAL_ADC_RegisterCallback>
}
 8000b7c:	46c0      	nop			@ (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	08000b9d 	.word	0x08000b9d
 8000b88:	200001c8 	.word	0x200001c8
 8000b8c:	08000d81 	.word	0x08000d81
 8000b90:	20000284 	.word	0x20000284
 8000b94:	08000db9 	.word	0x08000db9
 8000b98:	20000028 	.word	0x20000028

08000b9c <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim16, (uint16_t)TIM16_final_start_value); //this line must go here, or at least very near the beginning!
 8000ba4:	4b59      	ldr	r3, [pc, #356]	@ (8000d0c <TIM16_callback+0x170>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	4b59      	ldr	r3, [pc, #356]	@ (8000d10 <TIM16_callback+0x174>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	625a      	str	r2, [r3, #36]	@ 0x24

	//interrupt flag is already cleared by stm32g0xx_it.c

	if(current_waveshape == TRIANGLE_MODE){
 8000bb0:	4b58      	ldr	r3, [pc, #352]	@ (8000d14 <TIM16_callback+0x178>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d109      	bne.n	8000bce <TIM16_callback+0x32>
		duty = tri_table_one_quadrant[current_one_quadrant_index];
 8000bba:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <TIM16_callback+0x17c>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	4b56      	ldr	r3, [pc, #344]	@ (8000d1c <TIM16_callback+0x180>)
 8000bc4:	0052      	lsls	r2, r2, #1
 8000bc6:	5ad2      	ldrh	r2, [r2, r3]
 8000bc8:	4b55      	ldr	r3, [pc, #340]	@ (8000d20 <TIM16_callback+0x184>)
 8000bca:	801a      	strh	r2, [r3, #0]
 8000bcc:	e016      	b.n	8000bfc <TIM16_callback+0x60>
	}
	else if(current_waveshape == SINE_MODE){
 8000bce:	4b51      	ldr	r3, [pc, #324]	@ (8000d14 <TIM16_callback+0x178>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d109      	bne.n	8000bec <TIM16_callback+0x50>
		duty = sine_table_one_quadrant[current_one_quadrant_index];
 8000bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000d18 <TIM16_callback+0x17c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	001a      	movs	r2, r3
 8000be0:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <TIM16_callback+0x188>)
 8000be2:	0052      	lsls	r2, r2, #1
 8000be4:	5ad2      	ldrh	r2, [r2, r3]
 8000be6:	4b4e      	ldr	r3, [pc, #312]	@ (8000d20 <TIM16_callback+0x184>)
 8000be8:	801a      	strh	r2, [r3, #0]
 8000bea:	e007      	b.n	8000bfc <TIM16_callback+0x60>
	}
	else if(current_waveshape == SQUARE_MODE){
 8000bec:	4b49      	ldr	r3, [pc, #292]	@ (8000d14 <TIM16_callback+0x178>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d102      	bne.n	8000bfc <TIM16_callback+0x60>
		duty = 1023;
 8000bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d20 <TIM16_callback+0x184>)
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8000d28 <TIM16_callback+0x18c>)
 8000bfa:	801a      	strh	r2, [r3, #0]
	}
	if(current_one_quadrant_index == MAX_QUADRANT_INDEX){
 8000bfc:	4b46      	ldr	r3, [pc, #280]	@ (8000d18 <TIM16_callback+0x17c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b80      	cmp	r3, #128	@ 0x80
 8000c04:	d103      	bne.n	8000c0e <TIM16_callback+0x72>
		current_quadrant = SECOND_QUADRANT;
 8000c06:	4b49      	ldr	r3, [pc, #292]	@ (8000d2c <TIM16_callback+0x190>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
 8000c0c:	e039      	b.n	8000c82 <TIM16_callback+0xe6>
	}
	else if(current_one_quadrant_index == MIN_QUADRANT_INDEX){
 8000c0e:	4b42      	ldr	r3, [pc, #264]	@ (8000d18 <TIM16_callback+0x17c>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d134      	bne.n	8000c82 <TIM16_callback+0xe6>
		if((current_halfcycle == FIRST_HALFCYCLE) && (current_quadrant == FIRST_QUADRANT)){
 8000c18:	4b45      	ldr	r3, [pc, #276]	@ (8000d30 <TIM16_callback+0x194>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d104      	bne.n	8000c2c <TIM16_callback+0x90>
 8000c22:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <TIM16_callback+0x190>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d02a      	beq.n	8000c82 <TIM16_callback+0xe6>
			//do nothing
		}
		else if((current_halfcycle == FIRST_HALFCYCLE) && (current_quadrant == SECOND_QUADRANT)){
 8000c2c:	4b40      	ldr	r3, [pc, #256]	@ (8000d30 <TIM16_callback+0x194>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10b      	bne.n	8000c4e <TIM16_callback+0xb2>
 8000c36:	4b3d      	ldr	r3, [pc, #244]	@ (8000d2c <TIM16_callback+0x190>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d106      	bne.n	8000c4e <TIM16_callback+0xb2>
			current_halfcycle = SECOND_HALFCYCLE;
 8000c40:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <TIM16_callback+0x194>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
			current_quadrant = FIRST_QUADRANT;
 8000c46:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <TIM16_callback+0x190>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
 8000c4c:	e019      	b.n	8000c82 <TIM16_callback+0xe6>
		}
		else if((current_halfcycle == SECOND_HALFCYCLE) && (current_quadrant == FIRST_QUADRANT)){
 8000c4e:	4b38      	ldr	r3, [pc, #224]	@ (8000d30 <TIM16_callback+0x194>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d104      	bne.n	8000c62 <TIM16_callback+0xc6>
 8000c58:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <TIM16_callback+0x190>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d00f      	beq.n	8000c82 <TIM16_callback+0xe6>
			//do nothing
		}
		else if((current_halfcycle == SECOND_HALFCYCLE) && (current_quadrant == SECOND_QUADRANT)){
 8000c62:	4b33      	ldr	r3, [pc, #204]	@ (8000d30 <TIM16_callback+0x194>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10a      	bne.n	8000c82 <TIM16_callback+0xe6>
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <TIM16_callback+0x190>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d105      	bne.n	8000c82 <TIM16_callback+0xe6>
			current_halfcycle = FIRST_HALFCYCLE;
 8000c76:	4b2e      	ldr	r3, [pc, #184]	@ (8000d30 <TIM16_callback+0x194>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
			current_quadrant = FIRST_QUADRANT;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d2c <TIM16_callback+0x190>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]
		}
	}

	if(current_quadrant == FIRST_QUADRANT){
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <TIM16_callback+0x190>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d107      	bne.n	8000c9c <TIM16_callback+0x100>
		current_one_quadrant_index++;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <TIM16_callback+0x17c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	3301      	adds	r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <TIM16_callback+0x17c>)
 8000c98:	701a      	strb	r2, [r3, #0]
 8000c9a:	e006      	b.n	8000caa <TIM16_callback+0x10e>
	}
	else{
		current_one_quadrant_index--;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <TIM16_callback+0x17c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <TIM16_callback+0x17c>)
 8000ca8:	701a      	strb	r2, [r3, #0]
	}
	if(current_halfcycle == SECOND_HALFCYCLE){
 8000caa:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <TIM16_callback+0x194>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d107      	bne.n	8000cc4 <TIM16_callback+0x128>
		duty = 1023 - duty;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <TIM16_callback+0x184>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	4a1b      	ldr	r2, [pc, #108]	@ (8000d28 <TIM16_callback+0x18c>)
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	4b17      	ldr	r3, [pc, #92]	@ (8000d20 <TIM16_callback+0x184>)
 8000cc2:	801a      	strh	r2, [r3, #0]
	}

#if DEPTH_ON_OR_OFF == 1

	//Apply Depth
	if(current_depth == 255){
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <TIM16_callback+0x198>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	2bff      	cmp	r3, #255	@ 0xff
 8000ccc:	d108      	bne.n	8000ce0 <TIM16_callback+0x144>
		duty = 1023 - duty;
 8000cce:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <TIM16_callback+0x184>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4a14      	ldr	r2, [pc, #80]	@ (8000d28 <TIM16_callback+0x18c>)
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <TIM16_callback+0x184>)
 8000cdc:	801a      	strh	r2, [r3, #0]
 8000cde:	e00a      	b.n	8000cf6 <TIM16_callback+0x15a>
	}
	else if(current_depth != 0){
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <TIM16_callback+0x198>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <TIM16_callback+0x154>
		//duty = 1023 - duty*(current_depth >> 8);
		Multiply_Duty_By_Current_Depth_and_Divide_By_256();
 8000cea:	f000 f827 	bl	8000d3c <Multiply_Duty_By_Current_Depth_and_Divide_By_256>
 8000cee:	e002      	b.n	8000cf6 <TIM16_callback+0x15a>
	}
	else{
		duty = 1023; //if depth is 0, just output 1023
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <TIM16_callback+0x184>)
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8000d28 <TIM16_callback+0x18c>)
 8000cf4:	801a      	strh	r2, [r3, #0]
	}

#endif

	//Write Duty
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <TIM16_callback+0x184>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <TIM16_callback+0x19c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	200003e8 	.word	0x200003e8
 8000d10:	200001c8 	.word	0x200001c8
 8000d14:	200003d4 	.word	0x200003d4
 8000d18:	200003e4 	.word	0x200003e4
 8000d1c:	08006204 	.word	0x08006204
 8000d20:	200003f6 	.word	0x200003f6
 8000d24:	08006100 	.word	0x08006100
 8000d28:	000003ff 	.word	0x000003ff
 8000d2c:	200003e6 	.word	0x200003e6
 8000d30:	200003e5 	.word	0x200003e5
 8000d34:	200003dc 	.word	0x200003dc
 8000d38:	2000010c 	.word	0x2000010c

08000d3c <Multiply_Duty_By_Current_Depth_and_Divide_By_256>:

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
	volatile uint32_t multiply_product = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8000d46:	4b0b      	ldr	r3, [pc, #44]	@ (8000d74 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x3c>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4353      	muls	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	0a1b      	lsrs	r3, r3, #8
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x40>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 8000d66:	801a      	strh	r2, [r3, #0]

    return 1;
 8000d68:	2301      	movs	r3, #1
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b002      	add	sp, #8
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	200003f6 	.word	0x200003f6
 8000d78:	200003dc 	.word	0x200003dc
 8000d7c:	000003ff 	.word	0x000003ff

08000d80 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	//Start ADC (in scan mode) conversion
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <TIM17_callback+0x2c>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <TIM17_callback+0x30>)
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <TIM17_callback+0x34>)
 8000d92:	0018      	movs	r0, r3
 8000d94:	f001 f8f4 	bl	8001f80 <HAL_ADC_Start_DMA>

	Stop_OC_TIM(htim, TIM_CHANNEL_1); //disable TIM17
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fadf 	bl	8001360 <Stop_OC_TIM>
}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	0800631a 	.word	0x0800631a
 8000db0:	200003fc 	.word	0x200003fc
 8000db4:	20000028 	.word	0x20000028

08000db8 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 f96a 	bl	800209c <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000dc8:	210e      	movs	r1, #14
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	4a23      	ldr	r2, [pc, #140]	@ (8000e5c <ADC_DMA_conversion_complete_callback+0xa4>)
 8000dce:	8812      	ldrh	r2, [r2, #0]
 8000dd0:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <ADC_DMA_conversion_complete_callback+0xa8>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d803      	bhi.n	8000de4 <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <ADC_DMA_conversion_complete_callback+0xac>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e017      	b.n	8000e14 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000de4:	230e      	movs	r3, #14
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	4a1f      	ldr	r2, [pc, #124]	@ (8000e68 <ADC_DMA_conversion_complete_callback+0xb0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d803      	bhi.n	8000df8 <ADC_DMA_conversion_complete_callback+0x40>
		current_waveshape = SINE_MODE; //sine wave
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <ADC_DMA_conversion_complete_callback+0xac>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
 8000df6:	e00d      	b.n	8000e14 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000df8:	230e      	movs	r3, #14
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	881a      	ldrh	r2, [r3, #0]
 8000dfe:	2380      	movs	r3, #128	@ 0x80
 8000e00:	015b      	lsls	r3, r3, #5
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d203      	bcs.n	8000e0e <ADC_DMA_conversion_complete_callback+0x56>
		current_waveshape = SQUARE_MODE; //square wave
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <ADC_DMA_conversion_complete_callback+0xac>)
 8000e08:	2202      	movs	r2, #2
 8000e0a:	701a      	strb	r2, [r3, #0]
 8000e0c:	e002      	b.n	8000e14 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <ADC_DMA_conversion_complete_callback+0xac>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
	}

	//GET SPEED
	current_speed_linear = ADCResultsDMA[1] >> 2; //convert to 10-bit
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <ADC_DMA_conversion_complete_callback+0xa4>)
 8000e16:	885b      	ldrh	r3, [r3, #2]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	089b      	lsrs	r3, r3, #2
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b13      	ldr	r3, [pc, #76]	@ (8000e6c <ADC_DMA_conversion_complete_callback+0xb4>)
 8000e20:	801a      	strh	r2, [r3, #0]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		current_depth = ADCResultsDMA[2] >> 4; //convert to 8-bit
 8000e22:	4b0e      	ldr	r3, [pc, #56]	@ (8000e5c <ADC_DMA_conversion_complete_callback+0xa4>)
 8000e24:	889b      	ldrh	r3, [r3, #4]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <ADC_DMA_conversion_complete_callback+0xb8>)
 8000e2e:	801a      	strh	r2, [r3, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == 0){
 8000e30:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <ADC_DMA_conversion_complete_callback+0xbc>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d102      	bne.n	8000e40 <ADC_DMA_conversion_complete_callback+0x88>

		initial_ADC_conversion_complete = 1;
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <ADC_DMA_conversion_complete_callback+0xbc>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
	}

	__HAL_TIM_SET_COUNTER(&htim17, 0); //set counter to 0
 8000e40:	4b0d      	ldr	r3, [pc, #52]	@ (8000e78 <ADC_DMA_conversion_complete_callback+0xc0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2200      	movs	r2, #0
 8000e46:	625a      	str	r2, [r3, #36]	@ 0x24
	Start_OC_TIM(&htim17, TIM_CHANNEL_1);
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <ADC_DMA_conversion_complete_callback+0xc0>)
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f000 fa6b 	bl	8001328 <Start_OC_TIM>
}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b004      	add	sp, #16
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	200003fc 	.word	0x200003fc
 8000e60:	00000555 	.word	0x00000555
 8000e64:	200003d4 	.word	0x200003d4
 8000e68:	00000aaa 	.word	0x00000aaa
 8000e6c:	200003d6 	.word	0x200003d6
 8000e70:	200003dc 	.word	0x200003dc
 8000e74:	20000404 	.word	0x20000404
 8000e78:	20000284 	.word	0x20000284

08000e7c <main>:
//INCLUDES
#include "system.h"

int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	System_Init();
 8000e80:	f7ff fe56 	bl	8000b30 <System_Init>

	Global_Interrupt_Enable();
 8000e84:	f000 f9d4 	bl	8001230 <Global_Interrupt_Enable>

	//START ADC TRIG. TIMER
	Start_ADC_Trig_Timer();
 8000e88:	f000 f9da 	bl	8001240 <Start_ADC_Trig_Timer>

	//WAIT
	while(initial_ADC_conversion_complete == 0){}; //wait while first ADC conversion is ongoing
 8000e8c:	46c0      	nop			@ (mov r8, r8)
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <main+0x38>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d0fa      	beq.n	8000e8e <main+0x12>

	Process_TIM16_Raw_Start_Value_and_Prescaler();
 8000e98:	f000 fa7e 	bl	8001398 <Process_TIM16_Raw_Start_Value_and_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000e9c:	f000 fb88 	bl	80015b0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer();
 8000ea0:	f000 f9e8 	bl	8001274 <Start_PWM_Gen_Timer>
	Start_Freq_Gen_Timer();
 8000ea4:	f000 fa00 	bl	80012a8 <Start_Freq_Gen_Timer>

	while (1)
	{
		Process_TIM16_Raw_Start_Value_and_Prescaler();
 8000ea8:	f000 fa76 	bl	8001398 <Process_TIM16_Raw_Start_Value_and_Prescaler>
		Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000eac:	f000 fb80 	bl	80015b0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>
		Process_TIM16_Raw_Start_Value_and_Prescaler();
 8000eb0:	46c0      	nop			@ (mov r8, r8)
 8000eb2:	e7f9      	b.n	8000ea8 <main+0x2c>
 8000eb4:	20000404 	.word	0x20000404

08000eb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <HAL_MspInit+0x44>)
 8000ec0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8000efc <HAL_MspInit+0x44>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <HAL_MspInit+0x44>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	2201      	movs	r2, #1
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b09      	ldr	r3, [pc, #36]	@ (8000efc <HAL_MspInit+0x44>)
 8000ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_MspInit+0x44>)
 8000edc:	2180      	movs	r1, #128	@ 0x80
 8000ede:	0549      	lsls	r1, r1, #21
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ee4:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <HAL_MspInit+0x44>)
 8000ee6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	055b      	lsls	r3, r3, #21
 8000eec:	4013      	ands	r3, r2
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	40021000 	.word	0x40021000

08000f00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b08b      	sub	sp, #44	@ 0x2c
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	2414      	movs	r4, #20
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	2314      	movs	r3, #20
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f005 f8bc 	bl	8006090 <memset>
  if(hadc->Instance==ADC1)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd4 <HAL_ADC_MspInit+0xd4>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d154      	bne.n	8000fcc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f22:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f26:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f28:	2180      	movs	r1, #128	@ 0x80
 8000f2a:	0349      	lsls	r1, r1, #13
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f30:	4b29      	ldr	r3, [pc, #164]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f34:	2380      	movs	r3, #128	@ 0x80
 8000f36:	035b      	lsls	r3, r3, #13
 8000f38:	4013      	ands	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
 8000f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3e:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f42:	4b25      	ldr	r3, [pc, #148]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f44:	2101      	movs	r1, #1
 8000f46:	430a      	orrs	r2, r1
 8000f48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f4a:	4b23      	ldr	r3, [pc, #140]	@ (8000fd8 <HAL_ADC_MspInit+0xd8>)
 8000f4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4013      	ands	r3, r2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f56:	193b      	adds	r3, r7, r4
 8000f58:	2233      	movs	r2, #51	@ 0x33
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	2203      	movs	r2, #3
 8000f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	193a      	adds	r2, r7, r4
 8000f6a:	23a0      	movs	r3, #160	@ 0xa0
 8000f6c:	05db      	lsls	r3, r3, #23
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f002 f85f 	bl	8003034 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f78:	4a19      	ldr	r2, [pc, #100]	@ (8000fe0 <HAL_ADC_MspInit+0xe0>)
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f7e:	2205      	movs	r2, #5
 8000f80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f82:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f90:	2280      	movs	r2, #128	@ 0x80
 8000f92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f96:	2280      	movs	r2, #128	@ 0x80
 8000f98:	0052      	lsls	r2, r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 fd8a 	bl	8002acc <HAL_DMA_Init>
 8000fb8:	1e03      	subs	r3, r0, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000fbc:	f7ff fdb2 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a06      	ldr	r2, [pc, #24]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000fc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8000fc6:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_ADC_MspInit+0xdc>)
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	b00b      	add	sp, #44	@ 0x2c
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	40012400 	.word	0x40012400
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	200000b0 	.word	0x200000b0
 8000fe0:	40020008 	.word	0x40020008

08000fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a26      	ldr	r2, [pc, #152]	@ (800108c <HAL_TIM_Base_MspInit+0xa8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10e      	bne.n	8001014 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ff6:	4b26      	ldr	r3, [pc, #152]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8000ff8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ffa:	4b25      	ldr	r3, [pc, #148]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0209      	lsls	r1, r1, #8
 8001000:	430a      	orrs	r2, r1
 8001002:	641a      	str	r2, [r3, #64]	@ 0x40
 8001004:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8001006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	4013      	ands	r3, r2
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001012:	e036      	b.n	8001082 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_TIM_Base_MspInit+0xb0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d116      	bne.n	800104c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800101e:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8001020:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	0289      	lsls	r1, r1, #10
 8001028:	430a      	orrs	r2, r1
 800102a:	641a      	str	r2, [r3, #64]	@ 0x40
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 800102e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2015      	movs	r0, #21
 8001040:	f001 fd12 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001044:	2015      	movs	r0, #21
 8001046:	f001 fd24 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 800104a:	e01a      	b.n	8001082 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_TIM_Base_MspInit+0xb4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d115      	bne.n	8001082 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001056:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8001058:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 800105c:	2180      	movs	r1, #128	@ 0x80
 800105e:	02c9      	lsls	r1, r1, #11
 8001060:	430a      	orrs	r2, r1
 8001062:	641a      	str	r2, [r3, #64]	@ 0x40
 8001064:	4b0a      	ldr	r3, [pc, #40]	@ (8001090 <HAL_TIM_Base_MspInit+0xac>)
 8001066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001068:	2380      	movs	r3, #128	@ 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2016      	movs	r0, #22
 8001078:	f001 fcf6 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800107c:	2016      	movs	r0, #22
 800107e:	f001 fd08 	bl	8002a92 <HAL_NVIC_EnableIRQ>
}
 8001082:	46c0      	nop			@ (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b006      	add	sp, #24
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	40002000 	.word	0x40002000
 8001090:	40021000 	.word	0x40021000
 8001094:	40014400 	.word	0x40014400
 8001098:	40014800 	.word	0x40014800

0800109c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800109c:	b590      	push	{r4, r7, lr}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	240c      	movs	r4, #12
 80010a6:	193b      	adds	r3, r7, r4
 80010a8:	0018      	movs	r0, r3
 80010aa:	2314      	movs	r3, #20
 80010ac:	001a      	movs	r2, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	f004 ffee 	bl	8006090 <memset>
  if(htim->Instance==TIM14)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a14      	ldr	r2, [pc, #80]	@ (800110c <HAL_TIM_MspPostInit+0x70>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d122      	bne.n	8001104 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_TIM_MspPostInit+0x74>)
 80010c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010c2:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <HAL_TIM_MspPostInit+0x74>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ca:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_TIM_MspPostInit+0x74>)
 80010cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ce:	2201      	movs	r2, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80010d6:	0021      	movs	r1, r4
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2280      	movs	r2, #128	@ 0x80
 80010dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2202      	movs	r2, #2
 80010e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2204      	movs	r2, #4
 80010f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	187a      	adds	r2, r7, r1
 80010f8:	23a0      	movs	r3, #160	@ 0xa0
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	0011      	movs	r1, r2
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 ff98 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	b009      	add	sp, #36	@ 0x24
 800110a:	bd90      	pop	{r4, r7, pc}
 800110c:	40002000 	.word	0x40002000
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	@ 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	2414      	movs	r4, #20
 800111e:	193b      	adds	r3, r7, r4
 8001120:	0018      	movs	r0, r3
 8001122:	2314      	movs	r3, #20
 8001124:	001a      	movs	r2, r3
 8001126:	2100      	movs	r1, #0
 8001128:	f004 ffb2 	bl	8006090 <memset>
  if(huart->Instance==USART2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1b      	ldr	r2, [pc, #108]	@ (80011a0 <HAL_UART_MspInit+0x8c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d130      	bne.n	8001198 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 8001138:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 800113c:	2180      	movs	r1, #128	@ 0x80
 800113e:	0289      	lsls	r1, r1, #10
 8001140:	430a      	orrs	r2, r1
 8001142:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 8001146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001148:	2380      	movs	r3, #128	@ 0x80
 800114a:	029b      	lsls	r3, r3, #10
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 8001154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	635a      	str	r2, [r3, #52]	@ 0x34
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <HAL_UART_MspInit+0x90>)
 8001160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001162:	2201      	movs	r2, #1
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800116a:	0021      	movs	r1, r4
 800116c:	187b      	adds	r3, r7, r1
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2202      	movs	r2, #2
 8001176:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	187b      	adds	r3, r7, r1
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001184:	187b      	adds	r3, r7, r1
 8001186:	2201      	movs	r2, #1
 8001188:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	187a      	adds	r2, r7, r1
 800118c:	23a0      	movs	r3, #160	@ 0xa0
 800118e:	05db      	lsls	r3, r3, #23
 8001190:	0011      	movs	r1, r2
 8001192:	0018      	movs	r0, r3
 8001194:	f001 ff4e 	bl	8003034 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b00b      	add	sp, #44	@ 0x2c
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	40004400 	.word	0x40004400
 80011a4:	40021000 	.word	0x40021000

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	e7fd      	b.n	80011ac <NMI_Handler+0x4>

080011b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	e7fd      	b.n	80011b4 <HardFault_Handler+0x4>

080011b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	46c0      	nop			@ (mov r8, r8)
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f000 faec 	bl	80017ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <DMA1_Channel1_IRQHandler+0x14>)
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 fde4 	bl	8002db0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011e8:	46c0      	nop			@ (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	200000b0 	.word	0x200000b0

080011f4 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <TIM16_IRQHandler+0x14>)
 8001206:	0018      	movs	r0, r3
 8001208:	f003 fa04 	bl	8004614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	200001c8 	.word	0x200001c8

08001218 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <TIM17_IRQHandler+0x14>)
 800121e:	0018      	movs	r0, r3
 8001220:	f003 f9f8 	bl	8004614 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	20000284 	.word	0x20000284

08001230 <Global_Interrupt_Enable>:
volatile uint8_t TIM16_prescaler_divisors_final_index = 0;
volatile uint16_t ADCResultsDMA[4] = {0};
volatile uint8_t initial_ADC_conversion_complete = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8001234:	b662      	cpsie	i
}
 8001236:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <Start_ADC_Trig_Timer>:
	__disable_irq();
	return 1;
}

uint8_t Start_ADC_Trig_Timer(void)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim17, TIM_CHANNEL_1); //start adc trig.
 8001246:	1dfc      	adds	r4, r7, #7
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <Start_ADC_Trig_Timer+0x30>)
 800124a:	2100      	movs	r1, #0
 800124c:	0018      	movs	r0, r3
 800124e:	f000 f86b 	bl	8001328 <Start_OC_TIM>
 8001252:	0003      	movs	r3, r0
 8001254:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <Start_ADC_Trig_Timer+0x22>

			Error_Handler();
 800125e:	f7ff fc61 	bl	8000b24 <Error_Handler>
	}

	return ok;
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b003      	add	sp, #12
 800126c:	bd90      	pop	{r4, r7, pc}
 800126e:	46c0      	nop			@ (mov r8, r8)
 8001270:	20000284 	.word	0x20000284

08001274 <Start_PWM_Gen_Timer>:

uint8_t Start_PWM_Gen_Timer(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
	uint8_t ok = Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 800127a:	1dfc      	adds	r4, r7, #7
 800127c:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <Start_PWM_Gen_Timer+0x30>)
 800127e:	2100      	movs	r1, #0
 8001280:	0018      	movs	r0, r3
 8001282:	f000 f82b 	bl	80012dc <Start_PWM_TIM>
 8001286:	0003      	movs	r3, r0
 8001288:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <Start_PWM_Gen_Timer+0x22>

		Error_Handler();
 8001292:	f7ff fc47 	bl	8000b24 <Error_Handler>
	}

	return ok;
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
}
 800129a:	0018      	movs	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	b003      	add	sp, #12
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	46c0      	nop			@ (mov r8, r8)
 80012a4:	2000010c 	.word	0x2000010c

080012a8 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80012ae:	1dfc      	adds	r4, r7, #7
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <Start_Freq_Gen_Timer+0x30>)
 80012b2:	2100      	movs	r1, #0
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f837 	bl	8001328 <Start_OC_TIM>
 80012ba:	0003      	movs	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 80012c6:	f7ff fc2d 	bl	8000b24 <Error_Handler>
	}

	return ok;
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
}
 80012ce:	0018      	movs	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b003      	add	sp, #12
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	200001c8 	.word	0x200001c8

080012dc <Start_PWM_TIM>:

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 80012dc:	b5b0      	push	{r4, r5, r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 80012e6:	250f      	movs	r5, #15
 80012e8:	197b      	adds	r3, r7, r5
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 80012ee:	197c      	adds	r4, r7, r5
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0018      	movs	r0, r3
 80012f4:	f002 fd96 	bl	8003e24 <HAL_TIM_Base_Start>
 80012f8:	0003      	movs	r3, r0
 80012fa:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80012fc:	197c      	adds	r4, r7, r5
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0011      	movs	r1, r2
 8001304:	0018      	movs	r0, r3
 8001306:	f003 f8a7 	bl	8004458 <HAL_TIM_PWM_Start>
 800130a:	0003      	movs	r3, r0
 800130c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800130e:	197b      	adds	r3, r7, r5
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <Start_PWM_TIM+0x3e>

		Error_Handler();
 8001316:	f7ff fc05 	bl	8000b24 <Error_Handler>
	}

	return ok;
 800131a:	230f      	movs	r3, #15
 800131c:	18fb      	adds	r3, r7, r3
 800131e:	781b      	ldrb	r3, [r3, #0]
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b004      	add	sp, #16
 8001326:	bdb0      	pop	{r4, r5, r7, pc}

08001328 <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8001332:	250f      	movs	r5, #15
 8001334:	197c      	adds	r4, r7, r5
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	0011      	movs	r1, r2
 800133c:	0018      	movs	r0, r3
 800133e:	f002 fe2b 	bl	8003f98 <HAL_TIM_OC_Start_IT>
 8001342:	0003      	movs	r3, r0
 8001344:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8001346:	197b      	adds	r3, r7, r5
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <Start_OC_TIM+0x2a>

		Error_Handler();
 800134e:	f7ff fbe9 	bl	8000b24 <Error_Handler>
	}

	return ok;
 8001352:	230f      	movs	r3, #15
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	781b      	ldrb	r3, [r3, #0]
}
 8001358:	0018      	movs	r0, r3
 800135a:	46bd      	mov	sp, r7
 800135c:	b004      	add	sp, #16
 800135e:	bdb0      	pop	{r4, r5, r7, pc}

08001360 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001360:	b5b0      	push	{r4, r5, r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 800136a:	250f      	movs	r5, #15
 800136c:	197c      	adds	r4, r7, r5
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0011      	movs	r1, r2
 8001374:	0018      	movs	r0, r3
 8001376:	f002 ff33 	bl	80041e0 <HAL_TIM_OC_Stop_IT>
 800137a:	0003      	movs	r3, r0
 800137c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800137e:	197b      	adds	r3, r7, r5
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <Stop_OC_TIM+0x2a>

		Error_Handler();
 8001386:	f7ff fbcd 	bl	8000b24 <Error_Handler>
	}

	return ok;
 800138a:	230f      	movs	r3, #15
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	781b      	ldrb	r3, [r3, #0]
}
 8001390:	0018      	movs	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	b004      	add	sp, #16
 8001396:	bdb0      	pop	{r4, r5, r7, pc}

08001398 <Process_TIM16_Raw_Start_Value_and_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Prescaler(void){
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

	uint16_t speed_control = 0;
 800139e:	210e      	movs	r1, #14
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2200      	movs	r2, #0
 80013a4:	801a      	strh	r2, [r3, #0]
	uint32_t speed_control_32 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
	uint8_t how_many_128 = 0;
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

    current_speed_linear_32 = current_speed_linear;
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <Process_TIM16_Raw_Start_Value_and_Prescaler+0xa0>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	001a      	movs	r2, r3
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <Process_TIM16_Raw_Start_Value_and_Prescaler+0xa4>)
 80013ba:	601a      	str	r2, [r3, #0]
    speed_control_32 = current_speed_linear_32 * NUMBER_OF_FREQUENCY_STEPS;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <Process_TIM16_Raw_Start_Value_and_Prescaler+0xa4>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	22af      	movs	r2, #175	@ 0xaf
 80013c2:	0092      	lsls	r2, r2, #2
 80013c4:	4353      	muls	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
    speed_control_32 = speed_control_32 >> 10;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	0a9b      	lsrs	r3, r3, #10
 80013cc:	60bb      	str	r3, [r7, #8]
    speed_control = (uint16_t) speed_control_32;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	801a      	strh	r2, [r3, #0]
    //speed_control = (speed_adc_10_bit/1024)*883
        if(speed_control <= (127-12)){ //inequality is correct!
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	2b73      	cmp	r3, #115	@ 0x73
 80013da:	d80a      	bhi.n	80013f2 <Process_TIM16_Raw_Start_Value_and_Prescaler+0x5a>
            TIM16_raw_start_value = (uint8_t) speed_control + 12; //set CCR
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	881b      	ldrh	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	330c      	adds	r3, #12
 80013e4:	001a      	movs	r2, r3
 80013e6:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <Process_TIM16_Raw_Start_Value_and_Prescaler+0xa8>)
 80013e8:	601a      	str	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <Process_TIM16_Raw_Start_Value_and_Prescaler+0xac>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	701a      	strb	r2, [r3, #0]
 80013f0:	e01d      	b.n	800142e <Process_TIM16_Raw_Start_Value_and_Prescaler+0x96>
        }
        else{ 	//(speed_control > (127-12))
            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	220e      	movs	r2, #14
 80013f6:	18ba      	adds	r2, r7, r2
 80013f8:	8812      	ldrh	r2, [r2, #0]
 80013fa:	3a73      	subs	r2, #115	@ 0x73
 80013fc:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	09db      	lsrs	r3, r3, #7
 8001404:	b29a      	uxth	r2, r3
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	01db      	lsls	r3, r3, #7
 8001416:	b2db      	uxtb	r3, r3
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	b2db      	uxtb	r3, r3
 800141c:	001a      	movs	r2, r3
 800141e:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <Process_TIM16_Raw_Start_Value_and_Prescaler+0xa8>)
 8001420:	601a      	str	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3302      	adds	r3, #2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <Process_TIM16_Raw_Start_Value_and_Prescaler+0xac>)
 800142c:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200003d6 	.word	0x200003d6
 800143c:	200003d8 	.word	0x200003d8
 8001440:	200003f0 	.word	0x200003f0
 8001444:	200003f4 	.word	0x200003f4

08001448 <Adjust_and_Set_TIM16_Prescaler>:


uint8_t Adjust_and_Set_TIM16_Prescaler(void){
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

    if(TIM16_prescaler_adjust == DIVIDE_BY_TWO){
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <Adjust_and_Set_TIM16_Prescaler+0x84>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d107      	bne.n	8001466 <Adjust_and_Set_TIM16_Prescaler+0x1e>
        TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 1;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <Adjust_and_Set_TIM16_Prescaler+0x88>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b1c      	ldr	r3, [pc, #112]	@ (80014d4 <Adjust_and_Set_TIM16_Prescaler+0x8c>)
 8001462:	701a      	strb	r2, [r3, #0]
 8001464:	e023      	b.n	80014ae <Adjust_and_Set_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == DIVIDE_BY_FOUR){
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <Adjust_and_Set_TIM16_Prescaler+0x84>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b03      	cmp	r3, #3
 800146e:	d107      	bne.n	8001480 <Adjust_and_Set_TIM16_Prescaler+0x38>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index + 2;
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <Adjust_and_Set_TIM16_Prescaler+0x88>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	3302      	adds	r3, #2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <Adjust_and_Set_TIM16_Prescaler+0x8c>)
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e016      	b.n	80014ae <Adjust_and_Set_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == MULTIPLY_BY_TWO){
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <Adjust_and_Set_TIM16_Prescaler+0x84>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d107      	bne.n	800149a <Adjust_and_Set_TIM16_Prescaler+0x52>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <Adjust_and_Set_TIM16_Prescaler+0x88>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	3b01      	subs	r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b0f      	ldr	r3, [pc, #60]	@ (80014d4 <Adjust_and_Set_TIM16_Prescaler+0x8c>)
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	e009      	b.n	80014ae <Adjust_and_Set_TIM16_Prescaler+0x66>
    }
    else if(TIM16_prescaler_adjust == DO_NOTHING){
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <Adjust_and_Set_TIM16_Prescaler+0x84>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d104      	bne.n	80014ae <Adjust_and_Set_TIM16_Prescaler+0x66>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	@ (80014d0 <Adjust_and_Set_TIM16_Prescaler+0x88>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <Adjust_and_Set_TIM16_Prescaler+0x8c>)
 80014ac:	701a      	strb	r2, [r3, #0]
    }
    __HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index]) - 1); //have to take one off the divisor
 80014ae:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <Adjust_and_Set_TIM16_Prescaler+0x8c>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	001a      	movs	r2, r3
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <Adjust_and_Set_TIM16_Prescaler+0x90>)
 80014b8:	0052      	lsls	r2, r2, #1
 80014ba:	5ad3      	ldrh	r3, [r2, r3]
 80014bc:	1e5a      	subs	r2, r3, #1
 80014be:	4b07      	ldr	r3, [pc, #28]	@ (80014dc <Adjust_and_Set_TIM16_Prescaler+0x94>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
    return 1;
 80014c4:	2301      	movs	r3, #1
}
 80014c6:	0018      	movs	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200003ec 	.word	0x200003ec
 80014d0:	200003f4 	.word	0x200003f4
 80014d4:	200003f8 	.word	0x200003f8
 80014d8:	08006308 	.word	0x08006308
 80014dc:	200001c8 	.word	0x200001c8

080014e0 <Shorten_Period>:


#if SYMMETRY_ON_OR_OFF == 1

    uint8_t Shorten_Period(void){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
        #if SYMMETRY_ADC_RESOLUTION == 8
            uint32_t twofiftysix_minus_start_value_final = (((256-TIM16_raw_start_value)*(SHORTEN_POWER_OF_TWO_CONSTANT_8_BIT_SYM+(24*current_symmetry)))>>SHORTEN_POWER_OF_TWO_DIVISOR_8_BIT_SYM);
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <Shorten_Period+0x48>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2280      	movs	r2, #128	@ 0x80
 80014ec:	0052      	lsls	r2, r2, #1
 80014ee:	1ad1      	subs	r1, r2, r3
 80014f0:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <Shorten_Period+0x4c>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	0013      	movs	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	189b      	adds	r3, r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	2280      	movs	r2, #128	@ 0x80
 80014fe:	00d2      	lsls	r2, r2, #3
 8001500:	4694      	mov	ip, r2
 8001502:	4463      	add	r3, ip
 8001504:	434b      	muls	r3, r1
 8001506:	0b1b      	lsrs	r3, r3, #12
 8001508:	607b      	str	r3, [r7, #4]
        #endif
        #if SYMMETRY_ADC_RESOLUTION == 10
            uint32_t twofiftysix_minus_start_value_final = (((256-TIM16_raw_start_value)*(SHORTEN_POWER_OF_TWO_CONSTANT_10_BIT_SYM+(24*current_symmetry)))>>SHORTEN_POWER_OF_TWO_DIVISOR_10_BIT_SYM);
        #endif

        TIM16_final_start_value = (256-twofiftysix_minus_start_value_final);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2280      	movs	r2, #128	@ 0x80
 800150e:	0052      	lsls	r2, r2, #1
 8001510:	1ad2      	subs	r2, r2, r3
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <Shorten_Period+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
        TIM16_prescaler_adjust = DO_NOTHING;
 8001516:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <Shorten_Period+0x54>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
        return 1;
 800151c:	2301      	movs	r3, #1
    }
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b002      	add	sp, #8
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	200003f0 	.word	0x200003f0
 800152c:	200003e0 	.word	0x200003e0
 8001530:	200003e8 	.word	0x200003e8
 8001534:	200003ec 	.word	0x200003ec

08001538 <Lengthen_Period>:

    uint8_t Lengthen_Period(void){
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
        #if SYMMETRY_ADC_RESOLUTION == 8
            uint32_t twofiftysix_minus_start_value_final = (((256-TIM16_raw_start_value)*(LENGTHEN_CONSTANT_8_BIT_SYM-(3*current_symmetry)))>>LENGTHEN_POWER_OF_TWO_DIVISOR_8_BIT_SYM);
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <Lengthen_Period+0x68>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2280      	movs	r2, #128	@ 0x80
 8001544:	0052      	lsls	r2, r2, #1
 8001546:	1ad1      	subs	r1, r2, r3
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <Lengthen_Period+0x6c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	0013      	movs	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	189b      	adds	r3, r3, r2
 8001552:	22e0      	movs	r2, #224	@ 0xe0
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	434b      	muls	r3, r1
 800155a:	0a5b      	lsrs	r3, r3, #9
 800155c:	607b      	str	r3, [r7, #4]
        #endif
        #if SYMMETRY_ADC_RESOLUTION == 10
            uint32_t twofiftysix_minus_start_value_final = (((256-TIM16_raw_start_value)*(LENGTHEN_CONSTANT_10_BIT_SYM-(3*current_symmetry)))>>LENGTHEN_POWER_OF_TWO_DIVISOR_10_BIT_SYM);
        #endif

        if(twofiftysix_minus_start_value_final > 256){
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	429a      	cmp	r2, r3
 8001566:	d90c      	bls.n	8001582 <Lengthen_Period+0x4a>
            twofiftysix_minus_start_value_final = (twofiftysix_minus_start_value_final >> 1);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	085b      	lsrs	r3, r3, #1
 800156c:	607b      	str	r3, [r7, #4]
            TIM16_final_start_value = (256-twofiftysix_minus_start_value_final);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2280      	movs	r2, #128	@ 0x80
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	1ad2      	subs	r2, r2, r3
 8001576:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <Lengthen_Period+0x70>)
 8001578:	601a      	str	r2, [r3, #0]
            TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <Lengthen_Period+0x74>)
 800157c:	2202      	movs	r2, #2
 800157e:	701a      	strb	r2, [r3, #0]
 8001580:	e008      	b.n	8001594 <Lengthen_Period+0x5c>
        }
        else{
            TIM16_final_start_value = 256-twofiftysix_minus_start_value_final;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2280      	movs	r2, #128	@ 0x80
 8001586:	0052      	lsls	r2, r2, #1
 8001588:	1ad2      	subs	r2, r2, r3
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <Lengthen_Period+0x70>)
 800158c:	601a      	str	r2, [r3, #0]
            TIM16_prescaler_adjust = DO_NOTHING;
 800158e:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <Lengthen_Period+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]
        }
        return 1;
 8001594:	2301      	movs	r3, #1
    }
 8001596:	0018      	movs	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	200003f0 	.word	0x200003f0
 80015a4:	200003e0 	.word	0x200003e0
 80015a8:	200003e8 	.word	0x200003e8
 80015ac:	200003ec 	.word	0x200003ec

080015b0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:
#endif


uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

    #if SYMMETRY_ON_OR_OFF == 1
        if(current_symmetry == SYMMETRY_ADC_HALF_SCALE){
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b80      	cmp	r3, #128	@ 0x80
 80015bc:	d107      	bne.n	80015ce <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e>
            TIM16_final_start_value = TIM16_raw_start_value;
 80015be:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb4>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b29      	ldr	r3, [pc, #164]	@ (8001668 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb8>)
 80015c4:	601a      	str	r2, [r3, #0]
            TIM16_prescaler_adjust = DO_NOTHING;
 80015c6:	4b29      	ldr	r3, [pc, #164]	@ (800166c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xbc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
 80015cc:	e02c      	b.n	8001628 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x78>
        }
        else{
            uint8_t symmetry_status = CCW;
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	2200      	movs	r2, #0
 80015d2:	701a      	strb	r2, [r3, #0]
            if(current_symmetry > SYMMETRY_ADC_HALF_SCALE){
 80015d4:	4b22      	ldr	r3, [pc, #136]	@ (8001660 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b80      	cmp	r3, #128	@ 0x80
 80015da:	d908      	bls.n	80015ee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3e>
                current_symmetry = SYMMETRY_ADC_FULL_SCALE - current_symmetry; //converts current_symmetry to 128 -> 0 range (same range as CCW regime, more or less)
 80015dc:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	22ff      	movs	r2, #255	@ 0xff
 80015e2:	1ad2      	subs	r2, r2, r3
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb0>)
 80015e6:	601a      	str	r2, [r3, #0]
                symmetry_status = CW;
 80015e8:	1dfb      	adds	r3, r7, #7
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
            }
            if(current_halfcycle == FIRST_HALFCYCLE){
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc0>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c>
                if(symmetry_status == CCW){
 80015f8:	1dfb      	adds	r3, r7, #7
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x56>
                    Shorten_Period();
 8001600:	f7ff ff6e 	bl	80014e0 <Shorten_Period>
 8001604:	e010      	b.n	8001628 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x78>
                }
                else{
                    Lengthen_Period();
 8001606:	f7ff ff97 	bl	8001538 <Lengthen_Period>
 800160a:	e00d      	b.n	8001628 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x78>
                }
            }
            else if(current_halfcycle == SECOND_HALFCYCLE){
 800160c:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc0>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x78>
                if(symmetry_status == CW){
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d102      	bne.n	8001624 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x74>
                    Shorten_Period();
 800161e:	f7ff ff5f 	bl	80014e0 <Shorten_Period>
 8001622:	e001      	b.n	8001628 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x78>
                }
                else{
                    Lengthen_Period();
 8001624:	f7ff ff88 	bl	8001538 <Lengthen_Period>
                }
            }
        }

        Adjust_and_Set_TIM16_Prescaler();
 8001628:	f7ff ff0e 	bl	8001448 <Adjust_and_Set_TIM16_Prescaler>

        //Adjust TMR0 for 2 instruction tick delay on update (for low prescaler values)
        if(TIM16_prescaler_divisors_final_index == 8){//prescaler is 1:1
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b08      	cmp	r3, #8
 8001634:	d105      	bne.n	8001642 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x92>
            TIM16_final_start_value = TIM16_final_start_value + 2; //(256-TMR0_final) needs to be 2 counts less
 8001636:	4b0c      	ldr	r3, [pc, #48]	@ (8001668 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1c9a      	adds	r2, r3, #2
 800163c:	4b0a      	ldr	r3, [pc, #40]	@ (8001668 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb8>)
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	e009      	b.n	8001656 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xa6>
        }
        else if(TIM16_prescaler_divisors_final_index == 7){//prescaler is 2:1
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	2b07      	cmp	r3, #7
 800164a:	d104      	bne.n	8001656 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xa6>
            TIM16_final_start_value = TIM16_final_start_value + 1; //(256-TMR0_final) needs to be 1 counts less
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb8>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4b05      	ldr	r3, [pc, #20]	@ (8001668 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb8>)
 8001654:	601a      	str	r2, [r3, #0]
        TIM16_final_start_value = TIM16_raw_start_value;
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_and_Set_TIM16_Prescaler();
    #endif

    return 1;
 8001656:	2301      	movs	r3, #1
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b002      	add	sp, #8
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200003e0 	.word	0x200003e0
 8001664:	200003f0 	.word	0x200003f0
 8001668:	200003e8 	.word	0x200003e8
 800166c:	200003ec 	.word	0x200003ec
 8001670:	200003e5 	.word	0x200003e5
 8001674:	200003f8 	.word	0x200003f8

08001678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800167c:	46c0      	nop			@ (mov r8, r8)
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001684:	480d      	ldr	r0, [pc, #52]	@ (80016bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001686:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001688:	f7ff fff6 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <LoopForever+0xe>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	@ (80016d0 <LoopForever+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016b2:	f004 fcf5 	bl	80060a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80016b6:	f7ff fbe1 	bl	8000e7c <main>

080016ba <LoopForever>:

LoopForever:
  b LoopForever
 80016ba:	e7fe      	b.n	80016ba <LoopForever>
  ldr   r0, =_estack
 80016bc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c8:	08006520 	.word	0x08006520
  ldr r2, =_sbss
 80016cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016d0:	2000040c 	.word	0x2000040c

080016d4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <HAL_Init+0x3c>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001714 <HAL_Init+0x3c>)
 80016ea:	2180      	movs	r1, #128	@ 0x80
 80016ec:	0049      	lsls	r1, r1, #1
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016f2:	2000      	movs	r0, #0
 80016f4:	f000 f810 	bl	8001718 <HAL_InitTick>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d003      	beq.n	8001704 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80016fc:	1dfb      	adds	r3, r7, #7
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
 8001702:	e001      	b.n	8001708 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001704:	f7ff fbd8 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b002      	add	sp, #8
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <HAL_InitTick+0x88>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d02b      	beq.n	8001788 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001730:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_InitTick+0x8c>)
 8001732:	681c      	ldr	r4, [r3, #0]
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <HAL_InitTick+0x88>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	0019      	movs	r1, r3
 800173a:	23fa      	movs	r3, #250	@ 0xfa
 800173c:	0098      	lsls	r0, r3, #2
 800173e:	f7fe fce1 	bl	8000104 <__udivsi3>
 8001742:	0003      	movs	r3, r0
 8001744:	0019      	movs	r1, r3
 8001746:	0020      	movs	r0, r4
 8001748:	f7fe fcdc 	bl	8000104 <__udivsi3>
 800174c:	0003      	movs	r3, r0
 800174e:	0018      	movs	r0, r3
 8001750:	f001 f9af 	bl	8002ab2 <HAL_SYSTICK_Config>
 8001754:	1e03      	subs	r3, r0, #0
 8001756:	d112      	bne.n	800177e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d80a      	bhi.n	8001774 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	2301      	movs	r3, #1
 8001762:	425b      	negs	r3, r3
 8001764:	2200      	movs	r2, #0
 8001766:	0018      	movs	r0, r3
 8001768:	f001 f97e 	bl	8002a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800176c:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <HAL_InitTick+0x90>)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	e00d      	b.n	8001790 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001774:	230f      	movs	r3, #15
 8001776:	18fb      	adds	r3, r7, r3
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e008      	b.n	8001790 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800177e:	230f      	movs	r3, #15
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	2201      	movs	r2, #1
 8001784:	701a      	strb	r2, [r3, #0]
 8001786:	e003      	b.n	8001790 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001788:	230f      	movs	r3, #15
 800178a:	18fb      	adds	r3, r7, r3
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001790:	230f      	movs	r3, #15
 8001792:	18fb      	adds	r3, r7, r3
 8001794:	781b      	ldrb	r3, [r3, #0]
}
 8001796:	0018      	movs	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	b005      	add	sp, #20
 800179c:	bd90      	pop	{r4, r7, pc}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017b0:	4b05      	ldr	r3, [pc, #20]	@ (80017c8 <HAL_IncTick+0x1c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	001a      	movs	r2, r3
 80017b6:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <HAL_IncTick+0x20>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	18d2      	adds	r2, r2, r3
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_IncTick+0x20>)
 80017be:	601a      	str	r2, [r3, #0]
}
 80017c0:	46c0      	nop			@ (mov r8, r8)
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	46c0      	nop			@ (mov r8, r8)
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000408 	.word	0x20000408

080017d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  return uwTick;
 80017d4:	4b02      	ldr	r3, [pc, #8]	@ (80017e0 <HAL_GetTick+0x10>)
 80017d6:	681b      	ldr	r3, [r3, #0]
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	46c0      	nop			@ (mov r8, r8)
 80017e0:	20000408 	.word	0x20000408

080017e4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80017f4:	401a      	ands	r2, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	b002      	add	sp, #8
 8001804:	bd80      	pop	{r7, pc}
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	fe3fffff 	.word	0xfe3fffff

0800180c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	23e0      	movs	r3, #224	@ 0xe0
 800181a:	045b      	lsls	r3, r3, #17
 800181c:	4013      	ands	r3, r2
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}

08001826 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	2104      	movs	r1, #4
 800183a:	400a      	ands	r2, r1
 800183c:	2107      	movs	r1, #7
 800183e:	4091      	lsls	r1, r2
 8001840:	000a      	movs	r2, r1
 8001842:	43d2      	mvns	r2, r2
 8001844:	401a      	ands	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	2104      	movs	r1, #4
 800184a:	400b      	ands	r3, r1
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4099      	lsls	r1, r3
 8001850:	000b      	movs	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b004      	add	sp, #16
 800185e:	bd80      	pop	{r7, pc}

08001860 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	2104      	movs	r1, #4
 8001872:	400a      	ands	r2, r1
 8001874:	2107      	movs	r1, #7
 8001876:	4091      	lsls	r1, r2
 8001878:	000a      	movs	r2, r1
 800187a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2104      	movs	r1, #4
 8001880:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001882:	40da      	lsrs	r2, r3
 8001884:	0013      	movs	r3, r2
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}

0800188e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	23c0      	movs	r3, #192	@ 0xc0
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	4013      	ands	r3, r2
 80018a0:	d101      	bne.n	80018a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	0018      	movs	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	211f      	movs	r1, #31
 80018c4:	400a      	ands	r2, r1
 80018c6:	210f      	movs	r1, #15
 80018c8:	4091      	lsls	r1, r2
 80018ca:	000a      	movs	r2, r1
 80018cc:	43d2      	mvns	r2, r2
 80018ce:	401a      	ands	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	210f      	movs	r1, #15
 80018d6:	4019      	ands	r1, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	201f      	movs	r0, #31
 80018dc:	4003      	ands	r3, r0
 80018de:	4099      	lsls	r1, r3
 80018e0:	000b      	movs	r3, r1
 80018e2:	431a      	orrs	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80018e8:	46c0      	nop			@ (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b004      	add	sp, #16
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	035b      	lsls	r3, r3, #13
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800190a:	46c0      	nop			@ (mov r8, r8)
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}

08001912 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	0352      	lsls	r2, r2, #13
 8001924:	0b52      	lsrs	r2, r2, #13
 8001926:	43d2      	mvns	r2, r2
 8001928:	401a      	ands	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	43d2      	mvns	r2, r2
 800194e:	401a      	ands	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	400b      	ands	r3, r1
 8001958:	4904      	ldr	r1, [pc, #16]	@ (800196c <LL_ADC_SetChannelSamplingTime+0x34>)
 800195a:	400b      	ands	r3, r1
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	07ffff00 	.word	0x07ffff00

08001970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <LL_ADC_EnableInternalRegulator+0x24>)
 800197e:	4013      	ands	r3, r2
 8001980:	2280      	movs	r2, #128	@ 0x80
 8001982:	0552      	lsls	r2, r2, #21
 8001984:	431a      	orrs	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800198a:	46c0      	nop			@ (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	6fffffe8 	.word	0x6fffffe8

08001998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	2380      	movs	r3, #128	@ 0x80
 80019a6:	055b      	lsls	r3, r3, #21
 80019a8:	401a      	ands	r2, r3
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	055b      	lsls	r3, r3, #21
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d101      	bne.n	80019b6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b002      	add	sp, #8
 80019be:	bd80      	pop	{r7, pc}

080019c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	4a04      	ldr	r2, [pc, #16]	@ (80019e0 <LL_ADC_Enable+0x20>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	2201      	movs	r2, #1
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	7fffffe8 	.word	0x7fffffe8

080019e4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <LL_ADC_Disable+0x20>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	2202      	movs	r2, #2
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019fc:	46c0      	nop			@ (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	7fffffe8 	.word	0x7fffffe8

08001a08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d101      	bne.n	8001a20 <LL_ADC_IsEnabled+0x18>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e000      	b.n	8001a22 <LL_ADC_IsEnabled+0x1a>
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	0018      	movs	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	b002      	add	sp, #8
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2202      	movs	r2, #2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d101      	bne.n	8001a42 <LL_ADC_IsDisableOngoing+0x18>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <LL_ADC_IsDisableOngoing+0x1a>
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <LL_ADC_REG_StartConversion+0x20>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b002      	add	sp, #8
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	7fffffe8 	.word	0x7fffffe8

08001a70 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <LL_ADC_REG_StopConversion+0x20>)
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2210      	movs	r2, #16
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001a88:	46c0      	nop			@ (mov r8, r8)
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b002      	add	sp, #8
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	7fffffe8 	.word	0x7fffffe8

08001a94 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b04      	cmp	r3, #4
 8001aa6:	d101      	bne.n	8001aac <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	0018      	movs	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	231f      	movs	r3, #31
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e19f      	b.n	8001e1e <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d12a      	bne.n	8001b3c <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4acf      	ldr	r2, [pc, #828]	@ (8001e28 <HAL_ADC_Init+0x370>)
 8001aea:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4acf      	ldr	r2, [pc, #828]	@ (8001e2c <HAL_ADC_Init+0x374>)
 8001af0:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4ace      	ldr	r2, [pc, #824]	@ (8001e30 <HAL_ADC_Init+0x378>)
 8001af6:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4ace      	ldr	r2, [pc, #824]	@ (8001e34 <HAL_ADC_Init+0x37c>)
 8001afc:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4acd      	ldr	r2, [pc, #820]	@ (8001e38 <HAL_ADC_Init+0x380>)
 8001b02:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4acd      	ldr	r2, [pc, #820]	@ (8001e3c <HAL_ADC_Init+0x384>)
 8001b08:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4acc      	ldr	r2, [pc, #816]	@ (8001e40 <HAL_ADC_Init+0x388>)
 8001b0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	589b      	ldr	r3, [r3, r2]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d103      	bne.n	8001b22 <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2180      	movs	r1, #128	@ 0x80
 8001b1e:	4ac9      	ldr	r2, [pc, #804]	@ (8001e44 <HAL_ADC_Init+0x38c>)
 8001b20:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	589b      	ldr	r3, [r3, r2]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	0010      	movs	r0, r2
 8001b2c:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2254      	movs	r2, #84	@ 0x54
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ff29 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff ff0e 	bl	8001970 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b54:	4bbc      	ldr	r3, [pc, #752]	@ (8001e48 <HAL_ADC_Init+0x390>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	49bc      	ldr	r1, [pc, #752]	@ (8001e4c <HAL_ADC_Init+0x394>)
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fad2 	bl	8000104 <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	3301      	adds	r3, #1
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b68:	e002      	b.n	8001b70 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f9      	bne.n	8001b6a <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f7ff ff0c 	bl	8001998 <LL_ADC_IsInternalRegulatorEnabled>
 8001b80:	1e03      	subs	r3, r0, #0
 8001b82:	d10f      	bne.n	8001ba4 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	2210      	movs	r2, #16
 8001b8a:	431a      	orrs	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b94:	2201      	movs	r2, #1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b9c:	231f      	movs	r3, #31
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f7ff ff73 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb6:	2210      	movs	r2, #16
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d000      	beq.n	8001bbe <HAL_ADC_Init+0x106>
 8001bbc:	e122      	b.n	8001e04 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d000      	beq.n	8001bc6 <HAL_ADC_Init+0x10e>
 8001bc4:	e11e      	b.n	8001e04 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bca:	4aa1      	ldr	r2, [pc, #644]	@ (8001e50 <HAL_ADC_Init+0x398>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2202      	movs	r2, #2
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff ff14 	bl	8001a08 <LL_ADC_IsEnabled>
 8001be0:	1e03      	subs	r3, r0, #0
 8001be2:	d000      	beq.n	8001be6 <HAL_ADC_Init+0x12e>
 8001be4:	e0ad      	b.n	8001d42 <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	7e1b      	ldrb	r3, [r3, #24]
 8001bee:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001bf0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7e5b      	ldrb	r3, [r3, #25]
 8001bf6:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001bf8:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7e9b      	ldrb	r3, [r3, #26]
 8001bfe:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001c00:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_ADC_Init+0x158>
 8001c0a:	2380      	movs	r3, #128	@ 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	e000      	b.n	8001c12 <HAL_ADC_Init+0x15a>
 8001c10:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001c12:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001c18:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	da04      	bge.n	8001c2c <HAL_ADC_Init+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	e001      	b.n	8001c30 <HAL_ADC_Init+0x178>
 8001c2c:	2380      	movs	r3, #128	@ 0x80
 8001c2e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001c30:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	212c      	movs	r1, #44	@ 0x2c
 8001c36:	5c5b      	ldrb	r3, [r3, r1]
 8001c38:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001c3a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2220      	movs	r2, #32
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d115      	bne.n	8001c78 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e9b      	ldrb	r3, [r3, #26]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	2280      	movs	r2, #128	@ 0x80
 8001c58:	0252      	lsls	r2, r2, #9
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	e00b      	b.n	8001c78 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c64:	2220      	movs	r2, #32
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c70:	2201      	movs	r2, #1
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c84:	23e0      	movs	r3, #224	@ 0xe0
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	4a6d      	ldr	r2, [pc, #436]	@ (8001e54 <HAL_ADC_Init+0x39c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	0019      	movs	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	0f9b      	lsrs	r3, r3, #30
 8001cb2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	223c      	movs	r2, #60	@ 0x3c
 8001cc4:	5c9b      	ldrb	r3, [r3, r2]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d111      	bne.n	8001cee <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0f9b      	lsrs	r3, r3, #30
 8001cd0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001cd6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001cdc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001ce2:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	@ (8001e58 <HAL_ADC_Init+0x3a0>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	430a      	orrs	r2, r1
 8001d02:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	23c0      	movs	r3, #192	@ 0xc0
 8001d0a:	061b      	lsls	r3, r3, #24
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d018      	beq.n	8001d42 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001d14:	2380      	movs	r3, #128	@ 0x80
 8001d16:	05db      	lsls	r3, r3, #23
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d012      	beq.n	8001d42 <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d00c      	beq.n	8001d42 <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001d28:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_ADC_Init+0x3a4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e60 <HAL_ADC_Init+0x3a8>)
 8001d2e:	4013      	ands	r3, r2
 8001d30:	0019      	movs	r1, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	23f0      	movs	r3, #240	@ 0xf0
 8001d38:	039b      	lsls	r3, r3, #14
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <HAL_ADC_Init+0x3a4>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	f7ff fd6a 	bl	8001826 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d5a:	4942      	ldr	r1, [pc, #264]	@ (8001e64 <HAL_ADC_Init+0x3ac>)
 8001d5c:	001a      	movs	r2, r3
 8001d5e:	f7ff fd62 	bl	8001826 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d109      	bne.n	8001d7e <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2110      	movs	r1, #16
 8001d76:	4249      	negs	r1, r1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d7c:	e018      	b.n	8001db0 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	039b      	lsls	r3, r3, #14
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d112      	bne.n	8001db0 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	221c      	movs	r2, #28
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2210      	movs	r2, #16
 8001d9e:	4252      	negs	r2, r2
 8001da0:	409a      	lsls	r2, r3
 8001da2:	0011      	movs	r1, r2
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	430a      	orrs	r2, r1
 8001dae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2100      	movs	r1, #0
 8001db6:	0018      	movs	r0, r3
 8001db8:	f7ff fd52 	bl	8001860 <LL_ADC_GetSamplingTimeCommonChannels>
 8001dbc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d10b      	bne.n	8001dde <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ddc:	e01c      	b.n	8001e18 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de2:	2212      	movs	r2, #18
 8001de4:	4393      	bics	r3, r2
 8001de6:	2210      	movs	r2, #16
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df2:	2201      	movs	r2, #1
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001dfa:	231f      	movs	r3, #31
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2201      	movs	r2, #1
 8001e00:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001e02:	e009      	b.n	8001e18 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e08:	2210      	movs	r2, #16
 8001e0a:	431a      	orrs	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e10:	231f      	movs	r3, #31
 8001e12:	18fb      	adds	r3, r7, r3
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001e18:	231f      	movs	r3, #31
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	781b      	ldrb	r3, [r3, #0]
}
 8001e1e:	0018      	movs	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b008      	add	sp, #32
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			@ (mov r8, r8)
 8001e28:	08002181 	.word	0x08002181
 8001e2c:	08002191 	.word	0x08002191
 8001e30:	080021a1 	.word	0x080021a1
 8001e34:	080021b1 	.word	0x080021b1
 8001e38:	080028e1 	.word	0x080028e1
 8001e3c:	080028f1 	.word	0x080028f1
 8001e40:	08002901 	.word	0x08002901
 8001e44:	08000f01 	.word	0x08000f01
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	00030d40 	.word	0x00030d40
 8001e50:	fffffefd 	.word	0xfffffefd
 8001e54:	ffde0201 	.word	0xffde0201
 8001e58:	1ffffc02 	.word	0x1ffffc02
 8001e5c:	40012708 	.word	0x40012708
 8001e60:	ffc3ffff 	.word	0xffc3ffff
 8001e64:	07ffff04 	.word	0x07ffff04

08001e68 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	230b      	movs	r3, #11
 8001e74:	18fb      	adds	r3, r7, r3
 8001e76:	1c0a      	adds	r2, r1, #0
 8001e78:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2317      	movs	r3, #23
 8001e7c:	18fb      	adds	r3, r7, r3
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d107      	bne.n	8001e98 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e06d      	b.n	8001f74 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d03a      	beq.n	8001f18 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 8001ea2:	230b      	movs	r3, #11
 8001ea4:	18fb      	adds	r3, r7, r3
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b0a      	cmp	r3, #10
 8001eaa:	d82a      	bhi.n	8001f02 <HAL_ADC_RegisterCallback+0x9a>
 8001eac:	009a      	lsls	r2, r3, #2
 8001eae:	4b33      	ldr	r3, [pc, #204]	@ (8001f7c <HAL_ADC_RegisterCallback+0x114>)
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8001ebc:	e057      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8001ec4:	e053      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8001ecc:	e04f      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8001ed4:	e04b      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8001edc:	e047      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8001ee4:	e043      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8001eec:	e03f      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	505a      	str	r2, [r3, r1]
        break;
 8001ef6:	e03a      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2184      	movs	r1, #132	@ 0x84
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	505a      	str	r2, [r3, r1]
        break;
 8001f00:	e035      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	2210      	movs	r2, #16
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8001f0e:	2317      	movs	r3, #23
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
        break;
 8001f16:	e02a      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d11c      	bne.n	8001f5a <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 8001f20:	230b      	movs	r3, #11
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b09      	cmp	r3, #9
 8001f28:	d002      	beq.n	8001f30 <HAL_ADC_RegisterCallback+0xc8>
 8001f2a:	2b0a      	cmp	r3, #10
 8001f2c:	d005      	beq.n	8001f3a <HAL_ADC_RegisterCallback+0xd2>
 8001f2e:	e009      	b.n	8001f44 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2180      	movs	r1, #128	@ 0x80
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	505a      	str	r2, [r3, r1]
        break;
 8001f38:	e019      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2184      	movs	r1, #132	@ 0x84
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	505a      	str	r2, [r3, r1]
        break;
 8001f42:	e014      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f48:	2210      	movs	r2, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8001f50:	2317      	movs	r3, #23
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
        break;
 8001f58:	e009      	b.n	8001f6e <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f5e:	2210      	movs	r2, #16
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 8001f66:	2317      	movs	r3, #23
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001f6e:	2317      	movs	r3, #23
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	781b      	ldrb	r3, [r3, #0]
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	b006      	add	sp, #24
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	0800637c 	.word	0x0800637c

08001f80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f7ff fd7f 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8001f96:	1e03      	subs	r3, r0, #0
 8001f98:	d16c      	bne.n	8002074 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2254      	movs	r2, #84	@ 0x54
 8001f9e:	5c9b      	ldrb	r3, [r3, r2]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d101      	bne.n	8001fa8 <HAL_ADC_Start_DMA+0x28>
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	e06c      	b.n	8002082 <HAL_ADC_Start_DMA+0x102>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2254      	movs	r2, #84	@ 0x54
 8001fac:	2101      	movs	r1, #1
 8001fae:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d113      	bne.n	8001fe4 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f7ff fd21 	bl	8001a08 <LL_ADC_IsEnabled>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d004      	beq.n	8001fd4 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f7ff fd08 	bl	80019e4 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe4:	2517      	movs	r5, #23
 8001fe6:	197c      	adds	r4, r7, r5
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 fb02 	bl	80025f4 <ADC_Enable>
 8001ff0:	0003      	movs	r3, r0
 8001ff2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ff4:	002c      	movs	r4, r5
 8001ff6:	193b      	adds	r3, r7, r4
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d13e      	bne.n	800207c <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002002:	4a22      	ldr	r2, [pc, #136]	@ (800208c <HAL_ADC_Start_DMA+0x10c>)
 8002004:	4013      	ands	r3, r2
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	0052      	lsls	r2, r2, #1
 800200a:	431a      	orrs	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800201a:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <HAL_ADC_Start_DMA+0x110>)
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <HAL_ADC_Start_DMA+0x114>)
 8002024:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800202a:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_ADC_Start_DMA+0x118>)
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	221c      	movs	r2, #28
 8002034:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2254      	movs	r2, #84	@ 0x54
 800203a:	2100      	movs	r1, #0
 800203c:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2110      	movs	r1, #16
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3340      	adds	r3, #64	@ 0x40
 8002058:	0019      	movs	r1, r3
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	193c      	adds	r4, r7, r4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f000 fdbe 	bl	8002be0 <HAL_DMA_Start_IT>
 8002064:	0003      	movs	r3, r0
 8002066:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0018      	movs	r0, r3
 800206e:	f7ff fced 	bl	8001a4c <LL_ADC_REG_StartConversion>
 8002072:	e003      	b.n	800207c <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002074:	2317      	movs	r3, #23
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	2202      	movs	r2, #2
 800207a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800207c:	2317      	movs	r3, #23
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b006      	add	sp, #24
 8002088:	bdb0      	pop	{r4, r5, r7, pc}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	fffff0fe 	.word	0xfffff0fe
 8002090:	080027bd 	.word	0x080027bd
 8002094:	08002889 	.word	0x08002889
 8002098:	080028a9 	.word	0x080028a9

0800209c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2254      	movs	r2, #84	@ 0x54
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d101      	bne.n	80020b2 <HAL_ADC_Stop_DMA+0x16>
 80020ae:	2302      	movs	r3, #2
 80020b0:	e05f      	b.n	8002172 <HAL_ADC_Stop_DMA+0xd6>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2254      	movs	r2, #84	@ 0x54
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80020ba:	250f      	movs	r5, #15
 80020bc:	197c      	adds	r4, r7, r5
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	0018      	movs	r0, r3
 80020c2:	f000 fa55 	bl	8002570 <ADC_ConversionStop>
 80020c6:	0003      	movs	r3, r0
 80020c8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80020ca:	0029      	movs	r1, r5
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d147      	bne.n	8002164 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d8:	2225      	movs	r2, #37	@ 0x25
 80020da:	5c9b      	ldrb	r3, [r3, r2]
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d112      	bne.n	8002108 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e6:	000d      	movs	r5, r1
 80020e8:	187c      	adds	r4, r7, r1
 80020ea:	0018      	movs	r0, r3
 80020ec:	f000 fdfe 	bl	8002cec <HAL_DMA_Abort>
 80020f0:	0003      	movs	r3, r0
 80020f2:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80020f4:	197b      	adds	r3, r7, r5
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002100:	2240      	movs	r2, #64	@ 0x40
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2110      	movs	r1, #16
 8002114:	438a      	bics	r2, r1
 8002116:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002118:	220f      	movs	r2, #15
 800211a:	18bb      	adds	r3, r7, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d107      	bne.n	8002132 <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002122:	18bc      	adds	r4, r7, r2
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f000 faea 	bl	8002700 <ADC_Disable>
 800212c:	0003      	movs	r3, r0
 800212e:	7023      	strb	r3, [r4, #0]
 8002130:	e003      	b.n	800213a <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f000 fae3 	bl	8002700 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800213a:	230f      	movs	r3, #15
 800213c:	18fb      	adds	r3, r7, r3
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002148:	4a0c      	ldr	r2, [pc, #48]	@ (800217c <HAL_ADC_Stop_DMA+0xe0>)
 800214a:	4013      	ands	r3, r2
 800214c:	2201      	movs	r2, #1
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2254      	movs	r2, #84	@ 0x54
 8002168:	2100      	movs	r1, #0
 800216a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	fffffefe 	.word	0xfffffefe

08002180 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002188:	46c0      	nop			@ (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	b002      	add	sp, #8
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80021a8:	46c0      	nop			@ (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ca:	2317      	movs	r3, #23
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2254      	movs	r2, #84	@ 0x54
 80021da:	5c9b      	ldrb	r3, [r3, r2]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x24>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e1c0      	b.n	8002566 <HAL_ADC_ConfigChannel+0x3a6>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2254      	movs	r2, #84	@ 0x54
 80021e8:	2101      	movs	r1, #1
 80021ea:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7ff fc4f 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 80021f6:	1e03      	subs	r3, r0, #0
 80021f8:	d000      	beq.n	80021fc <HAL_ADC_ConfigChannel+0x3c>
 80021fa:	e1a3      	b.n	8002544 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2b02      	cmp	r3, #2
 8002202:	d100      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x46>
 8002204:	e143      	b.n	800248e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	429a      	cmp	r2, r3
 8002210:	d004      	beq.n	800221c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002216:	4ac1      	ldr	r2, [pc, #772]	@ (800251c <HAL_ADC_ConfigChannel+0x35c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d108      	bne.n	800222e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	0019      	movs	r1, r3
 8002226:	0010      	movs	r0, r2
 8002228:	f7ff fb62 	bl	80018f0 <LL_ADC_REG_SetSequencerChAdd>
 800222c:	e0c9      	b.n	80023c2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	211f      	movs	r1, #31
 8002238:	400b      	ands	r3, r1
 800223a:	210f      	movs	r1, #15
 800223c:	4099      	lsls	r1, r3
 800223e:	000b      	movs	r3, r1
 8002240:	43db      	mvns	r3, r3
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	035b      	lsls	r3, r3, #13
 800224c:	0b5b      	lsrs	r3, r3, #13
 800224e:	d105      	bne.n	800225c <HAL_ADC_ConfigChannel+0x9c>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	0e9b      	lsrs	r3, r3, #26
 8002256:	221f      	movs	r2, #31
 8002258:	4013      	ands	r3, r2
 800225a:	e098      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2201      	movs	r2, #1
 8002262:	4013      	ands	r3, r2
 8002264:	d000      	beq.n	8002268 <HAL_ADC_ConfigChannel+0xa8>
 8002266:	e091      	b.n	800238c <HAL_ADC_ConfigChannel+0x1cc>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2202      	movs	r2, #2
 800226e:	4013      	ands	r3, r2
 8002270:	d000      	beq.n	8002274 <HAL_ADC_ConfigChannel+0xb4>
 8002272:	e089      	b.n	8002388 <HAL_ADC_ConfigChannel+0x1c8>
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2204      	movs	r2, #4
 800227a:	4013      	ands	r3, r2
 800227c:	d000      	beq.n	8002280 <HAL_ADC_ConfigChannel+0xc0>
 800227e:	e081      	b.n	8002384 <HAL_ADC_ConfigChannel+0x1c4>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2208      	movs	r2, #8
 8002286:	4013      	ands	r3, r2
 8002288:	d000      	beq.n	800228c <HAL_ADC_ConfigChannel+0xcc>
 800228a:	e079      	b.n	8002380 <HAL_ADC_ConfigChannel+0x1c0>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2210      	movs	r2, #16
 8002292:	4013      	ands	r3, r2
 8002294:	d000      	beq.n	8002298 <HAL_ADC_ConfigChannel+0xd8>
 8002296:	e071      	b.n	800237c <HAL_ADC_ConfigChannel+0x1bc>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	4013      	ands	r3, r2
 80022a0:	d000      	beq.n	80022a4 <HAL_ADC_ConfigChannel+0xe4>
 80022a2:	e069      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1b8>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2240      	movs	r2, #64	@ 0x40
 80022aa:	4013      	ands	r3, r2
 80022ac:	d000      	beq.n	80022b0 <HAL_ADC_ConfigChannel+0xf0>
 80022ae:	e061      	b.n	8002374 <HAL_ADC_ConfigChannel+0x1b4>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2280      	movs	r2, #128	@ 0x80
 80022b6:	4013      	ands	r3, r2
 80022b8:	d000      	beq.n	80022bc <HAL_ADC_ConfigChannel+0xfc>
 80022ba:	e059      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1b0>
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	@ 0x80
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4013      	ands	r3, r2
 80022c6:	d151      	bne.n	800236c <HAL_ADC_ConfigChannel+0x1ac>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4013      	ands	r3, r2
 80022d2:	d149      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1a8>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4013      	ands	r3, r2
 80022de:	d141      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x1a4>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4013      	ands	r3, r2
 80022ea:	d139      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1a0>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	015b      	lsls	r3, r3, #5
 80022f4:	4013      	ands	r3, r2
 80022f6:	d131      	bne.n	800235c <HAL_ADC_ConfigChannel+0x19c>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	@ 0x80
 80022fe:	019b      	lsls	r3, r3, #6
 8002300:	4013      	ands	r3, r2
 8002302:	d129      	bne.n	8002358 <HAL_ADC_ConfigChannel+0x198>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	2380      	movs	r3, #128	@ 0x80
 800230a:	01db      	lsls	r3, r3, #7
 800230c:	4013      	ands	r3, r2
 800230e:	d121      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x194>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	4013      	ands	r3, r2
 800231a:	d119      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x190>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	4013      	ands	r3, r2
 8002326:	d111      	bne.n	800234c <HAL_ADC_ConfigChannel+0x18c>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	029b      	lsls	r3, r3, #10
 8002330:	4013      	ands	r3, r2
 8002332:	d109      	bne.n	8002348 <HAL_ADC_ConfigChannel+0x188>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	2380      	movs	r3, #128	@ 0x80
 800233a:	02db      	lsls	r3, r3, #11
 800233c:	4013      	ands	r3, r2
 800233e:	d001      	beq.n	8002344 <HAL_ADC_ConfigChannel+0x184>
 8002340:	2312      	movs	r3, #18
 8002342:	e024      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002344:	2300      	movs	r3, #0
 8002346:	e022      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002348:	2311      	movs	r3, #17
 800234a:	e020      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800234c:	2310      	movs	r3, #16
 800234e:	e01e      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002350:	230f      	movs	r3, #15
 8002352:	e01c      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002354:	230e      	movs	r3, #14
 8002356:	e01a      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002358:	230d      	movs	r3, #13
 800235a:	e018      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800235c:	230c      	movs	r3, #12
 800235e:	e016      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002360:	230b      	movs	r3, #11
 8002362:	e014      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002364:	230a      	movs	r3, #10
 8002366:	e012      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002368:	2309      	movs	r3, #9
 800236a:	e010      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800236c:	2308      	movs	r3, #8
 800236e:	e00e      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002370:	2307      	movs	r3, #7
 8002372:	e00c      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002374:	2306      	movs	r3, #6
 8002376:	e00a      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002378:	2305      	movs	r3, #5
 800237a:	e008      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800237c:	2304      	movs	r3, #4
 800237e:	e006      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002380:	2303      	movs	r3, #3
 8002382:	e004      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002384:	2302      	movs	r3, #2
 8002386:	e002      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <HAL_ADC_ConfigChannel+0x1ce>
 800238c:	2300      	movs	r3, #0
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	6852      	ldr	r2, [r2, #4]
 8002392:	201f      	movs	r0, #31
 8002394:	4002      	ands	r2, r0
 8002396:	4093      	lsls	r3, r2
 8002398:	000a      	movs	r2, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	089b      	lsrs	r3, r3, #2
 80023a6:	1c5a      	adds	r2, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d808      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	001a      	movs	r2, r3
 80023be:	f7ff fa77 	bl	80018b0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	001a      	movs	r2, r3
 80023d0:	f7ff fab2 	bl	8001938 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	db00      	blt.n	80023de <HAL_ADC_ConfigChannel+0x21e>
 80023dc:	e0bc      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023de:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7ff fa13 	bl	800180c <LL_ADC_GetCommonPathInternalCh>
 80023e6:	0003      	movs	r3, r0
 80023e8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4d      	ldr	r2, [pc, #308]	@ (8002524 <HAL_ADC_ConfigChannel+0x364>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d122      	bne.n	800243a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023fc:	d11d      	bne.n	800243a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2280      	movs	r2, #128	@ 0x80
 8002402:	0412      	lsls	r2, r2, #16
 8002404:	4313      	orrs	r3, r2
 8002406:	4a46      	ldr	r2, [pc, #280]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f7ff f9ea 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002410:	4b45      	ldr	r3, [pc, #276]	@ (8002528 <HAL_ADC_ConfigChannel+0x368>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4945      	ldr	r1, [pc, #276]	@ (800252c <HAL_ADC_ConfigChannel+0x36c>)
 8002416:	0018      	movs	r0, r3
 8002418:	f7fd fe74 	bl	8000104 <__udivsi3>
 800241c:	0003      	movs	r3, r0
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	0013      	movs	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	189b      	adds	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800242a:	e002      	b.n	8002432 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	3b01      	subs	r3, #1
 8002430:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1f9      	bne.n	800242c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002438:	e08e      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a3c      	ldr	r2, [pc, #240]	@ (8002530 <HAL_ADC_ConfigChannel+0x370>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d10e      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	4013      	ands	r3, r2
 800244c:	d109      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2280      	movs	r2, #128	@ 0x80
 8002452:	0452      	lsls	r2, r2, #17
 8002454:	4313      	orrs	r3, r2
 8002456:	4a32      	ldr	r2, [pc, #200]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 8002458:	0019      	movs	r1, r3
 800245a:	0010      	movs	r0, r2
 800245c:	f7ff f9c2 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
 8002460:	e07a      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a33      	ldr	r2, [pc, #204]	@ (8002534 <HAL_ADC_ConfigChannel+0x374>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d000      	beq.n	800246e <HAL_ADC_ConfigChannel+0x2ae>
 800246c:	e074      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	2380      	movs	r3, #128	@ 0x80
 8002472:	03db      	lsls	r3, r3, #15
 8002474:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002476:	d000      	beq.n	800247a <HAL_ADC_ConfigChannel+0x2ba>
 8002478:	e06e      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2280      	movs	r2, #128	@ 0x80
 800247e:	03d2      	lsls	r2, r2, #15
 8002480:	4313      	orrs	r3, r2
 8002482:	4a27      	ldr	r2, [pc, #156]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 8002484:	0019      	movs	r1, r3
 8002486:	0010      	movs	r0, r2
 8002488:	f7ff f9ac 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
 800248c:	e064      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691a      	ldr	r2, [r3, #16]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	429a      	cmp	r2, r3
 8002498:	d004      	beq.n	80024a4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800249e:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <HAL_ADC_ConfigChannel+0x35c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d107      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	0019      	movs	r1, r3
 80024ae:	0010      	movs	r0, r2
 80024b0:	f7ff fa2f 	bl	8001912 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	da4d      	bge.n	8002558 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024bc:	4b18      	ldr	r3, [pc, #96]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 80024be:	0018      	movs	r0, r3
 80024c0:	f7ff f9a4 	bl	800180c <LL_ADC_GetCommonPathInternalCh>
 80024c4:	0003      	movs	r3, r0
 80024c6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <HAL_ADC_ConfigChannel+0x364>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d108      	bne.n	80024e4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4a18      	ldr	r2, [pc, #96]	@ (8002538 <HAL_ADC_ConfigChannel+0x378>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 80024da:	0019      	movs	r1, r3
 80024dc:	0010      	movs	r0, r2
 80024de:	f7ff f981 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
 80024e2:	e039      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_ADC_ConfigChannel+0x370>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d108      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_ADC_ConfigChannel+0x37c>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f7ff f973 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
 80024fe:	e02b      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0b      	ldr	r2, [pc, #44]	@ (8002534 <HAL_ADC_ConfigChannel+0x374>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d126      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4a0c      	ldr	r2, [pc, #48]	@ (8002540 <HAL_ADC_ConfigChannel+0x380>)
 800250e:	4013      	ands	r3, r2
 8002510:	4a03      	ldr	r2, [pc, #12]	@ (8002520 <HAL_ADC_ConfigChannel+0x360>)
 8002512:	0019      	movs	r1, r3
 8002514:	0010      	movs	r0, r2
 8002516:	f7ff f965 	bl	80017e4 <LL_ADC_SetCommonPathInternalCh>
 800251a:	e01d      	b.n	8002558 <HAL_ADC_ConfigChannel+0x398>
 800251c:	80000004 	.word	0x80000004
 8002520:	40012708 	.word	0x40012708
 8002524:	b0001000 	.word	0xb0001000
 8002528:	20000000 	.word	0x20000000
 800252c:	00030d40 	.word	0x00030d40
 8002530:	b8004000 	.word	0xb8004000
 8002534:	b4002000 	.word	0xb4002000
 8002538:	ff7fffff 	.word	0xff7fffff
 800253c:	feffffff 	.word	0xfeffffff
 8002540:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002548:	2220      	movs	r2, #32
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002550:	2317      	movs	r3, #23
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2254      	movs	r2, #84	@ 0x54
 800255c:	2100      	movs	r1, #0
 800255e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002560:	2317      	movs	r3, #23
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	781b      	ldrb	r3, [r3, #0]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			@ (mov r8, r8)

08002570 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fa89 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d031      	beq.n	80025ea <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	0018      	movs	r0, r3
 800258c:	f7ff fa4d 	bl	8001a2a <LL_ADC_IsDisableOngoing>
 8002590:	1e03      	subs	r3, r0, #0
 8002592:	d104      	bne.n	800259e <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	0018      	movs	r0, r3
 800259a:	f7ff fa69 	bl	8001a70 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800259e:	f7ff f917 	bl	80017d0 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025a6:	e01a      	b.n	80025de <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80025a8:	f7ff f912 	bl	80017d0 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d913      	bls.n	80025de <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
 80025c0:	d00d      	beq.n	80025de <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025c6:	2210      	movs	r2, #16
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d2:	2201      	movs	r2, #1
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e006      	b.n	80025ec <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2204      	movs	r2, #4
 80025e6:	4013      	ands	r3, r2
 80025e8:	d1de      	bne.n	80025a8 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	0018      	movs	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b004      	add	sp, #16
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	0018      	movs	r0, r3
 8002606:	f7ff f9ff 	bl	8001a08 <LL_ADC_IsEnabled>
 800260a:	1e03      	subs	r3, r0, #0
 800260c:	d000      	beq.n	8002610 <ADC_Enable+0x1c>
 800260e:	e069      	b.n	80026e4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	4a36      	ldr	r2, [pc, #216]	@ (80026f0 <ADC_Enable+0xfc>)
 8002618:	4013      	ands	r3, r2
 800261a:	d00d      	beq.n	8002638 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002620:	2210      	movs	r2, #16
 8002622:	431a      	orrs	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262c:	2201      	movs	r2, #1
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e056      	b.n	80026e6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0018      	movs	r0, r3
 800263e:	f7ff f9bf 	bl	80019c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002642:	4b2c      	ldr	r3, [pc, #176]	@ (80026f4 <ADC_Enable+0x100>)
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff f8e1 	bl	800180c <LL_ADC_GetCommonPathInternalCh>
 800264a:	0002      	movs	r2, r0
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	4013      	ands	r3, r2
 8002652:	d00f      	beq.n	8002674 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002654:	4b28      	ldr	r3, [pc, #160]	@ (80026f8 <ADC_Enable+0x104>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4928      	ldr	r1, [pc, #160]	@ (80026fc <ADC_Enable+0x108>)
 800265a:	0018      	movs	r0, r3
 800265c:	f7fd fd52 	bl	8000104 <__udivsi3>
 8002660:	0003      	movs	r3, r0
 8002662:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002664:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002666:	e002      	b.n	800266e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	3b01      	subs	r3, #1
 800266c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f9      	bne.n	8002668 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e5b      	ldrb	r3, [r3, #25]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d033      	beq.n	80026e4 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800267c:	f7ff f8a8 	bl	80017d0 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002684:	e027      	b.n	80026d6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff f9bc 	bl	8001a08 <LL_ADC_IsEnabled>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d104      	bne.n	800269e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	0018      	movs	r0, r3
 800269a:	f7ff f991 	bl	80019c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800269e:	f7ff f897 	bl	80017d0 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d914      	bls.n	80026d6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2201      	movs	r2, #1
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d00d      	beq.n	80026d6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	2210      	movs	r2, #16
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	2201      	movs	r2, #1
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e007      	b.n	80026e6 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d1d0      	bne.n	8002686 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	80000017 	.word	0x80000017
 80026f4:	40012708 	.word	0x40012708
 80026f8:	20000000 	.word	0x20000000
 80026fc:	00030d40 	.word	0x00030d40

08002700 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	0018      	movs	r0, r3
 800270e:	f7ff f98c 	bl	8001a2a <LL_ADC_IsDisableOngoing>
 8002712:	0003      	movs	r3, r0
 8002714:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	0018      	movs	r0, r3
 800271c:	f7ff f974 	bl	8001a08 <LL_ADC_IsEnabled>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d046      	beq.n	80027b2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d143      	bne.n	80027b2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	2205      	movs	r2, #5
 8002732:	4013      	ands	r3, r2
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10d      	bne.n	8002754 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0018      	movs	r0, r3
 800273e:	f7ff f951 	bl	80019e4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2203      	movs	r2, #3
 8002748:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800274a:	f7ff f841 	bl	80017d0 <HAL_GetTick>
 800274e:	0003      	movs	r3, r0
 8002750:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002752:	e028      	b.n	80027a6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	2210      	movs	r2, #16
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002764:	2201      	movs	r2, #1
 8002766:	431a      	orrs	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e021      	b.n	80027b4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002770:	f7ff f82e 	bl	80017d0 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d913      	bls.n	80027a6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2201      	movs	r2, #1
 8002786:	4013      	ands	r3, r2
 8002788:	d00d      	beq.n	80027a6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278e:	2210      	movs	r2, #16
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279a:	2201      	movs	r2, #1
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e006      	b.n	80027b4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	d1de      	bne.n	8002770 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	0018      	movs	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b004      	add	sp, #16
 80027ba:	bd80      	pop	{r7, pc}

080027bc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ce:	2250      	movs	r2, #80	@ 0x50
 80027d0:	4013      	ands	r3, r2
 80027d2:	d142      	bne.n	800285a <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	0092      	lsls	r2, r2, #2
 80027dc:	431a      	orrs	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff f851 	bl	800188e <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d02e      	beq.n	800284e <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	7e9b      	ldrb	r3, [r3, #26]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12a      	bne.n	800284e <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2208      	movs	r2, #8
 8002800:	4013      	ands	r3, r2
 8002802:	2b08      	cmp	r3, #8
 8002804:	d123      	bne.n	800284e <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0018      	movs	r0, r3
 800280c:	f7ff f942 	bl	8001a94 <LL_ADC_REG_IsConversionOngoing>
 8002810:	1e03      	subs	r3, r0, #0
 8002812:	d110      	bne.n	8002836 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	210c      	movs	r1, #12
 8002820:	438a      	bics	r2, r1
 8002822:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002828:	4a16      	ldr	r2, [pc, #88]	@ (8002884 <ADC_DMAConvCplt+0xc8>)
 800282a:	4013      	ands	r3, r2
 800282c:	2201      	movs	r2, #1
 800282e:	431a      	orrs	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	659a      	str	r2, [r3, #88]	@ 0x58
 8002834:	e00b      	b.n	800284e <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	2220      	movs	r2, #32
 800283c:	431a      	orrs	r2, r3
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002846:	2201      	movs	r2, #1
 8002848:	431a      	orrs	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	0010      	movs	r0, r2
 8002856:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002858:	e010      	b.n	800287c <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285e:	2210      	movs	r2, #16
 8002860:	4013      	ands	r3, r2
 8002862:	d005      	beq.n	8002870 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	0010      	movs	r0, r2
 800286c:	4798      	blx	r3
}
 800286e:	e005      	b.n	800287c <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	0010      	movs	r0, r2
 800287a:	4798      	blx	r3
}
 800287c:	46c0      	nop			@ (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b004      	add	sp, #16
 8002882:	bd80      	pop	{r7, pc}
 8002884:	fffffefe 	.word	0xfffffefe

08002888 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	0010      	movs	r0, r2
 800289e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028a0:	46c0      	nop			@ (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b004      	add	sp, #16
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	431a      	orrs	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	2204      	movs	r2, #4
 80028c8:	431a      	orrs	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	0010      	movs	r0, r2
 80028d6:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028d8:	46c0      	nop			@ (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80028e8:	46c0      	nop			@ (mov r8, r8)
 80028ea:	46bd      	mov	sp, r7
 80028ec:	b002      	add	sp, #8
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b002      	add	sp, #8
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002908:	46c0      	nop			@ (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}

08002910 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	0002      	movs	r2, r0
 8002918:	1dfb      	adds	r3, r7, #7
 800291a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800291c:	1dfb      	adds	r3, r7, #7
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b7f      	cmp	r3, #127	@ 0x7f
 8002922:	d809      	bhi.n	8002938 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002924:	1dfb      	adds	r3, r7, #7
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	001a      	movs	r2, r3
 800292a:	231f      	movs	r3, #31
 800292c:	401a      	ands	r2, r3
 800292e:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <__NVIC_EnableIRQ+0x30>)
 8002930:	2101      	movs	r1, #1
 8002932:	4091      	lsls	r1, r2
 8002934:	000a      	movs	r2, r1
 8002936:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002938:	46c0      	nop			@ (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b002      	add	sp, #8
 800293e:	bd80      	pop	{r7, pc}
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	0002      	movs	r2, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	1dfb      	adds	r3, r7, #7
 8002950:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002952:	1dfb      	adds	r3, r7, #7
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b7f      	cmp	r3, #127	@ 0x7f
 8002958:	d828      	bhi.n	80029ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800295a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a18 <__NVIC_SetPriority+0xd4>)
 800295c:	1dfb      	adds	r3, r7, #7
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b25b      	sxtb	r3, r3
 8002962:	089b      	lsrs	r3, r3, #2
 8002964:	33c0      	adds	r3, #192	@ 0xc0
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	589b      	ldr	r3, [r3, r2]
 800296a:	1dfa      	adds	r2, r7, #7
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	0011      	movs	r1, r2
 8002970:	2203      	movs	r2, #3
 8002972:	400a      	ands	r2, r1
 8002974:	00d2      	lsls	r2, r2, #3
 8002976:	21ff      	movs	r1, #255	@ 0xff
 8002978:	4091      	lsls	r1, r2
 800297a:	000a      	movs	r2, r1
 800297c:	43d2      	mvns	r2, r2
 800297e:	401a      	ands	r2, r3
 8002980:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	22ff      	movs	r2, #255	@ 0xff
 8002988:	401a      	ands	r2, r3
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	0018      	movs	r0, r3
 8002990:	2303      	movs	r3, #3
 8002992:	4003      	ands	r3, r0
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002998:	481f      	ldr	r0, [pc, #124]	@ (8002a18 <__NVIC_SetPriority+0xd4>)
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	b25b      	sxtb	r3, r3
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	430a      	orrs	r2, r1
 80029a4:	33c0      	adds	r3, #192	@ 0xc0
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80029aa:	e031      	b.n	8002a10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029ac:	4a1b      	ldr	r2, [pc, #108]	@ (8002a1c <__NVIC_SetPriority+0xd8>)
 80029ae:	1dfb      	adds	r3, r7, #7
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	0019      	movs	r1, r3
 80029b4:	230f      	movs	r3, #15
 80029b6:	400b      	ands	r3, r1
 80029b8:	3b08      	subs	r3, #8
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3306      	adds	r3, #6
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	3304      	adds	r3, #4
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1dfa      	adds	r2, r7, #7
 80029c8:	7812      	ldrb	r2, [r2, #0]
 80029ca:	0011      	movs	r1, r2
 80029cc:	2203      	movs	r2, #3
 80029ce:	400a      	ands	r2, r1
 80029d0:	00d2      	lsls	r2, r2, #3
 80029d2:	21ff      	movs	r1, #255	@ 0xff
 80029d4:	4091      	lsls	r1, r2
 80029d6:	000a      	movs	r2, r1
 80029d8:	43d2      	mvns	r2, r2
 80029da:	401a      	ands	r2, r3
 80029dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	019b      	lsls	r3, r3, #6
 80029e2:	22ff      	movs	r2, #255	@ 0xff
 80029e4:	401a      	ands	r2, r3
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	0018      	movs	r0, r3
 80029ec:	2303      	movs	r3, #3
 80029ee:	4003      	ands	r3, r0
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80029f4:	4809      	ldr	r0, [pc, #36]	@ (8002a1c <__NVIC_SetPriority+0xd8>)
 80029f6:	1dfb      	adds	r3, r7, #7
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	001c      	movs	r4, r3
 80029fc:	230f      	movs	r3, #15
 80029fe:	4023      	ands	r3, r4
 8002a00:	3b08      	subs	r3, #8
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	430a      	orrs	r2, r1
 8002a06:	3306      	adds	r3, #6
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	18c3      	adds	r3, r0, r3
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	601a      	str	r2, [r3, #0]
}
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b003      	add	sp, #12
 8002a16:	bd90      	pop	{r4, r7, pc}
 8002a18:	e000e100 	.word	0xe000e100
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	1e5a      	subs	r2, r3, #1
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	045b      	lsls	r3, r3, #17
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d301      	bcc.n	8002a38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a34:	2301      	movs	r3, #1
 8002a36:	e010      	b.n	8002a5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <SysTick_Config+0x44>)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	3a01      	subs	r2, #1
 8002a3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a40:	2301      	movs	r3, #1
 8002a42:	425b      	negs	r3, r3
 8002a44:	2103      	movs	r1, #3
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff ff7c 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a4c:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <SysTick_Config+0x44>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a52:	4b04      	ldr	r3, [pc, #16]	@ (8002a64 <SysTick_Config+0x44>)
 8002a54:	2207      	movs	r2, #7
 8002a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	b002      	add	sp, #8
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	e000e010 	.word	0xe000e010

08002a68 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	210f      	movs	r1, #15
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	1c02      	adds	r2, r0, #0
 8002a78:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	187b      	adds	r3, r7, r1
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	0011      	movs	r1, r2
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	0002      	movs	r2, r0
 8002a9a:	1dfb      	adds	r3, r7, #7
 8002a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9e:	1dfb      	adds	r3, r7, #7
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	b25b      	sxtb	r3, r3
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f7ff ff33 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b002      	add	sp, #8
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f7ff ffaf 	bl	8002a20 <SysTick_Config>
 8002ac2:	0003      	movs	r3, r0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e077      	b.n	8002bce <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd8 <HAL_DMA_Init+0x10c>)
 8002ae4:	4694      	mov	ip, r2
 8002ae6:	4463      	add	r3, ip
 8002ae8:	2114      	movs	r1, #20
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7fd fb0a 	bl	8000104 <__udivsi3>
 8002af0:	0003      	movs	r3, r0
 8002af2:	009a      	lsls	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2225      	movs	r2, #37	@ 0x25
 8002afc:	2102      	movs	r1, #2
 8002afe:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4934      	ldr	r1, [pc, #208]	@ (8002bdc <HAL_DMA_Init+0x110>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	431a      	orrs	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fa23 	bl	8002f94 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	2380      	movs	r3, #128	@ 0x80
 8002b54:	01db      	lsls	r3, r3, #7
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d102      	bne.n	8002b60 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	213f      	movs	r1, #63	@ 0x3f
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002b76:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d011      	beq.n	8002ba4 <HAL_DMA_Init+0xd8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d80d      	bhi.n	8002ba4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 fa2e 	bl	8002fec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	e008      	b.n	8002bb6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2225      	movs	r2, #37	@ 0x25
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	@ 0x24
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b002      	add	sp, #8
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			@ (mov r8, r8)
 8002bd8:	bffdfff8 	.word	0xbffdfff8
 8002bdc:	ffff800f 	.word	0xffff800f

08002be0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2317      	movs	r3, #23
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2224      	movs	r2, #36	@ 0x24
 8002bfa:	5c9b      	ldrb	r3, [r3, r2]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_DMA_Start_IT+0x24>
 8002c00:	2302      	movs	r3, #2
 8002c02:	e06f      	b.n	8002ce4 <HAL_DMA_Start_IT+0x104>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2224      	movs	r2, #36	@ 0x24
 8002c08:	2101      	movs	r1, #1
 8002c0a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2225      	movs	r2, #37	@ 0x25
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d157      	bne.n	8002cc8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2225      	movs	r2, #37	@ 0x25
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	438a      	bics	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68b9      	ldr	r1, [r7, #8]
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f969 	bl	8002f14 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d008      	beq.n	8002c5c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	210e      	movs	r1, #14
 8002c56:	430a      	orrs	r2, r1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e00f      	b.n	8002c7c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2104      	movs	r1, #4
 8002c68:	438a      	bics	r2, r1
 8002c6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210a      	movs	r1, #10
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	025b      	lsls	r3, r3, #9
 8002c86:	4013      	ands	r3, r2
 8002c88:	d008      	beq.n	8002c9c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c94:	2180      	movs	r1, #128	@ 0x80
 8002c96:	0049      	lsls	r1, r1, #1
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cae:	2180      	movs	r1, #128	@ 0x80
 8002cb0:	0049      	lsls	r1, r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00a      	b.n	8002cde <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2224      	movs	r2, #36	@ 0x24
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8002cd6:	2317      	movs	r3, #23
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	2201      	movs	r2, #1
 8002cdc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002cde:	2317      	movs	r3, #23
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
}
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	b006      	add	sp, #24
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e050      	b.n	8002da0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2225      	movs	r2, #37	@ 0x25
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d008      	beq.n	8002d1c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	@ 0x24
 8002d14:	2100      	movs	r1, #0
 8002d16:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e041      	b.n	8002da0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	210e      	movs	r1, #14
 8002d28:	438a      	bics	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d36:	491c      	ldr	r1, [pc, #112]	@ (8002da8 <HAL_DMA_Abort+0xbc>)
 8002d38:	400a      	ands	r2, r1
 8002d3a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002d4c:	4b17      	ldr	r3, [pc, #92]	@ (8002dac <HAL_DMA_Abort+0xc0>)
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	221c      	movs	r2, #28
 8002d56:	4013      	ands	r3, r2
 8002d58:	2201      	movs	r2, #1
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	4b13      	ldr	r3, [pc, #76]	@ (8002dac <HAL_DMA_Abort+0xc0>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d7e:	490a      	ldr	r1, [pc, #40]	@ (8002da8 <HAL_DMA_Abort+0xbc>)
 8002d80:	400a      	ands	r2, r1
 8002d82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002d8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2225      	movs	r2, #37	@ 0x25
 8002d92:	2101      	movs	r1, #1
 8002d94:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2224      	movs	r2, #36	@ 0x24
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b002      	add	sp, #8
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	fffffeff 	.word	0xfffffeff
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002db8:	4b55      	ldr	r3, [pc, #340]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	221c      	movs	r2, #28
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2204      	movs	r2, #4
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	0013      	movs	r3, r2
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d027      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x7a>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	4013      	ands	r3, r2
 8002de0:	d023      	beq.n	8002e2a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2220      	movs	r2, #32
 8002dea:	4013      	ands	r3, r2
 8002dec:	d107      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2104      	movs	r1, #4
 8002dfa:	438a      	bics	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002e00:	6859      	ldr	r1, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	221c      	movs	r2, #28
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	4b40      	ldr	r3, [pc, #256]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d100      	bne.n	8002e1e <HAL_DMA_IRQHandler+0x6e>
 8002e1c:	e073      	b.n	8002f06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	0010      	movs	r0, r2
 8002e26:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002e28:	e06d      	b.n	8002f06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	221c      	movs	r2, #28
 8002e30:	4013      	ands	r3, r2
 8002e32:	2202      	movs	r2, #2
 8002e34:	409a      	lsls	r2, r3
 8002e36:	0013      	movs	r3, r2
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d02e      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xec>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2202      	movs	r2, #2
 8002e42:	4013      	ands	r3, r2
 8002e44:	d02a      	beq.n	8002e9c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d10b      	bne.n	8002e6a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	210a      	movs	r1, #10
 8002e5e:	438a      	bics	r2, r1
 8002e60:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2225      	movs	r2, #37	@ 0x25
 8002e66:	2101      	movs	r1, #1
 8002e68:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	221c      	movs	r2, #28
 8002e74:	4013      	ands	r3, r2
 8002e76:	2202      	movs	r2, #2
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2224      	movs	r2, #36	@ 0x24
 8002e84:	2100      	movs	r1, #0
 8002e86:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d03a      	beq.n	8002f06 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	0010      	movs	r0, r2
 8002e98:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002e9a:	e034      	b.n	8002f06 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea0:	221c      	movs	r2, #28
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2208      	movs	r2, #8
 8002ea6:	409a      	lsls	r2, r3
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4013      	ands	r3, r2
 8002eae:	d02b      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x158>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d027      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	210e      	movs	r1, #14
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	221c      	movs	r2, #28
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f10 <HAL_DMA_IRQHandler+0x160>)
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2225      	movs	r2, #37	@ 0x25
 8002ee8:	2101      	movs	r1, #1
 8002eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	0010      	movs	r0, r2
 8002f04:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	46c0      	nop			@ (mov r8, r8)
}
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b004      	add	sp, #16
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40020000 	.word	0x40020000

08002f14 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f2a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d004      	beq.n	8002f3e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f3c:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002f3e:	4b14      	ldr	r3, [pc, #80]	@ (8002f90 <DMA_SetConfig+0x7c>)
 8002f40:	6859      	ldr	r1, [r3, #4]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	221c      	movs	r2, #28
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <DMA_SetConfig+0x7c>)
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	683a      	ldr	r2, [r7, #0]
 8002f5a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b10      	cmp	r3, #16
 8002f62:	d108      	bne.n	8002f76 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002f74:	e007      	b.n	8002f86 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	60da      	str	r2, [r3, #12]
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	40020000 	.word	0x40020000

08002f94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	4a10      	ldr	r2, [pc, #64]	@ (8002fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002fa4:	4694      	mov	ip, r2
 8002fa6:	4463      	add	r3, ip
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	001a      	movs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	23ff      	movs	r3, #255	@ 0xff
 8002fb8:	4013      	ands	r3, r2
 8002fba:	3b08      	subs	r3, #8
 8002fbc:	2114      	movs	r1, #20
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7fd f8a0 	bl	8000104 <__udivsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a07      	ldr	r2, [pc, #28]	@ (8002fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002fcc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	221f      	movs	r2, #31
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	409a      	lsls	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b004      	add	sp, #16
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	10008200 	.word	0x10008200
 8002fe8:	40020880 	.word	0x40020880

08002fec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b084      	sub	sp, #16
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	223f      	movs	r2, #63	@ 0x3f
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003002:	4694      	mov	ip, r2
 8003004:	4463      	add	r3, ip
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	001a      	movs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003012:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3b01      	subs	r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	4013      	ands	r3, r2
 800301c:	2201      	movs	r2, #1
 800301e:	409a      	lsls	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003024:	46c0      	nop			@ (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	1000823f 	.word	0x1000823f
 8003030:	40020940 	.word	0x40020940

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003042:	e147      	b.n	80032d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	4091      	lsls	r1, r2
 800304e:	000a      	movs	r2, r1
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d100      	bne.n	800305c <HAL_GPIO_Init+0x28>
 800305a:	e138      	b.n	80032ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2203      	movs	r2, #3
 8003062:	4013      	ands	r3, r2
 8003064:	2b01      	cmp	r3, #1
 8003066:	d005      	beq.n	8003074 <HAL_GPIO_Init+0x40>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2203      	movs	r2, #3
 800306e:	4013      	ands	r3, r2
 8003070:	2b02      	cmp	r3, #2
 8003072:	d130      	bne.n	80030d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	409a      	lsls	r2, r3
 8003082:	0013      	movs	r3, r2
 8003084:	43da      	mvns	r2, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	0013      	movs	r3, r2
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030aa:	2201      	movs	r2, #1
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	409a      	lsls	r2, r3
 80030b0:	0013      	movs	r3, r2
 80030b2:	43da      	mvns	r2, r3
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	2201      	movs	r2, #1
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
 80030c8:	0013      	movs	r3, r2
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2203      	movs	r2, #3
 80030dc:	4013      	ands	r3, r2
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d017      	beq.n	8003112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	43da      	mvns	r2, r3
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	0013      	movs	r3, r2
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2203      	movs	r2, #3
 8003118:	4013      	ands	r3, r2
 800311a:	2b02      	cmp	r3, #2
 800311c:	d123      	bne.n	8003166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	58d3      	ldr	r3, [r2, r3]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	2207      	movs	r2, #7
 8003130:	4013      	ands	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	409a      	lsls	r2, r3
 8003138:	0013      	movs	r3, r2
 800313a:	43da      	mvns	r2, r3
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2107      	movs	r1, #7
 800314a:	400b      	ands	r3, r1
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	409a      	lsls	r2, r3
 8003150:	0013      	movs	r3, r2
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	0092      	lsls	r2, r2, #2
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	409a      	lsls	r2, r3
 8003174:	0013      	movs	r3, r2
 8003176:	43da      	mvns	r2, r3
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	2203      	movs	r2, #3
 8003184:	401a      	ands	r2, r3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	23c0      	movs	r3, #192	@ 0xc0
 80031a0:	029b      	lsls	r3, r3, #10
 80031a2:	4013      	ands	r3, r2
 80031a4:	d100      	bne.n	80031a8 <HAL_GPIO_Init+0x174>
 80031a6:	e092      	b.n	80032ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031a8:	4a50      	ldr	r2, [pc, #320]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	089b      	lsrs	r3, r3, #2
 80031ae:	3318      	adds	r3, #24
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	589b      	ldr	r3, [r3, r2]
 80031b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2203      	movs	r2, #3
 80031ba:	4013      	ands	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	220f      	movs	r2, #15
 80031c0:	409a      	lsls	r2, r3
 80031c2:	0013      	movs	r3, r2
 80031c4:	43da      	mvns	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	23a0      	movs	r3, #160	@ 0xa0
 80031d0:	05db      	lsls	r3, r3, #23
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x1ca>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a45      	ldr	r2, [pc, #276]	@ (80032f0 <HAL_GPIO_Init+0x2bc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x1c6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a44      	ldr	r2, [pc, #272]	@ (80032f4 <HAL_GPIO_Init+0x2c0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x1c2>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a43      	ldr	r2, [pc, #268]	@ (80032f8 <HAL_GPIO_Init+0x2c4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x1be>
 80031ee:	2303      	movs	r3, #3
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x1cc>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e004      	b.n	8003200 <HAL_GPIO_Init+0x1cc>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_Init+0x1cc>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x1cc>
 80031fe:	2300      	movs	r3, #0
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	2103      	movs	r1, #3
 8003204:	400a      	ands	r2, r1
 8003206:	00d2      	lsls	r2, r2, #3
 8003208:	4093      	lsls	r3, r2
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003210:	4936      	ldr	r1, [pc, #216]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3318      	adds	r3, #24
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800321e:	4b33      	ldr	r3, [pc, #204]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	43da      	mvns	r2, r3
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4013      	ands	r3, r2
 800322c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	035b      	lsls	r3, r3, #13
 8003236:	4013      	ands	r3, r2
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003242:	4b2a      	ldr	r3, [pc, #168]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003248:	4b28      	ldr	r3, [pc, #160]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	43da      	mvns	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	2380      	movs	r3, #128	@ 0x80
 800325e:	039b      	lsls	r3, r3, #14
 8003260:	4013      	ands	r3, r2
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326c:	4b1f      	ldr	r3, [pc, #124]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003272:	4a1e      	ldr	r2, [pc, #120]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 8003274:	2384      	movs	r3, #132	@ 0x84
 8003276:	58d3      	ldr	r3, [r2, r3]
 8003278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	43da      	mvns	r2, r3
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	4013      	ands	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	029b      	lsls	r3, r3, #10
 800328c:	4013      	ands	r3, r2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003298:	4914      	ldr	r1, [pc, #80]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 800329a:	2284      	movs	r2, #132	@ 0x84
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80032a0:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	58d3      	ldr	r3, [r2, r3]
 80032a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	43da      	mvns	r2, r3
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4013      	ands	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	025b      	lsls	r3, r3, #9
 80032ba:	4013      	ands	r3, r2
 80032bc:	d003      	beq.n	80032c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032c6:	4909      	ldr	r1, [pc, #36]	@ (80032ec <HAL_GPIO_Init+0x2b8>)
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	40da      	lsrs	r2, r3
 80032dc:	1e13      	subs	r3, r2, #0
 80032de:	d000      	beq.n	80032e2 <HAL_GPIO_Init+0x2ae>
 80032e0:	e6b0      	b.n	8003044 <HAL_GPIO_Init+0x10>
  }
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	46c0      	nop			@ (mov r8, r8)
 80032e6:	46bd      	mov	sp, r7
 80032e8:	b006      	add	sp, #24
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021800 	.word	0x40021800
 80032f0:	50000400 	.word	0x50000400
 80032f4:	50000800 	.word	0x50000800
 80032f8:	50000c00 	.word	0x50000c00

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	0008      	movs	r0, r1
 8003306:	0011      	movs	r1, r2
 8003308:	1cbb      	adds	r3, r7, #2
 800330a:	1c02      	adds	r2, r0, #0
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	1c7b      	adds	r3, r7, #1
 8003310:	1c0a      	adds	r2, r1, #0
 8003312:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003314:	1c7b      	adds	r3, r7, #1
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d004      	beq.n	8003326 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331c:	1cbb      	adds	r3, r7, #2
 800331e:	881a      	ldrh	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003324:	e003      	b.n	800332e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003326:	1cbb      	adds	r3, r7, #2
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	46bd      	mov	sp, r7
 8003332:	b002      	add	sp, #8
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003340:	4b19      	ldr	r3, [pc, #100]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	@ (80033ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003346:	4013      	ands	r3, r2
 8003348:	0019      	movs	r1, r3
 800334a:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	430a      	orrs	r2, r1
 8003350:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d11f      	bne.n	800339c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	0013      	movs	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	189b      	adds	r3, r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4912      	ldr	r1, [pc, #72]	@ (80033b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800336a:	0018      	movs	r0, r3
 800336c:	f7fc feca 	bl	8000104 <__udivsi3>
 8003370:	0003      	movs	r3, r0
 8003372:	3301      	adds	r3, #1
 8003374:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003376:	e008      	b.n	800338a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3b01      	subs	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
 8003384:	e001      	b.n	800338a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e009      	b.n	800339e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800338a:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	00db      	lsls	r3, r3, #3
 8003392:	401a      	ands	r2, r3
 8003394:	2380      	movs	r3, #128	@ 0x80
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	429a      	cmp	r2, r3
 800339a:	d0ed      	beq.n	8003378 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	0018      	movs	r0, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	40007000 	.word	0x40007000
 80033ac:	fffff9ff 	.word	0xfffff9ff
 80033b0:	20000000 	.word	0x20000000
 80033b4:	000f4240 	.word	0x000f4240

080033b8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <LL_RCC_GetAPB1Prescaler+0x14>)
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	23e0      	movs	r3, #224	@ 0xe0
 80033c2:	01db      	lsls	r3, r3, #7
 80033c4:	4013      	ands	r3, r2
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e2fe      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d100      	bne.n	80033ee <HAL_RCC_OscConfig+0x1e>
 80033ec:	e07c      	b.n	80034e8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ee:	4bc3      	ldr	r3, [pc, #780]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2238      	movs	r2, #56	@ 0x38
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033f8:	4bc0      	ldr	r3, [pc, #768]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2203      	movs	r2, #3
 80033fe:	4013      	ands	r3, r2
 8003400:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b10      	cmp	r3, #16
 8003406:	d102      	bne.n	800340e <HAL_RCC_OscConfig+0x3e>
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b03      	cmp	r3, #3
 800340c:	d002      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4bb9      	ldr	r3, [pc, #740]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	029b      	lsls	r3, r3, #10
 800341c:	4013      	ands	r3, r2
 800341e:	d062      	beq.n	80034e6 <HAL_RCC_OscConfig+0x116>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d15e      	bne.n	80034e6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e2d9      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	429a      	cmp	r2, r3
 8003436:	d107      	bne.n	8003448 <HAL_RCC_OscConfig+0x78>
 8003438:	4bb0      	ldr	r3, [pc, #704]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4baf      	ldr	r3, [pc, #700]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	0249      	lsls	r1, r1, #9
 8003442:	430a      	orrs	r2, r1
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	e020      	b.n	800348a <HAL_RCC_OscConfig+0xba>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	23a0      	movs	r3, #160	@ 0xa0
 800344e:	02db      	lsls	r3, r3, #11
 8003450:	429a      	cmp	r2, r3
 8003452:	d10e      	bne.n	8003472 <HAL_RCC_OscConfig+0xa2>
 8003454:	4ba9      	ldr	r3, [pc, #676]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4ba8      	ldr	r3, [pc, #672]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800345a:	2180      	movs	r1, #128	@ 0x80
 800345c:	02c9      	lsls	r1, r1, #11
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	4ba6      	ldr	r3, [pc, #664]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	4ba5      	ldr	r3, [pc, #660]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003468:	2180      	movs	r1, #128	@ 0x80
 800346a:	0249      	lsls	r1, r1, #9
 800346c:	430a      	orrs	r2, r1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e00b      	b.n	800348a <HAL_RCC_OscConfig+0xba>
 8003472:	4ba2      	ldr	r3, [pc, #648]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4ba1      	ldr	r3, [pc, #644]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003478:	49a1      	ldr	r1, [pc, #644]	@ (8003700 <HAL_RCC_OscConfig+0x330>)
 800347a:	400a      	ands	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	4b9f      	ldr	r3, [pc, #636]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b9e      	ldr	r3, [pc, #632]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003484:	499f      	ldr	r1, [pc, #636]	@ (8003704 <HAL_RCC_OscConfig+0x334>)
 8003486:	400a      	ands	r2, r1
 8003488:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d014      	beq.n	80034bc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fe f99d 	bl	80017d0 <HAL_GetTick>
 8003496:	0003      	movs	r3, r0
 8003498:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe f998 	bl	80017d0 <HAL_GetTick>
 80034a0:	0002      	movs	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	@ 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e298      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ae:	4b93      	ldr	r3, [pc, #588]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	2380      	movs	r3, #128	@ 0x80
 80034b4:	029b      	lsls	r3, r3, #10
 80034b6:	4013      	ands	r3, r2
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xcc>
 80034ba:	e015      	b.n	80034e8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe f988 	bl	80017d0 <HAL_GetTick>
 80034c0:	0003      	movs	r3, r0
 80034c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c6:	f7fe f983 	bl	80017d0 <HAL_GetTick>
 80034ca:	0002      	movs	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e283      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034d8:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	@ 0x80
 80034de:	029b      	lsls	r3, r3, #10
 80034e0:	4013      	ands	r3, r2
 80034e2:	d1f0      	bne.n	80034c6 <HAL_RCC_OscConfig+0xf6>
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d100      	bne.n	80034f4 <HAL_RCC_OscConfig+0x124>
 80034f2:	e099      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f4:	4b81      	ldr	r3, [pc, #516]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2238      	movs	r2, #56	@ 0x38
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fe:	4b7f      	ldr	r3, [pc, #508]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2203      	movs	r2, #3
 8003504:	4013      	ands	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	2b10      	cmp	r3, #16
 800350c:	d102      	bne.n	8003514 <HAL_RCC_OscConfig+0x144>
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d002      	beq.n	800351a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d135      	bne.n	8003586 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800351a:	4b78      	ldr	r3, [pc, #480]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4013      	ands	r3, r2
 8003524:	d005      	beq.n	8003532 <HAL_RCC_OscConfig+0x162>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e256      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b72      	ldr	r3, [pc, #456]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	4a74      	ldr	r2, [pc, #464]	@ (8003708 <HAL_RCC_OscConfig+0x338>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	021a      	lsls	r2, r3, #8
 8003542:	4b6e      	ldr	r3, [pc, #440]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d112      	bne.n	8003574 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800354e:	4b6b      	ldr	r3, [pc, #428]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a6e      	ldr	r2, [pc, #440]	@ (800370c <HAL_RCC_OscConfig+0x33c>)
 8003554:	4013      	ands	r3, r2
 8003556:	0019      	movs	r1, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691a      	ldr	r2, [r3, #16]
 800355c:	4b67      	ldr	r3, [pc, #412]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800355e:	430a      	orrs	r2, r1
 8003560:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003562:	4b66      	ldr	r3, [pc, #408]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0adb      	lsrs	r3, r3, #11
 8003568:	2207      	movs	r2, #7
 800356a:	4013      	ands	r3, r2
 800356c:	4a68      	ldr	r2, [pc, #416]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800356e:	40da      	lsrs	r2, r3
 8003570:	4b68      	ldr	r3, [pc, #416]	@ (8003714 <HAL_RCC_OscConfig+0x344>)
 8003572:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003574:	4b68      	ldr	r3, [pc, #416]	@ (8003718 <HAL_RCC_OscConfig+0x348>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	0018      	movs	r0, r3
 800357a:	f7fe f8cd 	bl	8001718 <HAL_InitTick>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d051      	beq.n	8003626 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e22c      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d030      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800358e:	4b5b      	ldr	r3, [pc, #364]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5e      	ldr	r2, [pc, #376]	@ (800370c <HAL_RCC_OscConfig+0x33c>)
 8003594:	4013      	ands	r3, r2
 8003596:	0019      	movs	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	4b57      	ldr	r3, [pc, #348]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800359e:	430a      	orrs	r2, r1
 80035a0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80035a2:	4b56      	ldr	r3, [pc, #344]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035a8:	2180      	movs	r1, #128	@ 0x80
 80035aa:	0049      	lsls	r1, r1, #1
 80035ac:	430a      	orrs	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe f90e 	bl	80017d0 <HAL_GetTick>
 80035b4:	0003      	movs	r3, r0
 80035b6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ba:	f7fe f909 	bl	80017d0 <HAL_GetTick>
 80035be:	0002      	movs	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e209      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035cc:	4b4b      	ldr	r3, [pc, #300]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4013      	ands	r3, r2
 80035d6:	d0f0      	beq.n	80035ba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d8:	4b48      	ldr	r3, [pc, #288]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <HAL_RCC_OscConfig+0x338>)
 80035de:	4013      	ands	r3, r2
 80035e0:	0019      	movs	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	4b44      	ldr	r3, [pc, #272]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80035f0:	4b42      	ldr	r3, [pc, #264]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80035f6:	4949      	ldr	r1, [pc, #292]	@ (800371c <HAL_RCC_OscConfig+0x34c>)
 80035f8:	400a      	ands	r2, r1
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f8e8 	bl	80017d0 <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fe f8e3 	bl	80017d0 <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1e3      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003618:	4b38      	ldr	r3, [pc, #224]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	@ 0x80
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4013      	ands	r3, r2
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x236>
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003626:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2208      	movs	r2, #8
 800362e:	4013      	ands	r3, r2
 8003630:	d047      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003632:	4b32      	ldr	r3, [pc, #200]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2238      	movs	r2, #56	@ 0x38
 8003638:	4013      	ands	r3, r2
 800363a:	2b18      	cmp	r3, #24
 800363c:	d10a      	bne.n	8003654 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800363e:	4b2f      	ldr	r3, [pc, #188]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003640:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003642:	2202      	movs	r2, #2
 8003644:	4013      	ands	r3, r2
 8003646:	d03c      	beq.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d138      	bne.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e1c5      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d019      	beq.n	8003690 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800365c:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 800365e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003660:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003662:	2101      	movs	r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe f8b2 	bl	80017d0 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003672:	f7fe f8ad 	bl	80017d0 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1ad      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003686:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003688:	2202      	movs	r2, #2
 800368a:	4013      	ands	r3, r2
 800368c:	d0f1      	beq.n	8003672 <HAL_RCC_OscConfig+0x2a2>
 800368e:	e018      	b.n	80036c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003690:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003692:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 8003696:	2101      	movs	r1, #1
 8003698:	438a      	bics	r2, r1
 800369a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369c:	f7fe f898 	bl	80017d0 <HAL_GetTick>
 80036a0:	0003      	movs	r3, r0
 80036a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fe f893 	bl	80017d0 <HAL_GetTick>
 80036aa:	0002      	movs	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e193      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b8:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	2202      	movs	r2, #2
 80036be:	4013      	ands	r3, r2
 80036c0:	d1f1      	bne.n	80036a6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	4013      	ands	r3, r2
 80036ca:	d100      	bne.n	80036ce <HAL_RCC_OscConfig+0x2fe>
 80036cc:	e0c6      	b.n	800385c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ce:	231f      	movs	r3, #31
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2238      	movs	r2, #56	@ 0x38
 80036dc:	4013      	ands	r3, r2
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d11e      	bne.n	8003720 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_RCC_OscConfig+0x32c>)
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d100      	bne.n	80036ee <HAL_RCC_OscConfig+0x31e>
 80036ec:	e0b6      	b.n	800385c <HAL_RCC_OscConfig+0x48c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d000      	beq.n	80036f8 <HAL_RCC_OscConfig+0x328>
 80036f6:	e0b1      	b.n	800385c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e171      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
 80036fc:	40021000 	.word	0x40021000
 8003700:	fffeffff 	.word	0xfffeffff
 8003704:	fffbffff 	.word	0xfffbffff
 8003708:	ffff80ff 	.word	0xffff80ff
 800370c:	ffffc7ff 	.word	0xffffc7ff
 8003710:	00f42400 	.word	0x00f42400
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004
 800371c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003720:	4bb1      	ldr	r3, [pc, #708]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003724:	2380      	movs	r3, #128	@ 0x80
 8003726:	055b      	lsls	r3, r3, #21
 8003728:	4013      	ands	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_RCC_OscConfig+0x362>
 8003730:	2300      	movs	r3, #0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d011      	beq.n	800375a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4bac      	ldr	r3, [pc, #688]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003738:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800373a:	4bab      	ldr	r3, [pc, #684]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800373c:	2180      	movs	r1, #128	@ 0x80
 800373e:	0549      	lsls	r1, r1, #21
 8003740:	430a      	orrs	r2, r1
 8003742:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003744:	4ba8      	ldr	r3, [pc, #672]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003746:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003748:	2380      	movs	r3, #128	@ 0x80
 800374a:	055b      	lsls	r3, r3, #21
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2201      	movs	r2, #1
 8003758:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375a:	4ba4      	ldr	r3, [pc, #656]	@ (80039ec <HAL_RCC_OscConfig+0x61c>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d11a      	bne.n	800379c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003766:	4ba1      	ldr	r3, [pc, #644]	@ (80039ec <HAL_RCC_OscConfig+0x61c>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4ba0      	ldr	r3, [pc, #640]	@ (80039ec <HAL_RCC_OscConfig+0x61c>)
 800376c:	2180      	movs	r1, #128	@ 0x80
 800376e:	0049      	lsls	r1, r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003774:	f7fe f82c 	bl	80017d0 <HAL_GetTick>
 8003778:	0003      	movs	r3, r0
 800377a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377e:	f7fe f827 	bl	80017d0 <HAL_GetTick>
 8003782:	0002      	movs	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e127      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003790:	4b96      	ldr	r3, [pc, #600]	@ (80039ec <HAL_RCC_OscConfig+0x61c>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	2380      	movs	r3, #128	@ 0x80
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4013      	ands	r3, r2
 800379a:	d0f0      	beq.n	800377e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d106      	bne.n	80037b2 <HAL_RCC_OscConfig+0x3e2>
 80037a4:	4b90      	ldr	r3, [pc, #576]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037a8:	4b8f      	ldr	r3, [pc, #572]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037aa:	2101      	movs	r1, #1
 80037ac:	430a      	orrs	r2, r1
 80037ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037b0:	e01c      	b.n	80037ec <HAL_RCC_OscConfig+0x41c>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	2b05      	cmp	r3, #5
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x404>
 80037ba:	4b8b      	ldr	r3, [pc, #556]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037be:	4b8a      	ldr	r3, [pc, #552]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037c0:	2104      	movs	r1, #4
 80037c2:	430a      	orrs	r2, r1
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037c6:	4b88      	ldr	r3, [pc, #544]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037ca:	4b87      	ldr	r3, [pc, #540]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037cc:	2101      	movs	r1, #1
 80037ce:	430a      	orrs	r2, r1
 80037d0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0x41c>
 80037d4:	4b84      	ldr	r3, [pc, #528]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037d8:	4b83      	ldr	r3, [pc, #524]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037da:	2101      	movs	r1, #1
 80037dc:	438a      	bics	r2, r1
 80037de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80037e0:	4b81      	ldr	r3, [pc, #516]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037e2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80037e4:	4b80      	ldr	r3, [pc, #512]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80037e6:	2104      	movs	r1, #4
 80037e8:	438a      	bics	r2, r1
 80037ea:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d014      	beq.n	800381e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f4:	f7fd ffec 	bl	80017d0 <HAL_GetTick>
 80037f8:	0003      	movs	r3, r0
 80037fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037fc:	e009      	b.n	8003812 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fd ffe7 	bl	80017d0 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	4a79      	ldr	r2, [pc, #484]	@ (80039f0 <HAL_RCC_OscConfig+0x620>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e0e6      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003812:	4b75      	ldr	r3, [pc, #468]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003816:	2202      	movs	r2, #2
 8003818:	4013      	ands	r3, r2
 800381a:	d0f0      	beq.n	80037fe <HAL_RCC_OscConfig+0x42e>
 800381c:	e013      	b.n	8003846 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd ffd7 	bl	80017d0 <HAL_GetTick>
 8003822:	0003      	movs	r3, r0
 8003824:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003826:	e009      	b.n	800383c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7fd ffd2 	bl	80017d0 <HAL_GetTick>
 800382c:	0002      	movs	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <HAL_RCC_OscConfig+0x620>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e0d1      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383c:	4b6a      	ldr	r3, [pc, #424]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003846:	231f      	movs	r3, #31
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003850:	4b65      	ldr	r3, [pc, #404]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003854:	4b64      	ldr	r3, [pc, #400]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003856:	4967      	ldr	r1, [pc, #412]	@ (80039f4 <HAL_RCC_OscConfig+0x624>)
 8003858:	400a      	ands	r2, r1
 800385a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d100      	bne.n	8003866 <HAL_RCC_OscConfig+0x496>
 8003864:	e0bb      	b.n	80039de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003866:	4b60      	ldr	r3, [pc, #384]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2238      	movs	r2, #56	@ 0x38
 800386c:	4013      	ands	r3, r2
 800386e:	2b10      	cmp	r3, #16
 8003870:	d100      	bne.n	8003874 <HAL_RCC_OscConfig+0x4a4>
 8003872:	e07b      	b.n	800396c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	2b02      	cmp	r3, #2
 800387a:	d156      	bne.n	800392a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387c:	4b5a      	ldr	r3, [pc, #360]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b59      	ldr	r3, [pc, #356]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003882:	495d      	ldr	r1, [pc, #372]	@ (80039f8 <HAL_RCC_OscConfig+0x628>)
 8003884:	400a      	ands	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003888:	f7fd ffa2 	bl	80017d0 <HAL_GetTick>
 800388c:	0003      	movs	r3, r0
 800388e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	e008      	b.n	80038a4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003892:	f7fd ff9d 	bl	80017d0 <HAL_GetTick>
 8003896:	0002      	movs	r2, r0
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e09d      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038a4:	4b50      	ldr	r3, [pc, #320]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	2380      	movs	r3, #128	@ 0x80
 80038aa:	049b      	lsls	r3, r3, #18
 80038ac:	4013      	ands	r3, r2
 80038ae:	d1f0      	bne.n	8003892 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b0:	4b4d      	ldr	r3, [pc, #308]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a51      	ldr	r2, [pc, #324]	@ (80039fc <HAL_RCC_OscConfig+0x62c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	021b      	lsls	r3, r3, #8
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	431a      	orrs	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038dc:	431a      	orrs	r2, r3
 80038de:	4b42      	ldr	r3, [pc, #264]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e4:	4b40      	ldr	r3, [pc, #256]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b3f      	ldr	r3, [pc, #252]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038ea:	2180      	movs	r1, #128	@ 0x80
 80038ec:	0449      	lsls	r1, r1, #17
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80038f2:	4b3d      	ldr	r3, [pc, #244]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	4b3c      	ldr	r3, [pc, #240]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 80038f8:	2180      	movs	r1, #128	@ 0x80
 80038fa:	0549      	lsls	r1, r1, #21
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003900:	f7fd ff66 	bl	80017d0 <HAL_GetTick>
 8003904:	0003      	movs	r3, r0
 8003906:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390a:	f7fd ff61 	bl	80017d0 <HAL_GetTick>
 800390e:	0002      	movs	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e061      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391c:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	2380      	movs	r3, #128	@ 0x80
 8003922:	049b      	lsls	r3, r3, #18
 8003924:	4013      	ands	r3, r2
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x53a>
 8003928:	e059      	b.n	80039de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b2f      	ldr	r3, [pc, #188]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b2e      	ldr	r3, [pc, #184]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003930:	4931      	ldr	r1, [pc, #196]	@ (80039f8 <HAL_RCC_OscConfig+0x628>)
 8003932:	400a      	ands	r2, r1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003936:	f7fd ff4b 	bl	80017d0 <HAL_GetTick>
 800393a:	0003      	movs	r3, r0
 800393c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fd ff46 	bl	80017d0 <HAL_GetTick>
 8003944:	0002      	movs	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e046      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003952:	4b25      	ldr	r3, [pc, #148]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	2380      	movs	r3, #128	@ 0x80
 8003958:	049b      	lsls	r3, r3, #18
 800395a:	4013      	ands	r3, r2
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800395e:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	4b21      	ldr	r3, [pc, #132]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 8003964:	4926      	ldr	r1, [pc, #152]	@ (8003a00 <HAL_RCC_OscConfig+0x630>)
 8003966:	400a      	ands	r2, r1
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	e038      	b.n	80039de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d101      	bne.n	8003978 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e033      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x618>)
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2203      	movs	r2, #3
 8003982:	401a      	ands	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	429a      	cmp	r2, r3
 800398a:	d126      	bne.n	80039da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2270      	movs	r2, #112	@ 0x70
 8003990:	401a      	ands	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11f      	bne.n	80039da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	23fe      	movs	r3, #254	@ 0xfe
 800399e:	01db      	lsls	r3, r3, #7
 80039a0:	401a      	ands	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d116      	bne.n	80039da <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	23f8      	movs	r3, #248	@ 0xf8
 80039b0:	039b      	lsls	r3, r3, #14
 80039b2:	401a      	ands	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d10e      	bne.n	80039da <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	23e0      	movs	r3, #224	@ 0xe0
 80039c0:	051b      	lsls	r3, r3, #20
 80039c2:	401a      	ands	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d106      	bne.n	80039da <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	0f5b      	lsrs	r3, r3, #29
 80039d0:	075a      	lsls	r2, r3, #29
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	b008      	add	sp, #32
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40007000 	.word	0x40007000
 80039f0:	00001388 	.word	0x00001388
 80039f4:	efffffff 	.word	0xefffffff
 80039f8:	feffffff 	.word	0xfeffffff
 80039fc:	11c1808c 	.word	0x11c1808c
 8003a00:	eefefffc 	.word	0xeefefffc

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0e9      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a18:	4b76      	ldr	r3, [pc, #472]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2207      	movs	r2, #7
 8003a1e:	4013      	ands	r3, r2
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d91e      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a26:	4b73      	ldr	r3, [pc, #460]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2207      	movs	r2, #7
 8003a2c:	4393      	bics	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	4b70      	ldr	r3, [pc, #448]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003a38:	f7fd feca 	bl	80017d0 <HAL_GetTick>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a40:	e009      	b.n	8003a56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a42:	f7fd fec5 	bl	80017d0 <HAL_GetTick>
 8003a46:	0002      	movs	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e0ca      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003a56:	4b67      	ldr	r3, [pc, #412]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2207      	movs	r2, #7
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d1ee      	bne.n	8003a42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d015      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2204      	movs	r2, #4
 8003a74:	4013      	ands	r3, r2
 8003a76:	d006      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003a78:	4b60      	ldr	r3, [pc, #384]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b5f      	ldr	r3, [pc, #380]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a7e:	21e0      	movs	r1, #224	@ 0xe0
 8003a80:	01c9      	lsls	r1, r1, #7
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a86:	4b5d      	ldr	r3, [pc, #372]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	4a5d      	ldr	r2, [pc, #372]	@ (8003c00 <HAL_RCC_ClockConfig+0x1fc>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b59      	ldr	r3, [pc, #356]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003a96:	430a      	orrs	r2, r1
 8003a98:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d057      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aac:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	029b      	lsls	r3, r3, #10
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d12b      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e097      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	049b      	lsls	r3, r3, #18
 8003acc:	4013      	ands	r3, r2
 8003ace:	d11f      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e08b      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d107      	bne.n	8003aec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003adc:	4b47      	ldr	r3, [pc, #284]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d113      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e07f      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003af4:	4b41      	ldr	r3, [pc, #260]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af8:	2202      	movs	r2, #2
 8003afa:	4013      	ands	r3, r2
 8003afc:	d108      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e074      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4b3e      	ldr	r3, [pc, #248]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b06:	2202      	movs	r2, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e06d      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b10:	4b3a      	ldr	r3, [pc, #232]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2207      	movs	r2, #7
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	4b37      	ldr	r3, [pc, #220]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b20:	430a      	orrs	r2, r1
 8003b22:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b24:	f7fd fe54 	bl	80017d0 <HAL_GetTick>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2e:	f7fd fe4f 	bl	80017d0 <HAL_GetTick>
 8003b32:	0002      	movs	r2, r0
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e054      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2e      	ldr	r3, [pc, #184]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	2238      	movs	r2, #56	@ 0x38
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1ec      	bne.n	8003b2e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b27      	ldr	r3, [pc, #156]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2207      	movs	r2, #7
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d21e      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b24      	ldr	r3, [pc, #144]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2207      	movs	r2, #7
 8003b68:	4393      	bics	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b74:	f7fd fe2c 	bl	80017d0 <HAL_GetTick>
 8003b78:	0003      	movs	r3, r0
 8003b7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b7c:	e009      	b.n	8003b92 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7e:	f7fd fe27 	bl	80017d0 <HAL_GetTick>
 8003b82:	0002      	movs	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1f4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e02c      	b.n	8003bec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b92:	4b18      	ldr	r3, [pc, #96]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2207      	movs	r2, #7
 8003b98:	4013      	ands	r3, r2
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1ee      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d009      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003baa:	4b14      	ldr	r3, [pc, #80]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <HAL_RCC_ClockConfig+0x200>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	0019      	movs	r1, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4b10      	ldr	r3, [pc, #64]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003bbe:	f000 f829 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8003bc2:	0001      	movs	r1, r0
 8003bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8003bfc <HAL_RCC_ClockConfig+0x1f8>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	220f      	movs	r2, #15
 8003bcc:	401a      	ands	r2, r3
 8003bce:	4b0e      	ldr	r3, [pc, #56]	@ (8003c08 <HAL_RCC_ClockConfig+0x204>)
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	58d3      	ldr	r3, [r2, r3]
 8003bd4:	221f      	movs	r2, #31
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	000a      	movs	r2, r1
 8003bda:	40da      	lsrs	r2, r3
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <HAL_RCC_ClockConfig+0x208>)
 8003bde:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <HAL_RCC_ClockConfig+0x20c>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fd fd97 	bl	8001718 <HAL_InitTick>
 8003bea:	0003      	movs	r3, r0
}
 8003bec:	0018      	movs	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	b004      	add	sp, #16
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	00001388 	.word	0x00001388
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	fffff0ff 	.word	0xfffff0ff
 8003c04:	ffff8fff 	.word	0xffff8fff
 8003c08:	0800631c 	.word	0x0800631c
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	20000004 	.word	0x20000004

08003c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c1a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2238      	movs	r2, #56	@ 0x38
 8003c20:	4013      	ands	r3, r2
 8003c22:	d10f      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003c24:	4b39      	ldr	r3, [pc, #228]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	0adb      	lsrs	r3, r3, #11
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	2201      	movs	r2, #1
 8003c30:	409a      	lsls	r2, r3
 8003c32:	0013      	movs	r3, r2
 8003c34:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003c36:	6839      	ldr	r1, [r7, #0]
 8003c38:	4835      	ldr	r0, [pc, #212]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c3a:	f7fc fa63 	bl	8000104 <__udivsi3>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	613b      	str	r3, [r7, #16]
 8003c42:	e05d      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c44:	4b31      	ldr	r3, [pc, #196]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2238      	movs	r2, #56	@ 0x38
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d102      	bne.n	8003c56 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c50:	4b30      	ldr	r3, [pc, #192]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e054      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c56:	4b2d      	ldr	r3, [pc, #180]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	2238      	movs	r2, #56	@ 0x38
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b10      	cmp	r3, #16
 8003c60:	d138      	bne.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003c62:	4b2a      	ldr	r3, [pc, #168]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c6c:	4b27      	ldr	r3, [pc, #156]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	2207      	movs	r2, #7
 8003c74:	4013      	ands	r3, r2
 8003c76:	3301      	adds	r3, #1
 8003c78:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b03      	cmp	r3, #3
 8003c7e:	d10d      	bne.n	8003c9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c80:	68b9      	ldr	r1, [r7, #8]
 8003c82:	4824      	ldr	r0, [pc, #144]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0x100>)
 8003c84:	f7fc fa3e 	bl	8000104 <__udivsi3>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	227f      	movs	r2, #127	@ 0x7f
 8003c94:	4013      	ands	r3, r2
 8003c96:	434b      	muls	r3, r1
 8003c98:	617b      	str	r3, [r7, #20]
        break;
 8003c9a:	e00d      	b.n	8003cb8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c9c:	68b9      	ldr	r1, [r7, #8]
 8003c9e:	481c      	ldr	r0, [pc, #112]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ca0:	f7fc fa30 	bl	8000104 <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	0019      	movs	r1, r3
 8003ca8:	4b18      	ldr	r3, [pc, #96]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	227f      	movs	r2, #127	@ 0x7f
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	434b      	muls	r3, r1
 8003cb4:	617b      	str	r3, [r7, #20]
        break;
 8003cb6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003cb8:	4b14      	ldr	r3, [pc, #80]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0f5b      	lsrs	r3, r3, #29
 8003cbe:	2207      	movs	r2, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6978      	ldr	r0, [r7, #20]
 8003cca:	f7fc fa1b 	bl	8000104 <__udivsi3>
 8003cce:	0003      	movs	r3, r0
 8003cd0:	613b      	str	r3, [r7, #16]
 8003cd2:	e015      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2238      	movs	r2, #56	@ 0x38
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d103      	bne.n	8003ce8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003ce0:	2380      	movs	r3, #128	@ 0x80
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	613b      	str	r3, [r7, #16]
 8003ce6:	e00b      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ce8:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	2238      	movs	r2, #56	@ 0x38
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b18      	cmp	r3, #24
 8003cf2:	d103      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003cf4:	23fa      	movs	r3, #250	@ 0xfa
 8003cf6:	01db      	lsls	r3, r3, #7
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e001      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d00:	693b      	ldr	r3, [r7, #16]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b006      	add	sp, #24
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	00f42400 	.word	0x00f42400
 8003d14:	007a1200 	.word	0x007a1200

08003d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d1c:	4b02      	ldr	r3, [pc, #8]	@ (8003d28 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	20000000 	.word	0x20000000

08003d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d2c:	b5b0      	push	{r4, r5, r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003d30:	f7ff fff2 	bl	8003d18 <HAL_RCC_GetHCLKFreq>
 8003d34:	0004      	movs	r4, r0
 8003d36:	f7ff fb3f 	bl	80033b8 <LL_RCC_GetAPB1Prescaler>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	0b1a      	lsrs	r2, r3, #12
 8003d3e:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d40:	0092      	lsls	r2, r2, #2
 8003d42:	58d3      	ldr	r3, [r2, r3]
 8003d44:	221f      	movs	r2, #31
 8003d46:	4013      	ands	r3, r2
 8003d48:	40dc      	lsrs	r4, r3
 8003d4a:	0023      	movs	r3, r4
}
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdb0      	pop	{r4, r5, r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	0800635c 	.word	0x0800635c

08003d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e056      	b.n	8003e18 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	223d      	movs	r2, #61	@ 0x3d
 8003d6e:	5c9b      	ldrb	r3, [r3, r2]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	223c      	movs	r2, #60	@ 0x3c
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0018      	movs	r0, r3
 8003d82:	f001 fb6b 	bl	800545c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a23      	ldr	r2, [pc, #140]	@ (8003e20 <HAL_TIM_Base_Init+0xc8>)
 8003d92:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	0010      	movs	r0, r2
 8003d9c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	223d      	movs	r2, #61	@ 0x3d
 8003da2:	2102      	movs	r1, #2
 8003da4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3304      	adds	r3, #4
 8003dae:	0019      	movs	r1, r3
 8003db0:	0010      	movs	r0, r2
 8003db2:	f001 f80f 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2248      	movs	r2, #72	@ 0x48
 8003dba:	2101      	movs	r1, #1
 8003dbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	223e      	movs	r2, #62	@ 0x3e
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	5499      	strb	r1, [r3, r2]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	223f      	movs	r2, #63	@ 0x3f
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2240      	movs	r2, #64	@ 0x40
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2241      	movs	r2, #65	@ 0x41
 8003dda:	2101      	movs	r1, #1
 8003ddc:	5499      	strb	r1, [r3, r2]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2242      	movs	r2, #66	@ 0x42
 8003de2:	2101      	movs	r1, #1
 8003de4:	5499      	strb	r1, [r3, r2]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2243      	movs	r2, #67	@ 0x43
 8003dea:	2101      	movs	r1, #1
 8003dec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2244      	movs	r2, #68	@ 0x44
 8003df2:	2101      	movs	r1, #1
 8003df4:	5499      	strb	r1, [r3, r2]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2245      	movs	r2, #69	@ 0x45
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	5499      	strb	r1, [r3, r2]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2246      	movs	r2, #70	@ 0x46
 8003e02:	2101      	movs	r1, #1
 8003e04:	5499      	strb	r1, [r3, r2]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2247      	movs	r2, #71	@ 0x47
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	223d      	movs	r2, #61	@ 0x3d
 8003e12:	2101      	movs	r1, #1
 8003e14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	08000fe5 	.word	0x08000fe5

08003e24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	223d      	movs	r2, #61	@ 0x3d
 8003e30:	5c9b      	ldrb	r3, [r3, r2]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d001      	beq.n	8003e3c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e035      	b.n	8003ea8 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	223d      	movs	r2, #61	@ 0x3d
 8003e40:	2102      	movs	r1, #2
 8003e42:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a19      	ldr	r2, [pc, #100]	@ (8003eb0 <HAL_TIM_Base_Start+0x8c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d00a      	beq.n	8003e64 <HAL_TIM_Base_Start+0x40>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	05db      	lsls	r3, r3, #23
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d004      	beq.n	8003e64 <HAL_TIM_Base_Start+0x40>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a15      	ldr	r2, [pc, #84]	@ (8003eb4 <HAL_TIM_Base_Start+0x90>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d116      	bne.n	8003e92 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4a13      	ldr	r2, [pc, #76]	@ (8003eb8 <HAL_TIM_Base_Start+0x94>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2b06      	cmp	r3, #6
 8003e74:	d016      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x80>
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	2380      	movs	r3, #128	@ 0x80
 8003e7a:	025b      	lsls	r3, r3, #9
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d011      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	e008      	b.n	8003ea4 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e000      	b.n	8003ea6 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40000400 	.word	0x40000400
 8003eb8:	00010007 	.word	0x00010007

08003ebc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e056      	b.n	8003f7c <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	223d      	movs	r2, #61	@ 0x3d
 8003ed2:	5c9b      	ldrb	r3, [r3, r2]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d113      	bne.n	8003f02 <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	223c      	movs	r2, #60	@ 0x3c
 8003ede:	2100      	movs	r1, #0
 8003ee0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f001 fab9 	bl	800545c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a23      	ldr	r2, [pc, #140]	@ (8003f84 <HAL_TIM_OC_Init+0xc8>)
 8003ef6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	0010      	movs	r0, r2
 8003f00:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	223d      	movs	r2, #61	@ 0x3d
 8003f06:	2102      	movs	r1, #2
 8003f08:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	0019      	movs	r1, r3
 8003f14:	0010      	movs	r0, r2
 8003f16:	f000 ff5d 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2248      	movs	r2, #72	@ 0x48
 8003f1e:	2101      	movs	r1, #1
 8003f20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	223e      	movs	r2, #62	@ 0x3e
 8003f26:	2101      	movs	r1, #1
 8003f28:	5499      	strb	r1, [r3, r2]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	223f      	movs	r2, #63	@ 0x3f
 8003f2e:	2101      	movs	r1, #1
 8003f30:	5499      	strb	r1, [r3, r2]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2240      	movs	r2, #64	@ 0x40
 8003f36:	2101      	movs	r1, #1
 8003f38:	5499      	strb	r1, [r3, r2]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2241      	movs	r2, #65	@ 0x41
 8003f3e:	2101      	movs	r1, #1
 8003f40:	5499      	strb	r1, [r3, r2]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2242      	movs	r2, #66	@ 0x42
 8003f46:	2101      	movs	r1, #1
 8003f48:	5499      	strb	r1, [r3, r2]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2243      	movs	r2, #67	@ 0x43
 8003f4e:	2101      	movs	r1, #1
 8003f50:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2244      	movs	r2, #68	@ 0x44
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2245      	movs	r2, #69	@ 0x45
 8003f5e:	2101      	movs	r1, #1
 8003f60:	5499      	strb	r1, [r3, r2]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2246      	movs	r2, #70	@ 0x46
 8003f66:	2101      	movs	r1, #1
 8003f68:	5499      	strb	r1, [r3, r2]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2247      	movs	r2, #71	@ 0x47
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	223d      	movs	r2, #61	@ 0x3d
 8003f76:	2101      	movs	r1, #1
 8003f78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	b002      	add	sp, #8
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	08003f89 	.word	0x08003f89

08003f88 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f90:	46c0      	nop			@ (mov r8, r8)
 8003f92:	46bd      	mov	sp, r7
 8003f94:	b002      	add	sp, #8
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <HAL_TIM_OC_Start_IT+0x2a>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	223e      	movs	r2, #62	@ 0x3e
 8003fb4:	5c9b      	ldrb	r3, [r3, r2]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	1e5a      	subs	r2, r3, #1
 8003fbc:	4193      	sbcs	r3, r2
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	e037      	b.n	8004032 <HAL_TIM_OC_Start_IT+0x9a>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d108      	bne.n	8003fda <HAL_TIM_OC_Start_IT+0x42>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	223f      	movs	r2, #63	@ 0x3f
 8003fcc:	5c9b      	ldrb	r3, [r3, r2]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	1e5a      	subs	r2, r3, #1
 8003fd4:	4193      	sbcs	r3, r2
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e02b      	b.n	8004032 <HAL_TIM_OC_Start_IT+0x9a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d108      	bne.n	8003ff2 <HAL_TIM_OC_Start_IT+0x5a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2240      	movs	r2, #64	@ 0x40
 8003fe4:	5c9b      	ldrb	r3, [r3, r2]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	1e5a      	subs	r2, r3, #1
 8003fec:	4193      	sbcs	r3, r2
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	e01f      	b.n	8004032 <HAL_TIM_OC_Start_IT+0x9a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b0c      	cmp	r3, #12
 8003ff6:	d108      	bne.n	800400a <HAL_TIM_OC_Start_IT+0x72>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2241      	movs	r2, #65	@ 0x41
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	3b01      	subs	r3, #1
 8004002:	1e5a      	subs	r2, r3, #1
 8004004:	4193      	sbcs	r3, r2
 8004006:	b2db      	uxtb	r3, r3
 8004008:	e013      	b.n	8004032 <HAL_TIM_OC_Start_IT+0x9a>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b10      	cmp	r3, #16
 800400e:	d108      	bne.n	8004022 <HAL_TIM_OC_Start_IT+0x8a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2242      	movs	r2, #66	@ 0x42
 8004014:	5c9b      	ldrb	r3, [r3, r2]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	1e5a      	subs	r2, r3, #1
 800401c:	4193      	sbcs	r3, r2
 800401e:	b2db      	uxtb	r3, r3
 8004020:	e007      	b.n	8004032 <HAL_TIM_OC_Start_IT+0x9a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2243      	movs	r2, #67	@ 0x43
 8004026:	5c9b      	ldrb	r3, [r3, r2]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	1e5a      	subs	r2, r3, #1
 800402e:	4193      	sbcs	r3, r2
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e0c4      	b.n	80041c4 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_TIM_OC_Start_IT+0xb2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	223e      	movs	r2, #62	@ 0x3e
 8004044:	2102      	movs	r1, #2
 8004046:	5499      	strb	r1, [r3, r2]
 8004048:	e023      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xfa>
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b04      	cmp	r3, #4
 800404e:	d104      	bne.n	800405a <HAL_TIM_OC_Start_IT+0xc2>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	223f      	movs	r2, #63	@ 0x3f
 8004054:	2102      	movs	r1, #2
 8004056:	5499      	strb	r1, [r3, r2]
 8004058:	e01b      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xfa>
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b08      	cmp	r3, #8
 800405e:	d104      	bne.n	800406a <HAL_TIM_OC_Start_IT+0xd2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2240      	movs	r2, #64	@ 0x40
 8004064:	2102      	movs	r1, #2
 8004066:	5499      	strb	r1, [r3, r2]
 8004068:	e013      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xfa>
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d104      	bne.n	800407a <HAL_TIM_OC_Start_IT+0xe2>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2241      	movs	r2, #65	@ 0x41
 8004074:	2102      	movs	r1, #2
 8004076:	5499      	strb	r1, [r3, r2]
 8004078:	e00b      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xfa>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b10      	cmp	r3, #16
 800407e:	d104      	bne.n	800408a <HAL_TIM_OC_Start_IT+0xf2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2242      	movs	r2, #66	@ 0x42
 8004084:	2102      	movs	r1, #2
 8004086:	5499      	strb	r1, [r3, r2]
 8004088:	e003      	b.n	8004092 <HAL_TIM_OC_Start_IT+0xfa>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2243      	movs	r2, #67	@ 0x43
 800408e:	2102      	movs	r1, #2
 8004090:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	d02a      	beq.n	80040ee <HAL_TIM_OC_Start_IT+0x156>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d830      	bhi.n	8004100 <HAL_TIM_OC_Start_IT+0x168>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d01b      	beq.n	80040dc <HAL_TIM_OC_Start_IT+0x144>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	d82a      	bhi.n	8004100 <HAL_TIM_OC_Start_IT+0x168>
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_TIM_OC_Start_IT+0x120>
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d009      	beq.n	80040ca <HAL_TIM_OC_Start_IT+0x132>
 80040b6:	e023      	b.n	8004100 <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2102      	movs	r1, #2
 80040c4:	430a      	orrs	r2, r1
 80040c6:	60da      	str	r2, [r3, #12]
      break;
 80040c8:	e01f      	b.n	800410a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2104      	movs	r1, #4
 80040d6:	430a      	orrs	r2, r1
 80040d8:	60da      	str	r2, [r3, #12]
      break;
 80040da:	e016      	b.n	800410a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2108      	movs	r1, #8
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]
      break;
 80040ec:	e00d      	b.n	800410a <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2110      	movs	r1, #16
 80040fa:	430a      	orrs	r2, r1
 80040fc:	60da      	str	r2, [r3, #12]
      break;
 80040fe:	e004      	b.n	800410a <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 8004100:	230f      	movs	r3, #15
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2201      	movs	r2, #1
 8004106:	701a      	strb	r2, [r3, #0]
      break;
 8004108:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800410a:	230f      	movs	r3, #15
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d154      	bne.n	80041be <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6839      	ldr	r1, [r7, #0]
 800411a:	2201      	movs	r2, #1
 800411c:	0018      	movs	r0, r3
 800411e:	f001 f979 	bl	8005414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a29      	ldr	r2, [pc, #164]	@ (80041cc <HAL_TIM_OC_Start_IT+0x234>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d009      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a27      	ldr	r2, [pc, #156]	@ (80041d0 <HAL_TIM_OC_Start_IT+0x238>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d004      	beq.n	8004140 <HAL_TIM_OC_Start_IT+0x1a8>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a26      	ldr	r2, [pc, #152]	@ (80041d4 <HAL_TIM_OC_Start_IT+0x23c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <HAL_TIM_OC_Start_IT+0x1ac>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <HAL_TIM_OC_Start_IT+0x1ae>
 8004144:	2300      	movs	r3, #0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2180      	movs	r1, #128	@ 0x80
 8004156:	0209      	lsls	r1, r1, #8
 8004158:	430a      	orrs	r2, r1
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a1a      	ldr	r2, [pc, #104]	@ (80041cc <HAL_TIM_OC_Start_IT+0x234>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00a      	beq.n	800417c <HAL_TIM_OC_Start_IT+0x1e4>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	2380      	movs	r3, #128	@ 0x80
 800416c:	05db      	lsls	r3, r3, #23
 800416e:	429a      	cmp	r2, r3
 8004170:	d004      	beq.n	800417c <HAL_TIM_OC_Start_IT+0x1e4>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a18      	ldr	r2, [pc, #96]	@ (80041d8 <HAL_TIM_OC_Start_IT+0x240>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d116      	bne.n	80041aa <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	4a16      	ldr	r2, [pc, #88]	@ (80041dc <HAL_TIM_OC_Start_IT+0x244>)
 8004184:	4013      	ands	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b06      	cmp	r3, #6
 800418c:	d016      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x224>
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	2380      	movs	r3, #128	@ 0x80
 8004192:	025b      	lsls	r3, r3, #9
 8004194:	429a      	cmp	r2, r3
 8004196:	d011      	beq.n	80041bc <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2101      	movs	r1, #1
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a8:	e008      	b.n	80041bc <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2101      	movs	r1, #1
 80041b6:	430a      	orrs	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	e000      	b.n	80041be <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041bc:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 80041be:	230f      	movs	r3, #15
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
}
 80041c4:	0018      	movs	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	b004      	add	sp, #16
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40012c00 	.word	0x40012c00
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800
 80041d8:	40000400 	.word	0x40000400
 80041dc:	00010007 	.word	0x00010007

080041e0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ea:	230f      	movs	r3, #15
 80041ec:	18fb      	adds	r3, r7, r3
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b0c      	cmp	r3, #12
 80041f6:	d02a      	beq.n	800424e <HAL_TIM_OC_Stop_IT+0x6e>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b0c      	cmp	r3, #12
 80041fc:	d830      	bhi.n	8004260 <HAL_TIM_OC_Stop_IT+0x80>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d01b      	beq.n	800423c <HAL_TIM_OC_Stop_IT+0x5c>
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b08      	cmp	r3, #8
 8004208:	d82a      	bhi.n	8004260 <HAL_TIM_OC_Stop_IT+0x80>
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_TIM_OC_Stop_IT+0x38>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d009      	beq.n	800422a <HAL_TIM_OC_Stop_IT+0x4a>
 8004216:	e023      	b.n	8004260 <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2102      	movs	r1, #2
 8004224:	438a      	bics	r2, r1
 8004226:	60da      	str	r2, [r3, #12]
      break;
 8004228:	e01f      	b.n	800426a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2104      	movs	r1, #4
 8004236:	438a      	bics	r2, r1
 8004238:	60da      	str	r2, [r3, #12]
      break;
 800423a:	e016      	b.n	800426a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2108      	movs	r1, #8
 8004248:	438a      	bics	r2, r1
 800424a:	60da      	str	r2, [r3, #12]
      break;
 800424c:	e00d      	b.n	800426a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2110      	movs	r1, #16
 800425a:	438a      	bics	r2, r1
 800425c:	60da      	str	r2, [r3, #12]
      break;
 800425e:	e004      	b.n	800426a <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8004260:	230f      	movs	r3, #15
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2201      	movs	r2, #1
 8004266:	701a      	strb	r2, [r3, #0]
      break;
 8004268:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800426a:	230f      	movs	r3, #15
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d000      	beq.n	8004276 <HAL_TIM_OC_Stop_IT+0x96>
 8004274:	e06e      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6839      	ldr	r1, [r7, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	0018      	movs	r0, r3
 8004280:	f001 f8c8 	bl	8005414 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a36      	ldr	r2, [pc, #216]	@ (8004364 <HAL_TIM_OC_Stop_IT+0x184>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_TIM_OC_Stop_IT+0xc2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a35      	ldr	r2, [pc, #212]	@ (8004368 <HAL_TIM_OC_Stop_IT+0x188>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_TIM_OC_Stop_IT+0xc2>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a33      	ldr	r2, [pc, #204]	@ (800436c <HAL_TIM_OC_Stop_IT+0x18c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_TIM_OC_Stop_IT+0xc6>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_OC_Stop_IT+0xc8>
 80042a6:	2300      	movs	r3, #0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d013      	beq.n	80042d4 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004370 <HAL_TIM_OC_Stop_IT+0x190>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	d10d      	bne.n	80042d4 <HAL_TIM_OC_Stop_IT+0xf4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	4a2d      	ldr	r2, [pc, #180]	@ (8004374 <HAL_TIM_OC_Stop_IT+0x194>)
 80042c0:	4013      	ands	r3, r2
 80042c2:	d107      	bne.n	80042d4 <HAL_TIM_OC_Stop_IT+0xf4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	492a      	ldr	r1, [pc, #168]	@ (8004378 <HAL_TIM_OC_Stop_IT+0x198>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <HAL_TIM_OC_Stop_IT+0x190>)
 80042dc:	4013      	ands	r3, r2
 80042de:	d10d      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0x11c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4a23      	ldr	r2, [pc, #140]	@ (8004374 <HAL_TIM_OC_Stop_IT+0x194>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_OC_Stop_IT+0x11c>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d104      	bne.n	800430c <HAL_TIM_OC_Stop_IT+0x12c>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	223e      	movs	r2, #62	@ 0x3e
 8004306:	2101      	movs	r1, #1
 8004308:	5499      	strb	r1, [r3, r2]
 800430a:	e023      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b04      	cmp	r3, #4
 8004310:	d104      	bne.n	800431c <HAL_TIM_OC_Stop_IT+0x13c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	223f      	movs	r2, #63	@ 0x3f
 8004316:	2101      	movs	r1, #1
 8004318:	5499      	strb	r1, [r3, r2]
 800431a:	e01b      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2b08      	cmp	r3, #8
 8004320:	d104      	bne.n	800432c <HAL_TIM_OC_Stop_IT+0x14c>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2240      	movs	r2, #64	@ 0x40
 8004326:	2101      	movs	r1, #1
 8004328:	5499      	strb	r1, [r3, r2]
 800432a:	e013      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b0c      	cmp	r3, #12
 8004330:	d104      	bne.n	800433c <HAL_TIM_OC_Stop_IT+0x15c>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2241      	movs	r2, #65	@ 0x41
 8004336:	2101      	movs	r1, #1
 8004338:	5499      	strb	r1, [r3, r2]
 800433a:	e00b      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d104      	bne.n	800434c <HAL_TIM_OC_Stop_IT+0x16c>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2242      	movs	r2, #66	@ 0x42
 8004346:	2101      	movs	r1, #1
 8004348:	5499      	strb	r1, [r3, r2]
 800434a:	e003      	b.n	8004354 <HAL_TIM_OC_Stop_IT+0x174>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2243      	movs	r2, #67	@ 0x43
 8004350:	2101      	movs	r1, #1
 8004352:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	781b      	ldrb	r3, [r3, #0]
}
 800435a:	0018      	movs	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	b004      	add	sp, #16
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	00001111 	.word	0x00001111
 8004374:	00000444 	.word	0x00000444
 8004378:	ffff7fff 	.word	0xffff7fff

0800437c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e056      	b.n	800443c <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	223d      	movs	r2, #61	@ 0x3d
 8004392:	5c9b      	ldrb	r3, [r3, r2]
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	d113      	bne.n	80043c2 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	223c      	movs	r2, #60	@ 0x3c
 800439e:	2100      	movs	r1, #0
 80043a0:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	0018      	movs	r0, r3
 80043a6:	f001 f859 	bl	800545c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d102      	bne.n	80043b8 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a23      	ldr	r2, [pc, #140]	@ (8004444 <HAL_TIM_PWM_Init+0xc8>)
 80043b6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	0010      	movs	r0, r2
 80043c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223d      	movs	r2, #61	@ 0x3d
 80043c6:	2102      	movs	r1, #2
 80043c8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	0019      	movs	r1, r3
 80043d4:	0010      	movs	r0, r2
 80043d6:	f000 fcfd 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2248      	movs	r2, #72	@ 0x48
 80043de:	2101      	movs	r1, #1
 80043e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	223e      	movs	r2, #62	@ 0x3e
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	223f      	movs	r2, #63	@ 0x3f
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2240      	movs	r2, #64	@ 0x40
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2241      	movs	r2, #65	@ 0x41
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2242      	movs	r2, #66	@ 0x42
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2243      	movs	r2, #67	@ 0x43
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2244      	movs	r2, #68	@ 0x44
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2245      	movs	r2, #69	@ 0x45
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2246      	movs	r2, #70	@ 0x46
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2247      	movs	r2, #71	@ 0x47
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223d      	movs	r2, #61	@ 0x3d
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}
 8004444:	08004449 	.word	0x08004449

08004448 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004450:	46c0      	nop			@ (mov r8, r8)
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <HAL_TIM_PWM_Start+0x22>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	223e      	movs	r2, #62	@ 0x3e
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	b2db      	uxtb	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	1e5a      	subs	r2, r3, #1
 8004474:	4193      	sbcs	r3, r2
 8004476:	b2db      	uxtb	r3, r3
 8004478:	e037      	b.n	80044ea <HAL_TIM_PWM_Start+0x92>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b04      	cmp	r3, #4
 800447e:	d108      	bne.n	8004492 <HAL_TIM_PWM_Start+0x3a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	223f      	movs	r2, #63	@ 0x3f
 8004484:	5c9b      	ldrb	r3, [r3, r2]
 8004486:	b2db      	uxtb	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	1e5a      	subs	r2, r3, #1
 800448c:	4193      	sbcs	r3, r2
 800448e:	b2db      	uxtb	r3, r3
 8004490:	e02b      	b.n	80044ea <HAL_TIM_PWM_Start+0x92>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d108      	bne.n	80044aa <HAL_TIM_PWM_Start+0x52>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	5c9b      	ldrb	r3, [r3, r2]
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	3b01      	subs	r3, #1
 80044a2:	1e5a      	subs	r2, r3, #1
 80044a4:	4193      	sbcs	r3, r2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	e01f      	b.n	80044ea <HAL_TIM_PWM_Start+0x92>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d108      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x6a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2241      	movs	r2, #65	@ 0x41
 80044b4:	5c9b      	ldrb	r3, [r3, r2]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	4193      	sbcs	r3, r2
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	e013      	b.n	80044ea <HAL_TIM_PWM_Start+0x92>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b10      	cmp	r3, #16
 80044c6:	d108      	bne.n	80044da <HAL_TIM_PWM_Start+0x82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2242      	movs	r2, #66	@ 0x42
 80044cc:	5c9b      	ldrb	r3, [r3, r2]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	3b01      	subs	r3, #1
 80044d2:	1e5a      	subs	r2, r3, #1
 80044d4:	4193      	sbcs	r3, r2
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e007      	b.n	80044ea <HAL_TIM_PWM_Start+0x92>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2243      	movs	r2, #67	@ 0x43
 80044de:	5c9b      	ldrb	r3, [r3, r2]
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	4193      	sbcs	r3, r2
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e081      	b.n	80045f6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d104      	bne.n	8004502 <HAL_TIM_PWM_Start+0xaa>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	223e      	movs	r2, #62	@ 0x3e
 80044fc:	2102      	movs	r1, #2
 80044fe:	5499      	strb	r1, [r3, r2]
 8004500:	e023      	b.n	800454a <HAL_TIM_PWM_Start+0xf2>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d104      	bne.n	8004512 <HAL_TIM_PWM_Start+0xba>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	223f      	movs	r2, #63	@ 0x3f
 800450c:	2102      	movs	r1, #2
 800450e:	5499      	strb	r1, [r3, r2]
 8004510:	e01b      	b.n	800454a <HAL_TIM_PWM_Start+0xf2>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d104      	bne.n	8004522 <HAL_TIM_PWM_Start+0xca>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2240      	movs	r2, #64	@ 0x40
 800451c:	2102      	movs	r1, #2
 800451e:	5499      	strb	r1, [r3, r2]
 8004520:	e013      	b.n	800454a <HAL_TIM_PWM_Start+0xf2>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b0c      	cmp	r3, #12
 8004526:	d104      	bne.n	8004532 <HAL_TIM_PWM_Start+0xda>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2241      	movs	r2, #65	@ 0x41
 800452c:	2102      	movs	r1, #2
 800452e:	5499      	strb	r1, [r3, r2]
 8004530:	e00b      	b.n	800454a <HAL_TIM_PWM_Start+0xf2>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b10      	cmp	r3, #16
 8004536:	d104      	bne.n	8004542 <HAL_TIM_PWM_Start+0xea>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2242      	movs	r2, #66	@ 0x42
 800453c:	2102      	movs	r1, #2
 800453e:	5499      	strb	r1, [r3, r2]
 8004540:	e003      	b.n	800454a <HAL_TIM_PWM_Start+0xf2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2243      	movs	r2, #67	@ 0x43
 8004546:	2102      	movs	r1, #2
 8004548:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	2201      	movs	r2, #1
 8004552:	0018      	movs	r0, r3
 8004554:	f000 ff5e 	bl	8005414 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a28      	ldr	r2, [pc, #160]	@ (8004600 <HAL_TIM_PWM_Start+0x1a8>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d009      	beq.n	8004576 <HAL_TIM_PWM_Start+0x11e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a27      	ldr	r2, [pc, #156]	@ (8004604 <HAL_TIM_PWM_Start+0x1ac>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_TIM_PWM_Start+0x11e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a25      	ldr	r2, [pc, #148]	@ (8004608 <HAL_TIM_PWM_Start+0x1b0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d101      	bne.n	800457a <HAL_TIM_PWM_Start+0x122>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_TIM_PWM_Start+0x124>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2180      	movs	r1, #128	@ 0x80
 800458c:	0209      	lsls	r1, r1, #8
 800458e:	430a      	orrs	r2, r1
 8004590:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1a      	ldr	r2, [pc, #104]	@ (8004600 <HAL_TIM_PWM_Start+0x1a8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00a      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x15a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	05db      	lsls	r3, r3, #23
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d004      	beq.n	80045b2 <HAL_TIM_PWM_Start+0x15a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a17      	ldr	r2, [pc, #92]	@ (800460c <HAL_TIM_PWM_Start+0x1b4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d116      	bne.n	80045e0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	4a15      	ldr	r2, [pc, #84]	@ (8004610 <HAL_TIM_PWM_Start+0x1b8>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b06      	cmp	r3, #6
 80045c2:	d016      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x19a>
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	2380      	movs	r3, #128	@ 0x80
 80045c8:	025b      	lsls	r3, r3, #9
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d011      	beq.n	80045f2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	430a      	orrs	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045de:	e008      	b.n	80045f2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2101      	movs	r1, #1
 80045ec:	430a      	orrs	r2, r1
 80045ee:	601a      	str	r2, [r3, #0]
 80045f0:	e000      	b.n	80045f4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			@ (mov r8, r8)
 8004600:	40012c00 	.word	0x40012c00
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800
 800460c:	40000400 	.word	0x40000400
 8004610:	00010007 	.word	0x00010007

08004614 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2202      	movs	r2, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d027      	beq.n	8004684 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2202      	movs	r2, #2
 8004638:	4013      	ands	r3, r2
 800463a:	d023      	beq.n	8004684 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2203      	movs	r2, #3
 8004642:	4252      	negs	r2, r2
 8004644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2203      	movs	r2, #3
 8004654:	4013      	ands	r3, r2
 8004656:	d006      	beq.n	8004666 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2294      	movs	r2, #148	@ 0x94
 800465c:	589b      	ldr	r3, [r3, r2]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	0010      	movs	r0, r2
 8004662:	4798      	blx	r3
 8004664:	e00b      	b.n	800467e <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	229c      	movs	r2, #156	@ 0x9c
 800466a:	589b      	ldr	r3, [r3, r2]
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	0010      	movs	r0, r2
 8004670:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	22a0      	movs	r2, #160	@ 0xa0
 8004676:	589b      	ldr	r3, [r3, r2]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	0010      	movs	r0, r2
 800467c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2204      	movs	r2, #4
 8004688:	4013      	ands	r3, r2
 800468a:	d028      	beq.n	80046de <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2204      	movs	r2, #4
 8004690:	4013      	ands	r3, r2
 8004692:	d024      	beq.n	80046de <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2205      	movs	r2, #5
 800469a:	4252      	negs	r2, r2
 800469c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2202      	movs	r2, #2
 80046a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	23c0      	movs	r3, #192	@ 0xc0
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4013      	ands	r3, r2
 80046b0:	d006      	beq.n	80046c0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2294      	movs	r2, #148	@ 0x94
 80046b6:	589b      	ldr	r3, [r3, r2]
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	0010      	movs	r0, r2
 80046bc:	4798      	blx	r3
 80046be:	e00b      	b.n	80046d8 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	229c      	movs	r2, #156	@ 0x9c
 80046c4:	589b      	ldr	r3, [r3, r2]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	0010      	movs	r0, r2
 80046ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	22a0      	movs	r2, #160	@ 0xa0
 80046d0:	589b      	ldr	r3, [r3, r2]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	0010      	movs	r0, r2
 80046d6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2208      	movs	r2, #8
 80046e2:	4013      	ands	r3, r2
 80046e4:	d027      	beq.n	8004736 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2208      	movs	r2, #8
 80046ea:	4013      	ands	r3, r2
 80046ec:	d023      	beq.n	8004736 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2209      	movs	r2, #9
 80046f4:	4252      	negs	r2, r2
 80046f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2204      	movs	r2, #4
 80046fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2203      	movs	r2, #3
 8004706:	4013      	ands	r3, r2
 8004708:	d006      	beq.n	8004718 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2294      	movs	r2, #148	@ 0x94
 800470e:	589b      	ldr	r3, [r3, r2]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	0010      	movs	r0, r2
 8004714:	4798      	blx	r3
 8004716:	e00b      	b.n	8004730 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	229c      	movs	r2, #156	@ 0x9c
 800471c:	589b      	ldr	r3, [r3, r2]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	0010      	movs	r0, r2
 8004722:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	22a0      	movs	r2, #160	@ 0xa0
 8004728:	589b      	ldr	r3, [r3, r2]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	0010      	movs	r0, r2
 800472e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2210      	movs	r2, #16
 800473a:	4013      	ands	r3, r2
 800473c:	d028      	beq.n	8004790 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2210      	movs	r2, #16
 8004742:	4013      	ands	r3, r2
 8004744:	d024      	beq.n	8004790 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2211      	movs	r2, #17
 800474c:	4252      	negs	r2, r2
 800474e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2208      	movs	r2, #8
 8004754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	23c0      	movs	r3, #192	@ 0xc0
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4013      	ands	r3, r2
 8004762:	d006      	beq.n	8004772 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2294      	movs	r2, #148	@ 0x94
 8004768:	589b      	ldr	r3, [r3, r2]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	0010      	movs	r0, r2
 800476e:	4798      	blx	r3
 8004770:	e00b      	b.n	800478a <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	229c      	movs	r2, #156	@ 0x9c
 8004776:	589b      	ldr	r3, [r3, r2]
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	0010      	movs	r0, r2
 800477c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	22a0      	movs	r2, #160	@ 0xa0
 8004782:	589b      	ldr	r3, [r3, r2]
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	0010      	movs	r0, r2
 8004788:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2201      	movs	r2, #1
 8004794:	4013      	ands	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	4013      	ands	r3, r2
 800479e:	d00a      	beq.n	80047b6 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2202      	movs	r2, #2
 80047a6:	4252      	negs	r2, r2
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2284      	movs	r2, #132	@ 0x84
 80047ae:	589b      	ldr	r3, [r3, r2]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	0010      	movs	r0, r2
 80047b4:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2280      	movs	r2, #128	@ 0x80
 80047ba:	4013      	ands	r3, r2
 80047bc:	d104      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	2380      	movs	r3, #128	@ 0x80
 80047c2:	019b      	lsls	r3, r3, #6
 80047c4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047c6:	d00d      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2280      	movs	r2, #128	@ 0x80
 80047cc:	4013      	ands	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a22      	ldr	r2, [pc, #136]	@ (8004860 <HAL_TIM_IRQHandler+0x24c>)
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	22b4      	movs	r2, #180	@ 0xb4
 80047dc:	589b      	ldr	r3, [r3, r2]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	0010      	movs	r0, r2
 80047e2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	2380      	movs	r3, #128	@ 0x80
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d00d      	beq.n	800480a <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2280      	movs	r2, #128	@ 0x80
 80047f2:	4013      	ands	r3, r2
 80047f4:	d009      	beq.n	800480a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004864 <HAL_TIM_IRQHandler+0x250>)
 80047fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	22b8      	movs	r2, #184	@ 0xb8
 8004802:	589b      	ldr	r3, [r3, r2]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	0010      	movs	r0, r2
 8004808:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2240      	movs	r2, #64	@ 0x40
 800480e:	4013      	ands	r3, r2
 8004810:	d00e      	beq.n	8004830 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2240      	movs	r2, #64	@ 0x40
 8004816:	4013      	ands	r3, r2
 8004818:	d00a      	beq.n	8004830 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2241      	movs	r2, #65	@ 0x41
 8004820:	4252      	negs	r2, r2
 8004822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	228c      	movs	r2, #140	@ 0x8c
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	0010      	movs	r0, r2
 800482e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2220      	movs	r2, #32
 8004834:	4013      	ands	r3, r2
 8004836:	d00e      	beq.n	8004856 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2220      	movs	r2, #32
 800483c:	4013      	ands	r3, r2
 800483e:	d00a      	beq.n	8004856 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2221      	movs	r2, #33	@ 0x21
 8004846:	4252      	negs	r2, r2
 8004848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	22ac      	movs	r2, #172	@ 0xac
 800484e:	589b      	ldr	r3, [r3, r2]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	0010      	movs	r0, r2
 8004854:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004856:	46c0      	nop			@ (mov r8, r8)
 8004858:	46bd      	mov	sp, r7
 800485a:	b004      	add	sp, #16
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	ffffdf7f 	.word	0xffffdf7f
 8004864:	fffffeff 	.word	0xfffffeff

08004868 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004874:	2317      	movs	r3, #23
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	223c      	movs	r2, #60	@ 0x3c
 8004880:	5c9b      	ldrb	r3, [r3, r2]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_TIM_OC_ConfigChannel+0x22>
 8004886:	2302      	movs	r3, #2
 8004888:	e048      	b.n	800491c <HAL_TIM_OC_ConfigChannel+0xb4>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	223c      	movs	r2, #60	@ 0x3c
 800488e:	2101      	movs	r1, #1
 8004890:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b14      	cmp	r3, #20
 8004896:	d835      	bhi.n	8004904 <HAL_TIM_OC_ConfigChannel+0x9c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	009a      	lsls	r2, r3, #2
 800489c:	4b21      	ldr	r3, [pc, #132]	@ (8004924 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800489e:	18d3      	adds	r3, r2, r3
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	0011      	movs	r1, r2
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 fb15 	bl	8004edc <TIM_OC1_SetConfig>
      break;
 80048b2:	e02c      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	0011      	movs	r1, r2
 80048bc:	0018      	movs	r0, r3
 80048be:	f000 fb8d 	bl	8004fdc <TIM_OC2_SetConfig>
      break;
 80048c2:	e024      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	0011      	movs	r1, r2
 80048cc:	0018      	movs	r0, r3
 80048ce:	f000 fc03 	bl	80050d8 <TIM_OC3_SetConfig>
      break;
 80048d2:	e01c      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	0011      	movs	r1, r2
 80048dc:	0018      	movs	r0, r3
 80048de:	f000 fc7d 	bl	80051dc <TIM_OC4_SetConfig>
      break;
 80048e2:	e014      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	0011      	movs	r1, r2
 80048ec:	0018      	movs	r0, r3
 80048ee:	f000 fcd9 	bl	80052a4 <TIM_OC5_SetConfig>
      break;
 80048f2:	e00c      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	0011      	movs	r1, r2
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 fd2b 	bl	8005358 <TIM_OC6_SetConfig>
      break;
 8004902:	e004      	b.n	800490e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004904:	2317      	movs	r3, #23
 8004906:	18fb      	adds	r3, r7, r3
 8004908:	2201      	movs	r2, #1
 800490a:	701a      	strb	r2, [r3, #0]
      break;
 800490c:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	223c      	movs	r2, #60	@ 0x3c
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

  return status;
 8004916:	2317      	movs	r3, #23
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	781b      	ldrb	r3, [r3, #0]
}
 800491c:	0018      	movs	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	b006      	add	sp, #24
 8004922:	bd80      	pop	{r7, pc}
 8004924:	080063a8 	.word	0x080063a8

08004928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b086      	sub	sp, #24
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004934:	2317      	movs	r3, #23
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	223c      	movs	r2, #60	@ 0x3c
 8004940:	5c9b      	ldrb	r3, [r3, r2]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004946:	2302      	movs	r3, #2
 8004948:	e0e5      	b.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	223c      	movs	r2, #60	@ 0x3c
 800494e:	2101      	movs	r1, #1
 8004950:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b14      	cmp	r3, #20
 8004956:	d900      	bls.n	800495a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004958:	e0d1      	b.n	8004afe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	009a      	lsls	r2, r3, #2
 800495e:	4b70      	ldr	r3, [pc, #448]	@ (8004b20 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004960:	18d3      	adds	r3, r2, r3
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	0011      	movs	r1, r2
 800496e:	0018      	movs	r0, r3
 8004970:	f000 fab4 	bl	8004edc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	699a      	ldr	r2, [r3, #24]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2108      	movs	r1, #8
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699a      	ldr	r2, [r3, #24]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2104      	movs	r1, #4
 8004990:	438a      	bics	r2, r1
 8004992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6999      	ldr	r1, [r3, #24]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	619a      	str	r2, [r3, #24]
      break;
 80049a6:	e0af      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68ba      	ldr	r2, [r7, #8]
 80049ae:	0011      	movs	r1, r2
 80049b0:	0018      	movs	r0, r3
 80049b2:	f000 fb13 	bl	8004fdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	699a      	ldr	r2, [r3, #24]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2180      	movs	r1, #128	@ 0x80
 80049c2:	0109      	lsls	r1, r1, #4
 80049c4:	430a      	orrs	r2, r1
 80049c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4954      	ldr	r1, [pc, #336]	@ (8004b24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80049d4:	400a      	ands	r2, r1
 80049d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	021a      	lsls	r2, r3, #8
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	619a      	str	r2, [r3, #24]
      break;
 80049ec:	e08c      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	0011      	movs	r1, r2
 80049f6:	0018      	movs	r0, r3
 80049f8:	f000 fb6e 	bl	80050d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2108      	movs	r1, #8
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2104      	movs	r1, #4
 8004a18:	438a      	bics	r2, r1
 8004a1a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	69d9      	ldr	r1, [r3, #28]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	61da      	str	r2, [r3, #28]
      break;
 8004a2e:	e06b      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	0011      	movs	r1, r2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 fbcf 	bl	80051dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69da      	ldr	r2, [r3, #28]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2180      	movs	r1, #128	@ 0x80
 8004a4a:	0109      	lsls	r1, r1, #4
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4932      	ldr	r1, [pc, #200]	@ (8004b24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004a5c:	400a      	ands	r2, r1
 8004a5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69d9      	ldr	r1, [r3, #28]
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	021a      	lsls	r2, r3, #8
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	61da      	str	r2, [r3, #28]
      break;
 8004a74:	e048      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 fc10 	bl	80052a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2108      	movs	r1, #8
 8004a90:	430a      	orrs	r2, r1
 8004a92:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2104      	movs	r1, #4
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004ab6:	e027      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	0011      	movs	r1, r2
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fc49 	bl	8005358 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2180      	movs	r1, #128	@ 0x80
 8004ad2:	0109      	lsls	r1, r1, #4
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4910      	ldr	r1, [pc, #64]	@ (8004b24 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ae4:	400a      	ands	r2, r1
 8004ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	021a      	lsls	r2, r3, #8
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004afc:	e004      	b.n	8004b08 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004afe:	2317      	movs	r3, #23
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	223c      	movs	r2, #60	@ 0x3c
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

  return status;
 8004b10:	2317      	movs	r3, #23
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	781b      	ldrb	r3, [r3, #0]
}
 8004b16:	0018      	movs	r0, r3
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	b006      	add	sp, #24
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	080063fc 	.word	0x080063fc
 8004b24:	fffffbff 	.word	0xfffffbff

08004b28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b30:	46c0      	nop			@ (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b002      	add	sp, #8
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b50:	46c0      	nop			@ (mov r8, r8)
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b002      	add	sp, #8
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b60:	46c0      	nop			@ (mov r8, r8)
 8004b62:	46bd      	mov	sp, r7
 8004b64:	b002      	add	sp, #8
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b002      	add	sp, #8
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b80:	46c0      	nop			@ (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba0:	46c0      	nop			@ (mov r8, r8)
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	b002      	add	sp, #8
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8004bb0:	46c0      	nop			@ (mov r8, r8)
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	b002      	add	sp, #8
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004bc0:	46c0      	nop			@ (mov r8, r8)
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b002      	add	sp, #8
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	230b      	movs	r3, #11
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	1c0a      	adds	r2, r1, #0
 8004bd8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bda:	2317      	movs	r3, #23
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0ea      	b.n	8004dc2 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	223d      	movs	r2, #61	@ 0x3d
 8004bf0:	5c9b      	ldrb	r3, [r3, r2]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d000      	beq.n	8004bfa <HAL_TIM_RegisterCallback+0x32>
 8004bf8:	e08e      	b.n	8004d18 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004bfa:	230b      	movs	r3, #11
 8004bfc:	18fb      	adds	r3, r7, r3
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b1b      	cmp	r3, #27
 8004c02:	d900      	bls.n	8004c06 <HAL_TIM_RegisterCallback+0x3e>
 8004c04:	e083      	b.n	8004d0e <HAL_TIM_RegisterCallback+0x146>
 8004c06:	009a      	lsls	r2, r3, #2
 8004c08:	4b70      	ldr	r3, [pc, #448]	@ (8004dcc <HAL_TIM_RegisterCallback+0x204>)
 8004c0a:	18d3      	adds	r3, r2, r3
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004c16:	e0d1      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004c1e:	e0cd      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004c26:	e0c9      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004c2e:	e0c5      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004c36:	e0c1      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004c3e:	e0bd      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004c46:	e0b9      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004c4e:	e0b5      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004c56:	e0b1      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004c5e:	e0ad      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004c66:	e0a9      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004c6e:	e0a5      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004c76:	e0a1      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	505a      	str	r2, [r3, r1]
        break;
 8004c80:	e09c      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2184      	movs	r1, #132	@ 0x84
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	505a      	str	r2, [r3, r1]
        break;
 8004c8a:	e097      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2188      	movs	r1, #136	@ 0x88
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	505a      	str	r2, [r3, r1]
        break;
 8004c94:	e092      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	218c      	movs	r1, #140	@ 0x8c
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	505a      	str	r2, [r3, r1]
        break;
 8004c9e:	e08d      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2190      	movs	r1, #144	@ 0x90
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	505a      	str	r2, [r3, r1]
        break;
 8004ca8:	e088      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2194      	movs	r1, #148	@ 0x94
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	505a      	str	r2, [r3, r1]
        break;
 8004cb2:	e083      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2198      	movs	r1, #152	@ 0x98
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	505a      	str	r2, [r3, r1]
        break;
 8004cbc:	e07e      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	219c      	movs	r1, #156	@ 0x9c
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	505a      	str	r2, [r3, r1]
        break;
 8004cc6:	e079      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	21a0      	movs	r1, #160	@ 0xa0
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	505a      	str	r2, [r3, r1]
        break;
 8004cd0:	e074      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	21a4      	movs	r1, #164	@ 0xa4
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	505a      	str	r2, [r3, r1]
        break;
 8004cda:	e06f      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	21a8      	movs	r1, #168	@ 0xa8
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	505a      	str	r2, [r3, r1]
        break;
 8004ce4:	e06a      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	21ac      	movs	r1, #172	@ 0xac
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	505a      	str	r2, [r3, r1]
        break;
 8004cee:	e065      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	21b0      	movs	r1, #176	@ 0xb0
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	505a      	str	r2, [r3, r1]
        break;
 8004cf8:	e060      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	21b4      	movs	r1, #180	@ 0xb4
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	505a      	str	r2, [r3, r1]
        break;
 8004d02:	e05b      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	21b8      	movs	r1, #184	@ 0xb8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	505a      	str	r2, [r3, r1]
        break;
 8004d0c:	e056      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004d0e:	2317      	movs	r3, #23
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2201      	movs	r2, #1
 8004d14:	701a      	strb	r2, [r3, #0]
        break;
 8004d16:	e051      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	223d      	movs	r2, #61	@ 0x3d
 8004d1c:	5c9b      	ldrb	r3, [r3, r2]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d147      	bne.n	8004db4 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 8004d24:	230b      	movs	r3, #11
 8004d26:	18fb      	adds	r3, r7, r3
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b0d      	cmp	r3, #13
 8004d2c:	d83d      	bhi.n	8004daa <HAL_TIM_RegisterCallback+0x1e2>
 8004d2e:	009a      	lsls	r2, r3, #2
 8004d30:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <HAL_TIM_RegisterCallback+0x208>)
 8004d32:	18d3      	adds	r3, r2, r3
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004d3e:	e03d      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004d46:	e039      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004d4e:	e035      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004d56:	e031      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004d5e:	e02d      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004d66:	e029      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004d6e:	e025      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004d76:	e021      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004d7e:	e01d      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004d86:	e019      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004d8e:	e015      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004d96:	e011      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004d9e:	e00d      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2180      	movs	r1, #128	@ 0x80
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	505a      	str	r2, [r3, r1]
        break;
 8004da8:	e008      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8004daa:	2317      	movs	r3, #23
 8004dac:	18fb      	adds	r3, r7, r3
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
        break;
 8004db2:	e003      	b.n	8004dbc <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8004db4:	2317      	movs	r3, #23
 8004db6:	18fb      	adds	r3, r7, r3
 8004db8:	2201      	movs	r2, #1
 8004dba:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004dbc:	2317      	movs	r3, #23
 8004dbe:	18fb      	adds	r3, r7, r3
 8004dc0:	781b      	ldrb	r3, [r3, #0]
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b006      	add	sp, #24
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	08006450 	.word	0x08006450
 8004dd0:	080064c0 	.word	0x080064c0

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a37      	ldr	r2, [pc, #220]	@ (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d008      	beq.n	8004dfe <TIM_Base_SetConfig+0x2a>
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	05db      	lsls	r3, r3, #23
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d003      	beq.n	8004dfe <TIM_Base_SetConfig+0x2a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a33      	ldr	r2, [pc, #204]	@ (8004ec8 <TIM_Base_SetConfig+0xf4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d108      	bne.n	8004e10 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2270      	movs	r2, #112	@ 0x70
 8004e02:	4393      	bics	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d014      	beq.n	8004e42 <TIM_Base_SetConfig+0x6e>
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	05db      	lsls	r3, r3, #23
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d00f      	beq.n	8004e42 <TIM_Base_SetConfig+0x6e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a28      	ldr	r2, [pc, #160]	@ (8004ec8 <TIM_Base_SetConfig+0xf4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00b      	beq.n	8004e42 <TIM_Base_SetConfig+0x6e>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a27      	ldr	r2, [pc, #156]	@ (8004ecc <TIM_Base_SetConfig+0xf8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d007      	beq.n	8004e42 <TIM_Base_SetConfig+0x6e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a26      	ldr	r2, [pc, #152]	@ (8004ed0 <TIM_Base_SetConfig+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d003      	beq.n	8004e42 <TIM_Base_SetConfig+0x6e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a25      	ldr	r2, [pc, #148]	@ (8004ed4 <TIM_Base_SetConfig+0x100>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <TIM_Base_SetConfig+0x104>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2280      	movs	r2, #128	@ 0x80
 8004e58:	4393      	bics	r3, r2
 8004e5a:	001a      	movs	r2, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	4313      	orrs	r3, r2
 8004e62:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a11      	ldr	r2, [pc, #68]	@ (8004ec4 <TIM_Base_SetConfig+0xf0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d007      	beq.n	8004e92 <TIM_Base_SetConfig+0xbe>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a12      	ldr	r2, [pc, #72]	@ (8004ed0 <TIM_Base_SetConfig+0xfc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d003      	beq.n	8004e92 <TIM_Base_SetConfig+0xbe>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ed4 <TIM_Base_SetConfig+0x100>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d103      	bne.n	8004e9a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d106      	bne.n	8004eba <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	4393      	bics	r3, r2
 8004eb4:	001a      	movs	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]
  }
}
 8004eba:	46c0      	nop			@ (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b004      	add	sp, #16
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	40012c00 	.word	0x40012c00
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40002000 	.word	0x40002000
 8004ed0:	40014400 	.word	0x40014400
 8004ed4:	40014800 	.word	0x40014800
 8004ed8:	fffffcff 	.word	0xfffffcff

08004edc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	4393      	bics	r3, r2
 8004ef4:	001a      	movs	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	4a2e      	ldr	r2, [pc, #184]	@ (8004fc4 <TIM_OC1_SetConfig+0xe8>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2203      	movs	r2, #3
 8004f12:	4393      	bics	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2202      	movs	r2, #2
 8004f24:	4393      	bics	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a24      	ldr	r2, [pc, #144]	@ (8004fc8 <TIM_OC1_SetConfig+0xec>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d007      	beq.n	8004f4a <TIM_OC1_SetConfig+0x6e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	@ (8004fcc <TIM_OC1_SetConfig+0xf0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d003      	beq.n	8004f4a <TIM_OC1_SetConfig+0x6e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a22      	ldr	r2, [pc, #136]	@ (8004fd0 <TIM_OC1_SetConfig+0xf4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d10c      	bne.n	8004f64 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2208      	movs	r2, #8
 8004f4e:	4393      	bics	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2204      	movs	r2, #4
 8004f60:	4393      	bics	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a18      	ldr	r2, [pc, #96]	@ (8004fc8 <TIM_OC1_SetConfig+0xec>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d007      	beq.n	8004f7c <TIM_OC1_SetConfig+0xa0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a17      	ldr	r2, [pc, #92]	@ (8004fcc <TIM_OC1_SetConfig+0xf0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d003      	beq.n	8004f7c <TIM_OC1_SetConfig+0xa0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a16      	ldr	r2, [pc, #88]	@ (8004fd0 <TIM_OC1_SetConfig+0xf4>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d111      	bne.n	8004fa0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	@ (8004fd4 <TIM_OC1_SetConfig+0xf8>)
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <TIM_OC1_SetConfig+0xfc>)
 8004f88:	4013      	ands	r3, r2
 8004f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	46c0      	nop			@ (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b006      	add	sp, #24
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	fffeff8f 	.word	0xfffeff8f
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40014400 	.word	0x40014400
 8004fd0:	40014800 	.word	0x40014800
 8004fd4:	fffffeff 	.word	0xfffffeff
 8004fd8:	fffffdff 	.word	0xfffffdff

08004fdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	4393      	bics	r3, r2
 8004ff4:	001a      	movs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	4a2c      	ldr	r2, [pc, #176]	@ (80050bc <TIM_OC2_SetConfig+0xe0>)
 800500a:	4013      	ands	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a2b      	ldr	r2, [pc, #172]	@ (80050c0 <TIM_OC2_SetConfig+0xe4>)
 8005012:	4013      	ands	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2220      	movs	r2, #32
 8005026:	4393      	bics	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a22      	ldr	r2, [pc, #136]	@ (80050c4 <TIM_OC2_SetConfig+0xe8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10d      	bne.n	800505a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2280      	movs	r2, #128	@ 0x80
 8005042:	4393      	bics	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2240      	movs	r2, #64	@ 0x40
 8005056:	4393      	bics	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a19      	ldr	r2, [pc, #100]	@ (80050c4 <TIM_OC2_SetConfig+0xe8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <TIM_OC2_SetConfig+0x96>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a18      	ldr	r2, [pc, #96]	@ (80050c8 <TIM_OC2_SetConfig+0xec>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d003      	beq.n	8005072 <TIM_OC2_SetConfig+0x96>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a17      	ldr	r2, [pc, #92]	@ (80050cc <TIM_OC2_SetConfig+0xf0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d113      	bne.n	800509a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4a16      	ldr	r2, [pc, #88]	@ (80050d0 <TIM_OC2_SetConfig+0xf4>)
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	4a15      	ldr	r2, [pc, #84]	@ (80050d4 <TIM_OC2_SetConfig+0xf8>)
 800507e:	4013      	ands	r3, r2
 8005080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	46c0      	nop			@ (mov r8, r8)
 80050b6:	46bd      	mov	sp, r7
 80050b8:	b006      	add	sp, #24
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	feff8fff 	.word	0xfeff8fff
 80050c0:	fffffcff 	.word	0xfffffcff
 80050c4:	40012c00 	.word	0x40012c00
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800
 80050d0:	fffffbff 	.word	0xfffffbff
 80050d4:	fffff7ff 	.word	0xfffff7ff

080050d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b086      	sub	sp, #24
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	4a31      	ldr	r2, [pc, #196]	@ (80051b4 <TIM_OC3_SetConfig+0xdc>)
 80050ee:	401a      	ands	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4a2d      	ldr	r2, [pc, #180]	@ (80051b8 <TIM_OC3_SetConfig+0xe0>)
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2203      	movs	r2, #3
 800510c:	4393      	bics	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4a27      	ldr	r2, [pc, #156]	@ (80051bc <TIM_OC3_SetConfig+0xe4>)
 800511e:	4013      	ands	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a23      	ldr	r2, [pc, #140]	@ (80051c0 <TIM_OC3_SetConfig+0xe8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10d      	bne.n	8005152 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	4a22      	ldr	r2, [pc, #136]	@ (80051c4 <TIM_OC3_SetConfig+0xec>)
 800513a:	4013      	ands	r3, r2
 800513c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	4a1e      	ldr	r2, [pc, #120]	@ (80051c8 <TIM_OC3_SetConfig+0xf0>)
 800514e:	4013      	ands	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1a      	ldr	r2, [pc, #104]	@ (80051c0 <TIM_OC3_SetConfig+0xe8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d007      	beq.n	800516a <TIM_OC3_SetConfig+0x92>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1b      	ldr	r2, [pc, #108]	@ (80051cc <TIM_OC3_SetConfig+0xf4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d003      	beq.n	800516a <TIM_OC3_SetConfig+0x92>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1a      	ldr	r2, [pc, #104]	@ (80051d0 <TIM_OC3_SetConfig+0xf8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d113      	bne.n	8005192 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <TIM_OC3_SetConfig+0xfc>)
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <TIM_OC3_SetConfig+0x100>)
 8005176:	4013      	ands	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	621a      	str	r2, [r3, #32]
}
 80051ac:	46c0      	nop			@ (mov r8, r8)
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b006      	add	sp, #24
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	fffffeff 	.word	0xfffffeff
 80051b8:	fffeff8f 	.word	0xfffeff8f
 80051bc:	fffffdff 	.word	0xfffffdff
 80051c0:	40012c00 	.word	0x40012c00
 80051c4:	fffff7ff 	.word	0xfffff7ff
 80051c8:	fffffbff 	.word	0xfffffbff
 80051cc:	40014400 	.word	0x40014400
 80051d0:	40014800 	.word	0x40014800
 80051d4:	ffffefff 	.word	0xffffefff
 80051d8:	ffffdfff 	.word	0xffffdfff

080051dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <TIM_OC4_SetConfig+0xa8>)
 80051f2:	401a      	ands	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4a20      	ldr	r2, [pc, #128]	@ (8005288 <TIM_OC4_SetConfig+0xac>)
 8005208:	4013      	ands	r3, r2
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <TIM_OC4_SetConfig+0xb0>)
 8005210:	4013      	ands	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4a1b      	ldr	r2, [pc, #108]	@ (8005290 <TIM_OC4_SetConfig+0xb4>)
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	031b      	lsls	r3, r3, #12
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a17      	ldr	r2, [pc, #92]	@ (8005294 <TIM_OC4_SetConfig+0xb8>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC4_SetConfig+0x70>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a16      	ldr	r2, [pc, #88]	@ (8005298 <TIM_OC4_SetConfig+0xbc>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC4_SetConfig+0x70>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a15      	ldr	r2, [pc, #84]	@ (800529c <TIM_OC4_SetConfig+0xc0>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d109      	bne.n	8005260 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <TIM_OC4_SetConfig+0xc4>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	019b      	lsls	r3, r3, #6
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	46c0      	nop			@ (mov r8, r8)
 800527c:	46bd      	mov	sp, r7
 800527e:	b006      	add	sp, #24
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			@ (mov r8, r8)
 8005284:	ffffefff 	.word	0xffffefff
 8005288:	feff8fff 	.word	0xfeff8fff
 800528c:	fffffcff 	.word	0xfffffcff
 8005290:	ffffdfff 	.word	0xffffdfff
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	ffffbfff 	.word	0xffffbfff

080052a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	4a21      	ldr	r2, [pc, #132]	@ (8005340 <TIM_OC5_SetConfig+0x9c>)
 80052ba:	401a      	ands	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005344 <TIM_OC5_SetConfig+0xa0>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	4a19      	ldr	r2, [pc, #100]	@ (8005348 <TIM_OC5_SetConfig+0xa4>)
 80052e2:	4013      	ands	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	041b      	lsls	r3, r3, #16
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a15      	ldr	r2, [pc, #84]	@ (800534c <TIM_OC5_SetConfig+0xa8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d007      	beq.n	800530a <TIM_OC5_SetConfig+0x66>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <TIM_OC5_SetConfig+0xac>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_OC5_SetConfig+0x66>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a13      	ldr	r2, [pc, #76]	@ (8005354 <TIM_OC5_SetConfig+0xb0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d109      	bne.n	800531e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	4a0c      	ldr	r2, [pc, #48]	@ (8005340 <TIM_OC5_SetConfig+0x9c>)
 800530e:	4013      	ands	r3, r2
 8005310:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	46c0      	nop			@ (mov r8, r8)
 800533a:	46bd      	mov	sp, r7
 800533c:	b006      	add	sp, #24
 800533e:	bd80      	pop	{r7, pc}
 8005340:	fffeffff 	.word	0xfffeffff
 8005344:	fffeff8f 	.word	0xfffeff8f
 8005348:	fffdffff 	.word	0xfffdffff
 800534c:	40012c00 	.word	0x40012c00
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	4a22      	ldr	r2, [pc, #136]	@ (80053f8 <TIM_OC6_SetConfig+0xa0>)
 800536e:	401a      	ands	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a1e      	ldr	r2, [pc, #120]	@ (80053fc <TIM_OC6_SetConfig+0xa4>)
 8005384:	4013      	ands	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <TIM_OC6_SetConfig+0xa8>)
 8005398:	4013      	ands	r3, r2
 800539a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	051b      	lsls	r3, r3, #20
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a16      	ldr	r2, [pc, #88]	@ (8005404 <TIM_OC6_SetConfig+0xac>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d007      	beq.n	80053c0 <TIM_OC6_SetConfig+0x68>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a15      	ldr	r2, [pc, #84]	@ (8005408 <TIM_OC6_SetConfig+0xb0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d003      	beq.n	80053c0 <TIM_OC6_SetConfig+0x68>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a14      	ldr	r2, [pc, #80]	@ (800540c <TIM_OC6_SetConfig+0xb4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d109      	bne.n	80053d4 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	4a13      	ldr	r2, [pc, #76]	@ (8005410 <TIM_OC6_SetConfig+0xb8>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	029b      	lsls	r3, r3, #10
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	46c0      	nop			@ (mov r8, r8)
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b006      	add	sp, #24
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	46c0      	nop			@ (mov r8, r8)
 80053f8:	ffefffff 	.word	0xffefffff
 80053fc:	feff8fff 	.word	0xfeff8fff
 8005400:	ffdfffff 	.word	0xffdfffff
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800
 8005410:	fffbffff 	.word	0xfffbffff

08005414 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	221f      	movs	r2, #31
 8005424:	4013      	ands	r3, r2
 8005426:	2201      	movs	r2, #1
 8005428:	409a      	lsls	r2, r3
 800542a:	0013      	movs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	43d2      	mvns	r2, r2
 8005436:	401a      	ands	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6a1a      	ldr	r2, [r3, #32]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	211f      	movs	r1, #31
 8005444:	400b      	ands	r3, r1
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4099      	lsls	r1, r3
 800544a:	000b      	movs	r3, r1
 800544c:	431a      	orrs	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	46c0      	nop			@ (mov r8, r8)
 8005454:	46bd      	mov	sp, r7
 8005456:	b006      	add	sp, #24
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2184      	movs	r1, #132	@ 0x84
 8005468:	4a1c      	ldr	r2, [pc, #112]	@ (80054dc <TIM_ResetCallback+0x80>)
 800546a:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2188      	movs	r1, #136	@ 0x88
 8005470:	4a1b      	ldr	r2, [pc, #108]	@ (80054e0 <TIM_ResetCallback+0x84>)
 8005472:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	218c      	movs	r1, #140	@ 0x8c
 8005478:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <TIM_ResetCallback+0x88>)
 800547a:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2190      	movs	r1, #144	@ 0x90
 8005480:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <TIM_ResetCallback+0x8c>)
 8005482:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2194      	movs	r1, #148	@ 0x94
 8005488:	4a18      	ldr	r2, [pc, #96]	@ (80054ec <TIM_ResetCallback+0x90>)
 800548a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2198      	movs	r1, #152	@ 0x98
 8005490:	4a17      	ldr	r2, [pc, #92]	@ (80054f0 <TIM_ResetCallback+0x94>)
 8005492:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	219c      	movs	r1, #156	@ 0x9c
 8005498:	4a16      	ldr	r2, [pc, #88]	@ (80054f4 <TIM_ResetCallback+0x98>)
 800549a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	21a0      	movs	r1, #160	@ 0xa0
 80054a0:	4a15      	ldr	r2, [pc, #84]	@ (80054f8 <TIM_ResetCallback+0x9c>)
 80054a2:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	21a4      	movs	r1, #164	@ 0xa4
 80054a8:	4a14      	ldr	r2, [pc, #80]	@ (80054fc <TIM_ResetCallback+0xa0>)
 80054aa:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	21a8      	movs	r1, #168	@ 0xa8
 80054b0:	4a13      	ldr	r2, [pc, #76]	@ (8005500 <TIM_ResetCallback+0xa4>)
 80054b2:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	21ac      	movs	r1, #172	@ 0xac
 80054b8:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <TIM_ResetCallback+0xa8>)
 80054ba:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	21b0      	movs	r1, #176	@ 0xb0
 80054c0:	4a11      	ldr	r2, [pc, #68]	@ (8005508 <TIM_ResetCallback+0xac>)
 80054c2:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	21b4      	movs	r1, #180	@ 0xb4
 80054c8:	4a10      	ldr	r2, [pc, #64]	@ (800550c <TIM_ResetCallback+0xb0>)
 80054ca:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	21b8      	movs	r1, #184	@ 0xb8
 80054d0:	4a0f      	ldr	r2, [pc, #60]	@ (8005510 <TIM_ResetCallback+0xb4>)
 80054d2:	505a      	str	r2, [r3, r1]
}
 80054d4:	46c0      	nop			@ (mov r8, r8)
 80054d6:	46bd      	mov	sp, r7
 80054d8:	b002      	add	sp, #8
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	08004b29 	.word	0x08004b29
 80054e0:	08004b39 	.word	0x08004b39
 80054e4:	08004b99 	.word	0x08004b99
 80054e8:	08004ba9 	.word	0x08004ba9
 80054ec:	08004b59 	.word	0x08004b59
 80054f0:	08004b69 	.word	0x08004b69
 80054f4:	08004b49 	.word	0x08004b49
 80054f8:	08004b79 	.word	0x08004b79
 80054fc:	08004b89 	.word	0x08004b89
 8005500:	08004bb9 	.word	0x08004bb9
 8005504:	0800564d 	.word	0x0800564d
 8005508:	0800565d 	.word	0x0800565d
 800550c:	0800566d 	.word	0x0800566d
 8005510:	0800567d 	.word	0x0800567d

08005514 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	223c      	movs	r2, #60	@ 0x3c
 8005526:	5c9b      	ldrb	r3, [r3, r2]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800552c:	2302      	movs	r3, #2
 800552e:	e06f      	b.n	8005610 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	223c      	movs	r2, #60	@ 0x3c
 8005534:	2101      	movs	r1, #1
 8005536:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	4393      	bics	r3, r2
 800553e:	001a      	movs	r2, r3
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a33      	ldr	r2, [pc, #204]	@ (8005618 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800554c:	401a      	ands	r2, r3
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a30      	ldr	r2, [pc, #192]	@ (800561c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800555a:	401a      	ands	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4a2e      	ldr	r2, [pc, #184]	@ (8005620 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8005568:	401a      	ands	r2, r3
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4a2b      	ldr	r2, [pc, #172]	@ (8005624 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005576:	401a      	ands	r2, r3
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005584:	401a      	ands	r2, r3
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a26      	ldr	r2, [pc, #152]	@ (800562c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005592:	401a      	ands	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a24      	ldr	r2, [pc, #144]	@ (8005630 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80055a0:	401a      	ands	r2, r3
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	041b      	lsls	r3, r3, #16
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a21      	ldr	r2, [pc, #132]	@ (8005634 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80055b0:	401a      	ands	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1e      	ldr	r2, [pc, #120]	@ (8005638 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d11c      	bne.n	80055fe <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4a1d      	ldr	r2, [pc, #116]	@ (800563c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80055c8:	401a      	ands	r2, r3
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ce:	051b      	lsls	r3, r3, #20
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80055d8:	401a      	ands	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80055e6:	401a      	ands	r2, r3
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ec:	4313      	orrs	r3, r2
 80055ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a15      	ldr	r2, [pc, #84]	@ (8005648 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80055f4:	401a      	ands	r2, r3
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	223c      	movs	r2, #60	@ 0x3c
 800560a:	2100      	movs	r1, #0
 800560c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	0018      	movs	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	b004      	add	sp, #16
 8005616:	bd80      	pop	{r7, pc}
 8005618:	fffffcff 	.word	0xfffffcff
 800561c:	fffffbff 	.word	0xfffffbff
 8005620:	fffff7ff 	.word	0xfffff7ff
 8005624:	ffffefff 	.word	0xffffefff
 8005628:	ffffdfff 	.word	0xffffdfff
 800562c:	ffffbfff 	.word	0xffffbfff
 8005630:	fff0ffff 	.word	0xfff0ffff
 8005634:	efffffff 	.word	0xefffffff
 8005638:	40012c00 	.word	0x40012c00
 800563c:	ff0fffff 	.word	0xff0fffff
 8005640:	feffffff 	.word	0xfeffffff
 8005644:	fdffffff 	.word	0xfdffffff
 8005648:	dfffffff 	.word	0xdfffffff

0800564c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005654:	46c0      	nop			@ (mov r8, r8)
 8005656:	46bd      	mov	sp, r7
 8005658:	b002      	add	sp, #8
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8005664:	46c0      	nop			@ (mov r8, r8)
 8005666:	46bd      	mov	sp, r7
 8005668:	b002      	add	sp, #8
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005684:	46c0      	nop			@ (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b002      	add	sp, #8
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e046      	b.n	800572c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2288      	movs	r2, #136	@ 0x88
 80056a2:	589b      	ldr	r3, [r3, r2]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d107      	bne.n	80056b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2284      	movs	r2, #132	@ 0x84
 80056ac:	2100      	movs	r1, #0
 80056ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	0018      	movs	r0, r3
 80056b4:	f7fb fd2e 	bl	8001114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2288      	movs	r2, #136	@ 0x88
 80056bc:	2124      	movs	r1, #36	@ 0x24
 80056be:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2101      	movs	r1, #1
 80056cc:	438a      	bics	r2, r1
 80056ce:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 faa4 	bl	8005c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 f828 	bl	8005738 <UART_SetConfig>
 80056e8:	0003      	movs	r3, r0
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d101      	bne.n	80056f2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e01c      	b.n	800572c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	490d      	ldr	r1, [pc, #52]	@ (8005734 <HAL_UART_Init+0xa8>)
 80056fe:	400a      	ands	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	212a      	movs	r1, #42	@ 0x2a
 800570e:	438a      	bics	r2, r1
 8005710:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	430a      	orrs	r2, r1
 8005720:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	0018      	movs	r0, r3
 8005726:	f000 fb33 	bl	8005d90 <UART_CheckIdleState>
 800572a:	0003      	movs	r3, r0
}
 800572c:	0018      	movs	r0, r3
 800572e:	46bd      	mov	sp, r7
 8005730:	b002      	add	sp, #8
 8005732:	bd80      	pop	{r7, pc}
 8005734:	ffffb7ff 	.word	0xffffb7ff

08005738 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005738:	b5b0      	push	{r4, r5, r7, lr}
 800573a:	b090      	sub	sp, #64	@ 0x40
 800573c:	af00      	add	r7, sp, #0
 800573e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005740:	231a      	movs	r3, #26
 8005742:	2220      	movs	r2, #32
 8005744:	189b      	adds	r3, r3, r2
 8005746:	19db      	adds	r3, r3, r7
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	431a      	orrs	r2, r3
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	431a      	orrs	r2, r3
 800575c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4313      	orrs	r3, r2
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4ac4      	ldr	r2, [pc, #784]	@ (8005a7c <UART_SetConfig+0x344>)
 800576c:	4013      	ands	r3, r2
 800576e:	0019      	movs	r1, r3
 8005770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005776:	430b      	orrs	r3, r1
 8005778:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4abf      	ldr	r2, [pc, #764]	@ (8005a80 <UART_SetConfig+0x348>)
 8005782:	4013      	ands	r3, r2
 8005784:	0018      	movs	r0, r3
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	68d9      	ldr	r1, [r3, #12]
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	0003      	movs	r3, r0
 8005790:	430b      	orrs	r3, r1
 8005792:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4ab9      	ldr	r2, [pc, #740]	@ (8005a84 <UART_SetConfig+0x34c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d004      	beq.n	80057ae <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057aa:	4313      	orrs	r3, r2
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	4ab4      	ldr	r2, [pc, #720]	@ (8005a88 <UART_SetConfig+0x350>)
 80057b6:	4013      	ands	r3, r2
 80057b8:	0019      	movs	r1, r3
 80057ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c0:	430b      	orrs	r3, r1
 80057c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ca:	220f      	movs	r2, #15
 80057cc:	4393      	bics	r3, r2
 80057ce:	0018      	movs	r0, r3
 80057d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80057d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	0003      	movs	r3, r0
 80057da:	430b      	orrs	r3, r1
 80057dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4aaa      	ldr	r2, [pc, #680]	@ (8005a8c <UART_SetConfig+0x354>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d131      	bne.n	800584c <UART_SetConfig+0x114>
 80057e8:	4ba9      	ldr	r3, [pc, #676]	@ (8005a90 <UART_SetConfig+0x358>)
 80057ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057ec:	2203      	movs	r2, #3
 80057ee:	4013      	ands	r3, r2
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d01d      	beq.n	8005830 <UART_SetConfig+0xf8>
 80057f4:	d823      	bhi.n	800583e <UART_SetConfig+0x106>
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d00c      	beq.n	8005814 <UART_SetConfig+0xdc>
 80057fa:	d820      	bhi.n	800583e <UART_SetConfig+0x106>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <UART_SetConfig+0xce>
 8005800:	2b01      	cmp	r3, #1
 8005802:	d00e      	beq.n	8005822 <UART_SetConfig+0xea>
 8005804:	e01b      	b.n	800583e <UART_SetConfig+0x106>
 8005806:	231b      	movs	r3, #27
 8005808:	2220      	movs	r2, #32
 800580a:	189b      	adds	r3, r3, r2
 800580c:	19db      	adds	r3, r3, r7
 800580e:	2200      	movs	r2, #0
 8005810:	701a      	strb	r2, [r3, #0]
 8005812:	e071      	b.n	80058f8 <UART_SetConfig+0x1c0>
 8005814:	231b      	movs	r3, #27
 8005816:	2220      	movs	r2, #32
 8005818:	189b      	adds	r3, r3, r2
 800581a:	19db      	adds	r3, r3, r7
 800581c:	2202      	movs	r2, #2
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e06a      	b.n	80058f8 <UART_SetConfig+0x1c0>
 8005822:	231b      	movs	r3, #27
 8005824:	2220      	movs	r2, #32
 8005826:	189b      	adds	r3, r3, r2
 8005828:	19db      	adds	r3, r3, r7
 800582a:	2204      	movs	r2, #4
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e063      	b.n	80058f8 <UART_SetConfig+0x1c0>
 8005830:	231b      	movs	r3, #27
 8005832:	2220      	movs	r2, #32
 8005834:	189b      	adds	r3, r3, r2
 8005836:	19db      	adds	r3, r3, r7
 8005838:	2208      	movs	r2, #8
 800583a:	701a      	strb	r2, [r3, #0]
 800583c:	e05c      	b.n	80058f8 <UART_SetConfig+0x1c0>
 800583e:	231b      	movs	r3, #27
 8005840:	2220      	movs	r2, #32
 8005842:	189b      	adds	r3, r3, r2
 8005844:	19db      	adds	r3, r3, r7
 8005846:	2210      	movs	r2, #16
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	e055      	b.n	80058f8 <UART_SetConfig+0x1c0>
 800584c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a90      	ldr	r2, [pc, #576]	@ (8005a94 <UART_SetConfig+0x35c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d106      	bne.n	8005864 <UART_SetConfig+0x12c>
 8005856:	231b      	movs	r3, #27
 8005858:	2220      	movs	r2, #32
 800585a:	189b      	adds	r3, r3, r2
 800585c:	19db      	adds	r3, r3, r7
 800585e:	2200      	movs	r2, #0
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e049      	b.n	80058f8 <UART_SetConfig+0x1c0>
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a86      	ldr	r2, [pc, #536]	@ (8005a84 <UART_SetConfig+0x34c>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d13e      	bne.n	80058ec <UART_SetConfig+0x1b4>
 800586e:	4b88      	ldr	r3, [pc, #544]	@ (8005a90 <UART_SetConfig+0x358>)
 8005870:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005872:	23c0      	movs	r3, #192	@ 0xc0
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	4013      	ands	r3, r2
 8005878:	22c0      	movs	r2, #192	@ 0xc0
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	4293      	cmp	r3, r2
 800587e:	d027      	beq.n	80058d0 <UART_SetConfig+0x198>
 8005880:	22c0      	movs	r2, #192	@ 0xc0
 8005882:	0112      	lsls	r2, r2, #4
 8005884:	4293      	cmp	r3, r2
 8005886:	d82a      	bhi.n	80058de <UART_SetConfig+0x1a6>
 8005888:	2280      	movs	r2, #128	@ 0x80
 800588a:	0112      	lsls	r2, r2, #4
 800588c:	4293      	cmp	r3, r2
 800588e:	d011      	beq.n	80058b4 <UART_SetConfig+0x17c>
 8005890:	2280      	movs	r2, #128	@ 0x80
 8005892:	0112      	lsls	r2, r2, #4
 8005894:	4293      	cmp	r3, r2
 8005896:	d822      	bhi.n	80058de <UART_SetConfig+0x1a6>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d004      	beq.n	80058a6 <UART_SetConfig+0x16e>
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	00d2      	lsls	r2, r2, #3
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00e      	beq.n	80058c2 <UART_SetConfig+0x18a>
 80058a4:	e01b      	b.n	80058de <UART_SetConfig+0x1a6>
 80058a6:	231b      	movs	r3, #27
 80058a8:	2220      	movs	r2, #32
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	19db      	adds	r3, r3, r7
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
 80058b2:	e021      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058b4:	231b      	movs	r3, #27
 80058b6:	2220      	movs	r2, #32
 80058b8:	189b      	adds	r3, r3, r2
 80058ba:	19db      	adds	r3, r3, r7
 80058bc:	2202      	movs	r2, #2
 80058be:	701a      	strb	r2, [r3, #0]
 80058c0:	e01a      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058c2:	231b      	movs	r3, #27
 80058c4:	2220      	movs	r2, #32
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	19db      	adds	r3, r3, r7
 80058ca:	2204      	movs	r2, #4
 80058cc:	701a      	strb	r2, [r3, #0]
 80058ce:	e013      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058d0:	231b      	movs	r3, #27
 80058d2:	2220      	movs	r2, #32
 80058d4:	189b      	adds	r3, r3, r2
 80058d6:	19db      	adds	r3, r3, r7
 80058d8:	2208      	movs	r2, #8
 80058da:	701a      	strb	r2, [r3, #0]
 80058dc:	e00c      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058de:	231b      	movs	r3, #27
 80058e0:	2220      	movs	r2, #32
 80058e2:	189b      	adds	r3, r3, r2
 80058e4:	19db      	adds	r3, r3, r7
 80058e6:	2210      	movs	r2, #16
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e005      	b.n	80058f8 <UART_SetConfig+0x1c0>
 80058ec:	231b      	movs	r3, #27
 80058ee:	2220      	movs	r2, #32
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	19db      	adds	r3, r3, r7
 80058f4:	2210      	movs	r2, #16
 80058f6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a61      	ldr	r2, [pc, #388]	@ (8005a84 <UART_SetConfig+0x34c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d000      	beq.n	8005904 <UART_SetConfig+0x1cc>
 8005902:	e092      	b.n	8005a2a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005904:	231b      	movs	r3, #27
 8005906:	2220      	movs	r2, #32
 8005908:	189b      	adds	r3, r3, r2
 800590a:	19db      	adds	r3, r3, r7
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b08      	cmp	r3, #8
 8005910:	d015      	beq.n	800593e <UART_SetConfig+0x206>
 8005912:	dc18      	bgt.n	8005946 <UART_SetConfig+0x20e>
 8005914:	2b04      	cmp	r3, #4
 8005916:	d00d      	beq.n	8005934 <UART_SetConfig+0x1fc>
 8005918:	dc15      	bgt.n	8005946 <UART_SetConfig+0x20e>
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <UART_SetConfig+0x1ec>
 800591e:	2b02      	cmp	r3, #2
 8005920:	d005      	beq.n	800592e <UART_SetConfig+0x1f6>
 8005922:	e010      	b.n	8005946 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005924:	f7fe fa02 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005928:	0003      	movs	r3, r0
 800592a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800592c:	e014      	b.n	8005958 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592e:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <UART_SetConfig+0x360>)
 8005930:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005932:	e011      	b.n	8005958 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005934:	f7fe f96e 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005938:	0003      	movs	r3, r0
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800593c:	e00c      	b.n	8005958 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593e:	2380      	movs	r3, #128	@ 0x80
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005944:	e008      	b.n	8005958 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8005946:	2300      	movs	r3, #0
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800594a:	231a      	movs	r3, #26
 800594c:	2220      	movs	r2, #32
 800594e:	189b      	adds	r3, r3, r2
 8005950:	19db      	adds	r3, r3, r7
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
        break;
 8005956:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595a:	2b00      	cmp	r3, #0
 800595c:	d100      	bne.n	8005960 <UART_SetConfig+0x228>
 800595e:	e147      	b.n	8005bf0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005962:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005964:	4b4d      	ldr	r3, [pc, #308]	@ (8005a9c <UART_SetConfig+0x364>)
 8005966:	0052      	lsls	r2, r2, #1
 8005968:	5ad3      	ldrh	r3, [r2, r3]
 800596a:	0019      	movs	r1, r3
 800596c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800596e:	f7fa fbc9 	bl	8000104 <__udivsi3>
 8005972:	0003      	movs	r3, r0
 8005974:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	0013      	movs	r3, r2
 800597c:	005b      	lsls	r3, r3, #1
 800597e:	189b      	adds	r3, r3, r2
 8005980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005982:	429a      	cmp	r2, r3
 8005984:	d305      	bcc.n	8005992 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800598c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598e:	429a      	cmp	r2, r3
 8005990:	d906      	bls.n	80059a0 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8005992:	231a      	movs	r3, #26
 8005994:	2220      	movs	r2, #32
 8005996:	189b      	adds	r3, r3, r2
 8005998:	19db      	adds	r3, r3, r7
 800599a:	2201      	movs	r2, #1
 800599c:	701a      	strb	r2, [r3, #0]
 800599e:	e127      	b.n	8005bf0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	2300      	movs	r3, #0
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059ac:	4b3b      	ldr	r3, [pc, #236]	@ (8005a9c <UART_SetConfig+0x364>)
 80059ae:	0052      	lsls	r2, r2, #1
 80059b0:	5ad3      	ldrh	r3, [r2, r3]
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	69b8      	ldr	r0, [r7, #24]
 80059be:	69f9      	ldr	r1, [r7, #28]
 80059c0:	f7fa fc2c 	bl	800021c <__aeabi_uldivmod>
 80059c4:	0002      	movs	r2, r0
 80059c6:	000b      	movs	r3, r1
 80059c8:	0e11      	lsrs	r1, r2, #24
 80059ca:	021d      	lsls	r5, r3, #8
 80059cc:	430d      	orrs	r5, r1
 80059ce:	0214      	lsls	r4, r2, #8
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	085b      	lsrs	r3, r3, #1
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	2300      	movs	r3, #0
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	1900      	adds	r0, r0, r4
 80059e2:	4169      	adcs	r1, r5
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	607b      	str	r3, [r7, #4]
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f7fa fc13 	bl	800021c <__aeabi_uldivmod>
 80059f6:	0002      	movs	r2, r0
 80059f8:	000b      	movs	r3, r1
 80059fa:	0013      	movs	r3, r2
 80059fc:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a00:	23c0      	movs	r3, #192	@ 0xc0
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d309      	bcc.n	8005a1c <UART_SetConfig+0x2e4>
 8005a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0a:	2380      	movs	r3, #128	@ 0x80
 8005a0c:	035b      	lsls	r3, r3, #13
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d204      	bcs.n	8005a1c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e0e9      	b.n	8005bf0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8005a1c:	231a      	movs	r3, #26
 8005a1e:	2220      	movs	r2, #32
 8005a20:	189b      	adds	r3, r3, r2
 8005a22:	19db      	adds	r3, r3, r7
 8005a24:	2201      	movs	r2, #1
 8005a26:	701a      	strb	r2, [r3, #0]
 8005a28:	e0e2      	b.n	8005bf0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d000      	beq.n	8005a38 <UART_SetConfig+0x300>
 8005a36:	e083      	b.n	8005b40 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8005a38:	231b      	movs	r3, #27
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	19db      	adds	r3, r3, r7
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d015      	beq.n	8005a72 <UART_SetConfig+0x33a>
 8005a46:	dc2b      	bgt.n	8005aa0 <UART_SetConfig+0x368>
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d00d      	beq.n	8005a68 <UART_SetConfig+0x330>
 8005a4c:	dc28      	bgt.n	8005aa0 <UART_SetConfig+0x368>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <UART_SetConfig+0x320>
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d005      	beq.n	8005a62 <UART_SetConfig+0x32a>
 8005a56:	e023      	b.n	8005aa0 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a58:	f7fe f968 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005a5c:	0003      	movs	r3, r0
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a60:	e027      	b.n	8005ab2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <UART_SetConfig+0x360>)
 8005a64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a66:	e024      	b.n	8005ab2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a68:	f7fe f8d4 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005a6c:	0003      	movs	r3, r0
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a70:	e01f      	b.n	8005ab2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a72:	2380      	movs	r3, #128	@ 0x80
 8005a74:	021b      	lsls	r3, r3, #8
 8005a76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005a78:	e01b      	b.n	8005ab2 <UART_SetConfig+0x37a>
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	cfff69f3 	.word	0xcfff69f3
 8005a80:	ffffcfff 	.word	0xffffcfff
 8005a84:	40008000 	.word	0x40008000
 8005a88:	11fff4ff 	.word	0x11fff4ff
 8005a8c:	40013800 	.word	0x40013800
 8005a90:	40021000 	.word	0x40021000
 8005a94:	40004400 	.word	0x40004400
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	080064f8 	.word	0x080064f8
      default:
        pclk = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005aa4:	231a      	movs	r3, #26
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	189b      	adds	r3, r3, r2
 8005aaa:	19db      	adds	r3, r3, r7
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
        break;
 8005ab0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d100      	bne.n	8005aba <UART_SetConfig+0x382>
 8005ab8:	e09a      	b.n	8005bf0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005abe:	4b58      	ldr	r3, [pc, #352]	@ (8005c20 <UART_SetConfig+0x4e8>)
 8005ac0:	0052      	lsls	r2, r2, #1
 8005ac2:	5ad3      	ldrh	r3, [r2, r3]
 8005ac4:	0019      	movs	r1, r3
 8005ac6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ac8:	f7fa fb1c 	bl	8000104 <__udivsi3>
 8005acc:	0003      	movs	r3, r0
 8005ace:	005a      	lsls	r2, r3, #1
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	085b      	lsrs	r3, r3, #1
 8005ad6:	18d2      	adds	r2, r2, r3
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	0019      	movs	r1, r3
 8005ade:	0010      	movs	r0, r2
 8005ae0:	f7fa fb10 	bl	8000104 <__udivsi3>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aea:	2b0f      	cmp	r3, #15
 8005aec:	d921      	bls.n	8005b32 <UART_SetConfig+0x3fa>
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	2380      	movs	r3, #128	@ 0x80
 8005af2:	025b      	lsls	r3, r3, #9
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d21c      	bcs.n	8005b32 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	200e      	movs	r0, #14
 8005afe:	2420      	movs	r4, #32
 8005b00:	1903      	adds	r3, r0, r4
 8005b02:	19db      	adds	r3, r3, r7
 8005b04:	210f      	movs	r1, #15
 8005b06:	438a      	bics	r2, r1
 8005b08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2207      	movs	r2, #7
 8005b12:	4013      	ands	r3, r2
 8005b14:	b299      	uxth	r1, r3
 8005b16:	1903      	adds	r3, r0, r4
 8005b18:	19db      	adds	r3, r3, r7
 8005b1a:	1902      	adds	r2, r0, r4
 8005b1c:	19d2      	adds	r2, r2, r7
 8005b1e:	8812      	ldrh	r2, [r2, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	1902      	adds	r2, r0, r4
 8005b2a:	19d2      	adds	r2, r2, r7
 8005b2c:	8812      	ldrh	r2, [r2, #0]
 8005b2e:	60da      	str	r2, [r3, #12]
 8005b30:	e05e      	b.n	8005bf0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005b32:	231a      	movs	r3, #26
 8005b34:	2220      	movs	r2, #32
 8005b36:	189b      	adds	r3, r3, r2
 8005b38:	19db      	adds	r3, r3, r7
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	701a      	strb	r2, [r3, #0]
 8005b3e:	e057      	b.n	8005bf0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b40:	231b      	movs	r3, #27
 8005b42:	2220      	movs	r2, #32
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d015      	beq.n	8005b7a <UART_SetConfig+0x442>
 8005b4e:	dc18      	bgt.n	8005b82 <UART_SetConfig+0x44a>
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d00d      	beq.n	8005b70 <UART_SetConfig+0x438>
 8005b54:	dc15      	bgt.n	8005b82 <UART_SetConfig+0x44a>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x428>
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d005      	beq.n	8005b6a <UART_SetConfig+0x432>
 8005b5e:	e010      	b.n	8005b82 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b60:	f7fe f8e4 	bl	8003d2c <HAL_RCC_GetPCLK1Freq>
 8005b64:	0003      	movs	r3, r0
 8005b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b68:	e014      	b.n	8005b94 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8005c24 <UART_SetConfig+0x4ec>)
 8005b6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b6e:	e011      	b.n	8005b94 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b70:	f7fe f850 	bl	8003c14 <HAL_RCC_GetSysClockFreq>
 8005b74:	0003      	movs	r3, r0
 8005b76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b78:	e00c      	b.n	8005b94 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b7a:	2380      	movs	r3, #128	@ 0x80
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005b80:	e008      	b.n	8005b94 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8005b82:	2300      	movs	r3, #0
 8005b84:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8005b86:	231a      	movs	r3, #26
 8005b88:	2220      	movs	r2, #32
 8005b8a:	189b      	adds	r3, r3, r2
 8005b8c:	19db      	adds	r3, r3, r7
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
        break;
 8005b92:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02a      	beq.n	8005bf0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b9e:	4b20      	ldr	r3, [pc, #128]	@ (8005c20 <UART_SetConfig+0x4e8>)
 8005ba0:	0052      	lsls	r2, r2, #1
 8005ba2:	5ad3      	ldrh	r3, [r2, r3]
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ba8:	f7fa faac 	bl	8000104 <__udivsi3>
 8005bac:	0003      	movs	r3, r0
 8005bae:	001a      	movs	r2, r3
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	085b      	lsrs	r3, r3, #1
 8005bb6:	18d2      	adds	r2, r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	0019      	movs	r1, r3
 8005bbe:	0010      	movs	r0, r2
 8005bc0:	f7fa faa0 	bl	8000104 <__udivsi3>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	2b0f      	cmp	r3, #15
 8005bcc:	d90a      	bls.n	8005be4 <UART_SetConfig+0x4ac>
 8005bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd0:	2380      	movs	r3, #128	@ 0x80
 8005bd2:	025b      	lsls	r3, r3, #9
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d205      	bcs.n	8005be4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	60da      	str	r2, [r3, #12]
 8005be2:	e005      	b.n	8005bf0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8005be4:	231a      	movs	r3, #26
 8005be6:	2220      	movs	r2, #32
 8005be8:	189b      	adds	r3, r3, r2
 8005bea:	19db      	adds	r3, r3, r7
 8005bec:	2201      	movs	r2, #1
 8005bee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	226a      	movs	r2, #106	@ 0x6a
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2268      	movs	r2, #104	@ 0x68
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	2200      	movs	r2, #0
 8005c04:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	2200      	movs	r2, #0
 8005c0a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c0c:	231a      	movs	r3, #26
 8005c0e:	2220      	movs	r2, #32
 8005c10:	189b      	adds	r3, r3, r2
 8005c12:	19db      	adds	r3, r3, r7
 8005c14:	781b      	ldrb	r3, [r3, #0]
}
 8005c16:	0018      	movs	r0, r3
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	b010      	add	sp, #64	@ 0x40
 8005c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	080064f8 	.word	0x080064f8
 8005c24:	00f42400 	.word	0x00f42400

08005c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c34:	2208      	movs	r2, #8
 8005c36:	4013      	ands	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	4a4a      	ldr	r2, [pc, #296]	@ (8005d6c <UART_AdvFeatureConfig+0x144>)
 8005c42:	4013      	ands	r3, r2
 8005c44:	0019      	movs	r1, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	2201      	movs	r2, #1
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00b      	beq.n	8005c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	4a43      	ldr	r2, [pc, #268]	@ (8005d70 <UART_AdvFeatureConfig+0x148>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	0019      	movs	r1, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	430a      	orrs	r2, r1
 8005c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c78:	2202      	movs	r2, #2
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	4a3b      	ldr	r2, [pc, #236]	@ (8005d74 <UART_AdvFeatureConfig+0x14c>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	0019      	movs	r1, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	430a      	orrs	r2, r1
 8005c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	2204      	movs	r2, #4
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d00b      	beq.n	8005cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4a34      	ldr	r2, [pc, #208]	@ (8005d78 <UART_AdvFeatureConfig+0x150>)
 8005ca8:	4013      	ands	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d00b      	beq.n	8005cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005d7c <UART_AdvFeatureConfig+0x154>)
 8005cca:	4013      	ands	r3, r2
 8005ccc:	0019      	movs	r1, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cde:	2220      	movs	r2, #32
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d00b      	beq.n	8005cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	4a25      	ldr	r2, [pc, #148]	@ (8005d80 <UART_AdvFeatureConfig+0x158>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	0019      	movs	r1, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d00:	2240      	movs	r2, #64	@ 0x40
 8005d02:	4013      	ands	r3, r2
 8005d04:	d01d      	beq.n	8005d42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d84 <UART_AdvFeatureConfig+0x15c>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	0019      	movs	r1, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d22:	2380      	movs	r3, #128	@ 0x80
 8005d24:	035b      	lsls	r3, r3, #13
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d10b      	bne.n	8005d42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a15      	ldr	r2, [pc, #84]	@ (8005d88 <UART_AdvFeatureConfig+0x160>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	0019      	movs	r1, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d46:	2280      	movs	r2, #128	@ 0x80
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d00b      	beq.n	8005d64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4a0e      	ldr	r2, [pc, #56]	@ (8005d8c <UART_AdvFeatureConfig+0x164>)
 8005d54:	4013      	ands	r3, r2
 8005d56:	0019      	movs	r1, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  }
}
 8005d64:	46c0      	nop			@ (mov r8, r8)
 8005d66:	46bd      	mov	sp, r7
 8005d68:	b002      	add	sp, #8
 8005d6a:	bd80      	pop	{r7, pc}
 8005d6c:	ffff7fff 	.word	0xffff7fff
 8005d70:	fffdffff 	.word	0xfffdffff
 8005d74:	fffeffff 	.word	0xfffeffff
 8005d78:	fffbffff 	.word	0xfffbffff
 8005d7c:	ffffefff 	.word	0xffffefff
 8005d80:	ffffdfff 	.word	0xffffdfff
 8005d84:	ffefffff 	.word	0xffefffff
 8005d88:	ff9fffff 	.word	0xff9fffff
 8005d8c:	fff7ffff 	.word	0xfff7ffff

08005d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b092      	sub	sp, #72	@ 0x48
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2290      	movs	r2, #144	@ 0x90
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da0:	f7fb fd16 	bl	80017d0 <HAL_GetTick>
 8005da4:	0003      	movs	r3, r0
 8005da6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2208      	movs	r2, #8
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b08      	cmp	r3, #8
 8005db4:	d12d      	bne.n	8005e12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db8:	2280      	movs	r2, #128	@ 0x80
 8005dba:	0391      	lsls	r1, r2, #14
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4a47      	ldr	r2, [pc, #284]	@ (8005edc <UART_CheckIdleState+0x14c>)
 8005dc0:	9200      	str	r2, [sp, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f000 f88e 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005dc8:	1e03      	subs	r3, r0, #0
 8005dca:	d022      	beq.n	8005e12 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	f383 8810 	msr	PRIMASK, r3
}
 8005de0:	46c0      	nop			@ (mov r8, r8)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2180      	movs	r1, #128	@ 0x80
 8005dee:	438a      	bics	r2, r1
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	f383 8810 	msr	PRIMASK, r3
}
 8005dfc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2288      	movs	r2, #136	@ 0x88
 8005e02:	2120      	movs	r1, #32
 8005e04:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2284      	movs	r2, #132	@ 0x84
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e060      	b.n	8005ed4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d146      	bne.n	8005eae <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e22:	2280      	movs	r2, #128	@ 0x80
 8005e24:	03d1      	lsls	r1, r2, #15
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4a2c      	ldr	r2, [pc, #176]	@ (8005edc <UART_CheckIdleState+0x14c>)
 8005e2a:	9200      	str	r2, [sp, #0]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f000 f859 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005e32:	1e03      	subs	r3, r0, #0
 8005e34:	d03b      	beq.n	8005eae <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e36:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e40:	2301      	movs	r3, #1
 8005e42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f383 8810 	msr	PRIMASK, r3
}
 8005e4a:	46c0      	nop			@ (mov r8, r8)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4922      	ldr	r1, [pc, #136]	@ (8005ee0 <UART_CheckIdleState+0x150>)
 8005e58:	400a      	ands	r2, r1
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f383 8810 	msr	PRIMASK, r3
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e68:	f3ef 8310 	mrs	r3, PRIMASK
 8005e6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e72:	2301      	movs	r3, #1
 8005e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f383 8810 	msr	PRIMASK, r3
}
 8005e7c:	46c0      	nop			@ (mov r8, r8)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2101      	movs	r1, #1
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e92:	6a3b      	ldr	r3, [r7, #32]
 8005e94:	f383 8810 	msr	PRIMASK, r3
}
 8005e98:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	228c      	movs	r2, #140	@ 0x8c
 8005e9e:	2120      	movs	r1, #32
 8005ea0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2284      	movs	r2, #132	@ 0x84
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e012      	b.n	8005ed4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2288      	movs	r2, #136	@ 0x88
 8005eb2:	2120      	movs	r1, #32
 8005eb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	228c      	movs	r2, #140	@ 0x8c
 8005eba:	2120      	movs	r1, #32
 8005ebc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2284      	movs	r2, #132	@ 0x84
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005ed2:	2300      	movs	r3, #0
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	b010      	add	sp, #64	@ 0x40
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	01ffffff 	.word	0x01ffffff
 8005ee0:	fffffedf 	.word	0xfffffedf

08005ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	1dfb      	adds	r3, r7, #7
 8005ef2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	e051      	b.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	d04e      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efc:	f7fb fc68 	bl	80017d0 <HAL_GetTick>
 8005f00:	0002      	movs	r2, r0
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e051      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2204      	movs	r2, #4
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d03b      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b80      	cmp	r3, #128	@ 0x80
 8005f26:	d038      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2b40      	cmp	r3, #64	@ 0x40
 8005f2c:	d035      	beq.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	2208      	movs	r2, #8
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d111      	bne.n	8005f60 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2208      	movs	r2, #8
 8005f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	0018      	movs	r0, r3
 8005f48:	f000 f83c 	bl	8005fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2290      	movs	r2, #144	@ 0x90
 8005f50:	2108      	movs	r1, #8
 8005f52:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2284      	movs	r2, #132	@ 0x84
 8005f58:	2100      	movs	r1, #0
 8005f5a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e02c      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	69da      	ldr	r2, [r3, #28]
 8005f66:	2380      	movs	r3, #128	@ 0x80
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	2380      	movs	r3, #128	@ 0x80
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d112      	bne.n	8005f9a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2280      	movs	r2, #128	@ 0x80
 8005f7a:	0112      	lsls	r2, r2, #4
 8005f7c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f81f 	bl	8005fc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2290      	movs	r2, #144	@ 0x90
 8005f8a:	2120      	movs	r1, #32
 8005f8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2284      	movs	r2, #132	@ 0x84
 8005f92:	2100      	movs	r1, #0
 8005f94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e00f      	b.n	8005fba <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	425a      	negs	r2, r3
 8005faa:	4153      	adcs	r3, r2
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	001a      	movs	r2, r3
 8005fb0:	1dfb      	adds	r3, r7, #7
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d09e      	beq.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	0018      	movs	r0, r3
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	b004      	add	sp, #16
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b08e      	sub	sp, #56	@ 0x38
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fd2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	f383 8810 	msr	PRIMASK, r3
}
 8005fe0:	46c0      	nop			@ (mov r8, r8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4926      	ldr	r1, [pc, #152]	@ (8006088 <UART_EndRxTransfer+0xc4>)
 8005fee:	400a      	ands	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f383 8810 	msr	PRIMASK, r3
}
 8005ffc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ffe:	f3ef 8310 	mrs	r3, PRIMASK
 8006002:	623b      	str	r3, [r7, #32]
  return(result);
 8006004:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006006:	633b      	str	r3, [r7, #48]	@ 0x30
 8006008:	2301      	movs	r3, #1
 800600a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	491b      	ldr	r1, [pc, #108]	@ (800608c <UART_EndRxTransfer+0xc8>)
 8006020:	400a      	ands	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
 8006024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006026:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602a:	f383 8810 	msr	PRIMASK, r3
}
 800602e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d118      	bne.n	800606a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006038:	f3ef 8310 	mrs	r3, PRIMASK
 800603c:	60bb      	str	r3, [r7, #8]
  return(result);
 800603e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	2301      	movs	r3, #1
 8006044:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f383 8810 	msr	PRIMASK, r3
}
 800604c:	46c0      	nop			@ (mov r8, r8)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2110      	movs	r1, #16
 800605a:	438a      	bics	r2, r1
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f383 8810 	msr	PRIMASK, r3
}
 8006068:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	228c      	movs	r2, #140	@ 0x8c
 800606e:	2120      	movs	r1, #32
 8006070:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b00e      	add	sp, #56	@ 0x38
 8006084:	bd80      	pop	{r7, pc}
 8006086:	46c0      	nop			@ (mov r8, r8)
 8006088:	fffffedf 	.word	0xfffffedf
 800608c:	effffffe 	.word	0xeffffffe

08006090 <memset>:
 8006090:	0003      	movs	r3, r0
 8006092:	1882      	adds	r2, r0, r2
 8006094:	4293      	cmp	r3, r2
 8006096:	d100      	bne.n	800609a <memset+0xa>
 8006098:	4770      	bx	lr
 800609a:	7019      	strb	r1, [r3, #0]
 800609c:	3301      	adds	r3, #1
 800609e:	e7f9      	b.n	8006094 <memset+0x4>

080060a0 <__libc_init_array>:
 80060a0:	b570      	push	{r4, r5, r6, lr}
 80060a2:	2600      	movs	r6, #0
 80060a4:	4c0c      	ldr	r4, [pc, #48]	@ (80060d8 <__libc_init_array+0x38>)
 80060a6:	4d0d      	ldr	r5, [pc, #52]	@ (80060dc <__libc_init_array+0x3c>)
 80060a8:	1b64      	subs	r4, r4, r5
 80060aa:	10a4      	asrs	r4, r4, #2
 80060ac:	42a6      	cmp	r6, r4
 80060ae:	d109      	bne.n	80060c4 <__libc_init_array+0x24>
 80060b0:	2600      	movs	r6, #0
 80060b2:	f000 f819 	bl	80060e8 <_init>
 80060b6:	4c0a      	ldr	r4, [pc, #40]	@ (80060e0 <__libc_init_array+0x40>)
 80060b8:	4d0a      	ldr	r5, [pc, #40]	@ (80060e4 <__libc_init_array+0x44>)
 80060ba:	1b64      	subs	r4, r4, r5
 80060bc:	10a4      	asrs	r4, r4, #2
 80060be:	42a6      	cmp	r6, r4
 80060c0:	d105      	bne.n	80060ce <__libc_init_array+0x2e>
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	00b3      	lsls	r3, r6, #2
 80060c6:	58eb      	ldr	r3, [r5, r3]
 80060c8:	4798      	blx	r3
 80060ca:	3601      	adds	r6, #1
 80060cc:	e7ee      	b.n	80060ac <__libc_init_array+0xc>
 80060ce:	00b3      	lsls	r3, r6, #2
 80060d0:	58eb      	ldr	r3, [r5, r3]
 80060d2:	4798      	blx	r3
 80060d4:	3601      	adds	r6, #1
 80060d6:	e7f2      	b.n	80060be <__libc_init_array+0x1e>
 80060d8:	08006518 	.word	0x08006518
 80060dc:	08006518 	.word	0x08006518
 80060e0:	0800651c 	.word	0x0800651c
 80060e4:	08006518 	.word	0x08006518

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	46c0      	nop			@ (mov r8, r8)
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
