
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005574  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08005630  08005630  00006630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006134  08006134  00008010  2**0
                  CONTENTS
  4 .ARM          00000008  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800613c  0800613c  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006140  08006140  00007140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08006144  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000994  20000010  08006154  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009a4  08006154  000089a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fab3  00000000  00000000  00008038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003948  00000000  00000000  00027aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  0002b438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001707  00000000  00000000  0002c3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017af8  00000000  00000000  0002dae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002059f  00000000  00000000  000455df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b45a  00000000  00000000  00065b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  0010101c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000d648  00000000  00000000  00103a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000057  00000000  00000000  001110b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005618 	.word	0x08005618

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08005618 	.word	0x08005618

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b500      	push	{lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044c:	2238      	movs	r2, #56	@ 0x38
 800044e:	2100      	movs	r1, #0
 8000450:	a804      	add	r0, sp, #16
 8000452:	f005 f8b5 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	2210      	movs	r2, #16
 8000458:	2100      	movs	r1, #0
 800045a:	4668      	mov	r0, sp
 800045c:	f005 f8b0 	bl	80055c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000460:	2080      	movs	r0, #128	@ 0x80
 8000462:	0080      	lsls	r0, r0, #2
 8000464:	f002 fc90 	bl	8002d88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000468:	2302      	movs	r3, #2
 800046a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800046e:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000470:	3306      	adds	r3, #6
 8000472:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000474:	2380      	movs	r3, #128	@ 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800047a:	23c0      	movs	r3, #192	@ 0xc0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2280      	movs	r2, #128	@ 0x80
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800047e:	04db      	lsls	r3, r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000480:	0052      	lsls	r2, r2, #1
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000482:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000484:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000486:	2140      	movs	r1, #64	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800048a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800048c:	059b      	lsls	r3, r3, #22
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048e:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000490:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000492:	9109      	str	r1, [sp, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000494:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000496:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000498:	f002 fca6 	bl	8002de8 <HAL_RCC_OscConfig>
 800049c:	2800      	cmp	r0, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x5c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a0:	b672      	cpsid	i

void Error_Handler(void)
{
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a2:	e7fe      	b.n	80004a2 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	2207      	movs	r2, #7
 80004a6:	2302      	movs	r3, #2
 80004a8:	9200      	str	r2, [sp, #0]
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b0:	2102      	movs	r1, #2
 80004b2:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	9202      	str	r2, [sp, #8]
 80004b6:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b8:	f002 ff4c 	bl	8003354 <HAL_RCC_ClockConfig>
 80004bc:	2800      	cmp	r0, #0
 80004be:	d001      	beq.n	80004c4 <SystemClock_Config+0x7c>
 80004c0:	b672      	cpsid	i
  while (1)
 80004c2:	e7fe      	b.n	80004c2 <SystemClock_Config+0x7a>
}
 80004c4:	b013      	add	sp, #76	@ 0x4c
 80004c6:	bd00      	pop	{pc}

080004c8 <MX_ADC1_Init>:
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	b084      	sub	sp, #16
  ADC_ChannelConfTypeDef sConfig = {0};
 80004cc:	220c      	movs	r2, #12
 80004ce:	2100      	movs	r1, #0
 80004d0:	a801      	add	r0, sp, #4
 80004d2:	f005 f875 	bl	80055c0 <memset>
  hadc1.Instance = ADC1;
 80004d6:	4c2c      	ldr	r4, [pc, #176]	@ (8000588 <MX_ADC1_Init+0xc0>)
 80004d8:	4b2c      	ldr	r3, [pc, #176]	@ (800058c <MX_ADC1_Init+0xc4>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004da:	2280      	movs	r2, #128	@ 0x80
  hadc1.Instance = ADC1;
 80004dc:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004de:	2380      	movs	r3, #128	@ 0x80
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e0:	0392      	lsls	r2, r2, #14
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004e2:	2120      	movs	r1, #32
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e4:	6122      	str	r2, [r4, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80004e6:	2200      	movs	r2, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004e8:	05db      	lsls	r3, r3, #23
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80004ea:	2508      	movs	r5, #8
  hadc1.Init.NbrOfConversion = 4;
 80004ec:	2604      	movs	r6, #4
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004ee:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004f0:	2300      	movs	r3, #0
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f2:	5462      	strb	r2, [r4, r1]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004f4:	310c      	adds	r1, #12
 80004f6:	5462      	strb	r2, [r4, r1]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004f8:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80004fa:	3110      	adds	r1, #16
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004fc:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	60e3      	str	r3, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000500:	6165      	str	r5, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000502:	8323      	strh	r3, [r4, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000504:	76a2      	strb	r2, [r4, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000506:	61e6      	str	r6, [r4, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000508:	6263      	str	r3, [r4, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800050a:	62a3      	str	r3, [r4, #40]	@ 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800050c:	6323      	str	r3, [r4, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800050e:	6363      	str	r3, [r4, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000510:	63a3      	str	r3, [r4, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000512:	5462      	strb	r2, [r4, r1]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000514:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000516:	f001 fd33 	bl	8001f80 <HAL_ADC_Init>
 800051a:	2800      	cmp	r0, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0x5a>
 800051e:	b672      	cpsid	i
  while (1)
 8000520:	e7fe      	b.n	8000520 <MX_ADC1_Init+0x58>
  sConfig.Channel = ADC_CHANNEL_0;
 8000522:	2301      	movs	r3, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000524:	9002      	str	r0, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000526:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000528:	a901      	add	r1, sp, #4
 800052a:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_0;
 800052c:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052e:	f001 fea1 	bl	8002274 <HAL_ADC_ConfigChannel>
 8000532:	2800      	cmp	r0, #0
 8000534:	d001      	beq.n	800053a <MX_ADC1_Init+0x72>
 8000536:	b672      	cpsid	i
  while (1)
 8000538:	e7fe      	b.n	8000538 <MX_ADC1_Init+0x70>
  sConfig.Channel = ADC_CHANNEL_1;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <MX_ADC1_Init+0xc8>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800053c:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053e:	a901      	add	r1, sp, #4
 8000540:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8000542:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000544:	9602      	str	r6, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	f001 fe95 	bl	8002274 <HAL_ADC_ConfigChannel>
 800054a:	2800      	cmp	r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC1_Init+0x8a>
 800054e:	b672      	cpsid	i
  while (1)
 8000550:	e7fe      	b.n	8000550 <MX_ADC1_Init+0x88>
  sConfig.Channel = ADC_CHANNEL_4;
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_ADC1_Init+0xcc>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000554:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	a901      	add	r1, sp, #4
 8000558:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 800055a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800055c:	9502      	str	r5, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800055e:	f001 fe89 	bl	8002274 <HAL_ADC_ConfigChannel>
 8000562:	2800      	cmp	r0, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xa2>
 8000566:	b672      	cpsid	i
  while (1)
 8000568:	e7fe      	b.n	8000568 <MX_ADC1_Init+0xa0>
  sConfig.Channel = ADC_CHANNEL_5;
 800056a:	4b0b      	ldr	r3, [pc, #44]	@ (8000598 <MX_ADC1_Init+0xd0>)
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800056c:	9003      	str	r0, [sp, #12]
  sConfig.Channel = ADC_CHANNEL_5;
 800056e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000570:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	0020      	movs	r0, r4
 8000574:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000576:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000578:	f001 fe7c 	bl	8002274 <HAL_ADC_ConfigChannel>
 800057c:	2800      	cmp	r0, #0
 800057e:	d001      	beq.n	8000584 <MX_ADC1_Init+0xbc>
 8000580:	b672      	cpsid	i
  while (1)
 8000582:	e7fe      	b.n	8000582 <MX_ADC1_Init+0xba>
}
 8000584:	b004      	add	sp, #16
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	200004c8 	.word	0x200004c8
 800058c:	40012400 	.word	0x40012400
 8000590:	04000002 	.word	0x04000002
 8000594:	10000010 	.word	0x10000010
 8000598:	14000020 	.word	0x14000020

0800059c <MX_TIM14_Init>:
{
 800059c:	b510      	push	{r4, lr}
 800059e:	b088      	sub	sp, #32
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a0:	221c      	movs	r2, #28
 80005a2:	2100      	movs	r1, #0
 80005a4:	4668      	mov	r0, sp
 80005a6:	f005 f80b 	bl	80055c0 <memset>
  htim14.Instance = TIM14;
 80005aa:	4c18      	ldr	r4, [pc, #96]	@ (800060c <MX_TIM14_Init+0x70>)
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <MX_TIM14_Init+0x74>)
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005ae:	0020      	movs	r0, r4
  htim14.Instance = TIM14;
 80005b0:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	6063      	str	r3, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b6:	60a3      	str	r3, [r4, #8]
  htim14.Init.Period = 1023;
 80005b8:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_TIM14_Init+0x78>)
 80005ba:	60e3      	str	r3, [r4, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	6123      	str	r3, [r4, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005c2:	3b80      	subs	r3, #128	@ 0x80
 80005c4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80005c6:	f003 f8b1 	bl	800372c <HAL_TIM_Base_Init>
 80005ca:	2800      	cmp	r0, #0
 80005cc:	d001      	beq.n	80005d2 <MX_TIM14_Init+0x36>
 80005ce:	b672      	cpsid	i
  while (1)
 80005d0:	e7fe      	b.n	80005d0 <MX_TIM14_Init+0x34>
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80005d2:	0020      	movs	r0, r4
 80005d4:	f003 fb9c 	bl	8003d10 <HAL_TIM_PWM_Init>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM14_Init+0x44>
 80005dc:	b672      	cpsid	i
  while (1)
 80005de:	e7fe      	b.n	80005de <MX_TIM14_Init+0x42>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005e0:	23c8      	movs	r3, #200	@ 0xc8
 80005e2:	2260      	movs	r2, #96	@ 0x60
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	9200      	str	r2, [sp, #0]
 80005e8:	9301      	str	r3, [sp, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005ea:	9002      	str	r0, [sp, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005ec:	9004      	str	r0, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ee:	2200      	movs	r2, #0
 80005f0:	4669      	mov	r1, sp
 80005f2:	0020      	movs	r0, r4
 80005f4:	f004 f942 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_TIM14_Init+0x64>
 80005fc:	b672      	cpsid	i
  while (1)
 80005fe:	e7fe      	b.n	80005fe <MX_TIM14_Init+0x62>
  HAL_TIM_MspPostInit(&htim14);
 8000600:	0020      	movs	r0, r4
 8000602:	f001 f895 	bl	8001730 <HAL_TIM_MspPostInit>
}
 8000606:	b008      	add	sp, #32
 8000608:	bd10      	pop	{r4, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	200003b0 	.word	0x200003b0
 8000610:	40002000 	.word	0x40002000
 8000614:	000003ff 	.word	0x000003ff

08000618 <MX_TIM16_Init>:
{
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	b097      	sub	sp, #92	@ 0x5c
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061c:	221c      	movs	r2, #28
 800061e:	2100      	movs	r1, #0
 8000620:	4668      	mov	r0, sp
 8000622:	f004 ffcd 	bl	80055c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000626:	2234      	movs	r2, #52	@ 0x34
 8000628:	2100      	movs	r1, #0
 800062a:	a808      	add	r0, sp, #32
 800062c:	f004 ffc8 	bl	80055c0 <memset>
  htim16.Instance = TIM16;
 8000630:	4c27      	ldr	r4, [pc, #156]	@ (80006d0 <MX_TIM16_Init+0xb8>)
 8000632:	4b28      	ldr	r3, [pc, #160]	@ (80006d4 <MX_TIM16_Init+0xbc>)
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000634:	2280      	movs	r2, #128	@ 0x80
  htim16.Instance = TIM16;
 8000636:	6023      	str	r3, [r4, #0]
  htim16.Init.Prescaler = 0;
 8000638:	2300      	movs	r3, #0
  htim16.Init.Period = 255;
 800063a:	25ff      	movs	r5, #255	@ 0xff
  htim16.Init.Prescaler = 0;
 800063c:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	60a3      	str	r3, [r4, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000640:	0092      	lsls	r2, r2, #2
  htim16.Init.RepetitionCounter = 0;
 8000642:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000644:	0020      	movs	r0, r4
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000646:	3380      	adds	r3, #128	@ 0x80
  htim16.Init.Period = 255;
 8000648:	60e5      	str	r5, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800064a:	6122      	str	r2, [r4, #16]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800064c:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800064e:	f003 f86d 	bl	800372c <HAL_TIM_Base_Init>
 8000652:	2800      	cmp	r0, #0
 8000654:	d001      	beq.n	800065a <MX_TIM16_Init+0x42>
 8000656:	b672      	cpsid	i
  while (1)
 8000658:	e7fe      	b.n	8000658 <MX_TIM16_Init+0x40>
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800065a:	0020      	movs	r0, r4
 800065c:	f003 f98e 	bl	800397c <HAL_TIM_OC_Init>
 8000660:	2800      	cmp	r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM16_Init+0x50>
 8000664:	b672      	cpsid	i
  while (1)
 8000666:	e7fe      	b.n	8000666 <MX_TIM16_Init+0x4e>
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000668:	2200      	movs	r2, #0
 800066a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800066c:	9000      	str	r0, [sp, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800066e:	9002      	str	r0, [sp, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000670:	9003      	str	r0, [sp, #12]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000672:	9006      	str	r0, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000674:	4669      	mov	r1, sp
 8000676:	0020      	movs	r0, r4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000678:	9204      	str	r2, [sp, #16]
 800067a:	9305      	str	r3, [sp, #20]
  sConfigOC.Pulse = 255;
 800067c:	9501      	str	r5, [sp, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800067e:	f003 fecd 	bl	800441c <HAL_TIM_OC_ConfigChannel>
 8000682:	2800      	cmp	r0, #0
 8000684:	d001      	beq.n	800068a <MX_TIM16_Init+0x72>
 8000686:	b672      	cpsid	i
  while (1)
 8000688:	e7fe      	b.n	8000688 <MX_TIM16_Init+0x70>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 800068a:	2108      	movs	r1, #8
 800068c:	6822      	ldr	r2, [r4, #0]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800068e:	9008      	str	r0, [sp, #32]
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000690:	6993      	ldr	r3, [r2, #24]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000692:	9009      	str	r0, [sp, #36]	@ 0x24
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8000694:	430b      	orrs	r3, r1
 8000696:	6193      	str	r3, [r2, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000698:	2380      	movs	r3, #128	@ 0x80
 800069a:	2200      	movs	r2, #0
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800069c:	900a      	str	r0, [sp, #40]	@ 0x28
  sBreakDeadTimeConfig.DeadTime = 0;
 800069e:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006a0:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006a2:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006a4:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006a6:	a908      	add	r1, sp, #32
 80006a8:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006aa:	920c      	str	r2, [sp, #48]	@ 0x30
 80006ac:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80006ae:	f004 fc13 	bl	8004ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 80006b2:	2800      	cmp	r0, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM16_Init+0xa2>
 80006b6:	b672      	cpsid	i
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <MX_TIM16_Init+0xa0>
  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2100      	movs	r1, #0
 80006be:	2015      	movs	r0, #21
 80006c0:	f002 f8a4 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80006c4:	2015      	movs	r0, #21
 80006c6:	f002 f8cb 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 80006ca:	b017      	add	sp, #92	@ 0x5c
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	200002f4 	.word	0x200002f4
 80006d4:	40014400 	.word	0x40014400

080006d8 <MX_TIM2_Init>:
{
 80006d8:	b510      	push	{r4, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006dc:	2210      	movs	r2, #16
 80006de:	2100      	movs	r1, #0
 80006e0:	a808      	add	r0, sp, #32
 80006e2:	f004 ff6d 	bl	80055c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e6:	220c      	movs	r2, #12
 80006e8:	2100      	movs	r1, #0
 80006ea:	a801      	add	r0, sp, #4
 80006ec:	f004 ff68 	bl	80055c0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006f0:	2210      	movs	r2, #16
 80006f2:	2100      	movs	r1, #0
 80006f4:	a804      	add	r0, sp, #16
 80006f6:	f004 ff63 	bl	80055c0 <memset>
  htim2.Instance = TIM2;
 80006fa:	2380      	movs	r3, #128	@ 0x80
 80006fc:	4c22      	ldr	r4, [pc, #136]	@ (8000788 <MX_TIM2_Init+0xb0>)
 80006fe:	05db      	lsls	r3, r3, #23
 8000700:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000702:	233f      	movs	r3, #63	@ 0x3f
 8000704:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	2300      	movs	r3, #0
 8000708:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 2097152 - 1;
 800070a:	4b20      	ldr	r3, [pc, #128]	@ (800078c <MX_TIM2_Init+0xb4>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800070c:	0020      	movs	r0, r4
  htim2.Init.Period = 2097152 - 1;
 800070e:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000716:	3b81      	subs	r3, #129	@ 0x81
 8000718:	3bff      	subs	r3, #255	@ 0xff
 800071a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800071c:	f003 f806 	bl	800372c <HAL_TIM_Base_Init>
 8000720:	2800      	cmp	r0, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM2_Init+0x50>
 8000724:	b672      	cpsid	i
  while (1)
 8000726:	e7fe      	b.n	8000726 <MX_TIM2_Init+0x4e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000728:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800072e:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000730:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000732:	f004 fa47 	bl	8004bc4 <HAL_TIM_ConfigClockSource>
 8000736:	2800      	cmp	r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x66>
 800073a:	b672      	cpsid	i
  while (1)
 800073c:	e7fe      	b.n	800073c <MX_TIM2_Init+0x64>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800073e:	0020      	movs	r0, r4
 8000740:	f003 fc16 	bl	8003f70 <HAL_TIM_IC_Init>
 8000744:	2800      	cmp	r0, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x74>
 8000748:	b672      	cpsid	i
  while (1)
 800074a:	e7fe      	b.n	800074a <MX_TIM2_Init+0x72>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800074c:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000750:	a901      	add	r1, sp, #4
 8000752:	0020      	movs	r0, r4
 8000754:	f004 fb88 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 8000758:	2800      	cmp	r0, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM2_Init+0x88>
 800075c:	b672      	cpsid	i
  while (1)
 800075e:	e7fe      	b.n	800075e <MX_TIM2_Init+0x86>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000760:	2202      	movs	r2, #2
 8000762:	2301      	movs	r3, #1
 8000764:	9204      	str	r2, [sp, #16]
 8000766:	9305      	str	r3, [sp, #20]
 8000768:	2200      	movs	r2, #0
 800076a:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	0020      	movs	r0, r4
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800076e:	9206      	str	r2, [sp, #24]
 8000770:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000772:	a904      	add	r1, sp, #16
 8000774:	2200      	movs	r2, #0
 8000776:	f003 ffa3 	bl	80046c0 <HAL_TIM_IC_ConfigChannel>
 800077a:	2800      	cmp	r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0xaa>
 800077e:	b672      	cpsid	i
  while (1)
 8000780:	e7fe      	b.n	8000780 <MX_TIM2_Init+0xa8>
}
 8000782:	b00c      	add	sp, #48	@ 0x30
 8000784:	bd10      	pop	{r4, pc}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	20000238 	.word	0x20000238
 800078c:	001fffff 	.word	0x001fffff

08000790 <MX_TIM3_Init>:
{
 8000790:	b510      	push	{r4, lr}
 8000792:	b090      	sub	sp, #64	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000794:	2210      	movs	r2, #16
 8000796:	2100      	movs	r1, #0
 8000798:	a804      	add	r0, sp, #16
 800079a:	f004 ff11 	bl	80055c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	220c      	movs	r2, #12
 80007a0:	2100      	movs	r1, #0
 80007a2:	a801      	add	r0, sp, #4
 80007a4:	f004 ff0c 	bl	80055c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	221c      	movs	r2, #28
 80007aa:	2100      	movs	r1, #0
 80007ac:	a808      	add	r0, sp, #32
 80007ae:	f004 ff07 	bl	80055c0 <memset>
  htim3.Instance = TIM3;
 80007b2:	4c21      	ldr	r4, [pc, #132]	@ (8000838 <MX_TIM3_Init+0xa8>)
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_TIM3_Init+0xac>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007b6:	0020      	movs	r0, r4
  htim3.Instance = TIM3;
 80007b8:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 80007ba:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_TIM3_Init+0xb0>)
 80007bc:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	2300      	movs	r3, #0
 80007c0:	60a3      	str	r3, [r4, #8]
  htim3.Init.Period = 4096 - 1;
 80007c2:	4b20      	ldr	r3, [pc, #128]	@ (8000844 <MX_TIM3_Init+0xb4>)
 80007c4:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	3b81      	subs	r3, #129	@ 0x81
 80007ce:	3bff      	subs	r3, #255	@ 0xff
 80007d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007d2:	f002 ffab 	bl	800372c <HAL_TIM_Base_Init>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM3_Init+0x4e>
 80007da:	b672      	cpsid	i
  while (1)
 80007dc:	e7fe      	b.n	80007dc <MX_TIM3_Init+0x4c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e0:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e4:	a904      	add	r1, sp, #16
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e6:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007e8:	f004 f9ec 	bl	8004bc4 <HAL_TIM_ConfigClockSource>
 80007ec:	2800      	cmp	r0, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM3_Init+0x64>
 80007f0:	b672      	cpsid	i
  while (1)
 80007f2:	e7fe      	b.n	80007f2 <MX_TIM3_Init+0x62>
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80007f4:	0020      	movs	r0, r4
 80007f6:	f003 f8c1 	bl	800397c <HAL_TIM_OC_Init>
 80007fa:	2800      	cmp	r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM3_Init+0x72>
 80007fe:	b672      	cpsid	i
  while (1)
 8000800:	e7fe      	b.n	8000800 <MX_TIM3_Init+0x70>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000802:	9001      	str	r0, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000806:	a901      	add	r1, sp, #4
 8000808:	0020      	movs	r0, r4
 800080a:	f004 fb2d 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 800080e:	2800      	cmp	r0, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM3_Init+0x86>
 8000812:	b672      	cpsid	i
  while (1)
 8000814:	e7fe      	b.n	8000814 <MX_TIM3_Init+0x84>
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000816:	2200      	movs	r2, #0
 8000818:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800081a:	900a      	str	r0, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800081e:	a908      	add	r1, sp, #32
 8000820:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000822:	9208      	str	r2, [sp, #32]
 8000824:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000826:	f003 fdf9 	bl	800441c <HAL_TIM_OC_ConfigChannel>
 800082a:	2800      	cmp	r0, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM3_Init+0xa2>
 800082e:	b672      	cpsid	i
  while (1)
 8000830:	e7fe      	b.n	8000830 <MX_TIM3_Init+0xa0>
}
 8000832:	b010      	add	sp, #64	@ 0x40
 8000834:	bd10      	pop	{r4, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	2000017c 	.word	0x2000017c
 800083c:	40000400 	.word	0x40000400
 8000840:	00007fff 	.word	0x00007fff
 8000844:	00000fff 	.word	0x00000fff

08000848 <MX_TIM1_Init>:
{
 8000848:	b5d0      	push	{r4, r6, r7, lr}
 800084a:	b098      	sub	sp, #96	@ 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084c:	220c      	movs	r2, #12
 800084e:	2100      	movs	r1, #0
 8000850:	4668      	mov	r0, sp
 8000852:	f004 feb5 	bl	80055c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000856:	221c      	movs	r2, #28
 8000858:	2100      	movs	r1, #0
 800085a:	a804      	add	r0, sp, #16
 800085c:	f004 feb0 	bl	80055c0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000860:	2234      	movs	r2, #52	@ 0x34
 8000862:	2100      	movs	r1, #0
 8000864:	a80b      	add	r0, sp, #44	@ 0x2c
 8000866:	f004 feab 	bl	80055c0 <memset>
  htim1.Instance = TIM1;
 800086a:	4c28      	ldr	r4, [pc, #160]	@ (800090c <MX_TIM1_Init+0xc4>)
 800086c:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <MX_TIM1_Init+0xc8>)
  htim1.Init.Period = 1023;
 800086e:	4a29      	ldr	r2, [pc, #164]	@ (8000914 <MX_TIM1_Init+0xcc>)
  htim1.Instance = TIM1;
 8000870:	6023      	str	r3, [r4, #0]
  htim1.Init.Period = 1023;
 8000872:	60e2      	str	r2, [r4, #12]
  htim1.Init.Prescaler = 0;
 8000874:	2300      	movs	r3, #0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000876:	2280      	movs	r2, #128	@ 0x80
  htim1.Init.Prescaler = 0;
 8000878:	6063      	str	r3, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	60a3      	str	r3, [r4, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800087c:	0052      	lsls	r2, r2, #1
  htim1.Init.RepetitionCounter = 0;
 800087e:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000880:	0020      	movs	r0, r4
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000882:	3380      	adds	r3, #128	@ 0x80
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000884:	6122      	str	r2, [r4, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000886:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000888:	f003 fa42 	bl	8003d10 <HAL_TIM_PWM_Init>
 800088c:	2800      	cmp	r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x4c>
 8000890:	b672      	cpsid	i
  while (1)
 8000892:	e7fe      	b.n	8000892 <MX_TIM1_Init+0x4a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000894:	2600      	movs	r6, #0
 8000896:	2700      	movs	r7, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000898:	9002      	str	r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800089a:	4669      	mov	r1, sp
 800089c:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	9600      	str	r6, [sp, #0]
 80008a0:	9701      	str	r7, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008a2:	f004 fae1 	bl	8004e68 <HAL_TIMEx_MasterConfigSynchronization>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x66>
 80008aa:	b672      	cpsid	i
  while (1)
 80008ac:	e7fe      	b.n	80008ac <MX_TIM1_Init+0x64>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2260      	movs	r2, #96	@ 0x60
 80008b0:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b2:	9006      	str	r0, [sp, #24]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b4:	9204      	str	r2, [sp, #16]
 80008b6:	9305      	str	r3, [sp, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b8:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008ba:	3a54      	subs	r2, #84	@ 0x54
 80008bc:	0020      	movs	r0, r4
 80008be:	a904      	add	r1, sp, #16
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	9608      	str	r6, [sp, #32]
 80008c2:	9709      	str	r7, [sp, #36]	@ 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c4:	f003 ffda 	bl	800487c <HAL_TIM_PWM_ConfigChannel>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x88>
 80008cc:	b672      	cpsid	i
  while (1)
 80008ce:	e7fe      	b.n	80008ce <MX_TIM1_Init+0x86>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	019b      	lsls	r3, r3, #6
 80008d4:	9310      	str	r3, [sp, #64]	@ 0x40
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008d6:	2380      	movs	r3, #128	@ 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008d8:	900b      	str	r0, [sp, #44]	@ 0x2c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008da:	900c      	str	r0, [sp, #48]	@ 0x30
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008dc:	900d      	str	r0, [sp, #52]	@ 0x34
  sBreakDeadTimeConfig.DeadTime = 0;
 80008de:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008e0:	900f      	str	r0, [sp, #60]	@ 0x3c
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008e2:	9011      	str	r0, [sp, #68]	@ 0x44
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008e4:	9012      	str	r0, [sp, #72]	@ 0x48
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008e6:	9013      	str	r0, [sp, #76]	@ 0x4c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008e8:	049b      	lsls	r3, r3, #18
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008ea:	9015      	str	r0, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008ec:	9016      	str	r0, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008ee:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f0:	a90b      	add	r1, sp, #44	@ 0x2c
 80008f2:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008f4:	9314      	str	r3, [sp, #80]	@ 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008f6:	f004 faef 	bl	8004ed8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008fa:	2800      	cmp	r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM1_Init+0xba>
 80008fe:	b672      	cpsid	i
  while (1)
 8000900:	e7fe      	b.n	8000900 <MX_TIM1_Init+0xb8>
  HAL_TIM_MspPostInit(&htim1);
 8000902:	0020      	movs	r0, r4
 8000904:	f000 ff14 	bl	8001730 <HAL_TIM_MspPostInit>
}
 8000908:	b018      	add	sp, #96	@ 0x60
 800090a:	bdd0      	pop	{r4, r6, r7, pc}
 800090c:	200000c0 	.word	0x200000c0
 8000910:	40012c00 	.word	0x40012c00
 8000914:	000003ff 	.word	0x000003ff

08000918 <MX_GPIO_Init>:
{
 8000918:	b530      	push	{r4, r5, lr}
 800091a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	2214      	movs	r2, #20
 800091e:	2100      	movs	r1, #0
 8000920:	a804      	add	r0, sp, #16
 8000922:	f004 fe4d 	bl	80055c0 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	2204      	movs	r2, #4
 8000928:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <MX_GPIO_Init+0xa4>)
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800092a:	4d25      	ldr	r5, [pc, #148]	@ (80009c0 <MX_GPIO_Init+0xa8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800092e:	0028      	movs	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000930:	4311      	orrs	r1, r2
 8000932:	6359      	str	r1, [r3, #52]	@ 0x34
 8000934:	6b59      	ldr	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000938:	400a      	ands	r2, r1
 800093a:	9201      	str	r2, [sp, #4]
 800093c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	2220      	movs	r2, #32
 8000940:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000942:	4311      	orrs	r1, r2
 8000944:	6359      	str	r1, [r3, #52]	@ 0x34
 8000946:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000948:	400a      	ands	r2, r1
 800094a:	9202      	str	r2, [sp, #8]
 800094c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2201      	movs	r2, #1
 8000950:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000952:	4311      	orrs	r1, r2
 8000954:	6359      	str	r1, [r3, #52]	@ 0x34
 8000956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000958:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	401a      	ands	r2, r3
 800095c:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000962:	f002 fa0b 	bl	8002d7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000966:	2388      	movs	r3, #136	@ 0x88
 8000968:	2204      	movs	r2, #4
 800096a:	035b      	lsls	r3, r3, #13
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800096c:	a904      	add	r1, sp, #16
 800096e:	4815      	ldr	r0, [pc, #84]	@ (80009c4 <MX_GPIO_Init+0xac>)
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000970:	9204      	str	r2, [sp, #16]
 8000972:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000976:	f002 f90f 	bl	8002b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin;
 800097a:	2240      	movs	r2, #64	@ 0x40
 800097c:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800097e:	0028      	movs	r0, r5
 8000980:	a904      	add	r1, sp, #16
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000982:	25a0      	movs	r5, #160	@ 0xa0
  GPIO_InitStruct.Pin = LD3_Pin;
 8000984:	9204      	str	r2, [sp, #16]
 8000986:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800098a:	f002 f905 	bl	8002b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	2301      	movs	r3, #1
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000992:	05ed      	lsls	r5, r5, #23
 8000994:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000996:	0152      	lsls	r2, r2, #5
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000998:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 800099a:	9204      	str	r2, [sp, #16]
 800099c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f002 f8fa 	bl	8002b98 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TAP_TEMPO_TOGGLE_Pin;
 80009a4:	2280      	movs	r2, #128	@ 0x80
 80009a6:	2301      	movs	r3, #1
 80009a8:	00d2      	lsls	r2, r2, #3
  HAL_GPIO_Init(TAP_TEMPO_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 80009aa:	0028      	movs	r0, r5
 80009ac:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = TAP_TEMPO_TOGGLE_Pin;
 80009ae:	9204      	str	r2, [sp, #16]
 80009b0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(TAP_TEMPO_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f002 f8f0 	bl	8002b98 <HAL_GPIO_Init>
}
 80009b8:	b00b      	add	sp, #44	@ 0x2c
 80009ba:	bd30      	pop	{r4, r5, pc}
 80009bc:	40021000 	.word	0x40021000
 80009c0:	50000800 	.word	0x50000800
 80009c4:	50001400 	.word	0x50001400

080009c8 <Error_Handler>:
 80009c8:	b672      	cpsid	i
  while (1)
 80009ca:	e7fe      	b.n	80009ca <Error_Handler+0x2>

080009cc <System_Init>:
  {

  }
}

void System_Init(void){
 80009cc:	b510      	push	{r4, lr}
 80009ce:	b082      	sub	sp, #8
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009d0:	f001 fa42 	bl	8001e58 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80009d4:	f7ff fd38 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009d8:	f7ff ff9e 	bl	8000918 <MX_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009dc:	2301      	movs	r3, #1
 80009de:	4a2b      	ldr	r2, [pc, #172]	@ (8000a8c <System_Init+0xc0>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 80009e0:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009e2:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 80009e4:	4319      	orrs	r1, r3
 80009e6:	6391      	str	r1, [r2, #56]	@ 0x38
 80009e8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 80009ea:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ec:	4013      	ands	r3, r2
 80009ee:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 80009f0:	2202      	movs	r2, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 80009f4:	f001 ff0a 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f8:	2009      	movs	r0, #9
 80009fa:	f001 ff31 	bl	8002860 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 2, 2);
 80009fe:	2202      	movs	r2, #2
 8000a00:	2102      	movs	r1, #2
 8000a02:	200b      	movs	r0, #11
 8000a04:	f001 ff02 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8000a08:	200b      	movs	r0, #11
 8000a0a:	f001 ff29 	bl	8002860 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8000a0e:	4820      	ldr	r0, [pc, #128]	@ (8000a90 <System_Init+0xc4>)
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <System_Init+0xc8>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a12:	220c      	movs	r2, #12
  huart2.Instance = USART2;
 8000a14:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	23e1      	movs	r3, #225	@ 0xe1
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1c:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1e:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a20:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a22:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a24:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a26:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a2c:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a30:	f004 fc78 	bl	8005324 <HAL_UART_Init>
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d001      	beq.n	8000a3c <System_Init+0x70>
 8000a38:	b672      	cpsid	i
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <System_Init+0x6e>
	MX_DMA_Init();
	MX_USART2_UART_Init();
	MX_ADC1_Init();
 8000a3c:	f7ff fd44 	bl	80004c8 <MX_ADC1_Init>
	MX_TIM14_Init(); //PWM Gen. Main Oscillator
 8000a40:	f7ff fdac 	bl	800059c <MX_TIM14_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8000a44:	f7ff fde8 	bl	8000618 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1, I/P Capture Measurement Re-Elapse 1 is TIM3_ch1, and I/P Capture Measurement Re-Elapse 2 is TIM17_ch1
 8000a48:	f7ff fe46 	bl	80006d8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000a4c:	f7ff fea0 	bl	8000790 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Secondary Oscillator
 8000a50:	f7ff fefa 	bl	8000848 <MX_TIM1_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000a54:	2114      	movs	r1, #20
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <System_Init+0xcc>)
 8000a58:	4810      	ldr	r0, [pc, #64]	@ (8000a9c <System_Init+0xd0>)
 8000a5a:	f004 f983 	bl	8004d64 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <System_Init+0xd4>)
 8000a62:	4810      	ldr	r0, [pc, #64]	@ (8000aa4 <System_Init+0xd8>)
 8000a64:	f001 fbce 	bl	8002204 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 8000a68:	4c0f      	ldr	r4, [pc, #60]	@ (8000aa8 <System_Init+0xdc>)
 8000a6a:	2112      	movs	r1, #18
 8000a6c:	0020      	movs	r0, r4
 8000a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000aac <System_Init+0xe0>)
 8000a70:	f004 f978 	bl	8004d64 <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8000a74:	210e      	movs	r1, #14
 8000a76:	0020      	movs	r0, r4
 8000a78:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab0 <System_Init+0xe4>)
 8000a7a:	f004 f973 	bl	8004d64 <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse 1)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_1_callback);
 8000a7e:	2114      	movs	r1, #20
 8000a80:	4a0c      	ldr	r2, [pc, #48]	@ (8000ab4 <System_Init+0xe8>)
 8000a82:	480d      	ldr	r0, [pc, #52]	@ (8000ab8 <System_Init+0xec>)
 8000a84:	f004 f96e 	bl	8004d64 <HAL_TIM_RegisterCallback>
}
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd10      	pop	{r4, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	40004400 	.word	0x40004400
 8000a98:	08000abd 	.word	0x08000abd
 8000a9c:	200002f4 	.word	0x200002f4
 8000aa0:	08000d65 	.word	0x08000d65
 8000aa4:	200004c8 	.word	0x200004c8
 8000aa8:	20000238 	.word	0x20000238
 8000aac:	08000e5d 	.word	0x08000e5d
 8000ab0:	080013e1 	.word	0x080013e1
 8000ab4:	08001405 	.word	0x08001405
 8000ab8:	2000017c 	.word	0x2000017c

08000abc <TIM16_callback>:
{
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
	//Global_Interrupt_Disable();
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000abc:	2180      	movs	r1, #128	@ 0x80
 8000abe:	20a0      	movs	r0, #160	@ 0xa0
{
 8000ac0:	b570      	push	{r4, r5, r6, lr}
	TIM16_callback_active = YES;
 8000ac2:	2501      	movs	r5, #1
 8000ac4:	4c8c      	ldr	r4, [pc, #560]	@ (8000cf8 <TIM16_callback+0x23c>)
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	0149      	lsls	r1, r1, #5
 8000aca:	05c0      	lsls	r0, r0, #23
{
 8000acc:	b082      	sub	sp, #8
	TIM16_callback_active = YES;
 8000ace:	7025      	strb	r5, [r4, #0]
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000ad0:	f002 f954 	bl	8002d7c <HAL_GPIO_WritePin>
	}*/

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000ad4:	4a89      	ldr	r2, [pc, #548]	@ (8000cfc <TIM16_callback+0x240>)
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000ad6:	488a      	ldr	r0, [pc, #552]	@ (8000d00 <TIM16_callback+0x244>)
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000ad8:	6953      	ldr	r3, [r2, #20]
 8000ada:	432b      	orrs	r3, r5
 8000adc:	6153      	str	r3, [r2, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 8000ade:	4b89      	ldr	r3, [pc, #548]	@ (8000d04 <TIM16_callback+0x248>)
 8000ae0:	4a89      	ldr	r2, [pc, #548]	@ (8000d08 <TIM16_callback+0x24c>)
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	6811      	ldr	r1, [r2, #0]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	624b      	str	r3, [r1, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000aea:	4b88      	ldr	r3, [pc, #544]	@ (8000d0c <TIM16_callback+0x250>)
 8000aec:	781a      	ldrb	r2, [r3, #0]
 8000aee:	4b88      	ldr	r3, [pc, #544]	@ (8000d10 <TIM16_callback+0x254>)
 8000af0:	0052      	lsls	r2, r2, #1
 8000af2:	5ad3      	ldrh	r3, [r2, r3]
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000af4:	4a87      	ldr	r2, [pc, #540]	@ (8000d14 <TIM16_callback+0x258>)
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000af6:	3b01      	subs	r3, #1
 8000af8:	628b      	str	r3, [r1, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000afa:	8803      	ldrh	r3, [r0, #0]
 8000afc:	6812      	ldr	r2, [r2, #0]
 8000afe:	b29b      	uxth	r3, r3

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000b00:	4985      	ldr	r1, [pc, #532]	@ (8000d18 <TIM16_callback+0x25c>)
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000b02:	6353      	str	r3, [r2, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000b04:	4a85      	ldr	r2, [pc, #532]	@ (8000d1c <TIM16_callback+0x260>)
 8000b06:	880b      	ldrh	r3, [r1, #0]
 8000b08:	6812      	ldr	r2, [r2, #0]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40

	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000b0e:	4b84      	ldr	r3, [pc, #528]	@ (8000d20 <TIM16_callback+0x264>)
 8000b10:	881a      	ldrh	r2, [r3, #0]
 8000b12:	3201      	adds	r2, #1
 8000b14:	b292      	uxth	r2, r2
 8000b16:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 8000b18:	2280      	movs	r2, #128	@ 0x80
 8000b1a:	881d      	ldrh	r5, [r3, #0]
 8000b1c:	0092      	lsls	r2, r2, #2
 8000b1e:	4295      	cmp	r5, r2
 8000b20:	d105      	bne.n	8000b2e <TIM16_callback+0x72>
		current_quadrant = FIRST_QUADRANT;
 8000b22:	2200      	movs	r2, #0
 8000b24:	4d7f      	ldr	r5, [pc, #508]	@ (8000d24 <TIM16_callback+0x268>)
 8000b26:	702a      	strb	r2, [r5, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000b28:	4d7f      	ldr	r5, [pc, #508]	@ (8000d28 <TIM16_callback+0x26c>)
 8000b2a:	702a      	strb	r2, [r5, #0]
		current_index = 0;
 8000b2c:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 8000b2e:	4a7f      	ldr	r2, [pc, #508]	@ (8000d2c <TIM16_callback+0x270>)
 8000b30:	7815      	ldrb	r5, [r2, #0]
 8000b32:	2d00      	cmp	r5, #0
 8000b34:	d000      	beq.n	8000b38 <TIM16_callback+0x7c>
 8000b36:	e086      	b.n	8000c46 <TIM16_callback+0x18a>
		duty = tri_wavetable[current_index];
 8000b38:	881d      	ldrh	r5, [r3, #0]
 8000b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8000d30 <TIM16_callback+0x274>)
 8000b3c:	006d      	lsls	r5, r5, #1
 8000b3e:	5aad      	ldrh	r5, [r5, r2]
 8000b40:	4a7c      	ldr	r2, [pc, #496]	@ (8000d34 <TIM16_callback+0x278>)
 8000b42:	8015      	strh	r5, [r2, #0]
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
			duty = 0;
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 8000b44:	881d      	ldrh	r5, [r3, #0]
 8000b46:	b2ae      	uxth	r6, r5
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d15b      	bne.n	8000c04 <TIM16_callback+0x148>
		current_quadrant = FIRST_QUADRANT;
 8000b4c:	4b75      	ldr	r3, [pc, #468]	@ (8000d24 <TIM16_callback+0x268>)
 8000b4e:	701e      	strb	r6, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000b50:	4b75      	ldr	r3, [pc, #468]	@ (8000d28 <TIM16_callback+0x26c>)
 8000b52:	701e      	strb	r6, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000b54:	4b78      	ldr	r3, [pc, #480]	@ (8000d38 <TIM16_callback+0x27c>)
 8000b56:	881d      	ldrh	r5, [r3, #0]
 8000b58:	2dff      	cmp	r5, #255	@ 0xff
 8000b5a:	d100      	bne.n	8000b5e <TIM16_callback+0xa2>
 8000b5c:	e099      	b.n	8000c92 <TIM16_callback+0x1d6>
			duty = 1023 - duty;
		}
		else if(current_depth != 0){
 8000b5e:	881d      	ldrh	r5, [r3, #0]
 8000b60:	2d00      	cmp	r5, #0
 8000b62:	d000      	beq.n	8000b66 <TIM16_callback+0xaa>
 8000b64:	e062      	b.n	8000c2c <TIM16_callback+0x170>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000b66:	4b75      	ldr	r3, [pc, #468]	@ (8000d3c <TIM16_callback+0x280>)
 8000b68:	8013      	strh	r3, [r2, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	prev_duty = duty;
 8000b6a:	8813      	ldrh	r3, [r2, #0]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	8003      	strh	r3, [r0, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
	if(duty_delay_line_start_offset != 0){
 8000b70:	4b73      	ldr	r3, [pc, #460]	@ (8000d40 <TIM16_callback+0x284>)
 8000b72:	8818      	ldrh	r0, [r3, #0]
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d100      	bne.n	8000b7a <TIM16_callback+0xbe>
 8000b78:	e084      	b.n	8000c84 <TIM16_callback+0x1c8>
		duty_delay_line_storage_array[duty_delay_line_start_offset - 1] = duty;
 8000b7a:	8818      	ldrh	r0, [r3, #0]
 8000b7c:	8815      	ldrh	r5, [r2, #0]
 8000b7e:	3801      	subs	r0, #1
 8000b80:	4a70      	ldr	r2, [pc, #448]	@ (8000d44 <TIM16_callback+0x288>)
 8000b82:	b2ad      	uxth	r5, r5
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	5215      	strh	r5, [r2, r0]
	else{
		duty_delay_line_storage_array[FINAL_INDEX + 1] = duty;
	}

	//DECREMENT THE START AND FINISH POINTERS
	if(duty_delay_line_start_offset == 0){
 8000b88:	8818      	ldrh	r0, [r3, #0]
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d000      	beq.n	8000b90 <TIM16_callback+0xd4>
 8000b8e:	e06d      	b.n	8000c6c <TIM16_callback+0x1b0>
		duty_delay_line_start_offset = FINAL_INDEX + 1;
 8000b90:	2080      	movs	r0, #128	@ 0x80
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000b92:	4d6d      	ldr	r5, [pc, #436]	@ (8000d48 <TIM16_callback+0x28c>)
		duty_delay_line_start_offset = FINAL_INDEX + 1;
 8000b94:	0080      	lsls	r0, r0, #2
 8000b96:	8018      	strh	r0, [r3, #0]
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000b98:	8828      	ldrh	r0, [r5, #0]
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	b280      	uxth	r0, r0
 8000b9e:	8028      	strh	r0, [r5, #0]
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
	}

	//DETERMINE THE DELAYED WAVE'S VALUES
	if(duty_delay_line_start_offset + duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8000ba0:	4d6a      	ldr	r5, [pc, #424]	@ (8000d4c <TIM16_callback+0x290>)
 8000ba2:	8818      	ldrh	r0, [r3, #0]
 8000ba4:	882e      	ldrh	r6, [r5, #0]
		duty_delayed = *(duty_delay_line_storage_array + (duty_delay_line_start_offset + duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8000ba6:	881b      	ldrh	r3, [r3, #0]
	if(duty_delay_line_start_offset + duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8000ba8:	1980      	adds	r0, r0, r6
 8000baa:	2680      	movs	r6, #128	@ 0x80
 8000bac:	00b6      	lsls	r6, r6, #2
 8000bae:	42b0      	cmp	r0, r6
 8000bb0:	dd54      	ble.n	8000c5c <TIM16_callback+0x1a0>
		duty_delayed = *(duty_delay_line_storage_array + (duty_delay_line_start_offset + duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8000bb2:	8828      	ldrh	r0, [r5, #0]
 8000bb4:	181b      	adds	r3, r3, r0
 8000bb6:	4866      	ldr	r0, [pc, #408]	@ (8000d50 <TIM16_callback+0x294>)
 8000bb8:	4684      	mov	ip, r0
 8000bba:	4463      	add	r3, ip
 8000bbc:	005b      	lsls	r3, r3, #1
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	800b      	strh	r3, [r1, #0]
	}
	else{
		duty_delayed = *(duty_delay_line_storage_array + duty_delay_line_start_offset + duty_delay_line_read_pointer_offset);
	}

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000bc6:	2180      	movs	r1, #128	@ 0x80
 8000bc8:	20a0      	movs	r0, #160	@ 0xa0
 8000bca:	2200      	movs	r2, #0
 8000bcc:	0149      	lsls	r1, r1, #5
 8000bce:	05c0      	lsls	r0, r0, #23
 8000bd0:	f002 f8d4 	bl	8002d7c <HAL_GPIO_WritePin>
	TIM16_callback_active = NO;

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000bd4:	2180      	movs	r1, #128	@ 0x80
 8000bd6:	20a0      	movs	r0, #160	@ 0xa0
	TIM16_callback_active = NO;
 8000bd8:	2300      	movs	r3, #0
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000bda:	2201      	movs	r2, #1
 8000bdc:	0149      	lsls	r1, r1, #5
 8000bde:	05c0      	lsls	r0, r0, #23
	TIM16_callback_active = NO;
 8000be0:	7023      	strb	r3, [r4, #0]
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000be2:	f002 f8cb 	bl	8002d7c <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8000be6:	4b5b      	ldr	r3, [pc, #364]	@ (8000d54 <TIM16_callback+0x298>)
 8000be8:	495b      	ldr	r1, [pc, #364]	@ (8000d58 <TIM16_callback+0x29c>)
 8000bea:	781a      	ldrb	r2, [r3, #0]
 8000bec:	485b      	ldr	r0, [pc, #364]	@ (8000d5c <TIM16_callback+0x2a0>)
 8000bee:	f001 fd23 	bl	8002638 <HAL_ADC_Start_DMA>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	20a0      	movs	r0, #160	@ 0xa0
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	0149      	lsls	r1, r1, #5
 8000bfa:	05c0      	lsls	r0, r0, #23
 8000bfc:	f002 f8be 	bl	8002d7c <HAL_GPIO_WritePin>
	//Global_Interrupt_Enable();
}
 8000c00:	b002      	add	sp, #8
 8000c02:	bd70      	pop	{r4, r5, r6, pc}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 8000c04:	881d      	ldrh	r5, [r3, #0]
 8000c06:	2d80      	cmp	r5, #128	@ 0x80
 8000c08:	d052      	beq.n	8000cb0 <TIM16_callback+0x1f4>
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 8000c0a:	2580      	movs	r5, #128	@ 0x80
 8000c0c:	881e      	ldrh	r6, [r3, #0]
 8000c0e:	006d      	lsls	r5, r5, #1
 8000c10:	42ae      	cmp	r6, r5
 8000c12:	d062      	beq.n	8000cda <TIM16_callback+0x21e>
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 8000c14:	881d      	ldrh	r5, [r3, #0]
 8000c16:	23c0      	movs	r3, #192	@ 0xc0
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	429d      	cmp	r5, r3
 8000c1c:	d000      	beq.n	8000c20 <TIM16_callback+0x164>
 8000c1e:	e799      	b.n	8000b54 <TIM16_callback+0x98>
		current_quadrant = SECOND_QUADRANT;
 8000c20:	2501      	movs	r5, #1
 8000c22:	4b40      	ldr	r3, [pc, #256]	@ (8000d24 <TIM16_callback+0x268>)
 8000c24:	701d      	strb	r5, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000c26:	4b40      	ldr	r3, [pc, #256]	@ (8000d28 <TIM16_callback+0x26c>)
 8000c28:	701d      	strb	r5, [r3, #0]
 8000c2a:	e793      	b.n	8000b54 <TIM16_callback+0x98>

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
	volatile uint32_t multiply_product = 0;
 8000c2c:	2500      	movs	r5, #0
 8000c2e:	9501      	str	r5, [sp, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8000c30:	8815      	ldrh	r5, [r2, #0]
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	436b      	muls	r3, r5
 8000c36:	9301      	str	r3, [sp, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 8000c38:	9d01      	ldr	r5, [sp, #4]
 8000c3a:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <TIM16_callback+0x280>)
 8000c3c:	0a2d      	lsrs	r5, r5, #8
 8000c3e:	1b5b      	subs	r3, r3, r5
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	8013      	strh	r3, [r2, #0]

    return 1;
 8000c44:	e791      	b.n	8000b6a <TIM16_callback+0xae>
	else if(current_waveshape == SINE_MODE){
 8000c46:	7815      	ldrb	r5, [r2, #0]
 8000c48:	2d01      	cmp	r5, #1
 8000c4a:	d03f      	beq.n	8000ccc <TIM16_callback+0x210>
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000c4c:	7815      	ldrb	r5, [r2, #0]
 8000c4e:	2d02      	cmp	r5, #2
 8000c50:	d04a      	beq.n	8000ce8 <TIM16_callback+0x22c>
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000c52:	7812      	ldrb	r2, [r2, #0]
 8000c54:	2a02      	cmp	r2, #2
 8000c56:	d032      	beq.n	8000cbe <TIM16_callback+0x202>
 8000c58:	4a36      	ldr	r2, [pc, #216]	@ (8000d34 <TIM16_callback+0x278>)
 8000c5a:	e773      	b.n	8000b44 <TIM16_callback+0x88>
		duty_delayed = *(duty_delay_line_storage_array + duty_delay_line_start_offset + duty_delay_line_read_pointer_offset);
 8000c5c:	8828      	ldrh	r0, [r5, #0]
 8000c5e:	181b      	adds	r3, r3, r0
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	18d2      	adds	r2, r2, r3
 8000c64:	8813      	ldrh	r3, [r2, #0]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	800b      	strh	r3, [r1, #0]
 8000c6a:	e7ac      	b.n	8000bc6 <TIM16_callback+0x10a>
	else if(duty_delay_line_finish_offset == 0){
 8000c6c:	4836      	ldr	r0, [pc, #216]	@ (8000d48 <TIM16_callback+0x28c>)
 8000c6e:	8805      	ldrh	r5, [r0, #0]
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d114      	bne.n	8000c9e <TIM16_callback+0x1e2>
		duty_delay_line_finish_offset = FINAL_INDEX + 1;
 8000c74:	2580      	movs	r5, #128	@ 0x80
 8000c76:	00ad      	lsls	r5, r5, #2
 8000c78:	8005      	strh	r5, [r0, #0]
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
 8000c7a:	8818      	ldrh	r0, [r3, #0]
 8000c7c:	3801      	subs	r0, #1
 8000c7e:	b280      	uxth	r0, r0
 8000c80:	8018      	strh	r0, [r3, #0]
 8000c82:	e78d      	b.n	8000ba0 <TIM16_callback+0xe4>
		duty_delay_line_storage_array[FINAL_INDEX + 1] = duty;
 8000c84:	2580      	movs	r5, #128	@ 0x80
 8000c86:	8810      	ldrh	r0, [r2, #0]
 8000c88:	4a2e      	ldr	r2, [pc, #184]	@ (8000d44 <TIM16_callback+0x288>)
 8000c8a:	b280      	uxth	r0, r0
 8000c8c:	00ed      	lsls	r5, r5, #3
 8000c8e:	5350      	strh	r0, [r2, r5]
 8000c90:	e77a      	b.n	8000b88 <TIM16_callback+0xcc>
			duty = 1023 - duty;
 8000c92:	8815      	ldrh	r5, [r2, #0]
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <TIM16_callback+0x280>)
 8000c96:	1b5b      	subs	r3, r3, r5
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	8013      	strh	r3, [r2, #0]
 8000c9c:	e765      	b.n	8000b6a <TIM16_callback+0xae>
		duty_delay_line_start_offset = duty_delay_line_start_offset - 1;
 8000c9e:	881d      	ldrh	r5, [r3, #0]
 8000ca0:	3d01      	subs	r5, #1
 8000ca2:	b2ad      	uxth	r5, r5
 8000ca4:	801d      	strh	r5, [r3, #0]
		duty_delay_line_finish_offset = duty_delay_line_finish_offset - 1;
 8000ca6:	8805      	ldrh	r5, [r0, #0]
 8000ca8:	3d01      	subs	r5, #1
 8000caa:	b2ad      	uxth	r5, r5
 8000cac:	8005      	strh	r5, [r0, #0]
 8000cae:	e777      	b.n	8000ba0 <TIM16_callback+0xe4>
		current_quadrant = SECOND_QUADRANT;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <TIM16_callback+0x268>)
 8000cb2:	3d7f      	subs	r5, #127	@ 0x7f
 8000cb4:	701d      	strb	r5, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000cb6:	2500      	movs	r5, #0
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <TIM16_callback+0x26c>)
 8000cba:	701d      	strb	r5, [r3, #0]
 8000cbc:	e74a      	b.n	8000b54 <TIM16_callback+0x98>
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000cbe:	881a      	ldrh	r2, [r3, #0]
 8000cc0:	2aff      	cmp	r2, #255	@ 0xff
 8000cc2:	d9c9      	bls.n	8000c58 <TIM16_callback+0x19c>
			duty = 0;
 8000cc4:	2500      	movs	r5, #0
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <TIM16_callback+0x278>)
 8000cc8:	8015      	strh	r5, [r2, #0]
 8000cca:	e73b      	b.n	8000b44 <TIM16_callback+0x88>
		duty = sine_wavetable[current_index];
 8000ccc:	881d      	ldrh	r5, [r3, #0]
 8000cce:	4a24      	ldr	r2, [pc, #144]	@ (8000d60 <TIM16_callback+0x2a4>)
 8000cd0:	006d      	lsls	r5, r5, #1
 8000cd2:	5aad      	ldrh	r5, [r5, r2]
 8000cd4:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <TIM16_callback+0x278>)
 8000cd6:	8015      	strh	r5, [r2, #0]
 8000cd8:	e734      	b.n	8000b44 <TIM16_callback+0x88>
		current_quadrant = FIRST_QUADRANT;
 8000cda:	2500      	movs	r5, #0
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <TIM16_callback+0x268>)
 8000cde:	701d      	strb	r5, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <TIM16_callback+0x26c>)
 8000ce2:	3501      	adds	r5, #1
 8000ce4:	701d      	strb	r5, [r3, #0]
 8000ce6:	e735      	b.n	8000b54 <TIM16_callback+0x98>
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000ce8:	881d      	ldrh	r5, [r3, #0]
 8000cea:	2dff      	cmp	r5, #255	@ 0xff
 8000cec:	d8b1      	bhi.n	8000c52 <TIM16_callback+0x196>
		duty = 1023;
 8000cee:	4a11      	ldr	r2, [pc, #68]	@ (8000d34 <TIM16_callback+0x278>)
 8000cf0:	4d12      	ldr	r5, [pc, #72]	@ (8000d3c <TIM16_callback+0x280>)
 8000cf2:	8015      	strh	r5, [r2, #0]
 8000cf4:	e726      	b.n	8000b44 <TIM16_callback+0x88>
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	2000097a 	.word	0x2000097a
 8000cfc:	40014400 	.word	0x40014400
 8000d00:	20000976 	.word	0x20000976
 8000d04:	20000978 	.word	0x20000978
 8000d08:	200002f4 	.word	0x200002f4
 8000d0c:	20000984 	.word	0x20000984
 8000d10:	08005634 	.word	0x08005634
 8000d14:	200003b0 	.word	0x200003b0
 8000d18:	20000550 	.word	0x20000550
 8000d1c:	200000c0 	.word	0x200000c0
 8000d20:	20000992 	.word	0x20000992
 8000d24:	20000990 	.word	0x20000990
 8000d28:	20000991 	.word	0x20000991
 8000d2c:	2000099c 	.word	0x2000099c
 8000d30:	08005640 	.word	0x08005640
 8000d34:	20000986 	.word	0x20000986
 8000d38:	20000998 	.word	0x20000998
 8000d3c:	000003ff 	.word	0x000003ff
 8000d40:	20000002 	.word	0x20000002
 8000d44:	20000554 	.word	0x20000554
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	20000552 	.word	0x20000552
 8000d50:	7ffffe00 	.word	0x7ffffe00
 8000d54:	08005630 	.word	0x08005630
 8000d58:	2000097c 	.word	0x2000097c
 8000d5c:	200004c8 	.word	0x200004c8
 8000d60:	08005a40 	.word	0x08005a40

08000d64 <ADC_DMA_conversion_complete_callback>:
}

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8000d64:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000d66:	2580      	movs	r5, #128	@ 0x80
{
 8000d68:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000d6a:	20a0      	movs	r0, #160	@ 0xa0
 8000d6c:	016d      	lsls	r5, r5, #5
 8000d6e:	2201      	movs	r2, #1
 8000d70:	0029      	movs	r1, r5
 8000d72:	05c0      	lsls	r0, r0, #23
 8000d74:	f002 f802 	bl	8002d7c <HAL_GPIO_WritePin>
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8000d78:	0020      	movs	r0, r4
 8000d7a:	f001 fcfb 	bl	8002774 <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <ADC_DMA_conversion_complete_callback+0xc4>)

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000d80:	492a      	ldr	r1, [pc, #168]	@ (8000e2c <ADC_DMA_conversion_complete_callback+0xc8>)
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8000d82:	881a      	ldrh	r2, [r3, #0]
 8000d84:	b290      	uxth	r0, r2
	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000d86:	428a      	cmp	r2, r1
 8000d88:	d82e      	bhi.n	8000de8 <ADC_DMA_conversion_complete_callback+0x84>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4a28      	ldr	r2, [pc, #160]	@ (8000e30 <ADC_DMA_conversion_complete_callback+0xcc>)
 8000d8e:	7011      	strb	r1, [r2, #0]
	else{
		current_waveshape = SINE_MODE; //if error, return sine
	}

	//GET SPEED
	current_speed = ADCResultsDMA[1] >> 2; //convert to 10-bit
 8000d90:	885a      	ldrh	r2, [r3, #2]
 8000d92:	4928      	ldr	r1, [pc, #160]	@ (8000e34 <ADC_DMA_conversion_complete_callback+0xd0>)
 8000d94:	0892      	lsrs	r2, r2, #2
 8000d96:	800a      	strh	r2, [r1, #0]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON
		//current_depth = ADCResultsDMA[2] >> 4; //convert to 8-bit
		duty_delay_line_read_pointer_offset = ADCResultsDMA[2] >> 3;
 8000d98:	889a      	ldrh	r2, [r3, #4]
 8000d9a:	4927      	ldr	r1, [pc, #156]	@ (8000e38 <ADC_DMA_conversion_complete_callback+0xd4>)
 8000d9c:	08d2      	lsrs	r2, r2, #3
 8000d9e:	800a      	strh	r2, [r1, #0]
			current_symmetry = ADCResultsDMA[3] >> 2;

		#endif

		#if SYMMETRY_ADC_RESOLUTION == 8
			current_symmetry = ADCResultsDMA[3] >> 4;
 8000da0:	88db      	ldrh	r3, [r3, #6]
 8000da2:	4a26      	ldr	r2, [pc, #152]	@ (8000e3c <ADC_DMA_conversion_complete_callback+0xd8>)
 8000da4:	091b      	lsrs	r3, r3, #4
 8000da6:	6013      	str	r3, [r2, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == NO){
 8000da8:	4b25      	ldr	r3, [pc, #148]	@ (8000e40 <ADC_DMA_conversion_complete_callback+0xdc>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	2a00      	cmp	r2, #0
 8000dae:	d101      	bne.n	8000db4 <ADC_DMA_conversion_complete_callback+0x50>
		initial_ADC_conversion_complete = YES;
 8000db0:	3201      	adds	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000db4:	2180      	movs	r1, #128	@ 0x80
 8000db6:	20a0      	movs	r0, #160	@ 0xa0
 8000db8:	2200      	movs	r2, #0
 8000dba:	0149      	lsls	r1, r1, #5
 8000dbc:	05c0      	lsls	r0, r0, #23
 8000dbe:	f001 ffdd 	bl	8002d7c <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000dc2:	2180      	movs	r1, #128	@ 0x80
 8000dc4:	20a0      	movs	r0, #160	@ 0xa0
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	0149      	lsls	r1, r1, #5
 8000dca:	05c0      	lsls	r0, r0, #23
 8000dcc:	f001 ffd6 	bl	8002d7c <HAL_GPIO_WritePin>

	if(speed_pot_is_disabled == NO){
 8000dd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <ADC_DMA_conversion_complete_callback+0xe0>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d014      	beq.n	8000e02 <ADC_DMA_conversion_complete_callback+0x9e>
		Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
		TIM16_final_start_value_locked = TIM16_final_start_value;
		TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
	}

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000dd8:	2180      	movs	r1, #128	@ 0x80
 8000dda:	20a0      	movs	r0, #160	@ 0xa0
 8000ddc:	2200      	movs	r2, #0
 8000dde:	0149      	lsls	r1, r1, #5
 8000de0:	05c0      	lsls	r0, r0, #23
 8000de2:	f001 ffcb 	bl	8002d7c <HAL_GPIO_WritePin>
}
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <ADC_DMA_conversion_complete_callback+0xe4>)
 8000dea:	4290      	cmp	r0, r2
 8000dec:	d803      	bhi.n	8000df6 <ADC_DMA_conversion_complete_callback+0x92>
		current_waveshape = SINE_MODE; //sine wave
 8000dee:	2101      	movs	r1, #1
 8000df0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e30 <ADC_DMA_conversion_complete_callback+0xcc>)
 8000df2:	7011      	strb	r1, [r2, #0]
 8000df4:	e7cc      	b.n	8000d90 <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = SQUARE_MODE; //square wave
 8000df6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <ADC_DMA_conversion_complete_callback+0xcc>)
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8000df8:	42a8      	cmp	r0, r5
 8000dfa:	d211      	bcs.n	8000e20 <ADC_DMA_conversion_complete_callback+0xbc>
		current_waveshape = SQUARE_MODE; //square wave
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	7011      	strb	r1, [r2, #0]
 8000e00:	e7c6      	b.n	8000d90 <ADC_DMA_conversion_complete_callback+0x2c>
		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 8000e02:	f000 fdc7 	bl	8001994 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
		Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8000e06:	f000 fded 	bl	80019e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>
		TIM16_final_start_value_locked = TIM16_final_start_value;
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <ADC_DMA_conversion_complete_callback+0xe8>)
 8000e0c:	4a10      	ldr	r2, [pc, #64]	@ (8000e50 <ADC_DMA_conversion_complete_callback+0xec>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	8013      	strh	r3, [r2, #0]
		TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <ADC_DMA_conversion_complete_callback+0xf0>)
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <ADC_DMA_conversion_complete_callback+0xf4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	7013      	strb	r3, [r2, #0]
 8000e1e:	e7db      	b.n	8000dd8 <ADC_DMA_conversion_complete_callback+0x74>
		current_waveshape = SINE_MODE; //if error, return sine
 8000e20:	2101      	movs	r1, #1
 8000e22:	7011      	strb	r1, [r2, #0]
 8000e24:	e7b4      	b.n	8000d90 <ADC_DMA_conversion_complete_callback+0x2c>
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	2000097c 	.word	0x2000097c
 8000e2c:	00000555 	.word	0x00000555
 8000e30:	2000099c 	.word	0x2000099c
 8000e34:	2000099a 	.word	0x2000099a
 8000e38:	20000552 	.word	0x20000552
 8000e3c:	20000994 	.word	0x20000994
 8000e40:	2000097b 	.word	0x2000097b
 8000e44:	2000096b 	.word	0x2000096b
 8000e48:	00000aaa 	.word	0x00000aaa
 8000e4c:	2000098e 	.word	0x2000098e
 8000e50:	20000978 	.word	0x20000978
 8000e54:	20000985 	.word	0x20000985
 8000e58:	20000984 	.word	0x20000984

08000e5c <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8000e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5e:	46ce      	mov	lr, r9
 8000e60:	4647      	mov	r7, r8

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e62:	2100      	movs	r1, #0
void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8000e64:	b580      	push	{r7, lr}
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e66:	f003 ff65 	bl	8004d34 <HAL_TIM_ReadCapturedValue>
 8000e6a:	4bb8      	ldr	r3, [pc, #736]	@ (800114c <TIM2_ch1_IP_capture_callback+0x2f0>)

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000e6c:	4cb8      	ldr	r4, [pc, #736]	@ (8001150 <TIM2_ch1_IP_capture_callback+0x2f4>)
	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000e6e:	6018      	str	r0, [r3, #0]
	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	0a5b      	lsrs	r3, r3, #9
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	8023      	strh	r3, [r4, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512 less than the
	//input capture measurement timer

	if(input_capture_event == FIRST){ //edge detected is the first
 8000e78:	4bb6      	ldr	r3, [pc, #728]	@ (8001154 <TIM2_ch1_IP_capture_callback+0x2f8>)
 8000e7a:	781a      	ldrb	r2, [r3, #0]
 8000e7c:	b2d0      	uxtb	r0, r2
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d10c      	bne.n	8000e9c <TIM2_ch1_IP_capture_callback+0x40>

		speed_pot_is_disabled = YES;
 8000e82:	49b5      	ldr	r1, [pc, #724]	@ (8001158 <TIM2_ch1_IP_capture_callback+0x2fc>)
 8000e84:	3201      	adds	r2, #1
 8000e86:	700a      	strb	r2, [r1, #0]
		input_capture_measurement_is_ongoing = YES;
 8000e88:	49b4      	ldr	r1, [pc, #720]	@ (800115c <TIM2_ch1_IP_capture_callback+0x300>)
 8000e8a:	700a      	strb	r2, [r1, #0]
		__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8000e8c:	49b4      	ldr	r1, [pc, #720]	@ (8001160 <TIM2_ch1_IP_capture_callback+0x304>)
 8000e8e:	6809      	ldr	r1, [r1, #0]
 8000e90:	6248      	str	r0, [r1, #36]	@ 0x24

		input_capture_event = SECOND;
 8000e92:	701a      	strb	r2, [r3, #0]
			TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
			TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded;
		#endif

	}
}
 8000e94:	bcc0      	pop	{r6, r7}
 8000e96:	46b9      	mov	r9, r7
 8000e98:	46b0      	mov	r8, r6
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		input_capture_event = FIRST; //reset event name
 8000e9c:	2600      	movs	r6, #0
 8000e9e:	701e      	strb	r6, [r3, #0]
		input_capture_measurement_is_ongoing = NO;
 8000ea0:	4bae      	ldr	r3, [pc, #696]	@ (800115c <TIM2_ch1_IP_capture_callback+0x300>)
		if(input_capture_measurement_reelapse_1_is_ongoing == YES){
 8000ea2:	4fb0      	ldr	r7, [pc, #704]	@ (8001164 <TIM2_ch1_IP_capture_callback+0x308>)
		input_capture_measurement_is_ongoing = NO;
 8000ea4:	701e      	strb	r6, [r3, #0]
		if(input_capture_measurement_reelapse_1_is_ongoing == YES){
 8000ea6:	783b      	ldrb	r3, [r7, #0]
			Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000ea8:	4daf      	ldr	r5, [pc, #700]	@ (8001168 <TIM2_ch1_IP_capture_callback+0x30c>)
		if(input_capture_measurement_reelapse_1_is_ongoing == YES){
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d100      	bne.n	8000eb0 <TIM2_ch1_IP_capture_callback+0x54>
 8000eae:	e13f      	b.n	8001130 <TIM2_ch1_IP_capture_callback+0x2d4>
		if(interrupt_period < HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is less than 129, then the desired speed is not reproducable, so just set the absolute top speed (i.e. highest prescaler and shortest period)
 8000eb0:	8822      	ldrh	r2, [r4, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, HIGHEST_PRESCALER_TOP_SPEED_PERIOD);
 8000eb2:	682b      	ldr	r3, [r5, #0]
		if(interrupt_period < HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is less than 129, then the desired speed is not reproducable, so just set the absolute top speed (i.e. highest prescaler and shortest period)
 8000eb4:	2a80      	cmp	r2, #128	@ 0x80
 8000eb6:	d900      	bls.n	8000eba <TIM2_ch1_IP_capture_callback+0x5e>
 8000eb8:	e0a5      	b.n	8001006 <TIM2_ch1_IP_capture_callback+0x1aa>
			interrupt_period = HIGHEST_PRESCALER_TOP_SPEED_PERIOD;
 8000eba:	2281      	movs	r2, #129	@ 0x81
 8000ebc:	8022      	strh	r2, [r4, #0]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 8000ebe:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ec0:	2200      	movs	r2, #0
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000ec4:	625a      	str	r2, [r3, #36]	@ 0x24
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	f000 fd38 	bl	800193c <Start_OC_TIM>
			input_capture_measurement_reelapse_1_is_ongoing = YES;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	703b      	strb	r3, [r7, #0]
		if(interrupt_period <= SIXTY_FOUR_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	8822      	ldrh	r2, [r4, #0]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d900      	bls.n	8000edc <TIM2_ch1_IP_capture_callback+0x80>
 8000eda:	e07d      	b.n	8000fd8 <TIM2_ch1_IP_capture_callback+0x17c>
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000edc:	8822      	ldrh	r2, [r4, #0]
 8000ede:	49a3      	ldr	r1, [pc, #652]	@ (800116c <TIM2_ch1_IP_capture_callback+0x310>)
 8000ee0:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 8000ee2:	2205      	movs	r2, #5
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 8000ee8:	4ba1      	ldr	r3, [pc, #644]	@ (8001170 <TIM2_ch1_IP_capture_callback+0x314>)
 8000eea:	701a      	strb	r2, [r3, #0]
		if(current_waveshape == SINE_MODE || current_waveshape == TRIANGLE_MODE){
 8000eec:	4ba1      	ldr	r3, [pc, #644]	@ (8001174 <TIM2_ch1_IP_capture_callback+0x318>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	2a01      	cmp	r2, #1
 8000ef2:	d003      	beq.n	8000efc <TIM2_ch1_IP_capture_callback+0xa0>
 8000ef4:	781a      	ldrb	r2, [r3, #0]
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d000      	beq.n	8000efc <TIM2_ch1_IP_capture_callback+0xa0>
 8000efa:	e0bc      	b.n	8001076 <TIM2_ch1_IP_capture_callback+0x21a>
			current_index_to_be_loaded = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8000efc:	20a7      	movs	r0, #167	@ 0xa7
 8000efe:	4a9e      	ldr	r2, [pc, #632]	@ (8001178 <TIM2_ch1_IP_capture_callback+0x31c>)
			current_index_to_be_loaded = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8000f00:	0040      	lsls	r0, r0, #1
 8000f02:	8010      	strh	r0, [r2, #0]
			current_quadrant_to_be_loaded = CURRENT_QUADRANT_SQUARE_SYNCED;
 8000f04:	2000      	movs	r0, #0
 8000f06:	4a9d      	ldr	r2, [pc, #628]	@ (800117c <TIM2_ch1_IP_capture_callback+0x320>)
 8000f08:	7010      	strb	r0, [r2, #0]
			current_halfcycle_to_be_loaded = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 8000f0a:	4a9d      	ldr	r2, [pc, #628]	@ (8001180 <TIM2_ch1_IP_capture_callback+0x324>)
 8000f0c:	3001      	adds	r0, #1
 8000f0e:	7010      	strb	r0, [r2, #0]
		if(current_waveshape == TRIANGLE_MODE){
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d000      	beq.n	8000f18 <TIM2_ch1_IP_capture_callback+0xbc>
 8000f16:	e079      	b.n	800100c <TIM2_ch1_IP_capture_callback+0x1b0>
			duty_to_be_loaded = tri_wavetable[current_index];
 8000f18:	4a9a      	ldr	r2, [pc, #616]	@ (8001184 <TIM2_ch1_IP_capture_callback+0x328>)
 8000f1a:	8810      	ldrh	r0, [r2, #0]
 8000f1c:	4a9a      	ldr	r2, [pc, #616]	@ (8001188 <TIM2_ch1_IP_capture_callback+0x32c>)
 8000f1e:	0040      	lsls	r0, r0, #1
 8000f20:	5a80      	ldrh	r0, [r0, r2]
 8000f22:	4a9a      	ldr	r2, [pc, #616]	@ (800118c <TIM2_ch1_IP_capture_callback+0x330>)
 8000f24:	8010      	strh	r0, [r2, #0]
			if(current_depth_to_be_loaded == 255){
 8000f26:	489a      	ldr	r0, [pc, #616]	@ (8001190 <TIM2_ch1_IP_capture_callback+0x334>)
 8000f28:	8800      	ldrh	r0, [r0, #0]
 8000f2a:	28ff      	cmp	r0, #255	@ 0xff
 8000f2c:	d100      	bne.n	8000f30 <TIM2_ch1_IP_capture_callback+0xd4>
 8000f2e:	e07e      	b.n	800102e <TIM2_ch1_IP_capture_callback+0x1d2>
			else if(current_depth != 0){
 8000f30:	4898      	ldr	r0, [pc, #608]	@ (8001194 <TIM2_ch1_IP_capture_callback+0x338>)
 8000f32:	8804      	ldrh	r4, [r0, #0]
 8000f34:	2c00      	cmp	r4, #0
 8000f36:	d000      	beq.n	8000f3a <TIM2_ch1_IP_capture_callback+0xde>
 8000f38:	e093      	b.n	8001062 <TIM2_ch1_IP_capture_callback+0x206>
				duty_to_be_loaded = 1023; //if depth is 0, just output 1023
 8000f3a:	4897      	ldr	r0, [pc, #604]	@ (8001198 <TIM2_ch1_IP_capture_callback+0x33c>)
 8000f3c:	8010      	strh	r0, [r2, #0]
			if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8000f3e:	4a97      	ldr	r2, [pc, #604]	@ (800119c <TIM2_ch1_IP_capture_callback+0x340>)
 8000f40:	6814      	ldr	r4, [r2, #0]
			if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8000f42:	7818      	ldrb	r0, [r3, #0]
 8000f44:	2801      	cmp	r0, #1
 8000f46:	d100      	bne.n	8000f4a <TIM2_ch1_IP_capture_callback+0xee>
 8000f48:	e07c      	b.n	8001044 <TIM2_ch1_IP_capture_callback+0x1e8>
 8000f4a:	7818      	ldrb	r0, [r3, #0]
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	d100      	bne.n	8000f52 <TIM2_ch1_IP_capture_callback+0xf6>
 8000f50:	e078      	b.n	8001044 <TIM2_ch1_IP_capture_callback+0x1e8>
			else if(current_waveshape == SQUARE_MODE){
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d100      	bne.n	8000f5a <TIM2_ch1_IP_capture_callback+0xfe>
 8000f58:	e0a4      	b.n	80010a4 <TIM2_ch1_IP_capture_callback+0x248>
			if(symmetry_status == CW){
 8000f5a:	2600      	movs	r6, #0
 8000f5c:	2c7f      	cmp	r4, #127	@ 0x7f
 8000f5e:	d900      	bls.n	8000f62 <TIM2_ch1_IP_capture_callback+0x106>
 8000f60:	e07b      	b.n	800105a <TIM2_ch1_IP_capture_callback+0x1fe>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8000f62:	257f      	movs	r5, #127	@ 0x7f
 8000f64:	6813      	ldr	r3, [r2, #0]
 8000f66:	1aed      	subs	r5, r5, r3
 8000f68:	b2ed      	uxtb	r5, r5
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value_to_be_loaded;
 8000f6a:	880c      	ldrh	r4, [r1, #0]
 8000f6c:	b2a3      	uxth	r3, r4
 8000f6e:	4698      	mov	r8, r3
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	1b1c      	subs	r4, r3, r4
 8000f76:	b2a4      	uxth	r4, r4
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8000f78:	4365      	muls	r5, r4
 8000f7a:	b2ad      	uxth	r5, r5
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8000f7c:	0a2f      	lsrs	r7, r5, #8
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8000f7e:	1be2      	subs	r2, r4, r7
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8000f80:	19e4      	adds	r4, r4, r7
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8000f82:	b292      	uxth	r2, r2
			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8000f84:	b2a4      	uxth	r4, r4
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8000f86:	4691      	mov	r9, r2
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8000f88:	2cff      	cmp	r4, #255	@ 0xff
 8000f8a:	d800      	bhi.n	8000f8e <TIM2_ch1_IP_capture_callback+0x132>
 8000f8c:	e0b3      	b.n	80010f6 <TIM2_ch1_IP_capture_callback+0x29a>
 8000f8e:	429c      	cmp	r4, r3
 8000f90:	d100      	bne.n	8000f94 <TIM2_ch1_IP_capture_callback+0x138>
 8000f92:	e0a9      	b.n	80010e8 <TIM2_ch1_IP_capture_callback+0x28c>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8000f94:	2108      	movs	r1, #8
 8000f96:	0028      	movs	r0, r5
 8000f98:	f000 ff06 	bl	8001da8 <unsigned_bitwise_modulo>
 8000f9c:	2880      	cmp	r0, #128	@ 0x80
 8000f9e:	d100      	bne.n	8000fa2 <TIM2_ch1_IP_capture_callback+0x146>
 8000fa0:	e10c      	b.n	80011bc <TIM2_ch1_IP_capture_callback+0x360>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	0028      	movs	r0, r5
 8000fa6:	f000 feff 	bl	8001da8 <unsigned_bitwise_modulo>
 8000faa:	2800      	cmp	r0, #0
 8000fac:	d000      	beq.n	8000fb0 <TIM2_ch1_IP_capture_callback+0x154>
 8000fae:	e15e      	b.n	800126e <TIM2_ch1_IP_capture_callback+0x412>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8000fb0:	0020      	movs	r0, r4
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	f000 fef8 	bl	8001da8 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8000fb8:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust = DO_NOTHING;
 8000fba:	4b79      	ldr	r3, [pc, #484]	@ (80011a0 <TIM2_ch1_IP_capture_callback+0x344>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8000fbc:	2800      	cmp	r0, #0
 8000fbe:	d000      	beq.n	8000fc2 <TIM2_ch1_IP_capture_callback+0x166>
 8000fc0:	e196      	b.n	80012f0 <TIM2_ch1_IP_capture_callback+0x494>
						if(symmetry_type_for_halfcycle == SHORTEN){
 8000fc2:	2e00      	cmp	r6, #0
 8000fc4:	d100      	bne.n	8000fc8 <TIM2_ch1_IP_capture_callback+0x16c>
 8000fc6:	e1d4      	b.n	8001372 <TIM2_ch1_IP_capture_callback+0x516>
							TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	1b1b      	subs	r3, r3, r4
 8000fd2:	4d74      	ldr	r5, [pc, #464]	@ (80011a4 <TIM2_ch1_IP_capture_callback+0x348>)
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	e104      	b.n	80011e2 <TIM2_ch1_IP_capture_callback+0x386>
		else if(interrupt_period <= ONE_HUNDRED_TWENTY_EIGHT_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 8000fd8:	2280      	movs	r2, #128	@ 0x80
 8000fda:	8821      	ldrh	r1, [r4, #0]
 8000fdc:	0092      	lsls	r2, r2, #2
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d94c      	bls.n	800107c <TIM2_ch1_IP_capture_callback+0x220>
		else if(interrupt_period <= TWO_HUNDRED_FIFTY_SIX_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 8000fe2:	2280      	movs	r2, #128	@ 0x80
 8000fe4:	8821      	ldrh	r1, [r4, #0]
 8000fe6:	00d2      	lsls	r2, r2, #3
 8000fe8:	4291      	cmp	r1, r2
 8000fea:	d900      	bls.n	8000fee <TIM2_ch1_IP_capture_callback+0x192>
 8000fec:	e15d      	b.n	80012aa <TIM2_ch1_IP_capture_callback+0x44e>
			interrupt_period = interrupt_period >> 2;
 8000fee:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000ff0:	495e      	ldr	r1, [pc, #376]	@ (800116c <TIM2_ch1_IP_capture_callback+0x310>)
			interrupt_period = interrupt_period >> 2;
 8000ff2:	0892      	lsrs	r2, r2, #2
 8000ff4:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000ff6:	8822      	ldrh	r2, [r4, #0]
 8000ff8:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 2;
 8000ffa:	2203      	movs	r2, #3
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 2;
 8001000:	4b5b      	ldr	r3, [pc, #364]	@ (8001170 <TIM2_ch1_IP_capture_callback+0x314>)
 8001002:	701a      	strb	r2, [r3, #0]
 8001004:	e772      	b.n	8000eec <TIM2_ch1_IP_capture_callback+0x90>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period); //measured value divided by 512
 8001006:	8822      	ldrh	r2, [r4, #0]
 8001008:	b292      	uxth	r2, r2
 800100a:	e758      	b.n	8000ebe <TIM2_ch1_IP_capture_callback+0x62>
		else if(current_waveshape == SINE_MODE){
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	2a01      	cmp	r2, #1
 8001010:	d040      	beq.n	8001094 <TIM2_ch1_IP_capture_callback+0x238>
		else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	2a02      	cmp	r2, #2
 8001016:	d100      	bne.n	800101a <TIM2_ch1_IP_capture_callback+0x1be>
 8001018:	e153      	b.n	80012c2 <TIM2_ch1_IP_capture_callback+0x466>
		else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	2a02      	cmp	r2, #2
 800101e:	d100      	bne.n	8001022 <TIM2_ch1_IP_capture_callback+0x1c6>
 8001020:	e15d      	b.n	80012de <TIM2_ch1_IP_capture_callback+0x482>
			if(current_depth_to_be_loaded == 255){
 8001022:	485b      	ldr	r0, [pc, #364]	@ (8001190 <TIM2_ch1_IP_capture_callback+0x334>)
 8001024:	4a59      	ldr	r2, [pc, #356]	@ (800118c <TIM2_ch1_IP_capture_callback+0x330>)
 8001026:	8800      	ldrh	r0, [r0, #0]
 8001028:	28ff      	cmp	r0, #255	@ 0xff
 800102a:	d000      	beq.n	800102e <TIM2_ch1_IP_capture_callback+0x1d2>
 800102c:	e780      	b.n	8000f30 <TIM2_ch1_IP_capture_callback+0xd4>
				duty_to_be_loaded = 1023 - duty_to_be_loaded;
 800102e:	8814      	ldrh	r4, [r2, #0]
 8001030:	4859      	ldr	r0, [pc, #356]	@ (8001198 <TIM2_ch1_IP_capture_callback+0x33c>)
 8001032:	1b00      	subs	r0, r0, r4
 8001034:	b280      	uxth	r0, r0
 8001036:	8010      	strh	r0, [r2, #0]
			if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8001038:	4a58      	ldr	r2, [pc, #352]	@ (800119c <TIM2_ch1_IP_capture_callback+0x340>)
 800103a:	6814      	ldr	r4, [r2, #0]
			if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 800103c:	7818      	ldrb	r0, [r3, #0]
 800103e:	2801      	cmp	r0, #1
 8001040:	d000      	beq.n	8001044 <TIM2_ch1_IP_capture_callback+0x1e8>
 8001042:	e782      	b.n	8000f4a <TIM2_ch1_IP_capture_callback+0xee>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001044:	4b58      	ldr	r3, [pc, #352]	@ (80011a8 <TIM2_ch1_IP_capture_callback+0x34c>)
 8001046:	7818      	ldrb	r0, [r3, #0]
 8001048:	2800      	cmp	r0, #0
 800104a:	d134      	bne.n	80010b6 <TIM2_ch1_IP_capture_callback+0x25a>
 800104c:	4857      	ldr	r0, [pc, #348]	@ (80011ac <TIM2_ch1_IP_capture_callback+0x350>)
 800104e:	7800      	ldrb	r0, [r0, #0]
 8001050:	2800      	cmp	r0, #0
 8001052:	d130      	bne.n	80010b6 <TIM2_ch1_IP_capture_callback+0x25a>
					if(symmetry_status == CW){
 8001054:	2600      	movs	r6, #0
 8001056:	2c7f      	cmp	r4, #127	@ 0x7f
 8001058:	d92b      	bls.n	80010b2 <TIM2_ch1_IP_capture_callback+0x256>
				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 800105a:	6815      	ldr	r5, [r2, #0]
 800105c:	3d80      	subs	r5, #128	@ 0x80
 800105e:	b2ed      	uxtb	r5, r5
 8001060:	e783      	b.n	8000f6a <TIM2_ch1_IP_capture_callback+0x10e>
				multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 8001062:	4c53      	ldr	r4, [pc, #332]	@ (80011b0 <TIM2_ch1_IP_capture_callback+0x354>)
 8001064:	8825      	ldrh	r5, [r4, #0]
 8001066:	8804      	ldrh	r4, [r0, #0]
				duty_to_be_loaded = 1023 - (uint16_t)(multiply_product >> 8);
 8001068:	484b      	ldr	r0, [pc, #300]	@ (8001198 <TIM2_ch1_IP_capture_callback+0x33c>)
				multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 800106a:	436c      	muls	r4, r5
				duty_to_be_loaded = 1023 - (uint16_t)(multiply_product >> 8);
 800106c:	0a24      	lsrs	r4, r4, #8
 800106e:	1b00      	subs	r0, r0, r4
 8001070:	b280      	uxth	r0, r0
 8001072:	8010      	strh	r0, [r2, #0]
 8001074:	e763      	b.n	8000f3e <TIM2_ch1_IP_capture_callback+0xe2>
			current_index_to_be_loaded = SQUARE_WAVE_TEMPO_APEX_INDEX;
 8001076:	2080      	movs	r0, #128	@ 0x80
 8001078:	4a3f      	ldr	r2, [pc, #252]	@ (8001178 <TIM2_ch1_IP_capture_callback+0x31c>)
 800107a:	e741      	b.n	8000f00 <TIM2_ch1_IP_capture_callback+0xa4>
			interrupt_period = interrupt_period >> 1;
 800107c:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800107e:	493b      	ldr	r1, [pc, #236]	@ (800116c <TIM2_ch1_IP_capture_callback+0x310>)
			interrupt_period = interrupt_period >> 1;
 8001080:	0852      	lsrs	r2, r2, #1
 8001082:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001084:	8822      	ldrh	r2, [r4, #0]
 8001086:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 1;
 8001088:	2204      	movs	r2, #4
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800108a:	b29b      	uxth	r3, r3
 800108c:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 1;
 800108e:	4b38      	ldr	r3, [pc, #224]	@ (8001170 <TIM2_ch1_IP_capture_callback+0x314>)
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e72b      	b.n	8000eec <TIM2_ch1_IP_capture_callback+0x90>
			duty_to_be_loaded = sine_wavetable[current_index];
 8001094:	4a3b      	ldr	r2, [pc, #236]	@ (8001184 <TIM2_ch1_IP_capture_callback+0x328>)
 8001096:	8810      	ldrh	r0, [r2, #0]
 8001098:	4a46      	ldr	r2, [pc, #280]	@ (80011b4 <TIM2_ch1_IP_capture_callback+0x358>)
 800109a:	0040      	lsls	r0, r0, #1
 800109c:	5a80      	ldrh	r0, [r0, r2]
 800109e:	4a3b      	ldr	r2, [pc, #236]	@ (800118c <TIM2_ch1_IP_capture_callback+0x330>)
 80010a0:	8010      	strh	r0, [r2, #0]
 80010a2:	e740      	b.n	8000f26 <TIM2_ch1_IP_capture_callback+0xca>
				if(current_halfcycle == FIRST_HALFCYCLE){
 80010a4:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <TIM2_ch1_IP_capture_callback+0x34c>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	b2de      	uxtb	r6, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d117      	bne.n	80010de <TIM2_ch1_IP_capture_callback+0x282>
					if(symmetry_status == CW){
 80010ae:	2c7f      	cmp	r4, #127	@ 0x7f
 80010b0:	d8d3      	bhi.n	800105a <TIM2_ch1_IP_capture_callback+0x1fe>
						symmetry_type_for_halfcycle = LENGTHEN;
 80010b2:	2601      	movs	r6, #1
 80010b4:	e755      	b.n	8000f62 <TIM2_ch1_IP_capture_callback+0x106>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 80010b6:	7818      	ldrb	r0, [r3, #0]
 80010b8:	2801      	cmp	r0, #1
 80010ba:	d100      	bne.n	80010be <TIM2_ch1_IP_capture_callback+0x262>
 80010bc:	e0bd      	b.n	800123a <TIM2_ch1_IP_capture_callback+0x3de>
				else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 80010be:	7818      	ldrb	r0, [r3, #0]
 80010c0:	2800      	cmp	r0, #0
 80010c2:	d103      	bne.n	80010cc <TIM2_ch1_IP_capture_callback+0x270>
 80010c4:	4839      	ldr	r0, [pc, #228]	@ (80011ac <TIM2_ch1_IP_capture_callback+0x350>)
 80010c6:	7800      	ldrb	r0, [r0, #0]
 80010c8:	2801      	cmp	r0, #1
 80010ca:	d008      	beq.n	80010de <TIM2_ch1_IP_capture_callback+0x282>
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d000      	beq.n	80010d4 <TIM2_ch1_IP_capture_callback+0x278>
 80010d2:	e742      	b.n	8000f5a <TIM2_ch1_IP_capture_callback+0xfe>
 80010d4:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <TIM2_ch1_IP_capture_callback+0x350>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d000      	beq.n	80010de <TIM2_ch1_IP_capture_callback+0x282>
 80010dc:	e73d      	b.n	8000f5a <TIM2_ch1_IP_capture_callback+0xfe>
						symmetry_type_for_halfcycle = LENGTHEN;
 80010de:	2601      	movs	r6, #1
					if(symmetry_status == CW){
 80010e0:	2c7f      	cmp	r4, #127	@ 0x7f
 80010e2:	d8ba      	bhi.n	800105a <TIM2_ch1_IP_capture_callback+0x1fe>
 80010e4:	2600      	movs	r6, #0
 80010e6:	e73c      	b.n	8000f62 <TIM2_ch1_IP_capture_callback+0x106>
			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80010e8:	2108      	movs	r1, #8
 80010ea:	0028      	movs	r0, r5
 80010ec:	f000 fe5c 	bl	8001da8 <unsigned_bitwise_modulo>
 80010f0:	2800      	cmp	r0, #0
 80010f2:	d000      	beq.n	80010f6 <TIM2_ch1_IP_capture_callback+0x29a>
 80010f4:	e0ce      	b.n	8001294 <TIM2_ch1_IP_capture_callback+0x438>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80010f6:	2108      	movs	r1, #8
 80010f8:	0028      	movs	r0, r5
 80010fa:	f000 fe55 	bl	8001da8 <unsigned_bitwise_modulo>
 80010fe:	2880      	cmp	r0, #128	@ 0x80
 8001100:	d000      	beq.n	8001104 <TIM2_ch1_IP_capture_callback+0x2a8>
 8001102:	e07a      	b.n	80011fa <TIM2_ch1_IP_capture_callback+0x39e>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001104:	4d27      	ldr	r5, [pc, #156]	@ (80011a4 <TIM2_ch1_IP_capture_callback+0x348>)
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001106:	2e00      	cmp	r6, #0
 8001108:	d100      	bne.n	800110c <TIM2_ch1_IP_capture_callback+0x2b0>
 800110a:	e09c      	b.n	8001246 <TIM2_ch1_IP_capture_callback+0x3ea>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 800110c:	2300      	movs	r3, #0
 800110e:	702b      	strb	r3, [r5, #0]
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001110:	4b1c      	ldr	r3, [pc, #112]	@ (8001184 <TIM2_ch1_IP_capture_callback+0x328>)
 8001112:	2101      	movs	r1, #1
 8001114:	8818      	ldrh	r0, [r3, #0]
 8001116:	b280      	uxth	r0, r0
 8001118:	f000 fe46 	bl	8001da8 <unsigned_bitwise_modulo>
 800111c:	2800      	cmp	r0, #0
 800111e:	d000      	beq.n	8001122 <TIM2_ch1_IP_capture_callback+0x2c6>
 8001120:	e11d      	b.n	800135e <TIM2_ch1_IP_capture_callback+0x502>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001122:	2380      	movs	r3, #128	@ 0x80
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <TIM2_ch1_IP_capture_callback+0x35c>)
 8001128:	1b1b      	subs	r3, r3, r4
 800112a:	b29b      	uxth	r3, r3
 800112c:	8013      	strh	r3, [r2, #0]
 800112e:	e077      	b.n	8001220 <TIM2_ch1_IP_capture_callback+0x3c4>
			Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001130:	2100      	movs	r1, #0
 8001132:	0028      	movs	r0, r5
 8001134:	f000 fc0c 	bl	8001950 <Stop_OC_TIM>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8001138:	8823      	ldrh	r3, [r4, #0]
 800113a:	682a      	ldr	r2, [r5, #0]
 800113c:	b29b      	uxth	r3, r3
 800113e:	6353      	str	r3, [r2, #52]	@ 0x34
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001140:	2100      	movs	r1, #0
 8001142:	0028      	movs	r0, r5
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001144:	6256      	str	r6, [r2, #36]	@ 0x24
			Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8001146:	f000 fbf9 	bl	800193c <Start_OC_TIM>
 800114a:	e6b1      	b.n	8000eb0 <TIM2_ch1_IP_capture_callback+0x54>
 800114c:	20000970 	.word	0x20000970
 8001150:	20000968 	.word	0x20000968
 8001154:	20000974 	.word	0x20000974
 8001158:	2000096b 	.word	0x2000096b
 800115c:	2000096c 	.word	0x2000096c
 8001160:	20000238 	.word	0x20000238
 8001164:	2000096a 	.word	0x2000096a
 8001168:	2000017c 	.word	0x2000017c
 800116c:	20000964 	.word	0x20000964
 8001170:	20000960 	.word	0x20000960
 8001174:	2000099c 	.word	0x2000099c
 8001178:	20000958 	.word	0x20000958
 800117c:	2000095a 	.word	0x2000095a
 8001180:	2000095b 	.word	0x2000095b
 8001184:	20000992 	.word	0x20000992
 8001188:	08005640 	.word	0x08005640
 800118c:	2000095e 	.word	0x2000095e
 8001190:	20000956 	.word	0x20000956
 8001194:	20000998 	.word	0x20000998
 8001198:	000003ff 	.word	0x000003ff
 800119c:	20000994 	.word	0x20000994
 80011a0:	2000098c 	.word	0x2000098c
 80011a4:	20000966 	.word	0x20000966
 80011a8:	20000991 	.word	0x20000991
 80011ac:	20000990 	.word	0x20000990
 80011b0:	20000986 	.word	0x20000986
 80011b4:	08005a40 	.word	0x08005a40
 80011b8:	20000962 	.word	0x20000962
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80011bc:	3401      	adds	r4, #1
 80011be:	b2a4      	uxth	r4, r4
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80011c0:	0020      	movs	r0, r4
 80011c2:	2101      	movs	r1, #1
 80011c4:	f000 fdf0 	bl	8001da8 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80011c8:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 80011ca:	4d7c      	ldr	r5, [pc, #496]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80011cc:	2800      	cmp	r0, #0
 80011ce:	d000      	beq.n	80011d2 <TIM2_ch1_IP_capture_callback+0x376>
 80011d0:	e080      	b.n	80012d4 <TIM2_ch1_IP_capture_callback+0x478>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d100      	bne.n	80011d8 <TIM2_ch1_IP_capture_callback+0x37c>
 80011d6:	e0c6      	b.n	8001366 <TIM2_ch1_IP_capture_callback+0x50a>
							TIM16_prescaler_adjust_to_be_loaded = MULTIPLY_BY_TWO;
 80011d8:	2301      	movs	r3, #1
 80011da:	702b      	strb	r3, [r5, #0]
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 80011dc:	33ff      	adds	r3, #255	@ 0xff
 80011de:	1b1b      	subs	r3, r3, r4
 80011e0:	b29b      	uxth	r3, r3
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen - 1;
 80011e2:	4a77      	ldr	r2, [pc, #476]	@ (80013c0 <TIM2_ch1_IP_capture_callback+0x564>)
 80011e4:	8013      	strh	r3, [r2, #0]
		if(TIM16_prescaler_adjust_to_be_loaded == MULTIPLY_BY_TWO){
 80011e6:	782b      	ldrb	r3, [r5, #0]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d11c      	bne.n	8001226 <TIM2_ch1_IP_capture_callback+0x3ca>
			TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded - 1;
 80011ec:	4b75      	ldr	r3, [pc, #468]	@ (80013c4 <TIM2_ch1_IP_capture_callback+0x568>)
 80011ee:	4a76      	ldr	r2, [pc, #472]	@ (80013c8 <TIM2_ch1_IP_capture_callback+0x56c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	7013      	strb	r3, [r2, #0]
 80011f8:	e64c      	b.n	8000e94 <TIM2_ch1_IP_capture_callback+0x38>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80011fa:	2108      	movs	r1, #8
 80011fc:	0028      	movs	r0, r5
 80011fe:	f000 fdd3 	bl	8001da8 <unsigned_bitwise_modulo>
 8001202:	2800      	cmp	r0, #0
 8001204:	d000      	beq.n	8001208 <TIM2_ch1_IP_capture_callback+0x3ac>
 8001206:	e0b7      	b.n	8001378 <TIM2_ch1_IP_capture_callback+0x51c>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001208:	4d6c      	ldr	r5, [pc, #432]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 800120a:	7028      	strb	r0, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 800120c:	2e00      	cmp	r6, #0
 800120e:	d000      	beq.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
 8001210:	e086      	b.n	8001320 <TIM2_ch1_IP_capture_callback+0x4c4>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten;
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	464a      	mov	r2, r9
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	1a9b      	subs	r3, r3, r2
 800121a:	4a69      	ldr	r2, [pc, #420]	@ (80013c0 <TIM2_ch1_IP_capture_callback+0x564>)
 800121c:	b29b      	uxth	r3, r3
 800121e:	8013      	strh	r3, [r2, #0]
		if(TIM16_prescaler_adjust_to_be_loaded == MULTIPLY_BY_TWO){
 8001220:	782b      	ldrb	r3, [r5, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d0e2      	beq.n	80011ec <TIM2_ch1_IP_capture_callback+0x390>
		else if(TIM16_prescaler_adjust_to_be_loaded == DO_NOTHING){
 8001226:	782b      	ldrb	r3, [r5, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d000      	beq.n	800122e <TIM2_ch1_IP_capture_callback+0x3d2>
 800122c:	e632      	b.n	8000e94 <TIM2_ch1_IP_capture_callback+0x38>
				TIM16_prescaler_divisors_final_index_to_be_loaded = TIM16_base_prescaler_divisors_index_to_be_loaded;
 800122e:	4b65      	ldr	r3, [pc, #404]	@ (80013c4 <TIM2_ch1_IP_capture_callback+0x568>)
 8001230:	4a65      	ldr	r2, [pc, #404]	@ (80013c8 <TIM2_ch1_IP_capture_callback+0x56c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	7013      	strb	r3, [r2, #0]
}
 8001238:	e62c      	b.n	8000e94 <TIM2_ch1_IP_capture_callback+0x38>
				if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 800123a:	4864      	ldr	r0, [pc, #400]	@ (80013cc <TIM2_ch1_IP_capture_callback+0x570>)
 800123c:	7800      	ldrb	r0, [r0, #0]
 800123e:	2801      	cmp	r0, #1
 8001240:	d000      	beq.n	8001244 <TIM2_ch1_IP_capture_callback+0x3e8>
 8001242:	e73c      	b.n	80010be <TIM2_ch1_IP_capture_callback+0x262>
 8001244:	e706      	b.n	8001054 <TIM2_ch1_IP_capture_callback+0x1f8>
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001246:	4b62      	ldr	r3, [pc, #392]	@ (80013d0 <TIM2_ch1_IP_capture_callback+0x574>)
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001248:	702e      	strb	r6, [r5, #0]
				if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 800124a:	8818      	ldrh	r0, [r3, #0]
 800124c:	2101      	movs	r1, #1
 800124e:	b280      	uxth	r0, r0
 8001250:	f000 fdaa 	bl	8001da8 <unsigned_bitwise_modulo>
 8001254:	4643      	mov	r3, r8
 8001256:	3b01      	subs	r3, #1
 8001258:	3bff      	subs	r3, #255	@ 0xff
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	b29b      	uxth	r3, r3
 800125e:	2800      	cmp	r0, #0
 8001260:	d158      	bne.n	8001314 <TIM2_ch1_IP_capture_callback+0x4b8>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten;
 8001262:	3301      	adds	r3, #1
 8001264:	4a56      	ldr	r2, [pc, #344]	@ (80013c0 <TIM2_ch1_IP_capture_callback+0x564>)
 8001266:	33ff      	adds	r3, #255	@ 0xff
 8001268:	b29b      	uxth	r3, r3
 800126a:	8013      	strh	r3, [r2, #0]
 800126c:	e7d8      	b.n	8001220 <TIM2_ch1_IP_capture_callback+0x3c4>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 800126e:	2108      	movs	r1, #8
 8001270:	0028      	movs	r0, r5
 8001272:	f000 fd99 	bl	8001da8 <unsigned_bitwise_modulo>
 8001276:	287f      	cmp	r0, #127	@ 0x7f
 8001278:	d840      	bhi.n	80012fc <TIM2_ch1_IP_capture_callback+0x4a0>
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800127a:	0020      	movs	r0, r4
 800127c:	2101      	movs	r1, #1
 800127e:	f000 fd93 	bl	8001da8 <unsigned_bitwise_modulo>
						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001282:	0864      	lsrs	r4, r4, #1
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001284:	4d4d      	ldr	r5, [pc, #308]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001286:	2800      	cmp	r0, #0
 8001288:	d000      	beq.n	800128c <TIM2_ch1_IP_capture_callback+0x430>
 800128a:	e086      	b.n	800139a <TIM2_ch1_IP_capture_callback+0x53e>
						if(symmetry_type_for_halfcycle == SHORTEN){
 800128c:	2e00      	cmp	r6, #0
 800128e:	d1a3      	bne.n	80011d8 <TIM2_ch1_IP_capture_callback+0x37c>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001290:	702e      	strb	r6, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001292:	e7be      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001294:	2108      	movs	r1, #8
 8001296:	0028      	movs	r0, r5
 8001298:	f000 fd86 	bl	8001da8 <unsigned_bitwise_modulo>
 800129c:	2800      	cmp	r0, #0
 800129e:	d000      	beq.n	80012a2 <TIM2_ch1_IP_capture_callback+0x446>
 80012a0:	e678      	b.n	8000f94 <TIM2_ch1_IP_capture_callback+0x138>
		if(symmetry_type_for_halfcycle == SHORTEN){
 80012a2:	2e00      	cmp	r6, #0
 80012a4:	d14d      	bne.n	8001342 <TIM2_ch1_IP_capture_callback+0x4e6>
 80012a6:	4d45      	ldr	r5, [pc, #276]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 80012a8:	e7b3      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
		else if(interrupt_period <= FIVE_HUNDRED_TWELVE_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 80012aa:	2280      	movs	r2, #128	@ 0x80
 80012ac:	8821      	ldrh	r1, [r4, #0]
 80012ae:	0112      	lsls	r2, r2, #4
 80012b0:	4291      	cmp	r1, r2
 80012b2:	d93a      	bls.n	800132a <TIM2_ch1_IP_capture_callback+0x4ce>
		else if(interrupt_period <= ONE_THOUSAND_TWENTY_FOUR_PRESCALER_LARGEST_INTERRUPT_PERIOD){
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	8821      	ldrh	r1, [r4, #0]
 80012b8:	0152      	lsls	r2, r2, #5
 80012ba:	4291      	cmp	r1, r2
 80012bc:	d971      	bls.n	80013a2 <TIM2_ch1_IP_capture_callback+0x546>
 80012be:	4945      	ldr	r1, [pc, #276]	@ (80013d4 <TIM2_ch1_IP_capture_callback+0x578>)
 80012c0:	e614      	b.n	8000eec <TIM2_ch1_IP_capture_callback+0x90>
		else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 80012c2:	4a43      	ldr	r2, [pc, #268]	@ (80013d0 <TIM2_ch1_IP_capture_callback+0x574>)
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d900      	bls.n	80012cc <TIM2_ch1_IP_capture_callback+0x470>
 80012ca:	e6a6      	b.n	800101a <TIM2_ch1_IP_capture_callback+0x1be>
			duty_to_be_loaded = 1023;
 80012cc:	4a42      	ldr	r2, [pc, #264]	@ (80013d8 <TIM2_ch1_IP_capture_callback+0x57c>)
 80012ce:	4843      	ldr	r0, [pc, #268]	@ (80013dc <TIM2_ch1_IP_capture_callback+0x580>)
 80012d0:	8010      	strh	r0, [r2, #0]
 80012d2:	e628      	b.n	8000f26 <TIM2_ch1_IP_capture_callback+0xca>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80012d4:	2e00      	cmp	r6, #0
 80012d6:	d046      	beq.n	8001366 <TIM2_ch1_IP_capture_callback+0x50a>
							TIM16_prescaler_adjust_to_be_loaded = MULTIPLY_BY_TWO;
 80012d8:	2301      	movs	r3, #1
 80012da:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80012dc:	e718      	b.n	8001110 <TIM2_ch1_IP_capture_callback+0x2b4>
		else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 80012de:	4a3c      	ldr	r2, [pc, #240]	@ (80013d0 <TIM2_ch1_IP_capture_callback+0x574>)
 80012e0:	8812      	ldrh	r2, [r2, #0]
 80012e2:	2aff      	cmp	r2, #255	@ 0xff
 80012e4:	d800      	bhi.n	80012e8 <TIM2_ch1_IP_capture_callback+0x48c>
 80012e6:	e69c      	b.n	8001022 <TIM2_ch1_IP_capture_callback+0x1c6>
			duty_to_be_loaded = 0;
 80012e8:	2000      	movs	r0, #0
 80012ea:	4a3b      	ldr	r2, [pc, #236]	@ (80013d8 <TIM2_ch1_IP_capture_callback+0x57c>)
 80012ec:	8010      	strh	r0, [r2, #0]
 80012ee:	e61a      	b.n	8000f26 <TIM2_ch1_IP_capture_callback+0xca>
						if(symmetry_type_for_halfcycle == SHORTEN){
 80012f0:	2e00      	cmp	r6, #0
 80012f2:	d03e      	beq.n	8001372 <TIM2_ch1_IP_capture_callback+0x516>
							TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 80012f4:	2201      	movs	r2, #1
 80012f6:	4d31      	ldr	r5, [pc, #196]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 80012f8:	701a      	strb	r2, [r3, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80012fa:	e709      	b.n	8001110 <TIM2_ch1_IP_capture_callback+0x2b4>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80012fc:	2108      	movs	r1, #8
 80012fe:	0028      	movs	r0, r5
 8001300:	f000 fd52 	bl	8001da8 <unsigned_bitwise_modulo>
 8001304:	2880      	cmp	r0, #128	@ 0x80
 8001306:	d900      	bls.n	800130a <TIM2_ch1_IP_capture_callback+0x4ae>
 8001308:	e758      	b.n	80011bc <TIM2_ch1_IP_capture_callback+0x360>
		if(symmetry_type_for_halfcycle == SHORTEN){
 800130a:	2e00      	cmp	r6, #0
 800130c:	d000      	beq.n	8001310 <TIM2_ch1_IP_capture_callback+0x4b4>
 800130e:	e65d      	b.n	8000fcc <TIM2_ch1_IP_capture_callback+0x170>
 8001310:	4d2a      	ldr	r5, [pc, #168]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 8001312:	e77e      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_shorten + 1;
 8001314:	3302      	adds	r3, #2
 8001316:	4a2a      	ldr	r2, [pc, #168]	@ (80013c0 <TIM2_ch1_IP_capture_callback+0x564>)
 8001318:	33ff      	adds	r3, #255	@ 0xff
 800131a:	b29b      	uxth	r3, r3
 800131c:	8013      	strh	r3, [r2, #0]
 800131e:	e77f      	b.n	8001220 <TIM2_ch1_IP_capture_callback+0x3c4>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001320:	2380      	movs	r3, #128	@ 0x80
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	1b1b      	subs	r3, r3, r4
 8001326:	b29b      	uxth	r3, r3
 8001328:	e75b      	b.n	80011e2 <TIM2_ch1_IP_capture_callback+0x386>
			interrupt_period = interrupt_period >> 3;
 800132a:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 800132c:	4929      	ldr	r1, [pc, #164]	@ (80013d4 <TIM2_ch1_IP_capture_callback+0x578>)
			interrupt_period = interrupt_period >> 3;
 800132e:	08d2      	lsrs	r2, r2, #3
 8001330:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001332:	8822      	ldrh	r2, [r4, #0]
 8001334:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 3;
 8001336:	2202      	movs	r2, #2
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 8001338:	b29b      	uxth	r3, r3
 800133a:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 3;
 800133c:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <TIM2_ch1_IP_capture_callback+0x568>)
 800133e:	701a      	strb	r2, [r3, #0]
 8001340:	e5d4      	b.n	8000eec <TIM2_ch1_IP_capture_callback+0x90>
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001342:	2300      	movs	r3, #0
 8001344:	4d1d      	ldr	r5, [pc, #116]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 8001346:	e74c      	b.n	80011e2 <TIM2_ch1_IP_capture_callback+0x386>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001348:	2108      	movs	r1, #8
 800134a:	0028      	movs	r0, r5
 800134c:	f000 fd2c 	bl	8001da8 <unsigned_bitwise_modulo>
 8001350:	2880      	cmp	r0, #128	@ 0x80
 8001352:	d9da      	bls.n	800130a <TIM2_ch1_IP_capture_callback+0x4ae>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001354:	2300      	movs	r3, #0
 8001356:	4d19      	ldr	r5, [pc, #100]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 8001358:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 800135a:	2e00      	cmp	r6, #0
 800135c:	d004      	beq.n	8001368 <TIM2_ch1_IP_capture_callback+0x50c>
					TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen - 1;
 800135e:	23ff      	movs	r3, #255	@ 0xff
 8001360:	1b1b      	subs	r3, r3, r4
 8001362:	b29b      	uxth	r3, r3
 8001364:	e73d      	b.n	80011e2 <TIM2_ch1_IP_capture_callback+0x386>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001366:	702e      	strb	r6, [r5, #0]
					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001368:	464b      	mov	r3, r9
 800136a:	3b01      	subs	r3, #1
 800136c:	b29b      	uxth	r3, r3
 800136e:	4699      	mov	r9, r3
 8001370:	e74f      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
							TIM16_prescaler_adjust = DO_NOTHING;
 8001372:	4d12      	ldr	r5, [pc, #72]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 8001374:	701e      	strb	r6, [r3, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 8001376:	e74c      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001378:	2108      	movs	r1, #8
 800137a:	0028      	movs	r0, r5
 800137c:	f000 fd14 	bl	8001da8 <unsigned_bitwise_modulo>
 8001380:	287f      	cmp	r0, #127	@ 0x7f
 8001382:	d8e1      	bhi.n	8001348 <TIM2_ch1_IP_capture_callback+0x4ec>
					TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 8001384:	2300      	movs	r3, #0
 8001386:	4d0d      	ldr	r5, [pc, #52]	@ (80013bc <TIM2_ch1_IP_capture_callback+0x560>)
 8001388:	702b      	strb	r3, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 800138a:	2e00      	cmp	r6, #0
 800138c:	d100      	bne.n	8001390 <TIM2_ch1_IP_capture_callback+0x534>
 800138e:	e740      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
				TIM16_final_start_value_to_be_loaded = 256 - manipulated_period_lengthen;
 8001390:	3301      	adds	r3, #1
 8001392:	33ff      	adds	r3, #255	@ 0xff
 8001394:	1b1b      	subs	r3, r3, r4
 8001396:	b29b      	uxth	r3, r3
 8001398:	e723      	b.n	80011e2 <TIM2_ch1_IP_capture_callback+0x386>
						if(symmetry_type_for_halfcycle == SHORTEN){
 800139a:	2e00      	cmp	r6, #0
 800139c:	d19c      	bne.n	80012d8 <TIM2_ch1_IP_capture_callback+0x47c>
							TIM16_prescaler_adjust_to_be_loaded = DO_NOTHING;
 800139e:	702e      	strb	r6, [r5, #0]
		if(symmetry_type_for_halfcycle == SHORTEN){
 80013a0:	e737      	b.n	8001212 <TIM2_ch1_IP_capture_callback+0x3b6>
			interrupt_period = interrupt_period >> 4;
 80013a2:	8822      	ldrh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80013a4:	490b      	ldr	r1, [pc, #44]	@ (80013d4 <TIM2_ch1_IP_capture_callback+0x578>)
			interrupt_period = interrupt_period >> 4;
 80013a6:	0912      	lsrs	r2, r2, #4
 80013a8:	8022      	strh	r2, [r4, #0]
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80013aa:	8822      	ldrh	r2, [r4, #0]
 80013ac:	1a9b      	subs	r3, r3, r2
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 4;
 80013ae:	2201      	movs	r2, #1
			TIM16_raw_start_value_to_be_loaded = 256 - interrupt_period;
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	800b      	strh	r3, [r1, #0]
			TIM16_base_prescaler_divisors_index_to_be_loaded = FASTEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX - 4;
 80013b4:	4b03      	ldr	r3, [pc, #12]	@ (80013c4 <TIM2_ch1_IP_capture_callback+0x568>)
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e598      	b.n	8000eec <TIM2_ch1_IP_capture_callback+0x90>
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	20000966 	.word	0x20000966
 80013c0:	20000962 	.word	0x20000962
 80013c4:	20000960 	.word	0x20000960
 80013c8:	2000095c 	.word	0x2000095c
 80013cc:	20000990 	.word	0x20000990
 80013d0:	20000992 	.word	0x20000992
 80013d4:	20000964 	.word	0x20000964
 80013d8:	2000095e 	.word	0x2000095e
 80013dc:	000003ff 	.word	0x000003ff

080013e0 <TIM2_ch1_overflow_callback>:

void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){

	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <TIM2_ch1_overflow_callback+0x1c>)
 80013e2:	781a      	ldrb	r2, [r3, #0]
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d000      	beq.n	80013ea <TIM2_ch1_overflow_callback+0xa>
		input_capture_measurement_is_ongoing = NO;
		input_capture_event = FIRST;

		//do nothing
	}
}
 80013e8:	4770      	bx	lr
	if(input_capture_measurement_is_ongoing == YES && input_capture_event == SECOND){
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <TIM2_ch1_overflow_callback+0x20>)
 80013ec:	7811      	ldrb	r1, [r2, #0]
 80013ee:	2901      	cmp	r1, #1
 80013f0:	d1fa      	bne.n	80013e8 <TIM2_ch1_overflow_callback+0x8>
		input_capture_measurement_is_ongoing = NO;
 80013f2:	2100      	movs	r1, #0
 80013f4:	7019      	strb	r1, [r3, #0]
		input_capture_event = FIRST;
 80013f6:	7011      	strb	r1, [r2, #0]
}
 80013f8:	e7f6      	b.n	80013e8 <TIM2_ch1_overflow_callback+0x8>
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	2000096c 	.word	0x2000096c
 8001400:	20000974 	.word	0x20000974

08001404 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_1_callback(TIM_HandleTypeDef *htim){

	//force update of timers to sync the wave to the TIM3 reelapse interrupt

	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8001404:	2101      	movs	r1, #1
 8001406:	4a19      	ldr	r2, [pc, #100]	@ (800146c <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x68>)
void TIM3_ch1_IP_capture_measurement_reelapse_1_callback(TIM_HandleTypeDef *htim){
 8001408:	b510      	push	{r4, lr}
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 800140a:	6953      	ldr	r3, [r2, #20]
 800140c:	430b      	orrs	r3, r1
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 800140e:	4918      	ldr	r1, [pc, #96]	@ (8001470 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x6c>)
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8001410:	6153      	str	r3, [r2, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 8001412:	4a18      	ldr	r2, [pc, #96]	@ (8001474 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x70>)
 8001414:	880b      	ldrh	r3, [r1, #0]
 8001416:	6814      	ldr	r4, [r2, #0]
 8001418:	b29b      	uxth	r3, r3
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 800141a:	4a17      	ldr	r2, [pc, #92]	@ (8001478 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x74>)
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_to_be_loaded); //this line must go here, or at least very near the beginning!
 800141c:	6263      	str	r3, [r4, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 800141e:	7810      	ldrb	r0, [r2, #0]
 8001420:	4b16      	ldr	r3, [pc, #88]	@ (800147c <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x78>)
 8001422:	0040      	lsls	r0, r0, #1
 8001424:	5ac3      	ldrh	r3, [r0, r3]
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty_to_be_loaded); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8001426:	4816      	ldr	r0, [pc, #88]	@ (8001480 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x7c>)
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_to_be_loaded]) - 1); //have to take one off the divisor
 8001428:	3b01      	subs	r3, #1
 800142a:	62a3      	str	r3, [r4, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, duty_to_be_loaded); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800142c:	4b15      	ldr	r3, [pc, #84]	@ (8001484 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x80>)
 800142e:	6800      	ldr	r0, [r0, #0]
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	6343      	str	r3, [r0, #52]	@ 0x34

	input_capture_measurement_reelapse_1_is_ongoing = NO;
 8001436:	2000      	movs	r0, #0
 8001438:	4b13      	ldr	r3, [pc, #76]	@ (8001488 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x84>)
 800143a:	7018      	strb	r0, [r3, #0]

	current_index = current_index_to_be_loaded;
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x88>)
 800143e:	4814      	ldr	r0, [pc, #80]	@ (8001490 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x8c>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	8003      	strh	r3, [r0, #0]
	current_halfcycle = current_halfcycle_to_be_loaded;
 8001446:	4b13      	ldr	r3, [pc, #76]	@ (8001494 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x90>)
 8001448:	4813      	ldr	r0, [pc, #76]	@ (8001498 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x94>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b2db      	uxtb	r3, r3
 800144e:	7003      	strb	r3, [r0, #0]
	current_quadrant = current_quadrant_to_be_loaded;
 8001450:	4b12      	ldr	r3, [pc, #72]	@ (800149c <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x98>)
 8001452:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0x9c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	7003      	strb	r3, [r0, #0]

	//set the locked values to the 'to be loaded' values such that the TIM16 continually loads these if the speed pot is disabled
	TIM16_final_start_value_locked = TIM16_final_start_value_to_be_loaded;
 800145a:	880b      	ldrh	r3, [r1, #0]
 800145c:	4911      	ldr	r1, [pc, #68]	@ (80014a4 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0xa0>)
 800145e:	b29b      	uxth	r3, r3
 8001460:	800b      	strh	r3, [r1, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index_to_be_loaded;
 8001462:	7813      	ldrb	r3, [r2, #0]
 8001464:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <TIM3_ch1_IP_capture_measurement_reelapse_1_callback+0xa4>)
 8001466:	b2db      	uxtb	r3, r3
 8001468:	7013      	strb	r3, [r2, #0]
}
 800146a:	bd10      	pop	{r4, pc}
 800146c:	40014400 	.word	0x40014400
 8001470:	20000962 	.word	0x20000962
 8001474:	200002f4 	.word	0x200002f4
 8001478:	2000095c 	.word	0x2000095c
 800147c:	08005634 	.word	0x08005634
 8001480:	200003b0 	.word	0x200003b0
 8001484:	2000095e 	.word	0x2000095e
 8001488:	2000096a 	.word	0x2000096a
 800148c:	20000958 	.word	0x20000958
 8001490:	20000992 	.word	0x20000992
 8001494:	2000095b 	.word	0x2000095b
 8001498:	20000991 	.word	0x20000991
 800149c:	2000095a 	.word	0x2000095a
 80014a0:	20000990 	.word	0x20000990
 80014a4:	20000978 	.word	0x20000978
 80014a8:	20000984 	.word	0x20000984

080014ac <main>:

//INCLUDES
#include "system.h"

int main(void)
{
 80014ac:	b510      	push	{r4, lr}
	System_Init();
 80014ae:	f7ff fa8d 	bl	80009cc <System_Init>

	//duty_delay_line_read_pointer_offset = 255; //phase difference between the two waves

	current_depth = 255; //whilst depth pot is being used as delay adjust
 80014b2:	22ff      	movs	r2, #255	@ 0xff

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80014b4:	2101      	movs	r1, #1
	current_depth = 255; //whilst depth pot is being used as delay adjust
 80014b6:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <main+0xac>)

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80014b8:	4c28      	ldr	r4, [pc, #160]	@ (800155c <main+0xb0>)
	current_depth = 255; //whilst depth pot is being used as delay adjust
 80014ba:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <main+0xb4>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80014be:	0020      	movs	r0, r4
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68d3      	ldr	r3, [r2, #12]
 80014c4:	430b      	orrs	r3, r1
 80014c6:	60d3      	str	r3, [r2, #12]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80014c8:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <main+0xb8>)
 80014ca:	4927      	ldr	r1, [pc, #156]	@ (8001568 <main+0xbc>)
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	f001 f8b3 	bl	8002638 <HAL_ADC_Start_DMA>

	//WAIT
	while(initial_ADC_conversion_complete == NO){}; //wait while first ADC conversion is ongoing
 80014d2:	4a26      	ldr	r2, [pc, #152]	@ (800156c <main+0xc0>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0fc      	beq.n	80014d4 <main+0x28>

	HAL_ADC_Stop_DMA(&hadc1);
 80014da:	0020      	movs	r0, r4
 80014dc:	f001 f94a 	bl	8002774 <HAL_ADC_Stop_DMA>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_Oscillator();
 80014e0:	f000 f9ec 	bl	80018bc <Start_PWM_Gen_Timer_Main_Oscillator>
	Start_PWM_Gen_Timer_Secondary_Oscillator();
 80014e4:	f000 fa02 	bl	80018ec <Start_PWM_Gen_Timer_Secondary_Oscillator>
	Start_Freq_Gen_Timer();
 80014e8:	f000 fa18 	bl	800191c <Start_Freq_Gen_Timer>
	HAL_GPIO_WritePin(TAP_TEMPO_TOGGLE_GPIO_Port, TAP_TEMPO_TOGGLE_Pin, 1);
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	20a0      	movs	r0, #160	@ 0xa0
 80014f0:	2201      	movs	r2, #1
 80014f2:	00c9      	lsls	r1, r1, #3
 80014f4:	05c0      	lsls	r0, r0, #23
 80014f6:	f001 fc41 	bl	8002d7c <HAL_GPIO_WritePin>
	Start_Input_Capture_Timer();
 80014fa:	f000 fa33 	bl	8001964 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80014fe:	f000 f9d9 	bl	80018b4 <Global_Interrupt_Enable>

	HAL_Delay(4000);
 8001502:	20fa      	movs	r0, #250	@ 0xfa
 8001504:	0100      	lsls	r0, r0, #4
 8001506:	f000 fccd 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(TAP_TEMPO_TOGGLE_GPIO_Port, TAP_TEMPO_TOGGLE_Pin, 0);
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	20a0      	movs	r0, #160	@ 0xa0
 800150e:	2200      	movs	r2, #0
 8001510:	00c9      	lsls	r1, r1, #3
 8001512:	05c0      	lsls	r0, r0, #23
 8001514:	f001 fc32 	bl	8002d7c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001518:	2032      	movs	r0, #50	@ 0x32
 800151a:	f000 fcc3 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(TAP_TEMPO_TOGGLE_GPIO_Port, TAP_TEMPO_TOGGLE_Pin, 1);
 800151e:	2180      	movs	r1, #128	@ 0x80
 8001520:	20a0      	movs	r0, #160	@ 0xa0
 8001522:	2201      	movs	r2, #1
 8001524:	00c9      	lsls	r1, r1, #3
 8001526:	05c0      	lsls	r0, r0, #23
 8001528:	f001 fc28 	bl	8002d7c <HAL_GPIO_WritePin>
	HAL_Delay(550);
 800152c:	4810      	ldr	r0, [pc, #64]	@ (8001570 <main+0xc4>)
 800152e:	f000 fcb9 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(TAP_TEMPO_TOGGLE_GPIO_Port, TAP_TEMPO_TOGGLE_Pin, 0);
 8001532:	2180      	movs	r1, #128	@ 0x80
 8001534:	20a0      	movs	r0, #160	@ 0xa0
 8001536:	2200      	movs	r2, #0
 8001538:	00c9      	lsls	r1, r1, #3
 800153a:	05c0      	lsls	r0, r0, #23
 800153c:	f001 fc1e 	bl	8002d7c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001540:	2032      	movs	r0, #50	@ 0x32
 8001542:	f000 fcaf 	bl	8001ea4 <HAL_Delay>
	HAL_GPIO_WritePin(TAP_TEMPO_TOGGLE_GPIO_Port, TAP_TEMPO_TOGGLE_Pin, 1);
 8001546:	2180      	movs	r1, #128	@ 0x80
 8001548:	20a0      	movs	r0, #160	@ 0xa0
 800154a:	2201      	movs	r2, #1
 800154c:	00c9      	lsls	r1, r1, #3
 800154e:	05c0      	lsls	r0, r0, #23
 8001550:	f001 fc14 	bl	8002d7c <HAL_GPIO_WritePin>


	while (1)
 8001554:	e7fe      	b.n	8001554 <main+0xa8>
 8001556:	46c0      	nop			@ (mov r8, r8)
 8001558:	20000998 	.word	0x20000998
 800155c:	200004c8 	.word	0x200004c8
 8001560:	20000238 	.word	0x20000238
 8001564:	08005630 	.word	0x08005630
 8001568:	2000097c 	.word	0x2000097c
 800156c:	2000097b 	.word	0x2000097b
 8001570:	00000226 	.word	0x00000226

08001574 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	2201      	movs	r2, #1
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_MspInit+0x2c>)
{
 8001578:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800157c:	4311      	orrs	r1, r2
 800157e:	6419      	str	r1, [r3, #64]	@ 0x40
 8001580:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001582:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800158c:	0549      	lsls	r1, r1, #21
 800158e:	430a      	orrs	r2, r1
 8001590:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001594:	400b      	ands	r3, r1
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159a:	b002      	add	sp, #8
 800159c:	4770      	bx	lr
 800159e:	46c0      	nop			@ (mov r8, r8)
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b530      	push	{r4, r5, lr}
 80015a6:	0004      	movs	r4, r0
 80015a8:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	2214      	movs	r2, #20
 80015ac:	2100      	movs	r1, #0
 80015ae:	a802      	add	r0, sp, #8
 80015b0:	f004 f806 	bl	80055c0 <memset>
  if(hadc->Instance==ADC1)
 80015b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <HAL_ADC_MspInit+0x8c>)
 80015b6:	6822      	ldr	r2, [r4, #0]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d001      	beq.n	80015c0 <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80015bc:	b009      	add	sp, #36	@ 0x24
 80015be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_ADC_MspInit+0x90>)
 80015c4:	0349      	lsls	r1, r1, #13
 80015c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_ADC_CLK_ENABLE();
 80015ca:	430a      	orrs	r2, r1
 80015cc:	641a      	str	r2, [r3, #64]	@ 0x40
 80015ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_ADC_CLK_ENABLE();
 80015d2:	400a      	ands	r2, r1
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	2201      	movs	r2, #1
 80015da:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80015dc:	4311      	orrs	r1, r2
 80015de:	6359      	str	r1, [r3, #52]	@ 0x34
 80015e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	401a      	ands	r2, r3
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015ea:	2233      	movs	r2, #51	@ 0x33
 80015ec:	2303      	movs	r3, #3
 80015ee:	9202      	str	r2, [sp, #8]
 80015f0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f001 fad1 	bl	8002b98 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80015f6:	4d10      	ldr	r5, [pc, #64]	@ (8001638 <HAL_ADC_MspInit+0x94>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Instance = DMA1_Channel1;
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <HAL_ADC_MspInit+0x98>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fc:	612a      	str	r2, [r5, #16]
    hdma_adc1.Instance = DMA1_Channel1;
 80015fe:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001600:	2305      	movs	r3, #5
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001602:	3280      	adds	r2, #128	@ 0x80
 8001604:	616a      	str	r2, [r5, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001606:	2280      	movs	r2, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001608:	606b      	str	r3, [r5, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	2300      	movs	r3, #0
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160c:	00d2      	lsls	r2, r2, #3
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800160e:	0028      	movs	r0, r5
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001610:	60ab      	str	r3, [r5, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001612:	60eb      	str	r3, [r5, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001614:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001616:	61eb      	str	r3, [r5, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001618:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161a:	f001 f947 	bl	80028ac <HAL_DMA_Init>
 800161e:	2800      	cmp	r0, #0
 8001620:	d102      	bne.n	8001628 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001622:	6525      	str	r5, [r4, #80]	@ 0x50
 8001624:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001626:	e7c9      	b.n	80015bc <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001628:	f7ff f9ce 	bl	80009c8 <Error_Handler>
 800162c:	e7f9      	b.n	8001622 <HAL_ADC_MspInit+0x7e>
 800162e:	46c0      	nop			@ (mov r8, r8)
 8001630:	40012400 	.word	0x40012400
 8001634:	40021000 	.word	0x40021000
 8001638:	2000046c 	.word	0x2000046c
 800163c:	40020008 	.word	0x40020008

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b510      	push	{r4, lr}
 8001642:	0004      	movs	r4, r0
 8001644:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	2214      	movs	r2, #20
 8001648:	2100      	movs	r1, #0
 800164a:	a806      	add	r0, sp, #24
 800164c:	f003 ffb8 	bl	80055c0 <memset>
  if(htim_base->Instance==TIM2)
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	6823      	ldr	r3, [r4, #0]
 8001654:	05d2      	lsls	r2, r2, #23
 8001656:	4293      	cmp	r3, r2
 8001658:	d015      	beq.n	8001686 <HAL_TIM_Base_MspInit+0x46>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800165a:	4a31      	ldr	r2, [pc, #196]	@ (8001720 <HAL_TIM_Base_MspInit+0xe0>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d039      	beq.n	80016d4 <HAL_TIM_Base_MspInit+0x94>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  if(htim_base->Instance==TIM14)
 8001660:	4a30      	ldr	r2, [pc, #192]	@ (8001724 <HAL_TIM_Base_MspInit+0xe4>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
  else if(htim_base->Instance==TIM16)
 8001666:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <HAL_TIM_Base_MspInit+0xe8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d046      	beq.n	80016fa <HAL_TIM_Base_MspInit+0xba>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800166c:	b00c      	add	sp, #48	@ 0x30
 800166e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	4b2e      	ldr	r3, [pc, #184]	@ (800172c <HAL_TIM_Base_MspInit+0xec>)
 8001674:	0209      	lsls	r1, r1, #8
 8001676:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001678:	430a      	orrs	r2, r1
 800167a:	641a      	str	r2, [r3, #64]	@ 0x40
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	400b      	ands	r3, r1
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	9b04      	ldr	r3, [sp, #16]
 8001684:	e7f2      	b.n	800166c <HAL_TIM_Base_MspInit+0x2c>
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001686:	2201      	movs	r2, #1
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_TIM_Base_MspInit+0xec>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800168a:	2080      	movs	r0, #128	@ 0x80
  __HAL_RCC_TIM2_CLK_ENABLE();
 800168c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800168e:	0200      	lsls	r0, r0, #8
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001690:	4311      	orrs	r1, r2
 8001692:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8001694:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001696:	4011      	ands	r1, r2
 8001698:	9101      	str	r1, [sp, #4]
 800169a:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800169e:	4311      	orrs	r1, r2
 80016a0:	6359      	str	r1, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016a2:	2102      	movs	r1, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016a6:	9006      	str	r0, [sp, #24]
 80016a8:	9107      	str	r1, [sp, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	4013      	ands	r3, r2
 80016ac:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ae:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80016b2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	a906      	add	r1, sp, #24
 80016b6:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80016b8:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ba:	9208      	str	r2, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016bc:	f001 fa6c 	bl	8002b98 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2100      	movs	r1, #0
 80016c4:	200f      	movs	r0, #15
 80016c6:	f001 f8a1 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f001 f8c8 	bl	8002860 <HAL_NVIC_EnableIRQ>
  if(htim_base->Instance==TIM14)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	e7c5      	b.n	8001660 <HAL_TIM_Base_MspInit+0x20>
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016d4:	2302      	movs	r3, #2
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <HAL_TIM_Base_MspInit+0xec>)
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016d8:	2010      	movs	r0, #16
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016da:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016dc:	4319      	orrs	r1, r3
 80016de:	63d1      	str	r1, [r2, #60]	@ 0x3c
 80016e0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016e2:	2100      	movs	r1, #0
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016e4:	4013      	ands	r3, r2
 80016e6:	9303      	str	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
  __HAL_RCC_TIM3_CLK_ENABLE();
 80016ea:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80016ec:	f001 f88e 	bl	800280c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80016f0:	2010      	movs	r0, #16
 80016f2:	f001 f8b5 	bl	8002860 <HAL_NVIC_EnableIRQ>
  if(htim_base->Instance==TIM14)
 80016f6:	6823      	ldr	r3, [r4, #0]
 80016f8:	e7b2      	b.n	8001660 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016fa:	2180      	movs	r1, #128	@ 0x80
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_TIM_Base_MspInit+0xec>)
 80016fe:	0289      	lsls	r1, r1, #10
 8001700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001702:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001704:	430a      	orrs	r2, r1
 8001706:	641a      	str	r2, [r3, #64]	@ 0x40
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800170a:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 800170c:	400b      	ands	r3, r1
 800170e:	9305      	str	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001710:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001712:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001714:	f001 f87a 	bl	800280c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001718:	2015      	movs	r0, #21
 800171a:	f001 f8a1 	bl	8002860 <HAL_NVIC_EnableIRQ>
}
 800171e:	e7a5      	b.n	800166c <HAL_TIM_Base_MspInit+0x2c>
 8001720:	40000400 	.word	0x40000400
 8001724:	40002000 	.word	0x40002000
 8001728:	40014400 	.word	0x40014400
 800172c:	40021000 	.word	0x40021000

08001730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001730:	b510      	push	{r4, lr}
 8001732:	0004      	movs	r4, r0
 8001734:	b088      	sub	sp, #32
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001736:	2214      	movs	r2, #20
 8001738:	2100      	movs	r1, #0
 800173a:	a802      	add	r0, sp, #8
 800173c:	f003 ff40 	bl	80055c0 <memset>
    if(htim->Instance==TIM1)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	4a16      	ldr	r2, [pc, #88]	@ (800179c <HAL_TIM_MspPostInit+0x6c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d004      	beq.n	8001752 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM14)
 8001748:	4a15      	ldr	r2, [pc, #84]	@ (80017a0 <HAL_TIM_MspPostInit+0x70>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d017      	beq.n	800177e <HAL_TIM_MspPostInit+0x4e>

  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }
}
 800174e:	b008      	add	sp, #32
 8001750:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2301      	movs	r3, #1
 8001754:	4a13      	ldr	r2, [pc, #76]	@ (80017a4 <HAL_TIM_MspPostInit+0x74>)
 8001756:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001758:	4319      	orrs	r1, r3
 800175a:	6351      	str	r1, [r2, #52]	@ 0x34
 800175c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800175e:	4013      	ands	r3, r2
 8001760:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001762:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001766:	2302      	movs	r3, #2
 8001768:	0112      	lsls	r2, r2, #4
 800176a:	9202      	str	r2, [sp, #8]
 800176c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800176e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	20a0      	movs	r0, #160	@ 0xa0
 8001772:	a902      	add	r1, sp, #8
 8001774:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001776:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f001 fa0e 	bl	8002b98 <HAL_GPIO_Init>
}
 800177c:	e7e7      	b.n	800174e <HAL_TIM_MspPostInit+0x1e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2301      	movs	r3, #1
 8001780:	4a08      	ldr	r2, [pc, #32]	@ (80017a4 <HAL_TIM_MspPostInit+0x74>)
 8001782:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001784:	4319      	orrs	r1, r3
 8001786:	6351      	str	r1, [r2, #52]	@ 0x34
 8001788:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800178a:	4013      	ands	r3, r2
 800178c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800178e:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001790:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001792:	2302      	movs	r3, #2
 8001794:	9202      	str	r2, [sp, #8]
 8001796:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001798:	2304      	movs	r3, #4
 800179a:	e7e9      	b.n	8001770 <HAL_TIM_MspPostInit+0x40>
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40002000 	.word	0x40002000
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_TIM_PWM_MspInit>:
}



void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a8:	b510      	push	{r4, lr}
 80017aa:	0004      	movs	r4, r0
 80017ac:	b08c      	sub	sp, #48	@ 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ae:	2228      	movs	r2, #40	@ 0x28
 80017b0:	2100      	movs	r1, #0
 80017b2:	a802      	add	r0, sp, #8
 80017b4:	f003 ff04 	bl	80055c0 <memset>
  if(htim_pwm->Instance==TIM1)
 80017b8:	4b0d      	ldr	r3, [pc, #52]	@ (80017f0 <HAL_TIM_PWM_MspInit+0x48>)
 80017ba:	6822      	ldr	r2, [r4, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_TIM_PWM_MspInit+0x1c>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80017c0:	b00c      	add	sp, #48	@ 0x30
 80017c2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017c4:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c6:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80017c8:	039b      	lsls	r3, r3, #14
 80017ca:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f001 fe9e 	bl	800350c <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d10a      	bne.n	80017ea <HAL_TIM_PWM_MspInit+0x42>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017d4:	2180      	movs	r1, #128	@ 0x80
 80017d6:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017d8:	0109      	lsls	r1, r1, #4
 80017da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017dc:	430a      	orrs	r2, r1
 80017de:	641a      	str	r2, [r3, #64]	@ 0x40
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	400b      	ands	r3, r1
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	9b01      	ldr	r3, [sp, #4]
}
 80017e8:	e7ea      	b.n	80017c0 <HAL_TIM_PWM_MspInit+0x18>
      Error_Handler();
 80017ea:	f7ff f8ed 	bl	80009c8 <Error_Handler>
 80017ee:	e7f1      	b.n	80017d4 <HAL_TIM_PWM_MspInit+0x2c>
 80017f0:	40012c00 	.word	0x40012c00
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	0004      	movs	r4, r0
 80017fc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fe:	2214      	movs	r2, #20
 8001800:	2100      	movs	r1, #0
 8001802:	a802      	add	r0, sp, #8
 8001804:	f003 fedc 	bl	80055c0 <memset>
  if(huart->Instance==USART2)
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <HAL_UART_MspInit+0x58>)
 800180a:	6822      	ldr	r2, [r4, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001810:	b008      	add	sp, #32
 8001812:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	4b0f      	ldr	r3, [pc, #60]	@ (8001854 <HAL_UART_MspInit+0x5c>)
 8001818:	0289      	lsls	r1, r1, #10
 800181a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800181c:	200c      	movs	r0, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800181e:	430a      	orrs	r2, r1
 8001820:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001822:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001824:	400a      	ands	r2, r1
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2201      	movs	r2, #1
 800182c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800182e:	4311      	orrs	r1, r2
 8001830:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001832:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8001836:	9002      	str	r0, [sp, #8]
 8001838:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4013      	ands	r3, r2
 800183e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	a902      	add	r1, sp, #8
 8001842:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001844:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001846:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f001 f9a6 	bl	8002b98 <HAL_GPIO_Init>
}
 800184c:	e7e0      	b.n	8001810 <HAL_UART_MspInit+0x18>
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	40004400 	.word	0x40004400
 8001854:	40021000 	.word	0x40021000

08001858 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001858:	e7fe      	b.n	8001858 <NMI_Handler>
 800185a:	46c0      	nop			@ (mov r8, r8)

0800185c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <HardFault_Handler>
 800185e:	46c0      	nop			@ (mov r8, r8)

08001860 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001860:	4770      	bx	lr
 8001862:	46c0      	nop			@ (mov r8, r8)

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001864:	4770      	bx	lr
 8001866:	46c0      	nop			@ (mov r8, r8)

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186a:	f000 fb09 	bl	8001e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186e:	bd10      	pop	{r4, pc}

08001870 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001870:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001872:	4802      	ldr	r0, [pc, #8]	@ (800187c <DMA1_Channel1_IRQHandler+0xc>)
 8001874:	f001 f934 	bl	8002ae0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001878:	bd10      	pop	{r4, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	2000046c 	.word	0x2000046c

08001880 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
 8001880:	4770      	bx	lr
 8001882:	46c0      	nop			@ (mov r8, r8)

08001884 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001884:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001886:	4802      	ldr	r0, [pc, #8]	@ (8001890 <TIM16_IRQHandler+0xc>)
 8001888:	f002 fcee 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800188c:	bd10      	pop	{r4, pc}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	200002f4 	.word	0x200002f4

08001894 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001894:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim2);
 8001896:	4802      	ldr	r0, [pc, #8]	@ (80018a0 <TIM2_IRQHandler+0xc>)
 8001898:	f002 fce6 	bl	8004268 <HAL_TIM_IRQHandler>

}
 800189c:	bd10      	pop	{r4, pc}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	20000238 	.word	0x20000238

080018a4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80018a4:	b510      	push	{r4, lr}
  HAL_TIM_IRQHandler(&htim3);
 80018a6:	4802      	ldr	r0, [pc, #8]	@ (80018b0 <TIM3_IRQHandler+0xc>)
 80018a8:	f002 fcde 	bl	8004268 <HAL_TIM_IRQHandler>

}
 80018ac:	bd10      	pop	{r4, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	2000017c 	.word	0x2000017c

080018b4 <Global_Interrupt_Enable>:
  __ASM volatile ("cpsie i" : : : "memory");
 80018b4:	b662      	cpsie	i
//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){

	__enable_irq();
	return 1;
}
 80018b6:	2001      	movs	r0, #1
 80018b8:	4770      	bx	lr
 80018ba:	46c0      	nop			@ (mov r8, r8)

080018bc <Start_PWM_Gen_Timer_Main_Oscillator>:
	__disable_irq();
	return 1;
}

uint8_t Start_PWM_Gen_Timer_Main_Oscillator(void)
{
 80018bc:	b570      	push	{r4, r5, r6, lr}
}

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){

	uint8_t ok_AND = 0;
	ok_AND = HAL_TIM_Base_Start(TIM);
 80018be:	4d0a      	ldr	r5, [pc, #40]	@ (80018e8 <Start_PWM_Gen_Timer_Main_Oscillator+0x2c>)
 80018c0:	0028      	movs	r0, r5
 80018c2:	f001 fffb 	bl	80038bc <HAL_TIM_Base_Start>
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80018c6:	2100      	movs	r1, #0
	ok_AND = HAL_TIM_Base_Start(TIM);
 80018c8:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80018ca:	0028      	movs	r0, r5
 80018cc:	f002 fae8 	bl	8003ea0 <HAL_TIM_PWM_Start>
 80018d0:	4004      	ands	r4, r0
 80018d2:	b2e4      	uxtb	r4, r4

	if(ok_AND != HAL_OK){
 80018d4:	2c00      	cmp	r4, #0
 80018d6:	d101      	bne.n	80018dc <Start_PWM_Gen_Timer_Main_Oscillator+0x20>
}
 80018d8:	0020      	movs	r0, r4
 80018da:	bd70      	pop	{r4, r5, r6, pc}

		Error_Handler();
 80018dc:	f7ff f874 	bl	80009c8 <Error_Handler>
		Error_Handler();
 80018e0:	f7ff f872 	bl	80009c8 <Error_Handler>
 80018e4:	e7f8      	b.n	80018d8 <Start_PWM_Gen_Timer_Main_Oscillator+0x1c>
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	200003b0 	.word	0x200003b0

080018ec <Start_PWM_Gen_Timer_Secondary_Oscillator>:
{
 80018ec:	b570      	push	{r4, r5, r6, lr}
	ok_AND = HAL_TIM_Base_Start(TIM);
 80018ee:	4d0a      	ldr	r5, [pc, #40]	@ (8001918 <Start_PWM_Gen_Timer_Secondary_Oscillator+0x2c>)
 80018f0:	0028      	movs	r0, r5
 80018f2:	f001 ffe3 	bl	80038bc <HAL_TIM_Base_Start>
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80018f6:	210c      	movs	r1, #12
	ok_AND = HAL_TIM_Base_Start(TIM);
 80018f8:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 80018fa:	0028      	movs	r0, r5
 80018fc:	f002 fad0 	bl	8003ea0 <HAL_TIM_PWM_Start>
 8001900:	4004      	ands	r4, r0
 8001902:	b2e4      	uxtb	r4, r4
	if(ok_AND != HAL_OK){
 8001904:	2c00      	cmp	r4, #0
 8001906:	d101      	bne.n	800190c <Start_PWM_Gen_Timer_Secondary_Oscillator+0x20>
}
 8001908:	0020      	movs	r0, r4
 800190a:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 800190c:	f7ff f85c 	bl	80009c8 <Error_Handler>
		Error_Handler();
 8001910:	f7ff f85a 	bl	80009c8 <Error_Handler>
 8001914:	e7f8      	b.n	8001908 <Start_PWM_Gen_Timer_Secondary_Oscillator+0x1c>
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	200000c0 	.word	0x200000c0

0800191c <Start_Freq_Gen_Timer>:
{
 800191c:	b510      	push	{r4, lr}
	return ok_AND;
}

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 800191e:	2100      	movs	r1, #0
 8001920:	4805      	ldr	r0, [pc, #20]	@ (8001938 <Start_Freq_Gen_Timer+0x1c>)
 8001922:	f002 f8f3 	bl	8003b0c <HAL_TIM_OC_Start_IT>
 8001926:	1e04      	subs	r4, r0, #0
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8001928:	d101      	bne.n	800192e <Start_Freq_Gen_Timer+0x12>
}
 800192a:	0020      	movs	r0, r4
 800192c:	bd10      	pop	{r4, pc}

		Error_Handler();
 800192e:	f7ff f84b 	bl	80009c8 <Error_Handler>
		Error_Handler();
 8001932:	f7ff f849 	bl	80009c8 <Error_Handler>
 8001936:	e7f8      	b.n	800192a <Start_Freq_Gen_Timer+0xe>
 8001938:	200002f4 	.word	0x200002f4

0800193c <Start_OC_TIM>:
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800193c:	b510      	push	{r4, lr}
	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 800193e:	f002 f8e5 	bl	8003b0c <HAL_TIM_OC_Start_IT>
 8001942:	1e04      	subs	r4, r0, #0
	if(ok != HAL_OK){
 8001944:	d101      	bne.n	800194a <Start_OC_TIM+0xe>
	}

	return ok;
}
 8001946:	0020      	movs	r0, r4
 8001948:	bd10      	pop	{r4, pc}
		Error_Handler();
 800194a:	f7ff f83d 	bl	80009c8 <Error_Handler>
 800194e:	e7fa      	b.n	8001946 <Start_OC_TIM+0xa>

08001950 <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001950:	b510      	push	{r4, lr}

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8001952:	f002 f95d 	bl	8003c10 <HAL_TIM_OC_Stop_IT>
 8001956:	1e04      	subs	r4, r0, #0

	if(ok != HAL_OK){
 8001958:	d101      	bne.n	800195e <Stop_OC_TIM+0xe>

		Error_Handler();
	}

	return ok;
}
 800195a:	0020      	movs	r0, r4
 800195c:	bd10      	pop	{r4, pc}
		Error_Handler();
 800195e:	f7ff f833 	bl	80009c8 <Error_Handler>
 8001962:	e7fa      	b.n	800195a <Stop_OC_TIM+0xa>

08001964 <Start_Input_Capture_Timer>:
	}

	return ok_AND;
}

uint8_t Start_Input_Capture_Timer(void){
 8001964:	b570      	push	{r4, r5, r6, lr}
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8001966:	4d0a      	ldr	r5, [pc, #40]	@ (8001990 <Start_Input_Capture_Timer+0x2c>)
 8001968:	0028      	movs	r0, r5
 800196a:	f001 ffd5 	bl	8003918 <HAL_TIM_Base_Start_IT>
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 800196e:	2100      	movs	r1, #0
	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8001970:	0004      	movs	r4, r0
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8001972:	0028      	movs	r0, r5
 8001974:	f002 fbc4 	bl	8004100 <HAL_TIM_IC_Start_IT>
 8001978:	4004      	ands	r4, r0
 800197a:	b2e4      	uxtb	r4, r4
	if(ok_AND != HAL_OK){
 800197c:	2c00      	cmp	r4, #0
 800197e:	d101      	bne.n	8001984 <Start_Input_Capture_Timer+0x20>

		Error_Handler();
	}

	return ok;
}
 8001980:	0020      	movs	r0, r4
 8001982:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8001984:	f7ff f820 	bl	80009c8 <Error_Handler>
		Error_Handler();
 8001988:	f7ff f81e 	bl	80009c8 <Error_Handler>
 800198c:	e7f8      	b.n	8001980 <Start_Input_Capture_Timer+0x1c>
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	20000238 	.word	0x20000238

08001994 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){

	uint32_t speed_control = 0;
	uint8_t how_many_128 = 0;

    speed_control = current_speed * NUMBER_OF_FREQUENCY_STEPS;
 8001994:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x44>)
 8001996:	881a      	ldrh	r2, [r3, #0]
 8001998:	0153      	lsls	r3, r2, #5
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	189b      	adds	r3, r3, r2
 80019a0:	009a      	lsls	r2, r3, #2
 80019a2:	189b      	adds	r3, r3, r2
    speed_control = speed_control >> 10;
 80019a4:	0a9b      	lsrs	r3, r3, #10

    //speed_control = (speed_adc_10_bit/1024)*883

        if(speed_control <= (127-12)){ //inequality is correct!
 80019a6:	2b73      	cmp	r3, #115	@ 0x73
 80019a8:	d808      	bhi.n	80019bc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x28>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>)
 80019ac:	330c      	adds	r3, #12
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	8013      	strh	r3, [r2, #0]
            TIM16_base_prescaler_divisors_index = SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX;
 80019b2:	2201      	movs	r2, #1
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x4c>)
 80019b6:	701a      	strb	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX + 1);
        }
    return 1;
}
 80019b8:	2001      	movs	r0, #1
 80019ba:	4770      	bx	lr
            speed_control_subtracted = speed_control - (127-12);
 80019bc:	3b73      	subs	r3, #115	@ 0x73
 80019be:	b29b      	uxth	r3, r3
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80019c0:	09da      	lsrs	r2, r3, #7
 80019c2:	b2d2      	uxtb	r2, r2
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 80019c4:	01d1      	lsls	r1, r2, #7
 80019c6:	1a5b      	subs	r3, r3, r1
 80019c8:	4904      	ldr	r1, [pc, #16]	@ (80019dc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>)
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	800b      	strh	r3, [r1, #0]
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + SLOWEST_SPEED_PRESCALER_DIVISORS_ARRAY_INDEX + 1);
 80019ce:	3202      	adds	r2, #2
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x4c>)
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]
 80019d6:	e7ef      	b.n	80019b8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x24>
 80019d8:	2000099a 	.word	0x2000099a
 80019dc:	2000098a 	.word	0x2000098a
 80019e0:	20000988 	.word	0x20000988

080019e4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
    }
    return 1;
}

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 80019e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e6:	b083      	sub	sp, #12

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80019e8:	466a      	mov	r2, sp
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019ea:	2300      	movs	r3, #0
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80019ec:	1d51      	adds	r1, r2, #5

		volatile uint8_t pot_rotation_corrected = 0;
 80019ee:	1d94      	adds	r4, r2, #6
		volatile uint8_t symmetry_status = CW;

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80019f0:	4db1      	ldr	r5, [pc, #708]	@ (8001cb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2d4>)
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019f2:	a801      	add	r0, sp, #4
		volatile uint8_t symmetry_status = CW;
 80019f4:	3207      	adds	r2, #7
		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019f6:	7003      	strb	r3, [r0, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 80019f8:	700b      	strb	r3, [r1, #0]
		volatile uint8_t pot_rotation_corrected = 0;
 80019fa:	7023      	strb	r3, [r4, #0]
		volatile uint8_t symmetry_status = CW;
 80019fc:	7013      	strb	r3, [r2, #0]
		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 80019fe:	682e      	ldr	r6, [r5, #0]
 8001a00:	2e7f      	cmp	r6, #127	@ 0x7f
 8001a02:	d900      	bls.n	8001a06 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x22>
			symmetry_status = CW;
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 8001a04:	2301      	movs	r3, #1
 8001a06:	7013      	strb	r3, [r2, #0]
		}

		if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8001a08:	4bac      	ldr	r3, [pc, #688]	@ (8001cbc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2d8>)
 8001a0a:	781e      	ldrb	r6, [r3, #0]
 8001a0c:	2e01      	cmp	r6, #1
 8001a0e:	d043      	beq.n	8001a98 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb4>
 8001a10:	781e      	ldrb	r6, [r3, #0]
 8001a12:	2e00      	cmp	r6, #0
 8001a14:	d040      	beq.n	8001a98 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb4>

					symmetry_type_for_halfcycle = LENGTHEN;
				}
			}
		}
		else if(current_waveshape == SQUARE_MODE){
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d100      	bne.n	8001a1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
 8001a1c:	e116      	b.n	8001c4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x268>
					symmetry_type_for_halfcycle = LENGTHEN;
				}
			}
		}

		if(symmetry_status == CW){
 8001a1e:	7813      	ldrb	r3, [r2, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d14a      	bne.n	8001aba <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xd6>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8001a24:	237f      	movs	r3, #127	@ 0x7f
 8001a26:	682a      	ldr	r2, [r5, #0]
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	7023      	strb	r3, [r4, #0]

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
		}

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	4ba3      	ldr	r3, [pc, #652]	@ (8001cc0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2dc>)
 8001a32:	006d      	lsls	r5, r5, #1
 8001a34:	881b      	ldrh	r3, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001a36:	7822      	ldrb	r2, [r4, #0]
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001a38:	1aeb      	subs	r3, r5, r3
 8001a3a:	b29b      	uxth	r3, r3
		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 8001a3c:	435a      	muls	r2, r3
 8001a3e:	b292      	uxth	r2, r2

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8001a40:	0a16      	lsrs	r6, r2, #8


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001a42:	1b9c      	subs	r4, r3, r6

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8001a44:	199b      	adds	r3, r3, r6
 8001a46:	b29b      	uxth	r3, r3
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8001a48:	b2a4      	uxth	r4, r4


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001a4a:	2bff      	cmp	r3, #255	@ 0xff
 8001a4c:	d952      	bls.n	8001af4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x110>
 8001a4e:	26ff      	movs	r6, #255	@ 0xff
 8001a50:	4016      	ands	r6, r2
 8001a52:	42ab      	cmp	r3, r5
 8001a54:	d100      	bne.n	8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x74>
 8001a56:	e0e3      	b.n	8001c20 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x23c>
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001a58:	2e80      	cmp	r6, #128	@ 0x80
 8001a5a:	d100      	bne.n	8001a5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x7a>
 8001a5c:	e0bb      	b.n	8001bd6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f2>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001a5e:	2e00      	cmp	r6, #0
 8001a60:	d100      	bne.n	8001a64 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x80>
 8001a62:	e104      	b.n	8001c6e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x28a>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001a64:	0612      	lsls	r2, r2, #24
 8001a66:	d500      	bpl.n	8001a6a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x86>
 8001a68:	e17c      	b.n	8001d64 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x380>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	401a      	ands	r2, r3
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001a6e:	085b      	lsrs	r3, r3, #1
 8001a70:	2601      	movs	r6, #1
 8001a72:	b29b      	uxth	r3, r3
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001a74:	2a00      	cmp	r2, #0
 8001a76:	d000      	beq.n	8001a7a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x96>
 8001a78:	e100      	b.n	8001c7c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x298>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001a7a:	780a      	ldrb	r2, [r1, #0]
 8001a7c:	b2d5      	uxtb	r5, r2
 8001a7e:	2a00      	cmp	r2, #0
 8001a80:	d100      	bne.n	8001a84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xa0>
 8001a82:	e106      	b.n	8001c92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
						TIM16_prescaler_adjust = DO_NOTHING;
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001a84:	780a      	ldrb	r2, [r1, #0]
 8001a86:	b2d5      	uxtb	r5, r2
 8001a88:	2a01      	cmp	r2, #1
 8001a8a:	d000      	beq.n	8001a8e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xaa>
 8001a8c:	e0dc      	b.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001a8e:	2200      	movs	r2, #0
 8001a90:	7002      	strb	r2, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001a92:	4a8c      	ldr	r2, [pc, #560]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001a94:	7015      	strb	r5, [r2, #0]
 8001a96:	e042      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001a98:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e4>)
 8001a9a:	781e      	ldrb	r6, [r3, #0]
 8001a9c:	2e00      	cmp	r6, #0
 8001a9e:	d111      	bne.n	8001ac4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
 8001aa0:	4e8a      	ldr	r6, [pc, #552]	@ (8001ccc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001aa2:	7836      	ldrb	r6, [r6, #0]
 8001aa4:	2e00      	cmp	r6, #0
 8001aa6:	d10d      	bne.n	8001ac4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe0>
				if(symmetry_status == CW){
 8001aa8:	7813      	ldrb	r3, [r2, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d000      	beq.n	8001ab0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
 8001aae:	e08f      	b.n	8001bd0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ec>
					symmetry_type_for_halfcycle = LENGTHEN;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	700b      	strb	r3, [r1, #0]
		if(symmetry_status == CW){
 8001ab4:	7813      	ldrb	r3, [r2, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0b4      	beq.n	8001a24 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x40>
			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 8001aba:	682b      	ldr	r3, [r5, #0]
 8001abc:	3b80      	subs	r3, #128	@ 0x80
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	7023      	strb	r3, [r4, #0]
 8001ac2:	e7b4      	b.n	8001a2e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4a>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001ac4:	781e      	ldrb	r6, [r3, #0]
 8001ac6:	2e01      	cmp	r6, #1
 8001ac8:	d100      	bne.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe8>
 8001aca:	e07b      	b.n	8001bc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e0>
			else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 8001acc:	781e      	ldrb	r6, [r3, #0]
 8001ace:	2e00      	cmp	r6, #0
 8001ad0:	d103      	bne.n	8001ada <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xf6>
 8001ad2:	4e7e      	ldr	r6, [pc, #504]	@ (8001ccc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001ad4:	7836      	ldrb	r6, [r6, #0]
 8001ad6:	2e01      	cmp	r6, #1
 8001ad8:	d006      	beq.n	8001ae8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x104>
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d19e      	bne.n	8001a1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
 8001ae0:	4b7a      	ldr	r3, [pc, #488]	@ (8001ccc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d19a      	bne.n	8001a1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
				if(symmetry_status == CW){
 8001ae8:	7813      	ldrb	r3, [r2, #0]
 8001aea:	b2de      	uxtb	r6, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1df      	bne.n	8001ab0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
					symmetry_type_for_halfcycle = SHORTEN;
 8001af0:	700e      	strb	r6, [r1, #0]
 8001af2:	e794      	b.n	8001a1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001af4:	25ff      	movs	r5, #255	@ 0xff
 8001af6:	4015      	ands	r5, r2
 8001af8:	2d80      	cmp	r5, #128	@ 0x80
 8001afa:	d100      	bne.n	8001afe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x11a>
 8001afc:	e08a      	b.n	8001c14 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x230>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001afe:	2d00      	cmp	r5, #0
 8001b00:	d02d      	beq.n	8001b5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x17a>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001b02:	2680      	movs	r6, #128	@ 0x80
 8001b04:	0037      	movs	r7, r6
 8001b06:	4017      	ands	r7, r2
 8001b08:	4216      	tst	r6, r2
 8001b0a:	d122      	bne.n	8001b52 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x16e>
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001b0c:	780a      	ldrb	r2, [r1, #0]
 8001b0e:	b2d5      	uxtb	r5, r2
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d000      	beq.n	8001b16 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
 8001b14:	e0fe      	b.n	8001d14 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x330>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b16:	7005      	strb	r5, [r0, #0]
				TIM16_prescaler_adjust = DO_NOTHING;
 8001b18:	2500      	movs	r5, #0
 8001b1a:	4a6a      	ldr	r2, [pc, #424]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001b1c:	7015      	strb	r5, [r2, #0]
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001b1e:	780d      	ldrb	r5, [r1, #0]
 8001b20:	2d00      	cmp	r5, #0
 8001b22:	d126      	bne.n	8001b72 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x18e>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001b24:	7803      	ldrb	r3, [r0, #0]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d139      	bne.n	8001b9e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001b2a:	3301      	adds	r3, #1

				TIM16_final_start_value = 256 - manipulated_period_shorten;
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001b2c:	33ff      	adds	r3, #255	@ 0xff
 8001b2e:	4968      	ldr	r1, [pc, #416]	@ (8001cd0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001b30:	1b1b      	subs	r3, r3, r4
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	800b      	strh	r3, [r1, #0]
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 8001b36:	7813      	ldrb	r3, [r2, #0]
 8001b38:	b2da      	uxtb	r2, r3
    if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d028      	beq.n	8001b90 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ac>
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d104      	bne.n	8001b4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x168>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 8001b42:	4b64      	ldr	r3, [pc, #400]	@ (8001cd4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f0>)
 8001b44:	4a64      	ldr	r2, [pc, #400]	@ (8001cd8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	7013      	strb	r3, [r2, #0]
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
}
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	b003      	add	sp, #12
 8001b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001b52:	2d80      	cmp	r5, #128	@ 0x80
 8001b54:	d978      	bls.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001b56:	3c01      	subs	r4, #1
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001b58:	3301      	adds	r3, #1
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001b5a:	b2a4      	uxth	r4, r4
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001b5c:	b29b      	uxth	r3, r3
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001b5e:	780a      	ldrb	r2, [r1, #0]
 8001b60:	b2d5      	uxtb	r5, r2
 8001b62:	2a00      	cmp	r2, #0
 8001b64:	d0d7      	beq.n	8001b16 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001b66:	780a      	ldrb	r2, [r1, #0]
 8001b68:	2a01      	cmp	r2, #1
 8001b6a:	d1d5      	bne.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	7002      	strb	r2, [r0, #0]
 8001b70:	e7d2      	b.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001b72:	7809      	ldrb	r1, [r1, #0]
 8001b74:	b2cc      	uxtb	r4, r1
 8001b76:	2901      	cmp	r1, #1
 8001b78:	d1dd      	bne.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001b7a:	7801      	ldrb	r1, [r0, #0]
 8001b7c:	2900      	cmp	r1, #0
 8001b7e:	d000      	beq.n	8001b82 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x19e>
 8001b80:	e08b      	b.n	8001c9a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b6>
			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001b82:	3101      	adds	r1, #1
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001b84:	31ff      	adds	r1, #255	@ 0xff
 8001b86:	1acb      	subs	r3, r1, r3
 8001b88:	4951      	ldr	r1, [pc, #324]	@ (8001cd0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	800b      	strh	r3, [r1, #0]
 8001b8e:	e7d2      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 8001b90:	4b50      	ldr	r3, [pc, #320]	@ (8001cd4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f0>)
 8001b92:	4a51      	ldr	r2, [pc, #324]	@ (8001cd8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	7013      	strb	r3, [r2, #0]
 8001b9c:	e7d6      	b.n	8001b4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x168>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001b9e:	7803      	ldrb	r3, [r0, #0]
 8001ba0:	b2d9      	uxtb	r1, r3
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d02c      	beq.n	8001c00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x21c>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001ba6:	7803      	ldrb	r3, [r0, #0]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d1c4      	bne.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001bac:	4b4b      	ldr	r3, [pc, #300]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	07db      	lsls	r3, r3, #31
 8001bb2:	d500      	bpl.n	8001bb6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d2>
 8001bb4:	e0c1      	b.n	8001d3a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x356>
				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001bb6:	2380      	movs	r3, #128	@ 0x80
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	4945      	ldr	r1, [pc, #276]	@ (8001cd0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001bbc:	1b1b      	subs	r3, r3, r4
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	800b      	strh	r3, [r1, #0]
 8001bc2:	e7b8      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001bc4:	4e41      	ldr	r6, [pc, #260]	@ (8001ccc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e8>)
 8001bc6:	7836      	ldrb	r6, [r6, #0]
 8001bc8:	2e01      	cmp	r6, #1
 8001bca:	d000      	beq.n	8001bce <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ea>
 8001bcc:	e77e      	b.n	8001acc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xe8>
 8001bce:	e76b      	b.n	8001aa8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>
					symmetry_type_for_halfcycle = SHORTEN;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	700b      	strb	r3, [r1, #0]
 8001bd4:	e723      	b.n	8001a1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a>
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	0017      	movs	r7, r2
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001bda:	3301      	adds	r3, #1
 8001bdc:	b29b      	uxth	r3, r3
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001bde:	3c01      	subs	r4, #1
 8001be0:	b2a4      	uxth	r4, r4
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001be2:	085e      	lsrs	r6, r3, #1
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001be4:	401f      	ands	r7, r3
 8001be6:	421a      	tst	r2, r3
 8001be8:	d000      	beq.n	8001bec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x208>
 8001bea:	e07b      	b.n	8001ce4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001bec:	780b      	ldrb	r3, [r1, #0]
 8001bee:	b2dd      	uxtb	r5, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d000      	beq.n	8001bf6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
 8001bf4:	e094      	b.n	8001d20 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001bf6:	4a33      	ldr	r2, [pc, #204]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001bf8:	7005      	strb	r5, [r0, #0]
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001bfa:	0033      	movs	r3, r6
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001bfc:	7015      	strb	r5, [r2, #0]
 8001bfe:	e78e      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001c00:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	4219      	tst	r1, r3
 8001c06:	d0d6      	beq.n	8001bb6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1d2>
				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 8001c08:	23ff      	movs	r3, #255	@ 0xff
 8001c0a:	4931      	ldr	r1, [pc, #196]	@ (8001cd0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ec>)
 8001c0c:	1b1b      	subs	r3, r3, r4
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	800b      	strh	r3, [r1, #0]
 8001c12:	e790      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
				if(symmetry_type_for_halfcycle == SHORTEN){
 8001c14:	780a      	ldrb	r2, [r1, #0]
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d123      	bne.n	8001c62 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x27e>
					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8001c1a:	3202      	adds	r2, #2
 8001c1c:	7002      	strb	r2, [r0, #0]
 8001c1e:	e77b      	b.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8001c20:	2e00      	cmp	r6, #0
 8001c22:	d09c      	beq.n	8001b5e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x17a>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001c24:	2e80      	cmp	r6, #128	@ 0x80
 8001c26:	d05b      	beq.n	8001ce0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001c28:	0612      	lsls	r2, r2, #24
 8001c2a:	d400      	bmi.n	8001c2e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x24a>
 8001c2c:	e091      	b.n	8001d52 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x36e>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001c2e:	2e80      	cmp	r6, #128	@ 0x80
 8001c30:	d90a      	bls.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001c32:	2380      	movs	r3, #128	@ 0x80
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001c34:	3c01      	subs	r4, #1
 8001c36:	b2a4      	uxth	r4, r4
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001c38:	780a      	ldrb	r2, [r1, #0]
 8001c3a:	b2d5      	uxtb	r5, r2
 8001c3c:	2a00      	cmp	r2, #0
 8001c3e:	d028      	beq.n	8001c92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c40:	780a      	ldrb	r2, [r1, #0]
 8001c42:	b2d5      	uxtb	r5, r2
 8001c44:	2a01      	cmp	r2, #1
 8001c46:	d024      	beq.n	8001c92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
 8001c48:	4a1e      	ldr	r2, [pc, #120]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
 8001c4a:	e768      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
			if(current_halfcycle == FIRST_HALFCYCLE){
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e4>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2de      	uxtb	r6, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d000      	beq.n	8001c58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x274>
 8001c56:	e747      	b.n	8001ae8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x104>
				if(symmetry_status == CW){
 8001c58:	7813      	ldrb	r3, [r2, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d000      	beq.n	8001c60 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x27c>
 8001c5e:	e747      	b.n	8001af0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x10c>
 8001c60:	e726      	b.n	8001ab0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c62:	780a      	ldrb	r2, [r1, #0]
 8001c64:	b2d5      	uxtb	r5, r2
 8001c66:	2a01      	cmp	r2, #1
 8001c68:	d000      	beq.n	8001c6c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x288>
 8001c6a:	e755      	b.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
 8001c6c:	e753      	b.n	8001b16 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x132>
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001c6e:	2201      	movs	r2, #1
 8001c70:	401a      	ands	r2, r3
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001c72:	085b      	lsrs	r3, r3, #1
 8001c74:	2601      	movs	r6, #1
 8001c76:	b29b      	uxth	r3, r3
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	d040      	beq.n	8001cfe <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x31a>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001c7c:	780a      	ldrb	r2, [r1, #0]
 8001c7e:	b2d5      	uxtb	r5, r2
 8001c80:	2a00      	cmp	r2, #0
 8001c82:	d006      	beq.n	8001c92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c84:	780a      	ldrb	r2, [r1, #0]
 8001c86:	2a01      	cmp	r2, #1
 8001c88:	d1de      	bne.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001c8c:	7006      	strb	r6, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c8e:	7016      	strb	r6, [r2, #0]
 8001c90:	e745      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c92:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e0>)
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001c94:	7005      	strb	r5, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c96:	7015      	strb	r5, [r2, #0]
 8001c98:	e741      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001c9a:	7801      	ldrb	r1, [r0, #0]
 8001c9c:	b2cd      	uxtb	r5, r1
 8001c9e:	2901      	cmp	r1, #1
 8001ca0:	d04d      	beq.n	8001d3e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x35a>
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001ca2:	7801      	ldrb	r1, [r0, #0]
 8001ca4:	2902      	cmp	r1, #2
 8001ca6:	d000      	beq.n	8001caa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2c6>
 8001ca8:	e745      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001caa:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001cac:	8809      	ldrh	r1, [r1, #0]
 8001cae:	420c      	tst	r4, r1
 8001cb0:	d051      	beq.n	8001d56 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x372>
				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	e766      	b.n	8001b84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1a0>
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	20000994 	.word	0x20000994
 8001cbc:	2000099c 	.word	0x2000099c
 8001cc0:	2000098a 	.word	0x2000098a
 8001cc4:	2000098c 	.word	0x2000098c
 8001cc8:	20000991 	.word	0x20000991
 8001ccc:	20000990 	.word	0x20000990
 8001cd0:	2000098e 	.word	0x2000098e
 8001cd4:	20000988 	.word	0x20000988
 8001cd8:	20000985 	.word	0x20000985
 8001cdc:	20000992 	.word	0x20000992
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001ce0:	3c01      	subs	r4, #1
 8001ce2:	b2a4      	uxth	r4, r4
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001ce4:	780b      	ldrb	r3, [r1, #0]
 8001ce6:	b2dd      	uxtb	r5, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d100      	bne.n	8001cee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30a>
 8001cec:	e783      	b.n	8001bf6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001cee:	780b      	ldrb	r3, [r1, #0]
 8001cf0:	b2dd      	uxtb	r5, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d100      	bne.n	8001cf8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x314>
 8001cf6:	e77e      	b.n	8001bf6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x212>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001cf8:	0033      	movs	r3, r6
 8001cfa:	4a28      	ldr	r2, [pc, #160]	@ (8001d9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
 8001cfc:	e70f      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001cfe:	780d      	ldrb	r5, [r1, #0]
 8001d00:	b2ef      	uxtb	r7, r5
 8001d02:	2d00      	cmp	r5, #0
 8001d04:	d015      	beq.n	8001d32 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34e>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d06:	780d      	ldrb	r5, [r1, #0]
 8001d08:	2d01      	cmp	r5, #1
 8001d0a:	d19d      	bne.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d0c:	7002      	strb	r2, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d0e:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
 8001d10:	7016      	strb	r6, [r2, #0]
 8001d12:	e704      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d14:	780a      	ldrb	r2, [r1, #0]
 8001d16:	2a01      	cmp	r2, #1
 8001d18:	d000      	beq.n	8001d1c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x338>
 8001d1a:	e6fd      	b.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d1c:	7007      	strb	r7, [r0, #0]
				TIM16_prescaler_adjust = DO_NOTHING;
 8001d1e:	e6fb      	b.n	8001b18 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d20:	780b      	ldrb	r3, [r1, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d1e8      	bne.n	8001cf8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x314>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d26:	2301      	movs	r3, #1
 8001d28:	4a1c      	ldr	r2, [pc, #112]	@ (8001d9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d2a:	7007      	strb	r7, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d2c:	7013      	strb	r3, [r2, #0]
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d2e:	0033      	movs	r3, r6
 8001d30:	e6f5      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
						TIM16_prescaler_adjust = DO_NOTHING;
 8001d32:	4a1a      	ldr	r2, [pc, #104]	@ (8001d9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d34:	7007      	strb	r7, [r0, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001d36:	7017      	strb	r7, [r2, #0]
 8001d38:	e6f1      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e6f6      	b.n	8001b2c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x148>
			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001d3e:	4918      	ldr	r1, [pc, #96]	@ (8001da0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3bc>)
 8001d40:	8809      	ldrh	r1, [r1, #0]
 8001d42:	420d      	tst	r5, r1
 8001d44:	d007      	beq.n	8001d56 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x372>
				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 8001d46:	21ff      	movs	r1, #255	@ 0xff
 8001d48:	1acb      	subs	r3, r1, r3
 8001d4a:	4916      	ldr	r1, [pc, #88]	@ (8001da4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3c0>)
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	800b      	strh	r3, [r1, #0]
 8001d50:	e6f1      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d52:	2380      	movs	r3, #128	@ 0x80
 8001d54:	e691      	b.n	8001a7a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x96>
				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	0049      	lsls	r1, r1, #1
 8001d5a:	1acb      	subs	r3, r1, r3
 8001d5c:	4911      	ldr	r1, [pc, #68]	@ (8001da4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3c0>)
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	800b      	strh	r3, [r1, #0]
 8001d62:	e6e8      	b.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x152>
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001d64:	2e80      	cmp	r6, #128	@ 0x80
 8001d66:	d800      	bhi.n	8001d6a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x386>
 8001d68:	e76e      	b.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	b292      	uxth	r2, r2
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001d6e:	2501      	movs	r5, #1
 8001d70:	0016      	movs	r6, r2
				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001d72:	3c01      	subs	r4, #1
 8001d74:	b2a4      	uxth	r4, r4
					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d76:	0853      	lsrs	r3, r2, #1
				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001d78:	402e      	ands	r6, r5
 8001d7a:	422a      	tst	r2, r5
 8001d7c:	d000      	beq.n	8001d80 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x39c>
 8001d7e:	e75b      	b.n	8001c38 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x254>
					if(symmetry_type_for_halfcycle == SHORTEN){
 8001d80:	780a      	ldrb	r2, [r1, #0]
 8001d82:	b2d5      	uxtb	r5, r2
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d100      	bne.n	8001d8a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a6>
 8001d88:	e783      	b.n	8001c92 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ae>
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d8a:	780a      	ldrb	r2, [r1, #0]
 8001d8c:	b2d5      	uxtb	r5, r2
 8001d8e:	2a01      	cmp	r2, #1
 8001d90:	d000      	beq.n	8001d94 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b0>
 8001d92:	e759      	b.n	8001c48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x264>
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d94:	4a01      	ldr	r2, [pc, #4]	@ (8001d9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b8>)
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d96:	7006      	strb	r6, [r0, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d98:	7015      	strb	r5, [r2, #0]
 8001d9a:	e6c0      	b.n	8001b1e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x13a>
 8001d9c:	2000098c 	.word	0x2000098c
 8001da0:	20000992 	.word	0x20000992
 8001da4:	2000098e 	.word	0x2000098e

08001da8 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){

    return dividend & ((1 << base_2_exponent) - 1);
 8001da8:	2301      	movs	r3, #1
 8001daa:	408b      	lsls	r3, r1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	4018      	ands	r0, r3
}
 8001db0:	4770      	bx	lr
 8001db2:	46c0      	nop			@ (mov r8, r8)

08001db4 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	4770      	bx	lr
 8001db6:	46c0      	nop			@ (mov r8, r8)

08001db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001db8:	480d      	ldr	r0, [pc, #52]	@ (8001df0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dbc:	f7ff fffa 	bl	8001db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc0:	480c      	ldr	r0, [pc, #48]	@ (8001df4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dc2:	490d      	ldr	r1, [pc, #52]	@ (8001df8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <LoopForever+0xe>)
  movs r3, #0
 8001dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc8:	e002      	b.n	8001dd0 <LoopCopyDataInit>

08001dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dce:	3304      	adds	r3, #4

08001dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd4:	d3f9      	bcc.n	8001dca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e04 <LoopForever+0x16>)
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ddc:	e001      	b.n	8001de2 <LoopFillZerobss>

08001dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de0:	3204      	adds	r2, #4

08001de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de4:	d3fb      	bcc.n	8001dde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001de6:	f003 fbf3 	bl	80055d0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001dea:	f7ff fb5f 	bl	80014ac <main>

08001dee <LoopForever>:

LoopForever:
  b LoopForever
 8001dee:	e7fe      	b.n	8001dee <LoopForever>
  ldr   r0, =_estack
 8001df0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001dfc:	08006144 	.word	0x08006144
  ldr r2, =_sbss
 8001e00:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e04:	200009a4 	.word	0x200009a4

08001e08 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_IRQHandler>
	...

08001e0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e0c:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <HAL_InitTick+0x40>)
{
 8001e10:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001e12:	7819      	ldrb	r1, [r3, #0]
 8001e14:	2900      	cmp	r1, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e1c:	20fa      	movs	r0, #250	@ 0xfa
 8001e1e:	0080      	lsls	r0, r0, #2
 8001e20:	f7fe f970 	bl	8000104 <__udivsi3>
 8001e24:	4d0a      	ldr	r5, [pc, #40]	@ (8001e50 <HAL_InitTick+0x44>)
 8001e26:	0001      	movs	r1, r0
 8001e28:	6828      	ldr	r0, [r5, #0]
 8001e2a:	f7fe f96b 	bl	8000104 <__udivsi3>
 8001e2e:	f000 fd23 	bl	8002878 <HAL_SYSTICK_Config>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e36:	2c03      	cmp	r4, #3
 8001e38:	d8ee      	bhi.n	8001e18 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3a:	3801      	subs	r0, #1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	0021      	movs	r1, r4
 8001e40:	f000 fce4 	bl	800280c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e44:	4b03      	ldr	r3, [pc, #12]	@ (8001e54 <HAL_InitTick+0x48>)
 8001e46:	2000      	movs	r0, #0
 8001e48:	601c      	str	r4, [r3, #0]
  return status;
 8001e4a:	e7e6      	b.n	8001e1a <HAL_InitTick+0xe>
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000004 	.word	0x20000004
 8001e54:	2000000c 	.word	0x2000000c

08001e58 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	2380      	movs	r3, #128	@ 0x80
 8001e5a:	4a08      	ldr	r2, [pc, #32]	@ (8001e7c <HAL_Init+0x24>)
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	6811      	ldr	r1, [r2, #0]
{
 8001e60:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e62:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e64:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e66:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e68:	f7ff ffd0 	bl	8001e0c <HAL_InitTick>
 8001e6c:	1e04      	subs	r4, r0, #0
 8001e6e:	d002      	beq.n	8001e76 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8001e70:	2401      	movs	r4, #1
}
 8001e72:	0020      	movs	r0, r4
 8001e74:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8001e76:	f7ff fb7d 	bl	8001574 <HAL_MspInit>
 8001e7a:	e7fa      	b.n	8001e72 <HAL_Init+0x1a>
 8001e7c:	40022000 	.word	0x40022000

08001e80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <HAL_IncTick+0x10>)
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <HAL_IncTick+0x14>)
 8001e84:	6811      	ldr	r1, [r2, #0]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	185b      	adds	r3, r3, r1
 8001e8a:	6013      	str	r3, [r2, #0]
}
 8001e8c:	4770      	bx	lr
 8001e8e:	46c0      	nop			@ (mov r8, r8)
 8001e90:	200009a0 	.word	0x200009a0
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e98:	4b01      	ldr	r3, [pc, #4]	@ (8001ea0 <HAL_GetTick+0x8>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
}
 8001e9c:	4770      	bx	lr
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	200009a0 	.word	0x200009a0

08001ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea4:	b570      	push	{r4, r5, r6, lr}
 8001ea6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fff6 	bl	8001e98 <HAL_GetTick>
 8001eac:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eae:	1c63      	adds	r3, r4, #1
 8001eb0:	d002      	beq.n	8001eb8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <HAL_Delay+0x20>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	1b40      	subs	r0, r0, r5
 8001ebe:	42a0      	cmp	r0, r4
 8001ec0:	d3fa      	bcc.n	8001eb8 <HAL_Delay+0x14>
  {
  }
}
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ec8:	2150      	movs	r1, #80	@ 0x50
{
 8001eca:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ecc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8001ece:	b510      	push	{r4, lr}
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001ed0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001ed2:	4211      	tst	r1, r2
 8001ed4:	d10d      	bne.n	8001ef2 <ADC_DMAConvCplt+0x2a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4313      	orrs	r3, r2
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001ede:	22c0      	movs	r2, #192	@ 0xc0
 8001ee0:	6583      	str	r3, [r0, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ee2:	6803      	ldr	r3, [r0, #0]
 8001ee4:	0112      	lsls	r2, r2, #4
 8001ee6:	68d9      	ldr	r1, [r3, #12]
 8001ee8:	4211      	tst	r1, r2
 8001eea:	d00d      	beq.n	8001f08 <ADC_DMAConvCplt+0x40>
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8001eec:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8001eee:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ef0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ef2:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001ef4:	06d2      	lsls	r2, r2, #27
 8001ef6:	d502      	bpl.n	8001efe <ADC_DMAConvCplt+0x36>
      hadc->ErrorCallback(hadc);
 8001ef8:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8001efa:	4798      	blx	r3
 8001efc:	e7f8      	b.n	8001ef0 <ADC_DMAConvCplt+0x28>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001efe:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001f00:	0018      	movs	r0, r3
 8001f02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f04:	4790      	blx	r2
}
 8001f06:	e7f3      	b.n	8001ef0 <ADC_DMAConvCplt+0x28>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001f08:	7e82      	ldrb	r2, [r0, #26]
 8001f0a:	2a00      	cmp	r2, #0
 8001f0c:	d1ee      	bne.n	8001eec <ADC_DMAConvCplt+0x24>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	0712      	lsls	r2, r2, #28
 8001f12:	d5eb      	bpl.n	8001eec <ADC_DMAConvCplt+0x24>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	0752      	lsls	r2, r2, #29
 8001f18:	d508      	bpl.n	8001f2c <ADC_DMAConvCplt+0x64>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f22:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001f24:	3a1f      	subs	r2, #31
 8001f26:	4313      	orrs	r3, r2
 8001f28:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8001f2a:	e7df      	b.n	8001eec <ADC_DMAConvCplt+0x24>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	438a      	bics	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001f34:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001f36:	4a03      	ldr	r2, [pc, #12]	@ (8001f44 <ADC_DMAConvCplt+0x7c>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	3204      	adds	r2, #4
 8001f3c:	32ff      	adds	r2, #255	@ 0xff
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	6583      	str	r3, [r0, #88]	@ 0x58
 8001f42:	e7d3      	b.n	8001eec <ADC_DMAConvCplt+0x24>
 8001f44:	fffffefe 	.word	0xfffffefe

08001f48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f48:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4a:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8001f4c:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001f4e:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f50:	bd10      	pop	{r4, pc}
 8001f52:	46c0      	nop			@ (mov r8, r8)

08001f54 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f54:	2240      	movs	r2, #64	@ 0x40
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f56:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8001f58:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f5a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f60:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001f62:	3a3c      	subs	r2, #60	@ 0x3c
 8001f64:	4313      	orrs	r3, r2
 8001f66:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8001f68:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8001f6a:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f6c:	bd10      	pop	{r4, pc}
 8001f6e:	46c0      	nop			@ (mov r8, r8)

08001f70 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001f70:	4770      	bx	lr
 8001f72:	46c0      	nop			@ (mov r8, r8)

08001f74 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8001f74:	4770      	bx	lr
 8001f76:	46c0      	nop			@ (mov r8, r8)

08001f78 <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001f78:	4770      	bx	lr
 8001f7a:	46c0      	nop			@ (mov r8, r8)

08001f7c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
 8001f7c:	4770      	bx	lr
 8001f7e:	46c0      	nop			@ (mov r8, r8)

08001f80 <HAL_ADC_Init>:
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	46d6      	mov	lr, sl
 8001f84:	464f      	mov	r7, r9
 8001f86:	4646      	mov	r6, r8
  __IO uint32_t wait_loop_index = 0UL;
 8001f88:	2300      	movs	r3, #0
{
 8001f8a:	b5c0      	push	{r6, r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	1e04      	subs	r4, r0, #0
  __IO uint32_t wait_loop_index = 0UL;
 8001f90:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 8001f92:	d044      	beq.n	800201e <HAL_ADC_Init+0x9e>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f94:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_ADC_Init+0x4c>
    if (hadc->MspInitCallback == NULL)
 8001f9a:	2280      	movs	r2, #128	@ 0x80
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8001f9c:	4b89      	ldr	r3, [pc, #548]	@ (80021c4 <HAL_ADC_Init+0x244>)
 8001f9e:	6643      	str	r3, [r0, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8001fa0:	4b89      	ldr	r3, [pc, #548]	@ (80021c8 <HAL_ADC_Init+0x248>)
 8001fa2:	6683      	str	r3, [r0, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8001fa4:	4b89      	ldr	r3, [pc, #548]	@ (80021cc <HAL_ADC_Init+0x24c>)
 8001fa6:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8001fa8:	4b89      	ldr	r3, [pc, #548]	@ (80021d0 <HAL_ADC_Init+0x250>)
 8001faa:	6703      	str	r3, [r0, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8001fac:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_ADC_Init+0x254>)
 8001fae:	6743      	str	r3, [r0, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8001fb0:	4b89      	ldr	r3, [pc, #548]	@ (80021d8 <HAL_ADC_Init+0x258>)
 8001fb2:	6783      	str	r3, [r0, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8001fb4:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_ADC_Init+0x25c>)
 8001fb6:	67c3      	str	r3, [r0, #124]	@ 0x7c
    if (hadc->MspInitCallback == NULL)
 8001fb8:	5883      	ldr	r3, [r0, r2]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d100      	bne.n	8001fc0 <HAL_ADC_Init+0x40>
 8001fbe:	e0e3      	b.n	8002188 <HAL_ADC_Init+0x208>
    hadc->MspInitCallback(hadc);
 8001fc0:	0020      	movs	r0, r4
 8001fc2:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc4:	2300      	movs	r3, #0
    hadc->Lock = HAL_UNLOCKED;
 8001fc6:	2254      	movs	r2, #84	@ 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 8001fc8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001fca:	54a3      	strb	r3, [r4, r2]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fcc:	2380      	movs	r3, #128	@ 0x80
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fce:	6825      	ldr	r5, [r4, #0]
 8001fd0:	055b      	lsls	r3, r3, #21
 8001fd2:	68aa      	ldr	r2, [r5, #8]
 8001fd4:	421a      	tst	r2, r3
 8001fd6:	d115      	bne.n	8002004 <HAL_ADC_Init+0x84>
  MODIFY_REG(ADCx->CR,
 8001fd8:	68aa      	ldr	r2, [r5, #8]
 8001fda:	4981      	ldr	r1, [pc, #516]	@ (80021e0 <HAL_ADC_Init+0x260>)
 8001fdc:	400a      	ands	r2, r1
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	60ab      	str	r3, [r5, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fe2:	4b80      	ldr	r3, [pc, #512]	@ (80021e4 <HAL_ADC_Init+0x264>)
 8001fe4:	4980      	ldr	r1, [pc, #512]	@ (80021e8 <HAL_ADC_Init+0x268>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	f7fe f88c 	bl	8000104 <__udivsi3>
 8001fec:	3001      	adds	r0, #1
 8001fee:	0040      	lsls	r0, r0, #1
 8001ff0:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ff2:	9b01      	ldr	r3, [sp, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_ADC_Init+0x84>
      wait_loop_index--;
 8001ff8:	9b01      	ldr	r3, [sp, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001ffe:	9b01      	ldr	r3, [sp, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1f9      	bne.n	8001ff8 <HAL_ADC_Init+0x78>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002004:	68ab      	ldr	r3, [r5, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2000      	movs	r0, #0
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	d400      	bmi.n	800200e <HAL_ADC_Init+0x8e>
 800200c:	e09d      	b.n	800214a <HAL_ADC_Init+0x1ca>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800200e:	68ab      	ldr	r3, [r5, #8]
 8002010:	075b      	lsls	r3, r3, #29
 8002012:	d50b      	bpl.n	800202c <HAL_ADC_Init+0xac>
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002014:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002016:	2210      	movs	r2, #16
 8002018:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800201a:	4313      	orrs	r3, r2
 800201c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800201e:	2001      	movs	r0, #1
}
 8002020:	b002      	add	sp, #8
 8002022:	bce0      	pop	{r5, r6, r7}
 8002024:	46ba      	mov	sl, r7
 8002026:	46b1      	mov	r9, r6
 8002028:	46a8      	mov	r8, r5
 800202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800202c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800202e:	06db      	lsls	r3, r3, #27
 8002030:	d4f1      	bmi.n	8002016 <HAL_ADC_Init+0x96>
    ADC_STATE_CLR_SET(hadc->State,
 8002032:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002034:	4a6d      	ldr	r2, [pc, #436]	@ (80021ec <HAL_ADC_Init+0x26c>)
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002036:	6921      	ldr	r1, [r4, #16]
    ADC_STATE_CLR_SET(hadc->State,
 8002038:	4013      	ands	r3, r2
 800203a:	3206      	adds	r2, #6
 800203c:	32ff      	adds	r2, #255	@ 0xff
 800203e:	4313      	orrs	r3, r2
 8002040:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002042:	68ab      	ldr	r3, [r5, #8]
 8002044:	07db      	lsls	r3, r3, #31
 8002046:	d45c      	bmi.n	8002102 <HAL_ADC_Init+0x182>
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002048:	6b27      	ldr	r7, [r4, #48]	@ 0x30
 800204a:	68a2      	ldr	r2, [r4, #8]
 800204c:	1e7b      	subs	r3, r7, #1
 800204e:	419f      	sbcs	r7, r3
 8002050:	68e3      	ldr	r3, [r4, #12]
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002052:	7ea6      	ldrb	r6, [r4, #26]
 8002054:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002056:	7e23      	ldrb	r3, [r4, #24]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002058:	033f      	lsls	r7, r7, #12
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800205a:	039b      	lsls	r3, r3, #14
 800205c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800205e:	7e63      	ldrb	r3, [r4, #25]
 8002060:	03db      	lsls	r3, r3, #15
 8002062:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002064:	0373      	lsls	r3, r6, #13
 8002066:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002068:	2900      	cmp	r1, #0
 800206a:	da00      	bge.n	800206e <HAL_ADC_Init+0xee>
 800206c:	e098      	b.n	80021a0 <HAL_ADC_Init+0x220>
 800206e:	2380      	movs	r3, #128	@ 0x80
 8002070:	039b      	lsls	r3, r3, #14
 8002072:	469c      	mov	ip, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002074:	232c      	movs	r3, #44	@ 0x2c
 8002076:	5ce3      	ldrb	r3, [r4, r3]
 8002078:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800207a:	4313      	orrs	r3, r2
 800207c:	433b      	orrs	r3, r7
 800207e:	4662      	mov	r2, ip
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002080:	2720      	movs	r7, #32
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002082:	4313      	orrs	r3, r2
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002084:	5de2      	ldrb	r2, [r4, r7]
 8002086:	2a01      	cmp	r2, #1
 8002088:	d100      	bne.n	800208c <HAL_ADC_Init+0x10c>
 800208a:	e08d      	b.n	80021a8 <HAL_ADC_Init+0x228>
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800208c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800208e:	2a00      	cmp	r2, #0
 8002090:	d005      	beq.n	800209e <HAL_ADC_Init+0x11e>
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002092:	26e0      	movs	r6, #224	@ 0xe0
 8002094:	0076      	lsls	r6, r6, #1
 8002096:	4032      	ands	r2, r6
 8002098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800209a:	4332      	orrs	r2, r6
 800209c:	4313      	orrs	r3, r2
      if (hadc->Init.OversamplingMode == ENABLE)
 800209e:	273c      	movs	r7, #60	@ 0x3c
      MODIFY_REG(hadc->Instance->CFGR1,
 80020a0:	68ea      	ldr	r2, [r5, #12]
 80020a2:	4e53      	ldr	r6, [pc, #332]	@ (80021f0 <HAL_ADC_Init+0x270>)
 80020a4:	4032      	ands	r2, r6
 80020a6:	4313      	orrs	r3, r2
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020a8:	6866      	ldr	r6, [r4, #4]
      MODIFY_REG(hadc->Instance->CFGR1,
 80020aa:	60eb      	str	r3, [r5, #12]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020ac:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
      if (hadc->Init.OversamplingMode == ENABLE)
 80020ae:	5de7      	ldrb	r7, [r4, r7]
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020b0:	0fb3      	lsrs	r3, r6, #30
 80020b2:	079b      	lsls	r3, r3, #30
 80020b4:	469a      	mov	sl, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80020b6:	46bc      	mov	ip, r7
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020b8:	431a      	orrs	r2, r3
      if (hadc->Init.OversamplingMode == ENABLE)
 80020ba:	2f01      	cmp	r7, #1
 80020bc:	d109      	bne.n	80020d2 <HAL_ADC_Init+0x152>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80020be:	6c67      	ldr	r7, [r4, #68]	@ 0x44
 80020c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80020c2:	433b      	orrs	r3, r7
 80020c4:	431a      	orrs	r2, r3
 80020c6:	4653      	mov	r3, sl
 80020c8:	6ca7      	ldr	r7, [r4, #72]	@ 0x48
 80020ca:	433a      	orrs	r2, r7
 80020cc:	431a      	orrs	r2, r3
 80020ce:	4663      	mov	r3, ip
 80020d0:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->Instance->CFGR2,
 80020d2:	692b      	ldr	r3, [r5, #16]
 80020d4:	4f47      	ldr	r7, [pc, #284]	@ (80021f4 <HAL_ADC_Init+0x274>)
 80020d6:	403b      	ands	r3, r7
 80020d8:	4313      	orrs	r3, r2
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80020da:	2280      	movs	r2, #128	@ 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 80020dc:	612b      	str	r3, [r5, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80020de:	0073      	lsls	r3, r6, #1
 80020e0:	085b      	lsrs	r3, r3, #1
 80020e2:	05d2      	lsls	r2, r2, #23
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00c      	beq.n	8002102 <HAL_ADC_Init+0x182>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80020e8:	2380      	movs	r3, #128	@ 0x80
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	429e      	cmp	r6, r3
 80020ee:	d008      	beq.n	8002102 <HAL_ADC_Init+0x182>
        MODIFY_REG(ADC1_COMMON->CCR,
 80020f0:	4a41      	ldr	r2, [pc, #260]	@ (80021f8 <HAL_ADC_Init+0x278>)
 80020f2:	4f42      	ldr	r7, [pc, #264]	@ (80021fc <HAL_ADC_Init+0x27c>)
 80020f4:	6813      	ldr	r3, [r2, #0]
 80020f6:	403b      	ands	r3, r7
 80020f8:	27f0      	movs	r7, #240	@ 0xf0
 80020fa:	03bf      	lsls	r7, r7, #14
 80020fc:	403e      	ands	r6, r7
 80020fe:	4333      	orrs	r3, r6
 8002100:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->SMPR,
 8002102:	2607      	movs	r6, #7
 8002104:	2770      	movs	r7, #112	@ 0x70
 8002106:	696b      	ldr	r3, [r5, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002108:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800210a:	43b3      	bics	r3, r6
 800210c:	4313      	orrs	r3, r2
 800210e:	616b      	str	r3, [r5, #20]
 8002110:	696e      	ldr	r6, [r5, #20]
 8002112:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002114:	43be      	bics	r6, r7
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4333      	orrs	r3, r6
 800211a:	616b      	str	r3, [r5, #20]
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800211c:	2900      	cmp	r1, #0
 800211e:	d122      	bne.n	8002166 <HAL_ADC_Init+0x1e6>
      SET_BIT(hadc->Instance->CHSELR,
 8002120:	2310      	movs	r3, #16
 8002122:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
 8002124:	425b      	negs	r3, r3
 8002126:	430b      	orrs	r3, r1
 8002128:	62ab      	str	r3, [r5, #40]	@ 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800212a:	2307      	movs	r3, #7
 800212c:	6969      	ldr	r1, [r5, #20]
 800212e:	400b      	ands	r3, r1
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002130:	429a      	cmp	r2, r3
 8002132:	d02c      	beq.n	800218e <HAL_ADC_Init+0x20e>
      ADC_STATE_CLR_SET(hadc->State,
 8002134:	2212      	movs	r2, #18
 8002136:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002138:	4393      	bics	r3, r2
 800213a:	3a02      	subs	r2, #2
 800213c:	4313      	orrs	r3, r2
 800213e:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002142:	3a0f      	subs	r2, #15
 8002144:	4313      	orrs	r3, r2
 8002146:	65e3      	str	r3, [r4, #92]	@ 0x5c
      tmp_hal_status = HAL_ERROR;
 8002148:	e769      	b.n	800201e <HAL_ADC_Init+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800214a:	2210      	movs	r2, #16
 800214c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 800214e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	4313      	orrs	r3, r2
 8002152:	65a3      	str	r3, [r4, #88]	@ 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002154:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002156:	3a0f      	subs	r2, #15
 8002158:	4313      	orrs	r3, r2
 800215a:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800215c:	68ab      	ldr	r3, [r5, #8]
 800215e:	075b      	lsls	r3, r3, #29
 8002160:	d400      	bmi.n	8002164 <HAL_ADC_Init+0x1e4>
 8002162:	e763      	b.n	800202c <HAL_ADC_Init+0xac>
 8002164:	e756      	b.n	8002014 <HAL_ADC_Init+0x94>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002166:	2380      	movs	r3, #128	@ 0x80
 8002168:	039b      	lsls	r3, r3, #14
 800216a:	4299      	cmp	r1, r3
 800216c:	d1dd      	bne.n	800212a <HAL_ADC_Init+0x1aa>
      MODIFY_REG(hadc->Instance->CHSELR,
 800216e:	211c      	movs	r1, #28
 8002170:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002172:	69e3      	ldr	r3, [r4, #28]
 8002174:	3b01      	subs	r3, #1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4019      	ands	r1, r3
 800217a:	2310      	movs	r3, #16
 800217c:	425b      	negs	r3, r3
 800217e:	408b      	lsls	r3, r1
 8002180:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8002182:	430b      	orrs	r3, r1
 8002184:	62ab      	str	r3, [r5, #40]	@ 0x28
 8002186:	e7d0      	b.n	800212a <HAL_ADC_Init+0x1aa>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002188:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <HAL_ADC_Init+0x280>)
 800218a:	5083      	str	r3, [r0, r2]
 800218c:	e718      	b.n	8001fc0 <HAL_ADC_Init+0x40>
      ADC_CLEAR_ERRORCODE(hadc);
 800218e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8002190:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8002192:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002194:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002196:	4393      	bics	r3, r2
 8002198:	3a02      	subs	r2, #2
 800219a:	4313      	orrs	r3, r2
 800219c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800219e:	e73f      	b.n	8002020 <HAL_ADC_Init+0xa0>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021a0:	004b      	lsls	r3, r1, #1
 80021a2:	085b      	lsrs	r3, r3, #1
 80021a4:	469c      	mov	ip, r3
 80021a6:	e765      	b.n	8002074 <HAL_ADC_Init+0xf4>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021a8:	2e00      	cmp	r6, #0
 80021aa:	d103      	bne.n	80021b4 <HAL_ADC_Init+0x234>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	0252      	lsls	r2, r2, #9
 80021b0:	4313      	orrs	r3, r2
 80021b2:	e76b      	b.n	800208c <HAL_ADC_Init+0x10c>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b4:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 80021b6:	433e      	orrs	r6, r7
 80021b8:	65a6      	str	r6, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	6de6      	ldr	r6, [r4, #92]	@ 0x5c
 80021bc:	4332      	orrs	r2, r6
 80021be:	65e2      	str	r2, [r4, #92]	@ 0x5c
 80021c0:	e764      	b.n	800208c <HAL_ADC_Init+0x10c>
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	08001f75 	.word	0x08001f75
 80021c8:	08001f79 	.word	0x08001f79
 80021cc:	08001f7d 	.word	0x08001f7d
 80021d0:	08001f71 	.word	0x08001f71
 80021d4:	08002801 	.word	0x08002801
 80021d8:	08002805 	.word	0x08002805
 80021dc:	08002809 	.word	0x08002809
 80021e0:	6fffffe8 	.word	0x6fffffe8
 80021e4:	20000004 	.word	0x20000004
 80021e8:	00030d40 	.word	0x00030d40
 80021ec:	fffffefd 	.word	0xfffffefd
 80021f0:	ffde0201 	.word	0xffde0201
 80021f4:	1ffffc02 	.word	0x1ffffc02
 80021f8:	40012708 	.word	0x40012708
 80021fc:	ffc3ffff 	.word	0xffc3ffff
 8002200:	080015a5 	.word	0x080015a5

08002204 <HAL_ADC_RegisterCallback>:
  if (pCallback == NULL)
 8002204:	2a00      	cmp	r2, #0
 8002206:	d00f      	beq.n	8002228 <HAL_ADC_RegisterCallback+0x24>
  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8002208:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800220a:	07db      	lsls	r3, r3, #31
 800220c:	d505      	bpl.n	800221a <HAL_ADC_RegisterCallback+0x16>
    switch (CallbackID)
 800220e:	290a      	cmp	r1, #10
 8002210:	d80a      	bhi.n	8002228 <HAL_ADC_RegisterCallback+0x24>
 8002212:	4b17      	ldr	r3, [pc, #92]	@ (8002270 <HAL_ADC_RegisterCallback+0x6c>)
 8002214:	0089      	lsls	r1, r1, #2
 8002216:	585b      	ldr	r3, [r3, r1]
 8002218:	469f      	mov	pc, r3
  else if (HAL_ADC_STATE_RESET == hadc->State)
 800221a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800221c:	2b00      	cmp	r3, #0
 800221e:	d103      	bne.n	8002228 <HAL_ADC_RegisterCallback+0x24>
    switch (CallbackID)
 8002220:	2909      	cmp	r1, #9
 8002222:	d00b      	beq.n	800223c <HAL_ADC_RegisterCallback+0x38>
 8002224:	290a      	cmp	r1, #10
 8002226:	d005      	beq.n	8002234 <HAL_ADC_RegisterCallback+0x30>
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002228:	2210      	movs	r2, #16
 800222a:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800222c:	4313      	orrs	r3, r2
 800222e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
}
 8002232:	4770      	bx	lr
        hadc->MspDeInitCallback = pCallback;
 8002234:	2384      	movs	r3, #132	@ 0x84
 8002236:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002238:	2000      	movs	r0, #0
 800223a:	e7fa      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->MspInitCallback = pCallback;
 800223c:	2380      	movs	r3, #128	@ 0x80
 800223e:	50c2      	str	r2, [r0, r3]
  HAL_StatusTypeDef status = HAL_OK;
 8002240:	2000      	movs	r0, #0
 8002242:	e7f6      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ErrorCallback = pCallback;
 8002244:	6702      	str	r2, [r0, #112]	@ 0x70
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2000      	movs	r0, #0
 8002248:	e7f3      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow2Callback = pCallback;
 800224a:	6742      	str	r2, [r0, #116]	@ 0x74
  HAL_StatusTypeDef status = HAL_OK;
 800224c:	2000      	movs	r0, #0
 800224e:	e7f0      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindow3Callback = pCallback;
 8002250:	6782      	str	r2, [r0, #120]	@ 0x78
  HAL_StatusTypeDef status = HAL_OK;
 8002252:	2000      	movs	r0, #0
 8002254:	e7ed      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->EndOfSamplingCallback = pCallback;
 8002256:	67c2      	str	r2, [r0, #124]	@ 0x7c
  HAL_StatusTypeDef status = HAL_OK;
 8002258:	2000      	movs	r0, #0
 800225a:	e7ea      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvHalfCpltCallback = pCallback;
 800225c:	6682      	str	r2, [r0, #104]	@ 0x68
  HAL_StatusTypeDef status = HAL_OK;
 800225e:	2000      	movs	r0, #0
 8002260:	e7e7      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->LevelOutOfWindowCallback = pCallback;
 8002262:	66c2      	str	r2, [r0, #108]	@ 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2000      	movs	r0, #0
 8002266:	e7e4      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
        hadc->ConvCpltCallback = pCallback;
 8002268:	6642      	str	r2, [r0, #100]	@ 0x64
  HAL_StatusTypeDef status = HAL_OK;
 800226a:	2000      	movs	r0, #0
 800226c:	e7e1      	b.n	8002232 <HAL_ADC_RegisterCallback+0x2e>
 800226e:	46c0      	nop			@ (mov r8, r8)
 8002270:	08005ea0 	.word	0x08005ea0

08002274 <HAL_ADC_ConfigChannel>:
{
 8002274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002276:	46de      	mov	lr, fp
 8002278:	4657      	mov	r7, sl
 800227a:	464e      	mov	r6, r9
 800227c:	4645      	mov	r5, r8
  __IO uint32_t wait_loop_index = 0UL;
 800227e:	2300      	movs	r3, #0
{
 8002280:	0004      	movs	r4, r0
 8002282:	b5e0      	push	{r5, r6, r7, lr}
 8002284:	b085      	sub	sp, #20
  __IO uint32_t wait_loop_index = 0UL;
 8002286:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(hadc);
 8002288:	3354      	adds	r3, #84	@ 0x54
 800228a:	5ce2      	ldrb	r2, [r4, r3]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800228c:	6900      	ldr	r0, [r0, #16]
  __HAL_LOCK(hadc);
 800228e:	2a01      	cmp	r2, #1
 8002290:	d100      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x20>
 8002292:	e09a      	b.n	80023ca <HAL_ADC_ConfigChannel+0x156>
 8002294:	2201      	movs	r2, #1
 8002296:	54e2      	strb	r2, [r4, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002298:	6823      	ldr	r3, [r4, #0]
 800229a:	3203      	adds	r2, #3
 800229c:	689e      	ldr	r6, [r3, #8]
 800229e:	4232      	tst	r2, r6
 80022a0:	d00e      	beq.n	80022c0 <HAL_ADC_ConfigChannel+0x4c>
    tmp_hal_status = HAL_ERROR;
 80022a2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022a6:	321c      	adds	r2, #28
 80022a8:	4313      	orrs	r3, r2
 80022aa:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80022ac:	2354      	movs	r3, #84	@ 0x54
 80022ae:	2200      	movs	r2, #0
 80022b0:	54e2      	strb	r2, [r4, r3]
}
 80022b2:	b005      	add	sp, #20
 80022b4:	bcf0      	pop	{r4, r5, r6, r7}
 80022b6:	46bb      	mov	fp, r7
 80022b8:	46b2      	mov	sl, r6
 80022ba:	46a9      	mov	r9, r5
 80022bc:	46a0      	mov	r8, r4
 80022be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 80022c0:	684e      	ldr	r6, [r1, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022c2:	4390      	bics	r0, r2
 80022c4:	4684      	mov	ip, r0
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80022c6:	6808      	ldr	r0, [r1, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 80022c8:	2e02      	cmp	r6, #2
 80022ca:	d05e      	beq.n	800238a <HAL_ADC_ConfigChannel+0x116>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80022cc:	0347      	lsls	r7, r0, #13
 80022ce:	0b7d      	lsrs	r5, r7, #13
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80022d0:	2780      	movs	r7, #128	@ 0x80
 80022d2:	9500      	str	r5, [sp, #0]
 80022d4:	063f      	lsls	r7, r7, #24
 80022d6:	45bc      	cmp	ip, r7
 80022d8:	d053      	beq.n	8002382 <HAL_ADC_ConfigChannel+0x10e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80022da:	6e27      	ldr	r7, [r4, #96]	@ 0x60
 80022dc:	46bb      	mov	fp, r7
 80022de:	271f      	movs	r7, #31
 80022e0:	46b8      	mov	r8, r7
 80022e2:	4037      	ands	r7, r6
 80022e4:	46ba      	mov	sl, r7
 80022e6:	270f      	movs	r7, #15
 80022e8:	4655      	mov	r5, sl
 80022ea:	40af      	lsls	r7, r5
 80022ec:	43fd      	mvns	r5, r7
 80022ee:	46bc      	mov	ip, r7
 80022f0:	9501      	str	r5, [sp, #4]
 80022f2:	465f      	mov	r7, fp
 80022f4:	4665      	mov	r5, ip
 80022f6:	43af      	bics	r7, r5
 80022f8:	9d00      	ldr	r5, [sp, #0]
 80022fa:	46b9      	mov	r9, r7
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	d166      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x15a>
 8002300:	4645      	mov	r5, r8
 8002302:	0e82      	lsrs	r2, r0, #26
 8002304:	4015      	ands	r5, r2
 8002306:	002a      	movs	r2, r5
 8002308:	4655      	mov	r5, sl
 800230a:	40aa      	lsls	r2, r5
 800230c:	464d      	mov	r5, r9
 800230e:	4315      	orrs	r5, r2
 8002310:	46a9      	mov	r9, r5
 8002312:	464a      	mov	r2, r9
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002314:	08b6      	lsrs	r6, r6, #2
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002316:	6622      	str	r2, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002318:	69e2      	ldr	r2, [r4, #28]
 800231a:	3601      	adds	r6, #1
 800231c:	4296      	cmp	r6, r2
 800231e:	d808      	bhi.n	8002332 <HAL_ADC_ConfigChannel+0xbe>
  MODIFY_REG(ADCx->CHSELR,
 8002320:	4656      	mov	r6, sl
 8002322:	0082      	lsls	r2, r0, #2
 8002324:	0f12      	lsrs	r2, r2, #28
 8002326:	40b2      	lsls	r2, r6
 8002328:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
 800232a:	9e01      	ldr	r6, [sp, #4]
 800232c:	4035      	ands	r5, r6
 800232e:	432a      	orrs	r2, r5
 8002330:	629a      	str	r2, [r3, #40]	@ 0x28
  MODIFY_REG(ADCx->SMPR,
 8002332:	0205      	lsls	r5, r0, #8
 8002334:	688a      	ldr	r2, [r1, #8]
 8002336:	0029      	movs	r1, r5
 8002338:	695e      	ldr	r6, [r3, #20]
 800233a:	402a      	ands	r2, r5
 800233c:	4d66      	ldr	r5, [pc, #408]	@ (80024d8 <HAL_ADC_ConfigChannel+0x264>)
 800233e:	438e      	bics	r6, r1
 8002340:	402a      	ands	r2, r5
 8002342:	4332      	orrs	r2, r6
 8002344:	615a      	str	r2, [r3, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002346:	2800      	cmp	r0, #0
 8002348:	db01      	blt.n	800234e <HAL_ADC_ConfigChannel+0xda>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234a:	2000      	movs	r0, #0
 800234c:	e7ae      	b.n	80022ac <HAL_ADC_ConfigChannel+0x38>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800234e:	21e0      	movs	r1, #224	@ 0xe0
 8002350:	4d62      	ldr	r5, [pc, #392]	@ (80024dc <HAL_ADC_ConfigChannel+0x268>)
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002352:	4a63      	ldr	r2, [pc, #396]	@ (80024e0 <HAL_ADC_ConfigChannel+0x26c>)
 8002354:	682b      	ldr	r3, [r5, #0]
 8002356:	0449      	lsls	r1, r1, #17
 8002358:	4019      	ands	r1, r3
 800235a:	4290      	cmp	r0, r2
 800235c:	d04c      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x184>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800235e:	4a61      	ldr	r2, [pc, #388]	@ (80024e4 <HAL_ADC_ConfigChannel+0x270>)
 8002360:	4290      	cmp	r0, r2
 8002362:	d040      	beq.n	80023e6 <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002364:	4a60      	ldr	r2, [pc, #384]	@ (80024e8 <HAL_ADC_ConfigChannel+0x274>)
 8002366:	4290      	cmp	r0, r2
 8002368:	d1ef      	bne.n	800234a <HAL_ADC_ConfigChannel+0xd6>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800236a:	2280      	movs	r2, #128	@ 0x80
 800236c:	03d2      	lsls	r2, r2, #15
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800236e:	4213      	tst	r3, r2
 8002370:	d1eb      	bne.n	800234a <HAL_ADC_ConfigChannel+0xd6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002372:	682b      	ldr	r3, [r5, #0]
 8002374:	485d      	ldr	r0, [pc, #372]	@ (80024ec <HAL_ADC_ConfigChannel+0x278>)
 8002376:	4003      	ands	r3, r0
 8002378:	430b      	orrs	r3, r1
 800237a:	431a      	orrs	r2, r3
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2000      	movs	r0, #0
 800237e:	602a      	str	r2, [r5, #0]
 8002380:	e794      	b.n	80022ac <HAL_ADC_ConfigChannel+0x38>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002382:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002384:	432a      	orrs	r2, r5
 8002386:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002388:	e7d3      	b.n	8002332 <HAL_ADC_ConfigChannel+0xbe>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	0612      	lsls	r2, r2, #24
 800238e:	4594      	cmp	ip, r2
 8002390:	d104      	bne.n	800239c <HAL_ADC_ConfigChannel+0x128>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002392:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002394:	0341      	lsls	r1, r0, #13
 8002396:	0b49      	lsrs	r1, r1, #13
 8002398:	438a      	bics	r2, r1
 800239a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800239c:	2800      	cmp	r0, #0
 800239e:	dad4      	bge.n	800234a <HAL_ADC_ConfigChannel+0xd6>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023a0:	4a4e      	ldr	r2, [pc, #312]	@ (80024dc <HAL_ADC_ConfigChannel+0x268>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a2:	494f      	ldr	r1, [pc, #316]	@ (80024e0 <HAL_ADC_ConfigChannel+0x26c>)
 80023a4:	6813      	ldr	r3, [r2, #0]
 80023a6:	4288      	cmp	r0, r1
 80023a8:	d023      	beq.n	80023f2 <HAL_ADC_ConfigChannel+0x17e>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80023aa:	494e      	ldr	r1, [pc, #312]	@ (80024e4 <HAL_ADC_ConfigChannel+0x270>)
 80023ac:	4288      	cmp	r0, r1
 80023ae:	d04a      	beq.n	8002446 <HAL_ADC_ConfigChannel+0x1d2>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80023b0:	494d      	ldr	r1, [pc, #308]	@ (80024e8 <HAL_ADC_ConfigChannel+0x274>)
 80023b2:	4288      	cmp	r0, r1
 80023b4:	d1c9      	bne.n	800234a <HAL_ADC_ConfigChannel+0xd6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023b6:	20c0      	movs	r0, #192	@ 0xc0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023b8:	6811      	ldr	r1, [r2, #0]
 80023ba:	0440      	lsls	r0, r0, #17
 80023bc:	4003      	ands	r3, r0
 80023be:	484b      	ldr	r0, [pc, #300]	@ (80024ec <HAL_ADC_ConfigChannel+0x278>)
 80023c0:	4001      	ands	r1, r0
 80023c2:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023c4:	2000      	movs	r0, #0
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	e770      	b.n	80022ac <HAL_ADC_ConfigChannel+0x38>
  __HAL_LOCK(hadc);
 80023ca:	2002      	movs	r0, #2
 80023cc:	e771      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x3e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80023ce:	2501      	movs	r5, #1
 80023d0:	4205      	tst	r5, r0
 80023d2:	d19e      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x9e>
 80023d4:	2702      	movs	r7, #2
 80023d6:	4207      	tst	r7, r0
 80023d8:	d02d      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x1c2>
 80023da:	4652      	mov	r2, sl
 80023dc:	4095      	lsls	r5, r2
 80023de:	464a      	mov	r2, r9
 80023e0:	432a      	orrs	r2, r5
 80023e2:	4691      	mov	r9, r2
 80023e4:	e795      	b.n	8002312 <HAL_ADC_ConfigChannel+0x9e>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	0452      	lsls	r2, r2, #17
 80023ea:	4213      	tst	r3, r2
 80023ec:	d0c1      	beq.n	8002372 <HAL_ADC_ConfigChannel+0xfe>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023ee:	2000      	movs	r0, #0
 80023f0:	e75c      	b.n	80022ac <HAL_ADC_ConfigChannel+0x38>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023f2:	20a0      	movs	r0, #160	@ 0xa0
 80023f4:	6811      	ldr	r1, [r2, #0]
 80023f6:	e7e0      	b.n	80023ba <HAL_ADC_ConfigChannel+0x146>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	0412      	lsls	r2, r2, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80023fc:	4213      	tst	r3, r2
 80023fe:	d1a4      	bne.n	800234a <HAL_ADC_ConfigChannel+0xd6>
 8002400:	682b      	ldr	r3, [r5, #0]
 8002402:	483a      	ldr	r0, [pc, #232]	@ (80024ec <HAL_ADC_ConfigChannel+0x278>)
 8002404:	4003      	ands	r3, r0
 8002406:	430b      	orrs	r3, r1
 8002408:	431a      	orrs	r2, r3
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800240a:	4b39      	ldr	r3, [pc, #228]	@ (80024f0 <HAL_ADC_ConfigChannel+0x27c>)
 800240c:	602a      	str	r2, [r5, #0]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	4938      	ldr	r1, [pc, #224]	@ (80024f4 <HAL_ADC_ConfigChannel+0x280>)
 8002412:	f7fd fe77 	bl	8000104 <__udivsi3>
 8002416:	3001      	adds	r0, #1
 8002418:	0043      	lsls	r3, r0, #1
 800241a:	181b      	adds	r3, r3, r0
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 8002420:	9b03      	ldr	r3, [sp, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d091      	beq.n	800234a <HAL_ADC_ConfigChannel+0xd6>
            wait_loop_index--;
 8002426:	9b03      	ldr	r3, [sp, #12]
 8002428:	3b01      	subs	r3, #1
 800242a:	9303      	str	r3, [sp, #12]
          while (wait_loop_index != 0UL)
 800242c:	9b03      	ldr	r3, [sp, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1f9      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x1b2>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002432:	2000      	movs	r0, #0
 8002434:	e73a      	b.n	80022ac <HAL_ADC_ConfigChannel+0x38>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002436:	4202      	tst	r2, r0
 8002438:	d009      	beq.n	800244e <HAL_ADC_ConfigChannel+0x1da>
 800243a:	4652      	mov	r2, sl
 800243c:	4097      	lsls	r7, r2
 800243e:	464a      	mov	r2, r9
 8002440:	433a      	orrs	r2, r7
 8002442:	4691      	mov	r9, r2
 8002444:	e765      	b.n	8002312 <HAL_ADC_ConfigChannel+0x9e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002446:	20c0      	movs	r0, #192	@ 0xc0
 8002448:	6811      	ldr	r1, [r2, #0]
 800244a:	0400      	lsls	r0, r0, #16
 800244c:	e7b6      	b.n	80023bc <HAL_ADC_ConfigChannel+0x148>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800244e:	0702      	lsls	r2, r0, #28
 8002450:	d501      	bpl.n	8002456 <HAL_ADC_ConfigChannel+0x1e2>
 8002452:	2203      	movs	r2, #3
 8002454:	e758      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 8002456:	06c2      	lsls	r2, r0, #27
 8002458:	d501      	bpl.n	800245e <HAL_ADC_ConfigChannel+0x1ea>
 800245a:	2204      	movs	r2, #4
 800245c:	e754      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 800245e:	0682      	lsls	r2, r0, #26
 8002460:	d501      	bpl.n	8002466 <HAL_ADC_ConfigChannel+0x1f2>
 8002462:	2205      	movs	r2, #5
 8002464:	e750      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 8002466:	0642      	lsls	r2, r0, #25
 8002468:	d501      	bpl.n	800246e <HAL_ADC_ConfigChannel+0x1fa>
 800246a:	2206      	movs	r2, #6
 800246c:	e74c      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 800246e:	0602      	lsls	r2, r0, #24
 8002470:	d501      	bpl.n	8002476 <HAL_ADC_ConfigChannel+0x202>
 8002472:	2207      	movs	r2, #7
 8002474:	e748      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 8002476:	05c2      	lsls	r2, r0, #23
 8002478:	d501      	bpl.n	800247e <HAL_ADC_ConfigChannel+0x20a>
 800247a:	2208      	movs	r2, #8
 800247c:	e744      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 800247e:	0582      	lsls	r2, r0, #22
 8002480:	d501      	bpl.n	8002486 <HAL_ADC_ConfigChannel+0x212>
 8002482:	2209      	movs	r2, #9
 8002484:	e740      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 8002486:	0542      	lsls	r2, r0, #21
 8002488:	d501      	bpl.n	800248e <HAL_ADC_ConfigChannel+0x21a>
 800248a:	220a      	movs	r2, #10
 800248c:	e73c      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 800248e:	0502      	lsls	r2, r0, #20
 8002490:	d501      	bpl.n	8002496 <HAL_ADC_ConfigChannel+0x222>
 8002492:	220b      	movs	r2, #11
 8002494:	e738      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 8002496:	04c2      	lsls	r2, r0, #19
 8002498:	d501      	bpl.n	800249e <HAL_ADC_ConfigChannel+0x22a>
 800249a:	220c      	movs	r2, #12
 800249c:	e734      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 800249e:	0482      	lsls	r2, r0, #18
 80024a0:	d501      	bpl.n	80024a6 <HAL_ADC_ConfigChannel+0x232>
 80024a2:	220d      	movs	r2, #13
 80024a4:	e730      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 80024a6:	0442      	lsls	r2, r0, #17
 80024a8:	d501      	bpl.n	80024ae <HAL_ADC_ConfigChannel+0x23a>
 80024aa:	220e      	movs	r2, #14
 80024ac:	e72c      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 80024ae:	0402      	lsls	r2, r0, #16
 80024b0:	d504      	bpl.n	80024bc <HAL_ADC_ConfigChannel+0x248>
 80024b2:	465a      	mov	r2, fp
 80024b4:	4665      	mov	r5, ip
 80024b6:	432a      	orrs	r2, r5
 80024b8:	4691      	mov	r9, r2
 80024ba:	e72a      	b.n	8002312 <HAL_ADC_ConfigChannel+0x9e>
 80024bc:	03c2      	lsls	r2, r0, #15
 80024be:	d501      	bpl.n	80024c4 <HAL_ADC_ConfigChannel+0x250>
 80024c0:	2210      	movs	r2, #16
 80024c2:	e721      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 80024c4:	0382      	lsls	r2, r0, #14
 80024c6:	d501      	bpl.n	80024cc <HAL_ADC_ConfigChannel+0x258>
 80024c8:	2211      	movs	r2, #17
 80024ca:	e71d      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 80024cc:	0342      	lsls	r2, r0, #13
 80024ce:	d400      	bmi.n	80024d2 <HAL_ADC_ConfigChannel+0x25e>
 80024d0:	e71f      	b.n	8002312 <HAL_ADC_ConfigChannel+0x9e>
 80024d2:	2212      	movs	r2, #18
 80024d4:	e718      	b.n	8002308 <HAL_ADC_ConfigChannel+0x94>
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	07ffff00 	.word	0x07ffff00
 80024dc:	40012708 	.word	0x40012708
 80024e0:	b0001000 	.word	0xb0001000
 80024e4:	b8004000 	.word	0xb8004000
 80024e8:	b4002000 	.word	0xb4002000
 80024ec:	fe3fffff 	.word	0xfe3fffff
 80024f0:	20000004 	.word	0x20000004
 80024f4:	00030d40 	.word	0x00030d40

080024f8 <ADC_ConversionStop>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80024f8:	6802      	ldr	r2, [r0, #0]
{
 80024fa:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024fc:	6893      	ldr	r3, [r2, #8]
 80024fe:	0004      	movs	r4, r0
 8002500:	075b      	lsls	r3, r3, #29
 8002502:	d516      	bpl.n	8002532 <ADC_ConversionStop+0x3a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002504:	6893      	ldr	r3, [r2, #8]
 8002506:	079b      	lsls	r3, r3, #30
 8002508:	d515      	bpl.n	8002536 <ADC_ConversionStop+0x3e>
    tickstart = HAL_GetTick();
 800250a:	f7ff fcc5 	bl	8001e98 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800250e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002510:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	075b      	lsls	r3, r3, #29
 8002516:	d50c      	bpl.n	8002532 <ADC_ConversionStop+0x3a>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002518:	2504      	movs	r5, #4
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800251a:	f7ff fcbd 	bl	8001e98 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800251e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002520:	1b80      	subs	r0, r0, r6
 8002522:	2802      	cmp	r0, #2
 8002524:	d902      	bls.n	800252c <ADC_ConversionStop+0x34>
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	4215      	tst	r5, r2
 800252a:	d112      	bne.n	8002552 <ADC_ConversionStop+0x5a>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	421d      	tst	r5, r3
 8002530:	d1f3      	bne.n	800251a <ADC_ConversionStop+0x22>
  return HAL_OK;
 8002532:	2000      	movs	r0, #0
}
 8002534:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG(ADCx->CR,
 8002536:	6893      	ldr	r3, [r2, #8]
 8002538:	490b      	ldr	r1, [pc, #44]	@ (8002568 <ADC_ConversionStop+0x70>)
 800253a:	400b      	ands	r3, r1
 800253c:	2110      	movs	r1, #16
 800253e:	430b      	orrs	r3, r1
 8002540:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8002542:	f7ff fca9 	bl	8001e98 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002546:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002548:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	075b      	lsls	r3, r3, #29
 800254e:	d4e3      	bmi.n	8002518 <ADC_ConversionStop+0x20>
 8002550:	e7ef      	b.n	8002532 <ADC_ConversionStop+0x3a>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002552:	2210      	movs	r2, #16
 8002554:	6da3      	ldr	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002558:	4313      	orrs	r3, r2
 800255a:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800255e:	3a0f      	subs	r2, #15
 8002560:	4313      	orrs	r3, r2
 8002562:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8002564:	e7e6      	b.n	8002534 <ADC_ConversionStop+0x3c>
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	7fffffe8 	.word	0x7fffffe8

0800256c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0UL;
 800256c:	2300      	movs	r3, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800256e:	2201      	movs	r2, #1
{
 8002570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002572:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002574:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002576:	6803      	ldr	r3, [r0, #0]
{
 8002578:	0004      	movs	r4, r0
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	420a      	tst	r2, r1
 800257e:	d11f      	bne.n	80025c0 <ADC_Enable+0x54>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002580:	6898      	ldr	r0, [r3, #8]
 8002582:	4928      	ldr	r1, [pc, #160]	@ (8002624 <ADC_Enable+0xb8>)
 8002584:	4208      	tst	r0, r1
 8002586:	d11e      	bne.n	80025c6 <ADC_Enable+0x5a>
  MODIFY_REG(ADCx->CR,
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	4827      	ldr	r0, [pc, #156]	@ (8002628 <ADC_Enable+0xbc>)
 800258c:	4001      	ands	r1, r0
 800258e:	430a      	orrs	r2, r1
 8002590:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002592:	4b26      	ldr	r3, [pc, #152]	@ (800262c <ADC_Enable+0xc0>)
 8002594:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	d50f      	bpl.n	80025ba <ADC_Enable+0x4e>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800259a:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <ADC_Enable+0xc4>)
 800259c:	4925      	ldr	r1, [pc, #148]	@ (8002634 <ADC_Enable+0xc8>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	f7fd fdb0 	bl	8000104 <__udivsi3>
 80025a4:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80025a6:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80025a8:	9b01      	ldr	r3, [sp, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <ADC_Enable+0x4e>
        wait_loop_index--;
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	3b01      	subs	r3, #1
 80025b2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80025b4:	9b01      	ldr	r3, [sp, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f9      	bne.n	80025ae <ADC_Enable+0x42>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80025ba:	7e63      	ldrb	r3, [r4, #25]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10b      	bne.n	80025d8 <ADC_Enable+0x6c>
  return HAL_OK;
 80025c0:	2000      	movs	r0, #0
}
 80025c2:	b003      	add	sp, #12
 80025c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	2110      	movs	r1, #16
 80025c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 80025ca:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025cc:	430b      	orrs	r3, r1
 80025ce:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80025d2:	4313      	orrs	r3, r2
 80025d4:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80025d6:	e7f4      	b.n	80025c2 <ADC_Enable+0x56>
      tickstart = HAL_GetTick();
 80025d8:	f7ff fc5e 	bl	8001e98 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025dc:	6823      	ldr	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80025de:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	07d2      	lsls	r2, r2, #31
 80025e4:	d4ec      	bmi.n	80025c0 <ADC_Enable+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025e6:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80025e8:	4f0f      	ldr	r7, [pc, #60]	@ (8002628 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	4215      	tst	r5, r2
 80025ee:	d103      	bne.n	80025f8 <ADC_Enable+0x8c>
  MODIFY_REG(ADCx->CR,
 80025f0:	689a      	ldr	r2, [r3, #8]
 80025f2:	403a      	ands	r2, r7
 80025f4:	432a      	orrs	r2, r5
 80025f6:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025f8:	f7ff fc4e 	bl	8001e98 <HAL_GetTick>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025fc:	6823      	ldr	r3, [r4, #0]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80025fe:	1b80      	subs	r0, r0, r6
 8002600:	2802      	cmp	r0, #2
 8002602:	d902      	bls.n	800260a <ADC_Enable+0x9e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	4215      	tst	r5, r2
 8002608:	d003      	beq.n	8002612 <ADC_Enable+0xa6>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4215      	tst	r5, r2
 800260e:	d0ec      	beq.n	80025ea <ADC_Enable+0x7e>
 8002610:	e7d6      	b.n	80025c0 <ADC_Enable+0x54>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002612:	2210      	movs	r2, #16
 8002614:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002616:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002618:	4313      	orrs	r3, r2
 800261a:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800261e:	432b      	orrs	r3, r5
 8002620:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8002622:	e7ce      	b.n	80025c2 <ADC_Enable+0x56>
 8002624:	80000017 	.word	0x80000017
 8002628:	7fffffe8 	.word	0x7fffffe8
 800262c:	40012708 	.word	0x40012708
 8002630:	20000004 	.word	0x20000004
 8002634:	00030d40 	.word	0x00030d40

08002638 <HAL_ADC_Start_DMA>:
{
 8002638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263a:	46c6      	mov	lr, r8
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800263c:	6805      	ldr	r5, [r0, #0]
{
 800263e:	0004      	movs	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002640:	68ae      	ldr	r6, [r5, #8]
 8002642:	4688      	mov	r8, r1
 8002644:	0017      	movs	r7, r2
    __HAL_LOCK(hadc);
 8002646:	2002      	movs	r0, #2
{
 8002648:	b500      	push	{lr}
 800264a:	0776      	lsls	r6, r6, #29
 800264c:	d414      	bmi.n	8002678 <HAL_ADC_Start_DMA+0x40>
    __HAL_LOCK(hadc);
 800264e:	2254      	movs	r2, #84	@ 0x54
 8002650:	5ca3      	ldrb	r3, [r4, r2]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d010      	beq.n	8002678 <HAL_ADC_Start_DMA+0x40>
 8002656:	2301      	movs	r3, #1
 8002658:	54a3      	strb	r3, [r4, r2]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800265a:	68ea      	ldr	r2, [r5, #12]
 800265c:	4213      	tst	r3, r2
 800265e:	d106      	bne.n	800266e <HAL_ADC_Start_DMA+0x36>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002660:	68aa      	ldr	r2, [r5, #8]
 8002662:	4213      	tst	r3, r2
 8002664:	d131      	bne.n	80026ca <HAL_ADC_Start_DMA+0x92>
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002666:	2201      	movs	r2, #1
 8002668:	68eb      	ldr	r3, [r5, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60eb      	str	r3, [r5, #12]
    tmp_hal_status = ADC_Enable(hadc);
 800266e:	0020      	movs	r0, r4
 8002670:	f7ff ff7c 	bl	800256c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002674:	2800      	cmp	r0, #0
 8002676:	d002      	beq.n	800267e <HAL_ADC_Start_DMA+0x46>
}
 8002678:	bc80      	pop	{r7}
 800267a:	46b8      	mov	r8, r7
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ADC_STATE_CLR_SET(hadc->State,
 800267e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_ADC_Start_DMA+0xa0>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002682:	6d25      	ldr	r5, [r4, #80]	@ 0x50
      ADC_STATE_CLR_SET(hadc->State,
 8002684:	401a      	ands	r2, r3
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4313      	orrs	r3, r2
 800268c:	65a3      	str	r3, [r4, #88]	@ 0x58
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800268e:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <HAL_ADC_Start_DMA+0xa4>)
      ADC_CLEAR_ERRORCODE(hadc);
 8002690:	65e0      	str	r0, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002692:	62eb      	str	r3, [r5, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002694:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_ADC_Start_DMA+0xa8>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002696:	2210      	movs	r2, #16
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002698:	632b      	str	r3, [r5, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_ADC_Start_DMA+0xac>)
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800269c:	6821      	ldr	r1, [r4, #0]
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269e:	636b      	str	r3, [r5, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026a0:	231c      	movs	r3, #28
 80026a2:	600b      	str	r3, [r1, #0]
      __HAL_UNLOCK(hadc);
 80026a4:	3338      	adds	r3, #56	@ 0x38
 80026a6:	54e0      	strb	r0, [r4, r3]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026a8:	684b      	ldr	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026aa:	0028      	movs	r0, r5
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026b0:	4642      	mov	r2, r8
 80026b2:	003b      	movs	r3, r7
 80026b4:	3140      	adds	r1, #64	@ 0x40
 80026b6:	f000 f96f 	bl	8002998 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 80026ba:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80026bc:	490a      	ldr	r1, [pc, #40]	@ (80026e8 <HAL_ADC_Start_DMA+0xb0>)
 80026be:	6893      	ldr	r3, [r2, #8]
 80026c0:	400b      	ands	r3, r1
 80026c2:	2104      	movs	r1, #4
 80026c4:	430b      	orrs	r3, r1
 80026c6:	6093      	str	r3, [r2, #8]
}
 80026c8:	e7d6      	b.n	8002678 <HAL_ADC_Start_DMA+0x40>
  MODIFY_REG(ADCx->CR,
 80026ca:	68ab      	ldr	r3, [r5, #8]
 80026cc:	4a06      	ldr	r2, [pc, #24]	@ (80026e8 <HAL_ADC_Start_DMA+0xb0>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	4303      	orrs	r3, r0
 80026d2:	60ab      	str	r3, [r5, #8]
}
 80026d4:	e7c7      	b.n	8002666 <HAL_ADC_Start_DMA+0x2e>
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	fffff0fe 	.word	0xfffff0fe
 80026dc:	08001ec9 	.word	0x08001ec9
 80026e0:	08001f49 	.word	0x08001f49
 80026e4:	08001f55 	.word	0x08001f55
 80026e8:	7fffffe8 	.word	0x7fffffe8

080026ec <ADC_Disable>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ec:	2202      	movs	r2, #2
{
 80026ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026f0:	6803      	ldr	r3, [r0, #0]
{
 80026f2:	0004      	movs	r4, r0
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	420a      	tst	r2, r1
 80026f8:	d002      	beq.n	8002700 <ADC_Disable+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026fa:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80026fc:	2000      	movs	r0, #0
}
 80026fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002700:	2101      	movs	r1, #1
 8002702:	6898      	ldr	r0, [r3, #8]
 8002704:	4201      	tst	r1, r0
 8002706:	d0f9      	beq.n	80026fc <ADC_Disable+0x10>
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002708:	2705      	movs	r7, #5
 800270a:	6898      	ldr	r0, [r3, #8]
 800270c:	4007      	ands	r7, r0
 800270e:	2f01      	cmp	r7, #1
 8002710:	d008      	beq.n	8002724 <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	2210      	movs	r2, #16
 8002714:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002716:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002718:	4313      	orrs	r3, r2
 800271a:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800271e:	430b      	orrs	r3, r1
 8002720:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8002722:	e7ec      	b.n	80026fe <ADC_Disable+0x12>
  MODIFY_REG(ADCx->CR,
 8002724:	6899      	ldr	r1, [r3, #8]
 8002726:	4812      	ldr	r0, [pc, #72]	@ (8002770 <ADC_Disable+0x84>)
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002728:	2501      	movs	r5, #1
 800272a:	4001      	ands	r1, r0
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002730:	2203      	movs	r2, #3
 8002732:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002734:	f7ff fbb0 	bl	8001e98 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002738:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800273a:	0006      	movs	r6, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	421f      	tst	r7, r3
 8002740:	d0dc      	beq.n	80026fc <ADC_Disable+0x10>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002742:	f7ff fba9 	bl	8001e98 <HAL_GetTick>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002746:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002748:	1b80      	subs	r0, r0, r6
 800274a:	2802      	cmp	r0, #2
 800274c:	d902      	bls.n	8002754 <ADC_Disable+0x68>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	4215      	tst	r5, r2
 8002752:	d103      	bne.n	800275c <ADC_Disable+0x70>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	421d      	tst	r5, r3
 8002758:	d1f3      	bne.n	8002742 <ADC_Disable+0x56>
 800275a:	e7cf      	b.n	80026fc <ADC_Disable+0x10>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275c:	2210      	movs	r2, #16
 800275e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      return HAL_ERROR;
 8002760:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002762:	4313      	orrs	r3, r2
 8002764:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002766:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002768:	432b      	orrs	r3, r5
 800276a:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800276c:	e7c7      	b.n	80026fe <ADC_Disable+0x12>
 800276e:	46c0      	nop			@ (mov r8, r8)
 8002770:	7fffffe8 	.word	0x7fffffe8

08002774 <HAL_ADC_Stop_DMA>:
  __HAL_LOCK(hadc);
 8002774:	2354      	movs	r3, #84	@ 0x54
{
 8002776:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8002778:	5cc2      	ldrb	r2, [r0, r3]
{
 800277a:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800277c:	2a01      	cmp	r2, #1
 800277e:	d025      	beq.n	80027cc <HAL_ADC_Stop_DMA+0x58>
 8002780:	2201      	movs	r2, #1
 8002782:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002784:	f7ff feb8 	bl	80024f8 <ADC_ConversionStop>
 8002788:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800278a:	d11a      	bne.n	80027c2 <HAL_ADC_Stop_DMA+0x4e>
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800278c:	2325      	movs	r3, #37	@ 0x25
 800278e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002790:	5cc3      	ldrb	r3, [r0, r3]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d01c      	beq.n	80027d0 <HAL_ADC_Stop_DMA+0x5c>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002796:	2110      	movs	r1, #16
 8002798:	6822      	ldr	r2, [r4, #0]
      tmp_hal_status = ADC_Disable(hadc);
 800279a:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800279c:	6853      	ldr	r3, [r2, #4]
 800279e:	438b      	bics	r3, r1
 80027a0:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80027a2:	f7ff ffa3 	bl	80026ec <ADC_Disable>
 80027a6:	1e05      	subs	r5, r0, #0
    if (tmp_hal_status == HAL_OK)
 80027a8:	d106      	bne.n	80027b8 <HAL_ADC_Stop_DMA+0x44>
      ADC_STATE_CLR_SET(hadc->State,
 80027aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80027ac:	4a13      	ldr	r2, [pc, #76]	@ (80027fc <HAL_ADC_Stop_DMA+0x88>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	3204      	adds	r2, #4
 80027b2:	32ff      	adds	r2, #255	@ 0xff
 80027b4:	4313      	orrs	r3, r2
 80027b6:	65a3      	str	r3, [r4, #88]	@ 0x58
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80027b8:	2101      	movs	r1, #1
 80027ba:	6822      	ldr	r2, [r4, #0]
 80027bc:	68d3      	ldr	r3, [r2, #12]
 80027be:	438b      	bics	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
  __HAL_UNLOCK(hadc);
 80027c2:	2354      	movs	r3, #84	@ 0x54
 80027c4:	2200      	movs	r2, #0
 80027c6:	54e2      	strb	r2, [r4, r3]
}
 80027c8:	0028      	movs	r0, r5
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hadc);
 80027cc:	2502      	movs	r5, #2
 80027ce:	e7fb      	b.n	80027c8 <HAL_ADC_Stop_DMA+0x54>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027d0:	f000 f94a 	bl	8002a68 <HAL_DMA_Abort>
 80027d4:	1e05      	subs	r5, r0, #0
      if (tmp_hal_status != HAL_OK)
 80027d6:	d0de      	beq.n	8002796 <HAL_ADC_Stop_DMA+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027d8:	2240      	movs	r2, #64	@ 0x40
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027da:	2110      	movs	r1, #16
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      (void)ADC_Disable(hadc);
 80027de:	0020      	movs	r0, r4
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027e0:	4313      	orrs	r3, r2
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027e2:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027e4:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80027e6:	6853      	ldr	r3, [r2, #4]
 80027e8:	438b      	bics	r3, r1
 80027ea:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 80027ec:	f7ff ff7e 	bl	80026ec <ADC_Disable>
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80027f0:	2101      	movs	r1, #1
 80027f2:	6822      	ldr	r2, [r4, #0]
 80027f4:	68d3      	ldr	r3, [r2, #12]
 80027f6:	438b      	bics	r3, r1
 80027f8:	60d3      	str	r3, [r2, #12]
 80027fa:	e7e2      	b.n	80027c2 <HAL_ADC_Stop_DMA+0x4e>
 80027fc:	fffffefe 	.word	0xfffffefe

08002800 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002800:	4770      	bx	lr
 8002802:	46c0      	nop			@ (mov r8, r8)

08002804 <HAL_ADCEx_LevelOutOfWindow3Callback>:
/**
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
 8002804:	4770      	bx	lr
 8002806:	46c0      	nop			@ (mov r8, r8)

08002808 <HAL_ADCEx_EndOfSamplingCallback>:
/**
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
 8002808:	4770      	bx	lr
 800280a:	46c0      	nop			@ (mov r8, r8)

0800280c <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800280c:	22ff      	movs	r2, #255	@ 0xff
 800280e:	2303      	movs	r3, #3
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002810:	b510      	push	{r4, lr}
 8002812:	0014      	movs	r4, r2
 8002814:	4003      	ands	r3, r0
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800281a:	0189      	lsls	r1, r1, #6
 800281c:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800281e:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002820:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 8002822:	2800      	cmp	r0, #0
 8002824:	db0b      	blt.n	800283e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002826:	4b0c      	ldr	r3, [pc, #48]	@ (8002858 <HAL_NVIC_SetPriority+0x4c>)
 8002828:	21c0      	movs	r1, #192	@ 0xc0
 800282a:	469c      	mov	ip, r3
 800282c:	0880      	lsrs	r0, r0, #2
 800282e:	0080      	lsls	r0, r0, #2
 8002830:	4460      	add	r0, ip
 8002832:	0089      	lsls	r1, r1, #2
 8002834:	5843      	ldr	r3, [r0, r1]
 8002836:	4023      	ands	r3, r4
 8002838:	4313      	orrs	r3, r2
 800283a:	5043      	str	r3, [r0, r1]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800283c:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800283e:	230f      	movs	r3, #15
 8002840:	4906      	ldr	r1, [pc, #24]	@ (800285c <HAL_NVIC_SetPriority+0x50>)
 8002842:	4003      	ands	r3, r0
 8002844:	468c      	mov	ip, r1
 8002846:	3b08      	subs	r3, #8
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4463      	add	r3, ip
 800284e:	69d9      	ldr	r1, [r3, #28]
 8002850:	400c      	ands	r4, r1
 8002852:	4314      	orrs	r4, r2
 8002854:	61dc      	str	r4, [r3, #28]
 8002856:	e7f1      	b.n	800283c <HAL_NVIC_SetPriority+0x30>
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002860:	2800      	cmp	r0, #0
 8002862:	db05      	blt.n	8002870 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002864:	221f      	movs	r2, #31
 8002866:	2301      	movs	r3, #1
 8002868:	4002      	ands	r2, r0
 800286a:	4093      	lsls	r3, r2
 800286c:	4a01      	ldr	r2, [pc, #4]	@ (8002874 <HAL_NVIC_EnableIRQ+0x14>)
 800286e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002870:	4770      	bx	lr
 8002872:	46c0      	nop			@ (mov r8, r8)
 8002874:	e000e100 	.word	0xe000e100

08002878 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	2280      	movs	r2, #128	@ 0x80
 800287a:	1e43      	subs	r3, r0, #1
 800287c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002880:	4293      	cmp	r3, r2
 8002882:	d20e      	bcs.n	80028a2 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002884:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002888:	4807      	ldr	r0, [pc, #28]	@ (80028a8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800288c:	6a03      	ldr	r3, [r0, #32]
 800288e:	0609      	lsls	r1, r1, #24
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	430b      	orrs	r3, r1
 8002896:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800289a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	3307      	adds	r3, #7
 80028a0:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80028a2:	4770      	bx	lr
 80028a4:	e000e010 	.word	0xe000e010
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ae:	46c6      	mov	lr, r8
 80028b0:	0004      	movs	r4, r0
 80028b2:	b500      	push	{lr}
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80028b4:	2800      	cmp	r0, #0
 80028b6:	d060      	beq.n	800297a <HAL_DMA_Init+0xce>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80028b8:	6805      	ldr	r5, [r0, #0]
 80028ba:	4b31      	ldr	r3, [pc, #196]	@ (8002980 <HAL_DMA_Init+0xd4>)
 80028bc:	2114      	movs	r1, #20
 80028be:	18e8      	adds	r0, r5, r3
 80028c0:	f7fd fc20 	bl	8000104 <__udivsi3>
 80028c4:	0083      	lsls	r3, r0, #2
 80028c6:	6423      	str	r3, [r4, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028c8:	2202      	movs	r2, #2
 80028ca:	2325      	movs	r3, #37	@ 0x25
 80028cc:	54e2      	strb	r2, [r4, r3]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028ce:	682b      	ldr	r3, [r5, #0]
 80028d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002984 <HAL_DMA_Init+0xd8>)
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80028d2:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80028d4:	4013      	ands	r3, r2
 80028d6:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80028d8:	68e3      	ldr	r3, [r4, #12]
 80028da:	6921      	ldr	r1, [r4, #16]
 80028dc:	4333      	orrs	r3, r6
 80028de:	430b      	orrs	r3, r1
 80028e0:	6961      	ldr	r1, [r4, #20]
 80028e2:	682a      	ldr	r2, [r5, #0]
 80028e4:	430b      	orrs	r3, r1
 80028e6:	69a1      	ldr	r1, [r4, #24]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	69e1      	ldr	r1, [r4, #28]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6a21      	ldr	r1, [r4, #32]
 80028f0:	430b      	orrs	r3, r1
 80028f2:	4313      	orrs	r3, r2
 80028f4:	602b      	str	r3, [r5, #0]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_DMA_Init+0xdc>)

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028f8:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028fa:	469c      	mov	ip, r3
 80028fc:	4460      	add	r0, ip
 80028fe:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002900:	20ff      	movs	r0, #255	@ 0xff
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002902:	4b22      	ldr	r3, [pc, #136]	@ (800298c <HAL_DMA_Init+0xe0>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002904:	4028      	ands	r0, r5
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002906:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002908:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800290a:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800290c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800290e:	f7fd fbf9 	bl	8000104 <__udivsi3>

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002912:	231f      	movs	r3, #31
 8002914:	2201      	movs	r2, #1
 8002916:	4003      	ands	r3, r0
 8002918:	0010      	movs	r0, r2
 800291a:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800291c:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800291e:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002920:	01db      	lsls	r3, r3, #7
 8002922:	429e      	cmp	r6, r3
 8002924:	d01f      	beq.n	8002966 <HAL_DMA_Init+0xba>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002926:	233f      	movs	r3, #63	@ 0x3f
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002928:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800292a:	6861      	ldr	r1, [r4, #4]
 800292c:	400b      	ands	r3, r1
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800292e:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002930:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002932:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002934:	2903      	cmp	r1, #3
 8002936:	d81b      	bhi.n	8002970 <HAL_DMA_Init+0xc4>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002938:	4915      	ldr	r1, [pc, #84]	@ (8002990 <HAL_DMA_Init+0xe4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800293a:	4816      	ldr	r0, [pc, #88]	@ (8002994 <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800293c:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800293e:	3b01      	subs	r3, #1
 8002940:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002942:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002944:	0089      	lsls	r1, r1, #2
 8002946:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002948:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800294a:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800294c:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800294e:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002950:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002952:	2225      	movs	r2, #37	@ 0x25
 8002954:	2101      	movs	r1, #1
  return HAL_OK;
 8002956:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002958:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800295a:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 800295c:	3a01      	subs	r2, #1
 800295e:	54a3      	strb	r3, [r4, r2]
}
 8002960:	bc80      	pop	{r7}
 8002962:	46b8      	mov	r8, r7
 8002964:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002966:	2300      	movs	r3, #0
 8002968:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800296a:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800296c:	4643      	mov	r3, r8
 800296e:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002974:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002976:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002978:	e7ea      	b.n	8002950 <HAL_DMA_Init+0xa4>
    return HAL_ERROR;
 800297a:	2001      	movs	r0, #1
 800297c:	e7f0      	b.n	8002960 <HAL_DMA_Init+0xb4>
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	bffdfff8 	.word	0xbffdfff8
 8002984:	ffff800f 	.word	0xffff800f
 8002988:	10008200 	.word	0x10008200
 800298c:	40020880 	.word	0x40020880
 8002990:	1000823f 	.word	0x1000823f
 8002994:	40020940 	.word	0x40020940

08002998 <HAL_DMA_Start_IT>:
{
 8002998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299a:	46c6      	mov	lr, r8
  __HAL_LOCK(hdma);
 800299c:	2424      	movs	r4, #36	@ 0x24
{
 800299e:	b500      	push	{lr}
  __HAL_LOCK(hdma);
 80029a0:	5d05      	ldrb	r5, [r0, r4]
 80029a2:	2d01      	cmp	r5, #1
 80029a4:	d04f      	beq.n	8002a46 <HAL_DMA_Start_IT+0xae>
 80029a6:	2501      	movs	r5, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 80029a8:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 80029aa:	5505      	strb	r5, [r0, r4]
  if (hdma->State == HAL_DMA_STATE_READY)
 80029ac:	5d85      	ldrb	r5, [r0, r6]
 80029ae:	b2ef      	uxtb	r7, r5
 80029b0:	2d01      	cmp	r5, #1
 80029b2:	d007      	beq.n	80029c4 <HAL_DMA_Start_IT+0x2c>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80029b8:	2300      	movs	r3, #0
 80029ba:	5503      	strb	r3, [r0, r4]
    status = HAL_ERROR;
 80029bc:	2001      	movs	r0, #1
}
 80029be:	bc80      	pop	{r7}
 80029c0:	46b8      	mov	r8, r7
 80029c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c4:	3c22      	subs	r4, #34	@ 0x22
 80029c6:	5584      	strb	r4, [r0, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029c8:	2400      	movs	r4, #0
 80029ca:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80029cc:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ce:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 80029d0:	6825      	ldr	r5, [r4, #0]
 80029d2:	43bd      	bics	r5, r7
 80029d4:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d6:	6c85      	ldr	r5, [r0, #72]	@ 0x48
 80029d8:	606e      	str	r6, [r5, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 80029da:	6d06      	ldr	r6, [r0, #80]	@ 0x50
 80029dc:	2e00      	cmp	r6, #0
 80029de:	d002      	beq.n	80029e6 <HAL_DMA_Start_IT+0x4e>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029e0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80029e2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
 80029e4:	606f      	str	r7, [r5, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80029e6:	4d1f      	ldr	r5, [pc, #124]	@ (8002a64 <HAL_DMA_Start_IT+0xcc>)
 80029e8:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 80029ea:	46ac      	mov	ip, r5
 80029ec:	686d      	ldr	r5, [r5, #4]
 80029ee:	46a8      	mov	r8, r5
 80029f0:	251c      	movs	r5, #28
 80029f2:	402f      	ands	r7, r5
 80029f4:	3d1b      	subs	r5, #27
 80029f6:	40bd      	lsls	r5, r7
 80029f8:	4647      	mov	r7, r8
 80029fa:	433d      	orrs	r5, r7
 80029fc:	4667      	mov	r7, ip
 80029fe:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002a00:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a02:	6883      	ldr	r3, [r0, #8]
 8002a04:	2b10      	cmp	r3, #16
 8002a06:	d020      	beq.n	8002a4a <HAL_DMA_Start_IT+0xb2>
    hdma->Instance->CPAR = SrcAddress;
 8002a08:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a0a:	60e2      	str	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002a0c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01e      	beq.n	8002a50 <HAL_DMA_Start_IT+0xb8>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a12:	220e      	movs	r2, #14
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002a1a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002a1c:	6813      	ldr	r3, [r2, #0]
 8002a1e:	03db      	lsls	r3, r3, #15
 8002a20:	d504      	bpl.n	8002a2c <HAL_DMA_Start_IT+0x94>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	6811      	ldr	r1, [r2, #0]
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002a2c:	2e00      	cmp	r6, #0
 8002a2e:	d004      	beq.n	8002a3a <HAL_DMA_Start_IT+0xa2>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002a30:	2380      	movs	r3, #128	@ 0x80
 8002a32:	6832      	ldr	r2, [r6, #0]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	6033      	str	r3, [r6, #0]
    __HAL_DMA_ENABLE(hdma);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002a40:	4313      	orrs	r3, r2
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	e7bb      	b.n	80029be <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8002a46:	2002      	movs	r0, #2
 8002a48:	e7b9      	b.n	80029be <HAL_DMA_Start_IT+0x26>
    hdma->Instance->CPAR = DstAddress;
 8002a4a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002a4c:	60e1      	str	r1, [r4, #12]
 8002a4e:	e7dd      	b.n	8002a0c <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a50:	2204      	movs	r2, #4
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	4393      	bics	r3, r2
 8002a56:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a58:	6823      	ldr	r3, [r4, #0]
 8002a5a:	3206      	adds	r2, #6
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	6023      	str	r3, [r4, #0]
 8002a60:	e7db      	b.n	8002a1a <HAL_DMA_Start_IT+0x82>
 8002a62:	46c0      	nop			@ (mov r8, r8)
 8002a64:	40020000 	.word	0x40020000

08002a68 <HAL_DMA_Abort>:
{
 8002a68:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8002a6a:	2800      	cmp	r0, #0
 8002a6c:	d032      	beq.n	8002ad4 <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a6e:	2325      	movs	r3, #37	@ 0x25
 8002a70:	5cc3      	ldrb	r3, [r0, r3]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d129      	bne.n	8002aca <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a76:	210e      	movs	r1, #14
 8002a78:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a7a:	4c17      	ldr	r4, [pc, #92]	@ (8002ad8 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a7c:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002a7e:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a80:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a82:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a84:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a86:	680b      	ldr	r3, [r1, #0]
 8002a88:	4023      	ands	r3, r4
 8002a8a:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	6811      	ldr	r1, [r2, #0]
 8002a90:	4399      	bics	r1, r3
 8002a92:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002a94:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002a96:	4911      	ldr	r1, [pc, #68]	@ (8002adc <HAL_DMA_Abort+0x74>)
 8002a98:	4032      	ands	r2, r6
 8002a9a:	4093      	lsls	r3, r2
 8002a9c:	684d      	ldr	r5, [r1, #4]
 8002a9e:	432b      	orrs	r3, r5
 8002aa0:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aa2:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002aa4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002aa6:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002aa8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4022      	ands	r2, r4
 8002ab2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ab4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002ab6:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002ab8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	2325      	movs	r3, #37	@ 0x25
 8002abc:	2201      	movs	r2, #1
 8002abe:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002ac6:	2000      	movs	r0, #0
}
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aca:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 8002acc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ace:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8002ad4:	2001      	movs	r0, #1
 8002ad6:	e7f7      	b.n	8002ac8 <HAL_DMA_Abort+0x60>
 8002ad8:	fffffeff 	.word	0xfffffeff
 8002adc:	40020000 	.word	0x40020000

08002ae0 <HAL_DMA_IRQHandler>:
{
 8002ae0:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ae2:	211c      	movs	r1, #28
 8002ae4:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8002ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8002ae8:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8002aea:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aec:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002aee:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002af0:	400b      	ands	r3, r1
 8002af2:	0021      	movs	r1, r4
 8002af4:	4099      	lsls	r1, r3
 8002af6:	420a      	tst	r2, r1
 8002af8:	d010      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x3c>
 8002afa:	422c      	tst	r4, r5
 8002afc:	d00e      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x3c>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002afe:	6833      	ldr	r3, [r6, #0]
 8002b00:	069b      	lsls	r3, r3, #26
 8002b02:	d402      	bmi.n	8002b0a <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b04:	6833      	ldr	r3, [r6, #0]
 8002b06:	43a3      	bics	r3, r4
 8002b08:	6033      	str	r3, [r6, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_DMA_IRQHandler+0xb4>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4311      	orrs	r1, r2
 8002b10:	6059      	str	r1, [r3, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002b12:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d000      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002b18:	4798      	blx	r3
}
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002b1c:	2402      	movs	r4, #2
 8002b1e:	0021      	movs	r1, r4
 8002b20:	4099      	lsls	r1, r3
 8002b22:	420a      	tst	r2, r1
 8002b24:	d017      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x76>
 8002b26:	422c      	tst	r4, r5
 8002b28:	d015      	beq.n	8002b56 <HAL_DMA_IRQHandler+0x76>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b2a:	6833      	ldr	r3, [r6, #0]
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	d406      	bmi.n	8002b3e <HAL_DMA_IRQHandler+0x5e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b30:	220a      	movs	r2, #10
 8002b32:	6833      	ldr	r3, [r6, #0]
 8002b34:	4393      	bics	r3, r2
 8002b36:	6033      	str	r3, [r6, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002b38:	2325      	movs	r3, #37	@ 0x25
 8002b3a:	3a09      	subs	r2, #9
 8002b3c:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <HAL_DMA_IRQHandler+0xb4>)
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4311      	orrs	r1, r2
 8002b44:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2324      	movs	r3, #36	@ 0x24
 8002b4a:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 8002b4c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0e3      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002b52:	4798      	blx	r3
  return;
 8002b54:	e7e1      	b.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b56:	2108      	movs	r1, #8
 8002b58:	000c      	movs	r4, r1
 8002b5a:	409c      	lsls	r4, r3
 8002b5c:	4222      	tst	r2, r4
 8002b5e:	d0dc      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
 8002b60:	4229      	tst	r1, r5
 8002b62:	d0da      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b64:	6832      	ldr	r2, [r6, #0]
 8002b66:	3106      	adds	r1, #6
 8002b68:	438a      	bics	r2, r1
 8002b6a:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	0015      	movs	r5, r2
 8002b70:	409d      	lsls	r5, r3
 8002b72:	002b      	movs	r3, r5
 8002b74:	4907      	ldr	r1, [pc, #28]	@ (8002b94 <HAL_DMA_IRQHandler+0xb4>)
 8002b76:	684c      	ldr	r4, [r1, #4]
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b7e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002b80:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002b82:	2200      	movs	r2, #0
 8002b84:	3b01      	subs	r3, #1
 8002b86:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002b88:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0c5      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002b8e:	4798      	blx	r3
  return;
 8002b90:	e7c3      	b.n	8002b1a <HAL_DMA_IRQHandler+0x3a>
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	40020000 	.word	0x40020000

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9a:	46de      	mov	lr, fp
 8002b9c:	4657      	mov	r7, sl
 8002b9e:	464e      	mov	r6, r9
 8002ba0:	4645      	mov	r5, r8
 8002ba2:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba4:	680c      	ldr	r4, [r1, #0]
{
 8002ba6:	468b      	mov	fp, r1
  uint32_t position = 0x00u;
 8002ba8:	2300      	movs	r3, #0
{
 8002baa:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bac:	2c00      	cmp	r4, #0
 8002bae:	d068      	beq.n	8002c82 <HAL_GPIO_Init+0xea>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	4694      	mov	ip, r2
 8002bb6:	4022      	ands	r2, r4
 8002bb8:	4692      	mov	sl, r2

    if (iocurrent != 0x00u)
 8002bba:	4662      	mov	r2, ip
 8002bbc:	4214      	tst	r4, r2
 8002bbe:	d05c      	beq.n	8002c7a <HAL_GPIO_Init+0xe2>
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bc0:	2103      	movs	r1, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc2:	465a      	mov	r2, fp
 8002bc4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bc6:	40b9      	lsls	r1, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bc8:	6855      	ldr	r5, [r2, #4]
 8002bca:	2203      	movs	r2, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bcc:	43c9      	mvns	r1, r1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bce:	402a      	ands	r2, r5
 8002bd0:	1e56      	subs	r6, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bd2:	9100      	str	r1, [sp, #0]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bd4:	2e01      	cmp	r6, #1
 8002bd6:	d95b      	bls.n	8002c90 <HAL_GPIO_Init+0xf8>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	2a03      	cmp	r2, #3
 8002bda:	d000      	beq.n	8002bde <HAL_GPIO_Init+0x46>
 8002bdc:	e0ad      	b.n	8002d3a <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bde:	40ba      	lsls	r2, r7
      temp = GPIOx->MODER;
 8002be0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002be2:	9900      	ldr	r1, [sp, #0]
 8002be4:	4031      	ands	r1, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002be6:	430a      	orrs	r2, r1
      GPIOx->MODER = temp;
 8002be8:	6002      	str	r2, [r0, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bea:	22c0      	movs	r2, #192	@ 0xc0
 8002bec:	0292      	lsls	r2, r2, #10
 8002bee:	4215      	tst	r5, r2
 8002bf0:	d043      	beq.n	8002c7a <HAL_GPIO_Init+0xe2>
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002bf2:	2703      	movs	r7, #3
 8002bf4:	260f      	movs	r6, #15
 8002bf6:	495d      	ldr	r1, [pc, #372]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
 8002bf8:	401f      	ands	r7, r3
 8002bfa:	468c      	mov	ip, r1
 8002bfc:	00ff      	lsls	r7, r7, #3
 8002bfe:	40be      	lsls	r6, r7
        temp = EXTI->EXTICR[position >> 2u];
 8002c00:	089a      	lsrs	r2, r3, #2
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4462      	add	r2, ip
 8002c06:	6e11      	ldr	r1, [r2, #96]	@ 0x60
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002c08:	43b1      	bics	r1, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002c0a:	26a0      	movs	r6, #160	@ 0xa0
 8002c0c:	05f6      	lsls	r6, r6, #23
 8002c0e:	42b0      	cmp	r0, r6
 8002c10:	d00e      	beq.n	8002c30 <HAL_GPIO_Init+0x98>
 8002c12:	4e57      	ldr	r6, [pc, #348]	@ (8002d70 <HAL_GPIO_Init+0x1d8>)
 8002c14:	42b0      	cmp	r0, r6
 8002c16:	d100      	bne.n	8002c1a <HAL_GPIO_Init+0x82>
 8002c18:	e0a0      	b.n	8002d5c <HAL_GPIO_Init+0x1c4>
 8002c1a:	4e56      	ldr	r6, [pc, #344]	@ (8002d74 <HAL_GPIO_Init+0x1dc>)
 8002c1c:	42b0      	cmp	r0, r6
 8002c1e:	d100      	bne.n	8002c22 <HAL_GPIO_Init+0x8a>
 8002c20:	e0a0      	b.n	8002d64 <HAL_GPIO_Init+0x1cc>
 8002c22:	4e55      	ldr	r6, [pc, #340]	@ (8002d78 <HAL_GPIO_Init+0x1e0>)
 8002c24:	42b0      	cmp	r0, r6
 8002c26:	d100      	bne.n	8002c2a <HAL_GPIO_Init+0x92>
 8002c28:	e094      	b.n	8002d54 <HAL_GPIO_Init+0x1bc>
 8002c2a:	2605      	movs	r6, #5
 8002c2c:	40be      	lsls	r6, r7
 8002c2e:	4331      	orrs	r1, r6
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c30:	2680      	movs	r6, #128	@ 0x80
        EXTI->EXTICR[position >> 2u] = temp;
 8002c32:	6611      	str	r1, [r2, #96]	@ 0x60
        temp &= ~(iocurrent);
 8002c34:	4651      	mov	r1, sl
        temp = EXTI->RTSR1;
 8002c36:	4a4d      	ldr	r2, [pc, #308]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c38:	0376      	lsls	r6, r6, #13
        temp &= ~(iocurrent);
 8002c3a:	43c9      	mvns	r1, r1
        temp = EXTI->RTSR1;
 8002c3c:	6812      	ldr	r2, [r2, #0]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c3e:	4235      	tst	r5, r6
 8002c40:	d000      	beq.n	8002c44 <HAL_GPIO_Init+0xac>
 8002c42:	e077      	b.n	8002d34 <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 8002c44:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002c46:	4e49      	ldr	r6, [pc, #292]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
 8002c48:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
 8002c4a:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c4c:	2680      	movs	r6, #128	@ 0x80
 8002c4e:	03b6      	lsls	r6, r6, #14
 8002c50:	4235      	tst	r5, r6
 8002c52:	d16c      	bne.n	8002d2e <HAL_GPIO_Init+0x196>
        temp &= ~(iocurrent);
 8002c54:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002c56:	4e45      	ldr	r6, [pc, #276]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
 8002c58:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c5a:	2284      	movs	r2, #132	@ 0x84
 8002c5c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c5e:	03af      	lsls	r7, r5, #14
 8002c60:	d462      	bmi.n	8002d28 <HAL_GPIO_Init+0x190>
        temp &= ~(iocurrent);
 8002c62:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002c64:	2784      	movs	r7, #132	@ 0x84
 8002c66:	4e41      	ldr	r6, [pc, #260]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
 8002c68:	51f2      	str	r2, [r6, r7]

        temp = EXTI->IMR1;
 8002c6a:	2280      	movs	r2, #128	@ 0x80
 8002c6c:	58b2      	ldr	r2, [r6, r2]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c6e:	03ed      	lsls	r5, r5, #15
 8002c70:	d456      	bmi.n	8002d20 <HAL_GPIO_Init+0x188>
        temp &= ~(iocurrent);
 8002c72:	400a      	ands	r2, r1
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002c74:	2180      	movs	r1, #128	@ 0x80
 8002c76:	4d3d      	ldr	r5, [pc, #244]	@ (8002d6c <HAL_GPIO_Init+0x1d4>)
 8002c78:	506a      	str	r2, [r5, r1]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7a:	0022      	movs	r2, r4
      }
    }

    position++;
 8002c7c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c7e:	40da      	lsrs	r2, r3
 8002c80:	d196      	bne.n	8002bb0 <HAL_GPIO_Init+0x18>
  }
}
 8002c82:	b003      	add	sp, #12
 8002c84:	bcf0      	pop	{r4, r5, r6, r7}
 8002c86:	46bb      	mov	fp, r7
 8002c88:	46b2      	mov	sl, r6
 8002c8a:	46a9      	mov	r9, r5
 8002c8c:	46a0      	mov	r8, r4
 8002c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp = GPIOx->OSPEEDR;
 8002c90:	6881      	ldr	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c92:	000e      	movs	r6, r1
 8002c94:	9900      	ldr	r1, [sp, #0]
 8002c96:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c98:	4659      	mov	r1, fp
 8002c9a:	68c9      	ldr	r1, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9c:	46b1      	mov	r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c9e:	000e      	movs	r6, r1
 8002ca0:	40be      	lsls	r6, r7
 8002ca2:	46b0      	mov	r8, r6
 8002ca4:	464e      	mov	r6, r9
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	430e      	orrs	r6, r1
        GPIOx->OSPEEDR = temp;
 8002caa:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002cac:	6841      	ldr	r1, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cae:	000e      	movs	r6, r1
 8002cb0:	4661      	mov	r1, ip
 8002cb2:	438e      	bics	r6, r1
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb4:	0929      	lsrs	r1, r5, #4
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cb6:	46b0      	mov	r8, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cb8:	000e      	movs	r6, r1
 8002cba:	2101      	movs	r1, #1
 8002cbc:	400e      	ands	r6, r1
 8002cbe:	409e      	lsls	r6, r3
 8002cc0:	46b4      	mov	ip, r6
 8002cc2:	4646      	mov	r6, r8
 8002cc4:	4661      	mov	r1, ip
 8002cc6:	430e      	orrs	r6, r1
        GPIOx->OTYPER = temp;
 8002cc8:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002cca:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ccc:	000e      	movs	r6, r1
 8002cce:	9900      	ldr	r1, [sp, #0]
 8002cd0:	400e      	ands	r6, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cd2:	4659      	mov	r1, fp
 8002cd4:	6889      	ldr	r1, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cd6:	46b0      	mov	r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002cd8:	000e      	movs	r6, r1
 8002cda:	40be      	lsls	r6, r7
 8002cdc:	46b4      	mov	ip, r6
 8002cde:	4646      	mov	r6, r8
 8002ce0:	4661      	mov	r1, ip
 8002ce2:	430e      	orrs	r6, r1
        GPIOx->PUPDR = temp;
 8002ce4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce6:	2a02      	cmp	r2, #2
 8002ce8:	d000      	beq.n	8002cec <HAL_GPIO_Init+0x154>
 8002cea:	e778      	b.n	8002bde <HAL_GPIO_Init+0x46>
        temp = GPIOx->AFR[position >> 3u];
 8002cec:	08d9      	lsrs	r1, r3, #3
 8002cee:	0089      	lsls	r1, r1, #2
 8002cf0:	468c      	mov	ip, r1
 8002cf2:	4484      	add	ip, r0
 8002cf4:	4661      	mov	r1, ip
 8002cf6:	6a0e      	ldr	r6, [r1, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf8:	2107      	movs	r1, #7
 8002cfa:	4019      	ands	r1, r3
 8002cfc:	0089      	lsls	r1, r1, #2
 8002cfe:	4688      	mov	r8, r1
        temp = GPIOx->AFR[position >> 3u];
 8002d00:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d02:	210f      	movs	r1, #15
 8002d04:	4646      	mov	r6, r8
 8002d06:	40b1      	lsls	r1, r6
 8002d08:	9e01      	ldr	r6, [sp, #4]
 8002d0a:	438e      	bics	r6, r1
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0c:	4659      	mov	r1, fp
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d0e:	9601      	str	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d10:	4646      	mov	r6, r8
 8002d12:	6909      	ldr	r1, [r1, #16]
 8002d14:	40b1      	lsls	r1, r6
 8002d16:	9e01      	ldr	r6, [sp, #4]
 8002d18:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3u] = temp;
 8002d1a:	4661      	mov	r1, ip
 8002d1c:	620e      	str	r6, [r1, #32]
 8002d1e:	e75e      	b.n	8002bde <HAL_GPIO_Init+0x46>
          temp |= iocurrent;
 8002d20:	4651      	mov	r1, sl
 8002d22:	4311      	orrs	r1, r2
 8002d24:	000a      	movs	r2, r1
 8002d26:	e7a5      	b.n	8002c74 <HAL_GPIO_Init+0xdc>
          temp |= iocurrent;
 8002d28:	4656      	mov	r6, sl
 8002d2a:	4332      	orrs	r2, r6
 8002d2c:	e79a      	b.n	8002c64 <HAL_GPIO_Init+0xcc>
          temp |= iocurrent;
 8002d2e:	4656      	mov	r6, sl
 8002d30:	4332      	orrs	r2, r6
 8002d32:	e790      	b.n	8002c56 <HAL_GPIO_Init+0xbe>
          temp |= iocurrent;
 8002d34:	4656      	mov	r6, sl
 8002d36:	4332      	orrs	r2, r6
 8002d38:	e785      	b.n	8002c46 <HAL_GPIO_Init+0xae>
 8002d3a:	000e      	movs	r6, r1
        temp = GPIOx->PUPDR;
 8002d3c:	68c1      	ldr	r1, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d3e:	4031      	ands	r1, r6
 8002d40:	4688      	mov	r8, r1
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d42:	4659      	mov	r1, fp
 8002d44:	6889      	ldr	r1, [r1, #8]
 8002d46:	40b9      	lsls	r1, r7
 8002d48:	468c      	mov	ip, r1
 8002d4a:	4641      	mov	r1, r8
 8002d4c:	4666      	mov	r6, ip
 8002d4e:	4331      	orrs	r1, r6
        GPIOx->PUPDR = temp;
 8002d50:	60c1      	str	r1, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d52:	e744      	b.n	8002bde <HAL_GPIO_Init+0x46>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002d54:	2603      	movs	r6, #3
 8002d56:	40be      	lsls	r6, r7
 8002d58:	4331      	orrs	r1, r6
 8002d5a:	e769      	b.n	8002c30 <HAL_GPIO_Init+0x98>
 8002d5c:	2601      	movs	r6, #1
 8002d5e:	40be      	lsls	r6, r7
 8002d60:	4331      	orrs	r1, r6
 8002d62:	e765      	b.n	8002c30 <HAL_GPIO_Init+0x98>
 8002d64:	2602      	movs	r6, #2
 8002d66:	40be      	lsls	r6, r7
 8002d68:	4331      	orrs	r1, r6
 8002d6a:	e761      	b.n	8002c30 <HAL_GPIO_Init+0x98>
 8002d6c:	40021800 	.word	0x40021800
 8002d70:	50000400 	.word	0x50000400
 8002d74:	50000800 	.word	0x50000800
 8002d78:	50000c00 	.word	0x50000c00

08002d7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d80:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d82:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d84:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8002d86:	e7fc      	b.n	8002d82 <HAL_GPIO_WritePin+0x6>

08002d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d88:	b570      	push	{r4, r5, r6, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d8a:	4c13      	ldr	r4, [pc, #76]	@ (8002dd8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 8002d8c:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002d8e:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002d90:	2500      	movs	r5, #0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002d92:	4013      	ands	r3, r2
 8002d94:	4303      	orrs	r3, r0
 8002d96:	6023      	str	r3, [r4, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4298      	cmp	r0, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8002da0:	0028      	movs	r0, r5
 8002da2:	bd70      	pop	{r4, r5, r6, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002da4:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8002da6:	490f      	ldr	r1, [pc, #60]	@ (8002de4 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0058      	lsls	r0, r3, #1
 8002dac:	18c0      	adds	r0, r0, r3
 8002dae:	0040      	lsls	r0, r0, #1
 8002db0:	f7fd f9a8 	bl	8000104 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002db4:	2280      	movs	r2, #128	@ 0x80
 8002db6:	6963      	ldr	r3, [r4, #20]
 8002db8:	00d2      	lsls	r2, r2, #3
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002dba:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dbc:	4213      	tst	r3, r2
 8002dbe:	d102      	bne.n	8002dc6 <HAL_PWREx_ControlVoltageScaling+0x3e>
 8002dc0:	e7ee      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x18>
      if (wait_loop_index != 0U)
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d005      	beq.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x4a>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc6:	6963      	ldr	r3, [r4, #20]
        wait_loop_index--;
 8002dc8:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dca:	4213      	tst	r3, r2
 8002dcc:	d1f9      	bne.n	8002dc2 <HAL_PWREx_ControlVoltageScaling+0x3a>
  return HAL_OK;
 8002dce:	2500      	movs	r5, #0
 8002dd0:	e7e6      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 8002dd2:	2503      	movs	r5, #3
 8002dd4:	e7e4      	b.n	8002da0 <HAL_PWREx_ControlVoltageScaling+0x18>
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	fffff9ff 	.word	0xfffff9ff
 8002de0:	20000004 	.word	0x20000004
 8002de4:	000f4240 	.word	0x000f4240

08002de8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dea:	46ce      	mov	lr, r9
 8002dec:	4647      	mov	r7, r8
 8002dee:	b580      	push	{r7, lr}
 8002df0:	0004      	movs	r4, r0
 8002df2:	b083      	sub	sp, #12
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d027      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df8:	6803      	ldr	r3, [r0, #0]
 8002dfa:	07da      	lsls	r2, r3, #31
 8002dfc:	d511      	bpl.n	8002e22 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	2238      	movs	r2, #56	@ 0x38
 8002e00:	49c0      	ldr	r1, [pc, #768]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002e02:	6888      	ldr	r0, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e04:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e06:	4002      	ands	r2, r0

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002e08:	2a10      	cmp	r2, #16
 8002e0a:	d100      	bne.n	8002e0e <HAL_RCC_OscConfig+0x26>
 8002e0c:	e0cc      	b.n	8002fa8 <HAL_RCC_OscConfig+0x1c0>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002e0e:	2a08      	cmp	r2, #8
 8002e10:	d000      	beq.n	8002e14 <HAL_RCC_OscConfig+0x2c>
 8002e12:	e0cd      	b.n	8002fb0 <HAL_RCC_OscConfig+0x1c8>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	4abb      	ldr	r2, [pc, #748]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	0392      	lsls	r2, r2, #14
 8002e1a:	d502      	bpl.n	8002e22 <HAL_RCC_OscConfig+0x3a>
 8002e1c:	6862      	ldr	r2, [r4, #4]
 8002e1e:	2a00      	cmp	r2, #0
 8002e20:	d012      	beq.n	8002e48 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e22:	079a      	lsls	r2, r3, #30
 8002e24:	d532      	bpl.n	8002e8c <HAL_RCC_OscConfig+0xa4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e26:	2338      	movs	r3, #56	@ 0x38
 8002e28:	4ab6      	ldr	r2, [pc, #728]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002e2a:	6891      	ldr	r1, [r2, #8]
 8002e2c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e2e:	68d1      	ldr	r1, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d100      	bne.n	8002e36 <HAL_RCC_OscConfig+0x4e>
 8002e34:	e10b      	b.n	800304e <HAL_RCC_OscConfig+0x266>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d000      	beq.n	8002e3c <HAL_RCC_OscConfig+0x54>
 8002e3a:	e10d      	b.n	8003058 <HAL_RCC_OscConfig+0x270>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	6813      	ldr	r3, [r2, #0]
 8002e3e:	055b      	lsls	r3, r3, #21
 8002e40:	d508      	bpl.n	8002e54 <HAL_RCC_OscConfig+0x6c>
 8002e42:	68e3      	ldr	r3, [r4, #12]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_RCC_OscConfig+0x6c>
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
        }
      }
    }
  }
  return HAL_OK;
}
 8002e4a:	b003      	add	sp, #12
 8002e4c:	bcc0      	pop	{r6, r7}
 8002e4e:	46b9      	mov	r9, r7
 8002e50:	46b0      	mov	r8, r6
 8002e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	6851      	ldr	r1, [r2, #4]
 8002e56:	6963      	ldr	r3, [r4, #20]
 8002e58:	48ab      	ldr	r0, [pc, #684]	@ (8003108 <HAL_RCC_OscConfig+0x320>)
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	4001      	ands	r1, r0
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6053      	str	r3, [r2, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002e62:	4aa8      	ldr	r2, [pc, #672]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002e64:	49a9      	ldr	r1, [pc, #676]	@ (800310c <HAL_RCC_OscConfig+0x324>)
 8002e66:	6813      	ldr	r3, [r2, #0]
 8002e68:	400b      	ands	r3, r1
 8002e6a:	6921      	ldr	r1, [r4, #16]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	6013      	str	r3, [r2, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002e70:	6813      	ldr	r3, [r2, #0]
 8002e72:	4aa7      	ldr	r2, [pc, #668]	@ (8003110 <HAL_RCC_OscConfig+0x328>)
 8002e74:	049b      	lsls	r3, r3, #18
 8002e76:	0f5b      	lsrs	r3, r3, #29
 8002e78:	40da      	lsrs	r2, r3
 8002e7a:	49a6      	ldr	r1, [pc, #664]	@ (8003114 <HAL_RCC_OscConfig+0x32c>)
 8002e7c:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e7e:	4ba6      	ldr	r3, [pc, #664]	@ (8003118 <HAL_RCC_OscConfig+0x330>)
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	f7fe ffc3 	bl	8001e0c <HAL_InitTick>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d1de      	bne.n	8002e48 <HAL_RCC_OscConfig+0x60>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	071a      	lsls	r2, r3, #28
 8002e8e:	d46d      	bmi.n	8002f6c <HAL_RCC_OscConfig+0x184>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e90:	075b      	lsls	r3, r3, #29
 8002e92:	d545      	bpl.n	8002f20 <HAL_RCC_OscConfig+0x138>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e94:	2338      	movs	r3, #56	@ 0x38
 8002e96:	4a9b      	ldr	r2, [pc, #620]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002e98:	6891      	ldr	r1, [r2, #8]
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d100      	bne.n	8002ea2 <HAL_RCC_OscConfig+0xba>
 8002ea0:	e0cc      	b.n	800303c <HAL_RCC_OscConfig+0x254>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea2:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002ea4:	2000      	movs	r0, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ea6:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002ea8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002eaa:	4681      	mov	r9, r0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eac:	4219      	tst	r1, r3
 8002eae:	d108      	bne.n	8002ec2 <HAL_RCC_OscConfig+0xda>
        __HAL_RCC_PWR_CLK_ENABLE();
 8002eb0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002eb2:	4319      	orrs	r1, r3
 8002eb4:	63d1      	str	r1, [r2, #60]	@ 0x3c
 8002eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002eb8:	4013      	ands	r3, r2
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4699      	mov	r9, r3
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec2:	2780      	movs	r7, #128	@ 0x80
 8002ec4:	4e95      	ldr	r6, [pc, #596]	@ (800311c <HAL_RCC_OscConfig+0x334>)
 8002ec6:	007f      	lsls	r7, r7, #1
 8002ec8:	6833      	ldr	r3, [r6, #0]
 8002eca:	423b      	tst	r3, r7
 8002ecc:	d100      	bne.n	8002ed0 <HAL_RCC_OscConfig+0xe8>
 8002ece:	e0ff      	b.n	80030d0 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	68a3      	ldr	r3, [r4, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d100      	bne.n	8002ed8 <HAL_RCC_OscConfig+0xf0>
 8002ed6:	e0e5      	b.n	80030a4 <HAL_RCC_OscConfig+0x2bc>
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d100      	bne.n	8002ede <HAL_RCC_OscConfig+0xf6>
 8002edc:	e1d1      	b.n	8003282 <HAL_RCC_OscConfig+0x49a>
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4e88      	ldr	r6, [pc, #544]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002ee2:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8002ee4:	438a      	bics	r2, r1
 8002ee6:	65f2      	str	r2, [r6, #92]	@ 0x5c
 8002ee8:	6df2      	ldr	r2, [r6, #92]	@ 0x5c
 8002eea:	3103      	adds	r1, #3
 8002eec:	438a      	bics	r2, r1
 8002eee:	65f2      	str	r2, [r6, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d000      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x10e>
 8002ef4:	e0da      	b.n	80030ac <HAL_RCC_OscConfig+0x2c4>
        tickstart = HAL_GetTick();
 8002ef6:	f7fe ffcf 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efa:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 8002efc:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002efe:	4698      	mov	r8, r3
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f00:	4d87      	ldr	r5, [pc, #540]	@ (8003120 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f02:	e005      	b.n	8002f10 <HAL_RCC_OscConfig+0x128>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7fe ffc8 	bl	8001e98 <HAL_GetTick>
 8002f08:	1bc0      	subs	r0, r0, r7
 8002f0a:	42a8      	cmp	r0, r5
 8002f0c:	d900      	bls.n	8002f10 <HAL_RCC_OscConfig+0x128>
 8002f0e:	e0ee      	b.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f10:	4642      	mov	r2, r8
 8002f12:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 8002f14:	421a      	tst	r2, r3
 8002f16:	d1f5      	bne.n	8002f04 <HAL_RCC_OscConfig+0x11c>
      if (pwrclkchanged == SET)
 8002f18:	464b      	mov	r3, r9
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d100      	bne.n	8002f20 <HAL_RCC_OscConfig+0x138>
 8002f1e:	e16a      	b.n	80031f6 <HAL_RCC_OscConfig+0x40e>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f20:	69e3      	ldr	r3, [r4, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d020      	beq.n	8002f68 <HAL_RCC_OscConfig+0x180>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f26:	2238      	movs	r2, #56	@ 0x38
 8002f28:	4d76      	ldr	r5, [pc, #472]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002f2a:	68a9      	ldr	r1, [r5, #8]
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	2a10      	cmp	r2, #16
 8002f30:	d100      	bne.n	8002f34 <HAL_RCC_OscConfig+0x14c>
 8002f32:	e11d      	b.n	8003170 <HAL_RCC_OscConfig+0x388>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x152>
 8002f38:	e163      	b.n	8003202 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_PLL_DISABLE();
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	4a79      	ldr	r2, [pc, #484]	@ (8003124 <HAL_RCC_OscConfig+0x33c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f3e:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002f40:	4013      	ands	r3, r2
 8002f42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002f44:	f7fe ffa8 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f48:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 8002f4a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f4c:	e005      	b.n	8002f5a <HAL_RCC_OscConfig+0x172>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe ffa3 	bl	8001e98 <HAL_GetTick>
 8002f52:	1b00      	subs	r0, r0, r4
 8002f54:	2802      	cmp	r0, #2
 8002f56:	d900      	bls.n	8002f5a <HAL_RCC_OscConfig+0x172>
 8002f58:	e0c9      	b.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	4233      	tst	r3, r6
 8002f5e:	d1f6      	bne.n	8002f4e <HAL_RCC_OscConfig+0x166>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002f60:	68eb      	ldr	r3, [r5, #12]
 8002f62:	4a71      	ldr	r2, [pc, #452]	@ (8003128 <HAL_RCC_OscConfig+0x340>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8002f68:	2000      	movs	r0, #0
 8002f6a:	e76e      	b.n	8002e4a <HAL_RCC_OscConfig+0x62>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f6c:	2238      	movs	r2, #56	@ 0x38
 8002f6e:	4d65      	ldr	r5, [pc, #404]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002f70:	68a9      	ldr	r1, [r5, #8]
 8002f72:	400a      	ands	r2, r1
 8002f74:	2a18      	cmp	r2, #24
 8002f76:	d043      	beq.n	8003000 <HAL_RCC_OscConfig+0x218>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f78:	69a3      	ldr	r3, [r4, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCC_OscConfig+0x198>
 8002f7e:	e0b8      	b.n	80030f2 <HAL_RCC_OscConfig+0x30a>
        __HAL_RCC_LSI_ENABLE();
 8002f80:	2201      	movs	r2, #1
 8002f82:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f84:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 8002f86:	4313      	orrs	r3, r2
 8002f88:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002f8a:	f7fe ff85 	bl	8001e98 <HAL_GetTick>
 8002f8e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f90:	e005      	b.n	8002f9e <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f92:	f7fe ff81 	bl	8001e98 <HAL_GetTick>
 8002f96:	1b80      	subs	r0, r0, r6
 8002f98:	2802      	cmp	r0, #2
 8002f9a:	d900      	bls.n	8002f9e <HAL_RCC_OscConfig+0x1b6>
 8002f9c:	e0a7      	b.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f9e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002fa0:	421f      	tst	r7, r3
 8002fa2:	d0f6      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1aa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa4:	6823      	ldr	r3, [r4, #0]
 8002fa6:	e773      	b.n	8002e90 <HAL_RCC_OscConfig+0xa8>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa8:	43c9      	mvns	r1, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002faa:	0789      	lsls	r1, r1, #30
 8002fac:	d100      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x1c8>
 8002fae:	e731      	b.n	8002e14 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb0:	2280      	movs	r2, #128	@ 0x80
 8002fb2:	6863      	ldr	r3, [r4, #4]
 8002fb4:	0252      	lsls	r2, r2, #9
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_RCC_OscConfig+0x22a>
 8002fba:	21a0      	movs	r1, #160	@ 0xa0
 8002fbc:	02c9      	lsls	r1, r1, #11
 8002fbe:	428b      	cmp	r3, r1
 8002fc0:	d100      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x1dc>
 8002fc2:	e103      	b.n	80031cc <HAL_RCC_OscConfig+0x3e4>
 8002fc4:	4d4f      	ldr	r5, [pc, #316]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8002fc6:	4959      	ldr	r1, [pc, #356]	@ (800312c <HAL_RCC_OscConfig+0x344>)
 8002fc8:	682a      	ldr	r2, [r5, #0]
 8002fca:	400a      	ands	r2, r1
 8002fcc:	602a      	str	r2, [r5, #0]
 8002fce:	682a      	ldr	r2, [r5, #0]
 8002fd0:	4957      	ldr	r1, [pc, #348]	@ (8003130 <HAL_RCC_OscConfig+0x348>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d11f      	bne.n	800301a <HAL_RCC_OscConfig+0x232>
        tickstart = HAL_GetTick();
 8002fda:	f7fe ff5d 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fde:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002fe0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fe2:	02bf      	lsls	r7, r7, #10
 8002fe4:	e004      	b.n	8002ff0 <HAL_RCC_OscConfig+0x208>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe6:	f7fe ff57 	bl	8001e98 <HAL_GetTick>
 8002fea:	1b80      	subs	r0, r0, r6
 8002fec:	2864      	cmp	r0, #100	@ 0x64
 8002fee:	d87e      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	423b      	tst	r3, r7
 8002ff4:	d1f7      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x1fe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ff6:	6823      	ldr	r3, [r4, #0]
 8002ff8:	079a      	lsls	r2, r3, #30
 8002ffa:	d400      	bmi.n	8002ffe <HAL_RCC_OscConfig+0x216>
 8002ffc:	e746      	b.n	8002e8c <HAL_RCC_OscConfig+0xa4>
 8002ffe:	e712      	b.n	8002e26 <HAL_RCC_OscConfig+0x3e>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003000:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8003002:	0792      	lsls	r2, r2, #30
 8003004:	d400      	bmi.n	8003008 <HAL_RCC_OscConfig+0x220>
 8003006:	e743      	b.n	8002e90 <HAL_RCC_OscConfig+0xa8>
 8003008:	69a2      	ldr	r2, [r4, #24]
 800300a:	2a00      	cmp	r2, #0
 800300c:	d000      	beq.n	8003010 <HAL_RCC_OscConfig+0x228>
 800300e:	e73f      	b.n	8002e90 <HAL_RCC_OscConfig+0xa8>
 8003010:	e71a      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003012:	4a3c      	ldr	r2, [pc, #240]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8003014:	6811      	ldr	r1, [r2, #0]
 8003016:	430b      	orrs	r3, r1
 8003018:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800301a:	f7fe ff3d 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800301e:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003020:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003022:	4f38      	ldr	r7, [pc, #224]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 8003024:	02b6      	lsls	r6, r6, #10
 8003026:	e004      	b.n	8003032 <HAL_RCC_OscConfig+0x24a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe ff36 	bl	8001e98 <HAL_GetTick>
 800302c:	1b40      	subs	r0, r0, r5
 800302e:	2864      	cmp	r0, #100	@ 0x64
 8003030:	d85d      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	4233      	tst	r3, r6
 8003036:	d0f7      	beq.n	8003028 <HAL_RCC_OscConfig+0x240>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003038:	6823      	ldr	r3, [r4, #0]
 800303a:	e7dd      	b.n	8002ff8 <HAL_RCC_OscConfig+0x210>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800303c:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 800303e:	079b      	lsls	r3, r3, #30
 8003040:	d400      	bmi.n	8003044 <HAL_RCC_OscConfig+0x25c>
 8003042:	e76d      	b.n	8002f20 <HAL_RCC_OscConfig+0x138>
 8003044:	68a3      	ldr	r3, [r4, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d000      	beq.n	800304c <HAL_RCC_OscConfig+0x264>
 800304a:	e769      	b.n	8002f20 <HAL_RCC_OscConfig+0x138>
 800304c:	e6fc      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800304e:	3b0d      	subs	r3, #13
 8003050:	400b      	ands	r3, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003052:	2b02      	cmp	r3, #2
 8003054:	d100      	bne.n	8003058 <HAL_RCC_OscConfig+0x270>
 8003056:	e0c3      	b.n	80031e0 <HAL_RCC_OscConfig+0x3f8>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003058:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800305a:	4d2a      	ldr	r5, [pc, #168]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800305c:	2b00      	cmp	r3, #0
 800305e:	d073      	beq.n	8003148 <HAL_RCC_OscConfig+0x360>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003060:	682b      	ldr	r3, [r5, #0]
 8003062:	4a2a      	ldr	r2, [pc, #168]	@ (800310c <HAL_RCC_OscConfig+0x324>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003064:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003066:	4013      	ands	r3, r2
 8003068:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800306a:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800306c:	4313      	orrs	r3, r2
 800306e:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8003070:	2380      	movs	r3, #128	@ 0x80
 8003072:	682a      	ldr	r2, [r5, #0]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4313      	orrs	r3, r2
 8003078:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800307a:	f7fe ff0d 	bl	8001e98 <HAL_GetTick>
 800307e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003080:	e004      	b.n	800308c <HAL_RCC_OscConfig+0x2a4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7fe ff09 	bl	8001e98 <HAL_GetTick>
 8003086:	1b80      	subs	r0, r0, r6
 8003088:	2802      	cmp	r0, #2
 800308a:	d830      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800308c:	682b      	ldr	r3, [r5, #0]
 800308e:	423b      	tst	r3, r7
 8003090:	d0f7      	beq.n	8003082 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003092:	686a      	ldr	r2, [r5, #4]
 8003094:	6963      	ldr	r3, [r4, #20]
 8003096:	491c      	ldr	r1, [pc, #112]	@ (8003108 <HAL_RCC_OscConfig+0x320>)
 8003098:	021b      	lsls	r3, r3, #8
 800309a:	400a      	ands	r2, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	e6f3      	b.n	8002e8c <HAL_RCC_OscConfig+0xa4>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	4917      	ldr	r1, [pc, #92]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
 80030a6:	6dca      	ldr	r2, [r1, #92]	@ 0x5c
 80030a8:	4313      	orrs	r3, r2
 80030aa:	65cb      	str	r3, [r1, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 80030ac:	f7fe fef4 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b0:	4b14      	ldr	r3, [pc, #80]	@ (8003104 <HAL_RCC_OscConfig+0x31c>)
        tickstart = HAL_GetTick();
 80030b2:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b4:	4698      	mov	r8, r3
 80030b6:	2702      	movs	r7, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	4d19      	ldr	r5, [pc, #100]	@ (8003120 <HAL_RCC_OscConfig+0x338>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ba:	e004      	b.n	80030c6 <HAL_RCC_OscConfig+0x2de>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe feec 	bl	8001e98 <HAL_GetTick>
 80030c0:	1b80      	subs	r0, r0, r6
 80030c2:	42a8      	cmp	r0, r5
 80030c4:	d813      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030c6:	4643      	mov	r3, r8
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	421f      	tst	r7, r3
 80030cc:	d0f6      	beq.n	80030bc <HAL_RCC_OscConfig+0x2d4>
 80030ce:	e723      	b.n	8002f18 <HAL_RCC_OscConfig+0x130>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030d0:	6833      	ldr	r3, [r6, #0]
 80030d2:	433b      	orrs	r3, r7
 80030d4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80030d6:	f7fe fedf 	bl	8001e98 <HAL_GetTick>
 80030da:	0005      	movs	r5, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030dc:	6833      	ldr	r3, [r6, #0]
 80030de:	423b      	tst	r3, r7
 80030e0:	d000      	beq.n	80030e4 <HAL_RCC_OscConfig+0x2fc>
 80030e2:	e6f5      	b.n	8002ed0 <HAL_RCC_OscConfig+0xe8>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fe fed8 	bl	8001e98 <HAL_GetTick>
 80030e8:	1b40      	subs	r0, r0, r5
 80030ea:	2802      	cmp	r0, #2
 80030ec:	d9f6      	bls.n	80030dc <HAL_RCC_OscConfig+0x2f4>
            return HAL_TIMEOUT;
 80030ee:	2003      	movs	r0, #3
 80030f0:	e6ab      	b.n	8002e4a <HAL_RCC_OscConfig+0x62>
        __HAL_RCC_LSI_DISABLE();
 80030f2:	2201      	movs	r2, #1
 80030f4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f6:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80030f8:	4393      	bics	r3, r2
 80030fa:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80030fc:	f7fe fecc 	bl	8001e98 <HAL_GetTick>
 8003100:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003102:	e01c      	b.n	800313e <HAL_RCC_OscConfig+0x356>
 8003104:	40021000 	.word	0x40021000
 8003108:	ffff80ff 	.word	0xffff80ff
 800310c:	ffffc7ff 	.word	0xffffc7ff
 8003110:	00f42400 	.word	0x00f42400
 8003114:	20000004 	.word	0x20000004
 8003118:	2000000c 	.word	0x2000000c
 800311c:	40007000 	.word	0x40007000
 8003120:	00001388 	.word	0x00001388
 8003124:	feffffff 	.word	0xfeffffff
 8003128:	eefefffc 	.word	0xeefefffc
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	fffbffff 	.word	0xfffbffff
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003134:	f7fe feb0 	bl	8001e98 <HAL_GetTick>
 8003138:	1b80      	subs	r0, r0, r6
 800313a:	2802      	cmp	r0, #2
 800313c:	d8d7      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800313e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003140:	421f      	tst	r7, r3
 8003142:	d1f7      	bne.n	8003134 <HAL_RCC_OscConfig+0x34c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	e6a3      	b.n	8002e90 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_DISABLE();
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	4a55      	ldr	r2, [pc, #340]	@ (80032a0 <HAL_RCC_OscConfig+0x4b8>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800314c:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 800314e:	4013      	ands	r3, r2
 8003150:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003152:	f7fe fea1 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003156:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 8003158:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800315a:	e004      	b.n	8003166 <HAL_RCC_OscConfig+0x37e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800315c:	f7fe fe9c 	bl	8001e98 <HAL_GetTick>
 8003160:	1b80      	subs	r0, r0, r6
 8003162:	2802      	cmp	r0, #2
 8003164:	d8c3      	bhi.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003166:	682b      	ldr	r3, [r5, #0]
 8003168:	423b      	tst	r3, r7
 800316a:	d1f7      	bne.n	800315c <HAL_RCC_OscConfig+0x374>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316c:	6823      	ldr	r3, [r4, #0]
 800316e:	e68d      	b.n	8002e8c <HAL_RCC_OscConfig+0xa4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003170:	2b01      	cmp	r3, #1
 8003172:	d100      	bne.n	8003176 <HAL_RCC_OscConfig+0x38e>
 8003174:	e668      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 8003178:	68e8      	ldr	r0, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	6a21      	ldr	r1, [r4, #32]
 800317c:	4002      	ands	r2, r0
 800317e:	428a      	cmp	r2, r1
 8003180:	d000      	beq.n	8003184 <HAL_RCC_OscConfig+0x39c>
 8003182:	e661      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	2270      	movs	r2, #112	@ 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003188:	4002      	ands	r2, r0
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318a:	428a      	cmp	r2, r1
 800318c:	d000      	beq.n	8003190 <HAL_RCC_OscConfig+0x3a8>
 800318e:	e65b      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003190:	21fe      	movs	r1, #254	@ 0xfe
 8003192:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003194:	01c9      	lsls	r1, r1, #7
 8003196:	4001      	ands	r1, r0
 8003198:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800319a:	4291      	cmp	r1, r2
 800319c:	d000      	beq.n	80031a0 <HAL_RCC_OscConfig+0x3b8>
 800319e:	e653      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a0:	22f8      	movs	r2, #248	@ 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a4:	0392      	lsls	r2, r2, #14
 80031a6:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031a8:	428a      	cmp	r2, r1
 80031aa:	d000      	beq.n	80031ae <HAL_RCC_OscConfig+0x3c6>
 80031ac:	e64c      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031ae:	22e0      	movs	r2, #224	@ 0xe0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031b2:	0512      	lsls	r2, r2, #20
 80031b4:	4002      	ands	r2, r0
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031b6:	428a      	cmp	r2, r1
 80031b8:	d000      	beq.n	80031bc <HAL_RCC_OscConfig+0x3d4>
 80031ba:	e645      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80031be:	0f40      	lsrs	r0, r0, #29
 80031c0:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031c2:	1ac0      	subs	r0, r0, r3
 80031c4:	1e43      	subs	r3, r0, #1
 80031c6:	4198      	sbcs	r0, r3
 80031c8:	b2c0      	uxtb	r0, r0
 80031ca:	e63e      	b.n	8002e4a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	2180      	movs	r1, #128	@ 0x80
 80031ce:	4b35      	ldr	r3, [pc, #212]	@ (80032a4 <HAL_RCC_OscConfig+0x4bc>)
 80031d0:	02c9      	lsls	r1, r1, #11
 80031d2:	6818      	ldr	r0, [r3, #0]
 80031d4:	4301      	orrs	r1, r0
 80031d6:	6019      	str	r1, [r3, #0]
 80031d8:	6819      	ldr	r1, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031de:	e71c      	b.n	800301a <HAL_RCC_OscConfig+0x232>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031e0:	6813      	ldr	r3, [r2, #0]
 80031e2:	055b      	lsls	r3, r3, #21
 80031e4:	d457      	bmi.n	8003296 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e6:	6851      	ldr	r1, [r2, #4]
 80031e8:	6963      	ldr	r3, [r4, #20]
 80031ea:	482f      	ldr	r0, [pc, #188]	@ (80032a8 <HAL_RCC_OscConfig+0x4c0>)
 80031ec:	021b      	lsls	r3, r3, #8
 80031ee:	4001      	ands	r1, r0
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6053      	str	r3, [r2, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f4:	e643      	b.n	8002e7e <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_PWR_CLK_DISABLE();
 80031f6:	4a2b      	ldr	r2, [pc, #172]	@ (80032a4 <HAL_RCC_OscConfig+0x4bc>)
 80031f8:	492c      	ldr	r1, [pc, #176]	@ (80032ac <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80031fc:	400b      	ands	r3, r1
 80031fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003200:	e68e      	b.n	8002f20 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_PLL_DISABLE();
 8003202:	682b      	ldr	r3, [r5, #0]
 8003204:	4a2a      	ldr	r2, [pc, #168]	@ (80032b0 <HAL_RCC_OscConfig+0x4c8>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003206:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8003208:	4013      	ands	r3, r2
 800320a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800320c:	f7fe fe44 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003210:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8003212:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003214:	e005      	b.n	8003222 <HAL_RCC_OscConfig+0x43a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fe3f 	bl	8001e98 <HAL_GetTick>
 800321a:	1b80      	subs	r0, r0, r6
 800321c:	2802      	cmp	r0, #2
 800321e:	d900      	bls.n	8003222 <HAL_RCC_OscConfig+0x43a>
 8003220:	e765      	b.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003222:	682b      	ldr	r3, [r5, #0]
 8003224:	423b      	tst	r3, r7
 8003226:	d1f6      	bne.n	8003216 <HAL_RCC_OscConfig+0x42e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003228:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800322a:	6a23      	ldr	r3, [r4, #32]
 800322c:	68ea      	ldr	r2, [r5, #12]
 800322e:	430b      	orrs	r3, r1
 8003230:	4920      	ldr	r1, [pc, #128]	@ (80032b4 <HAL_RCC_OscConfig+0x4cc>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003232:	4e1c      	ldr	r6, [pc, #112]	@ (80032a4 <HAL_RCC_OscConfig+0x4bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	400a      	ands	r2, r1
 8003236:	4313      	orrs	r3, r2
 8003238:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800323a:	4313      	orrs	r3, r2
 800323c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800323e:	4313      	orrs	r3, r2
 8003240:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003242:	4313      	orrs	r3, r2
 8003244:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003246:	0212      	lsls	r2, r2, #8
 8003248:	4313      	orrs	r3, r2
 800324a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	682a      	ldr	r2, [r5, #0]
 8003250:	045b      	lsls	r3, r3, #17
 8003252:	4313      	orrs	r3, r2
 8003254:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003256:	2380      	movs	r3, #128	@ 0x80
 8003258:	68ea      	ldr	r2, [r5, #12]
 800325a:	055b      	lsls	r3, r3, #21
 800325c:	4313      	orrs	r3, r2
 800325e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8003260:	f7fe fe1a 	bl	8001e98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003264:	2580      	movs	r5, #128	@ 0x80
        tickstart = HAL_GetTick();
 8003266:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003268:	04ad      	lsls	r5, r5, #18
 800326a:	e005      	b.n	8003278 <HAL_RCC_OscConfig+0x490>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fe14 	bl	8001e98 <HAL_GetTick>
 8003270:	1b00      	subs	r0, r0, r4
 8003272:	2802      	cmp	r0, #2
 8003274:	d900      	bls.n	8003278 <HAL_RCC_OscConfig+0x490>
 8003276:	e73a      	b.n	80030ee <HAL_RCC_OscConfig+0x306>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003278:	6833      	ldr	r3, [r6, #0]
 800327a:	422b      	tst	r3, r5
 800327c:	d0f6      	beq.n	800326c <HAL_RCC_OscConfig+0x484>
  return HAL_OK;
 800327e:	2000      	movs	r0, #0
 8003280:	e5e3      	b.n	8002e4a <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003282:	2104      	movs	r1, #4
 8003284:	4b07      	ldr	r3, [pc, #28]	@ (80032a4 <HAL_RCC_OscConfig+0x4bc>)
 8003286:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003288:	430a      	orrs	r2, r1
 800328a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800328c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800328e:	3903      	subs	r1, #3
 8003290:	430a      	orrs	r2, r1
 8003292:	65da      	str	r2, [r3, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003294:	e70a      	b.n	80030ac <HAL_RCC_OscConfig+0x2c4>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1a4      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3fe>
 800329c:	e5d4      	b.n	8002e48 <HAL_RCC_OscConfig+0x60>
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	fffffeff 	.word	0xfffffeff
 80032a4:	40021000 	.word	0x40021000
 80032a8:	ffff80ff 	.word	0xffff80ff
 80032ac:	efffffff 	.word	0xefffffff
 80032b0:	feffffff 	.word	0xfeffffff
 80032b4:	11c1808c 	.word	0x11c1808c

080032b8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032b8:	2338      	movs	r3, #56	@ 0x38
 80032ba:	4a22      	ldr	r2, [pc, #136]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x8c>)
{
 80032bc:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032be:	6891      	ldr	r1, [r2, #8]
 80032c0:	420b      	tst	r3, r1
 80032c2:	d105      	bne.n	80032d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80032c4:	6813      	ldr	r3, [r2, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032c6:	4820      	ldr	r0, [pc, #128]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x90>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80032c8:	049b      	lsls	r3, r3, #18
 80032ca:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 80032cc:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 80032ce:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	6891      	ldr	r1, [r2, #8]
 80032d2:	4019      	ands	r1, r3
 80032d4:	2908      	cmp	r1, #8
 80032d6:	d014      	beq.n	8003302 <HAL_RCC_GetSysClockFreq+0x4a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d8:	6891      	ldr	r1, [r2, #8]
 80032da:	4019      	ands	r1, r3
 80032dc:	2910      	cmp	r1, #16
 80032de:	d012      	beq.n	8003306 <HAL_RCC_GetSysClockFreq+0x4e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032e0:	6891      	ldr	r1, [r2, #8]
 80032e2:	4019      	ands	r1, r3
 80032e4:	2920      	cmp	r1, #32
 80032e6:	d024      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032e8:	6890      	ldr	r0, [r2, #8]
 80032ea:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 80032ec:	3818      	subs	r0, #24
 80032ee:	1e43      	subs	r3, r0, #1
 80032f0:	4198      	sbcs	r0, r3
 80032f2:	4b16      	ldr	r3, [pc, #88]	@ (800334c <HAL_RCC_GetSysClockFreq+0x94>)
 80032f4:	4240      	negs	r0, r0
 80032f6:	4018      	ands	r0, r3
 80032f8:	23fa      	movs	r3, #250	@ 0xfa
 80032fa:	01db      	lsls	r3, r3, #7
 80032fc:	469c      	mov	ip, r3
 80032fe:	4460      	add	r0, ip
 8003300:	e7e5      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 8003302:	4813      	ldr	r0, [pc, #76]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x98>)
 8003304:	e7e3      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x16>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003306:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003308:	68d1      	ldr	r1, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800330a:	43db      	mvns	r3, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800330c:	68d4      	ldr	r4, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800330e:	0649      	lsls	r1, r1, #25
 8003310:	0f49      	lsrs	r1, r1, #29
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003312:	0464      	lsls	r4, r4, #17
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003314:	3101      	adds	r1, #1
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003316:	0e64      	lsrs	r4, r4, #25
    switch (pllsource)
 8003318:	079b      	lsls	r3, r3, #30
 800331a:	d00d      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x80>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800331c:	480a      	ldr	r0, [pc, #40]	@ (8003348 <HAL_RCC_GetSysClockFreq+0x90>)
 800331e:	f7fc fef1 	bl	8000104 <__udivsi3>
 8003322:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003324:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <HAL_RCC_GetSysClockFreq+0x8c>)
 8003326:	68d9      	ldr	r1, [r3, #12]
 8003328:	0f49      	lsrs	r1, r1, #29
 800332a:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 800332c:	f7fc feea 	bl	8000104 <__udivsi3>
  return sysclockfreq;
 8003330:	e7cd      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 8003332:	2080      	movs	r0, #128	@ 0x80
 8003334:	0200      	lsls	r0, r0, #8
 8003336:	e7ca      	b.n	80032ce <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003338:	4805      	ldr	r0, [pc, #20]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x98>)
 800333a:	f7fc fee3 	bl	8000104 <__udivsi3>
 800333e:	4360      	muls	r0, r4
        break;
 8003340:	e7f0      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x6c>
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	40021000 	.word	0x40021000
 8003348:	00f42400 	.word	0x00f42400
 800334c:	ffff8300 	.word	0xffff8300
 8003350:	007a1200 	.word	0x007a1200

08003354 <HAL_RCC_ClockConfig>:
{
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	46ce      	mov	lr, r9
 8003358:	4647      	mov	r7, r8
 800335a:	0005      	movs	r5, r0
 800335c:	000c      	movs	r4, r1
 800335e:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 8003360:	2800      	cmp	r0, #0
 8003362:	d026      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x5e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003364:	2207      	movs	r2, #7
 8003366:	4e57      	ldr	r6, [pc, #348]	@ (80034c4 <HAL_RCC_ClockConfig+0x170>)
 8003368:	6833      	ldr	r3, [r6, #0]
 800336a:	4013      	ands	r3, r2
 800336c:	428b      	cmp	r3, r1
 800336e:	d35e      	bcc.n	800342e <HAL_RCC_ClockConfig+0xda>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003370:	682b      	ldr	r3, [r5, #0]
 8003372:	079a      	lsls	r2, r3, #30
 8003374:	d50e      	bpl.n	8003394 <HAL_RCC_ClockConfig+0x40>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003376:	075a      	lsls	r2, r3, #29
 8003378:	d505      	bpl.n	8003386 <HAL_RCC_ClockConfig+0x32>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800337a:	22e0      	movs	r2, #224	@ 0xe0
 800337c:	4952      	ldr	r1, [pc, #328]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
 800337e:	01d2      	lsls	r2, r2, #7
 8003380:	6888      	ldr	r0, [r1, #8]
 8003382:	4302      	orrs	r2, r0
 8003384:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003386:	4950      	ldr	r1, [pc, #320]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
 8003388:	4850      	ldr	r0, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x178>)
 800338a:	688a      	ldr	r2, [r1, #8]
 800338c:	4002      	ands	r2, r0
 800338e:	68a8      	ldr	r0, [r5, #8]
 8003390:	4302      	orrs	r2, r0
 8003392:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003394:	07db      	lsls	r3, r3, #31
 8003396:	d52b      	bpl.n	80033f0 <HAL_RCC_ClockConfig+0x9c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003398:	686b      	ldr	r3, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800339a:	4a4b      	ldr	r2, [pc, #300]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339c:	2b01      	cmp	r3, #1
 800339e:	d100      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x4e>
 80033a0:	e07c      	b.n	800349c <HAL_RCC_ClockConfig+0x148>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d007      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x62>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d000      	beq.n	80033ac <HAL_RCC_ClockConfig+0x58>
 80033aa:	e07d      	b.n	80034a8 <HAL_RCC_ClockConfig+0x154>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	0552      	lsls	r2, r2, #21
 80033b0:	d404      	bmi.n	80033bc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80033b2:	2001      	movs	r0, #1
 80033b4:	e037      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	0192      	lsls	r2, r2, #6
 80033ba:	d5fa      	bpl.n	80033b2 <HAL_RCC_ClockConfig+0x5e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033bc:	2107      	movs	r1, #7
 80033be:	4e42      	ldr	r6, [pc, #264]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
 80033c0:	68b2      	ldr	r2, [r6, #8]
 80033c2:	438a      	bics	r2, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80033c8:	f7fe fd66 	bl	8001e98 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033cc:	2338      	movs	r3, #56	@ 0x38
 80033ce:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	4b3f      	ldr	r3, [pc, #252]	@ (80034d0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 80033d2:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	e004      	b.n	80033e2 <HAL_RCC_ClockConfig+0x8e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d8:	f7fe fd5e 	bl	8001e98 <HAL_GetTick>
 80033dc:	1bc0      	subs	r0, r0, r7
 80033de:	4548      	cmp	r0, r9
 80033e0:	d83b      	bhi.n	800345a <HAL_RCC_ClockConfig+0x106>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	4643      	mov	r3, r8
 80033e4:	68b2      	ldr	r2, [r6, #8]
 80033e6:	401a      	ands	r2, r3
 80033e8:	686b      	ldr	r3, [r5, #4]
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d1f3      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x84>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f0:	2207      	movs	r2, #7
 80033f2:	4e34      	ldr	r6, [pc, #208]	@ (80034c4 <HAL_RCC_ClockConfig+0x170>)
 80033f4:	6833      	ldr	r3, [r6, #0]
 80033f6:	4013      	ands	r3, r2
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	d838      	bhi.n	800346e <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	075b      	lsls	r3, r3, #29
 8003400:	d42d      	bmi.n	800345e <HAL_RCC_ClockConfig+0x10a>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003402:	f7ff ff59 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003406:	4b30      	ldr	r3, [pc, #192]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
 8003408:	4a32      	ldr	r2, [pc, #200]	@ (80034d4 <HAL_RCC_ClockConfig+0x180>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4932      	ldr	r1, [pc, #200]	@ (80034d8 <HAL_RCC_ClockConfig+0x184>)
 800340e:	051b      	lsls	r3, r3, #20
 8003410:	0f1b      	lsrs	r3, r3, #28
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	589b      	ldr	r3, [r3, r2]
 8003416:	221f      	movs	r2, #31
 8003418:	4013      	ands	r3, r2
 800341a:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 800341c:	4b2f      	ldr	r3, [pc, #188]	@ (80034dc <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800341e:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	f7fe fcf3 	bl	8001e0c <HAL_InitTick>
}
 8003426:	bcc0      	pop	{r6, r7}
 8003428:	46b9      	mov	r9, r7
 800342a:	46b0      	mov	r8, r6
 800342c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	6833      	ldr	r3, [r6, #0]
 8003430:	4393      	bics	r3, r2
 8003432:	430b      	orrs	r3, r1
 8003434:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003436:	f7fe fd2f 	bl	8001e98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800343a:	2307      	movs	r3, #7
 800343c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343e:	4b24      	ldr	r3, [pc, #144]	@ (80034d0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003440:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003442:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003444:	4642      	mov	r2, r8
 8003446:	6833      	ldr	r3, [r6, #0]
 8003448:	4013      	ands	r3, r2
 800344a:	42a3      	cmp	r3, r4
 800344c:	d100      	bne.n	8003450 <HAL_RCC_ClockConfig+0xfc>
 800344e:	e78f      	b.n	8003370 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003450:	f7fe fd22 	bl	8001e98 <HAL_GetTick>
 8003454:	1bc0      	subs	r0, r0, r7
 8003456:	4548      	cmp	r0, r9
 8003458:	d9f4      	bls.n	8003444 <HAL_RCC_ClockConfig+0xf0>
        return HAL_TIMEOUT;
 800345a:	2003      	movs	r0, #3
 800345c:	e7e3      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800345e:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_RCC_ClockConfig+0x174>)
 8003460:	491f      	ldr	r1, [pc, #124]	@ (80034e0 <HAL_RCC_ClockConfig+0x18c>)
 8003462:	6893      	ldr	r3, [r2, #8]
 8003464:	400b      	ands	r3, r1
 8003466:	68e9      	ldr	r1, [r5, #12]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]
 800346c:	e7c9      	b.n	8003402 <HAL_RCC_ClockConfig+0xae>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346e:	6833      	ldr	r3, [r6, #0]
 8003470:	4393      	bics	r3, r2
 8003472:	4323      	orrs	r3, r4
 8003474:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003476:	f7fe fd0f 	bl	8001e98 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800347a:	2307      	movs	r3, #7
 800347c:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347e:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_RCC_ClockConfig+0x17c>)
    tickstart = HAL_GetTick();
 8003480:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003482:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003484:	4642      	mov	r2, r8
 8003486:	6833      	ldr	r3, [r6, #0]
 8003488:	4013      	ands	r3, r2
 800348a:	42a3      	cmp	r3, r4
 800348c:	d0b6      	beq.n	80033fc <HAL_RCC_ClockConfig+0xa8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800348e:	f7fe fd03 	bl	8001e98 <HAL_GetTick>
 8003492:	1bc0      	subs	r0, r0, r7
 8003494:	4548      	cmp	r0, r9
 8003496:	d9f5      	bls.n	8003484 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8003498:	2003      	movs	r0, #3
 800349a:	e7c4      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	0392      	lsls	r2, r2, #14
 80034a0:	d500      	bpl.n	80034a4 <HAL_RCC_ClockConfig+0x150>
 80034a2:	e78b      	b.n	80033bc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80034a4:	2001      	movs	r0, #1
 80034a6:	e7be      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x164>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ac:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034ae:	0792      	lsls	r2, r2, #30
 80034b0:	d500      	bpl.n	80034b4 <HAL_RCC_ClockConfig+0x160>
 80034b2:	e783      	b.n	80033bc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80034b4:	2001      	movs	r0, #1
 80034b6:	e7b6      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b8:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 80034ba:	0792      	lsls	r2, r2, #30
 80034bc:	d500      	bpl.n	80034c0 <HAL_RCC_ClockConfig+0x16c>
 80034be:	e77d      	b.n	80033bc <HAL_RCC_ClockConfig+0x68>
    return HAL_ERROR;
 80034c0:	2001      	movs	r0, #1
 80034c2:	e7b0      	b.n	8003426 <HAL_RCC_ClockConfig+0xd2>
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	fffff0ff 	.word	0xfffff0ff
 80034d0:	00001388 	.word	0x00001388
 80034d4:	08005e60 	.word	0x08005e60
 80034d8:	20000004 	.word	0x20000004
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	ffff8fff 	.word	0xffff8fff

080034e4 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80034e4:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034e6:	4907      	ldr	r1, [pc, #28]	@ (8003504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034e8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80034ea:	4a07      	ldr	r2, [pc, #28]	@ (8003508 <HAL_RCC_GetPCLK1Freq+0x24>)
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80034ec:	045b      	lsls	r3, r3, #17
 80034ee:	0f5b      	lsrs	r3, r3, #29
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	585b      	ldr	r3, [r3, r1]
 80034f4:	211f      	movs	r1, #31
 80034f6:	6810      	ldr	r0, [r2, #0]
 80034f8:	400b      	ands	r3, r1
 80034fa:	40d8      	lsrs	r0, r3
}
 80034fc:	4770      	bx	lr
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	40021000 	.word	0x40021000
 8003504:	08005e40 	.word	0x08005e40
 8003508:	20000004 	.word	0x20000004

0800350c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800350c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350e:	46d6      	mov	lr, sl
 8003510:	464f      	mov	r7, r9
 8003512:	4646      	mov	r6, r8
 8003514:	b5c0      	push	{r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003516:	6803      	ldr	r3, [r0, #0]
{
 8003518:	0004      	movs	r4, r0
 800351a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800351c:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800351e:	039a      	lsls	r2, r3, #14
 8003520:	d552      	bpl.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003522:	2280      	movs	r2, #128	@ 0x80
 8003524:	4b69      	ldr	r3, [pc, #420]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003526:	0552      	lsls	r2, r2, #21
 8003528:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 800352a:	4682      	mov	sl, r0
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800352c:	4211      	tst	r1, r2
 800352e:	d100      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003530:	e0a4      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x170>
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003532:	2780      	movs	r7, #128	@ 0x80
 8003534:	4d66      	ldr	r5, [pc, #408]	@ (80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003536:	007f      	lsls	r7, r7, #1
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	433b      	orrs	r3, r7
 800353c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800353e:	f7fe fcab 	bl	8001e98 <HAL_GetTick>
 8003542:	0006      	movs	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003544:	e005      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fe fca7 	bl	8001e98 <HAL_GetTick>
 800354a:	1b80      	subs	r0, r0, r6
 800354c:	2802      	cmp	r0, #2
 800354e:	d900      	bls.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8003550:	e09e      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x184>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003552:	682b      	ldr	r3, [r5, #0]
 8003554:	423b      	tst	r3, r7
 8003556:	d0f6      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003558:	4d5c      	ldr	r5, [pc, #368]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800355a:	23c0      	movs	r3, #192	@ 0xc0
 800355c:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	0010      	movs	r0, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003562:	6a61      	ldr	r1, [r4, #36]	@ 0x24
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003564:	4018      	ands	r0, r3
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003566:	421a      	tst	r2, r3
 8003568:	d023      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800356a:	4288      	cmp	r0, r1
 800356c:	d021      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800356e:	2080      	movs	r0, #128	@ 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003570:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8003572:	6dee      	ldr	r6, [r5, #92]	@ 0x5c
 8003574:	0240      	lsls	r0, r0, #9
 8003576:	4330      	orrs	r0, r6
 8003578:	65e8      	str	r0, [r5, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357a:	6de8      	ldr	r0, [r5, #92]	@ 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800357c:	4a55      	ldr	r2, [pc, #340]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357e:	4e56      	ldr	r6, [pc, #344]	@ (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003580:	401a      	ands	r2, r3
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003582:	4030      	ands	r0, r6
 8003584:	65e8      	str	r0, [r5, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003586:	65ea      	str	r2, [r5, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003588:	07db      	lsls	r3, r3, #31
 800358a:	d512      	bpl.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7fe fc84 	bl	8001e98 <HAL_GetTick>

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	2302      	movs	r3, #2
 8003592:	4698      	mov	r8, r3
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	4b51      	ldr	r3, [pc, #324]	@ (80036dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
        tickstart = HAL_GetTick();
 8003596:	0006      	movs	r6, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359a:	e005      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fe fc7c 	bl	8001e98 <HAL_GetTick>
 80035a0:	1b80      	subs	r0, r0, r6
 80035a2:	4548      	cmp	r0, r9
 80035a4:	d900      	bls.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80035a6:	e073      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x184>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4642      	mov	r2, r8
 80035aa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80035ac:	421a      	tst	r2, r3
 80035ae:	d0f5      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x90>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80035b2:	4a46      	ldr	r2, [pc, #280]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035b4:	4847      	ldr	r0, [pc, #284]	@ (80036d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035b6:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 80035b8:	4003      	ands	r3, r0
 80035ba:	430b      	orrs	r3, r1
 80035bc:	65d3      	str	r3, [r2, #92]	@ 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035be:	4652      	mov	r2, sl
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c0:	2000      	movs	r0, #0
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c2:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 80035c4:	2a01      	cmp	r2, #1
 80035c6:	d068      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035c8:	07da      	lsls	r2, r3, #31
 80035ca:	d506      	bpl.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035cc:	2503      	movs	r5, #3
 80035ce:	493f      	ldr	r1, [pc, #252]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035d0:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80035d2:	43aa      	bics	r2, r5
 80035d4:	6865      	ldr	r5, [r4, #4]
 80035d6:	432a      	orrs	r2, r5
 80035d8:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035da:	06da      	lsls	r2, r3, #27
 80035dc:	d506      	bpl.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035de:	493b      	ldr	r1, [pc, #236]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035e0:	4d3f      	ldr	r5, [pc, #252]	@ (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80035e2:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80035e4:	402a      	ands	r2, r5
 80035e6:	68a5      	ldr	r5, [r4, #8]
 80035e8:	432a      	orrs	r2, r5
 80035ea:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035ec:	059a      	lsls	r2, r3, #22
 80035ee:	d506      	bpl.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035f0:	4936      	ldr	r1, [pc, #216]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80035f2:	4d3c      	ldr	r5, [pc, #240]	@ (80036e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035f4:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 80035f6:	402a      	ands	r2, r5
 80035f8:	6965      	ldr	r5, [r4, #20]
 80035fa:	432a      	orrs	r2, r5
 80035fc:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035fe:	055a      	lsls	r2, r3, #21
 8003600:	d506      	bpl.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003602:	4932      	ldr	r1, [pc, #200]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003604:	4d38      	ldr	r5, [pc, #224]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003606:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003608:	402a      	ands	r2, r5
 800360a:	69a5      	ldr	r5, [r4, #24]
 800360c:	432a      	orrs	r2, r5
 800360e:	654a      	str	r2, [r1, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003610:	069a      	lsls	r2, r3, #26
 8003612:	d506      	bpl.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003614:	492d      	ldr	r1, [pc, #180]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003616:	4d35      	ldr	r5, [pc, #212]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003618:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800361a:	402a      	ands	r2, r5
 800361c:	68e5      	ldr	r5, [r4, #12]
 800361e:	432a      	orrs	r2, r5
 8003620:	654a      	str	r2, [r1, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003622:	045a      	lsls	r2, r3, #17
 8003624:	d50a      	bpl.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003626:	4929      	ldr	r1, [pc, #164]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003628:	69e5      	ldr	r5, [r4, #28]
 800362a:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 800362c:	0092      	lsls	r2, r2, #2
 800362e:	0892      	lsrs	r2, r2, #2
 8003630:	432a      	orrs	r2, r5
 8003632:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003634:	2280      	movs	r2, #128	@ 0x80
 8003636:	05d2      	lsls	r2, r2, #23
 8003638:	4295      	cmp	r5, r2
 800363a:	d034      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800363c:	029a      	lsls	r2, r3, #10
 800363e:	d50a      	bpl.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003640:	4922      	ldr	r1, [pc, #136]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003642:	4e2b      	ldr	r6, [pc, #172]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003644:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003646:	6a25      	ldr	r5, [r4, #32]
 8003648:	4032      	ands	r2, r6
 800364a:	432a      	orrs	r2, r5
 800364c:	654a      	str	r2, [r1, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	03d2      	lsls	r2, r2, #15
 8003652:	4295      	cmp	r5, r2
 8003654:	d02d      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003656:	051b      	lsls	r3, r3, #20
 8003658:	d50a      	bpl.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800365a:	4a1c      	ldr	r2, [pc, #112]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800365c:	6921      	ldr	r1, [r4, #16]
 800365e:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8003660:	4c24      	ldr	r4, [pc, #144]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003662:	4023      	ands	r3, r4
 8003664:	430b      	orrs	r3, r1
 8003666:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003668:	2380      	movs	r3, #128	@ 0x80
 800366a:	01db      	lsls	r3, r3, #7
 800366c:	4299      	cmp	r1, r3
 800366e:	d026      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8003670:	b002      	add	sp, #8
 8003672:	bce0      	pop	{r5, r6, r7}
 8003674:	46ba      	mov	sl, r7
 8003676:	46b1      	mov	r9, r6
 8003678:	46a8      	mov	r8, r5
 800367a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800367e:	4311      	orrs	r1, r2
 8003680:	63d9      	str	r1, [r3, #60]	@ 0x3c
 8003682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003684:	4013      	ands	r3, r2
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	469a      	mov	sl, r3
 800368e:	e750      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x26>
    if (pwrclkchanged == SET)
 8003690:	4652      	mov	r2, sl
        status = ret;
 8003692:	2003      	movs	r0, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003694:	6823      	ldr	r3, [r4, #0]
    if (pwrclkchanged == SET)
 8003696:	2a01      	cmp	r2, #1
 8003698:	d196      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PWR_CLK_DISABLE();
 800369a:	490c      	ldr	r1, [pc, #48]	@ (80036cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800369c:	4d16      	ldr	r5, [pc, #88]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800369e:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80036a0:	402a      	ands	r2, r5
 80036a2:	63ca      	str	r2, [r1, #60]	@ 0x3c
 80036a4:	e790      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	68cd      	ldr	r5, [r1, #12]
 80036aa:	0252      	lsls	r2, r2, #9
 80036ac:	432a      	orrs	r2, r5
 80036ae:	60ca      	str	r2, [r1, #12]
 80036b0:	e7c4      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	68cd      	ldr	r5, [r1, #12]
 80036b6:	0452      	lsls	r2, r2, #17
 80036b8:	432a      	orrs	r2, r5
 80036ba:	60ca      	str	r2, [r1, #12]
 80036bc:	e7cb      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80036be:	2380      	movs	r3, #128	@ 0x80
 80036c0:	68d1      	ldr	r1, [r2, #12]
 80036c2:	025b      	lsls	r3, r3, #9
 80036c4:	430b      	orrs	r3, r1
 80036c6:	60d3      	str	r3, [r2, #12]
  return status;
 80036c8:	e7d2      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x164>
 80036ca:	46c0      	nop			@ (mov r8, r8)
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40007000 	.word	0x40007000
 80036d4:	fffffcff 	.word	0xfffffcff
 80036d8:	fffeffff 	.word	0xfffeffff
 80036dc:	00001388 	.word	0x00001388
 80036e0:	fffff3ff 	.word	0xfffff3ff
 80036e4:	fff3ffff 	.word	0xfff3ffff
 80036e8:	ffcfffff 	.word	0xffcfffff
 80036ec:	ffffcfff 	.word	0xffffcfff
 80036f0:	ffbfffff 	.word	0xffbfffff
 80036f4:	ffff3fff 	.word	0xffff3fff
 80036f8:	efffffff 	.word	0xefffffff

080036fc <HAL_TIM_OC_MspInit>:
/**
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 80036fc:	4770      	bx	lr
 80036fe:	46c0      	nop			@ (mov r8, r8)

08003700 <HAL_TIM_IC_MspInit>:
/**
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
 8003700:	4770      	bx	lr
 8003702:	46c0      	nop			@ (mov r8, r8)

08003704 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8003704:	4770      	bx	lr
 8003706:	46c0      	nop			@ (mov r8, r8)

08003708 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003708:	4770      	bx	lr
 800370a:	46c0      	nop			@ (mov r8, r8)

0800370c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800370c:	4770      	bx	lr
 800370e:	46c0      	nop			@ (mov r8, r8)

08003710 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003710:	4770      	bx	lr
 8003712:	46c0      	nop			@ (mov r8, r8)

08003714 <HAL_TIM_IC_CaptureHalfCpltCallback>:
/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003714:	4770      	bx	lr
 8003716:	46c0      	nop			@ (mov r8, r8)

08003718 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003718:	4770      	bx	lr
 800371a:	46c0      	nop			@ (mov r8, r8)

0800371c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 800371c:	4770      	bx	lr
 800371e:	46c0      	nop			@ (mov r8, r8)

08003720 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003720:	4770      	bx	lr
 8003722:	46c0      	nop			@ (mov r8, r8)

08003724 <HAL_TIM_TriggerHalfCpltCallback>:
/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8003724:	4770      	bx	lr
 8003726:	46c0      	nop			@ (mov r8, r8)

08003728 <HAL_TIM_ErrorCallback>:
/**
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8003728:	4770      	bx	lr
 800372a:	46c0      	nop			@ (mov r8, r8)

0800372c <HAL_TIM_Base_Init>:
{
 800372c:	b570      	push	{r4, r5, r6, lr}
 800372e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003730:	d100      	bne.n	8003734 <HAL_TIM_Base_Init+0x8>
 8003732:	e093      	b.n	800385c <HAL_TIM_Base_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003734:	233d      	movs	r3, #61	@ 0x3d
 8003736:	5cc3      	ldrb	r3, [r0, r3]
 8003738:	b2da      	uxtb	r2, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d130      	bne.n	80037a0 <HAL_TIM_Base_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 800373e:	333c      	adds	r3, #60	@ 0x3c
 8003740:	54c2      	strb	r2, [r0, r3]
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003742:	2284      	movs	r2, #132	@ 0x84
 8003744:	4b48      	ldr	r3, [pc, #288]	@ (8003868 <HAL_TIM_Base_Init+0x13c>)
 8003746:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003748:	4b48      	ldr	r3, [pc, #288]	@ (800386c <HAL_TIM_Base_Init+0x140>)
 800374a:	3204      	adds	r2, #4
 800374c:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <HAL_TIM_Base_Init+0x144>)
 8003750:	3204      	adds	r2, #4
 8003752:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003754:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <HAL_TIM_Base_Init+0x148>)
 8003756:	3204      	adds	r2, #4
 8003758:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800375a:	4b47      	ldr	r3, [pc, #284]	@ (8003878 <HAL_TIM_Base_Init+0x14c>)
 800375c:	3204      	adds	r2, #4
 800375e:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003760:	4b46      	ldr	r3, [pc, #280]	@ (800387c <HAL_TIM_Base_Init+0x150>)
 8003762:	3204      	adds	r2, #4
 8003764:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003766:	4b46      	ldr	r3, [pc, #280]	@ (8003880 <HAL_TIM_Base_Init+0x154>)
 8003768:	3204      	adds	r2, #4
 800376a:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800376c:	4b45      	ldr	r3, [pc, #276]	@ (8003884 <HAL_TIM_Base_Init+0x158>)
 800376e:	3204      	adds	r2, #4
 8003770:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003772:	4b45      	ldr	r3, [pc, #276]	@ (8003888 <HAL_TIM_Base_Init+0x15c>)
 8003774:	3204      	adds	r2, #4
 8003776:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003778:	4b44      	ldr	r3, [pc, #272]	@ (800388c <HAL_TIM_Base_Init+0x160>)
 800377a:	3204      	adds	r2, #4
 800377c:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800377e:	4b44      	ldr	r3, [pc, #272]	@ (8003890 <HAL_TIM_Base_Init+0x164>)
 8003780:	3204      	adds	r2, #4
 8003782:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003784:	4b43      	ldr	r3, [pc, #268]	@ (8003894 <HAL_TIM_Base_Init+0x168>)
 8003786:	3204      	adds	r2, #4
 8003788:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800378a:	4b43      	ldr	r3, [pc, #268]	@ (8003898 <HAL_TIM_Base_Init+0x16c>)
 800378c:	3204      	adds	r2, #4
 800378e:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003790:	4b42      	ldr	r3, [pc, #264]	@ (800389c <HAL_TIM_Base_Init+0x170>)
 8003792:	3204      	adds	r2, #4
 8003794:	5083      	str	r3, [r0, r2]
    if (htim->Base_MspInitCallback == NULL)
 8003796:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d061      	beq.n	8003860 <HAL_TIM_Base_Init+0x134>
    htim->Base_MspInitCallback(htim);
 800379c:	0020      	movs	r0, r4
 800379e:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80037a0:	233d      	movs	r3, #61	@ 0x3d
 80037a2:	2202      	movs	r2, #2
 80037a4:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037a6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037a8:	4e3d      	ldr	r6, [pc, #244]	@ (80038a0 <HAL_TIM_Base_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 80037aa:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80037ae:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037b0:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b2:	42b3      	cmp	r3, r6
 80037b4:	d041      	beq.n	800383a <HAL_TIM_Base_Init+0x10e>
 80037b6:	2680      	movs	r6, #128	@ 0x80
 80037b8:	05f6      	lsls	r6, r6, #23
 80037ba:	42b3      	cmp	r3, r6
 80037bc:	d034      	beq.n	8003828 <HAL_TIM_Base_Init+0xfc>
 80037be:	4e39      	ldr	r6, [pc, #228]	@ (80038a4 <HAL_TIM_Base_Init+0x178>)
 80037c0:	42b3      	cmp	r3, r6
 80037c2:	d031      	beq.n	8003828 <HAL_TIM_Base_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037c4:	4e38      	ldr	r6, [pc, #224]	@ (80038a8 <HAL_TIM_Base_Init+0x17c>)
 80037c6:	42b3      	cmp	r3, r6
 80037c8:	d032      	beq.n	8003830 <HAL_TIM_Base_Init+0x104>
 80037ca:	4e38      	ldr	r6, [pc, #224]	@ (80038ac <HAL_TIM_Base_Init+0x180>)
 80037cc:	42b3      	cmp	r3, r6
 80037ce:	d038      	beq.n	8003842 <HAL_TIM_Base_Init+0x116>
 80037d0:	4e37      	ldr	r6, [pc, #220]	@ (80038b0 <HAL_TIM_Base_Init+0x184>)
 80037d2:	42b3      	cmp	r3, r6
 80037d4:	d035      	beq.n	8003842 <HAL_TIM_Base_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d6:	2680      	movs	r6, #128	@ 0x80
 80037d8:	43b2      	bics	r2, r6
 80037da:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80037dc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037de:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037e0:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037e6:	6919      	ldr	r1, [r3, #16]
 80037e8:	420a      	tst	r2, r1
 80037ea:	d002      	beq.n	80037f2 <HAL_TIM_Base_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037ec:	6919      	ldr	r1, [r3, #16]
 80037ee:	4391      	bics	r1, r2
 80037f0:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f2:	2301      	movs	r3, #1
 80037f4:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 80037f6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	3a0a      	subs	r2, #10
 80037fc:	54a3      	strb	r3, [r4, r2]
 80037fe:	3201      	adds	r2, #1
 8003800:	54a3      	strb	r3, [r4, r2]
 8003802:	3201      	adds	r2, #1
 8003804:	54a3      	strb	r3, [r4, r2]
 8003806:	3201      	adds	r2, #1
 8003808:	54a3      	strb	r3, [r4, r2]
 800380a:	3201      	adds	r2, #1
 800380c:	54a3      	strb	r3, [r4, r2]
 800380e:	3201      	adds	r2, #1
 8003810:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	3201      	adds	r2, #1
 8003814:	54a3      	strb	r3, [r4, r2]
 8003816:	3201      	adds	r2, #1
 8003818:	54a3      	strb	r3, [r4, r2]
 800381a:	3201      	adds	r2, #1
 800381c:	54a3      	strb	r3, [r4, r2]
 800381e:	3201      	adds	r2, #1
 8003820:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003822:	3a0a      	subs	r2, #10
 8003824:	54a3      	strb	r3, [r4, r2]
}
 8003826:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003828:	2670      	movs	r6, #112	@ 0x70
 800382a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800382c:	68a6      	ldr	r6, [r4, #8]
 800382e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003830:	4e20      	ldr	r6, [pc, #128]	@ (80038b4 <HAL_TIM_Base_Init+0x188>)
 8003832:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003834:	6926      	ldr	r6, [r4, #16]
 8003836:	4332      	orrs	r2, r6
 8003838:	e7cd      	b.n	80037d6 <HAL_TIM_Base_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800383a:	2670      	movs	r6, #112	@ 0x70
 800383c:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 800383e:	68a6      	ldr	r6, [r4, #8]
 8003840:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003842:	4e1c      	ldr	r6, [pc, #112]	@ (80038b4 <HAL_TIM_Base_Init+0x188>)
 8003844:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003846:	6926      	ldr	r6, [r4, #16]
 8003848:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800384a:	2680      	movs	r6, #128	@ 0x80
 800384c:	43b2      	bics	r2, r6
 800384e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003850:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003852:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003854:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003856:	6962      	ldr	r2, [r4, #20]
 8003858:	631a      	str	r2, [r3, #48]	@ 0x30
 800385a:	e7c2      	b.n	80037e2 <HAL_TIM_Base_Init+0xb6>
    return HAL_ERROR;
 800385c:	2001      	movs	r0, #1
 800385e:	e7e2      	b.n	8003826 <HAL_TIM_Base_Init+0xfa>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003860:	4b15      	ldr	r3, [pc, #84]	@ (80038b8 <HAL_TIM_Base_Init+0x18c>)
 8003862:	64c3      	str	r3, [r0, #76]	@ 0x4c
 8003864:	e79a      	b.n	800379c <HAL_TIM_Base_Init+0x70>
 8003866:	46c0      	nop			@ (mov r8, r8)
 8003868:	08003705 	.word	0x08003705
 800386c:	08003709 	.word	0x08003709
 8003870:	08003721 	.word	0x08003721
 8003874:	08003725 	.word	0x08003725
 8003878:	08003711 	.word	0x08003711
 800387c:	08003715 	.word	0x08003715
 8003880:	0800370d 	.word	0x0800370d
 8003884:	08003719 	.word	0x08003719
 8003888:	0800371d 	.word	0x0800371d
 800388c:	08003729 	.word	0x08003729
 8003890:	08004f99 	.word	0x08004f99
 8003894:	08004f9d 	.word	0x08004f9d
 8003898:	08004fa1 	.word	0x08004fa1
 800389c:	08004fa5 	.word	0x08004fa5
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40002000 	.word	0x40002000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800
 80038b4:	fffffcff 	.word	0xfffffcff
 80038b8:	08001641 	.word	0x08001641

080038bc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80038bc:	213d      	movs	r1, #61	@ 0x3d
{
 80038be:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80038c0:	5c42      	ldrb	r2, [r0, r1]
{
 80038c2:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80038c4:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 80038c6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80038c8:	2a01      	cmp	r2, #1
 80038ca:	d110      	bne.n	80038ee <HAL_TIM_Base_Start+0x32>
  htim->State = HAL_TIM_STATE_BUSY;
 80038cc:	3201      	adds	r2, #1
 80038ce:	545a      	strb	r2, [r3, r1]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0e      	ldr	r2, [pc, #56]	@ (800390c <HAL_TIM_Base_Start+0x50>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00b      	beq.n	80038f0 <HAL_TIM_Base_Start+0x34>
 80038d8:	2280      	movs	r2, #128	@ 0x80
 80038da:	05d2      	lsls	r2, r2, #23
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <HAL_TIM_Base_Start+0x34>
 80038e0:	4a0b      	ldr	r2, [pc, #44]	@ (8003910 <HAL_TIM_Base_Start+0x54>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIM_Base_Start+0x34>
    __HAL_TIM_ENABLE(htim);
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4322      	orrs	r2, r4
 80038ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80038ec:	2000      	movs	r0, #0
}
 80038ee:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <HAL_TIM_Base_Start+0x58>)
 80038f4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f6:	2a06      	cmp	r2, #6
 80038f8:	d0f8      	beq.n	80038ec <HAL_TIM_Base_Start+0x30>
 80038fa:	3907      	subs	r1, #7
 80038fc:	428a      	cmp	r2, r1
 80038fe:	d0f5      	beq.n	80038ec <HAL_TIM_Base_Start+0x30>
      __HAL_TIM_ENABLE(htim);
 8003900:	2101      	movs	r1, #1
 8003902:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003904:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003906:	430a      	orrs	r2, r1
 8003908:	601a      	str	r2, [r3, #0]
 800390a:	e7f0      	b.n	80038ee <HAL_TIM_Base_Start+0x32>
 800390c:	40012c00 	.word	0x40012c00
 8003910:	40000400 	.word	0x40000400
 8003914:	00010007 	.word	0x00010007

08003918 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003918:	213d      	movs	r1, #61	@ 0x3d
{
 800391a:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	5c42      	ldrb	r2, [r0, r1]
{
 800391e:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 8003920:	b2d4      	uxtb	r4, r2
    return HAL_ERROR;
 8003922:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8003924:	2a01      	cmp	r2, #1
 8003926:	d113      	bne.n	8003950 <HAL_TIM_Base_Start_IT+0x38>
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	3201      	adds	r2, #1
 800392a:	545a      	strb	r2, [r3, r1]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	4322      	orrs	r2, r4
 8003932:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003934:	4a0e      	ldr	r2, [pc, #56]	@ (8003970 <HAL_TIM_Base_Start_IT+0x58>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d00b      	beq.n	8003952 <HAL_TIM_Base_Start_IT+0x3a>
 800393a:	2280      	movs	r2, #128	@ 0x80
 800393c:	05d2      	lsls	r2, r2, #23
 800393e:	4293      	cmp	r3, r2
 8003940:	d007      	beq.n	8003952 <HAL_TIM_Base_Start_IT+0x3a>
 8003942:	4a0c      	ldr	r2, [pc, #48]	@ (8003974 <HAL_TIM_Base_Start_IT+0x5c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_TIM_Base_Start_IT+0x3a>
    __HAL_TIM_ENABLE(htim);
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4322      	orrs	r2, r4
 800394c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800394e:	2000      	movs	r0, #0
}
 8003950:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	4908      	ldr	r1, [pc, #32]	@ (8003978 <HAL_TIM_Base_Start_IT+0x60>)
 8003956:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003958:	2a06      	cmp	r2, #6
 800395a:	d0f8      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x36>
 800395c:	3907      	subs	r1, #7
 800395e:	428a      	cmp	r2, r1
 8003960:	d0f5      	beq.n	800394e <HAL_TIM_Base_Start_IT+0x36>
      __HAL_TIM_ENABLE(htim);
 8003962:	2101      	movs	r1, #1
 8003964:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8003966:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e7f0      	b.n	8003950 <HAL_TIM_Base_Start_IT+0x38>
 800396e:	46c0      	nop			@ (mov r8, r8)
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	00010007 	.word	0x00010007

0800397c <HAL_TIM_OC_Init>:
{
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003980:	d100      	bne.n	8003984 <HAL_TIM_OC_Init+0x8>
 8003982:	e093      	b.n	8003aac <HAL_TIM_OC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003984:	233d      	movs	r3, #61	@ 0x3d
 8003986:	5cc3      	ldrb	r3, [r0, r3]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d130      	bne.n	80039f0 <HAL_TIM_OC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 800398e:	333c      	adds	r3, #60	@ 0x3c
 8003990:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003992:	2284      	movs	r2, #132	@ 0x84
 8003994:	4b48      	ldr	r3, [pc, #288]	@ (8003ab8 <HAL_TIM_OC_Init+0x13c>)
 8003996:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003998:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <HAL_TIM_OC_Init+0x140>)
 800399a:	3204      	adds	r2, #4
 800399c:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800399e:	4b48      	ldr	r3, [pc, #288]	@ (8003ac0 <HAL_TIM_OC_Init+0x144>)
 80039a0:	3204      	adds	r2, #4
 80039a2:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80039a4:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <HAL_TIM_OC_Init+0x148>)
 80039a6:	3204      	adds	r2, #4
 80039a8:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80039aa:	4b47      	ldr	r3, [pc, #284]	@ (8003ac8 <HAL_TIM_OC_Init+0x14c>)
 80039ac:	3204      	adds	r2, #4
 80039ae:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80039b0:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_TIM_OC_Init+0x150>)
 80039b2:	3204      	adds	r2, #4
 80039b4:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80039b6:	4b46      	ldr	r3, [pc, #280]	@ (8003ad0 <HAL_TIM_OC_Init+0x154>)
 80039b8:	3204      	adds	r2, #4
 80039ba:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80039bc:	4b45      	ldr	r3, [pc, #276]	@ (8003ad4 <HAL_TIM_OC_Init+0x158>)
 80039be:	3204      	adds	r2, #4
 80039c0:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80039c2:	4b45      	ldr	r3, [pc, #276]	@ (8003ad8 <HAL_TIM_OC_Init+0x15c>)
 80039c4:	3204      	adds	r2, #4
 80039c6:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80039c8:	4b44      	ldr	r3, [pc, #272]	@ (8003adc <HAL_TIM_OC_Init+0x160>)
 80039ca:	3204      	adds	r2, #4
 80039cc:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80039ce:	4b44      	ldr	r3, [pc, #272]	@ (8003ae0 <HAL_TIM_OC_Init+0x164>)
 80039d0:	3204      	adds	r2, #4
 80039d2:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80039d4:	4b43      	ldr	r3, [pc, #268]	@ (8003ae4 <HAL_TIM_OC_Init+0x168>)
 80039d6:	3204      	adds	r2, #4
 80039d8:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80039da:	4b43      	ldr	r3, [pc, #268]	@ (8003ae8 <HAL_TIM_OC_Init+0x16c>)
 80039dc:	3204      	adds	r2, #4
 80039de:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80039e0:	4b42      	ldr	r3, [pc, #264]	@ (8003aec <HAL_TIM_OC_Init+0x170>)
 80039e2:	3204      	adds	r2, #4
 80039e4:	5083      	str	r3, [r0, r2]
    if (htim->OC_MspInitCallback == NULL)
 80039e6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d061      	beq.n	8003ab0 <HAL_TIM_OC_Init+0x134>
    htim->OC_MspInitCallback(htim);
 80039ec:	0020      	movs	r0, r4
 80039ee:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80039f0:	233d      	movs	r3, #61	@ 0x3d
 80039f2:	2202      	movs	r2, #2
 80039f4:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80039f6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f8:	4e3d      	ldr	r6, [pc, #244]	@ (8003af0 <HAL_TIM_OC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 80039fa:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039fc:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 80039fe:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a00:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a02:	42b3      	cmp	r3, r6
 8003a04:	d041      	beq.n	8003a8a <HAL_TIM_OC_Init+0x10e>
 8003a06:	2680      	movs	r6, #128	@ 0x80
 8003a08:	05f6      	lsls	r6, r6, #23
 8003a0a:	42b3      	cmp	r3, r6
 8003a0c:	d034      	beq.n	8003a78 <HAL_TIM_OC_Init+0xfc>
 8003a0e:	4e39      	ldr	r6, [pc, #228]	@ (8003af4 <HAL_TIM_OC_Init+0x178>)
 8003a10:	42b3      	cmp	r3, r6
 8003a12:	d031      	beq.n	8003a78 <HAL_TIM_OC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a14:	4e38      	ldr	r6, [pc, #224]	@ (8003af8 <HAL_TIM_OC_Init+0x17c>)
 8003a16:	42b3      	cmp	r3, r6
 8003a18:	d032      	beq.n	8003a80 <HAL_TIM_OC_Init+0x104>
 8003a1a:	4e38      	ldr	r6, [pc, #224]	@ (8003afc <HAL_TIM_OC_Init+0x180>)
 8003a1c:	42b3      	cmp	r3, r6
 8003a1e:	d038      	beq.n	8003a92 <HAL_TIM_OC_Init+0x116>
 8003a20:	4e37      	ldr	r6, [pc, #220]	@ (8003b00 <HAL_TIM_OC_Init+0x184>)
 8003a22:	42b3      	cmp	r3, r6
 8003a24:	d035      	beq.n	8003a92 <HAL_TIM_OC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a26:	2680      	movs	r6, #128	@ 0x80
 8003a28:	43b2      	bics	r2, r6
 8003a2a:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003a2c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2e:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003a30:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003a32:	2201      	movs	r2, #1
 8003a34:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a36:	6919      	ldr	r1, [r3, #16]
 8003a38:	420a      	tst	r2, r1
 8003a3a:	d002      	beq.n	8003a42 <HAL_TIM_OC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a3c:	6919      	ldr	r1, [r3, #16]
 8003a3e:	4391      	bics	r1, r2
 8003a40:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a42:	2301      	movs	r3, #1
 8003a44:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8003a46:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a48:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4a:	3a0a      	subs	r2, #10
 8003a4c:	54a3      	strb	r3, [r4, r2]
 8003a4e:	3201      	adds	r2, #1
 8003a50:	54a3      	strb	r3, [r4, r2]
 8003a52:	3201      	adds	r2, #1
 8003a54:	54a3      	strb	r3, [r4, r2]
 8003a56:	3201      	adds	r2, #1
 8003a58:	54a3      	strb	r3, [r4, r2]
 8003a5a:	3201      	adds	r2, #1
 8003a5c:	54a3      	strb	r3, [r4, r2]
 8003a5e:	3201      	adds	r2, #1
 8003a60:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a62:	3201      	adds	r2, #1
 8003a64:	54a3      	strb	r3, [r4, r2]
 8003a66:	3201      	adds	r2, #1
 8003a68:	54a3      	strb	r3, [r4, r2]
 8003a6a:	3201      	adds	r2, #1
 8003a6c:	54a3      	strb	r3, [r4, r2]
 8003a6e:	3201      	adds	r2, #1
 8003a70:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003a72:	3a0a      	subs	r2, #10
 8003a74:	54a3      	strb	r3, [r4, r2]
}
 8003a76:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a78:	2670      	movs	r6, #112	@ 0x70
 8003a7a:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003a7c:	68a6      	ldr	r6, [r4, #8]
 8003a7e:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a80:	4e20      	ldr	r6, [pc, #128]	@ (8003b04 <HAL_TIM_OC_Init+0x188>)
 8003a82:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a84:	6926      	ldr	r6, [r4, #16]
 8003a86:	4332      	orrs	r2, r6
 8003a88:	e7cd      	b.n	8003a26 <HAL_TIM_OC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a8a:	2670      	movs	r6, #112	@ 0x70
 8003a8c:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003a8e:	68a6      	ldr	r6, [r4, #8]
 8003a90:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	4e1c      	ldr	r6, [pc, #112]	@ (8003b04 <HAL_TIM_OC_Init+0x188>)
 8003a94:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a96:	6926      	ldr	r6, [r4, #16]
 8003a98:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a9a:	2680      	movs	r6, #128	@ 0x80
 8003a9c:	43b2      	bics	r2, r6
 8003a9e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003aa0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003aa4:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003aa6:	6962      	ldr	r2, [r4, #20]
 8003aa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aaa:	e7c2      	b.n	8003a32 <HAL_TIM_OC_Init+0xb6>
    return HAL_ERROR;
 8003aac:	2001      	movs	r0, #1
 8003aae:	e7e2      	b.n	8003a76 <HAL_TIM_OC_Init+0xfa>
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	@ (8003b08 <HAL_TIM_OC_Init+0x18c>)
 8003ab2:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8003ab4:	e79a      	b.n	80039ec <HAL_TIM_OC_Init+0x70>
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	08003705 	.word	0x08003705
 8003abc:	08003709 	.word	0x08003709
 8003ac0:	08003721 	.word	0x08003721
 8003ac4:	08003725 	.word	0x08003725
 8003ac8:	08003711 	.word	0x08003711
 8003acc:	08003715 	.word	0x08003715
 8003ad0:	0800370d 	.word	0x0800370d
 8003ad4:	08003719 	.word	0x08003719
 8003ad8:	0800371d 	.word	0x0800371d
 8003adc:	08003729 	.word	0x08003729
 8003ae0:	08004f99 	.word	0x08004f99
 8003ae4:	08004f9d 	.word	0x08004f9d
 8003ae8:	08004fa1 	.word	0x08004fa1
 8003aec:	08004fa5 	.word	0x08004fa5
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40000400 	.word	0x40000400
 8003af8:	40002000 	.word	0x40002000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800
 8003b04:	fffffcff 	.word	0xfffffcff
 8003b08:	080036fd 	.word	0x080036fd

08003b0c <HAL_TIM_OC_Start_IT>:
{
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	2910      	cmp	r1, #16
 8003b10:	d803      	bhi.n	8003b1a <HAL_TIM_OC_Start_IT+0xe>
 8003b12:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <HAL_TIM_OC_Start_IT+0xec>)
 8003b14:	008b      	lsls	r3, r1, #2
 8003b16:	58d3      	ldr	r3, [r2, r3]
 8003b18:	469f      	mov	pc, r3
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b1a:	2343      	movs	r3, #67	@ 0x43
 8003b1c:	5cc2      	ldrb	r2, [r0, r3]
 8003b1e:	2a01      	cmp	r2, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b22:	2202      	movs	r2, #2
 8003b24:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 8003b26:	2001      	movs	r0, #1
}
 8003b28:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b2a:	233e      	movs	r3, #62	@ 0x3e
 8003b2c:	5cc2      	ldrb	r2, [r0, r3]
 8003b2e:	2a01      	cmp	r2, #1
 8003b30:	d1f9      	bne.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b32:	2402      	movs	r4, #2
 8003b34:	54c4      	strb	r4, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b36:	6803      	ldr	r3, [r0, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	4322      	orrs	r2, r4
 8003b3c:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b3e:	221f      	movs	r2, #31
 8003b40:	4011      	ands	r1, r2
 8003b42:	3a1e      	subs	r2, #30
 8003b44:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003b46:	6a19      	ldr	r1, [r3, #32]
 8003b48:	4391      	bics	r1, r2
 8003b4a:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b4c:	6a19      	ldr	r1, [r3, #32]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	621a      	str	r2, [r3, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b52:	4a2a      	ldr	r2, [pc, #168]	@ (8003bfc <HAL_TIM_OC_Start_IT+0xf0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d049      	beq.n	8003bec <HAL_TIM_OC_Start_IT+0xe0>
 8003b58:	4a29      	ldr	r2, [pc, #164]	@ (8003c00 <HAL_TIM_OC_Start_IT+0xf4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d040      	beq.n	8003be0 <HAL_TIM_OC_Start_IT+0xd4>
 8003b5e:	4a29      	ldr	r2, [pc, #164]	@ (8003c04 <HAL_TIM_OC_Start_IT+0xf8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d03d      	beq.n	8003be0 <HAL_TIM_OC_Start_IT+0xd4>
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b64:	2280      	movs	r2, #128	@ 0x80
 8003b66:	05d2      	lsls	r2, r2, #23
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d002      	beq.n	8003b72 <HAL_TIM_OC_Start_IT+0x66>
 8003b6c:	4a26      	ldr	r2, [pc, #152]	@ (8003c08 <HAL_TIM_OC_Start_IT+0xfc>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d107      	bne.n	8003b82 <HAL_TIM_OC_Start_IT+0x76>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	4925      	ldr	r1, [pc, #148]	@ (8003c0c <HAL_TIM_OC_Start_IT+0x100>)
 8003b76:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b78:	2a06      	cmp	r2, #6
 8003b7a:	d006      	beq.n	8003b8a <HAL_TIM_OC_Start_IT+0x7e>
 8003b7c:	3907      	subs	r1, #7
 8003b7e:	428a      	cmp	r2, r1
 8003b80:	d003      	beq.n	8003b8a <HAL_TIM_OC_Start_IT+0x7e>
        __HAL_TIM_ENABLE(htim);
 8003b82:	2101      	movs	r1, #1
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]
    return HAL_ERROR;
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	e7cc      	b.n	8003b28 <HAL_TIM_OC_Start_IT+0x1c>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b8e:	233f      	movs	r3, #63	@ 0x3f
 8003b90:	5cc2      	ldrb	r2, [r0, r3]
 8003b92:	2a01      	cmp	r2, #1
 8003b94:	d1c7      	bne.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b96:	2202      	movs	r2, #2
 8003b98:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b9a:	6803      	ldr	r3, [r0, #0]
 8003b9c:	2004      	movs	r0, #4
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	4302      	orrs	r2, r0
 8003ba2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003ba4:	e7cb      	b.n	8003b3e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ba6:	2340      	movs	r3, #64	@ 0x40
 8003ba8:	5cc2      	ldrb	r2, [r0, r3]
 8003baa:	2a01      	cmp	r2, #1
 8003bac:	d1bb      	bne.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bae:	2202      	movs	r2, #2
 8003bb0:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	2008      	movs	r0, #8
 8003bb6:	68da      	ldr	r2, [r3, #12]
 8003bb8:	4302      	orrs	r2, r0
 8003bba:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003bbc:	e7bf      	b.n	8003b3e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bbe:	2341      	movs	r3, #65	@ 0x41
 8003bc0:	5cc2      	ldrb	r2, [r0, r3]
 8003bc2:	2a01      	cmp	r2, #1
 8003bc4:	d1af      	bne.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bca:	6803      	ldr	r3, [r0, #0]
 8003bcc:	2010      	movs	r0, #16
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	4302      	orrs	r2, r0
 8003bd2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8003bd4:	e7b3      	b.n	8003b3e <HAL_TIM_OC_Start_IT+0x32>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bd6:	2342      	movs	r3, #66	@ 0x42
 8003bd8:	5cc2      	ldrb	r2, [r0, r3]
 8003bda:	2a01      	cmp	r2, #1
 8003bdc:	d0a1      	beq.n	8003b22 <HAL_TIM_OC_Start_IT+0x16>
 8003bde:	e7a2      	b.n	8003b26 <HAL_TIM_OC_Start_IT+0x1a>
      __HAL_TIM_MOE_ENABLE(htim);
 8003be0:	2280      	movs	r2, #128	@ 0x80
 8003be2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003be4:	0212      	lsls	r2, r2, #8
 8003be6:	430a      	orrs	r2, r1
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bea:	e7ca      	b.n	8003b82 <HAL_TIM_OC_Start_IT+0x76>
      __HAL_TIM_MOE_ENABLE(htim);
 8003bec:	2280      	movs	r2, #128	@ 0x80
 8003bee:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003bf0:	0212      	lsls	r2, r2, #8
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf6:	e7bc      	b.n	8003b72 <HAL_TIM_OC_Start_IT+0x66>
 8003bf8:	08005ecc 	.word	0x08005ecc
 8003bfc:	40012c00 	.word	0x40012c00
 8003c00:	40014400 	.word	0x40014400
 8003c04:	40014800 	.word	0x40014800
 8003c08:	40000400 	.word	0x40000400
 8003c0c:	00010007 	.word	0x00010007

08003c10 <HAL_TIM_OC_Stop_IT>:
{
 8003c10:	b530      	push	{r4, r5, lr}
  switch (Channel)
 8003c12:	2908      	cmp	r1, #8
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_OC_Stop_IT+0x10>
 8003c16:	d845      	bhi.n	8003ca4 <HAL_TIM_OC_Stop_IT+0x94>
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	d052      	beq.n	8003cc2 <HAL_TIM_OC_Stop_IT+0xb2>
 8003c1c:	2904      	cmp	r1, #4
 8003c1e:	d14e      	bne.n	8003cbe <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003c20:	6805      	ldr	r5, [r0, #0]
 8003c22:	68eb      	ldr	r3, [r5, #12]
 8003c24:	438b      	bics	r3, r1
 8003c26:	60eb      	str	r3, [r5, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c28:	241f      	movs	r4, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	400c      	ands	r4, r1
 8003c2e:	40a2      	lsls	r2, r4
  TIMx->CCER &= ~tmp;
 8003c30:	6a2b      	ldr	r3, [r5, #32]
 8003c32:	4393      	bics	r3, r2
 8003c34:	622b      	str	r3, [r5, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c36:	6a2b      	ldr	r3, [r5, #32]
 8003c38:	622b      	str	r3, [r5, #32]
    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf8 <HAL_TIM_OC_Stop_IT+0xe8>)
 8003c3c:	429d      	cmp	r5, r3
 8003c3e:	d020      	beq.n	8003c82 <HAL_TIM_OC_Stop_IT+0x72>
 8003c40:	4b2e      	ldr	r3, [pc, #184]	@ (8003cfc <HAL_TIM_OC_Stop_IT+0xec>)
 8003c42:	429d      	cmp	r5, r3
 8003c44:	d01d      	beq.n	8003c82 <HAL_TIM_OC_Stop_IT+0x72>
 8003c46:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <HAL_TIM_OC_Stop_IT+0xf0>)
 8003c48:	429d      	cmp	r5, r3
 8003c4a:	d01a      	beq.n	8003c82 <HAL_TIM_OC_Stop_IT+0x72>
    __HAL_TIM_DISABLE(htim);
 8003c4c:	6a2a      	ldr	r2, [r5, #32]
 8003c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003d04 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003c50:	421a      	tst	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_TIM_OC_Stop_IT+0x54>
 8003c54:	6a2a      	ldr	r2, [r5, #32]
 8003c56:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <HAL_TIM_OC_Stop_IT+0xf8>)
 8003c58:	421a      	tst	r2, r3
 8003c5a:	d103      	bne.n	8003c64 <HAL_TIM_OC_Stop_IT+0x54>
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	4393      	bics	r3, r2
 8003c62:	602b      	str	r3, [r5, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d025      	beq.n	8003cb4 <HAL_TIM_OC_Stop_IT+0xa4>
 8003c68:	2904      	cmp	r1, #4
 8003c6a:	d035      	beq.n	8003cd8 <HAL_TIM_OC_Stop_IT+0xc8>
 8003c6c:	2908      	cmp	r1, #8
 8003c6e:	d02e      	beq.n	8003cce <HAL_TIM_OC_Stop_IT+0xbe>
 8003c70:	290c      	cmp	r1, #12
 8003c72:	d036      	beq.n	8003ce2 <HAL_TIM_OC_Stop_IT+0xd2>
 8003c74:	2910      	cmp	r1, #16
 8003c76:	d039      	beq.n	8003cec <HAL_TIM_OC_Stop_IT+0xdc>
 8003c78:	2343      	movs	r3, #67	@ 0x43
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003c7e:	2000      	movs	r0, #0
 8003c80:	e01e      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
      __HAL_TIM_MOE_DISABLE(htim);
 8003c82:	6a2a      	ldr	r2, [r5, #32]
 8003c84:	4b1f      	ldr	r3, [pc, #124]	@ (8003d04 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003c86:	421a      	tst	r2, r3
 8003c88:	d1e0      	bne.n	8003c4c <HAL_TIM_OC_Stop_IT+0x3c>
 8003c8a:	6a2a      	ldr	r2, [r5, #32]
 8003c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003d08 <HAL_TIM_OC_Stop_IT+0xf8>)
 8003c8e:	421a      	tst	r2, r3
 8003c90:	d1dc      	bne.n	8003c4c <HAL_TIM_OC_Stop_IT+0x3c>
 8003c92:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8003c94:	4a1d      	ldr	r2, [pc, #116]	@ (8003d0c <HAL_TIM_OC_Stop_IT+0xfc>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	646b      	str	r3, [r5, #68]	@ 0x44
    __HAL_TIM_DISABLE(htim);
 8003c9a:	6a2a      	ldr	r2, [r5, #32]
 8003c9c:	4b19      	ldr	r3, [pc, #100]	@ (8003d04 <HAL_TIM_OC_Stop_IT+0xf4>)
 8003c9e:	421a      	tst	r2, r3
 8003ca0:	d1e0      	bne.n	8003c64 <HAL_TIM_OC_Stop_IT+0x54>
 8003ca2:	e7d7      	b.n	8003c54 <HAL_TIM_OC_Stop_IT+0x44>
  switch (Channel)
 8003ca4:	290c      	cmp	r1, #12
 8003ca6:	d10a      	bne.n	8003cbe <HAL_TIM_OC_Stop_IT+0xae>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003ca8:	2210      	movs	r2, #16
 8003caa:	6805      	ldr	r5, [r0, #0]
 8003cac:	68eb      	ldr	r3, [r5, #12]
 8003cae:	4393      	bics	r3, r2
 8003cb0:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8003cb2:	e7b9      	b.n	8003c28 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cb4:	233e      	movs	r3, #62	@ 0x3e
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003cba:	2000      	movs	r0, #0
 8003cbc:	e000      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
 8003cbe:	2001      	movs	r0, #1
}
 8003cc0:	bd30      	pop	{r4, r5, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	6805      	ldr	r5, [r0, #0]
 8003cc6:	68eb      	ldr	r3, [r5, #12]
 8003cc8:	4393      	bics	r3, r2
 8003cca:	60eb      	str	r3, [r5, #12]
  if (status == HAL_OK)
 8003ccc:	e7ac      	b.n	8003c28 <HAL_TIM_OC_Stop_IT+0x18>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cce:	2340      	movs	r3, #64	@ 0x40
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	e7f3      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cd8:	233f      	movs	r3, #63	@ 0x3f
 8003cda:	2201      	movs	r2, #1
 8003cdc:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e7ee      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	2341      	movs	r3, #65	@ 0x41
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003ce8:	2000      	movs	r0, #0
 8003cea:	e7e9      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003cec:	2342      	movs	r3, #66	@ 0x42
 8003cee:	2201      	movs	r2, #1
 8003cf0:	54c2      	strb	r2, [r0, r3]
  switch (Channel)
 8003cf2:	2000      	movs	r0, #0
 8003cf4:	e7e4      	b.n	8003cc0 <HAL_TIM_OC_Stop_IT+0xb0>
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800
 8003d04:	00001111 	.word	0x00001111
 8003d08:	00000444 	.word	0x00000444
 8003d0c:	ffff7fff 	.word	0xffff7fff

08003d10 <HAL_TIM_PWM_Init>:
{
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003d14:	d100      	bne.n	8003d18 <HAL_TIM_PWM_Init+0x8>
 8003d16:	e093      	b.n	8003e40 <HAL_TIM_PWM_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003d18:	233d      	movs	r3, #61	@ 0x3d
 8003d1a:	5cc3      	ldrb	r3, [r0, r3]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d130      	bne.n	8003d84 <HAL_TIM_PWM_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8003d22:	333c      	adds	r3, #60	@ 0x3c
 8003d24:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003d26:	2284      	movs	r2, #132	@ 0x84
 8003d28:	4b48      	ldr	r3, [pc, #288]	@ (8003e4c <HAL_TIM_PWM_Init+0x13c>)
 8003d2a:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003d2c:	4b48      	ldr	r3, [pc, #288]	@ (8003e50 <HAL_TIM_PWM_Init+0x140>)
 8003d2e:	3204      	adds	r2, #4
 8003d30:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003d32:	4b48      	ldr	r3, [pc, #288]	@ (8003e54 <HAL_TIM_PWM_Init+0x144>)
 8003d34:	3204      	adds	r2, #4
 8003d36:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003d38:	4b47      	ldr	r3, [pc, #284]	@ (8003e58 <HAL_TIM_PWM_Init+0x148>)
 8003d3a:	3204      	adds	r2, #4
 8003d3c:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_TIM_PWM_Init+0x14c>)
 8003d40:	3204      	adds	r2, #4
 8003d42:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003d44:	4b46      	ldr	r3, [pc, #280]	@ (8003e60 <HAL_TIM_PWM_Init+0x150>)
 8003d46:	3204      	adds	r2, #4
 8003d48:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003d4a:	4b46      	ldr	r3, [pc, #280]	@ (8003e64 <HAL_TIM_PWM_Init+0x154>)
 8003d4c:	3204      	adds	r2, #4
 8003d4e:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003d50:	4b45      	ldr	r3, [pc, #276]	@ (8003e68 <HAL_TIM_PWM_Init+0x158>)
 8003d52:	3204      	adds	r2, #4
 8003d54:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003d56:	4b45      	ldr	r3, [pc, #276]	@ (8003e6c <HAL_TIM_PWM_Init+0x15c>)
 8003d58:	3204      	adds	r2, #4
 8003d5a:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003d5c:	4b44      	ldr	r3, [pc, #272]	@ (8003e70 <HAL_TIM_PWM_Init+0x160>)
 8003d5e:	3204      	adds	r2, #4
 8003d60:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003d62:	4b44      	ldr	r3, [pc, #272]	@ (8003e74 <HAL_TIM_PWM_Init+0x164>)
 8003d64:	3204      	adds	r2, #4
 8003d66:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003d68:	4b43      	ldr	r3, [pc, #268]	@ (8003e78 <HAL_TIM_PWM_Init+0x168>)
 8003d6a:	3204      	adds	r2, #4
 8003d6c:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003d6e:	4b43      	ldr	r3, [pc, #268]	@ (8003e7c <HAL_TIM_PWM_Init+0x16c>)
 8003d70:	3204      	adds	r2, #4
 8003d72:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003d74:	4b42      	ldr	r3, [pc, #264]	@ (8003e80 <HAL_TIM_PWM_Init+0x170>)
 8003d76:	3204      	adds	r2, #4
 8003d78:	5083      	str	r3, [r0, r2]
    if (htim->PWM_MspInitCallback == NULL)
 8003d7a:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d061      	beq.n	8003e44 <HAL_TIM_PWM_Init+0x134>
    htim->PWM_MspInitCallback(htim);
 8003d80:	0020      	movs	r0, r4
 8003d82:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003d84:	233d      	movs	r3, #61	@ 0x3d
 8003d86:	2202      	movs	r2, #2
 8003d88:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d8a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d8c:	4e3d      	ldr	r6, [pc, #244]	@ (8003e84 <HAL_TIM_PWM_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8003d8e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d90:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8003d92:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d94:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d96:	42b3      	cmp	r3, r6
 8003d98:	d041      	beq.n	8003e1e <HAL_TIM_PWM_Init+0x10e>
 8003d9a:	2680      	movs	r6, #128	@ 0x80
 8003d9c:	05f6      	lsls	r6, r6, #23
 8003d9e:	42b3      	cmp	r3, r6
 8003da0:	d034      	beq.n	8003e0c <HAL_TIM_PWM_Init+0xfc>
 8003da2:	4e39      	ldr	r6, [pc, #228]	@ (8003e88 <HAL_TIM_PWM_Init+0x178>)
 8003da4:	42b3      	cmp	r3, r6
 8003da6:	d031      	beq.n	8003e0c <HAL_TIM_PWM_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003da8:	4e38      	ldr	r6, [pc, #224]	@ (8003e8c <HAL_TIM_PWM_Init+0x17c>)
 8003daa:	42b3      	cmp	r3, r6
 8003dac:	d032      	beq.n	8003e14 <HAL_TIM_PWM_Init+0x104>
 8003dae:	4e38      	ldr	r6, [pc, #224]	@ (8003e90 <HAL_TIM_PWM_Init+0x180>)
 8003db0:	42b3      	cmp	r3, r6
 8003db2:	d038      	beq.n	8003e26 <HAL_TIM_PWM_Init+0x116>
 8003db4:	4e37      	ldr	r6, [pc, #220]	@ (8003e94 <HAL_TIM_PWM_Init+0x184>)
 8003db6:	42b3      	cmp	r3, r6
 8003db8:	d035      	beq.n	8003e26 <HAL_TIM_PWM_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dba:	2680      	movs	r6, #128	@ 0x80
 8003dbc:	43b2      	bics	r2, r6
 8003dbe:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003dc0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003dc4:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dca:	6919      	ldr	r1, [r3, #16]
 8003dcc:	420a      	tst	r2, r1
 8003dce:	d002      	beq.n	8003dd6 <HAL_TIM_PWM_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dd0:	6919      	ldr	r1, [r3, #16]
 8003dd2:	4391      	bics	r1, r2
 8003dd4:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8003dda:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ddc:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dde:	3a0a      	subs	r2, #10
 8003de0:	54a3      	strb	r3, [r4, r2]
 8003de2:	3201      	adds	r2, #1
 8003de4:	54a3      	strb	r3, [r4, r2]
 8003de6:	3201      	adds	r2, #1
 8003de8:	54a3      	strb	r3, [r4, r2]
 8003dea:	3201      	adds	r2, #1
 8003dec:	54a3      	strb	r3, [r4, r2]
 8003dee:	3201      	adds	r2, #1
 8003df0:	54a3      	strb	r3, [r4, r2]
 8003df2:	3201      	adds	r2, #1
 8003df4:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df6:	3201      	adds	r2, #1
 8003df8:	54a3      	strb	r3, [r4, r2]
 8003dfa:	3201      	adds	r2, #1
 8003dfc:	54a3      	strb	r3, [r4, r2]
 8003dfe:	3201      	adds	r2, #1
 8003e00:	54a3      	strb	r3, [r4, r2]
 8003e02:	3201      	adds	r2, #1
 8003e04:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003e06:	3a0a      	subs	r2, #10
 8003e08:	54a3      	strb	r3, [r4, r2]
}
 8003e0a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e0c:	2670      	movs	r6, #112	@ 0x70
 8003e0e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003e10:	68a6      	ldr	r6, [r4, #8]
 8003e12:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e14:	4e20      	ldr	r6, [pc, #128]	@ (8003e98 <HAL_TIM_PWM_Init+0x188>)
 8003e16:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e18:	6926      	ldr	r6, [r4, #16]
 8003e1a:	4332      	orrs	r2, r6
 8003e1c:	e7cd      	b.n	8003dba <HAL_TIM_PWM_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e1e:	2670      	movs	r6, #112	@ 0x70
 8003e20:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8003e22:	68a6      	ldr	r6, [r4, #8]
 8003e24:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	4e1c      	ldr	r6, [pc, #112]	@ (8003e98 <HAL_TIM_PWM_Init+0x188>)
 8003e28:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2a:	6926      	ldr	r6, [r4, #16]
 8003e2c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e2e:	2680      	movs	r6, #128	@ 0x80
 8003e30:	43b2      	bics	r2, r6
 8003e32:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8003e34:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e36:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e38:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003e3a:	6962      	ldr	r2, [r4, #20]
 8003e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e3e:	e7c2      	b.n	8003dc6 <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 8003e40:	2001      	movs	r0, #1
 8003e42:	e7e2      	b.n	8003e0a <HAL_TIM_PWM_Init+0xfa>
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8003e44:	4b15      	ldr	r3, [pc, #84]	@ (8003e9c <HAL_TIM_PWM_Init+0x18c>)
 8003e46:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e48:	e79a      	b.n	8003d80 <HAL_TIM_PWM_Init+0x70>
 8003e4a:	46c0      	nop			@ (mov r8, r8)
 8003e4c:	08003705 	.word	0x08003705
 8003e50:	08003709 	.word	0x08003709
 8003e54:	08003721 	.word	0x08003721
 8003e58:	08003725 	.word	0x08003725
 8003e5c:	08003711 	.word	0x08003711
 8003e60:	08003715 	.word	0x08003715
 8003e64:	0800370d 	.word	0x0800370d
 8003e68:	08003719 	.word	0x08003719
 8003e6c:	0800371d 	.word	0x0800371d
 8003e70:	08003729 	.word	0x08003729
 8003e74:	08004f99 	.word	0x08004f99
 8003e78:	08004f9d 	.word	0x08004f9d
 8003e7c:	08004fa1 	.word	0x08004fa1
 8003e80:	08004fa5 	.word	0x08004fa5
 8003e84:	40012c00 	.word	0x40012c00
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	40002000 	.word	0x40002000
 8003e90:	40014400 	.word	0x40014400
 8003e94:	40014800 	.word	0x40014800
 8003e98:	fffffcff 	.word	0xfffffcff
 8003e9c:	080017a9 	.word	0x080017a9

08003ea0 <HAL_TIM_PWM_Start>:
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
 8003ea0:	2910      	cmp	r1, #16
 8003ea2:	d803      	bhi.n	8003eac <HAL_TIM_PWM_Start+0xc>
 8003ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <HAL_TIM_PWM_Start+0xb8>)
 8003ea6:	008b      	lsls	r3, r1, #2
 8003ea8:	58d3      	ldr	r3, [r2, r3]
 8003eaa:	469f      	mov	pc, r3
 8003eac:	2343      	movs	r3, #67	@ 0x43
 8003eae:	5cc2      	ldrb	r2, [r0, r3]
 8003eb0:	2a01      	cmp	r2, #1
 8003eb2:	d12e      	bne.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	54c2      	strb	r2, [r0, r3]
 8003eb8:	221f      	movs	r2, #31
 8003eba:	4011      	ands	r1, r2
 8003ebc:	3a1e      	subs	r2, #30
 8003ebe:	408a      	lsls	r2, r1
 8003ec0:	6803      	ldr	r3, [r0, #0]
 8003ec2:	6a19      	ldr	r1, [r3, #32]
 8003ec4:	4391      	bics	r1, r2
 8003ec6:	6219      	str	r1, [r3, #32]
 8003ec8:	6a19      	ldr	r1, [r3, #32]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	621a      	str	r2, [r3, #32]
 8003ece:	4a23      	ldr	r2, [pc, #140]	@ (8003f5c <HAL_TIM_PWM_Start+0xbc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d03a      	beq.n	8003f4a <HAL_TIM_PWM_Start+0xaa>
 8003ed4:	4a22      	ldr	r2, [pc, #136]	@ (8003f60 <HAL_TIM_PWM_Start+0xc0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d031      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003eda:	4a22      	ldr	r2, [pc, #136]	@ (8003f64 <HAL_TIM_PWM_Start+0xc4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d02e      	beq.n	8003f3e <HAL_TIM_PWM_Start+0x9e>
 8003ee0:	2280      	movs	r2, #128	@ 0x80
 8003ee2:	05d2      	lsls	r2, r2, #23
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d002      	beq.n	8003eee <HAL_TIM_PWM_Start+0x4e>
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f68 <HAL_TIM_PWM_Start+0xc8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d107      	bne.n	8003efe <HAL_TIM_PWM_Start+0x5e>
 8003eee:	689a      	ldr	r2, [r3, #8]
 8003ef0:	491e      	ldr	r1, [pc, #120]	@ (8003f6c <HAL_TIM_PWM_Start+0xcc>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	2a06      	cmp	r2, #6
 8003ef6:	d006      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x66>
 8003ef8:	3907      	subs	r1, #7
 8003efa:	428a      	cmp	r2, r1
 8003efc:	d003      	beq.n	8003f06 <HAL_TIM_PWM_Start+0x66>
 8003efe:	2101      	movs	r1, #1
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	2000      	movs	r0, #0
 8003f08:	4770      	bx	lr
 8003f0a:	233e      	movs	r3, #62	@ 0x3e
 8003f0c:	5cc2      	ldrb	r2, [r0, r3]
 8003f0e:	2a01      	cmp	r2, #1
 8003f10:	d0d0      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0x14>
 8003f12:	2001      	movs	r0, #1
 8003f14:	e7f8      	b.n	8003f08 <HAL_TIM_PWM_Start+0x68>
 8003f16:	233f      	movs	r3, #63	@ 0x3f
 8003f18:	5cc2      	ldrb	r2, [r0, r3]
 8003f1a:	2a01      	cmp	r2, #1
 8003f1c:	d0ca      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0x14>
 8003f1e:	e7f8      	b.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003f20:	2340      	movs	r3, #64	@ 0x40
 8003f22:	5cc2      	ldrb	r2, [r0, r3]
 8003f24:	2a01      	cmp	r2, #1
 8003f26:	d0c5      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0x14>
 8003f28:	e7f3      	b.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003f2a:	2341      	movs	r3, #65	@ 0x41
 8003f2c:	5cc2      	ldrb	r2, [r0, r3]
 8003f2e:	2a01      	cmp	r2, #1
 8003f30:	d0c0      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0x14>
 8003f32:	e7ee      	b.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003f34:	2342      	movs	r3, #66	@ 0x42
 8003f36:	5cc2      	ldrb	r2, [r0, r3]
 8003f38:	2a01      	cmp	r2, #1
 8003f3a:	d0bb      	beq.n	8003eb4 <HAL_TIM_PWM_Start+0x14>
 8003f3c:	e7e9      	b.n	8003f12 <HAL_TIM_PWM_Start+0x72>
 8003f3e:	2280      	movs	r2, #128	@ 0x80
 8003f40:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003f42:	0212      	lsls	r2, r2, #8
 8003f44:	430a      	orrs	r2, r1
 8003f46:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f48:	e7d9      	b.n	8003efe <HAL_TIM_PWM_Start+0x5e>
 8003f4a:	2280      	movs	r2, #128	@ 0x80
 8003f4c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003f4e:	0212      	lsls	r2, r2, #8
 8003f50:	430a      	orrs	r2, r1
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f54:	e7cb      	b.n	8003eee <HAL_TIM_PWM_Start+0x4e>
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	08005f10 	.word	0x08005f10
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40014400 	.word	0x40014400
 8003f64:	40014800 	.word	0x40014800
 8003f68:	40000400 	.word	0x40000400
 8003f6c:	00010007 	.word	0x00010007

08003f70 <HAL_TIM_IC_Init>:
{
 8003f70:	b570      	push	{r4, r5, r6, lr}
 8003f72:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003f74:	d100      	bne.n	8003f78 <HAL_TIM_IC_Init+0x8>
 8003f76:	e093      	b.n	80040a0 <HAL_TIM_IC_Init+0x130>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f78:	233d      	movs	r3, #61	@ 0x3d
 8003f7a:	5cc3      	ldrb	r3, [r0, r3]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d130      	bne.n	8003fe4 <HAL_TIM_IC_Init+0x74>
    htim->Lock = HAL_UNLOCKED;
 8003f82:	333c      	adds	r3, #60	@ 0x3c
 8003f84:	54c2      	strb	r2, [r0, r3]
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003f86:	2284      	movs	r2, #132	@ 0x84
 8003f88:	4b48      	ldr	r3, [pc, #288]	@ (80040ac <HAL_TIM_IC_Init+0x13c>)
 8003f8a:	5083      	str	r3, [r0, r2]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003f8c:	4b48      	ldr	r3, [pc, #288]	@ (80040b0 <HAL_TIM_IC_Init+0x140>)
 8003f8e:	3204      	adds	r2, #4
 8003f90:	5083      	str	r3, [r0, r2]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003f92:	4b48      	ldr	r3, [pc, #288]	@ (80040b4 <HAL_TIM_IC_Init+0x144>)
 8003f94:	3204      	adds	r2, #4
 8003f96:	5083      	str	r3, [r0, r2]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003f98:	4b47      	ldr	r3, [pc, #284]	@ (80040b8 <HAL_TIM_IC_Init+0x148>)
 8003f9a:	3204      	adds	r2, #4
 8003f9c:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003f9e:	4b47      	ldr	r3, [pc, #284]	@ (80040bc <HAL_TIM_IC_Init+0x14c>)
 8003fa0:	3204      	adds	r2, #4
 8003fa2:	5083      	str	r3, [r0, r2]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003fa4:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_TIM_IC_Init+0x150>)
 8003fa6:	3204      	adds	r2, #4
 8003fa8:	5083      	str	r3, [r0, r2]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003faa:	4b46      	ldr	r3, [pc, #280]	@ (80040c4 <HAL_TIM_IC_Init+0x154>)
 8003fac:	3204      	adds	r2, #4
 8003fae:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003fb0:	4b45      	ldr	r3, [pc, #276]	@ (80040c8 <HAL_TIM_IC_Init+0x158>)
 8003fb2:	3204      	adds	r2, #4
 8003fb4:	5083      	str	r3, [r0, r2]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003fb6:	4b45      	ldr	r3, [pc, #276]	@ (80040cc <HAL_TIM_IC_Init+0x15c>)
 8003fb8:	3204      	adds	r2, #4
 8003fba:	5083      	str	r3, [r0, r2]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003fbc:	4b44      	ldr	r3, [pc, #272]	@ (80040d0 <HAL_TIM_IC_Init+0x160>)
 8003fbe:	3204      	adds	r2, #4
 8003fc0:	5083      	str	r3, [r0, r2]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003fc2:	4b44      	ldr	r3, [pc, #272]	@ (80040d4 <HAL_TIM_IC_Init+0x164>)
 8003fc4:	3204      	adds	r2, #4
 8003fc6:	5083      	str	r3, [r0, r2]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003fc8:	4b43      	ldr	r3, [pc, #268]	@ (80040d8 <HAL_TIM_IC_Init+0x168>)
 8003fca:	3204      	adds	r2, #4
 8003fcc:	5083      	str	r3, [r0, r2]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003fce:	4b43      	ldr	r3, [pc, #268]	@ (80040dc <HAL_TIM_IC_Init+0x16c>)
 8003fd0:	3204      	adds	r2, #4
 8003fd2:	5083      	str	r3, [r0, r2]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8003fd4:	4b42      	ldr	r3, [pc, #264]	@ (80040e0 <HAL_TIM_IC_Init+0x170>)
 8003fd6:	3204      	adds	r2, #4
 8003fd8:	5083      	str	r3, [r0, r2]
    if (htim->IC_MspInitCallback == NULL)
 8003fda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d061      	beq.n	80040a4 <HAL_TIM_IC_Init+0x134>
    htim->IC_MspInitCallback(htim);
 8003fe0:	0020      	movs	r0, r4
 8003fe2:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe4:	233d      	movs	r3, #61	@ 0x3d
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fea:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	4e3d      	ldr	r6, [pc, #244]	@ (80040e4 <HAL_TIM_IC_Init+0x174>)
  tmpcr1 = TIMx->CR1;
 8003fee:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff0:	69a5      	ldr	r5, [r4, #24]
  TIMx->PSC = Structure->Prescaler;
 8003ff2:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff4:	68e0      	ldr	r0, [r4, #12]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff6:	42b3      	cmp	r3, r6
 8003ff8:	d041      	beq.n	800407e <HAL_TIM_IC_Init+0x10e>
 8003ffa:	2680      	movs	r6, #128	@ 0x80
 8003ffc:	05f6      	lsls	r6, r6, #23
 8003ffe:	42b3      	cmp	r3, r6
 8004000:	d034      	beq.n	800406c <HAL_TIM_IC_Init+0xfc>
 8004002:	4e39      	ldr	r6, [pc, #228]	@ (80040e8 <HAL_TIM_IC_Init+0x178>)
 8004004:	42b3      	cmp	r3, r6
 8004006:	d031      	beq.n	800406c <HAL_TIM_IC_Init+0xfc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004008:	4e38      	ldr	r6, [pc, #224]	@ (80040ec <HAL_TIM_IC_Init+0x17c>)
 800400a:	42b3      	cmp	r3, r6
 800400c:	d032      	beq.n	8004074 <HAL_TIM_IC_Init+0x104>
 800400e:	4e38      	ldr	r6, [pc, #224]	@ (80040f0 <HAL_TIM_IC_Init+0x180>)
 8004010:	42b3      	cmp	r3, r6
 8004012:	d038      	beq.n	8004086 <HAL_TIM_IC_Init+0x116>
 8004014:	4e37      	ldr	r6, [pc, #220]	@ (80040f4 <HAL_TIM_IC_Init+0x184>)
 8004016:	42b3      	cmp	r3, r6
 8004018:	d035      	beq.n	8004086 <HAL_TIM_IC_Init+0x116>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800401a:	2680      	movs	r6, #128	@ 0x80
 800401c:	43b2      	bics	r2, r6
 800401e:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004020:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004022:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004024:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004026:	2201      	movs	r2, #1
 8004028:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800402a:	6919      	ldr	r1, [r3, #16]
 800402c:	420a      	tst	r2, r1
 800402e:	d002      	beq.n	8004036 <HAL_TIM_IC_Init+0xc6>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004030:	6919      	ldr	r1, [r3, #16]
 8004032:	4391      	bics	r1, r2
 8004034:	6119      	str	r1, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004036:	2301      	movs	r3, #1
 8004038:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 800403a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800403c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800403e:	3a0a      	subs	r2, #10
 8004040:	54a3      	strb	r3, [r4, r2]
 8004042:	3201      	adds	r2, #1
 8004044:	54a3      	strb	r3, [r4, r2]
 8004046:	3201      	adds	r2, #1
 8004048:	54a3      	strb	r3, [r4, r2]
 800404a:	3201      	adds	r2, #1
 800404c:	54a3      	strb	r3, [r4, r2]
 800404e:	3201      	adds	r2, #1
 8004050:	54a3      	strb	r3, [r4, r2]
 8004052:	3201      	adds	r2, #1
 8004054:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004056:	3201      	adds	r2, #1
 8004058:	54a3      	strb	r3, [r4, r2]
 800405a:	3201      	adds	r2, #1
 800405c:	54a3      	strb	r3, [r4, r2]
 800405e:	3201      	adds	r2, #1
 8004060:	54a3      	strb	r3, [r4, r2]
 8004062:	3201      	adds	r2, #1
 8004064:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004066:	3a0a      	subs	r2, #10
 8004068:	54a3      	strb	r3, [r4, r2]
}
 800406a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800406c:	2670      	movs	r6, #112	@ 0x70
 800406e:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004070:	68a6      	ldr	r6, [r4, #8]
 8004072:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004074:	4e20      	ldr	r6, [pc, #128]	@ (80040f8 <HAL_TIM_IC_Init+0x188>)
 8004076:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004078:	6926      	ldr	r6, [r4, #16]
 800407a:	4332      	orrs	r2, r6
 800407c:	e7cd      	b.n	800401a <HAL_TIM_IC_Init+0xaa>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800407e:	2670      	movs	r6, #112	@ 0x70
 8004080:	43b2      	bics	r2, r6
    tmpcr1 |= Structure->CounterMode;
 8004082:	68a6      	ldr	r6, [r4, #8]
 8004084:	4332      	orrs	r2, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004086:	4e1c      	ldr	r6, [pc, #112]	@ (80040f8 <HAL_TIM_IC_Init+0x188>)
 8004088:	4032      	ands	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	6926      	ldr	r6, [r4, #16]
 800408c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800408e:	2680      	movs	r6, #128	@ 0x80
 8004090:	43b2      	bics	r2, r6
 8004092:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8004094:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004096:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004098:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800409a:	6962      	ldr	r2, [r4, #20]
 800409c:	631a      	str	r2, [r3, #48]	@ 0x30
 800409e:	e7c2      	b.n	8004026 <HAL_TIM_IC_Init+0xb6>
    return HAL_ERROR;
 80040a0:	2001      	movs	r0, #1
 80040a2:	e7e2      	b.n	800406a <HAL_TIM_IC_Init+0xfa>
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80040a4:	4b15      	ldr	r3, [pc, #84]	@ (80040fc <HAL_TIM_IC_Init+0x18c>)
 80040a6:	6543      	str	r3, [r0, #84]	@ 0x54
 80040a8:	e79a      	b.n	8003fe0 <HAL_TIM_IC_Init+0x70>
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	08003705 	.word	0x08003705
 80040b0:	08003709 	.word	0x08003709
 80040b4:	08003721 	.word	0x08003721
 80040b8:	08003725 	.word	0x08003725
 80040bc:	08003711 	.word	0x08003711
 80040c0:	08003715 	.word	0x08003715
 80040c4:	0800370d 	.word	0x0800370d
 80040c8:	08003719 	.word	0x08003719
 80040cc:	0800371d 	.word	0x0800371d
 80040d0:	08003729 	.word	0x08003729
 80040d4:	08004f99 	.word	0x08004f99
 80040d8:	08004f9d 	.word	0x08004f9d
 80040dc:	08004fa1 	.word	0x08004fa1
 80040e0:	08004fa5 	.word	0x08004fa5
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40002000 	.word	0x40002000
 80040f0:	40014400 	.word	0x40014400
 80040f4:	40014800 	.word	0x40014800
 80040f8:	fffffcff 	.word	0xfffffcff
 80040fc:	08003701 	.word	0x08003701

08004100 <HAL_TIM_IC_Start_IT>:
{
 8004100:	b530      	push	{r4, r5, lr}
 8004102:	2910      	cmp	r1, #16
 8004104:	d816      	bhi.n	8004134 <HAL_TIM_IC_Start_IT+0x34>
 8004106:	4a53      	ldr	r2, [pc, #332]	@ (8004254 <HAL_TIM_IC_Start_IT+0x154>)
 8004108:	008b      	lsls	r3, r1, #2
 800410a:	58d3      	ldr	r3, [r2, r3]
 800410c:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800410e:	243e      	movs	r4, #62	@ 0x3e
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004110:	2244      	movs	r2, #68	@ 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004112:	5d05      	ldrb	r5, [r0, r4]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004114:	5c83      	ldrb	r3, [r0, r2]
 8004116:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004118:	2d01      	cmp	r5, #1
 800411a:	d001      	beq.n	8004120 <HAL_TIM_IC_Start_IT+0x20>
{
 800411c:	2001      	movs	r0, #1
}
 800411e:	bd30      	pop	{r4, r5, pc}
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004120:	2b01      	cmp	r3, #1
 8004122:	d1fb      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004124:	2502      	movs	r5, #2
 8004126:	5505      	strb	r5, [r0, r4]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004128:	5485      	strb	r5, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	432a      	orrs	r2, r5
 8004130:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004132:	e022      	b.n	800417a <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004134:	2343      	movs	r3, #67	@ 0x43
 8004136:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004138:	3304      	adds	r3, #4
 800413a:	5cc3      	ldrb	r3, [r0, r3]
 800413c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800413e:	2a01      	cmp	r2, #1
 8004140:	d1ec      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004142:	2b01      	cmp	r3, #1
 8004144:	d1ea      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004146:	1f0b      	subs	r3, r1, #4
 8004148:	2b0c      	cmp	r3, #12
 800414a:	d878      	bhi.n	800423e <HAL_TIM_IC_Start_IT+0x13e>
 800414c:	4a42      	ldr	r2, [pc, #264]	@ (8004258 <HAL_TIM_IC_Start_IT+0x158>)
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	58d3      	ldr	r3, [r2, r3]
 8004152:	469f      	mov	pc, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004154:	233f      	movs	r3, #63	@ 0x3f
 8004156:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004158:	3306      	adds	r3, #6
 800415a:	5cc3      	ldrb	r3, [r0, r3]
 800415c:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800415e:	2a01      	cmp	r2, #1
 8004160:	d1dc      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004162:	2b01      	cmp	r3, #1
 8004164:	d1da      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004166:	2302      	movs	r3, #2
 8004168:	223f      	movs	r2, #63	@ 0x3f
 800416a:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416c:	3206      	adds	r2, #6
 800416e:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004170:	6803      	ldr	r3, [r0, #0]
 8004172:	2004      	movs	r0, #4
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	4302      	orrs	r2, r0
 8004178:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800417a:	221f      	movs	r2, #31
 800417c:	2001      	movs	r0, #1
 800417e:	400a      	ands	r2, r1
 8004180:	0001      	movs	r1, r0
 8004182:	4091      	lsls	r1, r2
 8004184:	000a      	movs	r2, r1
  TIMx->CCER &= ~tmp;
 8004186:	6a19      	ldr	r1, [r3, #32]
 8004188:	4391      	bics	r1, r2
 800418a:	6219      	str	r1, [r3, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800418c:	6a19      	ldr	r1, [r3, #32]
 800418e:	430a      	orrs	r2, r1
 8004190:	621a      	str	r2, [r3, #32]
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	4a32      	ldr	r2, [pc, #200]	@ (800425c <HAL_TIM_IC_Start_IT+0x15c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d044      	beq.n	8004222 <HAL_TIM_IC_Start_IT+0x122>
 8004198:	2280      	movs	r2, #128	@ 0x80
 800419a:	05d2      	lsls	r2, r2, #23
 800419c:	4293      	cmp	r3, r2
 800419e:	d040      	beq.n	8004222 <HAL_TIM_IC_Start_IT+0x122>
 80041a0:	4a2f      	ldr	r2, [pc, #188]	@ (8004260 <HAL_TIM_IC_Start_IT+0x160>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d03d      	beq.n	8004222 <HAL_TIM_IC_Start_IT+0x122>
      __HAL_TIM_ENABLE(htim);
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4302      	orrs	r2, r0
 80041aa:	601a      	str	r2, [r3, #0]
{
 80041ac:	2000      	movs	r0, #0
 80041ae:	e7b6      	b.n	800411e <HAL_TIM_IC_Start_IT+0x1e>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041b0:	2342      	movs	r3, #66	@ 0x42
 80041b2:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041b4:	3305      	adds	r3, #5
 80041b6:	5cc3      	ldrb	r3, [r0, r3]
 80041b8:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ba:	2a01      	cmp	r2, #1
 80041bc:	d1ae      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d1ac      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c2:	2302      	movs	r3, #2
 80041c4:	2242      	movs	r2, #66	@ 0x42
 80041c6:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041c8:	3205      	adds	r2, #5
 80041ca:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 80041cc:	e7a6      	b.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041ce:	2240      	movs	r2, #64	@ 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041d0:	2346      	movs	r3, #70	@ 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041d2:	5c84      	ldrb	r4, [r0, r2]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041d4:	5cc3      	ldrb	r3, [r0, r3]
 80041d6:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80041d8:	2c01      	cmp	r4, #1
 80041da:	d19f      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d19d      	bne.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	2302      	movs	r3, #2
 80041e2:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e4:	2346      	movs	r3, #70	@ 0x46
 80041e6:	2202      	movs	r2, #2
 80041e8:	54c2      	strb	r2, [r0, r3]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	2008      	movs	r0, #8
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	4302      	orrs	r2, r0
 80041f2:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 80041f4:	e7c1      	b.n	800417a <HAL_TIM_IC_Start_IT+0x7a>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80041f6:	2341      	movs	r3, #65	@ 0x41
 80041f8:	5cc2      	ldrb	r2, [r0, r3]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80041fa:	3306      	adds	r3, #6
 80041fc:	5cc3      	ldrb	r3, [r0, r3]
 80041fe:	b2db      	uxtb	r3, r3
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004200:	2a01      	cmp	r2, #1
 8004202:	d000      	beq.n	8004206 <HAL_TIM_IC_Start_IT+0x106>
 8004204:	e78a      	b.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004206:	2b01      	cmp	r3, #1
 8004208:	d000      	beq.n	800420c <HAL_TIM_IC_Start_IT+0x10c>
 800420a:	e787      	b.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800420c:	2302      	movs	r3, #2
 800420e:	2241      	movs	r2, #65	@ 0x41
 8004210:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004212:	3206      	adds	r2, #6
 8004214:	5483      	strb	r3, [r0, r2]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004216:	6803      	ldr	r3, [r0, #0]
 8004218:	2010      	movs	r0, #16
 800421a:	68da      	ldr	r2, [r3, #12]
 800421c:	4302      	orrs	r2, r0
 800421e:	60da      	str	r2, [r3, #12]
  if (status == HAL_OK)
 8004220:	e7ab      	b.n	800417a <HAL_TIM_IC_Start_IT+0x7a>
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	490f      	ldr	r1, [pc, #60]	@ (8004264 <HAL_TIM_IC_Start_IT+0x164>)
 8004226:	400a      	ands	r2, r1
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	2a06      	cmp	r2, #6
 800422a:	d0bf      	beq.n	80041ac <HAL_TIM_IC_Start_IT+0xac>
 800422c:	3907      	subs	r1, #7
 800422e:	428a      	cmp	r2, r1
 8004230:	d0bc      	beq.n	80041ac <HAL_TIM_IC_Start_IT+0xac>
        __HAL_TIM_ENABLE(htim);
 8004232:	2101      	movs	r1, #1
 8004234:	681a      	ldr	r2, [r3, #0]
{
 8004236:	2000      	movs	r0, #0
        __HAL_TIM_ENABLE(htim);
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	e76f      	b.n	800411e <HAL_TIM_IC_Start_IT+0x1e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	2302      	movs	r3, #2
 8004240:	2243      	movs	r2, #67	@ 0x43
 8004242:	5483      	strb	r3, [r0, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004244:	3204      	adds	r2, #4
 8004246:	5483      	strb	r3, [r0, r2]
  switch (Channel)
 8004248:	e768      	b.n	800411c <HAL_TIM_IC_Start_IT+0x1c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800424a:	2340      	movs	r3, #64	@ 0x40
 800424c:	2202      	movs	r2, #2
 800424e:	54c2      	strb	r2, [r0, r3]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004250:	e7c8      	b.n	80041e4 <HAL_TIM_IC_Start_IT+0xe4>
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	08005f54 	.word	0x08005f54
 8004258:	08005f98 	.word	0x08005f98
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40000400 	.word	0x40000400
 8004264:	00010007 	.word	0x00010007

08004268 <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004268:	2202      	movs	r2, #2
{
 800426a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 800426c:	6803      	ldr	r3, [r0, #0]
{
 800426e:	0004      	movs	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8004270:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004272:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004274:	422a      	tst	r2, r5
 8004276:	d002      	beq.n	800427e <HAL_TIM_IRQHandler+0x16>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004278:	4232      	tst	r2, r6
 800427a:	d000      	beq.n	800427e <HAL_TIM_IRQHandler+0x16>
 800427c:	e0a6      	b.n	80043cc <HAL_TIM_IRQHandler+0x164>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800427e:	2304      	movs	r3, #4
 8004280:	422b      	tst	r3, r5
 8004282:	d002      	beq.n	800428a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004284:	4233      	tst	r3, r6
 8004286:	d000      	beq.n	800428a <HAL_TIM_IRQHandler+0x22>
 8004288:	e08a      	b.n	80043a0 <HAL_TIM_IRQHandler+0x138>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800428a:	2308      	movs	r3, #8
 800428c:	422b      	tst	r3, r5
 800428e:	d002      	beq.n	8004296 <HAL_TIM_IRQHandler+0x2e>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004290:	4233      	tst	r3, r6
 8004292:	d000      	beq.n	8004296 <HAL_TIM_IRQHandler+0x2e>
 8004294:	e070      	b.n	8004378 <HAL_TIM_IRQHandler+0x110>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004296:	2310      	movs	r3, #16
 8004298:	422b      	tst	r3, r5
 800429a:	d001      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x38>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800429c:	4233      	tst	r3, r6
 800429e:	d155      	bne.n	800434c <HAL_TIM_IRQHandler+0xe4>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042a0:	2301      	movs	r3, #1
 80042a2:	422b      	tst	r3, r5
 80042a4:	d001      	beq.n	80042aa <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042a6:	4233      	tst	r3, r6
 80042a8:	d135      	bne.n	8004316 <HAL_TIM_IRQHandler+0xae>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042aa:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042ac:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042ae:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042b0:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042b2:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042b4:	421d      	tst	r5, r3
 80042b6:	d03d      	beq.n	8004334 <HAL_TIM_IRQHandler+0xcc>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042b8:	0633      	lsls	r3, r6, #24
 80042ba:	d41b      	bmi.n	80042f4 <HAL_TIM_IRQHandler+0x8c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042bc:	2340      	movs	r3, #64	@ 0x40
 80042be:	422b      	tst	r3, r5
 80042c0:	d001      	beq.n	80042c6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042c2:	4233      	tst	r3, r6
 80042c4:	d10d      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x7a>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042c6:	2320      	movs	r3, #32
 80042c8:	422b      	tst	r3, r5
 80042ca:	d009      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x78>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042cc:	4233      	tst	r3, r6
 80042ce:	d007      	beq.n	80042e0 <HAL_TIM_IRQHandler+0x78>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042d0:	2221      	movs	r2, #33	@ 0x21
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	4252      	negs	r2, r2
 80042d6:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 80042d8:	23ac      	movs	r3, #172	@ 0xac
 80042da:	0020      	movs	r0, r4
 80042dc:	58e3      	ldr	r3, [r4, r3]
 80042de:	4798      	blx	r3
}
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042e2:	2241      	movs	r2, #65	@ 0x41
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	4252      	negs	r2, r2
 80042e8:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 80042ea:	238c      	movs	r3, #140	@ 0x8c
 80042ec:	0020      	movs	r0, r4
 80042ee:	58e3      	ldr	r3, [r4, r3]
 80042f0:	4798      	blx	r3
 80042f2:	e7e8      	b.n	80042c6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	4a47      	ldr	r2, [pc, #284]	@ (8004414 <HAL_TIM_IRQHandler+0x1ac>)
      htim->BreakCallback(htim);
 80042f8:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042fa:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80042fc:	23b4      	movs	r3, #180	@ 0xb4
 80042fe:	58e3      	ldr	r3, [r4, r3]
 8004300:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004302:	2f00      	cmp	r7, #0
 8004304:	d0da      	beq.n	80042bc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	4a43      	ldr	r2, [pc, #268]	@ (8004418 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 800430a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800430c:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 800430e:	23b8      	movs	r3, #184	@ 0xb8
 8004310:	58e3      	ldr	r3, [r4, r3]
 8004312:	4798      	blx	r3
 8004314:	e7d2      	b.n	80042bc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004316:	2202      	movs	r2, #2
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	4252      	negs	r2, r2
 800431c:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 800431e:	2384      	movs	r3, #132	@ 0x84
 8004320:	0020      	movs	r0, r4
 8004322:	58e3      	ldr	r3, [r4, r3]
 8004324:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004326:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004328:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800432a:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800432c:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800432e:	402f      	ands	r7, r5
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004330:	421d      	tst	r5, r3
 8004332:	d1c1      	bne.n	80042b8 <HAL_TIM_IRQHandler+0x50>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004334:	2f00      	cmp	r7, #0
 8004336:	d0c1      	beq.n	80042bc <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004338:	0633      	lsls	r3, r6, #24
 800433a:	d5bf      	bpl.n	80042bc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	4a36      	ldr	r2, [pc, #216]	@ (8004418 <HAL_TIM_IRQHandler+0x1b0>)
      htim->Break2Callback(htim);
 8004340:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004342:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 8004344:	23b8      	movs	r3, #184	@ 0xb8
 8004346:	58e3      	ldr	r3, [r4, r3]
 8004348:	4798      	blx	r3
 800434a:	e7b7      	b.n	80042bc <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800434c:	2211      	movs	r2, #17
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	4252      	negs	r2, r2
 8004352:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004354:	3219      	adds	r2, #25
 8004356:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	23c0      	movs	r3, #192	@ 0xc0
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	421a      	tst	r2, r3
 8004360:	d153      	bne.n	800440a <HAL_TIM_IRQHandler+0x1a2>
        htim->OC_DelayElapsedCallback(htim);
 8004362:	239c      	movs	r3, #156	@ 0x9c
 8004364:	0020      	movs	r0, r4
 8004366:	58e3      	ldr	r3, [r4, r3]
 8004368:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800436a:	23a0      	movs	r3, #160	@ 0xa0
 800436c:	0020      	movs	r0, r4
 800436e:	58e3      	ldr	r3, [r4, r3]
 8004370:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004372:	2300      	movs	r3, #0
 8004374:	7723      	strb	r3, [r4, #28]
 8004376:	e793      	b.n	80042a0 <HAL_TIM_IRQHandler+0x38>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004378:	2209      	movs	r2, #9
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	4252      	negs	r2, r2
 800437e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004380:	320d      	adds	r2, #13
 8004382:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	079b      	lsls	r3, r3, #30
 8004388:	d13a      	bne.n	8004400 <HAL_TIM_IRQHandler+0x198>
        htim->OC_DelayElapsedCallback(htim);
 800438a:	239c      	movs	r3, #156	@ 0x9c
 800438c:	0020      	movs	r0, r4
 800438e:	58e3      	ldr	r3, [r4, r3]
 8004390:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004392:	23a0      	movs	r3, #160	@ 0xa0
 8004394:	0020      	movs	r0, r4
 8004396:	58e3      	ldr	r3, [r4, r3]
 8004398:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	2300      	movs	r3, #0
 800439c:	7723      	strb	r3, [r4, #28]
 800439e:	e77a      	b.n	8004296 <HAL_TIM_IRQHandler+0x2e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043a0:	2205      	movs	r2, #5
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	4252      	negs	r2, r2
 80043a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a8:	3207      	adds	r2, #7
 80043aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	23c0      	movs	r3, #192	@ 0xc0
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	421a      	tst	r2, r3
 80043b4:	d11f      	bne.n	80043f6 <HAL_TIM_IRQHandler+0x18e>
        htim->OC_DelayElapsedCallback(htim);
 80043b6:	239c      	movs	r3, #156	@ 0x9c
 80043b8:	0020      	movs	r0, r4
 80043ba:	58e3      	ldr	r3, [r4, r3]
 80043bc:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80043be:	23a0      	movs	r3, #160	@ 0xa0
 80043c0:	0020      	movs	r0, r4
 80043c2:	58e3      	ldr	r3, [r4, r3]
 80043c4:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	2300      	movs	r3, #0
 80043c8:	7723      	strb	r3, [r4, #28]
 80043ca:	e75e      	b.n	800428a <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043cc:	3a05      	subs	r2, #5
 80043ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043d0:	3204      	adds	r2, #4
 80043d2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	079b      	lsls	r3, r3, #30
 80043d8:	d109      	bne.n	80043ee <HAL_TIM_IRQHandler+0x186>
          htim->OC_DelayElapsedCallback(htim);
 80043da:	239c      	movs	r3, #156	@ 0x9c
 80043dc:	58c3      	ldr	r3, [r0, r3]
 80043de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80043e0:	23a0      	movs	r3, #160	@ 0xa0
 80043e2:	0020      	movs	r0, r4
 80043e4:	58e3      	ldr	r3, [r4, r3]
 80043e6:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e8:	2300      	movs	r3, #0
 80043ea:	7723      	strb	r3, [r4, #28]
 80043ec:	e747      	b.n	800427e <HAL_TIM_IRQHandler+0x16>
          htim->IC_CaptureCallback(htim);
 80043ee:	2394      	movs	r3, #148	@ 0x94
 80043f0:	58c3      	ldr	r3, [r0, r3]
 80043f2:	4798      	blx	r3
 80043f4:	e7f8      	b.n	80043e8 <HAL_TIM_IRQHandler+0x180>
        htim->IC_CaptureCallback(htim);
 80043f6:	2394      	movs	r3, #148	@ 0x94
 80043f8:	0020      	movs	r0, r4
 80043fa:	58e3      	ldr	r3, [r4, r3]
 80043fc:	4798      	blx	r3
 80043fe:	e7e2      	b.n	80043c6 <HAL_TIM_IRQHandler+0x15e>
        htim->IC_CaptureCallback(htim);
 8004400:	2394      	movs	r3, #148	@ 0x94
 8004402:	0020      	movs	r0, r4
 8004404:	58e3      	ldr	r3, [r4, r3]
 8004406:	4798      	blx	r3
 8004408:	e7c7      	b.n	800439a <HAL_TIM_IRQHandler+0x132>
        htim->IC_CaptureCallback(htim);
 800440a:	2394      	movs	r3, #148	@ 0x94
 800440c:	0020      	movs	r0, r4
 800440e:	58e3      	ldr	r3, [r4, r3]
 8004410:	4798      	blx	r3
 8004412:	e7ae      	b.n	8004372 <HAL_TIM_IRQHandler+0x10a>
 8004414:	ffffdf7f 	.word	0xffffdf7f
 8004418:	fffffeff 	.word	0xfffffeff

0800441c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 800441c:	233c      	movs	r3, #60	@ 0x3c
{
 800441e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004420:	5cc3      	ldrb	r3, [r0, r3]
{
 8004422:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8004424:	2b01      	cmp	r3, #1
 8004426:	d100      	bne.n	800442a <HAL_TIM_OC_ConfigChannel+0xe>
 8004428:	e119      	b.n	800465e <HAL_TIM_OC_ConfigChannel+0x242>
  switch (Channel)
 800442a:	2a14      	cmp	r2, #20
 800442c:	d803      	bhi.n	8004436 <HAL_TIM_OC_ConfigChannel+0x1a>
 800442e:	4b8d      	ldr	r3, [pc, #564]	@ (8004664 <HAL_TIM_OC_ConfigChannel+0x248>)
 8004430:	0092      	lsls	r2, r2, #2
 8004432:	589b      	ldr	r3, [r3, r2]
 8004434:	469f      	mov	pc, r3
 8004436:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8004438:	233c      	movs	r3, #60	@ 0x3c
 800443a:	2200      	movs	r2, #0
 800443c:	54e2      	strb	r2, [r4, r3]
}
 800443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004440:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004442:	4d89      	ldr	r5, [pc, #548]	@ (8004668 <HAL_TIM_OC_ConfigChannel+0x24c>)
  tmpccer = TIMx->CCER;
 8004444:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	402a      	ands	r2, r5
 800444a:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800444c:	4d87      	ldr	r5, [pc, #540]	@ (800466c <HAL_TIM_OC_ConfigChannel+0x250>)
  tmpcr2 =  TIMx->CR2;
 800444e:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004450:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004452:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	680d      	ldr	r5, [r1, #0]
 8004456:	022d      	lsls	r5, r5, #8
 8004458:	4315      	orrs	r5, r2
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800445a:	4a85      	ldr	r2, [pc, #532]	@ (8004670 <HAL_TIM_OC_ConfigChannel+0x254>)
 800445c:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800445e:	688a      	ldr	r2, [r1, #8]
 8004460:	0512      	lsls	r2, r2, #20
 8004462:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	4883      	ldr	r0, [pc, #524]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004466:	4283      	cmp	r3, r0
 8004468:	d100      	bne.n	800446c <HAL_TIM_OC_ConfigChannel+0x50>
 800446a:	e0c8      	b.n	80045fe <HAL_TIM_OC_ConfigChannel+0x1e2>
 800446c:	4882      	ldr	r0, [pc, #520]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800446e:	4283      	cmp	r3, r0
 8004470:	d100      	bne.n	8004474 <HAL_TIM_OC_ConfigChannel+0x58>
 8004472:	e0c4      	b.n	80045fe <HAL_TIM_OC_ConfigChannel+0x1e2>
 8004474:	4881      	ldr	r0, [pc, #516]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 8004476:	4283      	cmp	r3, r0
 8004478:	d100      	bne.n	800447c <HAL_TIM_OC_ConfigChannel+0x60>
 800447a:	e0c0      	b.n	80045fe <HAL_TIM_OC_ConfigChannel+0x1e2>
  TIMx->CCR6 = OC_Config->Pulse;
 800447c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800447e:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 8004482:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004484:	65d9      	str	r1, [r3, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 8004486:	621a      	str	r2, [r3, #32]
 8004488:	e7d6      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448a:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800448c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800448e:	4e7c      	ldr	r6, [pc, #496]	@ (8004680 <HAL_TIM_OC_ConfigChannel+0x264>)
  tmpccer = TIMx->CCER;
 8004490:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004492:	6a18      	ldr	r0, [r3, #32]
 8004494:	43a8      	bics	r0, r5
 8004496:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004498:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800449a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800449c:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 800449e:	680e      	ldr	r6, [r1, #0]
 80044a0:	4330      	orrs	r0, r6
  tmpccer &= ~TIM_CCER_CC1P;
 80044a2:	2602      	movs	r6, #2
 80044a4:	43b2      	bics	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 80044a6:	688e      	ldr	r6, [r1, #8]
 80044a8:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044aa:	4e72      	ldr	r6, [pc, #456]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 80044ac:	42b3      	cmp	r3, r6
 80044ae:	d100      	bne.n	80044b2 <HAL_TIM_OC_ConfigChannel+0x96>
 80044b0:	e098      	b.n	80045e4 <HAL_TIM_OC_ConfigChannel+0x1c8>
 80044b2:	4e71      	ldr	r6, [pc, #452]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80044b4:	42b3      	cmp	r3, r6
 80044b6:	d100      	bne.n	80044ba <HAL_TIM_OC_ConfigChannel+0x9e>
 80044b8:	e094      	b.n	80045e4 <HAL_TIM_OC_ConfigChannel+0x1c8>
 80044ba:	4e70      	ldr	r6, [pc, #448]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 80044bc:	42b3      	cmp	r3, r6
 80044be:	d100      	bne.n	80044c2 <HAL_TIM_OC_ConfigChannel+0xa6>
 80044c0:	e090      	b.n	80045e4 <HAL_TIM_OC_ConfigChannel+0x1c8>
  TIMx->CCR1 = OC_Config->Pulse;
 80044c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80044c4:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044c6:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80044c8:	6359      	str	r1, [r3, #52]	@ 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 80044cc:	621a      	str	r2, [r3, #32]
 80044ce:	e7b3      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d0:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044d2:	6803      	ldr	r3, [r0, #0]
  tmpccer = TIMx->CCER;
 80044d4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044d6:	6a18      	ldr	r0, [r3, #32]
 80044d8:	43a8      	bics	r0, r5
 80044da:	6218      	str	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044dc:	4d69      	ldr	r5, [pc, #420]	@ (8004684 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 80044de:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80044e0:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044e2:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e4:	680d      	ldr	r5, [r1, #0]
 80044e6:	022d      	lsls	r5, r5, #8
 80044e8:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC2P;
 80044ea:	2020      	movs	r0, #32
 80044ec:	4382      	bics	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ee:	6888      	ldr	r0, [r1, #8]
 80044f0:	0100      	lsls	r0, r0, #4
 80044f2:	4310      	orrs	r0, r2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f4:	4a5f      	ldr	r2, [pc, #380]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d100      	bne.n	80044fc <HAL_TIM_OC_ConfigChannel+0xe0>
 80044fa:	e08c      	b.n	8004616 <HAL_TIM_OC_ConfigChannel+0x1fa>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d100      	bne.n	8004504 <HAL_TIM_OC_ConfigChannel+0xe8>
 8004502:	e08f      	b.n	8004624 <HAL_TIM_OC_ConfigChannel+0x208>
 8004504:	4a5d      	ldr	r2, [pc, #372]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d100      	bne.n	800450c <HAL_TIM_OC_ConfigChannel+0xf0>
 800450a:	e08b      	b.n	8004624 <HAL_TIM_OC_ConfigChannel+0x208>
  TIMx->CCR2 = OC_Config->Pulse;
 800450c:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800450e:	605e      	str	r6, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004510:	619d      	str	r5, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004512:	639a      	str	r2, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004514:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 8004516:	2000      	movs	r0, #0
 8004518:	e78e      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800451a:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451c:	4d5a      	ldr	r5, [pc, #360]	@ (8004688 <HAL_TIM_OC_ConfigChannel+0x26c>)
  tmpccer = TIMx->CCER;
 800451e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004520:	6a18      	ldr	r0, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004522:	4e57      	ldr	r6, [pc, #348]	@ (8004680 <HAL_TIM_OC_ConfigChannel+0x264>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004524:	4028      	ands	r0, r5
 8004526:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004528:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800452a:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800452c:	4030      	ands	r0, r6
  tmpccmrx |= OC_Config->OCMode;
 800452e:	680e      	ldr	r6, [r1, #0]
 8004530:	4306      	orrs	r6, r0
  tmpccer &= ~TIM_CCER_CC3P;
 8004532:	4856      	ldr	r0, [pc, #344]	@ (800468c <HAL_TIM_OC_ConfigChannel+0x270>)
 8004534:	4002      	ands	r2, r0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004536:	6888      	ldr	r0, [r1, #8]
 8004538:	0200      	lsls	r0, r0, #8
 800453a:	4302      	orrs	r2, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800453c:	484d      	ldr	r0, [pc, #308]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 800453e:	4283      	cmp	r3, r0
 8004540:	d07e      	beq.n	8004640 <HAL_TIM_OC_ConfigChannel+0x224>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004542:	484d      	ldr	r0, [pc, #308]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 8004544:	4283      	cmp	r3, r0
 8004546:	d100      	bne.n	800454a <HAL_TIM_OC_ConfigChannel+0x12e>
 8004548:	e081      	b.n	800464e <HAL_TIM_OC_ConfigChannel+0x232>
 800454a:	484c      	ldr	r0, [pc, #304]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 800454c:	4283      	cmp	r3, r0
 800454e:	d07e      	beq.n	800464e <HAL_TIM_OC_ConfigChannel+0x232>
  TIMx->CCR3 = OC_Config->Pulse;
 8004550:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004552:	605d      	str	r5, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 8004556:	61de      	str	r6, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004558:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800455a:	621a      	str	r2, [r3, #32]
 800455c:	e76c      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800455e:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004560:	4d4b      	ldr	r5, [pc, #300]	@ (8004690 <HAL_TIM_OC_ConfigChannel+0x274>)
  tmpccer = TIMx->CCER;
 8004562:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004564:	6a1a      	ldr	r2, [r3, #32]
 8004566:	402a      	ands	r2, r5
 8004568:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800456a:	4d46      	ldr	r5, [pc, #280]	@ (8004684 <HAL_TIM_OC_ConfigChannel+0x268>)
  tmpcr2 =  TIMx->CR2;
 800456c:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800456e:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004570:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004572:	680d      	ldr	r5, [r1, #0]
 8004574:	022d      	lsls	r5, r5, #8
 8004576:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC4P;
 8004578:	4a46      	ldr	r2, [pc, #280]	@ (8004694 <HAL_TIM_OC_ConfigChannel+0x278>)
 800457a:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800457c:	688a      	ldr	r2, [r1, #8]
 800457e:	0312      	lsls	r2, r2, #12
 8004580:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	483c      	ldr	r0, [pc, #240]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 8004584:	4283      	cmp	r3, r0
 8004586:	d055      	beq.n	8004634 <HAL_TIM_OC_ConfigChannel+0x218>
 8004588:	483b      	ldr	r0, [pc, #236]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 800458a:	4283      	cmp	r3, r0
 800458c:	d052      	beq.n	8004634 <HAL_TIM_OC_ConfigChannel+0x218>
 800458e:	483b      	ldr	r0, [pc, #236]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 8004590:	4283      	cmp	r3, r0
 8004592:	d04f      	beq.n	8004634 <HAL_TIM_OC_ConfigChannel+0x218>
  TIMx->CCR4 = OC_Config->Pulse;
 8004594:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004596:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004598:	2000      	movs	r0, #0
  TIMx->CCMR2 = tmpccmrx;
 800459a:	61dd      	str	r5, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800459c:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 800459e:	621a      	str	r2, [r3, #32]
 80045a0:	e74a      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a2:	6803      	ldr	r3, [r0, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045a4:	4d3c      	ldr	r5, [pc, #240]	@ (8004698 <HAL_TIM_OC_ConfigChannel+0x27c>)
  tmpccer = TIMx->CCER;
 80045a6:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80045a8:	6a1a      	ldr	r2, [r3, #32]
 80045aa:	402a      	ands	r2, r5
 80045ac:	621a      	str	r2, [r3, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045ae:	4d3b      	ldr	r5, [pc, #236]	@ (800469c <HAL_TIM_OC_ConfigChannel+0x280>)
  tmpcr2 =  TIMx->CR2;
 80045b0:	685e      	ldr	r6, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80045b2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80045b4:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 80045b6:	680d      	ldr	r5, [r1, #0]
 80045b8:	4315      	orrs	r5, r2
  tmpccer &= ~TIM_CCER_CC5P;
 80045ba:	4a39      	ldr	r2, [pc, #228]	@ (80046a0 <HAL_TIM_OC_ConfigChannel+0x284>)
 80045bc:	4010      	ands	r0, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80045be:	688a      	ldr	r2, [r1, #8]
 80045c0:	0412      	lsls	r2, r2, #16
 80045c2:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c4:	482b      	ldr	r0, [pc, #172]	@ (8004674 <HAL_TIM_OC_ConfigChannel+0x258>)
 80045c6:	4283      	cmp	r3, r0
 80045c8:	d01f      	beq.n	800460a <HAL_TIM_OC_ConfigChannel+0x1ee>
 80045ca:	482b      	ldr	r0, [pc, #172]	@ (8004678 <HAL_TIM_OC_ConfigChannel+0x25c>)
 80045cc:	4283      	cmp	r3, r0
 80045ce:	d01c      	beq.n	800460a <HAL_TIM_OC_ConfigChannel+0x1ee>
 80045d0:	482a      	ldr	r0, [pc, #168]	@ (800467c <HAL_TIM_OC_ConfigChannel+0x260>)
 80045d2:	4283      	cmp	r3, r0
 80045d4:	d019      	beq.n	800460a <HAL_TIM_OC_ConfigChannel+0x1ee>
  TIMx->CCR5 = OC_Config->Pulse;
 80045d6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045d8:	605e      	str	r6, [r3, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045da:	2000      	movs	r0, #0
  TIMx->CCMR3 = tmpccmrx;
 80045dc:	655d      	str	r5, [r3, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 80045de:	6599      	str	r1, [r3, #88]	@ 0x58
  TIMx->CCER = tmpccer;
 80045e0:	621a      	str	r2, [r3, #32]
 80045e2:	e729      	b.n	8004438 <HAL_TIM_OC_ConfigChannel+0x1c>
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e4:	2608      	movs	r6, #8
 80045e6:	43b2      	bics	r2, r6
    tmpccer |= OC_Config->OCNPolarity;
 80045e8:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ea:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 80045ec:	4332      	orrs	r2, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ee:	2604      	movs	r6, #4
 80045f0:	43b2      	bics	r2, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045f2:	4e2c      	ldr	r6, [pc, #176]	@ (80046a4 <HAL_TIM_OC_ConfigChannel+0x288>)
 80045f4:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80045f6:	694d      	ldr	r5, [r1, #20]
 80045f8:	433d      	orrs	r5, r7
 80045fa:	4335      	orrs	r5, r6
 80045fc:	e761      	b.n	80044c2 <HAL_TIM_OC_ConfigChannel+0xa6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 80045fe:	482a      	ldr	r0, [pc, #168]	@ (80046a8 <HAL_TIM_OC_ConfigChannel+0x28c>)
 8004600:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004602:	694e      	ldr	r6, [r1, #20]
 8004604:	02b6      	lsls	r6, r6, #10
 8004606:	4306      	orrs	r6, r0
 8004608:	e738      	b.n	800447c <HAL_TIM_OC_ConfigChannel+0x60>
    tmpcr2 &= ~TIM_CR2_OIS5;
 800460a:	4823      	ldr	r0, [pc, #140]	@ (8004698 <HAL_TIM_OC_ConfigChannel+0x27c>)
 800460c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800460e:	694e      	ldr	r6, [r1, #20]
 8004610:	0236      	lsls	r6, r6, #8
 8004612:	4306      	orrs	r6, r0
 8004614:	e7df      	b.n	80045d6 <HAL_TIM_OC_ConfigChannel+0x1ba>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004616:	2280      	movs	r2, #128	@ 0x80
 8004618:	4390      	bics	r0, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800461a:	68ca      	ldr	r2, [r1, #12]
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 8004620:	2240      	movs	r2, #64	@ 0x40
 8004622:	4390      	bics	r0, r2
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004624:	4a21      	ldr	r2, [pc, #132]	@ (80046ac <HAL_TIM_OC_ConfigChannel+0x290>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004626:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004628:	4032      	ands	r2, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800462a:	698e      	ldr	r6, [r1, #24]
 800462c:	433e      	orrs	r6, r7
 800462e:	00b6      	lsls	r6, r6, #2
 8004630:	4316      	orrs	r6, r2
 8004632:	e76b      	b.n	800450c <HAL_TIM_OC_ConfigChannel+0xf0>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004634:	481e      	ldr	r0, [pc, #120]	@ (80046b0 <HAL_TIM_OC_ConfigChannel+0x294>)
 8004636:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004638:	694e      	ldr	r6, [r1, #20]
 800463a:	01b6      	lsls	r6, r6, #6
 800463c:	4306      	orrs	r6, r0
 800463e:	e7a9      	b.n	8004594 <HAL_TIM_OC_ConfigChannel+0x178>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004640:	481c      	ldr	r0, [pc, #112]	@ (80046b4 <HAL_TIM_OC_ConfigChannel+0x298>)
 8004642:	4002      	ands	r2, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004644:	68c8      	ldr	r0, [r1, #12]
 8004646:	0200      	lsls	r0, r0, #8
 8004648:	4310      	orrs	r0, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 800464a:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <HAL_TIM_OC_ConfigChannel+0x29c>)
 800464c:	4002      	ands	r2, r0
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800464e:	481b      	ldr	r0, [pc, #108]	@ (80046bc <HAL_TIM_OC_ConfigChannel+0x2a0>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004650:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004652:	4028      	ands	r0, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004654:	698d      	ldr	r5, [r1, #24]
 8004656:	433d      	orrs	r5, r7
 8004658:	012d      	lsls	r5, r5, #4
 800465a:	4305      	orrs	r5, r0
 800465c:	e778      	b.n	8004550 <HAL_TIM_OC_ConfigChannel+0x134>
  __HAL_LOCK(htim);
 800465e:	2002      	movs	r0, #2
 8004660:	e6ed      	b.n	800443e <HAL_TIM_OC_ConfigChannel+0x22>
 8004662:	46c0      	nop			@ (mov r8, r8)
 8004664:	08005fcc 	.word	0x08005fcc
 8004668:	ffefffff 	.word	0xffefffff
 800466c:	feff8fff 	.word	0xfeff8fff
 8004670:	ffdfffff 	.word	0xffdfffff
 8004674:	40012c00 	.word	0x40012c00
 8004678:	40014400 	.word	0x40014400
 800467c:	40014800 	.word	0x40014800
 8004680:	fffeff8c 	.word	0xfffeff8c
 8004684:	feff8cff 	.word	0xfeff8cff
 8004688:	fffffeff 	.word	0xfffffeff
 800468c:	fffffdff 	.word	0xfffffdff
 8004690:	ffffefff 	.word	0xffffefff
 8004694:	ffffdfff 	.word	0xffffdfff
 8004698:	fffeffff 	.word	0xfffeffff
 800469c:	fffeff8f 	.word	0xfffeff8f
 80046a0:	fffdffff 	.word	0xfffdffff
 80046a4:	fffffcff 	.word	0xfffffcff
 80046a8:	fffbffff 	.word	0xfffbffff
 80046ac:	fffff3ff 	.word	0xfffff3ff
 80046b0:	ffffbfff 	.word	0xffffbfff
 80046b4:	fffff7ff 	.word	0xfffff7ff
 80046b8:	fffffbff 	.word	0xfffffbff
 80046bc:	ffffcfff 	.word	0xffffcfff

080046c0 <HAL_TIM_IC_ConfigChannel>:
{
 80046c0:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80046c2:	203c      	movs	r0, #60	@ 0x3c
{
 80046c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c6:	46ce      	mov	lr, r9
 80046c8:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 80046ca:	5c1c      	ldrb	r4, [r3, r0]
{
 80046cc:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 80046ce:	2c01      	cmp	r4, #1
 80046d0:	d100      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0x14>
 80046d2:	e0bf      	b.n	8004854 <HAL_TIM_IC_ConfigChannel+0x194>
 80046d4:	2401      	movs	r4, #1
 80046d6:	541c      	strb	r4, [r3, r0]
  if (Channel == TIM_CHANNEL_1)
 80046d8:	2a00      	cmp	r2, #0
 80046da:	d00e      	beq.n	80046fa <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_2)
 80046dc:	2a04      	cmp	r2, #4
 80046de:	d039      	beq.n	8004754 <HAL_TIM_IC_ConfigChannel+0x94>
  else if (Channel == TIM_CHANNEL_3)
 80046e0:	2a08      	cmp	r2, #8
 80046e2:	d100      	bne.n	80046e6 <HAL_TIM_IC_ConfigChannel+0x26>
 80046e4:	e08d      	b.n	8004802 <HAL_TIM_IC_ConfigChannel+0x142>
    status = HAL_ERROR;
 80046e6:	2001      	movs	r0, #1
  else if (Channel == TIM_CHANNEL_4)
 80046e8:	2a0c      	cmp	r2, #12
 80046ea:	d05a      	beq.n	80047a2 <HAL_TIM_IC_ConfigChannel+0xe2>
  __HAL_UNLOCK(htim);
 80046ec:	223c      	movs	r2, #60	@ 0x3c
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]
}
 80046f2:	bcc0      	pop	{r6, r7}
 80046f4:	46b9      	mov	r9, r7
 80046f6:	46b0      	mov	r8, r6
 80046f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 80046fa:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICSelection,
 80046fc:	6848      	ldr	r0, [r1, #4]
  tmpccer = TIMx->CCER;
 80046fe:	6a15      	ldr	r5, [r2, #32]
                      sConfig->ICSelection,
 8004700:	4681      	mov	r9, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004702:	6a10      	ldr	r0, [r2, #32]
                      sConfig->ICPolarity,
 8004704:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004706:	43a0      	bics	r0, r4
                      sConfig->ICFilter);
 8004708:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470a:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800470c:	6990      	ldr	r0, [r2, #24]
 800470e:	4684      	mov	ip, r0
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004710:	4851      	ldr	r0, [pc, #324]	@ (8004858 <HAL_TIM_IC_ConfigChannel+0x198>)
 8004712:	4282      	cmp	r2, r0
 8004714:	d06e      	beq.n	80047f4 <HAL_TIM_IC_ConfigChannel+0x134>
 8004716:	2080      	movs	r0, #128	@ 0x80
 8004718:	05c0      	lsls	r0, r0, #23
 800471a:	4282      	cmp	r2, r0
 800471c:	d06a      	beq.n	80047f4 <HAL_TIM_IC_ConfigChannel+0x134>
 800471e:	484f      	ldr	r0, [pc, #316]	@ (800485c <HAL_TIM_IC_ConfigChannel+0x19c>)
 8004720:	4282      	cmp	r2, r0
 8004722:	d067      	beq.n	80047f4 <HAL_TIM_IC_ConfigChannel+0x134>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004724:	4660      	mov	r0, ip
 8004726:	4320      	orrs	r0, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004728:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800472a:	013f      	lsls	r7, r7, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800472c:	43a0      	bics	r0, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800472e:	340f      	adds	r4, #15
 8004730:	403c      	ands	r4, r7
 8004732:	4304      	orrs	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004734:	200a      	movs	r0, #10
  TIMx->CCMR1 = tmpccmr1;
 8004736:	6194      	str	r4, [r2, #24]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004738:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800473a:	4385      	bics	r5, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800473c:	4030      	ands	r0, r6
 800473e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004740:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004742:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004744:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004746:	43a0      	bics	r0, r4
 8004748:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800474a:	6990      	ldr	r0, [r2, #24]
 800474c:	4301      	orrs	r1, r0
 800474e:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004750:	2000      	movs	r0, #0
 8004752:	e7cb      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICFilter);
 8004754:	68c8      	ldr	r0, [r1, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004756:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICFilter);
 8004758:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475a:	2010      	movs	r0, #16
  tmpccer = TIMx->CCER;
 800475c:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800475e:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICPolarity,
 8004760:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004762:	4387      	bics	r7, r0
                      sConfig->ICSelection,
 8004764:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004766:	6217      	str	r7, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004768:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800476a:	483d      	ldr	r0, [pc, #244]	@ (8004860 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800476c:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800476e:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004770:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004772:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004774:	4f3b      	ldr	r7, [pc, #236]	@ (8004864 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004776:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004778:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800477a:	0c00      	lsrs	r0, r0, #16
 800477c:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800477e:	24a0      	movs	r4, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004780:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004782:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004784:	4034      	ands	r4, r6
 8004786:	432c      	orrs	r4, r5
  TIMx->CCMR1 = tmpccmr1 ;
 8004788:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 800478a:	6214      	str	r4, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800478c:	6990      	ldr	r0, [r2, #24]
 800478e:	4c36      	ldr	r4, [pc, #216]	@ (8004868 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004790:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004792:	4020      	ands	r0, r4
 8004794:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004796:	6990      	ldr	r0, [r2, #24]
 8004798:	0209      	lsls	r1, r1, #8
 800479a:	4301      	orrs	r1, r0
 800479c:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 800479e:	2000      	movs	r0, #0
 80047a0:	e7a4      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x2c>
                      sConfig->ICPolarity,
 80047a2:	6808      	ldr	r0, [r1, #0]
    TIM_TI4_SetConfig(htim->Instance,
 80047a4:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 80047a6:	4680      	mov	r8, r0
  tmpccer = TIMx->CCER;
 80047a8:	6a16      	ldr	r6, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047aa:	4830      	ldr	r0, [pc, #192]	@ (800486c <HAL_TIM_IC_ConfigChannel+0x1ac>)
 80047ac:	6a17      	ldr	r7, [r2, #32]
                      sConfig->ICSelection,
 80047ae:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	4007      	ands	r7, r0
                      sConfig->ICFilter);
 80047b2:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b4:	6217      	str	r7, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047b6:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047b8:	4829      	ldr	r0, [pc, #164]	@ (8004860 <HAL_TIM_IC_ConfigChannel+0x1a0>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047ba:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047bc:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047be:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047c0:	4f28      	ldr	r7, [pc, #160]	@ (8004864 <HAL_TIM_IC_ConfigChannel+0x1a4>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047c2:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047c4:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047c6:	0c24      	lsrs	r4, r4, #16
 80047c8:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047ca:	4d29      	ldr	r5, [pc, #164]	@ (8004870 <HAL_TIM_IC_ConfigChannel+0x1b0>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047cc:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047ce:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047d0:	26a0      	movs	r6, #160	@ 0xa0
 80047d2:	0300      	lsls	r0, r0, #12
 80047d4:	0236      	lsls	r6, r6, #8
 80047d6:	4030      	ands	r0, r6
 80047d8:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 80047da:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 80047dc:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047de:	69d0      	ldr	r0, [r2, #28]
 80047e0:	4c21      	ldr	r4, [pc, #132]	@ (8004868 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047e2:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80047e4:	4020      	ands	r0, r4
 80047e6:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80047e8:	69d0      	ldr	r0, [r2, #28]
 80047ea:	0209      	lsls	r1, r1, #8
 80047ec:	4301      	orrs	r1, r0
 80047ee:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2000      	movs	r0, #0
 80047f2:	e77b      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x2c>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80047f4:	2403      	movs	r4, #3
 80047f6:	4660      	mov	r0, ip
 80047f8:	43a0      	bics	r0, r4
 80047fa:	0004      	movs	r4, r0
    tmpccmr1 |= TIM_ICSelection;
 80047fc:	4648      	mov	r0, r9
 80047fe:	4320      	orrs	r0, r4
 8004800:	e792      	b.n	8004728 <HAL_TIM_IC_ConfigChannel+0x68>
    TIM_TI3_SetConfig(htim->Instance,
 8004802:	681a      	ldr	r2, [r3, #0]
                      sConfig->ICPolarity,
 8004804:	6808      	ldr	r0, [r1, #0]
  tmpccer = TIMx->CCER;
 8004806:	6a16      	ldr	r6, [r2, #32]
                      sConfig->ICPolarity,
 8004808:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800480a:	6a14      	ldr	r4, [r2, #32]
 800480c:	4819      	ldr	r0, [pc, #100]	@ (8004874 <HAL_TIM_IC_ConfigChannel+0x1b4>)
                      sConfig->ICSelection,
 800480e:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004810:	4004      	ands	r4, r0
                      sConfig->ICFilter);
 8004812:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004814:	6214      	str	r4, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004816:	69d4      	ldr	r4, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004818:	3005      	adds	r0, #5
 800481a:	30ff      	adds	r0, #255	@ 0xff
 800481c:	4384      	bics	r4, r0
  tmpccmr2 |= TIM_ICSelection;
 800481e:	4325      	orrs	r5, r4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004820:	24f0      	movs	r4, #240	@ 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004822:	013f      	lsls	r7, r7, #4
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004824:	43a5      	bics	r5, r4
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004826:	340f      	adds	r4, #15
 8004828:	403c      	ands	r4, r7
 800482a:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800482c:	4d12      	ldr	r5, [pc, #72]	@ (8004878 <HAL_TIM_IC_ConfigChannel+0x1b8>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800482e:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004830:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004832:	26a0      	movs	r6, #160	@ 0xa0
  TIMx->CCMR2 = tmpccmr2;
 8004834:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004836:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004838:	0200      	lsls	r0, r0, #8
 800483a:	0136      	lsls	r6, r6, #4
 800483c:	4030      	ands	r0, r6
 800483e:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8004840:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004842:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004844:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004846:	43a0      	bics	r0, r4
 8004848:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800484a:	69d0      	ldr	r0, [r2, #28]
 800484c:	4301      	orrs	r1, r0
 800484e:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004850:	2000      	movs	r0, #0
 8004852:	e74b      	b.n	80046ec <HAL_TIM_IC_ConfigChannel+0x2c>
  __HAL_LOCK(htim);
 8004854:	2002      	movs	r0, #2
 8004856:	e74c      	b.n	80046f2 <HAL_TIM_IC_ConfigChannel+0x32>
 8004858:	40012c00 	.word	0x40012c00
 800485c:	40000400 	.word	0x40000400
 8004860:	fffffcff 	.word	0xfffffcff
 8004864:	ffff0fff 	.word	0xffff0fff
 8004868:	fffff3ff 	.word	0xfffff3ff
 800486c:	ffffefff 	.word	0xffffefff
 8004870:	ffff5fff 	.word	0xffff5fff
 8004874:	fffffeff 	.word	0xfffffeff
 8004878:	fffff5ff 	.word	0xfffff5ff

0800487c <HAL_TIM_PWM_ConfigChannel>:
{
 800487c:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800487e:	203c      	movs	r0, #60	@ 0x3c
{
 8004880:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8004882:	5c1c      	ldrb	r4, [r3, r0]
 8004884:	2c01      	cmp	r4, #1
 8004886:	d100      	bne.n	800488a <HAL_TIM_PWM_ConfigChannel+0xe>
 8004888:	e16b      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x2e6>
 800488a:	2401      	movs	r4, #1
 800488c:	541c      	strb	r4, [r3, r0]
  switch (Channel)
 800488e:	2a14      	cmp	r2, #20
 8004890:	d803      	bhi.n	800489a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004892:	48b5      	ldr	r0, [pc, #724]	@ (8004b68 <HAL_TIM_PWM_ConfigChannel+0x2ec>)
 8004894:	0092      	lsls	r2, r2, #2
 8004896:	5882      	ldr	r2, [r0, r2]
 8004898:	4697      	mov	pc, r2
 800489a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800489c:	223c      	movs	r2, #60	@ 0x3c
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]
}
 80048a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048a4:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048a6:	4db1      	ldr	r5, [pc, #708]	@ (8004b6c <HAL_TIM_PWM_ConfigChannel+0x2f0>)
  tmpccer = TIMx->CCER;
 80048a8:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048aa:	6a10      	ldr	r0, [r2, #32]
 80048ac:	4028      	ands	r0, r5
 80048ae:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b0:	4daf      	ldr	r5, [pc, #700]	@ (8004b70 <HAL_TIM_PWM_ConfigChannel+0x2f4>)
  tmpcr2 =  TIMx->CR2;
 80048b2:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 80048b4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b6:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048b8:	680d      	ldr	r5, [r1, #0]
 80048ba:	022d      	lsls	r5, r5, #8
 80048bc:	4305      	orrs	r5, r0
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048be:	48ad      	ldr	r0, [pc, #692]	@ (8004b74 <HAL_TIM_PWM_ConfigChannel+0x2f8>)
 80048c0:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048c2:	6888      	ldr	r0, [r1, #8]
 80048c4:	0500      	lsls	r0, r0, #20
 80048c6:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c8:	4cab      	ldr	r4, [pc, #684]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 80048ca:	42a2      	cmp	r2, r4
 80048cc:	d100      	bne.n	80048d0 <HAL_TIM_PWM_ConfigChannel+0x54>
 80048ce:	e118      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x286>
 80048d0:	4caa      	ldr	r4, [pc, #680]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 80048d2:	42a2      	cmp	r2, r4
 80048d4:	d100      	bne.n	80048d8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80048d6:	e114      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x286>
 80048d8:	4ca9      	ldr	r4, [pc, #676]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 80048da:	42a2      	cmp	r2, r4
 80048dc:	d100      	bne.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x64>
 80048de:	e110      	b.n	8004b02 <HAL_TIM_PWM_ConfigChannel+0x286>
  TIMx->CCR6 = OC_Config->Pulse;
 80048e0:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048e2:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 80048e4:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 80048e6:	65d4      	str	r4, [r2, #92]	@ 0x5c
  TIMx->CCER = tmpccer;
 80048e8:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80048ea:	2080      	movs	r0, #128	@ 0x80
 80048ec:	6d54      	ldr	r4, [r2, #84]	@ 0x54
 80048ee:	0100      	lsls	r0, r0, #4
 80048f0:	4320      	orrs	r0, r4
 80048f2:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048f4:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 80048f6:	4ca3      	ldr	r4, [pc, #652]	@ (8004b84 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80048fa:	4020      	ands	r0, r4
 80048fc:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80048fe:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004900:	0209      	lsls	r1, r1, #8
 8004902:	4301      	orrs	r1, r0
 8004904:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004906:	2000      	movs	r0, #0
 8004908:	e7c8      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800490a:	2501      	movs	r5, #1
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800490c:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800490e:	4e9e      	ldr	r6, [pc, #632]	@ (8004b88 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  tmpccer = TIMx->CCER;
 8004910:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004912:	6a14      	ldr	r4, [r2, #32]
 8004914:	43ac      	bics	r4, r5
 8004916:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004918:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800491a:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800491c:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 800491e:	680e      	ldr	r6, [r1, #0]
 8004920:	4334      	orrs	r4, r6
  tmpccer &= ~TIM_CCER_CC1P;
 8004922:	2602      	movs	r6, #2
 8004924:	43b0      	bics	r0, r6
  tmpccer |= OC_Config->OCPolarity;
 8004926:	688e      	ldr	r6, [r1, #8]
 8004928:	4330      	orrs	r0, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800492a:	4e93      	ldr	r6, [pc, #588]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 800492c:	42b2      	cmp	r2, r6
 800492e:	d100      	bne.n	8004932 <HAL_TIM_PWM_ConfigChannel+0xb6>
 8004930:	e0da      	b.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x26c>
 8004932:	4e92      	ldr	r6, [pc, #584]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004934:	42b2      	cmp	r2, r6
 8004936:	d100      	bne.n	800493a <HAL_TIM_PWM_ConfigChannel+0xbe>
 8004938:	e0d6      	b.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x26c>
 800493a:	4e91      	ldr	r6, [pc, #580]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 800493c:	42b2      	cmp	r2, r6
 800493e:	d100      	bne.n	8004942 <HAL_TIM_PWM_ConfigChannel+0xc6>
 8004940:	e0d2      	b.n	8004ae8 <HAL_TIM_PWM_ConfigChannel+0x26c>
  TIMx->CR2 = tmpcr2;
 8004942:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004944:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004946:	684c      	ldr	r4, [r1, #4]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004948:	6909      	ldr	r1, [r1, #16]
  TIMx->CCR1 = OC_Config->Pulse;
 800494a:	6354      	str	r4, [r2, #52]	@ 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800494c:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 800494e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004950:	6990      	ldr	r0, [r2, #24]
 8004952:	4320      	orrs	r0, r4
 8004954:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004956:	6990      	ldr	r0, [r2, #24]
 8004958:	3c04      	subs	r4, #4
 800495a:	43a0      	bics	r0, r4
 800495c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800495e:	6990      	ldr	r0, [r2, #24]
 8004960:	4301      	orrs	r1, r0
 8004962:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004964:	2000      	movs	r0, #0
 8004966:	e799      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004968:	2510      	movs	r5, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800496a:	681a      	ldr	r2, [r3, #0]
  tmpccer = TIMx->CCER;
 800496c:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	6a14      	ldr	r4, [r2, #32]
 8004970:	43ac      	bics	r4, r5
 8004972:	6214      	str	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004974:	4d85      	ldr	r5, [pc, #532]	@ (8004b8c <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8004976:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8004978:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800497a:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	680d      	ldr	r5, [r1, #0]
 800497e:	022d      	lsls	r5, r5, #8
 8004980:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8004982:	2420      	movs	r4, #32
 8004984:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004986:	688c      	ldr	r4, [r1, #8]
 8004988:	0124      	lsls	r4, r4, #4
 800498a:	4304      	orrs	r4, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498c:	487a      	ldr	r0, [pc, #488]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 800498e:	4282      	cmp	r2, r0
 8004990:	d100      	bne.n	8004994 <HAL_TIM_PWM_ConfigChannel+0x118>
 8004992:	e0c2      	b.n	8004b1a <HAL_TIM_PWM_ConfigChannel+0x29e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004994:	4879      	ldr	r0, [pc, #484]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004996:	4282      	cmp	r2, r0
 8004998:	d100      	bne.n	800499c <HAL_TIM_PWM_ConfigChannel+0x120>
 800499a:	e0c5      	b.n	8004b28 <HAL_TIM_PWM_ConfigChannel+0x2ac>
 800499c:	4878      	ldr	r0, [pc, #480]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 800499e:	4282      	cmp	r2, r0
 80049a0:	d100      	bne.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x128>
 80049a2:	e0c1      	b.n	8004b28 <HAL_TIM_PWM_ConfigChannel+0x2ac>
  TIMx->CCR2 = OC_Config->Pulse;
 80049a4:	6848      	ldr	r0, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80049a6:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80049a8:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80049aa:	6390      	str	r0, [r2, #56]	@ 0x38
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ac:	2080      	movs	r0, #128	@ 0x80
  TIMx->CCER = tmpccer;
 80049ae:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049b0:	6994      	ldr	r4, [r2, #24]
 80049b2:	0100      	lsls	r0, r0, #4
 80049b4:	4320      	orrs	r0, r4
 80049b6:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049b8:	6990      	ldr	r0, [r2, #24]
 80049ba:	4c72      	ldr	r4, [pc, #456]	@ (8004b84 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049bc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049be:	4020      	ands	r0, r4
 80049c0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049c2:	6990      	ldr	r0, [r2, #24]
 80049c4:	0209      	lsls	r1, r1, #8
 80049c6:	4301      	orrs	r1, r0
 80049c8:	6191      	str	r1, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80049ca:	2000      	movs	r0, #0
 80049cc:	e766      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049ce:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d0:	4d6f      	ldr	r5, [pc, #444]	@ (8004b90 <HAL_TIM_PWM_ConfigChannel+0x314>)
  tmpccer = TIMx->CCER;
 80049d2:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d4:	6a14      	ldr	r4, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049d6:	4e6c      	ldr	r6, [pc, #432]	@ (8004b88 <HAL_TIM_PWM_ConfigChannel+0x30c>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049d8:	402c      	ands	r4, r5
 80049da:	6214      	str	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80049dc:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80049de:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e0:	4034      	ands	r4, r6
  tmpccmrx |= OC_Config->OCMode;
 80049e2:	680e      	ldr	r6, [r1, #0]
 80049e4:	4326      	orrs	r6, r4
  tmpccer &= ~TIM_CCER_CC3P;
 80049e6:	4c6b      	ldr	r4, [pc, #428]	@ (8004b94 <HAL_TIM_PWM_ConfigChannel+0x318>)
 80049e8:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ea:	688c      	ldr	r4, [r1, #8]
 80049ec:	0224      	lsls	r4, r4, #8
 80049ee:	4320      	orrs	r0, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049f0:	4c61      	ldr	r4, [pc, #388]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 80049f2:	42a2      	cmp	r2, r4
 80049f4:	d100      	bne.n	80049f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049f6:	e0a5      	b.n	8004b44 <HAL_TIM_PWM_ConfigChannel+0x2c8>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049f8:	4c60      	ldr	r4, [pc, #384]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 80049fa:	42a2      	cmp	r2, r4
 80049fc:	d100      	bne.n	8004a00 <HAL_TIM_PWM_ConfigChannel+0x184>
 80049fe:	e0a8      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x2d6>
 8004a00:	4c5f      	ldr	r4, [pc, #380]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004a02:	42a2      	cmp	r2, r4
 8004a04:	d100      	bne.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x18c>
 8004a06:	e0a4      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x2d6>
  TIMx->CCR3 = OC_Config->Pulse;
 8004a08:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a0a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a0c:	61d6      	str	r6, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004a0e:	63d4      	str	r4, [r2, #60]	@ 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a10:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004a12:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a14:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a16:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a18:	4320      	orrs	r0, r4
 8004a1a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a1c:	69d0      	ldr	r0, [r2, #28]
 8004a1e:	3c04      	subs	r4, #4
 8004a20:	43a0      	bics	r0, r4
 8004a22:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a24:	69d0      	ldr	r0, [r2, #28]
 8004a26:	4301      	orrs	r1, r0
 8004a28:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	e736      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a2e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a30:	4d59      	ldr	r5, [pc, #356]	@ (8004b98 <HAL_TIM_PWM_ConfigChannel+0x31c>)
  tmpccer = TIMx->CCER;
 8004a32:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a34:	6a10      	ldr	r0, [r2, #32]
 8004a36:	4028      	ands	r0, r5
 8004a38:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a3a:	4d54      	ldr	r5, [pc, #336]	@ (8004b8c <HAL_TIM_PWM_ConfigChannel+0x310>)
  tmpcr2 =  TIMx->CR2;
 8004a3c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	4028      	ands	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a42:	680d      	ldr	r5, [r1, #0]
 8004a44:	022d      	lsls	r5, r5, #8
 8004a46:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC4P;
 8004a48:	4854      	ldr	r0, [pc, #336]	@ (8004b9c <HAL_TIM_PWM_ConfigChannel+0x320>)
 8004a4a:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a4c:	6888      	ldr	r0, [r1, #8]
 8004a4e:	0300      	lsls	r0, r0, #12
 8004a50:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	4c49      	ldr	r4, [pc, #292]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004a54:	42a2      	cmp	r2, r4
 8004a56:	d06f      	beq.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004a58:	4c48      	ldr	r4, [pc, #288]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004a5a:	42a2      	cmp	r2, r4
 8004a5c:	d06c      	beq.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004a5e:	4c48      	ldr	r4, [pc, #288]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004a60:	42a2      	cmp	r2, r4
 8004a62:	d069      	beq.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x2bc>
  TIMx->CCR4 = OC_Config->Pulse;
 8004a64:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a66:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a68:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004a6a:	6414      	str	r4, [r2, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004a6c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a6e:	2080      	movs	r0, #128	@ 0x80
 8004a70:	69d4      	ldr	r4, [r2, #28]
 8004a72:	0100      	lsls	r0, r0, #4
 8004a74:	4320      	orrs	r0, r4
 8004a76:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a78:	69d0      	ldr	r0, [r2, #28]
 8004a7a:	4c42      	ldr	r4, [pc, #264]	@ (8004b84 <HAL_TIM_PWM_ConfigChannel+0x308>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a7c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a7e:	4020      	ands	r0, r4
 8004a80:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a82:	69d0      	ldr	r0, [r2, #28]
 8004a84:	0209      	lsls	r1, r1, #8
 8004a86:	4301      	orrs	r1, r0
 8004a88:	61d1      	str	r1, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e706      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a8e:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a90:	4d43      	ldr	r5, [pc, #268]	@ (8004ba0 <HAL_TIM_PWM_ConfigChannel+0x324>)
  tmpccer = TIMx->CCER;
 8004a92:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a94:	6a10      	ldr	r0, [r2, #32]
 8004a96:	4028      	ands	r0, r5
 8004a98:	6210      	str	r0, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a9a:	4d42      	ldr	r5, [pc, #264]	@ (8004ba4 <HAL_TIM_PWM_ConfigChannel+0x328>)
  tmpcr2 =  TIMx->CR2;
 8004a9c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004a9e:	6d50      	ldr	r0, [r2, #84]	@ 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aa0:	4028      	ands	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8004aa2:	680d      	ldr	r5, [r1, #0]
 8004aa4:	4305      	orrs	r5, r0
  tmpccer &= ~TIM_CCER_CC5P;
 8004aa6:	4840      	ldr	r0, [pc, #256]	@ (8004ba8 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8004aa8:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aaa:	6888      	ldr	r0, [r1, #8]
 8004aac:	0400      	lsls	r0, r0, #16
 8004aae:	4320      	orrs	r0, r4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab0:	4c31      	ldr	r4, [pc, #196]	@ (8004b78 <HAL_TIM_PWM_ConfigChannel+0x2fc>)
 8004ab2:	42a2      	cmp	r2, r4
 8004ab4:	d02b      	beq.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x292>
 8004ab6:	4c31      	ldr	r4, [pc, #196]	@ (8004b7c <HAL_TIM_PWM_ConfigChannel+0x300>)
 8004ab8:	42a2      	cmp	r2, r4
 8004aba:	d028      	beq.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x292>
 8004abc:	4c30      	ldr	r4, [pc, #192]	@ (8004b80 <HAL_TIM_PWM_ConfigChannel+0x304>)
 8004abe:	42a2      	cmp	r2, r4
 8004ac0:	d025      	beq.n	8004b0e <HAL_TIM_PWM_ConfigChannel+0x292>
  TIMx->CCR5 = OC_Config->Pulse;
 8004ac2:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ac4:	6056      	str	r6, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004ac6:	6555      	str	r5, [r2, #84]	@ 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004ac8:	6594      	str	r4, [r2, #88]	@ 0x58
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004aca:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8004acc:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ace:	6d50      	ldr	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ad0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ad2:	4320      	orrs	r0, r4
 8004ad4:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ad6:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004ad8:	3c04      	subs	r4, #4
 8004ada:	43a0      	bics	r0, r4
 8004adc:	6550      	str	r0, [r2, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ade:	6d50      	ldr	r0, [r2, #84]	@ 0x54
 8004ae0:	4301      	orrs	r1, r0
 8004ae2:	6551      	str	r1, [r2, #84]	@ 0x54
  HAL_StatusTypeDef status = HAL_OK;
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e6d9      	b.n	800489c <HAL_TIM_PWM_ConfigChannel+0x20>
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ae8:	2608      	movs	r6, #8
 8004aea:	43b0      	bics	r0, r6
    tmpccer |= OC_Config->OCNPolarity;
 8004aec:	68ce      	ldr	r6, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004aee:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004af0:	4330      	orrs	r0, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004af2:	2604      	movs	r6, #4
 8004af4:	43b0      	bics	r0, r6
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004af6:	4e2d      	ldr	r6, [pc, #180]	@ (8004bac <HAL_TIM_PWM_ConfigChannel+0x330>)
 8004af8:	402e      	ands	r6, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004afa:	694d      	ldr	r5, [r1, #20]
 8004afc:	433d      	orrs	r5, r7
 8004afe:	4335      	orrs	r5, r6
 8004b00:	e71f      	b.n	8004942 <HAL_TIM_PWM_ConfigChannel+0xc6>
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b02:	4c2b      	ldr	r4, [pc, #172]	@ (8004bb0 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8004b04:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b06:	694e      	ldr	r6, [r1, #20]
 8004b08:	02b6      	lsls	r6, r6, #10
 8004b0a:	4326      	orrs	r6, r4
 8004b0c:	e6e8      	b.n	80048e0 <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b0e:	4c24      	ldr	r4, [pc, #144]	@ (8004ba0 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8004b10:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b12:	694e      	ldr	r6, [r1, #20]
 8004b14:	0236      	lsls	r6, r6, #8
 8004b16:	4326      	orrs	r6, r4
 8004b18:	e7d3      	b.n	8004ac2 <HAL_TIM_PWM_ConfigChannel+0x246>
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b1a:	2080      	movs	r0, #128	@ 0x80
 8004b1c:	4384      	bics	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b1e:	68c8      	ldr	r0, [r1, #12]
 8004b20:	0100      	lsls	r0, r0, #4
 8004b22:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b24:	2040      	movs	r0, #64	@ 0x40
 8004b26:	4384      	bics	r4, r0
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b28:	4822      	ldr	r0, [pc, #136]	@ (8004bb4 <HAL_TIM_PWM_ConfigChannel+0x338>)
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b2a:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b2c:	4030      	ands	r0, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b2e:	698e      	ldr	r6, [r1, #24]
 8004b30:	433e      	orrs	r6, r7
 8004b32:	00b6      	lsls	r6, r6, #2
 8004b34:	4306      	orrs	r6, r0
 8004b36:	e735      	b.n	80049a4 <HAL_TIM_PWM_ConfigChannel+0x128>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b38:	4c1f      	ldr	r4, [pc, #124]	@ (8004bb8 <HAL_TIM_PWM_ConfigChannel+0x33c>)
 8004b3a:	4034      	ands	r4, r6
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b3c:	694e      	ldr	r6, [r1, #20]
 8004b3e:	01b6      	lsls	r6, r6, #6
 8004b40:	4326      	orrs	r6, r4
 8004b42:	e78f      	b.n	8004a64 <HAL_TIM_PWM_ConfigChannel+0x1e8>
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b44:	4c1d      	ldr	r4, [pc, #116]	@ (8004bbc <HAL_TIM_PWM_ConfigChannel+0x340>)
 8004b46:	4020      	ands	r0, r4
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b48:	68cc      	ldr	r4, [r1, #12]
 8004b4a:	0224      	lsls	r4, r4, #8
 8004b4c:	4304      	orrs	r4, r0
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4e:	480d      	ldr	r0, [pc, #52]	@ (8004b84 <HAL_TIM_PWM_ConfigChannel+0x308>)
 8004b50:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b52:	4c1b      	ldr	r4, [pc, #108]	@ (8004bc0 <HAL_TIM_PWM_ConfigChannel+0x344>)
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b54:	694f      	ldr	r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b56:	402c      	ands	r4, r5
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b58:	698d      	ldr	r5, [r1, #24]
 8004b5a:	433d      	orrs	r5, r7
 8004b5c:	012d      	lsls	r5, r5, #4
 8004b5e:	4325      	orrs	r5, r4
 8004b60:	e752      	b.n	8004a08 <HAL_TIM_PWM_ConfigChannel+0x18c>
  __HAL_LOCK(htim);
 8004b62:	2002      	movs	r0, #2
 8004b64:	e69d      	b.n	80048a2 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	08006020 	.word	0x08006020
 8004b6c:	ffefffff 	.word	0xffefffff
 8004b70:	feff8fff 	.word	0xfeff8fff
 8004b74:	ffdfffff 	.word	0xffdfffff
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40014400 	.word	0x40014400
 8004b80:	40014800 	.word	0x40014800
 8004b84:	fffffbff 	.word	0xfffffbff
 8004b88:	fffeff8c 	.word	0xfffeff8c
 8004b8c:	feff8cff 	.word	0xfeff8cff
 8004b90:	fffffeff 	.word	0xfffffeff
 8004b94:	fffffdff 	.word	0xfffffdff
 8004b98:	ffffefff 	.word	0xffffefff
 8004b9c:	ffffdfff 	.word	0xffffdfff
 8004ba0:	fffeffff 	.word	0xfffeffff
 8004ba4:	fffeff8f 	.word	0xfffeff8f
 8004ba8:	fffdffff 	.word	0xfffdffff
 8004bac:	fffffcff 	.word	0xfffffcff
 8004bb0:	fffbffff 	.word	0xfffbffff
 8004bb4:	fffff3ff 	.word	0xfffff3ff
 8004bb8:	ffffbfff 	.word	0xffffbfff
 8004bbc:	fffff7ff 	.word	0xfffff7ff
 8004bc0:	ffffcfff 	.word	0xffffcfff

08004bc4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004bc4:	233c      	movs	r3, #60	@ 0x3c
{
 8004bc6:	b570      	push	{r4, r5, r6, lr}
 8004bc8:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8004bca:	5cc0      	ldrb	r0, [r0, r3]
 8004bcc:	2801      	cmp	r0, #1
 8004bce:	d100      	bne.n	8004bd2 <HAL_TIM_ConfigClockSource+0xe>
 8004bd0:	e073      	b.n	8004cba <HAL_TIM_ConfigClockSource+0xf6>
 8004bd2:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8004bd6:	54d4      	strb	r4, [r2, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	3301      	adds	r3, #1
 8004bda:	54d0      	strb	r0, [r2, r3]
  tmpsmcr = htim->Instance->SMCR;
 8004bdc:	6810      	ldr	r0, [r2, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bde:	4d51      	ldr	r5, [pc, #324]	@ (8004d24 <HAL_TIM_ConfigClockSource+0x160>)
  tmpsmcr = htim->Instance->SMCR;
 8004be0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be2:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8004be4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004be6:	680b      	ldr	r3, [r1, #0]
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d100      	bne.n	8004bee <HAL_TIM_ConfigClockSource+0x2a>
 8004bec:	e067      	b.n	8004cbe <HAL_TIM_ConfigClockSource+0xfa>
 8004bee:	d81d      	bhi.n	8004c2c <HAL_TIM_ConfigClockSource+0x68>
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d100      	bne.n	8004bf6 <HAL_TIM_ConfigClockSource+0x32>
 8004bf4:	e07d      	b.n	8004cf2 <HAL_TIM_ConfigClockSource+0x12e>
 8004bf6:	d93f      	bls.n	8004c78 <HAL_TIM_ConfigClockSource+0xb4>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d135      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0xa4>
                               sClockSourceConfig->ClockPolarity,
 8004bfc:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004bfe:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c00:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c02:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c06:	43a6      	bics	r6, r4
 8004c08:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0a:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004c0c:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0e:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c10:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c12:	240a      	movs	r4, #10
 8004c14:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004c16:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004c18:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004c1a:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004c1c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c1e:	4942      	ldr	r1, [pc, #264]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x164>)
 8004c20:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c22:	2157      	movs	r1, #87	@ 0x57
 8004c24:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004c26:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e01e      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004c2c:	2480      	movs	r4, #128	@ 0x80
 8004c2e:	0164      	lsls	r4, r4, #5
 8004c30:	42a3      	cmp	r3, r4
 8004c32:	d0f9      	beq.n	8004c28 <HAL_TIM_ConfigClockSource+0x64>
 8004c34:	2480      	movs	r4, #128	@ 0x80
 8004c36:	01a4      	lsls	r4, r4, #6
 8004c38:	42a3      	cmp	r3, r4
 8004c3a:	d12b      	bne.n	8004c94 <HAL_TIM_ConfigClockSource+0xd0>
  tmpsmcr = TIMx->SMCR;
 8004c3c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8004d2c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c40:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c42:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	688b      	ldr	r3, [r1, #8]
 8004c46:	68c9      	ldr	r1, [r1, #12]
 8004c48:	432b      	orrs	r3, r5
 8004c4a:	0209      	lsls	r1, r1, #8
 8004c4c:	430b      	orrs	r3, r1
 8004c4e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004c50:	6083      	str	r3, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c52:	2380      	movs	r3, #128	@ 0x80
 8004c54:	6881      	ldr	r1, [r0, #8]
 8004c56:	01db      	lsls	r3, r3, #7
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	e004      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004c60:	2110      	movs	r1, #16
 8004c62:	001c      	movs	r4, r3
 8004c64:	438c      	bics	r4, r1
 8004c66:	d00c      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8004c68:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	233d      	movs	r3, #61	@ 0x3d
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	54d1      	strb	r1, [r2, r3]
  __HAL_UNLOCK(htim);
 8004c70:	2100      	movs	r1, #0
 8004c72:	3b01      	subs	r3, #1
 8004c74:	54d1      	strb	r1, [r2, r3]
}
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d002      	beq.n	8004c82 <HAL_TIM_ConfigClockSource+0xbe>
 8004c7c:	d9f0      	bls.n	8004c60 <HAL_TIM_ConfigClockSource+0x9c>
 8004c7e:	2b30      	cmp	r3, #48	@ 0x30
 8004c80:	d1f2      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004c82:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c84:	4c28      	ldr	r4, [pc, #160]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x164>)
 8004c86:	4021      	ands	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c88:	430b      	orrs	r3, r1
 8004c8a:	2107      	movs	r1, #7
 8004c8c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004c8e:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c90:	2000      	movs	r0, #0
 8004c92:	e7ea      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
  switch (sClockSourceConfig->ClockSource)
 8004c94:	2b70      	cmp	r3, #112	@ 0x70
 8004c96:	d1e7      	bne.n	8004c68 <HAL_TIM_ConfigClockSource+0xa4>
  tmpsmcr = TIMx->SMCR;
 8004c98:	6884      	ldr	r4, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9a:	4b24      	ldr	r3, [pc, #144]	@ (8004d2c <HAL_TIM_ConfigClockSource+0x168>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c9c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca0:	688b      	ldr	r3, [r1, #8]
 8004ca2:	68c9      	ldr	r1, [r1, #12]
 8004ca4:	432b      	orrs	r3, r5
 8004ca6:	0209      	lsls	r1, r1, #8
 8004ca8:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004caa:	2177      	movs	r1, #119	@ 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cac:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 8004cae:	6083      	str	r3, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004cb0:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb2:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8004cb4:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e7d7      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
  __HAL_LOCK(htim);
 8004cba:	2002      	movs	r0, #2
 8004cbc:	e7db      	b.n	8004c76 <HAL_TIM_ConfigClockSource+0xb2>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbe:	2610      	movs	r6, #16
  tmpccer = TIMx->CCER;
 8004cc0:	6a04      	ldr	r4, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc2:	6a05      	ldr	r5, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 8004cc4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cc6:	43b5      	bics	r5, r6
                               sClockSourceConfig->ClockFilter);
 8004cc8:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ccc:	6985      	ldr	r5, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cce:	4e18      	ldr	r6, [pc, #96]	@ (8004d30 <HAL_TIM_ConfigClockSource+0x16c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd0:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cd2:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cd4:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cd6:	25a0      	movs	r5, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cd8:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cda:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cdc:	4323      	orrs	r3, r4
  TIMx->CCMR1 = tmpccmr1 ;
 8004cde:	6181      	str	r1, [r0, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ce2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ce4:	4910      	ldr	r1, [pc, #64]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x164>)
 8004ce6:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ce8:	2167      	movs	r1, #103	@ 0x67
 8004cea:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004cec:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e7bb      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
                               sClockSourceConfig->ClockPolarity,
 8004cf2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf4:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8004cf6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf8:	6a06      	ldr	r6, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cfa:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cfc:	43a6      	bics	r6, r4
 8004cfe:	6206      	str	r6, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d00:	26f0      	movs	r6, #240	@ 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8004d02:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d04:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d06:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d08:	240a      	movs	r4, #10
 8004d0a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8004d0c:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8004d0e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004d10:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004d12:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d14:	4904      	ldr	r1, [pc, #16]	@ (8004d28 <HAL_TIM_ConfigClockSource+0x164>)
 8004d16:	400b      	ands	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d18:	2147      	movs	r1, #71	@ 0x47
 8004d1a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8004d1c:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2000      	movs	r0, #0
 8004d20:	e7a3      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
 8004d22:	46c0      	nop			@ (mov r8, r8)
 8004d24:	ffce0088 	.word	0xffce0088
 8004d28:	ffcfff8f 	.word	0xffcfff8f
 8004d2c:	ffff00ff 	.word	0xffff00ff
 8004d30:	ffff0fff 	.word	0xffff0fff

08004d34 <HAL_TIM_ReadCapturedValue>:
  switch (Channel)
 8004d34:	2908      	cmp	r1, #8
 8004d36:	d011      	beq.n	8004d5c <HAL_TIM_ReadCapturedValue+0x28>
 8004d38:	d806      	bhi.n	8004d48 <HAL_TIM_ReadCapturedValue+0x14>
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d00b      	beq.n	8004d56 <HAL_TIM_ReadCapturedValue+0x22>
 8004d3e:	2904      	cmp	r1, #4
 8004d40:	d107      	bne.n	8004d52 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR2;
 8004d42:	6803      	ldr	r3, [r0, #0]
 8004d44:	6b98      	ldr	r0, [r3, #56]	@ 0x38
}
 8004d46:	4770      	bx	lr
  switch (Channel)
 8004d48:	290c      	cmp	r1, #12
 8004d4a:	d102      	bne.n	8004d52 <HAL_TIM_ReadCapturedValue+0x1e>
      tmpreg =   htim->Instance->CCR4;
 8004d4c:	6803      	ldr	r3, [r0, #0]
 8004d4e:	6c18      	ldr	r0, [r3, #64]	@ 0x40
  return tmpreg;
 8004d50:	e7f9      	b.n	8004d46 <HAL_TIM_ReadCapturedValue+0x12>
  switch (Channel)
 8004d52:	2000      	movs	r0, #0
 8004d54:	e7f7      	b.n	8004d46 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =  htim->Instance->CCR1;
 8004d56:	6803      	ldr	r3, [r0, #0]
 8004d58:	6b58      	ldr	r0, [r3, #52]	@ 0x34
      break;
 8004d5a:	e7f4      	b.n	8004d46 <HAL_TIM_ReadCapturedValue+0x12>
      tmpreg =   htim->Instance->CCR3;
 8004d5c:	6803      	ldr	r3, [r0, #0]
 8004d5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
      break;
 8004d60:	e7f1      	b.n	8004d46 <HAL_TIM_ReadCapturedValue+0x12>
 8004d62:	46c0      	nop			@ (mov r8, r8)

08004d64 <HAL_TIM_RegisterCallback>:
{
 8004d64:	0003      	movs	r3, r0
 8004d66:	b530      	push	{r4, r5, lr}
  if (pCallback == NULL)
 8004d68:	2a00      	cmp	r2, #0
 8004d6a:	d00e      	beq.n	8004d8a <HAL_TIM_RegisterCallback+0x26>
  if (htim->State == HAL_TIM_STATE_READY)
 8004d6c:	253d      	movs	r5, #61	@ 0x3d
 8004d6e:	5d44      	ldrb	r4, [r0, r5]
 8004d70:	b2e0      	uxtb	r0, r4
 8004d72:	2c01      	cmp	r4, #1
 8004d74:	d00b      	beq.n	8004d8e <HAL_TIM_RegisterCallback+0x2a>
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	5d5c      	ldrb	r4, [r3, r5]
    return HAL_ERROR;
 8004d78:	2001      	movs	r0, #1
  else if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	2c00      	cmp	r4, #0
 8004d7c:	d106      	bne.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
    switch (CallbackID)
 8004d7e:	290d      	cmp	r1, #13
 8004d80:	d804      	bhi.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
 8004d82:	4837      	ldr	r0, [pc, #220]	@ (8004e60 <HAL_TIM_RegisterCallback+0xfc>)
 8004d84:	0089      	lsls	r1, r1, #2
 8004d86:	5841      	ldr	r1, [r0, r1]
 8004d88:	468f      	mov	pc, r1
    return HAL_ERROR;
 8004d8a:	2001      	movs	r0, #1
}
 8004d8c:	bd30      	pop	{r4, r5, pc}
    switch (CallbackID)
 8004d8e:	291b      	cmp	r1, #27
 8004d90:	d8fc      	bhi.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
 8004d92:	4834      	ldr	r0, [pc, #208]	@ (8004e64 <HAL_TIM_RegisterCallback+0x100>)
 8004d94:	0089      	lsls	r1, r1, #2
 8004d96:	5841      	ldr	r1, [r0, r1]
 8004d98:	468f      	mov	pc, r1
  HAL_StatusTypeDef status = HAL_OK;
 8004d9a:	2000      	movs	r0, #0
        htim->HallSensor_MspInitCallback   = pCallback;
 8004d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8004d9e:	e7f5      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004da0:	2180      	movs	r1, #128	@ 0x80
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2000      	movs	r0, #0
        htim->HallSensor_MspDeInitCallback = pCallback;
 8004da4:	505a      	str	r2, [r3, r1]
        break;
 8004da6:	e7f1      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004da8:	2000      	movs	r0, #0
        htim->Base_MspInitCallback         = pCallback;
 8004daa:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8004dac:	e7ee      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2000      	movs	r0, #0
        htim->Base_MspDeInitCallback       = pCallback;
 8004db0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8004db2:	e7eb      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2000      	movs	r0, #0
        htim->IC_MspInitCallback           = pCallback;
 8004db6:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8004db8:	e7e8      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dba:	2000      	movs	r0, #0
        htim->IC_MspDeInitCallback         = pCallback;
 8004dbc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8004dbe:	e7e5      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dc0:	2000      	movs	r0, #0
        htim->OC_MspInitCallback           = pCallback;
 8004dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8004dc4:	e7e2      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2000      	movs	r0, #0
        htim->OC_MspDeInitCallback         = pCallback;
 8004dc8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8004dca:	e7df      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dcc:	2000      	movs	r0, #0
        htim->PWM_MspInitCallback          = pCallback;
 8004dce:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8004dd0:	e7dc      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2000      	movs	r0, #0
        htim->PWM_MspDeInitCallback        = pCallback;
 8004dd4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8004dd6:	e7d9      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dd8:	2000      	movs	r0, #0
        htim->OnePulse_MspInitCallback     = pCallback;
 8004dda:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8004ddc:	e7d6      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dde:	2000      	movs	r0, #0
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8004de0:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8004de2:	e7d3      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004de4:	2000      	movs	r0, #0
        htim->Encoder_MspInitCallback      = pCallback;
 8004de6:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8004de8:	e7d0      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2000      	movs	r0, #0
        htim->Encoder_MspDeInitCallback    = pCallback;
 8004dec:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8004dee:	e7cd      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedCallback                = pCallback;
 8004df0:	2184      	movs	r1, #132	@ 0x84
  HAL_StatusTypeDef status = HAL_OK;
 8004df2:	2000      	movs	r0, #0
        htim->PeriodElapsedCallback                = pCallback;
 8004df4:	505a      	str	r2, [r3, r1]
        break;
 8004df6:	e7c9      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004df8:	2188      	movs	r1, #136	@ 0x88
  HAL_StatusTypeDef status = HAL_OK;
 8004dfa:	2000      	movs	r0, #0
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8004dfc:	505a      	str	r2, [r3, r1]
        break;
 8004dfe:	e7c5      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->Break2Callback                       = pCallback;
 8004e00:	21b8      	movs	r1, #184	@ 0xb8
  HAL_StatusTypeDef status = HAL_OK;
 8004e02:	2000      	movs	r0, #0
        htim->Break2Callback                       = pCallback;
 8004e04:	505a      	str	r2, [r3, r1]
        break;
 8004e06:	e7c1      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->BreakCallback                        = pCallback;
 8004e08:	21b4      	movs	r1, #180	@ 0xb4
  HAL_StatusTypeDef status = HAL_OK;
 8004e0a:	2000      	movs	r0, #0
        htim->BreakCallback                        = pCallback;
 8004e0c:	505a      	str	r2, [r3, r1]
        break;
 8004e0e:	e7bd      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationCallback                  = pCallback;
 8004e10:	21ac      	movs	r1, #172	@ 0xac
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2000      	movs	r0, #0
        htim->CommutationCallback                  = pCallback;
 8004e14:	505a      	str	r2, [r3, r1]
        break;
 8004e16:	e7b9      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->CommutationHalfCpltCallback          = pCallback;
 8004e18:	21b0      	movs	r1, #176	@ 0xb0
  HAL_StatusTypeDef status = HAL_OK;
 8004e1a:	2000      	movs	r0, #0
        htim->CommutationHalfCpltCallback          = pCallback;
 8004e1c:	505a      	str	r2, [r3, r1]
        break;
 8004e1e:	e7b5      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerCallback                      = pCallback;
 8004e20:	218c      	movs	r1, #140	@ 0x8c
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2000      	movs	r0, #0
        htim->TriggerCallback                      = pCallback;
 8004e24:	505a      	str	r2, [r3, r1]
        break;
 8004e26:	e7b1      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->TriggerHalfCpltCallback              = pCallback;
 8004e28:	2190      	movs	r1, #144	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;
 8004e2a:	2000      	movs	r0, #0
        htim->TriggerHalfCpltCallback              = pCallback;
 8004e2c:	505a      	str	r2, [r3, r1]
        break;
 8004e2e:	e7ad      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureCallback                   = pCallback;
 8004e30:	2194      	movs	r1, #148	@ 0x94
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2000      	movs	r0, #0
        htim->IC_CaptureCallback                   = pCallback;
 8004e34:	505a      	str	r2, [r3, r1]
        break;
 8004e36:	e7a9      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004e38:	2198      	movs	r1, #152	@ 0x98
  HAL_StatusTypeDef status = HAL_OK;
 8004e3a:	2000      	movs	r0, #0
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8004e3c:	505a      	str	r2, [r3, r1]
        break;
 8004e3e:	e7a5      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->OC_DelayElapsedCallback              = pCallback;
 8004e40:	219c      	movs	r1, #156	@ 0x9c
  HAL_StatusTypeDef status = HAL_OK;
 8004e42:	2000      	movs	r0, #0
        htim->OC_DelayElapsedCallback              = pCallback;
 8004e44:	505a      	str	r2, [r3, r1]
        break;
 8004e46:	e7a1      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004e48:	21a0      	movs	r1, #160	@ 0xa0
  HAL_StatusTypeDef status = HAL_OK;
 8004e4a:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedCallback            = pCallback;
 8004e4c:	505a      	str	r2, [r3, r1]
        break;
 8004e4e:	e79d      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004e50:	21a4      	movs	r1, #164	@ 0xa4
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2000      	movs	r0, #0
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8004e54:	505a      	str	r2, [r3, r1]
        break;
 8004e56:	e799      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
        htim->ErrorCallback                        = pCallback;
 8004e58:	21a8      	movs	r1, #168	@ 0xa8
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2000      	movs	r0, #0
        htim->ErrorCallback                        = pCallback;
 8004e5c:	505a      	str	r2, [r3, r1]
        break;
 8004e5e:	e795      	b.n	8004d8c <HAL_TIM_RegisterCallback+0x28>
 8004e60:	08006074 	.word	0x08006074
 8004e64:	080060ac 	.word	0x080060ac

08004e68 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e68:	233c      	movs	r3, #60	@ 0x3c
{
 8004e6a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004e6c:	5cc3      	ldrb	r3, [r0, r3]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d02a      	beq.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x60>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e72:	233d      	movs	r3, #61	@ 0x3d
 8004e74:	2202      	movs	r2, #2
 8004e76:	54c2      	strb	r2, [r0, r3]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e78:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e7a:	4d14      	ldr	r5, [pc, #80]	@ (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x64>)
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e7e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e82:	42aa      	cmp	r2, r5
 8004e84:	d017      	beq.n	8004eb6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e86:	2570      	movs	r5, #112	@ 0x70
 8004e88:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e8a:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e8c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	2380      	movs	r3, #128	@ 0x80
 8004e90:	05db      	lsls	r3, r3, #23
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d002      	beq.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8004e96:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x68>)
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e9c:	2380      	movs	r3, #128	@ 0x80
 8004e9e:	439c      	bics	r4, r3
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ea0:	688b      	ldr	r3, [r1, #8]
 8004ea2:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea4:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea6:	233d      	movs	r3, #61	@ 0x3d
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 8004eac:	2200      	movs	r2, #0
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004eb2:	2000      	movs	r0, #0
}
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eb6:	4d07      	ldr	r5, [pc, #28]	@ (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004eb8:	402b      	ands	r3, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eba:	684d      	ldr	r5, [r1, #4]
 8004ebc:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ebe:	2570      	movs	r5, #112	@ 0x70
 8004ec0:	43ab      	bics	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec2:	4333      	orrs	r3, r6
  htim->Instance->CR2 = tmpcr2;
 8004ec4:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ec6:	e7e9      	b.n	8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x34>
  __HAL_LOCK(htim);
 8004ec8:	2002      	movs	r0, #2
 8004eca:	e7f3      	b.n	8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ecc:	40012c00 	.word	0x40012c00
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	ff0fffff 	.word	0xff0fffff

08004ed8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed8:	233c      	movs	r3, #60	@ 0x3c
{
 8004eda:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004edc:	5cc3      	ldrb	r3, [r0, r3]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d03d      	beq.n	8004f5e <HAL_TIMEx_ConfigBreakDeadTime+0x86>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ee2:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <HAL_TIMEx_ConfigBreakDeadTime+0x8c>)
 8004ee4:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ee6:	6804      	ldr	r4, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ee8:	4013      	ands	r3, r2
 8004eea:	688a      	ldr	r2, [r1, #8]
 8004eec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eee:	4a1e      	ldr	r2, [pc, #120]	@ (8004f68 <HAL_TIMEx_ConfigBreakDeadTime+0x90>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	684a      	ldr	r2, [r1, #4]
 8004ef4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8004f6c <HAL_TIMEx_ConfigBreakDeadTime+0x94>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	680a      	ldr	r2, [r1, #0]
 8004efc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004efe:	4a1c      	ldr	r2, [pc, #112]	@ (8004f70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8004f00:	4013      	ands	r3, r2
 8004f02:	690a      	ldr	r2, [r1, #16]
 8004f04:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f06:	4a1b      	ldr	r2, [pc, #108]	@ (8004f74 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	694a      	ldr	r2, [r1, #20]
 8004f0c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8004f14:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004f16:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	698a      	ldr	r2, [r1, #24]
 8004f1c:	0412      	lsls	r2, r2, #16
 8004f1e:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004f20:	4a17      	ldr	r2, [pc, #92]	@ (8004f80 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8004f22:	4013      	ands	r3, r2
 8004f24:	69ca      	ldr	r2, [r1, #28]
 8004f26:	4313      	orrs	r3, r2
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f28:	4a16      	ldr	r2, [pc, #88]	@ (8004f84 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8004f2a:	4294      	cmp	r4, r2
 8004f2c:	d005      	beq.n	8004f3a <HAL_TIMEx_ConfigBreakDeadTime+0x62>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f2e:	6463      	str	r3, [r4, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f30:	2200      	movs	r2, #0
 8004f32:	233c      	movs	r3, #60	@ 0x3c
 8004f34:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8004f36:	2000      	movs	r0, #0
}
 8004f38:	bd10      	pop	{r4, pc}
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f3a:	4a13      	ldr	r2, [pc, #76]	@ (8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8004f40:	0512      	lsls	r2, r2, #20
 8004f42:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f44:	4b11      	ldr	r3, [pc, #68]	@ (8004f8c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004f46:	401a      	ands	r2, r3
 8004f48:	6a0b      	ldr	r3, [r1, #32]
 8004f4a:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f4c:	4b10      	ldr	r3, [pc, #64]	@ (8004f90 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004f4e:	401a      	ands	r2, r3
 8004f50:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8004f52:	431a      	orrs	r2, r3
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f54:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <HAL_TIMEx_ConfigBreakDeadTime+0xbc>)
 8004f56:	401a      	ands	r2, r3
 8004f58:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	e7e7      	b.n	8004f2e <HAL_TIMEx_ConfigBreakDeadTime+0x56>
  __HAL_LOCK(htim);
 8004f5e:	2002      	movs	r0, #2
 8004f60:	e7ea      	b.n	8004f38 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	fffffcff 	.word	0xfffffcff
 8004f68:	fffffbff 	.word	0xfffffbff
 8004f6c:	fffff7ff 	.word	0xfffff7ff
 8004f70:	ffffefff 	.word	0xffffefff
 8004f74:	ffffdfff 	.word	0xffffdfff
 8004f78:	ffffbfff 	.word	0xffffbfff
 8004f7c:	fff0ffff 	.word	0xfff0ffff
 8004f80:	efffffff 	.word	0xefffffff
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	ff0fffff 	.word	0xff0fffff
 8004f8c:	feffffff 	.word	0xfeffffff
 8004f90:	fdffffff 	.word	0xfdffffff
 8004f94:	dfffffff 	.word	0xdfffffff

08004f98 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004f98:	4770      	bx	lr
 8004f9a:	46c0      	nop			@ (mov r8, r8)

08004f9c <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 8004f9c:	4770      	bx	lr
 8004f9e:	46c0      	nop			@ (mov r8, r8)

08004fa0 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004fa0:	4770      	bx	lr
 8004fa2:	46c0      	nop			@ (mov r8, r8)

08004fa4 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8004fa4:	4770      	bx	lr
 8004fa6:	46c0      	nop			@ (mov r8, r8)

08004fa8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8004faa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fac:	071a      	lsls	r2, r3, #28
 8004fae:	d506      	bpl.n	8004fbe <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb0:	6801      	ldr	r1, [r0, #0]
 8004fb2:	4c28      	ldr	r4, [pc, #160]	@ (8005054 <UART_AdvFeatureConfig+0xac>)
 8004fb4:	684a      	ldr	r2, [r1, #4]
 8004fb6:	4022      	ands	r2, r4
 8004fb8:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004fba:	4322      	orrs	r2, r4
 8004fbc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fbe:	07da      	lsls	r2, r3, #31
 8004fc0:	d506      	bpl.n	8004fd0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc2:	6801      	ldr	r1, [r0, #0]
 8004fc4:	4c24      	ldr	r4, [pc, #144]	@ (8005058 <UART_AdvFeatureConfig+0xb0>)
 8004fc6:	684a      	ldr	r2, [r1, #4]
 8004fc8:	4022      	ands	r2, r4
 8004fca:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004fcc:	4322      	orrs	r2, r4
 8004fce:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd0:	079a      	lsls	r2, r3, #30
 8004fd2:	d506      	bpl.n	8004fe2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fd4:	6801      	ldr	r1, [r0, #0]
 8004fd6:	4c21      	ldr	r4, [pc, #132]	@ (800505c <UART_AdvFeatureConfig+0xb4>)
 8004fd8:	684a      	ldr	r2, [r1, #4]
 8004fda:	4022      	ands	r2, r4
 8004fdc:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004fde:	4322      	orrs	r2, r4
 8004fe0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe2:	075a      	lsls	r2, r3, #29
 8004fe4:	d506      	bpl.n	8004ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fe6:	6801      	ldr	r1, [r0, #0]
 8004fe8:	4c1d      	ldr	r4, [pc, #116]	@ (8005060 <UART_AdvFeatureConfig+0xb8>)
 8004fea:	684a      	ldr	r2, [r1, #4]
 8004fec:	4022      	ands	r2, r4
 8004fee:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004ff0:	4322      	orrs	r2, r4
 8004ff2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ff4:	06da      	lsls	r2, r3, #27
 8004ff6:	d506      	bpl.n	8005006 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ff8:	6801      	ldr	r1, [r0, #0]
 8004ffa:	4c1a      	ldr	r4, [pc, #104]	@ (8005064 <UART_AdvFeatureConfig+0xbc>)
 8004ffc:	688a      	ldr	r2, [r1, #8]
 8004ffe:	4022      	ands	r2, r4
 8005000:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005002:	4322      	orrs	r2, r4
 8005004:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005006:	069a      	lsls	r2, r3, #26
 8005008:	d506      	bpl.n	8005018 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500a:	6801      	ldr	r1, [r0, #0]
 800500c:	4c16      	ldr	r4, [pc, #88]	@ (8005068 <UART_AdvFeatureConfig+0xc0>)
 800500e:	688a      	ldr	r2, [r1, #8]
 8005010:	4022      	ands	r2, r4
 8005012:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8005014:	4322      	orrs	r2, r4
 8005016:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005018:	065a      	lsls	r2, r3, #25
 800501a:	d50a      	bpl.n	8005032 <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800501c:	6801      	ldr	r1, [r0, #0]
 800501e:	4d13      	ldr	r5, [pc, #76]	@ (800506c <UART_AdvFeatureConfig+0xc4>)
 8005020:	684a      	ldr	r2, [r1, #4]
 8005022:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8005024:	402a      	ands	r2, r5
 8005026:	4322      	orrs	r2, r4
 8005028:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502a:	2280      	movs	r2, #128	@ 0x80
 800502c:	0352      	lsls	r2, r2, #13
 800502e:	4294      	cmp	r4, r2
 8005030:	d009      	beq.n	8005046 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005032:	061b      	lsls	r3, r3, #24
 8005034:	d506      	bpl.n	8005044 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005036:	6802      	ldr	r2, [r0, #0]
 8005038:	490d      	ldr	r1, [pc, #52]	@ (8005070 <UART_AdvFeatureConfig+0xc8>)
 800503a:	6853      	ldr	r3, [r2, #4]
 800503c:	400b      	ands	r3, r1
 800503e:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8005040:	430b      	orrs	r3, r1
 8005042:	6053      	str	r3, [r2, #4]
  }
}
 8005044:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005046:	684a      	ldr	r2, [r1, #4]
 8005048:	4c0a      	ldr	r4, [pc, #40]	@ (8005074 <UART_AdvFeatureConfig+0xcc>)
 800504a:	4022      	ands	r2, r4
 800504c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800504e:	4322      	orrs	r2, r4
 8005050:	604a      	str	r2, [r1, #4]
 8005052:	e7ee      	b.n	8005032 <UART_AdvFeatureConfig+0x8a>
 8005054:	ffff7fff 	.word	0xffff7fff
 8005058:	fffdffff 	.word	0xfffdffff
 800505c:	fffeffff 	.word	0xfffeffff
 8005060:	fffbffff 	.word	0xfffbffff
 8005064:	ffffefff 	.word	0xffffefff
 8005068:	ffffdfff 	.word	0xffffdfff
 800506c:	ffefffff 	.word	0xffefffff
 8005070:	fff7ffff 	.word	0xfff7ffff
 8005074:	ff9fffff 	.word	0xff9fffff

08005078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800507a:	2390      	movs	r3, #144	@ 0x90
 800507c:	2200      	movs	r2, #0
{
 800507e:	46c6      	mov	lr, r8
 8005080:	0004      	movs	r4, r0
 8005082:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005086:	f7fc ff07 	bl	8001e98 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800508c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	0712      	lsls	r2, r2, #28
 8005092:	d411      	bmi.n	80050b8 <UART_CheckIdleState+0x40>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	0752      	lsls	r2, r2, #29
 8005098:	d43e      	bmi.n	8005118 <UART_CheckIdleState+0xa0>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800509a:	2320      	movs	r3, #32
 800509c:	2288      	movs	r2, #136	@ 0x88
 800509e:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050a0:	3204      	adds	r2, #4
 80050a2:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a4:	2300      	movs	r3, #0
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80050a6:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a8:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050aa:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80050ac:	2384      	movs	r3, #132	@ 0x84
 80050ae:	2200      	movs	r2, #0
 80050b0:	54e2      	strb	r2, [r4, r3]
}
 80050b2:	bc80      	pop	{r7}
 80050b4:	46b8      	mov	r8, r7
 80050b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b8:	69da      	ldr	r2, [r3, #28]
 80050ba:	0292      	lsls	r2, r2, #10
 80050bc:	d4ea      	bmi.n	8005094 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050be:	2680      	movs	r6, #128	@ 0x80
        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c0:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050c2:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050c4:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c6:	04b6      	lsls	r6, r6, #18
 80050c8:	e010      	b.n	80050ec <UART_CheckIdleState+0x74>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	4217      	tst	r7, r2
 80050d0:	d009      	beq.n	80050e6 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050d2:	4641      	mov	r1, r8
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	4211      	tst	r1, r2
 80050d8:	d159      	bne.n	800518e <UART_CheckIdleState+0x116>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050da:	2280      	movs	r2, #128	@ 0x80
 80050dc:	69d9      	ldr	r1, [r3, #28]
 80050de:	0112      	lsls	r2, r2, #4
 80050e0:	4211      	tst	r1, r2
 80050e2:	d000      	beq.n	80050e6 <UART_CheckIdleState+0x6e>
 80050e4:	e085      	b.n	80051f2 <UART_CheckIdleState+0x17a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	0292      	lsls	r2, r2, #10
 80050ea:	d4d3      	bmi.n	8005094 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050ec:	f7fc fed4 	bl	8001e98 <HAL_GetTick>
 80050f0:	1b40      	subs	r0, r0, r5
 80050f2:	42b0      	cmp	r0, r6
 80050f4:	d3e9      	bcc.n	80050ca <UART_CheckIdleState+0x52>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f6:	f3ef 8110 	mrs	r1, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fa:	2301      	movs	r3, #1
 80050fc:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005100:	2080      	movs	r0, #128	@ 0x80
 8005102:	6822      	ldr	r2, [r4, #0]
 8005104:	6813      	ldr	r3, [r2, #0]
 8005106:	4383      	bics	r3, r0
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800510e:	2388      	movs	r3, #136	@ 0x88
 8005110:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8005112:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8005114:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8005116:	e7c9      	b.n	80050ac <UART_CheckIdleState+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	025b      	lsls	r3, r3, #9
 800511c:	d4bd      	bmi.n	800509a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800511e:	2680      	movs	r6, #128	@ 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005120:	2308      	movs	r3, #8
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005122:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005124:	4698      	mov	r8, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	04b6      	lsls	r6, r6, #18
 8005128:	e011      	b.n	800514e <UART_CheckIdleState+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4217      	tst	r7, r2
 8005130:	d00a      	beq.n	8005148 <UART_CheckIdleState+0xd0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005132:	4641      	mov	r1, r8
 8005134:	69da      	ldr	r2, [r3, #28]
 8005136:	4211      	tst	r1, r2
 8005138:	d000      	beq.n	800513c <UART_CheckIdleState+0xc4>
 800513a:	e08b      	b.n	8005254 <UART_CheckIdleState+0x1dc>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513c:	2280      	movs	r2, #128	@ 0x80
 800513e:	69d9      	ldr	r1, [r3, #28]
 8005140:	0112      	lsls	r2, r2, #4
 8005142:	4211      	tst	r1, r2
 8005144:	d000      	beq.n	8005148 <UART_CheckIdleState+0xd0>
 8005146:	e0b7      	b.n	80052b8 <UART_CheckIdleState+0x240>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	025b      	lsls	r3, r3, #9
 800514c:	d4a5      	bmi.n	800509a <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800514e:	f7fc fea3 	bl	8001e98 <HAL_GetTick>
 8005152:	1b40      	subs	r0, r0, r5
 8005154:	42b0      	cmp	r0, r6
 8005156:	d3e8      	bcc.n	800512a <UART_CheckIdleState+0xb2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005158:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800515c:	2201      	movs	r2, #1
 800515e:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005162:	6821      	ldr	r1, [r4, #0]
 8005164:	4d6d      	ldr	r5, [pc, #436]	@ (800531c <UART_CheckIdleState+0x2a4>)
 8005166:	680b      	ldr	r3, [r1, #0]
 8005168:	402b      	ands	r3, r5
 800516a:	600b      	str	r3, [r1, #0]
 800516c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005170:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005174:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005178:	6821      	ldr	r1, [r4, #0]
 800517a:	688b      	ldr	r3, [r1, #8]
 800517c:	4393      	bics	r3, r2
 800517e:	608b      	str	r3, [r1, #8]
 8005180:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8005184:	238c      	movs	r3, #140	@ 0x8c
 8005186:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 8005188:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800518a:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 800518c:	e78e      	b.n	80050ac <UART_CheckIdleState+0x34>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800518e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005190:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005194:	2201      	movs	r2, #1
 8005196:	f382 8810 	msr	PRIMASK, r2
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800519a:	6821      	ldr	r1, [r4, #0]
 800519c:	4d5f      	ldr	r5, [pc, #380]	@ (800531c <UART_CheckIdleState+0x2a4>)
 800519e:	680b      	ldr	r3, [r1, #0]
 80051a0:	402b      	ands	r3, r5
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ac:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	485b      	ldr	r0, [pc, #364]	@ (8005320 <UART_CheckIdleState+0x2a8>)
 80051b4:	6893      	ldr	r3, [r2, #8]
 80051b6:	4003      	ands	r3, r0
 80051b8:	6093      	str	r3, [r2, #8]
 80051ba:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051be:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d10a      	bne.n	80051da <UART_CheckIdleState+0x162>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c8:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051cc:	2010      	movs	r0, #16
 80051ce:	6822      	ldr	r2, [r4, #0]
 80051d0:	6813      	ldr	r3, [r2, #0]
 80051d2:	4383      	bics	r3, r0
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051da:	238c      	movs	r3, #140	@ 0x8c
 80051dc:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051de:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e2:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051e4:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e6:	66e3      	str	r3, [r4, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051e8:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051ea:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80051ec:	3a0c      	subs	r2, #12
 80051ee:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80051f0:	e781      	b.n	80050f6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f2:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f8:	2201      	movs	r2, #1
 80051fa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fe:	6821      	ldr	r1, [r4, #0]
 8005200:	4d46      	ldr	r5, [pc, #280]	@ (800531c <UART_CheckIdleState+0x2a4>)
 8005202:	680b      	ldr	r3, [r1, #0]
 8005204:	402b      	ands	r3, r5
 8005206:	600b      	str	r3, [r1, #0]
 8005208:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800520c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005210:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005214:	6822      	ldr	r2, [r4, #0]
 8005216:	4842      	ldr	r0, [pc, #264]	@ (8005320 <UART_CheckIdleState+0x2a8>)
 8005218:	6893      	ldr	r3, [r2, #8]
 800521a:	4003      	ands	r3, r0
 800521c:	6093      	str	r3, [r2, #8]
 800521e:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005222:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10a      	bne.n	800523e <UART_CheckIdleState+0x1c6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005228:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	2010      	movs	r0, #16
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	6813      	ldr	r3, [r2, #0]
 8005236:	4383      	bics	r3, r0
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 800523e:	2220      	movs	r2, #32
 8005240:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005242:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 8005244:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005246:	2300      	movs	r3, #0
 8005248:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 800524a:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800524c:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 800524e:	3264      	adds	r2, #100	@ 0x64
 8005250:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005252:	e750      	b.n	80050f6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005254:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005256:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525a:	2201      	movs	r2, #1
 800525c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005260:	6821      	ldr	r1, [r4, #0]
 8005262:	4d2e      	ldr	r5, [pc, #184]	@ (800531c <UART_CheckIdleState+0x2a4>)
 8005264:	680b      	ldr	r3, [r1, #0]
 8005266:	402b      	ands	r3, r5
 8005268:	600b      	str	r3, [r1, #0]
 800526a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	4829      	ldr	r0, [pc, #164]	@ (8005320 <UART_CheckIdleState+0x2a8>)
 800527a:	6893      	ldr	r3, [r2, #8]
 800527c:	4003      	ands	r3, r0
 800527e:	6093      	str	r3, [r2, #8]
 8005280:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005284:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d10a      	bne.n	80052a0 <UART_CheckIdleState+0x228>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800528a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005292:	2010      	movs	r0, #16
 8005294:	6822      	ldr	r2, [r4, #0]
 8005296:	6813      	ldr	r3, [r2, #0]
 8005298:	4383      	bics	r3, r0
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 80052a0:	238c      	movs	r3, #140	@ 0x8c
 80052a2:	2220      	movs	r2, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052a4:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80052a6:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	2300      	movs	r3, #0
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052aa:	3270      	adds	r2, #112	@ 0x70
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ac:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 80052ae:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052b0:	50a1      	str	r1, [r4, r2]
          __HAL_UNLOCK(huart);
 80052b2:	3a0c      	subs	r2, #12
 80052b4:	54a3      	strb	r3, [r4, r2]
          return HAL_ERROR;
 80052b6:	e74f      	b.n	8005158 <UART_CheckIdleState+0xe0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052be:	2201      	movs	r2, #1
 80052c0:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052c4:	6821      	ldr	r1, [r4, #0]
 80052c6:	4d15      	ldr	r5, [pc, #84]	@ (800531c <UART_CheckIdleState+0x2a4>)
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	402b      	ands	r3, r5
 80052cc:	600b      	str	r3, [r1, #0]
 80052ce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	4810      	ldr	r0, [pc, #64]	@ (8005320 <UART_CheckIdleState+0x2a8>)
 80052de:	6893      	ldr	r3, [r2, #8]
 80052e0:	4003      	ands	r3, r0
 80052e2:	6093      	str	r3, [r2, #8]
 80052e4:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e8:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10a      	bne.n	8005304 <UART_CheckIdleState+0x28c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ee:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f6:	2010      	movs	r0, #16
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	4383      	bics	r3, r0
 80052fe:	6013      	str	r3, [r2, #0]
 8005300:	f381 8810 	msr	PRIMASK, r1
  huart->RxState = HAL_UART_STATE_READY;
 8005304:	2220      	movs	r2, #32
 8005306:	238c      	movs	r3, #140	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005308:	2190      	movs	r1, #144	@ 0x90
  huart->RxState = HAL_UART_STATE_READY;
 800530a:	50e2      	str	r2, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530c:	2300      	movs	r3, #0
 800530e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxISR = NULL;
 8005310:	6763      	str	r3, [r4, #116]	@ 0x74
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005312:	5062      	str	r2, [r4, r1]
          __HAL_UNLOCK(huart);
 8005314:	3264      	adds	r2, #100	@ 0x64
 8005316:	54a3      	strb	r3, [r4, r2]
          return HAL_TIMEOUT;
 8005318:	e71e      	b.n	8005158 <UART_CheckIdleState+0xe0>
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	fffffedf 	.word	0xfffffedf
 8005320:	effffffe 	.word	0xeffffffe

08005324 <HAL_UART_Init>:
{
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005328:	d03e      	beq.n	80053a8 <HAL_UART_Init+0x84>
  if (huart->gState == HAL_UART_STATE_RESET)
 800532a:	2388      	movs	r3, #136	@ 0x88
 800532c:	58c3      	ldr	r3, [r0, r3]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d100      	bne.n	8005334 <HAL_UART_Init+0x10>
 8005332:	e07d      	b.n	8005430 <HAL_UART_Init+0x10c>
  huart->gState = HAL_UART_STATE_BUSY;
 8005334:	2388      	movs	r3, #136	@ 0x88
 8005336:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8005338:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800533a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 800533c:	682b      	ldr	r3, [r5, #0]
 800533e:	3a23      	subs	r2, #35	@ 0x23
 8005340:	4393      	bics	r3, r2
 8005342:	602b      	str	r3, [r5, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005344:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005346:	2b00      	cmp	r3, #0
 8005348:	d000      	beq.n	800534c <HAL_UART_Init+0x28>
 800534a:	e06d      	b.n	8005428 <HAL_UART_Init+0x104>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800534c:	6921      	ldr	r1, [r4, #16]
 800534e:	68a3      	ldr	r3, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005350:	682a      	ldr	r2, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005352:	430b      	orrs	r3, r1
 8005354:	6961      	ldr	r1, [r4, #20]
 8005356:	69e0      	ldr	r0, [r4, #28]
 8005358:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535a:	498a      	ldr	r1, [pc, #552]	@ (8005584 <HAL_UART_Init+0x260>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800535c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535e:	400a      	ands	r2, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005364:	686b      	ldr	r3, [r5, #4]
 8005366:	4a88      	ldr	r2, [pc, #544]	@ (8005588 <HAL_UART_Init+0x264>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005368:	4988      	ldr	r1, [pc, #544]	@ (800558c <HAL_UART_Init+0x268>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800536a:	4013      	ands	r3, r2
 800536c:	68e2      	ldr	r2, [r4, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005372:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005374:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005376:	428d      	cmp	r5, r1
 8005378:	d066      	beq.n	8005448 <HAL_UART_Init+0x124>
    tmpreg |= huart->Init.OneBitSampling;
 800537a:	6a26      	ldr	r6, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800537c:	68a9      	ldr	r1, [r5, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800537e:	4333      	orrs	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005380:	4e83      	ldr	r6, [pc, #524]	@ (8005590 <HAL_UART_Init+0x26c>)
 8005382:	4031      	ands	r1, r6
 8005384:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005386:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005388:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800538a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800538c:	438b      	bics	r3, r1
 800538e:	4313      	orrs	r3, r2
 8005390:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005392:	4b80      	ldr	r3, [pc, #512]	@ (8005594 <HAL_UART_Init+0x270>)
 8005394:	429d      	cmp	r5, r3
 8005396:	d009      	beq.n	80053ac <HAL_UART_Init+0x88>
 8005398:	4b7f      	ldr	r3, [pc, #508]	@ (8005598 <HAL_UART_Init+0x274>)
 800539a:	429d      	cmp	r5, r3
 800539c:	d012      	beq.n	80053c4 <HAL_UART_Init+0xa0>
  huart->NbRxDataToProcess = 1;
 800539e:	4b7f      	ldr	r3, [pc, #508]	@ (800559c <HAL_UART_Init+0x278>)
 80053a0:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80053a6:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_ERROR;
 80053a8:	2001      	movs	r0, #1
}
 80053aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053ac:	4b7c      	ldr	r3, [pc, #496]	@ (80055a0 <HAL_UART_Init+0x27c>)
 80053ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053b0:	2303      	movs	r3, #3
 80053b2:	400b      	ands	r3, r1
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d040      	beq.n	800543a <HAL_UART_Init+0x116>
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d100      	bne.n	80053be <HAL_UART_Init+0x9a>
 80053bc:	e0ab      	b.n	8005516 <HAL_UART_Init+0x1f2>
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d100      	bne.n	80053c4 <HAL_UART_Init+0xa0>
 80053c2:	e0a1      	b.n	8005508 <HAL_UART_Init+0x1e4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	4298      	cmp	r0, r3
 80053ca:	d100      	bne.n	80053ce <HAL_UART_Init+0xaa>
 80053cc:	e0d4      	b.n	8005578 <HAL_UART_Init+0x254>
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ce:	f7fe f889 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d100      	bne.n	80053d8 <HAL_UART_Init+0xb4>
 80053d6:	e091      	b.n	80054fc <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80053da:	4b72      	ldr	r3, [pc, #456]	@ (80055a4 <HAL_UART_Init+0x280>)
 80053dc:	0052      	lsls	r2, r2, #1
 80053de:	5ad1      	ldrh	r1, [r2, r3]
 80053e0:	f7fa fe90 	bl	8000104 <__udivsi3>
 80053e4:	6865      	ldr	r5, [r4, #4]
 80053e6:	086b      	lsrs	r3, r5, #1
 80053e8:	18c0      	adds	r0, r0, r3
 80053ea:	0029      	movs	r1, r5
 80053ec:	f7fa fe8a 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	0002      	movs	r2, r0
 80053f2:	4b6d      	ldr	r3, [pc, #436]	@ (80055a8 <HAL_UART_Init+0x284>)
 80053f4:	3a10      	subs	r2, #16
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d8d1      	bhi.n	800539e <HAL_UART_Init+0x7a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80053fe:	4a67      	ldr	r2, [pc, #412]	@ (800559c <HAL_UART_Init+0x278>)
 8005400:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8005402:	2200      	movs	r2, #0
 8005404:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8005406:	67a2      	str	r2, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4968      	ldr	r1, [pc, #416]	@ (80055ac <HAL_UART_Init+0x288>)
  return (UART_CheckIdleState(huart));
 800540c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800540e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005410:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005412:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	438a      	bics	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	3929      	subs	r1, #41	@ 0x29
 800541e:	430a      	orrs	r2, r1
 8005420:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8005422:	f7ff fe29 	bl	8005078 <UART_CheckIdleState>
 8005426:	e7c0      	b.n	80053aa <HAL_UART_Init+0x86>
    UART_AdvFeatureConfig(huart);
 8005428:	0020      	movs	r0, r4
 800542a:	f7ff fdbd 	bl	8004fa8 <UART_AdvFeatureConfig>
 800542e:	e78d      	b.n	800534c <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8005430:	2284      	movs	r2, #132	@ 0x84
 8005432:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 8005434:	f7fc f9e0 	bl	80017f8 <HAL_UART_MspInit>
 8005438:	e77c      	b.n	8005334 <HAL_UART_Init+0x10>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800543a:	2380      	movs	r3, #128	@ 0x80
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	4298      	cmp	r0, r3
 8005440:	d100      	bne.n	8005444 <HAL_UART_Init+0x120>
 8005442:	e093      	b.n	800556c <HAL_UART_Init+0x248>
        pclk = (uint32_t) HSI_VALUE;
 8005444:	485a      	ldr	r0, [pc, #360]	@ (80055b0 <HAL_UART_Init+0x28c>)
 8005446:	e7c8      	b.n	80053da <HAL_UART_Init+0xb6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005448:	68a9      	ldr	r1, [r5, #8]
 800544a:	4851      	ldr	r0, [pc, #324]	@ (8005590 <HAL_UART_Init+0x26c>)
 800544c:	4001      	ands	r1, r0
 800544e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005450:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005452:	60ab      	str	r3, [r5, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005454:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005456:	2080      	movs	r0, #128	@ 0x80
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005458:	438b      	bics	r3, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545a:	21c0      	movs	r1, #192	@ 0xc0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800545c:	4313      	orrs	r3, r2
 800545e:	62eb      	str	r3, [r5, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005460:	4b4f      	ldr	r3, [pc, #316]	@ (80055a0 <HAL_UART_Init+0x27c>)
 8005462:	0109      	lsls	r1, r1, #4
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	0100      	lsls	r0, r0, #4
 8005468:	400b      	ands	r3, r1
 800546a:	4283      	cmp	r3, r0
 800546c:	d100      	bne.n	8005470 <HAL_UART_Init+0x14c>
 800546e:	e086      	b.n	800557e <HAL_UART_Init+0x25a>
 8005470:	d80d      	bhi.n	800548e <HAL_UART_Init+0x16a>
 8005472:	2b00      	cmp	r3, #0
 8005474:	d07c      	beq.n	8005570 <HAL_UART_Init+0x24c>
 8005476:	2280      	movs	r2, #128	@ 0x80
 8005478:	00d2      	lsls	r2, r2, #3
 800547a:	4293      	cmp	r3, r2
 800547c:	d000      	beq.n	8005480 <HAL_UART_Init+0x15c>
 800547e:	e78e      	b.n	800539e <HAL_UART_Init+0x7a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005480:	f7fd ff1a 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8005484:	0005      	movs	r5, r0
    if (pclk != 0U)
 8005486:	2d00      	cmp	r5, #0
 8005488:	d06a      	beq.n	8005560 <HAL_UART_Init+0x23c>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800548a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800548c:	e004      	b.n	8005498 <HAL_UART_Init+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800548e:	428b      	cmp	r3, r1
 8005490:	d000      	beq.n	8005494 <HAL_UART_Init+0x170>
 8005492:	e784      	b.n	800539e <HAL_UART_Init+0x7a>
        pclk = (uint32_t) LSE_VALUE;
 8005494:	2580      	movs	r5, #128	@ 0x80
 8005496:	022d      	lsls	r5, r5, #8
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005498:	4b42      	ldr	r3, [pc, #264]	@ (80055a4 <HAL_UART_Init+0x280>)
 800549a:	0052      	lsls	r2, r2, #1
 800549c:	5ad6      	ldrh	r6, [r2, r3]
 800549e:	0028      	movs	r0, r5
 80054a0:	0031      	movs	r1, r6
 80054a2:	f7fa fe2f 	bl	8000104 <__udivsi3>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054a6:	6867      	ldr	r7, [r4, #4]
 80054a8:	007b      	lsls	r3, r7, #1
 80054aa:	19db      	adds	r3, r3, r7
 80054ac:	4298      	cmp	r0, r3
 80054ae:	d200      	bcs.n	80054b2 <HAL_UART_Init+0x18e>
 80054b0:	e775      	b.n	800539e <HAL_UART_Init+0x7a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80054b2:	033b      	lsls	r3, r7, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80054b4:	4298      	cmp	r0, r3
 80054b6:	d900      	bls.n	80054ba <HAL_UART_Init+0x196>
 80054b8:	e771      	b.n	800539e <HAL_UART_Init+0x7a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ba:	0032      	movs	r2, r6
 80054bc:	2300      	movs	r3, #0
 80054be:	0028      	movs	r0, r5
 80054c0:	2100      	movs	r1, #0
 80054c2:	f7fa feab 	bl	800021c <__aeabi_uldivmod>
 80054c6:	2600      	movs	r6, #0
 80054c8:	0e05      	lsrs	r5, r0, #24
 80054ca:	020b      	lsls	r3, r1, #8
 80054cc:	432b      	orrs	r3, r5
 80054ce:	0202      	lsls	r2, r0, #8
 80054d0:	087d      	lsrs	r5, r7, #1
 80054d2:	1952      	adds	r2, r2, r5
 80054d4:	4173      	adcs	r3, r6
 80054d6:	0010      	movs	r0, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	003a      	movs	r2, r7
 80054dc:	2300      	movs	r3, #0
 80054de:	f7fa fe9d 	bl	800021c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054e2:	4b34      	ldr	r3, [pc, #208]	@ (80055b4 <HAL_UART_Init+0x290>)
 80054e4:	18c2      	adds	r2, r0, r3
 80054e6:	4b34      	ldr	r3, [pc, #208]	@ (80055b8 <HAL_UART_Init+0x294>)
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d900      	bls.n	80054ee <HAL_UART_Init+0x1ca>
 80054ec:	e757      	b.n	800539e <HAL_UART_Init+0x7a>
          huart->Instance->BRR = usartdiv;
 80054ee:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 80054f0:	4a2a      	ldr	r2, [pc, #168]	@ (800559c <HAL_UART_Init+0x278>)
          huart->Instance->BRR = usartdiv;
 80054f2:	60d8      	str	r0, [r3, #12]
  huart->NbRxDataToProcess = 1;
 80054f4:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 80054f6:	6766      	str	r6, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 80054f8:	67a6      	str	r6, [r4, #120]	@ 0x78
  return ret;
 80054fa:	e785      	b.n	8005408 <HAL_UART_Init+0xe4>
  huart->NbRxDataToProcess = 1;
 80054fc:	4b27      	ldr	r3, [pc, #156]	@ (800559c <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 80054fe:	6760      	str	r0, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005500:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005502:	67a0      	str	r0, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005504:	6823      	ldr	r3, [r4, #0]
 8005506:	e77f      	b.n	8005408 <HAL_UART_Init+0xe4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005508:	2380      	movs	r3, #128	@ 0x80
 800550a:	021b      	lsls	r3, r3, #8
 800550c:	4298      	cmp	r0, r3
 800550e:	d008      	beq.n	8005522 <HAL_UART_Init+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8005510:	f7fd fed2 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
        break;
 8005514:	e75d      	b.n	80053d2 <HAL_UART_Init+0xae>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005516:	2380      	movs	r3, #128	@ 0x80
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	4298      	cmp	r0, r3
 800551c:	d006      	beq.n	800552c <HAL_UART_Init+0x208>
        pclk = (uint32_t) LSE_VALUE;
 800551e:	0018      	movs	r0, r3
 8005520:	e75b      	b.n	80053da <HAL_UART_Init+0xb6>
        pclk = HAL_RCC_GetSysClockFreq();
 8005522:	f7fd fec9 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005526:	2800      	cmp	r0, #0
 8005528:	d0e8      	beq.n	80054fc <HAL_UART_Init+0x1d8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800552a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800552c:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <HAL_UART_Init+0x280>)
 800552e:	0052      	lsls	r2, r2, #1
 8005530:	5ad1      	ldrh	r1, [r2, r3]
 8005532:	f7fa fde7 	bl	8000104 <__udivsi3>
 8005536:	6865      	ldr	r5, [r4, #4]
 8005538:	0040      	lsls	r0, r0, #1
 800553a:	086b      	lsrs	r3, r5, #1
 800553c:	18c0      	adds	r0, r0, r3
 800553e:	0029      	movs	r1, r5
 8005540:	f7fa fde0 	bl	8000104 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005544:	0002      	movs	r2, r0
 8005546:	4b18      	ldr	r3, [pc, #96]	@ (80055a8 <HAL_UART_Init+0x284>)
 8005548:	3a10      	subs	r2, #16
 800554a:	429a      	cmp	r2, r3
 800554c:	d900      	bls.n	8005550 <HAL_UART_Init+0x22c>
 800554e:	e726      	b.n	800539e <HAL_UART_Init+0x7a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005550:	4a1a      	ldr	r2, [pc, #104]	@ (80055bc <HAL_UART_Init+0x298>)
        huart->Instance->BRR = brrtemp;
 8005552:	6823      	ldr	r3, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005554:	4002      	ands	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005556:	0700      	lsls	r0, r0, #28
 8005558:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 800555a:	4302      	orrs	r2, r0
 800555c:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 800555e:	e74e      	b.n	80053fe <HAL_UART_Init+0xda>
 8005560:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <HAL_UART_Init+0x278>)
  huart->RxISR = NULL;
 8005562:	6765      	str	r5, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8005564:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8005566:	67a5      	str	r5, [r4, #120]	@ 0x78
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	e74d      	b.n	8005408 <HAL_UART_Init+0xe4>
        pclk = (uint32_t) HSI_VALUE;
 800556c:	4810      	ldr	r0, [pc, #64]	@ (80055b0 <HAL_UART_Init+0x28c>)
 800556e:	e7dd      	b.n	800552c <HAL_UART_Init+0x208>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005570:	f7fd ffb8 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
 8005574:	0005      	movs	r5, r0
        break;
 8005576:	e786      	b.n	8005486 <HAL_UART_Init+0x162>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005578:	f7fd ffb4 	bl	80034e4 <HAL_RCC_GetPCLK1Freq>
        break;
 800557c:	e7d3      	b.n	8005526 <HAL_UART_Init+0x202>
        pclk = (uint32_t) HSI_VALUE;
 800557e:	4d0c      	ldr	r5, [pc, #48]	@ (80055b0 <HAL_UART_Init+0x28c>)
 8005580:	e78a      	b.n	8005498 <HAL_UART_Init+0x174>
 8005582:	46c0      	nop			@ (mov r8, r8)
 8005584:	cfff69f3 	.word	0xcfff69f3
 8005588:	ffffcfff 	.word	0xffffcfff
 800558c:	40008000 	.word	0x40008000
 8005590:	11fff4ff 	.word	0x11fff4ff
 8005594:	40013800 	.word	0x40013800
 8005598:	40004400 	.word	0x40004400
 800559c:	00010001 	.word	0x00010001
 80055a0:	40021000 	.word	0x40021000
 80055a4:	0800611c 	.word	0x0800611c
 80055a8:	0000ffef 	.word	0x0000ffef
 80055ac:	ffffb7ff 	.word	0xffffb7ff
 80055b0:	00f42400 	.word	0x00f42400
 80055b4:	fffffd00 	.word	0xfffffd00
 80055b8:	000ffcff 	.word	0x000ffcff
 80055bc:	0000fff0 	.word	0x0000fff0

080055c0 <memset>:
 80055c0:	0003      	movs	r3, r0
 80055c2:	1882      	adds	r2, r0, r2
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	7019      	strb	r1, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	2600      	movs	r6, #0
 80055d4:	4c0c      	ldr	r4, [pc, #48]	@ (8005608 <__libc_init_array+0x38>)
 80055d6:	4d0d      	ldr	r5, [pc, #52]	@ (800560c <__libc_init_array+0x3c>)
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	2600      	movs	r6, #0
 80055e2:	f000 f819 	bl	8005618 <_init>
 80055e6:	4c0a      	ldr	r4, [pc, #40]	@ (8005610 <__libc_init_array+0x40>)
 80055e8:	4d0a      	ldr	r5, [pc, #40]	@ (8005614 <__libc_init_array+0x44>)
 80055ea:	1b64      	subs	r4, r4, r5
 80055ec:	10a4      	asrs	r4, r4, #2
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	00b3      	lsls	r3, r6, #2
 80055f6:	58eb      	ldr	r3, [r5, r3]
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	00b3      	lsls	r3, r6, #2
 8005600:	58eb      	ldr	r3, [r5, r3]
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	0800613c 	.word	0x0800613c
 800560c:	0800613c 	.word	0x0800613c
 8005610:	08006140 	.word	0x08006140
 8005614:	0800613c 	.word	0x0800613c

08005618 <_init>:
 8005618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561a:	46c0      	nop			@ (mov r8, r8)
 800561c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561e:	bc08      	pop	{r3}
 8005620:	469e      	mov	lr, r3
 8005622:	4770      	bx	lr

08005624 <_fini>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr
