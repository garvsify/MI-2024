
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046d0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  0800478c  0800478c  0000578c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ac  080048ac  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080048ac  080048ac  000058ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048b4  080048b4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048b4  080048b4  000058b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048b8  080048b8  000058b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000000c  080048c8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080048c8  000061cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113cc  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002379  00000000  00000000  00017400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00019780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  0001a760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017336  00000000  00000000  0001b3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fb5  00000000  00000000  00032712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099628  00000000  00000000  000456c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000decef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039dc  00000000  00000000  000ded34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e2710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004774 	.word	0x08004774

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004774 	.word	0x08004774

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f004 f95f 	bl	800471c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f004 f958 	bl	800471c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f001 fdb9 	bl	8001fe8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fddb 	bl	8002080 <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 faa9 	bl	8000a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f002 f8e0 	bl	80026b4 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fa94 	bl	8000a24 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f004 f902 	bl	800471c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b41      	ldr	r3, [pc, #260]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000544:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054a:	4b3e      	ldr	r3, [pc, #248]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054c:	2200      	movs	r2, #0
 800054e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b3b      	ldr	r3, [pc, #236]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055e:	4b39      	ldr	r3, [pc, #228]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000564:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000566:	2200      	movs	r2, #0
 8000568:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056a:	4b36      	ldr	r3, [pc, #216]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056c:	222c      	movs	r2, #44	@ 0x2c
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000572:	4b34      	ldr	r3, [pc, #208]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000578:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800057e:	4b31      	ldr	r3, [pc, #196]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000580:	2200      	movs	r2, #0
 8000582:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000584:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000586:	223c      	movs	r2, #60	@ 0x3c
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058c:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 800058e:	2200      	movs	r2, #0
 8000590:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000592:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fdbd 	bl	8001114 <HAL_ADC_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800059e:	f000 fa41 	bl	8000a24 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	4b23      	ldr	r3, [pc, #140]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 ff52 	bl	8001464 <HAL_ADC_ConfigChannel>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005c4:	f000 fa2e 	bl	8000a24 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_1;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4a20      	ldr	r2, [pc, #128]	@ (800064c <MX_ADC1_Init+0x148>)
 80005cc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 ff3f 	bl	8001464 <HAL_ADC_ConfigChannel>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 80005ea:	f000 fa1b 	bl	8000a24 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_4;
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000600:	1d3a      	adds	r2, r7, #4
 8000602:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f000 ff2c 	bl	8001464 <HAL_ADC_ConfigChannel>
 800060c:	1e03      	subs	r3, r0, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8000610:	f000 fa08 	bl	8000a24 <Error_Handler>
  }

  sConfig.Channel = ADC_CHANNEL_5;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4a0f      	ldr	r2, [pc, #60]	@ (8000654 <MX_ADC1_Init+0x150>)
 8000618:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	1d3a      	adds	r2, r7, #4
 8000628:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f000 ff19 	bl	8001464 <HAL_ADC_ConfigChannel>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000636:	f000 f9f5 	bl	8000a24 <Error_Handler>
  }

}
 800063a:	46c0      	nop			@ (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b004      	add	sp, #16
 8000640:	bd80      	pop	{r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800065e:	2360      	movs	r3, #96	@ 0x60
 8000660:	18fb      	adds	r3, r7, r3
 8000662:	0018      	movs	r0, r3
 8000664:	2310      	movs	r3, #16
 8000666:	001a      	movs	r2, r3
 8000668:	2100      	movs	r1, #0
 800066a:	f004 f857 	bl	800471c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800066e:	2354      	movs	r3, #84	@ 0x54
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	0018      	movs	r0, r3
 8000674:	230c      	movs	r3, #12
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f004 f84f 	bl	800471c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800067e:	2338      	movs	r3, #56	@ 0x38
 8000680:	18fb      	adds	r3, r7, r3
 8000682:	0018      	movs	r0, r3
 8000684:	231c      	movs	r3, #28
 8000686:	001a      	movs	r2, r3
 8000688:	2100      	movs	r1, #0
 800068a:	f004 f847 	bl	800471c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	0018      	movs	r0, r3
 8000692:	2334      	movs	r3, #52	@ 0x34
 8000694:	001a      	movs	r2, r3
 8000696:	2100      	movs	r1, #0
 8000698:	f004 f840 	bl	800471c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800069c:	4b60      	ldr	r3, [pc, #384]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 800069e:	4a61      	ldr	r2, [pc, #388]	@ (8000824 <MX_TIM1_Init+0x1cc>)
 80006a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80006a2:	4b5f      	ldr	r3, [pc, #380]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a8:	4b5d      	ldr	r3, [pc, #372]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006ae:	4b5c      	ldr	r3, [pc, #368]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006b0:	4a5d      	ldr	r2, [pc, #372]	@ (8000828 <MX_TIM1_Init+0x1d0>)
 80006b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006b4:	4b5a      	ldr	r3, [pc, #360]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006b6:	2280      	movs	r2, #128	@ 0x80
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006bc:	4b58      	ldr	r3, [pc, #352]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c2:	4b57      	ldr	r3, [pc, #348]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006c4:	2280      	movs	r2, #128	@ 0x80
 80006c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c8:	4b55      	ldr	r3, [pc, #340]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f002 fb16 	bl	8002cfc <HAL_TIM_Base_Init>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80006d4:	f000 f9a6 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d8:	2160      	movs	r1, #96	@ 0x60
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	0152      	lsls	r2, r2, #5
 80006e0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006e2:	187a      	adds	r2, r7, r1
 80006e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f002 fd7f 	bl	80031ec <HAL_TIM_ConfigClockSource>
 80006ee:	1e03      	subs	r3, r0, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80006f2:	f000 f997 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006f6:	4b4a      	ldr	r3, [pc, #296]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80006f8:	0018      	movs	r0, r3
 80006fa:	f002 fbb7 	bl	8002e6c <HAL_TIM_PWM_Init>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8000702:	f000 f98f 	bl	8000a24 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000706:	4b46      	ldr	r3, [pc, #280]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fb4f 	bl	8002dac <HAL_TIM_OC_Init>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000712:	f000 f987 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000716:	2154      	movs	r1, #84	@ 0x54
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800072a:	187a      	adds	r2, r7, r1
 800072c:	4b3c      	ldr	r3, [pc, #240]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 800072e:	0011      	movs	r1, r2
 8000730:	0018      	movs	r0, r3
 8000732:	f003 f9ed 	bl	8003b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0xe6>
  {
    Error_Handler();
 800073a:	f000 f973 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800073e:	2138      	movs	r1, #56	@ 0x38
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2260      	movs	r2, #96	@ 0x60
 8000744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000764:	1879      	adds	r1, r7, r1
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 8000768:	220c      	movs	r2, #12
 800076a:	0018      	movs	r0, r3
 800076c:	f002 fc3e 	bl	8002fec <HAL_TIM_PWM_ConfigChannel>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8000774:	f000 f956 	bl	8000a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8000778:	2138      	movs	r1, #56	@ 0x38
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2230      	movs	r2, #48	@ 0x30
 800077e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 65535;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	4a29      	ldr	r2, [pc, #164]	@ (8000828 <MX_TIM1_Init+0x1d0>)
 8000784:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_5) != HAL_OK)
 8000786:	1879      	adds	r1, r7, r1
 8000788:	4b25      	ldr	r3, [pc, #148]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 800078a:	2210      	movs	r2, #16
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fbcd 	bl	8002f2c <HAL_TIM_OC_ConfigChannel>
 8000792:	1e03      	subs	r3, r0, #0
 8000794:	d001      	beq.n	800079a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000796:	f000 f945 	bl	8000a24 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_5);
 800079a:	4b21      	ldr	r3, [pc, #132]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2108      	movs	r1, #8
 80007a6:	430a      	orrs	r2, r1
 80007a8:	655a      	str	r2, [r3, #84]	@ 0x54
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2280      	movs	r2, #128	@ 0x80
 80007cc:	0192      	lsls	r2, r2, #6
 80007ce:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2200      	movs	r2, #0
 80007da:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2280      	movs	r2, #128	@ 0x80
 80007e6:	0492      	lsls	r2, r2, #18
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2200      	movs	r2, #0
 80007fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 8000800:	0011      	movs	r1, r2
 8000802:	0018      	movs	r0, r3
 8000804:	f003 f9ec 	bl	8003be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x1b8>
  {
    Error_Handler();
 800080c:	f000 f90a 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000810:	4b03      	ldr	r3, [pc, #12]	@ (8000820 <MX_TIM1_Init+0x1c8>)
 8000812:	0018      	movs	r0, r3
 8000814:	f000 f9f8 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 8000818:	46c0      	nop			@ (mov r8, r8)
 800081a:	46bd      	mov	sp, r7
 800081c:	b01c      	add	sp, #112	@ 0x70
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000e8 	.word	0x200000e8
 8000824:	40012c00 	.word	0x40012c00
 8000828:	0000ffff 	.word	0x0000ffff

0800082c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000830:	4b16      	ldr	r3, [pc, #88]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000832:	4a17      	ldr	r2, [pc, #92]	@ (8000890 <MX_USART2_UART_Init+0x64>)
 8000834:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000838:	22e1      	movs	r2, #225	@ 0xe1
 800083a:	0252      	lsls	r2, r2, #9
 800083c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b13      	ldr	r3, [pc, #76]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b0a      	ldr	r3, [pc, #40]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	4b07      	ldr	r3, [pc, #28]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x60>)
 8000876:	0018      	movs	r0, r3
 8000878:	f003 fa4e 	bl	8003d18 <HAL_UART_Init>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f8d0 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000884:	46c0      	nop			@ (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000134 	.word	0x20000134
 8000890:	40004400 	.word	0x40004400

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_DMA_Init+0x38>)
 800089c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a0:	2101      	movs	r1, #1
 80008a2:	430a      	orrs	r2, r1
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_DMA_Init+0x38>)
 80008a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008aa:	2201      	movs	r2, #1
 80008ac:	4013      	ands	r3, r2
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2100      	movs	r1, #0
 80008b6:	2009      	movs	r0, #9
 80008b8:	f001 f858 	bl	800196c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008bc:	2009      	movs	r0, #9
 80008be:	f001 f86a 	bl	8001996 <HAL_NVIC_EnableIRQ>

}
 80008c2:	46c0      	nop			@ (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	40021000 	.word	0x40021000

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b089      	sub	sp, #36	@ 0x24
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	240c      	movs	r4, #12
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	0018      	movs	r0, r3
 80008dc:	2314      	movs	r3, #20
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f003 ff1b 	bl	800471c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a18 <MX_GPIO_Init+0x148>)
 80008e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008ea:	4b4b      	ldr	r3, [pc, #300]	@ (8000a18 <MX_GPIO_Init+0x148>)
 80008ec:	2104      	movs	r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80008f2:	4b49      	ldr	r3, [pc, #292]	@ (8000a18 <MX_GPIO_Init+0x148>)
 80008f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008f6:	2204      	movs	r2, #4
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fe:	4b46      	ldr	r3, [pc, #280]	@ (8000a18 <MX_GPIO_Init+0x148>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000902:	4b45      	ldr	r3, [pc, #276]	@ (8000a18 <MX_GPIO_Init+0x148>)
 8000904:	2120      	movs	r1, #32
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34
 800090a:	4b43      	ldr	r3, [pc, #268]	@ (8000a18 <MX_GPIO_Init+0x148>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800090e:	2220      	movs	r2, #32
 8000910:	4013      	ands	r3, r2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	4b40      	ldr	r3, [pc, #256]	@ (8000a18 <MX_GPIO_Init+0x148>)
 8000918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800091a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a18 <MX_GPIO_Init+0x148>)
 800091c:	2101      	movs	r1, #1
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	@ 0x34
 8000922:	4b3d      	ldr	r3, [pc, #244]	@ (8000a18 <MX_GPIO_Init+0x148>)
 8000924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000926:	2201      	movs	r2, #1
 8000928:	4013      	ands	r3, r2
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  //HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2204      	movs	r2, #4
 8000932:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2288      	movs	r2, #136	@ 0x88
 8000938:	0352      	lsls	r2, r2, #13
 800093a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	193b      	adds	r3, r7, r4
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000942:	193b      	adds	r3, r7, r4
 8000944:	4a35      	ldr	r2, [pc, #212]	@ (8000a1c <MX_GPIO_Init+0x14c>)
 8000946:	0019      	movs	r1, r3
 8000948:	0010      	movs	r0, r2
 800094a:	f001 f9cd 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2240      	movs	r2, #64	@ 0x40
 8000952:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2201      	movs	r2, #1
 8000958:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  //GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000960:	193b      	adds	r3, r7, r4
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <MX_GPIO_Init+0x150>)
 8000964:	0019      	movs	r1, r3
 8000966:	0010      	movs	r0, r2
 8000968:	f001 f9be 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC Ch0 Pin */
  GPIO_InitStruct.Pin = ADC_CH_0_Pin;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2203      	movs	r2, #3
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH_0_GPIO_Port, &GPIO_InitStruct);
 800097e:	193a      	adds	r2, r7, r4
 8000980:	23a0      	movs	r3, #160	@ 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	0011      	movs	r1, r2
 8000986:	0018      	movs	r0, r3
 8000988:	f001 f9ae 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC Ch1 Pin */
  GPIO_InitStruct.Pin = ADC_CH_1_Pin;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2202      	movs	r2, #2
 8000990:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000992:	193b      	adds	r3, r7, r4
 8000994:	2203      	movs	r2, #3
 8000996:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	193b      	adds	r3, r7, r4
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH_1_GPIO_Port, &GPIO_InitStruct);
 800099e:	193a      	adds	r2, r7, r4
 80009a0:	23a0      	movs	r3, #160	@ 0xa0
 80009a2:	05db      	lsls	r3, r3, #23
 80009a4:	0011      	movs	r1, r2
 80009a6:	0018      	movs	r0, r3
 80009a8:	f001 f99e 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC Ch4 Pin */
  GPIO_InitStruct.Pin = ADC_CH_4_Pin;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2210      	movs	r2, #16
 80009b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	2203      	movs	r2, #3
 80009b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	193b      	adds	r3, r7, r4
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH_4_GPIO_Port, &GPIO_InitStruct);
 80009be:	193a      	adds	r2, r7, r4
 80009c0:	23a0      	movs	r3, #160	@ 0xa0
 80009c2:	05db      	lsls	r3, r3, #23
 80009c4:	0011      	movs	r1, r2
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f98e 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC Ch5 Pin */
  GPIO_InitStruct.Pin = ADC_CH_5_Pin;
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	2220      	movs	r2, #32
 80009d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	193b      	adds	r3, r7, r4
 80009d4:	2203      	movs	r2, #3
 80009d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH_5_GPIO_Port, &GPIO_InitStruct);
 80009de:	193a      	adds	r2, r7, r4
 80009e0:	23a0      	movs	r3, #160	@ 0xa0
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	0011      	movs	r1, r2
 80009e6:	0018      	movs	r0, r3
 80009e8:	f001 f97e 	bl	8001ce8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TIM1 Ch4 Pin (PWM Output) */
  GPIO_InitStruct.Pin = TIM1_CH_4_Pin;
 80009ec:	0021      	movs	r1, r4
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	2280      	movs	r2, #128	@ 0x80
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2201      	movs	r2, #1
 80009fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TIM1_CH_4_GPIO_Port, &GPIO_InitStruct);
 8000a02:	187a      	adds	r2, r7, r1
 8000a04:	23a0      	movs	r3, #160	@ 0xa0
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	0011      	movs	r1, r2
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 f96c 	bl	8001ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	b009      	add	sp, #36	@ 0x24
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	50001400 	.word	0x50001400
 8000a20:	50000800 	.word	0x50000800

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	46c0      	nop			@ (mov r8, r8)
 8000a2e:	e7fd      	b.n	8000a2c <Error_Handler+0x8>

08000a30 <main>:

#include "main.h"


int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a34:	f000 f9c6 	bl	8000dc4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000a38:	f7ff fd06 	bl	8000448 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3c:	f7ff ff48 	bl	80008d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a40:	f7ff ff28 	bl	8000894 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a44:	f7ff fef2 	bl	800082c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a48:	f7ff fd5c 	bl	8000504 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a4c:	f7ff fe04 	bl	8000658 <MX_TIM1_Init>

  while (1)
  {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <main+0x38>)
 8000a52:	2140      	movs	r1, #64	@ 0x40
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 faab 	bl	8001fb0 <HAL_GPIO_TogglePin>

	  HAL_Delay(5000);
 8000a5a:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <main+0x3c>)
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fa37 	bl	8000ed0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	e7f4      	b.n	8000a50 <main+0x20>
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	50000800 	.word	0x50000800
 8000a6c:	00001388 	.word	0x00001388

08000a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	2201      	movs	r2, #1
 8000a88:	4013      	ands	r3, r2
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	0549      	lsls	r1, r1, #21
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a9c:	4b05      	ldr	r3, [pc, #20]	@ (8000ab4 <HAL_MspInit+0x44>)
 8000a9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	055b      	lsls	r3, r3, #21
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	46c0      	nop			@ (mov r8, r8)
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b08b      	sub	sp, #44	@ 0x2c
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	2414      	movs	r4, #20
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f003 fe26 	bl	800471c <memset>
  if(hadc->Instance==ADC1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a2d      	ldr	r2, [pc, #180]	@ (8000b8c <HAL_ADC_MspInit+0xd4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d154      	bne.n	8000b84 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000ada:	4b2d      	ldr	r3, [pc, #180]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000adc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ade:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000ae0:	2180      	movs	r1, #128	@ 0x80
 8000ae2:	0349      	lsls	r1, r1, #13
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	035b      	lsls	r3, r3, #13
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
 8000af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000afa:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000afc:	2101      	movs	r1, #1
 8000afe:	430a      	orrs	r2, r1
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <HAL_ADC_MspInit+0xd8>)
 8000b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b06:	2201      	movs	r2, #1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2233      	movs	r2, #51	@ 0x33
 8000b12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2203      	movs	r2, #3
 8000b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	193a      	adds	r2, r7, r4
 8000b22:	23a0      	movs	r3, #160	@ 0xa0
 8000b24:	05db      	lsls	r3, r3, #23
 8000b26:	0011      	movs	r1, r2
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f001 f8dd 	bl	8001ce8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b30:	4a19      	ldr	r2, [pc, #100]	@ (8000b98 <HAL_ADC_MspInit+0xe0>)
 8000b32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000b34:	4b17      	ldr	r3, [pc, #92]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b36:	2205      	movs	r2, #5
 8000b38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b3a:	4b16      	ldr	r3, [pc, #88]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b40:	4b14      	ldr	r3, [pc, #80]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	0052      	lsls	r2, r2, #1
 8000b52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b56:	2280      	movs	r2, #128	@ 0x80
 8000b58:	00d2      	lsls	r2, r2, #3
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 ff30 	bl	80019d0 <HAL_DMA_Init>
 8000b70:	1e03      	subs	r3, r0, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000b74:	f7ff ff56 	bl	8000a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a06      	ldr	r2, [pc, #24]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b7c:	651a      	str	r2, [r3, #80]	@ 0x50
 8000b7e:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_ADC_MspInit+0xdc>)
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b00b      	add	sp, #44	@ 0x2c
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	40012400 	.word	0x40012400
 8000b90:	40021000 	.word	0x40021000
 8000b94:	2000008c 	.word	0x2000008c
 8000b98:	40020008 	.word	0x40020008

08000b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b08f      	sub	sp, #60	@ 0x3c
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba4:	2410      	movs	r4, #16
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2328      	movs	r3, #40	@ 0x28
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f003 fdb4 	bl	800471c <memset>
  if(htim_base->Instance==TIM1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a11      	ldr	r2, [pc, #68]	@ (8000c00 <HAL_TIM_Base_MspInit+0x64>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d11c      	bne.n	8000bf8 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000bbe:	193b      	adds	r3, r7, r4
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	0392      	lsls	r2, r2, #14
 8000bc4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000bc6:	193b      	adds	r3, r7, r4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f001 ff1a 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000bd8:	f7ff ff24 	bl	8000a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_TIM_Base_MspInit+0x68>)
 8000bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be0:	4b08      	ldr	r3, [pc, #32]	@ (8000c04 <HAL_TIM_Base_MspInit+0x68>)
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	0109      	lsls	r1, r1, #4
 8000be6:	430a      	orrs	r2, r1
 8000be8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_TIM_Base_MspInit+0x68>)
 8000bec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bee:	2380      	movs	r3, #128	@ 0x80
 8000bf0:	011b      	lsls	r3, r3, #4
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000bf8:	46c0      	nop			@ (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b00f      	add	sp, #60	@ 0x3c
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	40012c00 	.word	0x40012c00
 8000c04:	40021000 	.word	0x40021000

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b089      	sub	sp, #36	@ 0x24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	240c      	movs	r4, #12
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	0018      	movs	r0, r3
 8000c16:	2314      	movs	r3, #20
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f003 fd7e 	bl	800471c <memset>
  if(htim->Instance==TIM1)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a15      	ldr	r2, [pc, #84]	@ (8000c7c <HAL_TIM_MspPostInit+0x74>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d123      	bne.n	8000c72 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b15      	ldr	r3, [pc, #84]	@ (8000c80 <HAL_TIM_MspPostInit+0x78>)
 8000c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <HAL_TIM_MspPostInit+0x78>)
 8000c30:	2101      	movs	r1, #1
 8000c32:	430a      	orrs	r2, r1
 8000c34:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c36:	4b12      	ldr	r3, [pc, #72]	@ (8000c80 <HAL_TIM_MspPostInit+0x78>)
 8000c38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2202      	movs	r2, #2
 8000c50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	187b      	adds	r3, r7, r1
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c5e:	187b      	adds	r3, r7, r1
 8000c60:	2202      	movs	r2, #2
 8000c62:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	187a      	adds	r2, r7, r1
 8000c66:	23a0      	movs	r3, #160	@ 0xa0
 8000c68:	05db      	lsls	r3, r3, #23
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f001 f83b 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b009      	add	sp, #36	@ 0x24
 8000c78:	bd90      	pop	{r4, r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b08b      	sub	sp, #44	@ 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2414      	movs	r4, #20
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2314      	movs	r3, #20
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f003 fd40 	bl	800471c <memset>
  if(huart->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d10 <HAL_UART_MspInit+0x8c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d130      	bne.n	8000d08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000caa:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	0289      	lsls	r1, r1, #10
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cb8:	2380      	movs	r3, #128	@ 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cce:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_UART_MspInit+0x90>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8000cda:	0021      	movs	r1, r4
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	23a0      	movs	r3, #160	@ 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 fff0 	bl	8001ce8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00b      	add	sp, #44	@ 0x2c
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40004400 	.word	0x40004400
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f8aa 	bl	8000e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d50:	4b03      	ldr	r3, [pc, #12]	@ (8000d60 <DMA1_Channel1_IRQHandler+0x14>)
 8000d52:	0018      	movs	r0, r3
 8000d54:	f000 fec6 	bl	8001ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	2000008c 	.word	0x2000008c

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d70:	480d      	ldr	r0, [pc, #52]	@ (8000da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d74:	f7ff fff6 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	@ (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	@ (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	@ (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9e:	f003 fcc5 	bl	800472c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000da2:	f7ff fe45 	bl	8000a30 <main>

08000da6 <LoopForever>:

LoopForever:
  b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   r0, =_estack
 8000da8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000db4:	080048bc 	.word	0x080048bc
  ldr r2, =_sbss
 8000db8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dbc:	200001cc 	.word	0x200001cc

08000dc0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <HAL_Init+0x3c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <HAL_Init+0x3c>)
 8000dd6:	2180      	movs	r1, #128	@ 0x80
 8000dd8:	0049      	lsls	r1, r1, #1
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f810 	bl	8000e04 <HAL_InitTick>
 8000de4:	1e03      	subs	r3, r0, #0
 8000de6:	d003      	beq.n	8000df0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e001      	b.n	8000df4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000df0:	f7ff fe3e 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40022000 	.word	0x40022000

08000e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <HAL_InitTick+0x88>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02b      	beq.n	8000e74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_InitTick+0x8c>)
 8000e1e:	681c      	ldr	r4, [r3, #0]
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_InitTick+0x88>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	0019      	movs	r1, r3
 8000e26:	23fa      	movs	r3, #250	@ 0xfa
 8000e28:	0098      	lsls	r0, r3, #2
 8000e2a:	f7ff f96b 	bl	8000104 <__udivsi3>
 8000e2e:	0003      	movs	r3, r0
 8000e30:	0019      	movs	r1, r3
 8000e32:	0020      	movs	r0, r4
 8000e34:	f7ff f966 	bl	8000104 <__udivsi3>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f000 fdbb 	bl	80019b6 <HAL_SYSTICK_Config>
 8000e40:	1e03      	subs	r3, r0, #0
 8000e42:	d112      	bne.n	8000e6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d80a      	bhi.n	8000e60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	425b      	negs	r3, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fd8a 	bl	800196c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_InitTick+0x90>)
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e00d      	b.n	8000e7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e008      	b.n	8000e7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	2201      	movs	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	e003      	b.n	8000e7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	2201      	movs	r2, #1
 8000e7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b005      	add	sp, #20
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20000004 	.word	0x20000004

08000e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	@ (8000eb4 <HAL_IncTick+0x1c>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	18d2      	adds	r2, r2, r3
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_IncTick+0x20>)
 8000eaa:	601a      	str	r2, [r3, #0]
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200001c8 	.word	0x200001c8

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <HAL_GetTick+0x10>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			@ (mov r8, r8)
 8000ecc:	200001c8 	.word	0x200001c8

08000ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed8:	f7ff fff0 	bl	8000ebc <HAL_GetTick>
 8000edc:	0003      	movs	r3, r0
 8000ede:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	d005      	beq.n	8000ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eea:	4b0a      	ldr	r3, [pc, #40]	@ (8000f14 <HAL_Delay+0x44>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	001a      	movs	r2, r3
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	189b      	adds	r3, r3, r2
 8000ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ef6:	46c0      	nop			@ (mov r8, r8)
 8000ef8:	f7ff ffe0 	bl	8000ebc <HAL_GetTick>
 8000efc:	0002      	movs	r2, r0
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8f7      	bhi.n	8000ef8 <HAL_Delay+0x28>
  {
  }
}
 8000f08:	46c0      	nop			@ (mov r8, r8)
 8000f0a:	46c0      	nop			@ (mov r8, r8)
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b004      	add	sp, #16
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	20000008 	.word	0x20000008

08000f18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a05      	ldr	r2, [pc, #20]	@ (8000f3c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000f28:	401a      	ands	r2, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	431a      	orrs	r2, r3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	601a      	str	r2, [r3, #0]
}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b002      	add	sp, #8
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	fe3fffff 	.word	0xfe3fffff

08000f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	23e0      	movs	r3, #224	@ 0xe0
 8000f4e:	045b      	lsls	r3, r3, #17
 8000f50:	4013      	ands	r3, r2
}
 8000f52:	0018      	movs	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	b002      	add	sp, #8
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	2104      	movs	r1, #4
 8000f6e:	400a      	ands	r2, r1
 8000f70:	2107      	movs	r1, #7
 8000f72:	4091      	lsls	r1, r2
 8000f74:	000a      	movs	r2, r1
 8000f76:	43d2      	mvns	r2, r2
 8000f78:	401a      	ands	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	2104      	movs	r1, #4
 8000f7e:	400b      	ands	r3, r1
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4099      	lsls	r1, r3
 8000f84:	000b      	movs	r3, r1
 8000f86:	431a      	orrs	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000f8c:	46c0      	nop			@ (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	b004      	add	sp, #16
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	2104      	movs	r1, #4
 8000fa6:	400a      	ands	r2, r1
 8000fa8:	2107      	movs	r1, #7
 8000faa:	4091      	lsls	r1, r2
 8000fac:	000a      	movs	r2, r1
 8000fae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	0013      	movs	r3, r2
}
 8000fba:	0018      	movs	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	211f      	movs	r1, #31
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	210f      	movs	r1, #15
 8000fda:	4091      	lsls	r1, r2
 8000fdc:	000a      	movs	r2, r1
 8000fde:	43d2      	mvns	r2, r2
 8000fe0:	401a      	ands	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0e9b      	lsrs	r3, r3, #26
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	4019      	ands	r1, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	201f      	movs	r0, #31
 8000fee:	4003      	ands	r3, r0
 8000ff0:	4099      	lsls	r1, r3
 8000ff2:	000b      	movs	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ffa:	46c0      	nop			@ (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	035b      	lsls	r3, r3, #13
 8001014:	0b5b      	lsrs	r3, r3, #13
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	46bd      	mov	sp, r7
 8001020:	b002      	add	sp, #8
 8001022:	bd80      	pop	{r7, pc}

08001024 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	0352      	lsls	r2, r2, #13
 8001036:	0b52      	lsrs	r2, r2, #13
 8001038:	43d2      	mvns	r2, r2
 800103a:	401a      	ands	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	695b      	ldr	r3, [r3, #20]
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	0212      	lsls	r2, r2, #8
 800105c:	43d2      	mvns	r2, r2
 800105e:	401a      	ands	r2, r3
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	400b      	ands	r3, r1
 8001068:	4904      	ldr	r1, [pc, #16]	@ (800107c <LL_ADC_SetChannelSamplingTime+0x34>)
 800106a:	400b      	ands	r3, r1
 800106c:	431a      	orrs	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b004      	add	sp, #16
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	07ffff00 	.word	0x07ffff00

08001080 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <LL_ADC_EnableInternalRegulator+0x24>)
 800108e:	4013      	ands	r3, r2
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	0552      	lsls	r2, r2, #21
 8001094:	431a      	orrs	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	6fffffe8 	.word	0x6fffffe8

080010a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	2380      	movs	r3, #128	@ 0x80
 80010b6:	055b      	lsls	r3, r3, #21
 80010b8:	401a      	ands	r2, r3
 80010ba:	2380      	movs	r3, #128	@ 0x80
 80010bc:	055b      	lsls	r3, r3, #21
 80010be:	429a      	cmp	r2, r3
 80010c0:	d101      	bne.n	80010c6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	0018      	movs	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b002      	add	sp, #8
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2201      	movs	r2, #1
 80010de:	4013      	ands	r3, r2
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d101      	bne.n	80010e8 <LL_ADC_IsEnabled+0x18>
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <LL_ADC_IsEnabled+0x1a>
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2204      	movs	r2, #4
 8001100:	4013      	ands	r3, r2
 8001102:	2b04      	cmp	r3, #4
 8001104:	d101      	bne.n	800110a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800110a:	2300      	movs	r3, #0
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800111c:	231f      	movs	r3, #31
 800111e:	18fb      	adds	r3, r7, r3
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e17f      	b.n	800143a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10a      	bne.n	8001158 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff fcb7 	bl	8000ab8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2254      	movs	r2, #84	@ 0x54
 8001154:	2100      	movs	r1, #0
 8001156:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ffa3 	bl	80010a8 <LL_ADC_IsInternalRegulatorEnabled>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d115      	bne.n	8001192 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff ff88 	bl	8001080 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001170:	4bb4      	ldr	r3, [pc, #720]	@ (8001444 <HAL_ADC_Init+0x330>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	49b4      	ldr	r1, [pc, #720]	@ (8001448 <HAL_ADC_Init+0x334>)
 8001176:	0018      	movs	r0, r3
 8001178:	f7fe ffc4 	bl	8000104 <__udivsi3>
 800117c:	0003      	movs	r3, r0
 800117e:	3301      	adds	r3, #1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001184:	e002      	b.n	800118c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3b01      	subs	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f9      	bne.n	8001186 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	0018      	movs	r0, r3
 8001198:	f7ff ff86 	bl	80010a8 <LL_ADC_IsInternalRegulatorEnabled>
 800119c:	1e03      	subs	r3, r0, #0
 800119e:	d10f      	bne.n	80011c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a4:	2210      	movs	r2, #16
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	2201      	movs	r2, #1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80011b8:	231f      	movs	r3, #31
 80011ba:	18fb      	adds	r3, r7, r3
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff94 	bl	80010f2 <LL_ADC_REG_IsConversionOngoing>
 80011ca:	0003      	movs	r3, r0
 80011cc:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d2:	2210      	movs	r2, #16
 80011d4:	4013      	ands	r3, r2
 80011d6:	d000      	beq.n	80011da <HAL_ADC_Init+0xc6>
 80011d8:	e122      	b.n	8001420 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d000      	beq.n	80011e2 <HAL_ADC_Init+0xce>
 80011e0:	e11e      	b.n	8001420 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	4a99      	ldr	r2, [pc, #612]	@ (800144c <HAL_ADC_Init+0x338>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	2202      	movs	r2, #2
 80011ec:	431a      	orrs	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0018      	movs	r0, r3
 80011f8:	f7ff ff6a 	bl	80010d0 <LL_ADC_IsEnabled>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d000      	beq.n	8001202 <HAL_ADC_Init+0xee>
 8001200:	e0ad      	b.n	800135e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800120c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7e5b      	ldrb	r3, [r3, #25]
 8001212:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001214:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7e9b      	ldrb	r3, [r3, #26]
 800121a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800121c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	d002      	beq.n	800122c <HAL_ADC_Init+0x118>
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	015b      	lsls	r3, r3, #5
 800122a:	e000      	b.n	800122e <HAL_ADC_Init+0x11a>
 800122c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800122e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001234:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b00      	cmp	r3, #0
 800123c:	da04      	bge.n	8001248 <HAL_ADC_Init+0x134>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	085b      	lsrs	r3, r3, #1
 8001246:	e001      	b.n	800124c <HAL_ADC_Init+0x138>
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 800124c:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	212c      	movs	r1, #44	@ 0x2c
 8001252:	5c5b      	ldrb	r3, [r3, r1]
 8001254:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001256:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2220      	movs	r2, #32
 8001262:	5c9b      	ldrb	r3, [r3, r2]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d115      	bne.n	8001294 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	7e9b      	ldrb	r3, [r3, #26]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d105      	bne.n	800127c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	0252      	lsls	r2, r2, #9
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e00b      	b.n	8001294 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001280:	2220      	movs	r2, #32
 8001282:	431a      	orrs	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128c:	2201      	movs	r2, #1
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001298:	2b00      	cmp	r3, #0
 800129a:	d00a      	beq.n	80012b2 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012a0:	23e0      	movs	r3, #224	@ 0xe0
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80012aa:	4313      	orrs	r3, r2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a65      	ldr	r2, [pc, #404]	@ (8001450 <HAL_ADC_Init+0x33c>)
 80012ba:	4013      	ands	r3, r2
 80012bc:	0019      	movs	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	0f9b      	lsrs	r3, r3, #30
 80012ce:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012d4:	4313      	orrs	r3, r2
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	4313      	orrs	r3, r2
 80012da:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	223c      	movs	r2, #60	@ 0x3c
 80012e0:	5c9b      	ldrb	r3, [r3, r2]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d111      	bne.n	800130a <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0f9b      	lsrs	r3, r3, #30
 80012ec:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80012f2:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 80012f8:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80012fe:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	4313      	orrs	r3, r2
 8001304:	2201      	movs	r2, #1
 8001306:	4313      	orrs	r3, r2
 8001308:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	691b      	ldr	r3, [r3, #16]
 8001310:	4a50      	ldr	r2, [pc, #320]	@ (8001454 <HAL_ADC_Init+0x340>)
 8001312:	4013      	ands	r3, r2
 8001314:	0019      	movs	r1, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	430a      	orrs	r2, r1
 800131e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	23c0      	movs	r3, #192	@ 0xc0
 8001326:	061b      	lsls	r3, r3, #24
 8001328:	429a      	cmp	r2, r3
 800132a:	d018      	beq.n	800135e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	429a      	cmp	r2, r3
 8001336:	d012      	beq.n	800135e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	061b      	lsls	r3, r3, #24
 8001340:	429a      	cmp	r2, r3
 8001342:	d00c      	beq.n	800135e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001344:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <HAL_ADC_Init+0x344>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a44      	ldr	r2, [pc, #272]	@ (800145c <HAL_ADC_Init+0x348>)
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23f0      	movs	r3, #240	@ 0xf0
 8001354:	039b      	lsls	r3, r3, #14
 8001356:	401a      	ands	r2, r3
 8001358:	4b3f      	ldr	r3, [pc, #252]	@ (8001458 <HAL_ADC_Init+0x344>)
 800135a:	430a      	orrs	r2, r1
 800135c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001366:	001a      	movs	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f7ff fdf6 	bl	8000f5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001376:	493a      	ldr	r1, [pc, #232]	@ (8001460 <HAL_ADC_Init+0x34c>)
 8001378:	001a      	movs	r2, r3
 800137a:	f7ff fdee 	bl	8000f5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2110      	movs	r1, #16
 8001392:	4249      	negs	r1, r1
 8001394:	430a      	orrs	r2, r1
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
 8001398:	e018      	b.n	80013cc <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	039b      	lsls	r3, r3, #14
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d112      	bne.n	80013cc <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69db      	ldr	r3, [r3, #28]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	221c      	movs	r2, #28
 80013b6:	4013      	ands	r3, r2
 80013b8:	2210      	movs	r2, #16
 80013ba:	4252      	negs	r2, r2
 80013bc:	409a      	lsls	r2, r3
 80013be:	0011      	movs	r1, r2
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2100      	movs	r1, #0
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fdde 	bl	8000f94 <LL_ADC_GetSamplingTimeCommonChannels>
 80013d8:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013de:	429a      	cmp	r2, r3
 80013e0:	d10b      	bne.n	80013fa <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013ec:	2203      	movs	r2, #3
 80013ee:	4393      	bics	r3, r2
 80013f0:	2201      	movs	r2, #1
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80013f8:	e01c      	b.n	8001434 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	2212      	movs	r2, #18
 8001400:	4393      	bics	r3, r2
 8001402:	2210      	movs	r2, #16
 8001404:	431a      	orrs	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800140e:	2201      	movs	r2, #1
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001416:	231f      	movs	r3, #31
 8001418:	18fb      	adds	r3, r7, r3
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800141e:	e009      	b.n	8001434 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001424:	2210      	movs	r2, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800142c:	231f      	movs	r3, #31
 800142e:	18fb      	adds	r3, r7, r3
 8001430:	2201      	movs	r2, #1
 8001432:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001434:	231f      	movs	r3, #31
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	781b      	ldrb	r3, [r3, #0]
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b008      	add	sp, #32
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	20000000 	.word	0x20000000
 8001448:	00030d40 	.word	0x00030d40
 800144c:	fffffefd 	.word	0xfffffefd
 8001450:	ffde0201 	.word	0xffde0201
 8001454:	1ffffc02 	.word	0x1ffffc02
 8001458:	40012708 	.word	0x40012708
 800145c:	ffc3ffff 	.word	0xffc3ffff
 8001460:	07ffff04 	.word	0x07ffff04

08001464 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800146e:	2317      	movs	r3, #23
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2254      	movs	r2, #84	@ 0x54
 800147e:	5c9b      	ldrb	r3, [r3, r2]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d101      	bne.n	8001488 <HAL_ADC_ConfigChannel+0x24>
 8001484:	2302      	movs	r3, #2
 8001486:	e1c0      	b.n	800180a <HAL_ADC_ConfigChannel+0x3a6>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2254      	movs	r2, #84	@ 0x54
 800148c:	2101      	movs	r1, #1
 800148e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	0018      	movs	r0, r3
 8001496:	f7ff fe2c 	bl	80010f2 <LL_ADC_REG_IsConversionOngoing>
 800149a:	1e03      	subs	r3, r0, #0
 800149c:	d000      	beq.n	80014a0 <HAL_ADC_ConfigChannel+0x3c>
 800149e:	e1a3      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d100      	bne.n	80014aa <HAL_ADC_ConfigChannel+0x46>
 80014a8:	e143      	b.n	8001732 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d004      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014ba:	4ac1      	ldr	r2, [pc, #772]	@ (80017c0 <HAL_ADC_ConfigChannel+0x35c>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d108      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0019      	movs	r1, r3
 80014ca:	0010      	movs	r0, r2
 80014cc:	f7ff fd99 	bl	8001002 <LL_ADC_REG_SetSequencerChAdd>
 80014d0:	e0c9      	b.n	8001666 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	211f      	movs	r1, #31
 80014dc:	400b      	ands	r3, r1
 80014de:	210f      	movs	r1, #15
 80014e0:	4099      	lsls	r1, r3
 80014e2:	000b      	movs	r3, r1
 80014e4:	43db      	mvns	r3, r3
 80014e6:	4013      	ands	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	035b      	lsls	r3, r3, #13
 80014f0:	0b5b      	lsrs	r3, r3, #13
 80014f2:	d105      	bne.n	8001500 <HAL_ADC_ConfigChannel+0x9c>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	0e9b      	lsrs	r3, r3, #26
 80014fa:	221f      	movs	r2, #31
 80014fc:	4013      	ands	r3, r2
 80014fe:	e098      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	4013      	ands	r3, r2
 8001508:	d000      	beq.n	800150c <HAL_ADC_ConfigChannel+0xa8>
 800150a:	e091      	b.n	8001630 <HAL_ADC_ConfigChannel+0x1cc>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d000      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xb4>
 8001516:	e089      	b.n	800162c <HAL_ADC_ConfigChannel+0x1c8>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d000      	beq.n	8001524 <HAL_ADC_ConfigChannel+0xc0>
 8001522:	e081      	b.n	8001628 <HAL_ADC_ConfigChannel+0x1c4>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2208      	movs	r2, #8
 800152a:	4013      	ands	r3, r2
 800152c:	d000      	beq.n	8001530 <HAL_ADC_ConfigChannel+0xcc>
 800152e:	e079      	b.n	8001624 <HAL_ADC_ConfigChannel+0x1c0>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2210      	movs	r2, #16
 8001536:	4013      	ands	r3, r2
 8001538:	d000      	beq.n	800153c <HAL_ADC_ConfigChannel+0xd8>
 800153a:	e071      	b.n	8001620 <HAL_ADC_ConfigChannel+0x1bc>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2220      	movs	r2, #32
 8001542:	4013      	ands	r3, r2
 8001544:	d000      	beq.n	8001548 <HAL_ADC_ConfigChannel+0xe4>
 8001546:	e069      	b.n	800161c <HAL_ADC_ConfigChannel+0x1b8>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2240      	movs	r2, #64	@ 0x40
 800154e:	4013      	ands	r3, r2
 8001550:	d000      	beq.n	8001554 <HAL_ADC_ConfigChannel+0xf0>
 8001552:	e061      	b.n	8001618 <HAL_ADC_ConfigChannel+0x1b4>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	4013      	ands	r3, r2
 800155c:	d000      	beq.n	8001560 <HAL_ADC_ConfigChannel+0xfc>
 800155e:	e059      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1b0>
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	@ 0x80
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4013      	ands	r3, r2
 800156a:	d151      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1ac>
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	2380      	movs	r3, #128	@ 0x80
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4013      	ands	r3, r2
 8001576:	d149      	bne.n	800160c <HAL_ADC_ConfigChannel+0x1a8>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	2380      	movs	r3, #128	@ 0x80
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4013      	ands	r3, r2
 8001582:	d141      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1a4>
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d139      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1a0>
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	@ 0x80
 8001596:	015b      	lsls	r3, r3, #5
 8001598:	4013      	ands	r3, r2
 800159a:	d131      	bne.n	8001600 <HAL_ADC_ConfigChannel+0x19c>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	2380      	movs	r3, #128	@ 0x80
 80015a2:	019b      	lsls	r3, r3, #6
 80015a4:	4013      	ands	r3, r2
 80015a6:	d129      	bne.n	80015fc <HAL_ADC_ConfigChannel+0x198>
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4013      	ands	r3, r2
 80015b2:	d121      	bne.n	80015f8 <HAL_ADC_ConfigChannel+0x194>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	@ 0x80
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	4013      	ands	r3, r2
 80015be:	d119      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x190>
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	025b      	lsls	r3, r3, #9
 80015c8:	4013      	ands	r3, r2
 80015ca:	d111      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x18c>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	2380      	movs	r3, #128	@ 0x80
 80015d2:	029b      	lsls	r3, r3, #10
 80015d4:	4013      	ands	r3, r2
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x188>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	2380      	movs	r3, #128	@ 0x80
 80015de:	02db      	lsls	r3, r3, #11
 80015e0:	4013      	ands	r3, r2
 80015e2:	d001      	beq.n	80015e8 <HAL_ADC_ConfigChannel+0x184>
 80015e4:	2312      	movs	r3, #18
 80015e6:	e024      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015e8:	2300      	movs	r3, #0
 80015ea:	e022      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015ec:	2311      	movs	r3, #17
 80015ee:	e020      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f0:	2310      	movs	r3, #16
 80015f2:	e01e      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f4:	230f      	movs	r3, #15
 80015f6:	e01c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015f8:	230e      	movs	r3, #14
 80015fa:	e01a      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 80015fc:	230d      	movs	r3, #13
 80015fe:	e018      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001600:	230c      	movs	r3, #12
 8001602:	e016      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001604:	230b      	movs	r3, #11
 8001606:	e014      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001608:	230a      	movs	r3, #10
 800160a:	e012      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800160c:	2309      	movs	r3, #9
 800160e:	e010      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001610:	2308      	movs	r3, #8
 8001612:	e00e      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001614:	2307      	movs	r3, #7
 8001616:	e00c      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001618:	2306      	movs	r3, #6
 800161a:	e00a      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800161c:	2305      	movs	r3, #5
 800161e:	e008      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001620:	2304      	movs	r3, #4
 8001622:	e006      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001624:	2303      	movs	r3, #3
 8001626:	e004      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_ADC_ConfigChannel+0x1ce>
 8001630:	2300      	movs	r3, #0
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6852      	ldr	r2, [r2, #4]
 8001636:	201f      	movs	r0, #31
 8001638:	4002      	ands	r2, r0
 800163a:	4093      	lsls	r3, r2
 800163c:	000a      	movs	r2, r1
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	1c5a      	adds	r2, r3, #1
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	429a      	cmp	r2, r3
 8001652:	d808      	bhi.n	8001666 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6859      	ldr	r1, [r3, #4]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	001a      	movs	r2, r3
 8001662:	f7ff fcae 	bl	8000fc2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6818      	ldr	r0, [r3, #0]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	001a      	movs	r2, r3
 8001674:	f7ff fce8 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db00      	blt.n	8001682 <HAL_ADC_ConfigChannel+0x21e>
 8001680:	e0bc      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001682:	4b50      	ldr	r3, [pc, #320]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001684:	0018      	movs	r0, r3
 8001686:	f7ff fc5b 	bl	8000f40 <LL_ADC_GetCommonPathInternalCh>
 800168a:	0003      	movs	r3, r0
 800168c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a4d      	ldr	r2, [pc, #308]	@ (80017c8 <HAL_ADC_ConfigChannel+0x364>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d122      	bne.n	80016de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	2380      	movs	r3, #128	@ 0x80
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016a0:	d11d      	bne.n	80016de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2280      	movs	r2, #128	@ 0x80
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	4313      	orrs	r3, r2
 80016aa:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f7ff fc32 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <HAL_ADC_ConfigChannel+0x368>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4945      	ldr	r1, [pc, #276]	@ (80017d0 <HAL_ADC_ConfigChannel+0x36c>)
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe fd22 	bl	8000104 <__udivsi3>
 80016c0:	0003      	movs	r3, r0
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	0013      	movs	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	189b      	adds	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016ce:	e002      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f9      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016dc:	e08e      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a3c      	ldr	r2, [pc, #240]	@ (80017d4 <HAL_ADC_ConfigChannel+0x370>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d10e      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	045b      	lsls	r3, r3, #17
 80016ee:	4013      	ands	r3, r2
 80016f0:	d109      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	0452      	lsls	r2, r2, #17
 80016f8:	4313      	orrs	r3, r2
 80016fa:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80016fc:	0019      	movs	r1, r3
 80016fe:	0010      	movs	r0, r2
 8001700:	f7ff fc0a 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
 8001704:	e07a      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a33      	ldr	r2, [pc, #204]	@ (80017d8 <HAL_ADC_ConfigChannel+0x374>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d000      	beq.n	8001712 <HAL_ADC_ConfigChannel+0x2ae>
 8001710:	e074      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	2380      	movs	r3, #128	@ 0x80
 8001716:	03db      	lsls	r3, r3, #15
 8001718:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800171a:	d000      	beq.n	800171e <HAL_ADC_ConfigChannel+0x2ba>
 800171c:	e06e      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	03d2      	lsls	r2, r2, #15
 8001724:	4313      	orrs	r3, r2
 8001726:	4a27      	ldr	r2, [pc, #156]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001728:	0019      	movs	r1, r3
 800172a:	0010      	movs	r0, r2
 800172c:	f7ff fbf4 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
 8001730:	e064      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	429a      	cmp	r2, r3
 800173c:	d004      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001742:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_ADC_ConfigChannel+0x35c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d107      	bne.n	8001758 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	0019      	movs	r1, r3
 8001752:	0010      	movs	r0, r2
 8001754:	f7ff fc66 	bl	8001024 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da4d      	bge.n	80017fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff fbec 	bl	8000f40 <LL_ADC_GetCommonPathInternalCh>
 8001768:	0003      	movs	r3, r0
 800176a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a15      	ldr	r2, [pc, #84]	@ (80017c8 <HAL_ADC_ConfigChannel+0x364>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d108      	bne.n	8001788 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4a18      	ldr	r2, [pc, #96]	@ (80017dc <HAL_ADC_ConfigChannel+0x378>)
 800177a:	4013      	ands	r3, r2
 800177c:	4a11      	ldr	r2, [pc, #68]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 800177e:	0019      	movs	r1, r3
 8001780:	0010      	movs	r0, r2
 8001782:	f7ff fbc9 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
 8001786:	e039      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a11      	ldr	r2, [pc, #68]	@ (80017d4 <HAL_ADC_ConfigChannel+0x370>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d108      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4a12      	ldr	r2, [pc, #72]	@ (80017e0 <HAL_ADC_ConfigChannel+0x37c>)
 8001796:	4013      	ands	r3, r2
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 800179a:	0019      	movs	r1, r3
 800179c:	0010      	movs	r0, r2
 800179e:	f7ff fbbb 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
 80017a2:	e02b      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_ADC_ConfigChannel+0x374>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d126      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <HAL_ADC_ConfigChannel+0x380>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <HAL_ADC_ConfigChannel+0x360>)
 80017b6:	0019      	movs	r1, r3
 80017b8:	0010      	movs	r0, r2
 80017ba:	f7ff fbad 	bl	8000f18 <LL_ADC_SetCommonPathInternalCh>
 80017be:	e01d      	b.n	80017fc <HAL_ADC_ConfigChannel+0x398>
 80017c0:	80000004 	.word	0x80000004
 80017c4:	40012708 	.word	0x40012708
 80017c8:	b0001000 	.word	0xb0001000
 80017cc:	20000000 	.word	0x20000000
 80017d0:	00030d40 	.word	0x00030d40
 80017d4:	b8004000 	.word	0xb8004000
 80017d8:	b4002000 	.word	0xb4002000
 80017dc:	ff7fffff 	.word	0xff7fffff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ec:	2220      	movs	r2, #32
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80017f4:	2317      	movs	r3, #23
 80017f6:	18fb      	adds	r3, r7, r3
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2254      	movs	r2, #84	@ 0x54
 8001800:	2100      	movs	r1, #0
 8001802:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001804:	2317      	movs	r3, #23
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	781b      	ldrb	r3, [r3, #0]
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b006      	add	sp, #24
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)

08001814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	0002      	movs	r2, r0
 800181c:	1dfb      	adds	r3, r7, #7
 800181e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001820:	1dfb      	adds	r3, r7, #7
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b7f      	cmp	r3, #127	@ 0x7f
 8001826:	d809      	bhi.n	800183c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001828:	1dfb      	adds	r3, r7, #7
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	231f      	movs	r3, #31
 8001830:	401a      	ands	r2, r3
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_EnableIRQ+0x30>)
 8001834:	2101      	movs	r1, #1
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800183c:	46c0      	nop			@ (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	0002      	movs	r2, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	1dfb      	adds	r3, r7, #7
 8001854:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001856:	1dfb      	adds	r3, r7, #7
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7f      	cmp	r3, #127	@ 0x7f
 800185c:	d828      	bhi.n	80018b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185e:	4a2f      	ldr	r2, [pc, #188]	@ (800191c <__NVIC_SetPriority+0xd4>)
 8001860:	1dfb      	adds	r3, r7, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	b25b      	sxtb	r3, r3
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	33c0      	adds	r3, #192	@ 0xc0
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	589b      	ldr	r3, [r3, r2]
 800186e:	1dfa      	adds	r2, r7, #7
 8001870:	7812      	ldrb	r2, [r2, #0]
 8001872:	0011      	movs	r1, r2
 8001874:	2203      	movs	r2, #3
 8001876:	400a      	ands	r2, r1
 8001878:	00d2      	lsls	r2, r2, #3
 800187a:	21ff      	movs	r1, #255	@ 0xff
 800187c:	4091      	lsls	r1, r2
 800187e:	000a      	movs	r2, r1
 8001880:	43d2      	mvns	r2, r2
 8001882:	401a      	ands	r2, r3
 8001884:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	019b      	lsls	r3, r3, #6
 800188a:	22ff      	movs	r2, #255	@ 0xff
 800188c:	401a      	ands	r2, r3
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	0018      	movs	r0, r3
 8001894:	2303      	movs	r3, #3
 8001896:	4003      	ands	r3, r0
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800189c:	481f      	ldr	r0, [pc, #124]	@ (800191c <__NVIC_SetPriority+0xd4>)
 800189e:	1dfb      	adds	r3, r7, #7
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	b25b      	sxtb	r3, r3
 80018a4:	089b      	lsrs	r3, r3, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	33c0      	adds	r3, #192	@ 0xc0
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018ae:	e031      	b.n	8001914 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001920 <__NVIC_SetPriority+0xd8>)
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	0019      	movs	r1, r3
 80018b8:	230f      	movs	r3, #15
 80018ba:	400b      	ands	r3, r1
 80018bc:	3b08      	subs	r3, #8
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3306      	adds	r3, #6
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	18d3      	adds	r3, r2, r3
 80018c6:	3304      	adds	r3, #4
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	1dfa      	adds	r2, r7, #7
 80018cc:	7812      	ldrb	r2, [r2, #0]
 80018ce:	0011      	movs	r1, r2
 80018d0:	2203      	movs	r2, #3
 80018d2:	400a      	ands	r2, r1
 80018d4:	00d2      	lsls	r2, r2, #3
 80018d6:	21ff      	movs	r1, #255	@ 0xff
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	43d2      	mvns	r2, r2
 80018de:	401a      	ands	r2, r3
 80018e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	019b      	lsls	r3, r3, #6
 80018e6:	22ff      	movs	r2, #255	@ 0xff
 80018e8:	401a      	ands	r2, r3
 80018ea:	1dfb      	adds	r3, r7, #7
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	0018      	movs	r0, r3
 80018f0:	2303      	movs	r3, #3
 80018f2:	4003      	ands	r3, r0
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018f8:	4809      	ldr	r0, [pc, #36]	@ (8001920 <__NVIC_SetPriority+0xd8>)
 80018fa:	1dfb      	adds	r3, r7, #7
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	001c      	movs	r4, r3
 8001900:	230f      	movs	r3, #15
 8001902:	4023      	ands	r3, r4
 8001904:	3b08      	subs	r3, #8
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	430a      	orrs	r2, r1
 800190a:	3306      	adds	r3, #6
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	18c3      	adds	r3, r0, r3
 8001910:	3304      	adds	r3, #4
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	46c0      	nop			@ (mov r8, r8)
 8001916:	46bd      	mov	sp, r7
 8001918:	b003      	add	sp, #12
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	2380      	movs	r3, #128	@ 0x80
 8001932:	045b      	lsls	r3, r3, #17
 8001934:	429a      	cmp	r2, r3
 8001936:	d301      	bcc.n	800193c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001938:	2301      	movs	r3, #1
 800193a:	e010      	b.n	800195e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <SysTick_Config+0x44>)
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	3a01      	subs	r2, #1
 8001942:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001944:	2301      	movs	r3, #1
 8001946:	425b      	negs	r3, r3
 8001948:	2103      	movs	r1, #3
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff ff7c 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <SysTick_Config+0x44>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SysTick_Config+0x44>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	0018      	movs	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	b002      	add	sp, #8
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60b9      	str	r1, [r7, #8]
 8001974:	607a      	str	r2, [r7, #4]
 8001976:	210f      	movs	r1, #15
 8001978:	187b      	adds	r3, r7, r1
 800197a:	1c02      	adds	r2, r0, #0
 800197c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	187b      	adds	r3, r7, r1
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b25b      	sxtb	r3, r3
 8001986:	0011      	movs	r1, r2
 8001988:	0018      	movs	r0, r3
 800198a:	f7ff ff5d 	bl	8001848 <__NVIC_SetPriority>
}
 800198e:	46c0      	nop			@ (mov r8, r8)
 8001990:	46bd      	mov	sp, r7
 8001992:	b004      	add	sp, #16
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	0002      	movs	r2, r0
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a2:	1dfb      	adds	r3, r7, #7
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	0018      	movs	r0, r3
 80019aa:	f7ff ff33 	bl	8001814 <__NVIC_EnableIRQ>
}
 80019ae:	46c0      	nop			@ (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	0018      	movs	r0, r3
 80019c2:	f7ff ffaf 	bl	8001924 <SysTick_Config>
 80019c6:	0003      	movs	r3, r0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e077      	b.n	8001ad2 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a3d      	ldr	r2, [pc, #244]	@ (8001adc <HAL_DMA_Init+0x10c>)
 80019e8:	4694      	mov	ip, r2
 80019ea:	4463      	add	r3, ip
 80019ec:	2114      	movs	r1, #20
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7fe fb88 	bl	8000104 <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	009a      	lsls	r2, r3, #2
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2225      	movs	r2, #37	@ 0x25
 8001a00:	2102      	movs	r1, #2
 8001a02:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4934      	ldr	r1, [pc, #208]	@ (8001ae0 <HAL_DMA_Init+0x110>)
 8001a10:	400a      	ands	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689a      	ldr	r2, [r3, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 f8fb 	bl	8001c48 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	01db      	lsls	r3, r3, #7
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d102      	bne.n	8001a64 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6c:	213f      	movs	r1, #63	@ 0x3f
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001a7a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d011      	beq.n	8001aa8 <HAL_DMA_Init+0xd8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d80d      	bhi.n	8001aa8 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 f906 	bl	8001ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	e008      	b.n	8001aba <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2225      	movs	r2, #37	@ 0x25
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2224      	movs	r2, #36	@ 0x24
 8001acc:	2100      	movs	r1, #0
 8001ace:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b002      	add	sp, #8
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	bffdfff8 	.word	0xbffdfff8
 8001ae0:	ffff800f 	.word	0xffff800f

08001ae4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001aec:	4b55      	ldr	r3, [pc, #340]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afe:	221c      	movs	r2, #28
 8001b00:	4013      	ands	r3, r2
 8001b02:	2204      	movs	r2, #4
 8001b04:	409a      	lsls	r2, r3
 8001b06:	0013      	movs	r3, r2
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d027      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x7a>
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	2204      	movs	r2, #4
 8001b12:	4013      	ands	r3, r2
 8001b14:	d023      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d107      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	438a      	bics	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b32:	4b44      	ldr	r3, [pc, #272]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001b34:	6859      	ldr	r1, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	221c      	movs	r2, #28
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2204      	movs	r2, #4
 8001b40:	409a      	lsls	r2, r3
 8001b42:	4b40      	ldr	r3, [pc, #256]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <HAL_DMA_IRQHandler+0x6e>
 8001b50:	e073      	b.n	8001c3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	0010      	movs	r0, r2
 8001b5a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b5c:	e06d      	b.n	8001c3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	221c      	movs	r2, #28
 8001b64:	4013      	ands	r3, r2
 8001b66:	2202      	movs	r2, #2
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d02e      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xec>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d02a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2220      	movs	r2, #32
 8001b82:	4013      	ands	r3, r2
 8001b84:	d10b      	bne.n	8001b9e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	210a      	movs	r1, #10
 8001b92:	438a      	bics	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2225      	movs	r2, #37	@ 0x25
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b9e:	4b29      	ldr	r3, [pc, #164]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	221c      	movs	r2, #28
 8001ba8:	4013      	ands	r3, r2
 8001baa:	2202      	movs	r2, #2
 8001bac:	409a      	lsls	r2, r3
 8001bae:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2224      	movs	r2, #36	@ 0x24
 8001bb8:	2100      	movs	r1, #0
 8001bba:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d03a      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	0010      	movs	r0, r2
 8001bcc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001bce:	e034      	b.n	8001c3a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	221c      	movs	r2, #28
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2208      	movs	r2, #8
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	d02b      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x158>
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2208      	movs	r2, #8
 8001be8:	4013      	ands	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	210e      	movs	r1, #14
 8001bf8:	438a      	bics	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bfc:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001bfe:	6859      	ldr	r1, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c04:	221c      	movs	r2, #28
 8001c06:	4013      	ands	r3, r2
 8001c08:	2201      	movs	r2, #1
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_DMA_IRQHandler+0x160>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2225      	movs	r2, #37	@ 0x25
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	0010      	movs	r0, r2
 8001c38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c3a:	46c0      	nop			@ (mov r8, r8)
 8001c3c:	46c0      	nop			@ (mov r8, r8)
}
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b004      	add	sp, #16
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40020000 	.word	0x40020000

08001c48 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	4a10      	ldr	r2, [pc, #64]	@ (8001c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001c58:	4694      	mov	ip, r2
 8001c5a:	4463      	add	r3, ip
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	001a      	movs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	001a      	movs	r2, r3
 8001c6a:	23ff      	movs	r3, #255	@ 0xff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	2114      	movs	r1, #20
 8001c72:	0018      	movs	r0, r3
 8001c74:	f7fe fa46 	bl	8000104 <__udivsi3>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001c80:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	221f      	movs	r2, #31
 8001c86:	4013      	ands	r3, r2
 8001c88:	2201      	movs	r2, #1
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b004      	add	sp, #16
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	10008200 	.word	0x10008200
 8001c9c:	40020880 	.word	0x40020880

08001ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	223f      	movs	r2, #63	@ 0x3f
 8001cae:	4013      	ands	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cb6:	4694      	mov	ip, r2
 8001cb8:	4463      	add	r3, ip
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	001a      	movs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001cd8:	46c0      	nop			@ (mov r8, r8)
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	b004      	add	sp, #16
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	1000823f 	.word	0x1000823f
 8001ce4:	40020940 	.word	0x40020940

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cf6:	e147      	b.n	8001f88 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4091      	lsls	r1, r2
 8001d02:	000a      	movs	r2, r1
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d100      	bne.n	8001d10 <HAL_GPIO_Init+0x28>
 8001d0e:	e138      	b.n	8001f82 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	4013      	ands	r3, r2
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d005      	beq.n	8001d28 <HAL_GPIO_Init+0x40>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d130      	bne.n	8001d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	43da      	mvns	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	0013      	movs	r3, r2
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	409a      	lsls	r2, r3
 8001d64:	0013      	movs	r3, r2
 8001d66:	43da      	mvns	r2, r3
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	2201      	movs	r2, #1
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	0013      	movs	r3, r2
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d017      	beq.n	8001dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	409a      	lsls	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	43da      	mvns	r2, r3
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	409a      	lsls	r2, r3
 8001db8:	0013      	movs	r3, r2
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d123      	bne.n	8001e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	58d3      	ldr	r3, [r2, r3]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	2207      	movs	r2, #7
 8001de4:	4013      	ands	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	409a      	lsls	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	43da      	mvns	r2, r3
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2107      	movs	r1, #7
 8001dfe:	400b      	ands	r3, r1
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	409a      	lsls	r2, r3
 8001e04:	0013      	movs	r3, r2
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	6939      	ldr	r1, [r7, #16]
 8001e18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2203      	movs	r2, #3
 8001e38:	401a      	ands	r2, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	0013      	movs	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	23c0      	movs	r3, #192	@ 0xc0
 8001e54:	029b      	lsls	r3, r3, #10
 8001e56:	4013      	ands	r3, r2
 8001e58:	d100      	bne.n	8001e5c <HAL_GPIO_Init+0x174>
 8001e5a:	e092      	b.n	8001f82 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001e5c:	4a50      	ldr	r2, [pc, #320]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	3318      	adds	r3, #24
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	220f      	movs	r2, #15
 8001e74:	409a      	lsls	r2, r3
 8001e76:	0013      	movs	r3, r2
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	23a0      	movs	r3, #160	@ 0xa0
 8001e84:	05db      	lsls	r3, r3, #23
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d013      	beq.n	8001eb2 <HAL_GPIO_Init+0x1ca>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a45      	ldr	r2, [pc, #276]	@ (8001fa4 <HAL_GPIO_Init+0x2bc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00d      	beq.n	8001eae <HAL_GPIO_Init+0x1c6>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a44      	ldr	r2, [pc, #272]	@ (8001fa8 <HAL_GPIO_Init+0x2c0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_GPIO_Init+0x1c2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a43      	ldr	r2, [pc, #268]	@ (8001fac <HAL_GPIO_Init+0x2c4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_GPIO_Init+0x1be>
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e006      	b.n	8001eb4 <HAL_GPIO_Init+0x1cc>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e004      	b.n	8001eb4 <HAL_GPIO_Init+0x1cc>
 8001eaa:	2302      	movs	r3, #2
 8001eac:	e002      	b.n	8001eb4 <HAL_GPIO_Init+0x1cc>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_GPIO_Init+0x1cc>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	2103      	movs	r1, #3
 8001eb8:	400a      	ands	r2, r1
 8001eba:	00d2      	lsls	r2, r2, #3
 8001ebc:	4093      	lsls	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ec4:	4936      	ldr	r1, [pc, #216]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	3318      	adds	r3, #24
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ed2:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	2380      	movs	r3, #128	@ 0x80
 8001ee8:	035b      	lsls	r3, r3, #13
 8001eea:	4013      	ands	r3, r2
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001efc:	4b28      	ldr	r3, [pc, #160]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43da      	mvns	r2, r3
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	039b      	lsls	r3, r3, #14
 8001f14:	4013      	ands	r3, r2
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f20:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f26:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001f28:	2384      	movs	r3, #132	@ 0x84
 8001f2a:	58d3      	ldr	r3, [r2, r3]
 8001f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	43da      	mvns	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	029b      	lsls	r3, r3, #10
 8001f40:	4013      	ands	r3, r2
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f4c:	4914      	ldr	r1, [pc, #80]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001f4e:	2284      	movs	r2, #132	@ 0x84
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001f54:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	58d3      	ldr	r3, [r2, r3]
 8001f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	4013      	ands	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	025b      	lsls	r3, r3, #9
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f7a:	4909      	ldr	r1, [pc, #36]	@ (8001fa0 <HAL_GPIO_Init+0x2b8>)
 8001f7c:	2280      	movs	r2, #128	@ 0x80
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3301      	adds	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	40da      	lsrs	r2, r3
 8001f90:	1e13      	subs	r3, r2, #0
 8001f92:	d000      	beq.n	8001f96 <HAL_GPIO_Init+0x2ae>
 8001f94:	e6b0      	b.n	8001cf8 <HAL_GPIO_Init+0x10>
  }
}
 8001f96:	46c0      	nop			@ (mov r8, r8)
 8001f98:	46c0      	nop			@ (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b006      	add	sp, #24
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	50000400 	.word	0x50000400
 8001fa8:	50000800 	.word	0x50000800
 8001fac:	50000c00 	.word	0x50000c00

08001fb0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	000a      	movs	r2, r1
 8001fba:	1cbb      	adds	r3, r7, #2
 8001fbc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fc4:	1cbb      	adds	r3, r7, #2
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	1cb9      	adds	r1, r7, #2
 8001fd4:	8809      	ldrh	r1, [r1, #0]
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	619a      	str	r2, [r3, #24]
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	2380      	movs	r3, #128	@ 0x80
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	429a      	cmp	r2, r3
 800200a:	d11f      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800200c:	4b14      	ldr	r3, [pc, #80]	@ (8002060 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	0013      	movs	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	189b      	adds	r3, r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4912      	ldr	r1, [pc, #72]	@ (8002064 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800201a:	0018      	movs	r0, r3
 800201c:	f7fe f872 	bl	8000104 <__udivsi3>
 8002020:	0003      	movs	r3, r0
 8002022:	3301      	adds	r3, #1
 8002024:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002026:	e008      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3b01      	subs	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e001      	b.n	800203a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e009      	b.n	800204e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	401a      	ands	r2, r3
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	429a      	cmp	r2, r3
 800204a:	d0ed      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	0018      	movs	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	b004      	add	sp, #16
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	40007000 	.word	0x40007000
 800205c:	fffff9ff 	.word	0xfffff9ff
 8002060:	20000000 	.word	0x20000000
 8002064:	000f4240 	.word	0x000f4240

08002068 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800206c:	4b03      	ldr	r3, [pc, #12]	@ (800207c <LL_RCC_GetAPB1Prescaler+0x14>)
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	23e0      	movs	r3, #224	@ 0xe0
 8002072:	01db      	lsls	r3, r3, #7
 8002074:	4013      	ands	r3, r2
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e2fe      	b.n	8002690 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	4013      	ands	r3, r2
 800209a:	d100      	bne.n	800209e <HAL_RCC_OscConfig+0x1e>
 800209c:	e07c      	b.n	8002198 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800209e:	4bc3      	ldr	r3, [pc, #780]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2238      	movs	r2, #56	@ 0x38
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020a8:	4bc0      	ldr	r3, [pc, #768]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	2203      	movs	r2, #3
 80020ae:	4013      	ands	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b10      	cmp	r3, #16
 80020b6:	d102      	bne.n	80020be <HAL_RCC_OscConfig+0x3e>
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4bb9      	ldr	r3, [pc, #740]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	4013      	ands	r3, r2
 80020ce:	d062      	beq.n	8002196 <HAL_RCC_OscConfig+0x116>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d15e      	bne.n	8002196 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e2d9      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	2380      	movs	r3, #128	@ 0x80
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x78>
 80020e8:	4bb0      	ldr	r3, [pc, #704]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4baf      	ldr	r3, [pc, #700]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80020ee:	2180      	movs	r1, #128	@ 0x80
 80020f0:	0249      	lsls	r1, r1, #9
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e020      	b.n	800213a <HAL_RCC_OscConfig+0xba>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	23a0      	movs	r3, #160	@ 0xa0
 80020fe:	02db      	lsls	r3, r3, #11
 8002100:	429a      	cmp	r2, r3
 8002102:	d10e      	bne.n	8002122 <HAL_RCC_OscConfig+0xa2>
 8002104:	4ba9      	ldr	r3, [pc, #676]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4ba8      	ldr	r3, [pc, #672]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800210a:	2180      	movs	r1, #128	@ 0x80
 800210c:	02c9      	lsls	r1, r1, #11
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	4ba6      	ldr	r3, [pc, #664]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4ba5      	ldr	r3, [pc, #660]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	0249      	lsls	r1, r1, #9
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e00b      	b.n	800213a <HAL_RCC_OscConfig+0xba>
 8002122:	4ba2      	ldr	r3, [pc, #648]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4ba1      	ldr	r3, [pc, #644]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002128:	49a1      	ldr	r1, [pc, #644]	@ (80023b0 <HAL_RCC_OscConfig+0x330>)
 800212a:	400a      	ands	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	4b9f      	ldr	r3, [pc, #636]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b9e      	ldr	r3, [pc, #632]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002134:	499f      	ldr	r1, [pc, #636]	@ (80023b4 <HAL_RCC_OscConfig+0x334>)
 8002136:	400a      	ands	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d014      	beq.n	800216c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe febb 	bl	8000ebc <HAL_GetTick>
 8002146:	0003      	movs	r3, r0
 8002148:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe feb6 	bl	8000ebc <HAL_GetTick>
 8002150:	0002      	movs	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e298      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800215e:	4b93      	ldr	r3, [pc, #588]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	@ 0x80
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	4013      	ands	r3, r2
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0xcc>
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7fe fea6 	bl	8000ebc <HAL_GetTick>
 8002170:	0003      	movs	r3, r0
 8002172:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002176:	f7fe fea1 	bl	8000ebc <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b64      	cmp	r3, #100	@ 0x64
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e283      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002188:	4b88      	ldr	r3, [pc, #544]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	2380      	movs	r3, #128	@ 0x80
 800218e:	029b      	lsls	r3, r3, #10
 8002190:	4013      	ands	r3, r2
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0xf6>
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2202      	movs	r2, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d100      	bne.n	80021a4 <HAL_RCC_OscConfig+0x124>
 80021a2:	e099      	b.n	80022d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2238      	movs	r2, #56	@ 0x38
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ae:	4b7f      	ldr	r3, [pc, #508]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2203      	movs	r2, #3
 80021b4:	4013      	ands	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x144>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d002      	beq.n	80021ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d135      	bne.n	8002236 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021ca:	4b78      	ldr	r3, [pc, #480]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4013      	ands	r3, r2
 80021d4:	d005      	beq.n	80021e2 <HAL_RCC_OscConfig+0x162>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e256      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e2:	4b72      	ldr	r3, [pc, #456]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	4a74      	ldr	r2, [pc, #464]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	0019      	movs	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	021a      	lsls	r2, r3, #8
 80021f2:	4b6e      	ldr	r3, [pc, #440]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80021f4:	430a      	orrs	r2, r1
 80021f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d112      	bne.n	8002224 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021fe:	4b6b      	ldr	r3, [pc, #428]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a6e      	ldr	r2, [pc, #440]	@ (80023bc <HAL_RCC_OscConfig+0x33c>)
 8002204:	4013      	ands	r3, r2
 8002206:	0019      	movs	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	4b67      	ldr	r3, [pc, #412]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002212:	4b66      	ldr	r3, [pc, #408]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	0adb      	lsrs	r3, r3, #11
 8002218:	2207      	movs	r2, #7
 800221a:	4013      	ands	r3, r2
 800221c:	4a68      	ldr	r2, [pc, #416]	@ (80023c0 <HAL_RCC_OscConfig+0x340>)
 800221e:	40da      	lsrs	r2, r3
 8002220:	4b68      	ldr	r3, [pc, #416]	@ (80023c4 <HAL_RCC_OscConfig+0x344>)
 8002222:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002224:	4b68      	ldr	r3, [pc, #416]	@ (80023c8 <HAL_RCC_OscConfig+0x348>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0018      	movs	r0, r3
 800222a:	f7fe fdeb 	bl	8000e04 <HAL_InitTick>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d051      	beq.n	80022d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e22c      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d030      	beq.n	80022a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800223e:	4b5b      	ldr	r3, [pc, #364]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a5e      	ldr	r2, [pc, #376]	@ (80023bc <HAL_RCC_OscConfig+0x33c>)
 8002244:	4013      	ands	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	4b57      	ldr	r3, [pc, #348]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002252:	4b56      	ldr	r3, [pc, #344]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4b55      	ldr	r3, [pc, #340]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002258:	2180      	movs	r1, #128	@ 0x80
 800225a:	0049      	lsls	r1, r1, #1
 800225c:	430a      	orrs	r2, r1
 800225e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002260:	f7fe fe2c 	bl	8000ebc <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7fe fe27 	bl	8000ebc <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e209      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227c:	4b4b      	ldr	r3, [pc, #300]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	2380      	movs	r3, #128	@ 0x80
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4013      	ands	r3, r2
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b48      	ldr	r3, [pc, #288]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a4a      	ldr	r2, [pc, #296]	@ (80023b8 <HAL_RCC_OscConfig+0x338>)
 800228e:	4013      	ands	r3, r2
 8002290:	0019      	movs	r1, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	021a      	lsls	r2, r3, #8
 8002298:	4b44      	ldr	r3, [pc, #272]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800229a:	430a      	orrs	r2, r1
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	e01b      	b.n	80022d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022a0:	4b42      	ldr	r3, [pc, #264]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022a6:	4949      	ldr	r1, [pc, #292]	@ (80023cc <HAL_RCC_OscConfig+0x34c>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe06 	bl	8000ebc <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b6:	f7fe fe01 	bl	8000ebc <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1e3      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c8:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4013      	ands	r3, r2
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x236>
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2208      	movs	r2, #8
 80022de:	4013      	ands	r3, r2
 80022e0:	d047      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022e2:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	2238      	movs	r2, #56	@ 0x38
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b18      	cmp	r3, #24
 80022ec:	d10a      	bne.n	8002304 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022ee:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 80022f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f2:	2202      	movs	r2, #2
 80022f4:	4013      	ands	r3, r2
 80022f6:	d03c      	beq.n	8002372 <HAL_RCC_OscConfig+0x2f2>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d138      	bne.n	8002372 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e1c5      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d019      	beq.n	8002340 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800230c:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800230e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002310:	4b26      	ldr	r3, [pc, #152]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002312:	2101      	movs	r1, #1
 8002314:	430a      	orrs	r2, r1
 8002316:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fdd0 	bl	8000ebc <HAL_GetTick>
 800231c:	0003      	movs	r3, r0
 800231e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002322:	f7fe fdcb 	bl	8000ebc <HAL_GetTick>
 8002326:	0002      	movs	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e1ad      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002336:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002338:	2202      	movs	r2, #2
 800233a:	4013      	ands	r3, r2
 800233c:	d0f1      	beq.n	8002322 <HAL_RCC_OscConfig+0x2a2>
 800233e:	e018      	b.n	8002372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002342:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002346:	2101      	movs	r1, #1
 8002348:	438a      	bics	r2, r1
 800234a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fdb6 	bl	8000ebc <HAL_GetTick>
 8002350:	0003      	movs	r3, r0
 8002352:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002356:	f7fe fdb1 	bl	8000ebc <HAL_GetTick>
 800235a:	0002      	movs	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e193      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002368:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 800236a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d1f1      	bne.n	8002356 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2204      	movs	r2, #4
 8002378:	4013      	ands	r3, r2
 800237a:	d100      	bne.n	800237e <HAL_RCC_OscConfig+0x2fe>
 800237c:	e0c6      	b.n	800250c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	231f      	movs	r3, #31
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2238      	movs	r2, #56	@ 0x38
 800238c:	4013      	ands	r3, r2
 800238e:	2b20      	cmp	r3, #32
 8002390:	d11e      	bne.n	80023d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_OscConfig+0x32c>)
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	2202      	movs	r2, #2
 8002398:	4013      	ands	r3, r2
 800239a:	d100      	bne.n	800239e <HAL_RCC_OscConfig+0x31e>
 800239c:	e0b6      	b.n	800250c <HAL_RCC_OscConfig+0x48c>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d000      	beq.n	80023a8 <HAL_RCC_OscConfig+0x328>
 80023a6:	e0b1      	b.n	800250c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e171      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
 80023ac:	40021000 	.word	0x40021000
 80023b0:	fffeffff 	.word	0xfffeffff
 80023b4:	fffbffff 	.word	0xfffbffff
 80023b8:	ffff80ff 	.word	0xffff80ff
 80023bc:	ffffc7ff 	.word	0xffffc7ff
 80023c0:	00f42400 	.word	0x00f42400
 80023c4:	20000000 	.word	0x20000000
 80023c8:	20000004 	.word	0x20000004
 80023cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d0:	4bb1      	ldr	r3, [pc, #708]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80023d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023d4:	2380      	movs	r3, #128	@ 0x80
 80023d6:	055b      	lsls	r3, r3, #21
 80023d8:	4013      	ands	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_RCC_OscConfig+0x360>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCC_OscConfig+0x362>
 80023e0:	2300      	movs	r3, #0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d011      	beq.n	800240a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4bac      	ldr	r3, [pc, #688]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80023e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ea:	4bab      	ldr	r3, [pc, #684]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80023ec:	2180      	movs	r1, #128	@ 0x80
 80023ee:	0549      	lsls	r1, r1, #21
 80023f0:	430a      	orrs	r2, r1
 80023f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023f4:	4ba8      	ldr	r3, [pc, #672]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80023f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	055b      	lsls	r3, r3, #21
 80023fc:	4013      	ands	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002402:	231f      	movs	r3, #31
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240a:	4ba4      	ldr	r3, [pc, #656]	@ (800269c <HAL_RCC_OscConfig+0x61c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	4013      	ands	r3, r2
 8002414:	d11a      	bne.n	800244c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002416:	4ba1      	ldr	r3, [pc, #644]	@ (800269c <HAL_RCC_OscConfig+0x61c>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4ba0      	ldr	r3, [pc, #640]	@ (800269c <HAL_RCC_OscConfig+0x61c>)
 800241c:	2180      	movs	r1, #128	@ 0x80
 800241e:	0049      	lsls	r1, r1, #1
 8002420:	430a      	orrs	r2, r1
 8002422:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002424:	f7fe fd4a 	bl	8000ebc <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800242e:	f7fe fd45 	bl	8000ebc <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e127      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002440:	4b96      	ldr	r3, [pc, #600]	@ (800269c <HAL_RCC_OscConfig+0x61c>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4013      	ands	r3, r2
 800244a:	d0f0      	beq.n	800242e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d106      	bne.n	8002462 <HAL_RCC_OscConfig+0x3e2>
 8002454:	4b90      	ldr	r3, [pc, #576]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002456:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002458:	4b8f      	ldr	r3, [pc, #572]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800245a:	2101      	movs	r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002460:	e01c      	b.n	800249c <HAL_RCC_OscConfig+0x41c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b05      	cmp	r3, #5
 8002468:	d10c      	bne.n	8002484 <HAL_RCC_OscConfig+0x404>
 800246a:	4b8b      	ldr	r3, [pc, #556]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800246c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800246e:	4b8a      	ldr	r3, [pc, #552]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002470:	2104      	movs	r1, #4
 8002472:	430a      	orrs	r2, r1
 8002474:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002476:	4b88      	ldr	r3, [pc, #544]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002478:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800247a:	4b87      	ldr	r3, [pc, #540]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800247c:	2101      	movs	r1, #1
 800247e:	430a      	orrs	r2, r1
 8002480:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002482:	e00b      	b.n	800249c <HAL_RCC_OscConfig+0x41c>
 8002484:	4b84      	ldr	r3, [pc, #528]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002486:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002488:	4b83      	ldr	r3, [pc, #524]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800248a:	2101      	movs	r1, #1
 800248c:	438a      	bics	r2, r1
 800248e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002490:	4b81      	ldr	r3, [pc, #516]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002492:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002494:	4b80      	ldr	r3, [pc, #512]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002496:	2104      	movs	r1, #4
 8002498:	438a      	bics	r2, r1
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d014      	beq.n	80024ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd0a 	bl	8000ebc <HAL_GetTick>
 80024a8:	0003      	movs	r3, r0
 80024aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ac:	e009      	b.n	80024c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fd05 	bl	8000ebc <HAL_GetTick>
 80024b2:	0002      	movs	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	4a79      	ldr	r2, [pc, #484]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0e6      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c2:	4b75      	ldr	r3, [pc, #468]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80024c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x42e>
 80024cc:	e013      	b.n	80024f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe fcf5 	bl	8000ebc <HAL_GetTick>
 80024d2:	0003      	movs	r3, r0
 80024d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d6:	e009      	b.n	80024ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d8:	f7fe fcf0 	bl	8000ebc <HAL_GetTick>
 80024dc:	0002      	movs	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	4a6f      	ldr	r2, [pc, #444]	@ (80026a0 <HAL_RCC_OscConfig+0x620>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e0d1      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80024ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024f6:	231f      	movs	r3, #31
 80024f8:	18fb      	adds	r3, r7, r3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002500:	4b65      	ldr	r3, [pc, #404]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002502:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002504:	4b64      	ldr	r3, [pc, #400]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002506:	4967      	ldr	r1, [pc, #412]	@ (80026a4 <HAL_RCC_OscConfig+0x624>)
 8002508:	400a      	ands	r2, r1
 800250a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d100      	bne.n	8002516 <HAL_RCC_OscConfig+0x496>
 8002514:	e0bb      	b.n	800268e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002516:	4b60      	ldr	r3, [pc, #384]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2238      	movs	r2, #56	@ 0x38
 800251c:	4013      	ands	r3, r2
 800251e:	2b10      	cmp	r3, #16
 8002520:	d100      	bne.n	8002524 <HAL_RCC_OscConfig+0x4a4>
 8002522:	e07b      	b.n	800261c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d156      	bne.n	80025da <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b5a      	ldr	r3, [pc, #360]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b59      	ldr	r3, [pc, #356]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002532:	495d      	ldr	r1, [pc, #372]	@ (80026a8 <HAL_RCC_OscConfig+0x628>)
 8002534:	400a      	ands	r2, r1
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fcc0 	bl	8000ebc <HAL_GetTick>
 800253c:	0003      	movs	r3, r0
 800253e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fcbb 	bl	8000ebc <HAL_GetTick>
 8002546:	0002      	movs	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e09d      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	4b50      	ldr	r3, [pc, #320]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	2380      	movs	r3, #128	@ 0x80
 800255a:	049b      	lsls	r3, r3, #18
 800255c:	4013      	ands	r3, r2
 800255e:	d1f0      	bne.n	8002542 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002560:	4b4d      	ldr	r3, [pc, #308]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a51      	ldr	r2, [pc, #324]	@ (80026ac <HAL_RCC_OscConfig+0x62c>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1a      	ldr	r2, [r3, #32]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002572:	431a      	orrs	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002580:	431a      	orrs	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800258c:	431a      	orrs	r2, r3
 800258e:	4b42      	ldr	r3, [pc, #264]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002590:	430a      	orrs	r2, r1
 8002592:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002594:	4b40      	ldr	r3, [pc, #256]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b3f      	ldr	r3, [pc, #252]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800259a:	2180      	movs	r1, #128	@ 0x80
 800259c:	0449      	lsls	r1, r1, #17
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80025a8:	2180      	movs	r1, #128	@ 0x80
 80025aa:	0549      	lsls	r1, r1, #21
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fc84 	bl	8000ebc <HAL_GetTick>
 80025b4:	0003      	movs	r3, r0
 80025b6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ba:	f7fe fc7f 	bl	8000ebc <HAL_GetTick>
 80025be:	0002      	movs	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e061      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025cc:	4b32      	ldr	r3, [pc, #200]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	049b      	lsls	r3, r3, #18
 80025d4:	4013      	ands	r3, r2
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x53a>
 80025d8:	e059      	b.n	800268e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025da:	4b2f      	ldr	r3, [pc, #188]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	4b2e      	ldr	r3, [pc, #184]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 80025e0:	4931      	ldr	r1, [pc, #196]	@ (80026a8 <HAL_RCC_OscConfig+0x628>)
 80025e2:	400a      	ands	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe fc69 	bl	8000ebc <HAL_GetTick>
 80025ea:	0003      	movs	r3, r0
 80025ec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fc64 	bl	8000ebc <HAL_GetTick>
 80025f4:	0002      	movs	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e046      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002602:	4b25      	ldr	r3, [pc, #148]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	049b      	lsls	r3, r3, #18
 800260a:	4013      	ands	r3, r2
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800260e:	4b22      	ldr	r3, [pc, #136]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b21      	ldr	r3, [pc, #132]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 8002614:	4926      	ldr	r1, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x630>)
 8002616:	400a      	ands	r2, r1
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	e038      	b.n	800268e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e033      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002628:	4b1b      	ldr	r3, [pc, #108]	@ (8002698 <HAL_RCC_OscConfig+0x618>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2203      	movs	r2, #3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	429a      	cmp	r2, r3
 800263a:	d126      	bne.n	800268a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2270      	movs	r2, #112	@ 0x70
 8002640:	401a      	ands	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d11f      	bne.n	800268a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	23fe      	movs	r3, #254	@ 0xfe
 800264e:	01db      	lsls	r3, r3, #7
 8002650:	401a      	ands	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002656:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002658:	429a      	cmp	r2, r3
 800265a:	d116      	bne.n	800268a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	23f8      	movs	r3, #248	@ 0xf8
 8002660:	039b      	lsls	r3, r3, #14
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d10e      	bne.n	800268a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	23e0      	movs	r3, #224	@ 0xe0
 8002670:	051b      	lsls	r3, r3, #20
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d106      	bne.n	800268a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	0f5b      	lsrs	r3, r3, #29
 8002680:	075a      	lsls	r2, r3, #29
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d001      	beq.n	800268e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b008      	add	sp, #32
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40021000 	.word	0x40021000
 800269c:	40007000 	.word	0x40007000
 80026a0:	00001388 	.word	0x00001388
 80026a4:	efffffff 	.word	0xefffffff
 80026a8:	feffffff 	.word	0xfeffffff
 80026ac:	11c1808c 	.word	0x11c1808c
 80026b0:	eefefffc 	.word	0xeefefffc

080026b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0e9      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b76      	ldr	r3, [pc, #472]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2207      	movs	r2, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d91e      	bls.n	8002714 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b73      	ldr	r3, [pc, #460]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2207      	movs	r2, #7
 80026dc:	4393      	bics	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	4b70      	ldr	r3, [pc, #448]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fbe8 	bl	8000ebc <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026f0:	e009      	b.n	8002706 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f2:	f7fe fbe3 	bl	8000ebc <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	4a6a      	ldr	r2, [pc, #424]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0ca      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002706:	4b67      	ldr	r3, [pc, #412]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2207      	movs	r2, #7
 800270c:	4013      	ands	r3, r2
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d1ee      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2202      	movs	r2, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d015      	beq.n	800274a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2204      	movs	r2, #4
 8002724:	4013      	ands	r3, r2
 8002726:	d006      	beq.n	8002736 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002728:	4b60      	ldr	r3, [pc, #384]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	4b5f      	ldr	r3, [pc, #380]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800272e:	21e0      	movs	r1, #224	@ 0xe0
 8002730:	01c9      	lsls	r1, r1, #7
 8002732:	430a      	orrs	r2, r1
 8002734:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002736:	4b5d      	ldr	r3, [pc, #372]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4a5d      	ldr	r2, [pc, #372]	@ (80028b0 <HAL_RCC_ClockConfig+0x1fc>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4b59      	ldr	r3, [pc, #356]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2201      	movs	r2, #1
 8002750:	4013      	ands	r3, r2
 8002752:	d057      	beq.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d107      	bne.n	800276c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800275c:	4b53      	ldr	r3, [pc, #332]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	029b      	lsls	r3, r3, #10
 8002764:	4013      	ands	r3, r2
 8002766:	d12b      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e097      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d107      	bne.n	8002784 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002774:	4b4d      	ldr	r3, [pc, #308]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2380      	movs	r3, #128	@ 0x80
 800277a:	049b      	lsls	r3, r3, #18
 800277c:	4013      	ands	r3, r2
 800277e:	d11f      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e08b      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d107      	bne.n	800279c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278c:	4b47      	ldr	r3, [pc, #284]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4013      	ands	r3, r2
 8002796:	d113      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e07f      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d106      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 80027a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d108      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e074      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027b2:	4b3e      	ldr	r3, [pc, #248]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	2202      	movs	r2, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e06d      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c0:	4b3a      	ldr	r3, [pc, #232]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2207      	movs	r2, #7
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	4b37      	ldr	r3, [pc, #220]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d4:	f7fe fb72 	bl	8000ebc <HAL_GetTick>
 80027d8:	0003      	movs	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027dc:	e009      	b.n	80027f2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027de:	f7fe fb6d 	bl	8000ebc <HAL_GetTick>
 80027e2:	0002      	movs	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	4a2f      	ldr	r2, [pc, #188]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e054      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2e      	ldr	r3, [pc, #184]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2238      	movs	r2, #56	@ 0x38
 80027f8:	401a      	ands	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	429a      	cmp	r2, r3
 8002802:	d1ec      	bne.n	80027de <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2207      	movs	r2, #7
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d21e      	bcs.n	8002850 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b24      	ldr	r3, [pc, #144]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2207      	movs	r2, #7
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	4b21      	ldr	r3, [pc, #132]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002824:	f7fe fb4a 	bl	8000ebc <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800282c:	e009      	b.n	8002842 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282e:	f7fe fb45 	bl	8000ebc <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	4a1b      	ldr	r2, [pc, #108]	@ (80028a8 <HAL_RCC_ClockConfig+0x1f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e02c      	b.n	800289c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002842:	4b18      	ldr	r3, [pc, #96]	@ (80028a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2207      	movs	r2, #7
 8002848:	4013      	ands	r3, r2
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2204      	movs	r2, #4
 8002856:	4013      	ands	r3, r2
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800285a:	4b14      	ldr	r3, [pc, #80]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	4a15      	ldr	r2, [pc, #84]	@ (80028b4 <HAL_RCC_ClockConfig+0x200>)
 8002860:	4013      	ands	r3, r2
 8002862:	0019      	movs	r1, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b10      	ldr	r3, [pc, #64]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	430a      	orrs	r2, r1
 800286c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800286e:	f000 f829 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002872:	0001      	movs	r1, r0
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <HAL_RCC_ClockConfig+0x1f8>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	0a1b      	lsrs	r3, r3, #8
 800287a:	220f      	movs	r2, #15
 800287c:	401a      	ands	r2, r3
 800287e:	4b0e      	ldr	r3, [pc, #56]	@ (80028b8 <HAL_RCC_ClockConfig+0x204>)
 8002880:	0092      	lsls	r2, r2, #2
 8002882:	58d3      	ldr	r3, [r2, r3]
 8002884:	221f      	movs	r2, #31
 8002886:	4013      	ands	r3, r2
 8002888:	000a      	movs	r2, r1
 800288a:	40da      	lsrs	r2, r3
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_ClockConfig+0x208>)
 800288e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_RCC_ClockConfig+0x20c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	0018      	movs	r0, r3
 8002896:	f7fe fab5 	bl	8000e04 <HAL_InitTick>
 800289a:	0003      	movs	r3, r0
}
 800289c:	0018      	movs	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	b004      	add	sp, #16
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40022000 	.word	0x40022000
 80028a8:	00001388 	.word	0x00001388
 80028ac:	40021000 	.word	0x40021000
 80028b0:	fffff0ff 	.word	0xfffff0ff
 80028b4:	ffff8fff 	.word	0xffff8fff
 80028b8:	0800478c 	.word	0x0800478c
 80028bc:	20000000 	.word	0x20000000
 80028c0:	20000004 	.word	0x20000004

080028c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028ca:	4b3c      	ldr	r3, [pc, #240]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2238      	movs	r2, #56	@ 0x38
 80028d0:	4013      	ands	r3, r2
 80028d2:	d10f      	bne.n	80028f4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028d4:	4b39      	ldr	r3, [pc, #228]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0adb      	lsrs	r3, r3, #11
 80028da:	2207      	movs	r2, #7
 80028dc:	4013      	ands	r3, r2
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	0013      	movs	r3, r2
 80028e4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028e6:	6839      	ldr	r1, [r7, #0]
 80028e8:	4835      	ldr	r0, [pc, #212]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028ea:	f7fd fc0b 	bl	8000104 <__udivsi3>
 80028ee:	0003      	movs	r3, r0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e05d      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f4:	4b31      	ldr	r3, [pc, #196]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2238      	movs	r2, #56	@ 0x38
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d102      	bne.n	8002906 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	e054      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002906:	4b2d      	ldr	r3, [pc, #180]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2238      	movs	r2, #56	@ 0x38
 800290c:	4013      	ands	r3, r2
 800290e:	2b10      	cmp	r3, #16
 8002910:	d138      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002912:	4b2a      	ldr	r3, [pc, #168]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	2203      	movs	r2, #3
 8002918:	4013      	ands	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800291c:	4b27      	ldr	r3, [pc, #156]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	091b      	lsrs	r3, r3, #4
 8002922:	2207      	movs	r2, #7
 8002924:	4013      	ands	r3, r2
 8002926:	3301      	adds	r3, #1
 8002928:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b03      	cmp	r3, #3
 800292e:	d10d      	bne.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	4824      	ldr	r0, [pc, #144]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002934:	f7fd fbe6 	bl	8000104 <__udivsi3>
 8002938:	0003      	movs	r3, r0
 800293a:	0019      	movs	r1, r3
 800293c:	4b1f      	ldr	r3, [pc, #124]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	227f      	movs	r2, #127	@ 0x7f
 8002944:	4013      	ands	r3, r2
 8002946:	434b      	muls	r3, r1
 8002948:	617b      	str	r3, [r7, #20]
        break;
 800294a:	e00d      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	481c      	ldr	r0, [pc, #112]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002950:	f7fd fbd8 	bl	8000104 <__udivsi3>
 8002954:	0003      	movs	r3, r0
 8002956:	0019      	movs	r1, r3
 8002958:	4b18      	ldr	r3, [pc, #96]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	227f      	movs	r2, #127	@ 0x7f
 8002960:	4013      	ands	r3, r2
 8002962:	434b      	muls	r3, r1
 8002964:	617b      	str	r3, [r7, #20]
        break;
 8002966:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002968:	4b14      	ldr	r3, [pc, #80]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	0f5b      	lsrs	r3, r3, #29
 800296e:	2207      	movs	r2, #7
 8002970:	4013      	ands	r3, r2
 8002972:	3301      	adds	r3, #1
 8002974:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7fd fbc3 	bl	8000104 <__udivsi3>
 800297e:	0003      	movs	r3, r0
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e015      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2238      	movs	r2, #56	@ 0x38
 800298a:	4013      	ands	r3, r2
 800298c:	2b20      	cmp	r3, #32
 800298e:	d103      	bne.n	8002998 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002990:	2380      	movs	r3, #128	@ 0x80
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002998:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2238      	movs	r2, #56	@ 0x38
 800299e:	4013      	ands	r3, r2
 80029a0:	2b18      	cmp	r3, #24
 80029a2:	d103      	bne.n	80029ac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029a4:	23fa      	movs	r3, #250	@ 0xfa
 80029a6:	01db      	lsls	r3, r3, #7
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e001      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029b0:	693b      	ldr	r3, [r7, #16]
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b006      	add	sp, #24
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	20000000 	.word	0x20000000

080029dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029dc:	b5b0      	push	{r4, r5, r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029e0:	f7ff fff2 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e4:	0004      	movs	r4, r0
 80029e6:	f7ff fb3f 	bl	8002068 <LL_RCC_GetAPB1Prescaler>
 80029ea:	0003      	movs	r3, r0
 80029ec:	0b1a      	lsrs	r2, r3, #12
 80029ee:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	58d3      	ldr	r3, [r2, r3]
 80029f4:	221f      	movs	r2, #31
 80029f6:	4013      	ands	r3, r2
 80029f8:	40dc      	lsrs	r4, r3
 80029fa:	0023      	movs	r3, r4
}
 80029fc:	0018      	movs	r0, r3
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bdb0      	pop	{r4, r5, r7, pc}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	080047cc 	.word	0x080047cc

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a10:	2313      	movs	r3, #19
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a18:	2312      	movs	r3, #18
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	029b      	lsls	r3, r3, #10
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a2c:	e0a3      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2e:	2011      	movs	r0, #17
 8002a30:	183b      	adds	r3, r7, r0
 8002a32:	2200      	movs	r2, #0
 8002a34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4ba5      	ldr	r3, [pc, #660]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	055b      	lsls	r3, r3, #21
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d110      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4ba2      	ldr	r3, [pc, #648]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a46:	4ba1      	ldr	r3, [pc, #644]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a48:	2180      	movs	r1, #128	@ 0x80
 8002a4a:	0549      	lsls	r1, r1, #21
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002a50:	4b9e      	ldr	r3, [pc, #632]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002a52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	055b      	lsls	r3, r3, #21
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5e:	183b      	adds	r3, r7, r0
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a64:	4b9a      	ldr	r3, [pc, #616]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b99      	ldr	r3, [pc, #612]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002a6a:	2180      	movs	r1, #128	@ 0x80
 8002a6c:	0049      	lsls	r1, r1, #1
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a72:	f7fe fa23 	bl	8000ebc <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe fa1e 	bl	8000ebc <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d904      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002a8a:	2313      	movs	r3, #19
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2203      	movs	r2, #3
 8002a90:	701a      	strb	r2, [r3, #0]
        break;
 8002a92:	e005      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a94:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	2380      	movs	r3, #128	@ 0x80
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	d0ed      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002aa0:	2313      	movs	r3, #19
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d154      	bne.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aaa:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002aae:	23c0      	movs	r3, #192	@ 0xc0
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d019      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d014      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ac6:	4b81      	ldr	r3, [pc, #516]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aca:	4a82      	ldr	r2, [pc, #520]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ad0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ad4:	4b7d      	ldr	r3, [pc, #500]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ad6:	2180      	movs	r1, #128	@ 0x80
 8002ad8:	0249      	lsls	r1, r1, #9
 8002ada:	430a      	orrs	r2, r1
 8002adc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ade:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ae4:	497c      	ldr	r1, [pc, #496]	@ (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002aea:	4b78      	ldr	r3, [pc, #480]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d016      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af8:	f7fe f9e0 	bl	8000ebc <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b00:	e00c      	b.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b02:	f7fe f9db 	bl	8000ebc <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	4a73      	ldr	r2, [pc, #460]	@ (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d904      	bls.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b12:	2313      	movs	r3, #19
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2203      	movs	r2, #3
 8002b18:	701a      	strb	r2, [r3, #0]
            break;
 8002b1a:	e004      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	d0ed      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b26:	2313      	movs	r3, #19
 8002b28:	18fb      	adds	r3, r7, r3
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b30:	4b66      	ldr	r3, [pc, #408]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b34:	4a67      	ldr	r2, [pc, #412]	@ (8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	0019      	movs	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b3e:	4b63      	ldr	r3, [pc, #396]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b40:	430a      	orrs	r2, r1
 8002b42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b44:	e00c      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b46:	2312      	movs	r3, #18
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2213      	movs	r2, #19
 8002b4c:	18ba      	adds	r2, r7, r2
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e005      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b54:	2312      	movs	r3, #18
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2213      	movs	r2, #19
 8002b5a:	18ba      	adds	r2, r7, r2
 8002b5c:	7812      	ldrb	r2, [r2, #0]
 8002b5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b60:	2311      	movs	r3, #17
 8002b62:	18fb      	adds	r3, r7, r3
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6a:	4b58      	ldr	r3, [pc, #352]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b6e:	4b57      	ldr	r3, [pc, #348]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b70:	495b      	ldr	r1, [pc, #364]	@ (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d009      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b80:	4b52      	ldr	r3, [pc, #328]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	2203      	movs	r2, #3
 8002b86:	4393      	bics	r3, r2
 8002b88:	0019      	movs	r1, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002b90:	430a      	orrs	r2, r1
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2210      	movs	r2, #16
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d009      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002ba0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba2:	4a50      	ldr	r2, [pc, #320]	@ (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	0019      	movs	r1, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	2380      	movs	r3, #128	@ 0x80
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bbe:	4b43      	ldr	r3, [pc, #268]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	4a49      	ldr	r2, [pc, #292]	@ (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	0019      	movs	r1, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002be2:	4a42      	ldr	r2, [pc, #264]	@ (8002cec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	699a      	ldr	r2, [r3, #24]
 8002bec:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfc:	4b33      	ldr	r3, [pc, #204]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c00:	4a3b      	ldr	r2, [pc, #236]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b30      	ldr	r3, [pc, #192]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	@ 0x80
 8002c16:	01db      	lsls	r3, r3, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	0899      	lsrs	r1, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69da      	ldr	r2, [r3, #28]
 8002c28:	4b28      	ldr	r3, [pc, #160]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69da      	ldr	r2, [r3, #28]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d106      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c3a:	4b24      	ldr	r3, [pc, #144]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b23      	ldr	r3, [pc, #140]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c40:	2180      	movs	r1, #128	@ 0x80
 8002c42:	0249      	lsls	r1, r1, #9
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	039b      	lsls	r3, r3, #14
 8002c50:	4013      	ands	r3, r2
 8002c52:	d016      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	4a26      	ldr	r2, [pc, #152]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a1a      	ldr	r2, [r3, #32]
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1a      	ldr	r2, [r3, #32]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	03db      	lsls	r3, r3, #15
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d106      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c7a:	2180      	movs	r1, #128	@ 0x80
 8002c7c:	0449      	lsls	r1, r1, #17
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d016      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c92:	4a19      	ldr	r2, [pc, #100]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	2380      	movs	r3, #128	@ 0x80
 8002ca8:	01db      	lsls	r3, r3, #7
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d106      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002cb4:	2180      	movs	r1, #128	@ 0x80
 8002cb6:	0249      	lsls	r1, r1, #9
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002cbc:	2312      	movs	r3, #18
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	781b      	ldrb	r3, [r3, #0]
}
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b006      	add	sp, #24
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	46c0      	nop			@ (mov r8, r8)
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40007000 	.word	0x40007000
 8002cd4:	fffffcff 	.word	0xfffffcff
 8002cd8:	fffeffff 	.word	0xfffeffff
 8002cdc:	00001388 	.word	0x00001388
 8002ce0:	efffffff 	.word	0xefffffff
 8002ce4:	fffff3ff 	.word	0xfffff3ff
 8002ce8:	fff3ffff 	.word	0xfff3ffff
 8002cec:	ffcfffff 	.word	0xffcfffff
 8002cf0:	ffffcfff 	.word	0xffffcfff
 8002cf4:	ffbfffff 	.word	0xffbfffff
 8002cf8:	ffff3fff 	.word	0xffff3fff

08002cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e04a      	b.n	8002da4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	223d      	movs	r2, #61	@ 0x3d
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	223c      	movs	r2, #60	@ 0x3c
 8002d1e:	2100      	movs	r1, #0
 8002d20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	0018      	movs	r0, r3
 8002d26:	f7fd ff39 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	223d      	movs	r2, #61	@ 0x3d
 8002d2e:	2102      	movs	r1, #2
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	0010      	movs	r0, r2
 8002d3e:	f000 fb2b 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2248      	movs	r2, #72	@ 0x48
 8002d46:	2101      	movs	r1, #1
 8002d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	223e      	movs	r2, #62	@ 0x3e
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	223f      	movs	r2, #63	@ 0x3f
 8002d56:	2101      	movs	r1, #1
 8002d58:	5499      	strb	r1, [r3, r2]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2240      	movs	r2, #64	@ 0x40
 8002d5e:	2101      	movs	r1, #1
 8002d60:	5499      	strb	r1, [r3, r2]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2241      	movs	r2, #65	@ 0x41
 8002d66:	2101      	movs	r1, #1
 8002d68:	5499      	strb	r1, [r3, r2]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2242      	movs	r2, #66	@ 0x42
 8002d6e:	2101      	movs	r1, #1
 8002d70:	5499      	strb	r1, [r3, r2]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2243      	movs	r2, #67	@ 0x43
 8002d76:	2101      	movs	r1, #1
 8002d78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2244      	movs	r2, #68	@ 0x44
 8002d7e:	2101      	movs	r1, #1
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2245      	movs	r2, #69	@ 0x45
 8002d86:	2101      	movs	r1, #1
 8002d88:	5499      	strb	r1, [r3, r2]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2246      	movs	r2, #70	@ 0x46
 8002d8e:	2101      	movs	r1, #1
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2247      	movs	r2, #71	@ 0x47
 8002d96:	2101      	movs	r1, #1
 8002d98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	223d      	movs	r2, #61	@ 0x3d
 8002d9e:	2101      	movs	r1, #1
 8002da0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e04a      	b.n	8002e54 <HAL_TIM_OC_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	223d      	movs	r2, #61	@ 0x3d
 8002dc2:	5c9b      	ldrb	r3, [r3, r2]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	223c      	movs	r2, #60	@ 0x3c
 8002dce:	2100      	movs	r1, #0
 8002dd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f000 f841 	bl	8002e5c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	223d      	movs	r2, #61	@ 0x3d
 8002dde:	2102      	movs	r1, #2
 8002de0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f000 fad3 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2248      	movs	r2, #72	@ 0x48
 8002df6:	2101      	movs	r1, #1
 8002df8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	223e      	movs	r2, #62	@ 0x3e
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	223f      	movs	r2, #63	@ 0x3f
 8002e06:	2101      	movs	r1, #1
 8002e08:	5499      	strb	r1, [r3, r2]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5499      	strb	r1, [r3, r2]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2241      	movs	r2, #65	@ 0x41
 8002e16:	2101      	movs	r1, #1
 8002e18:	5499      	strb	r1, [r3, r2]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2242      	movs	r2, #66	@ 0x42
 8002e1e:	2101      	movs	r1, #1
 8002e20:	5499      	strb	r1, [r3, r2]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2243      	movs	r2, #67	@ 0x43
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2244      	movs	r2, #68	@ 0x44
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5499      	strb	r1, [r3, r2]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2245      	movs	r2, #69	@ 0x45
 8002e36:	2101      	movs	r1, #1
 8002e38:	5499      	strb	r1, [r3, r2]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2246      	movs	r2, #70	@ 0x46
 8002e3e:	2101      	movs	r1, #1
 8002e40:	5499      	strb	r1, [r3, r2]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2247      	movs	r2, #71	@ 0x47
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	223d      	movs	r2, #61	@ 0x3d
 8002e4e:	2101      	movs	r1, #1
 8002e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	0018      	movs	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	b002      	add	sp, #8
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	46bd      	mov	sp, r7
 8002e68:	b002      	add	sp, #8
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e04a      	b.n	8002f14 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	223d      	movs	r2, #61	@ 0x3d
 8002e82:	5c9b      	ldrb	r3, [r3, r2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223c      	movs	r2, #60	@ 0x3c
 8002e8e:	2100      	movs	r1, #0
 8002e90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f000 f841 	bl	8002f1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	223d      	movs	r2, #61	@ 0x3d
 8002e9e:	2102      	movs	r1, #2
 8002ea0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	0019      	movs	r1, r3
 8002eac:	0010      	movs	r0, r2
 8002eae:	f000 fa73 	bl	8003398 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2248      	movs	r2, #72	@ 0x48
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	223e      	movs	r2, #62	@ 0x3e
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	5499      	strb	r1, [r3, r2]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	223f      	movs	r2, #63	@ 0x3f
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	5499      	strb	r1, [r3, r2]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2240      	movs	r2, #64	@ 0x40
 8002ece:	2101      	movs	r1, #1
 8002ed0:	5499      	strb	r1, [r3, r2]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2241      	movs	r2, #65	@ 0x41
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	5499      	strb	r1, [r3, r2]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2242      	movs	r2, #66	@ 0x42
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2243      	movs	r2, #67	@ 0x43
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2244      	movs	r2, #68	@ 0x44
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2245      	movs	r2, #69	@ 0x45
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	5499      	strb	r1, [r3, r2]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2246      	movs	r2, #70	@ 0x46
 8002efe:	2101      	movs	r1, #1
 8002f00:	5499      	strb	r1, [r3, r2]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2247      	movs	r2, #71	@ 0x47
 8002f06:	2101      	movs	r1, #1
 8002f08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	223d      	movs	r2, #61	@ 0x3d
 8002f0e:	2101      	movs	r1, #1
 8002f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	0018      	movs	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	b002      	add	sp, #8
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f38:	2317      	movs	r3, #23
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	223c      	movs	r2, #60	@ 0x3c
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_OC_ConfigChannel+0x22>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e048      	b.n	8002fe0 <HAL_TIM_OC_ConfigChannel+0xb4>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	223c      	movs	r2, #60	@ 0x3c
 8002f52:	2101      	movs	r1, #1
 8002f54:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b14      	cmp	r3, #20
 8002f5a:	d835      	bhi.n	8002fc8 <HAL_TIM_OC_ConfigChannel+0x9c>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	009a      	lsls	r2, r3, #2
 8002f60:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <HAL_TIM_OC_ConfigChannel+0xbc>)
 8002f62:	18d3      	adds	r3, r2, r3
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 fa95 	bl	80034a0 <TIM_OC1_SetConfig>
      break;
 8002f76:	e02c      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	0011      	movs	r1, r2
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fb0d 	bl	80035a0 <TIM_OC2_SetConfig>
      break;
 8002f86:	e024      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 fb83 	bl	800369c <TIM_OC3_SetConfig>
      break;
 8002f96:	e01c      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fbfd 	bl	80037a0 <TIM_OC4_SetConfig>
      break;
 8002fa6:	e014      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	0011      	movs	r1, r2
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f000 fc59 	bl	8003868 <TIM_OC5_SetConfig>
      break;
 8002fb6:	e00c      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68ba      	ldr	r2, [r7, #8]
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 fcab 	bl	800391c <TIM_OC6_SetConfig>
      break;
 8002fc6:	e004      	b.n	8002fd2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002fc8:	2317      	movs	r3, #23
 8002fca:	18fb      	adds	r3, r7, r3
 8002fcc:	2201      	movs	r2, #1
 8002fce:	701a      	strb	r2, [r3, #0]
      break;
 8002fd0:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	223c      	movs	r2, #60	@ 0x3c
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

  return status;
 8002fda:	2317      	movs	r3, #23
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b006      	add	sp, #24
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	080047ec 	.word	0x080047ec

08002fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2317      	movs	r3, #23
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	223c      	movs	r2, #60	@ 0x3c
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_TIM_PWM_ConfigChannel+0x22>
 800300a:	2302      	movs	r3, #2
 800300c:	e0e5      	b.n	80031da <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	223c      	movs	r2, #60	@ 0x3c
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b14      	cmp	r3, #20
 800301a:	d900      	bls.n	800301e <HAL_TIM_PWM_ConfigChannel+0x32>
 800301c:	e0d1      	b.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	009a      	lsls	r2, r3, #2
 8003022:	4b70      	ldr	r3, [pc, #448]	@ (80031e4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003024:	18d3      	adds	r3, r2, r3
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f000 fa34 	bl	80034a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2108      	movs	r1, #8
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2104      	movs	r1, #4
 8003054:	438a      	bics	r2, r1
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e0af      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fa93 	bl	80035a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699a      	ldr	r2, [r3, #24]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2180      	movs	r1, #128	@ 0x80
 8003086:	0109      	lsls	r1, r1, #4
 8003088:	430a      	orrs	r2, r1
 800308a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4954      	ldr	r1, [pc, #336]	@ (80031e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003098:	400a      	ands	r2, r1
 800309a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6999      	ldr	r1, [r3, #24]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	021a      	lsls	r2, r3, #8
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	619a      	str	r2, [r3, #24]
      break;
 80030b0:	e08c      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	0011      	movs	r1, r2
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 faee 	bl	800369c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69da      	ldr	r2, [r3, #28]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2108      	movs	r1, #8
 80030cc:	430a      	orrs	r2, r1
 80030ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	69da      	ldr	r2, [r3, #28]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2104      	movs	r1, #4
 80030dc:	438a      	bics	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69d9      	ldr	r1, [r3, #28]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691a      	ldr	r2, [r3, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
      break;
 80030f2:	e06b      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	0011      	movs	r1, r2
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fb4f 	bl	80037a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69da      	ldr	r2, [r3, #28]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2180      	movs	r1, #128	@ 0x80
 800310e:	0109      	lsls	r1, r1, #4
 8003110:	430a      	orrs	r2, r1
 8003112:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69da      	ldr	r2, [r3, #28]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4932      	ldr	r1, [pc, #200]	@ (80031e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003120:	400a      	ands	r2, r1
 8003122:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69d9      	ldr	r1, [r3, #28]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	021a      	lsls	r2, r3, #8
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	430a      	orrs	r2, r1
 8003136:	61da      	str	r2, [r3, #28]
      break;
 8003138:	e048      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f000 fb90 	bl	8003868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2108      	movs	r1, #8
 8003154:	430a      	orrs	r2, r1
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2104      	movs	r1, #4
 8003164:	438a      	bics	r2, r1
 8003166:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	430a      	orrs	r2, r1
 8003178:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800317a:	e027      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f000 fbc9 	bl	800391c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2180      	movs	r1, #128	@ 0x80
 8003196:	0109      	lsls	r1, r1, #4
 8003198:	430a      	orrs	r2, r1
 800319a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4910      	ldr	r1, [pc, #64]	@ (80031e8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	021a      	lsls	r2, r3, #8
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80031c0:	e004      	b.n	80031cc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80031c2:	2317      	movs	r3, #23
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
      break;
 80031ca:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	223c      	movs	r2, #60	@ 0x3c
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

  return status;
 80031d4:	2317      	movs	r3, #23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	781b      	ldrb	r3, [r3, #0]
}
 80031da:	0018      	movs	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	b006      	add	sp, #24
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	08004840 	.word	0x08004840
 80031e8:	fffffbff 	.word	0xfffffbff

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	230f      	movs	r3, #15
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	223c      	movs	r2, #60	@ 0x3c
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_TIM_ConfigClockSource+0x20>
 8003208:	2302      	movs	r3, #2
 800320a:	e0bc      	b.n	8003386 <HAL_TIM_ConfigClockSource+0x19a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	223c      	movs	r2, #60	@ 0x3c
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	223d      	movs	r2, #61	@ 0x3d
 8003218:	2102      	movs	r1, #2
 800321a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	4a5a      	ldr	r2, [pc, #360]	@ (8003390 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003228:	4013      	ands	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4a59      	ldr	r2, [pc, #356]	@ (8003394 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	0192      	lsls	r2, r2, #6
 8003244:	4293      	cmp	r3, r2
 8003246:	d040      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0xde>
 8003248:	2280      	movs	r2, #128	@ 0x80
 800324a:	0192      	lsls	r2, r2, #6
 800324c:	4293      	cmp	r3, r2
 800324e:	d900      	bls.n	8003252 <HAL_TIM_ConfigClockSource+0x66>
 8003250:	e088      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 8003252:	2280      	movs	r2, #128	@ 0x80
 8003254:	0152      	lsls	r2, r2, #5
 8003256:	4293      	cmp	r3, r2
 8003258:	d100      	bne.n	800325c <HAL_TIM_ConfigClockSource+0x70>
 800325a:	e088      	b.n	800336e <HAL_TIM_ConfigClockSource+0x182>
 800325c:	2280      	movs	r2, #128	@ 0x80
 800325e:	0152      	lsls	r2, r2, #5
 8003260:	4293      	cmp	r3, r2
 8003262:	d900      	bls.n	8003266 <HAL_TIM_ConfigClockSource+0x7a>
 8003264:	e07e      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 8003266:	2b70      	cmp	r3, #112	@ 0x70
 8003268:	d018      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xb0>
 800326a:	d900      	bls.n	800326e <HAL_TIM_ConfigClockSource+0x82>
 800326c:	e07a      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 800326e:	2b60      	cmp	r3, #96	@ 0x60
 8003270:	d04f      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x126>
 8003272:	d900      	bls.n	8003276 <HAL_TIM_ConfigClockSource+0x8a>
 8003274:	e076      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 8003276:	2b50      	cmp	r3, #80	@ 0x50
 8003278:	d03b      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0x106>
 800327a:	d900      	bls.n	800327e <HAL_TIM_ConfigClockSource+0x92>
 800327c:	e072      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	d057      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0x146>
 8003282:	d900      	bls.n	8003286 <HAL_TIM_ConfigClockSource+0x9a>
 8003284:	e06e      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 8003286:	2b30      	cmp	r3, #48	@ 0x30
 8003288:	d063      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x166>
 800328a:	d86b      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 800328c:	2b20      	cmp	r3, #32
 800328e:	d060      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x166>
 8003290:	d868      	bhi.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
 8003292:	2b00      	cmp	r3, #0
 8003294:	d05d      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x166>
 8003296:	2b10      	cmp	r3, #16
 8003298:	d05b      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x166>
 800329a:	e063      	b.n	8003364 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	f000 fc10 	bl	8003ad0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2277      	movs	r2, #119	@ 0x77
 80032bc:	4313      	orrs	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]
      break;
 80032c8:	e052      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032da:	f000 fbf9 	bl	8003ad0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2180      	movs	r1, #128	@ 0x80
 80032ea:	01c9      	lsls	r1, r1, #7
 80032ec:	430a      	orrs	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
      break;
 80032f0:	e03e      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	001a      	movs	r2, r3
 8003300:	f000 fb6a 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2150      	movs	r1, #80	@ 0x50
 800330a:	0018      	movs	r0, r3
 800330c:	f000 fbc4 	bl	8003a98 <TIM_ITRx_SetConfig>
      break;
 8003310:	e02e      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800331e:	001a      	movs	r2, r3
 8003320:	f000 fb88 	bl	8003a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2160      	movs	r1, #96	@ 0x60
 800332a:	0018      	movs	r0, r3
 800332c:	f000 fbb4 	bl	8003a98 <TIM_ITRx_SetConfig>
      break;
 8003330:	e01e      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	001a      	movs	r2, r3
 8003340:	f000 fb4a 	bl	80039d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2140      	movs	r1, #64	@ 0x40
 800334a:	0018      	movs	r0, r3
 800334c:	f000 fba4 	bl	8003a98 <TIM_ITRx_SetConfig>
      break;
 8003350:	e00e      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f000 fb9b 	bl	8003a98 <TIM_ITRx_SetConfig>
      break;
 8003362:	e005      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003364:	230f      	movs	r3, #15
 8003366:	18fb      	adds	r3, r7, r3
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
      break;
 800336c:	e000      	b.n	8003370 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800336e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	223d      	movs	r2, #61	@ 0x3d
 8003374:	2101      	movs	r1, #1
 8003376:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	223c      	movs	r2, #60	@ 0x3c
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

  return status;
 8003380:	230f      	movs	r3, #15
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	781b      	ldrb	r3, [r3, #0]
}
 8003386:	0018      	movs	r0, r3
 8003388:	46bd      	mov	sp, r7
 800338a:	b004      	add	sp, #16
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	ffceff88 	.word	0xffceff88
 8003394:	ffff00ff 	.word	0xffff00ff

08003398 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a37      	ldr	r2, [pc, #220]	@ (8003488 <TIM_Base_SetConfig+0xf0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d008      	beq.n	80033c2 <TIM_Base_SetConfig+0x2a>
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0x2a>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a33      	ldr	r2, [pc, #204]	@ (800348c <TIM_Base_SetConfig+0xf4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2270      	movs	r2, #112	@ 0x70
 80033c6:	4393      	bics	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003488 <TIM_Base_SetConfig+0xf0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d014      	beq.n	8003406 <TIM_Base_SetConfig+0x6e>
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	05db      	lsls	r3, r3, #23
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d00f      	beq.n	8003406 <TIM_Base_SetConfig+0x6e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a28      	ldr	r2, [pc, #160]	@ (800348c <TIM_Base_SetConfig+0xf4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00b      	beq.n	8003406 <TIM_Base_SetConfig+0x6e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a27      	ldr	r2, [pc, #156]	@ (8003490 <TIM_Base_SetConfig+0xf8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d007      	beq.n	8003406 <TIM_Base_SetConfig+0x6e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a26      	ldr	r2, [pc, #152]	@ (8003494 <TIM_Base_SetConfig+0xfc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d003      	beq.n	8003406 <TIM_Base_SetConfig+0x6e>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a25      	ldr	r2, [pc, #148]	@ (8003498 <TIM_Base_SetConfig+0x100>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d108      	bne.n	8003418 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	4a24      	ldr	r2, [pc, #144]	@ (800349c <TIM_Base_SetConfig+0x104>)
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	4313      	orrs	r3, r2
 8003416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2280      	movs	r2, #128	@ 0x80
 800341c:	4393      	bics	r3, r2
 800341e:	001a      	movs	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a11      	ldr	r2, [pc, #68]	@ (8003488 <TIM_Base_SetConfig+0xf0>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d007      	beq.n	8003456 <TIM_Base_SetConfig+0xbe>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a12      	ldr	r2, [pc, #72]	@ (8003494 <TIM_Base_SetConfig+0xfc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <TIM_Base_SetConfig+0xbe>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a11      	ldr	r2, [pc, #68]	@ (8003498 <TIM_Base_SetConfig+0x100>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d103      	bne.n	800345e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	691a      	ldr	r2, [r3, #16]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2201      	movs	r2, #1
 800346a:	4013      	ands	r3, r2
 800346c:	2b01      	cmp	r3, #1
 800346e:	d106      	bne.n	800347e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	2201      	movs	r2, #1
 8003476:	4393      	bics	r3, r2
 8003478:	001a      	movs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]
  }
}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	46bd      	mov	sp, r7
 8003482:	b004      	add	sp, #16
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40002000 	.word	0x40002000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800
 800349c:	fffffcff 	.word	0xfffffcff

080034a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	2201      	movs	r2, #1
 80034b6:	4393      	bics	r3, r2
 80034b8:	001a      	movs	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4a2e      	ldr	r2, [pc, #184]	@ (8003588 <TIM_OC1_SetConfig+0xe8>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2203      	movs	r2, #3
 80034d6:	4393      	bics	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2202      	movs	r2, #2
 80034e8:	4393      	bics	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a24      	ldr	r2, [pc, #144]	@ (800358c <TIM_OC1_SetConfig+0xec>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_OC1_SetConfig+0x6e>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a23      	ldr	r2, [pc, #140]	@ (8003590 <TIM_OC1_SetConfig+0xf0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_OC1_SetConfig+0x6e>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a22      	ldr	r2, [pc, #136]	@ (8003594 <TIM_OC1_SetConfig+0xf4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10c      	bne.n	8003528 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2208      	movs	r2, #8
 8003512:	4393      	bics	r3, r2
 8003514:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2204      	movs	r2, #4
 8003524:	4393      	bics	r3, r2
 8003526:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a18      	ldr	r2, [pc, #96]	@ (800358c <TIM_OC1_SetConfig+0xec>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d007      	beq.n	8003540 <TIM_OC1_SetConfig+0xa0>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a17      	ldr	r2, [pc, #92]	@ (8003590 <TIM_OC1_SetConfig+0xf0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d003      	beq.n	8003540 <TIM_OC1_SetConfig+0xa0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a16      	ldr	r2, [pc, #88]	@ (8003594 <TIM_OC1_SetConfig+0xf4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d111      	bne.n	8003564 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <TIM_OC1_SetConfig+0xf8>)
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	4a14      	ldr	r2, [pc, #80]	@ (800359c <TIM_OC1_SetConfig+0xfc>)
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b006      	add	sp, #24
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			@ (mov r8, r8)
 8003588:	fffeff8f 	.word	0xfffeff8f
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40014400 	.word	0x40014400
 8003594:	40014800 	.word	0x40014800
 8003598:	fffffeff 	.word	0xfffffeff
 800359c:	fffffdff 	.word	0xfffffdff

080035a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	2210      	movs	r2, #16
 80035b6:	4393      	bics	r3, r2
 80035b8:	001a      	movs	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003680 <TIM_OC2_SetConfig+0xe0>)
 80035ce:	4013      	ands	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003684 <TIM_OC2_SetConfig+0xe4>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2220      	movs	r2, #32
 80035ea:	4393      	bics	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a22      	ldr	r2, [pc, #136]	@ (8003688 <TIM_OC2_SetConfig+0xe8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2280      	movs	r2, #128	@ 0x80
 8003606:	4393      	bics	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	2240      	movs	r2, #64	@ 0x40
 800361a:	4393      	bics	r3, r2
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a19      	ldr	r2, [pc, #100]	@ (8003688 <TIM_OC2_SetConfig+0xe8>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_OC2_SetConfig+0x96>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a18      	ldr	r2, [pc, #96]	@ (800368c <TIM_OC2_SetConfig+0xec>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC2_SetConfig+0x96>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a17      	ldr	r2, [pc, #92]	@ (8003690 <TIM_OC2_SetConfig+0xf0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d113      	bne.n	800365e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4a16      	ldr	r2, [pc, #88]	@ (8003694 <TIM_OC2_SetConfig+0xf4>)
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4a15      	ldr	r2, [pc, #84]	@ (8003698 <TIM_OC2_SetConfig+0xf8>)
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4313      	orrs	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	621a      	str	r2, [r3, #32]
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b006      	add	sp, #24
 800367e:	bd80      	pop	{r7, pc}
 8003680:	feff8fff 	.word	0xfeff8fff
 8003684:	fffffcff 	.word	0xfffffcff
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	fffffbff 	.word	0xfffffbff
 8003698:	fffff7ff 	.word	0xfffff7ff

0800369c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	4a31      	ldr	r2, [pc, #196]	@ (8003778 <TIM_OC3_SetConfig+0xdc>)
 80036b2:	401a      	ands	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <TIM_OC3_SetConfig+0xe0>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2203      	movs	r2, #3
 80036d0:	4393      	bics	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68fa      	ldr	r2, [r7, #12]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <TIM_OC3_SetConfig+0xe4>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	021b      	lsls	r3, r3, #8
 80036ec:	697a      	ldr	r2, [r7, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a23      	ldr	r2, [pc, #140]	@ (8003784 <TIM_OC3_SetConfig+0xe8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10d      	bne.n	8003716 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	4a22      	ldr	r2, [pc, #136]	@ (8003788 <TIM_OC3_SetConfig+0xec>)
 80036fe:	4013      	ands	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	4a1e      	ldr	r2, [pc, #120]	@ (800378c <TIM_OC3_SetConfig+0xf0>)
 8003712:	4013      	ands	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a1a      	ldr	r2, [pc, #104]	@ (8003784 <TIM_OC3_SetConfig+0xe8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC3_SetConfig+0x92>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1b      	ldr	r2, [pc, #108]	@ (8003790 <TIM_OC3_SetConfig+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC3_SetConfig+0x92>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <TIM_OC3_SetConfig+0xf8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4a19      	ldr	r2, [pc, #100]	@ (8003798 <TIM_OC3_SetConfig+0xfc>)
 8003732:	4013      	ands	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4a18      	ldr	r2, [pc, #96]	@ (800379c <TIM_OC3_SetConfig+0x100>)
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4313      	orrs	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	621a      	str	r2, [r3, #32]
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	fffffeff 	.word	0xfffffeff
 800377c:	fffeff8f 	.word	0xfffeff8f
 8003780:	fffffdff 	.word	0xfffffdff
 8003784:	40012c00 	.word	0x40012c00
 8003788:	fffff7ff 	.word	0xfffff7ff
 800378c:	fffffbff 	.word	0xfffffbff
 8003790:	40014400 	.word	0x40014400
 8003794:	40014800 	.word	0x40014800
 8003798:	ffffefff 	.word	0xffffefff
 800379c:	ffffdfff 	.word	0xffffdfff

080037a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	4a24      	ldr	r2, [pc, #144]	@ (8003848 <TIM_OC4_SetConfig+0xa8>)
 80037b6:	401a      	ands	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69db      	ldr	r3, [r3, #28]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a20      	ldr	r2, [pc, #128]	@ (800384c <TIM_OC4_SetConfig+0xac>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003850 <TIM_OC4_SetConfig+0xb0>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	021b      	lsls	r3, r3, #8
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003854 <TIM_OC4_SetConfig+0xb4>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	031b      	lsls	r3, r3, #12
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a17      	ldr	r2, [pc, #92]	@ (8003858 <TIM_OC4_SetConfig+0xb8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d007      	beq.n	8003810 <TIM_OC4_SetConfig+0x70>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a16      	ldr	r2, [pc, #88]	@ (800385c <TIM_OC4_SetConfig+0xbc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_OC4_SetConfig+0x70>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <TIM_OC4_SetConfig+0xc0>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d109      	bne.n	8003824 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <TIM_OC4_SetConfig+0xc4>)
 8003814:	4013      	ands	r3, r2
 8003816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	4313      	orrs	r3, r2
 8003822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	621a      	str	r2, [r3, #32]
}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	46bd      	mov	sp, r7
 8003842:	b006      	add	sp, #24
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	ffffefff 	.word	0xffffefff
 800384c:	feff8fff 	.word	0xfeff8fff
 8003850:	fffffcff 	.word	0xfffffcff
 8003854:	ffffdfff 	.word	0xffffdfff
 8003858:	40012c00 	.word	0x40012c00
 800385c:	40014400 	.word	0x40014400
 8003860:	40014800 	.word	0x40014800
 8003864:	ffffbfff 	.word	0xffffbfff

08003868 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	4a21      	ldr	r2, [pc, #132]	@ (8003904 <TIM_OC5_SetConfig+0x9c>)
 800387e:	401a      	ands	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a1d      	ldr	r2, [pc, #116]	@ (8003908 <TIM_OC5_SetConfig+0xa0>)
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4a19      	ldr	r2, [pc, #100]	@ (800390c <TIM_OC5_SetConfig+0xa4>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	041b      	lsls	r3, r3, #16
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a15      	ldr	r2, [pc, #84]	@ (8003910 <TIM_OC5_SetConfig+0xa8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d007      	beq.n	80038ce <TIM_OC5_SetConfig+0x66>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a14      	ldr	r2, [pc, #80]	@ (8003914 <TIM_OC5_SetConfig+0xac>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <TIM_OC5_SetConfig+0x66>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <TIM_OC5_SetConfig+0xb0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d109      	bne.n	80038e2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003904 <TIM_OC5_SetConfig+0x9c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	621a      	str	r2, [r3, #32]
}
 80038fc:	46c0      	nop			@ (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b006      	add	sp, #24
 8003902:	bd80      	pop	{r7, pc}
 8003904:	fffeffff 	.word	0xfffeffff
 8003908:	fffeff8f 	.word	0xfffeff8f
 800390c:	fffdffff 	.word	0xfffdffff
 8003910:	40012c00 	.word	0x40012c00
 8003914:	40014400 	.word	0x40014400
 8003918:	40014800 	.word	0x40014800

0800391c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a22      	ldr	r2, [pc, #136]	@ (80039bc <TIM_OC6_SetConfig+0xa0>)
 8003932:	401a      	ands	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	4a1e      	ldr	r2, [pc, #120]	@ (80039c0 <TIM_OC6_SetConfig+0xa4>)
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4313      	orrs	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <TIM_OC6_SetConfig+0xa8>)
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	051b      	lsls	r3, r3, #20
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4313      	orrs	r3, r2
 800396a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a16      	ldr	r2, [pc, #88]	@ (80039c8 <TIM_OC6_SetConfig+0xac>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d007      	beq.n	8003984 <TIM_OC6_SetConfig+0x68>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a15      	ldr	r2, [pc, #84]	@ (80039cc <TIM_OC6_SetConfig+0xb0>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d003      	beq.n	8003984 <TIM_OC6_SetConfig+0x68>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <TIM_OC6_SetConfig+0xb4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d109      	bne.n	8003998 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	4a13      	ldr	r2, [pc, #76]	@ (80039d4 <TIM_OC6_SetConfig+0xb8>)
 8003988:	4013      	ands	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	029b      	lsls	r3, r3, #10
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685a      	ldr	r2, [r3, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	621a      	str	r2, [r3, #32]
}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	46bd      	mov	sp, r7
 80039b6:	b006      	add	sp, #24
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	46c0      	nop			@ (mov r8, r8)
 80039bc:	ffefffff 	.word	0xffefffff
 80039c0:	feff8fff 	.word	0xfeff8fff
 80039c4:	ffdfffff 	.word	0xffdfffff
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	fffbffff 	.word	0xfffbffff

080039d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4393      	bics	r3, r2
 80039f2:	001a      	movs	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	22f0      	movs	r2, #240	@ 0xf0
 8003a02:	4393      	bics	r3, r2
 8003a04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	220a      	movs	r2, #10
 8003a14:	4393      	bics	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b006      	add	sp, #24
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	2210      	movs	r2, #16
 8003a4c:	4393      	bics	r3, r2
 8003a4e:	001a      	movs	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a94 <TIM_TI2_ConfigInputStage+0x60>)
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	031b      	lsls	r3, r3, #12
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	22a0      	movs	r2, #160	@ 0xa0
 8003a70:	4393      	bics	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b006      	add	sp, #24
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	ffff0fff 	.word	0xffff0fff

08003a98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <TIM_ITRx_SetConfig+0x34>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	609a      	str	r2, [r3, #8]
}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b004      	add	sp, #16
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	ffcfff8f 	.word	0xffcfff8f

08003ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
 8003adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <TIM_ETR_SetConfig+0x3c>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	021a      	lsls	r2, r3, #8
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	46bd      	mov	sp, r7
 8003b08:	b006      	add	sp, #24
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	ffff00ff 	.word	0xffff00ff

08003b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	223c      	movs	r2, #60	@ 0x3c
 8003b1e:	5c9b      	ldrb	r3, [r3, r2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e050      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	223c      	movs	r2, #60	@ 0x3c
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	223d      	movs	r2, #61	@ 0x3d
 8003b34:	2102      	movs	r1, #2
 8003b36:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d108      	bne.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a20      	ldr	r2, [pc, #128]	@ (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2270      	movs	r2, #112	@ 0x70
 8003b68:	4393      	bics	r3, r2
 8003b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a14      	ldr	r2, [pc, #80]	@ (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00a      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	2380      	movs	r3, #128	@ 0x80
 8003b8e:	05db      	lsls	r3, r3, #23
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2280      	movs	r2, #128	@ 0x80
 8003ba2:	4393      	bics	r3, r2
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	223d      	movs	r2, #61	@ 0x3d
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	223c      	movs	r2, #60	@ 0x3c
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	0018      	movs	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	b004      	add	sp, #16
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	ff0fffff 	.word	0xff0fffff
 8003bdc:	40000400 	.word	0x40000400

08003be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	223c      	movs	r2, #60	@ 0x3c
 8003bf2:	5c9b      	ldrb	r3, [r3, r2]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e06f      	b.n	8003cdc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	223c      	movs	r2, #60	@ 0x3c
 8003c00:	2101      	movs	r1, #1
 8003c02:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	22ff      	movs	r2, #255	@ 0xff
 8003c08:	4393      	bics	r3, r2
 8003c0a:	001a      	movs	r2, r3
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a33      	ldr	r2, [pc, #204]	@ (8003ce4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003c18:	401a      	ands	r2, r3
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a30      	ldr	r2, [pc, #192]	@ (8003ce8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003c26:	401a      	ands	r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4a2e      	ldr	r2, [pc, #184]	@ (8003cec <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003c34:	401a      	ands	r2, r3
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4a2b      	ldr	r2, [pc, #172]	@ (8003cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003c42:	401a      	ands	r2, r3
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a29      	ldr	r2, [pc, #164]	@ (8003cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003c50:	401a      	ands	r2, r3
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	4a26      	ldr	r2, [pc, #152]	@ (8003cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003c5e:	401a      	ands	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a24      	ldr	r2, [pc, #144]	@ (8003cfc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	041b      	lsls	r3, r3, #16
 8003c74:	4313      	orrs	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	@ (8003d00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d11c      	bne.n	8003cca <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003c94:	401a      	ands	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9a:	051b      	lsls	r3, r3, #20
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d0c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a17      	ldr	r2, [pc, #92]	@ (8003d10 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	4a15      	ldr	r2, [pc, #84]	@ (8003d14 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	223c      	movs	r2, #60	@ 0x3c
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b004      	add	sp, #16
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	fffffcff 	.word	0xfffffcff
 8003ce8:	fffffbff 	.word	0xfffffbff
 8003cec:	fffff7ff 	.word	0xfffff7ff
 8003cf0:	ffffefff 	.word	0xffffefff
 8003cf4:	ffffdfff 	.word	0xffffdfff
 8003cf8:	ffffbfff 	.word	0xffffbfff
 8003cfc:	fff0ffff 	.word	0xfff0ffff
 8003d00:	efffffff 	.word	0xefffffff
 8003d04:	40012c00 	.word	0x40012c00
 8003d08:	ff0fffff 	.word	0xff0fffff
 8003d0c:	feffffff 	.word	0xfeffffff
 8003d10:	fdffffff 	.word	0xfdffffff
 8003d14:	dfffffff 	.word	0xdfffffff

08003d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e046      	b.n	8003db8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2288      	movs	r2, #136	@ 0x88
 8003d2e:	589b      	ldr	r3, [r3, r2]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d107      	bne.n	8003d44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2284      	movs	r2, #132	@ 0x84
 8003d38:	2100      	movs	r1, #0
 8003d3a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7fc ffa0 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2288      	movs	r2, #136	@ 0x88
 8003d48:	2124      	movs	r1, #36	@ 0x24
 8003d4a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2101      	movs	r1, #1
 8003d58:	438a      	bics	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 faa4 	bl	80042b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f000 f828 	bl	8003dc4 <UART_SetConfig>
 8003d74:	0003      	movs	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e01c      	b.n	8003db8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	490d      	ldr	r1, [pc, #52]	@ (8003dc0 <HAL_UART_Init+0xa8>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	212a      	movs	r1, #42	@ 0x2a
 8003d9a:	438a      	bics	r2, r1
 8003d9c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	430a      	orrs	r2, r1
 8003dac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 fb33 	bl	800441c <UART_CheckIdleState>
 8003db6:	0003      	movs	r3, r0
}
 8003db8:	0018      	movs	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	ffffb7ff 	.word	0xffffb7ff

08003dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b090      	sub	sp, #64	@ 0x40
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dcc:	231a      	movs	r3, #26
 8003dce:	2220      	movs	r2, #32
 8003dd0:	189b      	adds	r3, r3, r2
 8003dd2:	19db      	adds	r3, r3, r7
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	431a      	orrs	r2, r3
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	431a      	orrs	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	69db      	ldr	r3, [r3, #28]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4ac4      	ldr	r2, [pc, #784]	@ (8004108 <UART_SetConfig+0x344>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e02:	430b      	orrs	r3, r1
 8003e04:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4abf      	ldr	r2, [pc, #764]	@ (800410c <UART_SetConfig+0x348>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0018      	movs	r0, r3
 8003e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e14:	68d9      	ldr	r1, [r3, #12]
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	0003      	movs	r3, r0
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4ab9      	ldr	r2, [pc, #740]	@ (8004110 <UART_SetConfig+0x34c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003e36:	4313      	orrs	r3, r2
 8003e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	4ab4      	ldr	r2, [pc, #720]	@ (8004114 <UART_SetConfig+0x350>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e56:	220f      	movs	r2, #15
 8003e58:	4393      	bics	r3, r2
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	0003      	movs	r3, r0
 8003e66:	430b      	orrs	r3, r1
 8003e68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4aaa      	ldr	r2, [pc, #680]	@ (8004118 <UART_SetConfig+0x354>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d131      	bne.n	8003ed8 <UART_SetConfig+0x114>
 8003e74:	4ba9      	ldr	r3, [pc, #676]	@ (800411c <UART_SetConfig+0x358>)
 8003e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e78:	2203      	movs	r2, #3
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d01d      	beq.n	8003ebc <UART_SetConfig+0xf8>
 8003e80:	d823      	bhi.n	8003eca <UART_SetConfig+0x106>
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d00c      	beq.n	8003ea0 <UART_SetConfig+0xdc>
 8003e86:	d820      	bhi.n	8003eca <UART_SetConfig+0x106>
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <UART_SetConfig+0xce>
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d00e      	beq.n	8003eae <UART_SetConfig+0xea>
 8003e90:	e01b      	b.n	8003eca <UART_SetConfig+0x106>
 8003e92:	231b      	movs	r3, #27
 8003e94:	2220      	movs	r2, #32
 8003e96:	189b      	adds	r3, r3, r2
 8003e98:	19db      	adds	r3, r3, r7
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	e071      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003ea0:	231b      	movs	r3, #27
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	19db      	adds	r3, r3, r7
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e06a      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003eae:	231b      	movs	r3, #27
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	e063      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003ebc:	231b      	movs	r3, #27
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	189b      	adds	r3, r3, r2
 8003ec2:	19db      	adds	r3, r3, r7
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e05c      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003eca:	231b      	movs	r3, #27
 8003ecc:	2220      	movs	r2, #32
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	19db      	adds	r3, r3, r7
 8003ed2:	2210      	movs	r2, #16
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	e055      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a90      	ldr	r2, [pc, #576]	@ (8004120 <UART_SetConfig+0x35c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d106      	bne.n	8003ef0 <UART_SetConfig+0x12c>
 8003ee2:	231b      	movs	r3, #27
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	19db      	adds	r3, r3, r7
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
 8003eee:	e049      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a86      	ldr	r2, [pc, #536]	@ (8004110 <UART_SetConfig+0x34c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d13e      	bne.n	8003f78 <UART_SetConfig+0x1b4>
 8003efa:	4b88      	ldr	r3, [pc, #544]	@ (800411c <UART_SetConfig+0x358>)
 8003efc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003efe:	23c0      	movs	r3, #192	@ 0xc0
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	4013      	ands	r3, r2
 8003f04:	22c0      	movs	r2, #192	@ 0xc0
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d027      	beq.n	8003f5c <UART_SetConfig+0x198>
 8003f0c:	22c0      	movs	r2, #192	@ 0xc0
 8003f0e:	0112      	lsls	r2, r2, #4
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d82a      	bhi.n	8003f6a <UART_SetConfig+0x1a6>
 8003f14:	2280      	movs	r2, #128	@ 0x80
 8003f16:	0112      	lsls	r2, r2, #4
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d011      	beq.n	8003f40 <UART_SetConfig+0x17c>
 8003f1c:	2280      	movs	r2, #128	@ 0x80
 8003f1e:	0112      	lsls	r2, r2, #4
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d822      	bhi.n	8003f6a <UART_SetConfig+0x1a6>
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d004      	beq.n	8003f32 <UART_SetConfig+0x16e>
 8003f28:	2280      	movs	r2, #128	@ 0x80
 8003f2a:	00d2      	lsls	r2, r2, #3
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <UART_SetConfig+0x18a>
 8003f30:	e01b      	b.n	8003f6a <UART_SetConfig+0x1a6>
 8003f32:	231b      	movs	r3, #27
 8003f34:	2220      	movs	r2, #32
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e021      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f40:	231b      	movs	r3, #27
 8003f42:	2220      	movs	r2, #32
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	2202      	movs	r2, #2
 8003f4a:	701a      	strb	r2, [r3, #0]
 8003f4c:	e01a      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f4e:	231b      	movs	r3, #27
 8003f50:	2220      	movs	r2, #32
 8003f52:	189b      	adds	r3, r3, r2
 8003f54:	19db      	adds	r3, r3, r7
 8003f56:	2204      	movs	r2, #4
 8003f58:	701a      	strb	r2, [r3, #0]
 8003f5a:	e013      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f5c:	231b      	movs	r3, #27
 8003f5e:	2220      	movs	r2, #32
 8003f60:	189b      	adds	r3, r3, r2
 8003f62:	19db      	adds	r3, r3, r7
 8003f64:	2208      	movs	r2, #8
 8003f66:	701a      	strb	r2, [r3, #0]
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f6a:	231b      	movs	r3, #27
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	189b      	adds	r3, r3, r2
 8003f70:	19db      	adds	r3, r3, r7
 8003f72:	2210      	movs	r2, #16
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	e005      	b.n	8003f84 <UART_SetConfig+0x1c0>
 8003f78:	231b      	movs	r3, #27
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	2210      	movs	r2, #16
 8003f82:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a61      	ldr	r2, [pc, #388]	@ (8004110 <UART_SetConfig+0x34c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d000      	beq.n	8003f90 <UART_SetConfig+0x1cc>
 8003f8e:	e092      	b.n	80040b6 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f90:	231b      	movs	r3, #27
 8003f92:	2220      	movs	r2, #32
 8003f94:	189b      	adds	r3, r3, r2
 8003f96:	19db      	adds	r3, r3, r7
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d015      	beq.n	8003fca <UART_SetConfig+0x206>
 8003f9e:	dc18      	bgt.n	8003fd2 <UART_SetConfig+0x20e>
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d00d      	beq.n	8003fc0 <UART_SetConfig+0x1fc>
 8003fa4:	dc15      	bgt.n	8003fd2 <UART_SetConfig+0x20e>
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <UART_SetConfig+0x1ec>
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d005      	beq.n	8003fba <UART_SetConfig+0x1f6>
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe fd14 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fb8:	e014      	b.n	8003fe4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fba:	4b5a      	ldr	r3, [pc, #360]	@ (8004124 <UART_SetConfig+0x360>)
 8003fbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fbe:	e011      	b.n	8003fe4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc0:	f7fe fc80 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8003fc4:	0003      	movs	r3, r0
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fc8:	e00c      	b.n	8003fe4 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	2380      	movs	r3, #128	@ 0x80
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003fd0:	e008      	b.n	8003fe4 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8003fd6:	231a      	movs	r3, #26
 8003fd8:	2220      	movs	r2, #32
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	19db      	adds	r3, r3, r7
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
        break;
 8003fe2:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d100      	bne.n	8003fec <UART_SetConfig+0x228>
 8003fea:	e147      	b.n	800427c <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8004128 <UART_SetConfig+0x364>)
 8003ff2:	0052      	lsls	r2, r2, #1
 8003ff4:	5ad3      	ldrh	r3, [r2, r3]
 8003ff6:	0019      	movs	r1, r3
 8003ff8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003ffa:	f7fc f883 	bl	8000104 <__udivsi3>
 8003ffe:	0003      	movs	r3, r0
 8004000:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	0013      	movs	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	189b      	adds	r3, r3, r2
 800400c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800400e:	429a      	cmp	r2, r3
 8004010:	d305      	bcc.n	800401e <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800401a:	429a      	cmp	r2, r3
 800401c:	d906      	bls.n	800402c <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800401e:	231a      	movs	r3, #26
 8004020:	2220      	movs	r2, #32
 8004022:	189b      	adds	r3, r3, r2
 8004024:	19db      	adds	r3, r3, r7
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e127      	b.n	800427c <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800402c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	2300      	movs	r3, #0
 8004032:	61fb      	str	r3, [r7, #28]
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004038:	4b3b      	ldr	r3, [pc, #236]	@ (8004128 <UART_SetConfig+0x364>)
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	5ad3      	ldrh	r3, [r2, r3]
 800403e:	613b      	str	r3, [r7, #16]
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	69b8      	ldr	r0, [r7, #24]
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	f7fc f8e6 	bl	800021c <__aeabi_uldivmod>
 8004050:	0002      	movs	r2, r0
 8004052:	000b      	movs	r3, r1
 8004054:	0e11      	lsrs	r1, r2, #24
 8004056:	021d      	lsls	r5, r3, #8
 8004058:	430d      	orrs	r5, r1
 800405a:	0214      	lsls	r4, r2, #8
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	085b      	lsrs	r3, r3, #1
 8004062:	60bb      	str	r3, [r7, #8]
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68b8      	ldr	r0, [r7, #8]
 800406a:	68f9      	ldr	r1, [r7, #12]
 800406c:	1900      	adds	r0, r0, r4
 800406e:	4169      	adcs	r1, r5
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f7fc f8cd 	bl	800021c <__aeabi_uldivmod>
 8004082:	0002      	movs	r2, r0
 8004084:	000b      	movs	r3, r1
 8004086:	0013      	movs	r3, r2
 8004088:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800408a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800408c:	23c0      	movs	r3, #192	@ 0xc0
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	429a      	cmp	r2, r3
 8004092:	d309      	bcc.n	80040a8 <UART_SetConfig+0x2e4>
 8004094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004096:	2380      	movs	r3, #128	@ 0x80
 8004098:	035b      	lsls	r3, r3, #13
 800409a:	429a      	cmp	r2, r3
 800409c:	d204      	bcs.n	80040a8 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800409e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a4:	60da      	str	r2, [r3, #12]
 80040a6:	e0e9      	b.n	800427c <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 80040a8:	231a      	movs	r3, #26
 80040aa:	2220      	movs	r2, #32
 80040ac:	189b      	adds	r3, r3, r2
 80040ae:	19db      	adds	r3, r3, r7
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e0e2      	b.n	800427c <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	429a      	cmp	r2, r3
 80040c0:	d000      	beq.n	80040c4 <UART_SetConfig+0x300>
 80040c2:	e083      	b.n	80041cc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80040c4:	231b      	movs	r3, #27
 80040c6:	2220      	movs	r2, #32
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d015      	beq.n	80040fe <UART_SetConfig+0x33a>
 80040d2:	dc2b      	bgt.n	800412c <UART_SetConfig+0x368>
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d00d      	beq.n	80040f4 <UART_SetConfig+0x330>
 80040d8:	dc28      	bgt.n	800412c <UART_SetConfig+0x368>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <UART_SetConfig+0x320>
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d005      	beq.n	80040ee <UART_SetConfig+0x32a>
 80040e2:	e023      	b.n	800412c <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe fc7a 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 80040e8:	0003      	movs	r3, r0
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040ec:	e027      	b.n	800413e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <UART_SetConfig+0x360>)
 80040f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040f2:	e024      	b.n	800413e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f4:	f7fe fbe6 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 80040f8:	0003      	movs	r3, r0
 80040fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80040fc:	e01f      	b.n	800413e <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	2380      	movs	r3, #128	@ 0x80
 8004100:	021b      	lsls	r3, r3, #8
 8004102:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004104:	e01b      	b.n	800413e <UART_SetConfig+0x37a>
 8004106:	46c0      	nop			@ (mov r8, r8)
 8004108:	cfff69f3 	.word	0xcfff69f3
 800410c:	ffffcfff 	.word	0xffffcfff
 8004110:	40008000 	.word	0x40008000
 8004114:	11fff4ff 	.word	0x11fff4ff
 8004118:	40013800 	.word	0x40013800
 800411c:	40021000 	.word	0x40021000
 8004120:	40004400 	.word	0x40004400
 8004124:	00f42400 	.word	0x00f42400
 8004128:	08004894 	.word	0x08004894
      default:
        pclk = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004130:	231a      	movs	r3, #26
 8004132:	2220      	movs	r2, #32
 8004134:	189b      	adds	r3, r3, r2
 8004136:	19db      	adds	r3, r3, r7
 8004138:	2201      	movs	r2, #1
 800413a:	701a      	strb	r2, [r3, #0]
        break;
 800413c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800413e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	d100      	bne.n	8004146 <UART_SetConfig+0x382>
 8004144:	e09a      	b.n	800427c <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004148:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800414a:	4b58      	ldr	r3, [pc, #352]	@ (80042ac <UART_SetConfig+0x4e8>)
 800414c:	0052      	lsls	r2, r2, #1
 800414e:	5ad3      	ldrh	r3, [r2, r3]
 8004150:	0019      	movs	r1, r3
 8004152:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004154:	f7fb ffd6 	bl	8000104 <__udivsi3>
 8004158:	0003      	movs	r3, r0
 800415a:	005a      	lsls	r2, r3, #1
 800415c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	085b      	lsrs	r3, r3, #1
 8004162:	18d2      	adds	r2, r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	0019      	movs	r1, r3
 800416a:	0010      	movs	r0, r2
 800416c:	f7fb ffca 	bl	8000104 <__udivsi3>
 8004170:	0003      	movs	r3, r0
 8004172:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	2b0f      	cmp	r3, #15
 8004178:	d921      	bls.n	80041be <UART_SetConfig+0x3fa>
 800417a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800417c:	2380      	movs	r3, #128	@ 0x80
 800417e:	025b      	lsls	r3, r3, #9
 8004180:	429a      	cmp	r2, r3
 8004182:	d21c      	bcs.n	80041be <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	b29a      	uxth	r2, r3
 8004188:	200e      	movs	r0, #14
 800418a:	2420      	movs	r4, #32
 800418c:	1903      	adds	r3, r0, r4
 800418e:	19db      	adds	r3, r3, r7
 8004190:	210f      	movs	r1, #15
 8004192:	438a      	bics	r2, r1
 8004194:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	2207      	movs	r2, #7
 800419e:	4013      	ands	r3, r2
 80041a0:	b299      	uxth	r1, r3
 80041a2:	1903      	adds	r3, r0, r4
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	1902      	adds	r2, r0, r4
 80041a8:	19d2      	adds	r2, r2, r7
 80041aa:	8812      	ldrh	r2, [r2, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1902      	adds	r2, r0, r4
 80041b6:	19d2      	adds	r2, r2, r7
 80041b8:	8812      	ldrh	r2, [r2, #0]
 80041ba:	60da      	str	r2, [r3, #12]
 80041bc:	e05e      	b.n	800427c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 80041be:	231a      	movs	r3, #26
 80041c0:	2220      	movs	r2, #32
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	19db      	adds	r3, r3, r7
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e057      	b.n	800427c <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041cc:	231b      	movs	r3, #27
 80041ce:	2220      	movs	r2, #32
 80041d0:	189b      	adds	r3, r3, r2
 80041d2:	19db      	adds	r3, r3, r7
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b08      	cmp	r3, #8
 80041d8:	d015      	beq.n	8004206 <UART_SetConfig+0x442>
 80041da:	dc18      	bgt.n	800420e <UART_SetConfig+0x44a>
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d00d      	beq.n	80041fc <UART_SetConfig+0x438>
 80041e0:	dc15      	bgt.n	800420e <UART_SetConfig+0x44a>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <UART_SetConfig+0x428>
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d005      	beq.n	80041f6 <UART_SetConfig+0x432>
 80041ea:	e010      	b.n	800420e <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7fe fbf6 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 80041f0:	0003      	movs	r3, r0
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041f4:	e014      	b.n	8004220 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041f6:	4b2e      	ldr	r3, [pc, #184]	@ (80042b0 <UART_SetConfig+0x4ec>)
 80041f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80041fa:	e011      	b.n	8004220 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041fc:	f7fe fb62 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8004200:	0003      	movs	r3, r0
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004204:	e00c      	b.n	8004220 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004206:	2380      	movs	r3, #128	@ 0x80
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800420c:	e008      	b.n	8004220 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800420e:	2300      	movs	r3, #0
 8004210:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004212:	231a      	movs	r3, #26
 8004214:	2220      	movs	r2, #32
 8004216:	189b      	adds	r3, r3, r2
 8004218:	19db      	adds	r3, r3, r7
 800421a:	2201      	movs	r2, #1
 800421c:	701a      	strb	r2, [r3, #0]
        break;
 800421e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02a      	beq.n	800427c <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <UART_SetConfig+0x4e8>)
 800422c:	0052      	lsls	r2, r2, #1
 800422e:	5ad3      	ldrh	r3, [r2, r3]
 8004230:	0019      	movs	r1, r3
 8004232:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004234:	f7fb ff66 	bl	8000104 <__udivsi3>
 8004238:	0003      	movs	r3, r0
 800423a:	001a      	movs	r2, r3
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	085b      	lsrs	r3, r3, #1
 8004242:	18d2      	adds	r2, r2, r3
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0019      	movs	r1, r3
 800424a:	0010      	movs	r0, r2
 800424c:	f7fb ff5a 	bl	8000104 <__udivsi3>
 8004250:	0003      	movs	r3, r0
 8004252:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	2b0f      	cmp	r3, #15
 8004258:	d90a      	bls.n	8004270 <UART_SetConfig+0x4ac>
 800425a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	025b      	lsls	r3, r3, #9
 8004260:	429a      	cmp	r2, r3
 8004262:	d205      	bcs.n	8004270 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004266:	b29a      	uxth	r2, r3
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	e005      	b.n	800427c <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004270:	231a      	movs	r3, #26
 8004272:	2220      	movs	r2, #32
 8004274:	189b      	adds	r3, r3, r2
 8004276:	19db      	adds	r3, r3, r7
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	226a      	movs	r2, #106	@ 0x6a
 8004280:	2101      	movs	r1, #1
 8004282:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004286:	2268      	movs	r2, #104	@ 0x68
 8004288:	2101      	movs	r1, #1
 800428a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800428c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428e:	2200      	movs	r2, #0
 8004290:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	2200      	movs	r2, #0
 8004296:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004298:	231a      	movs	r3, #26
 800429a:	2220      	movs	r2, #32
 800429c:	189b      	adds	r3, r3, r2
 800429e:	19db      	adds	r3, r3, r7
 80042a0:	781b      	ldrb	r3, [r3, #0]
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b010      	add	sp, #64	@ 0x40
 80042a8:	bdb0      	pop	{r4, r5, r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	08004894 	.word	0x08004894
 80042b0:	00f42400 	.word	0x00f42400

080042b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c0:	2208      	movs	r2, #8
 80042c2:	4013      	ands	r3, r2
 80042c4:	d00b      	beq.n	80042de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a4a      	ldr	r2, [pc, #296]	@ (80043f8 <UART_AdvFeatureConfig+0x144>)
 80042ce:	4013      	ands	r3, r2
 80042d0:	0019      	movs	r1, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	430a      	orrs	r2, r1
 80042dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	2201      	movs	r2, #1
 80042e4:	4013      	ands	r3, r2
 80042e6:	d00b      	beq.n	8004300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	4a43      	ldr	r2, [pc, #268]	@ (80043fc <UART_AdvFeatureConfig+0x148>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	0019      	movs	r1, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004304:	2202      	movs	r2, #2
 8004306:	4013      	ands	r3, r2
 8004308:	d00b      	beq.n	8004322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a3b      	ldr	r2, [pc, #236]	@ (8004400 <UART_AdvFeatureConfig+0x14c>)
 8004312:	4013      	ands	r3, r2
 8004314:	0019      	movs	r1, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004326:	2204      	movs	r2, #4
 8004328:	4013      	ands	r3, r2
 800432a:	d00b      	beq.n	8004344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4a34      	ldr	r2, [pc, #208]	@ (8004404 <UART_AdvFeatureConfig+0x150>)
 8004334:	4013      	ands	r3, r2
 8004336:	0019      	movs	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004348:	2210      	movs	r2, #16
 800434a:	4013      	ands	r3, r2
 800434c:	d00b      	beq.n	8004366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a2c      	ldr	r2, [pc, #176]	@ (8004408 <UART_AdvFeatureConfig+0x154>)
 8004356:	4013      	ands	r3, r2
 8004358:	0019      	movs	r1, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436a:	2220      	movs	r2, #32
 800436c:	4013      	ands	r3, r2
 800436e:	d00b      	beq.n	8004388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4a25      	ldr	r2, [pc, #148]	@ (800440c <UART_AdvFeatureConfig+0x158>)
 8004378:	4013      	ands	r3, r2
 800437a:	0019      	movs	r1, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438c:	2240      	movs	r2, #64	@ 0x40
 800438e:	4013      	ands	r3, r2
 8004390:	d01d      	beq.n	80043ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	@ (8004410 <UART_AdvFeatureConfig+0x15c>)
 800439a:	4013      	ands	r3, r2
 800439c:	0019      	movs	r1, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043ae:	2380      	movs	r3, #128	@ 0x80
 80043b0:	035b      	lsls	r3, r3, #13
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d10b      	bne.n	80043ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	4a15      	ldr	r2, [pc, #84]	@ (8004414 <UART_AdvFeatureConfig+0x160>)
 80043be:	4013      	ands	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	4013      	ands	r3, r2
 80043d6:	d00b      	beq.n	80043f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	4a0e      	ldr	r2, [pc, #56]	@ (8004418 <UART_AdvFeatureConfig+0x164>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	0019      	movs	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }
}
 80043f0:	46c0      	nop			@ (mov r8, r8)
 80043f2:	46bd      	mov	sp, r7
 80043f4:	b002      	add	sp, #8
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	ffff7fff 	.word	0xffff7fff
 80043fc:	fffdffff 	.word	0xfffdffff
 8004400:	fffeffff 	.word	0xfffeffff
 8004404:	fffbffff 	.word	0xfffbffff
 8004408:	ffffefff 	.word	0xffffefff
 800440c:	ffffdfff 	.word	0xffffdfff
 8004410:	ffefffff 	.word	0xffefffff
 8004414:	ff9fffff 	.word	0xff9fffff
 8004418:	fff7ffff 	.word	0xfff7ffff

0800441c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b092      	sub	sp, #72	@ 0x48
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2290      	movs	r2, #144	@ 0x90
 8004428:	2100      	movs	r1, #0
 800442a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800442c:	f7fc fd46 	bl	8000ebc <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2208      	movs	r2, #8
 800443c:	4013      	ands	r3, r2
 800443e:	2b08      	cmp	r3, #8
 8004440:	d12d      	bne.n	800449e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	2280      	movs	r2, #128	@ 0x80
 8004446:	0391      	lsls	r1, r2, #14
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4a47      	ldr	r2, [pc, #284]	@ (8004568 <UART_CheckIdleState+0x14c>)
 800444c:	9200      	str	r2, [sp, #0]
 800444e:	2200      	movs	r2, #0
 8004450:	f000 f88e 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 8004454:	1e03      	subs	r3, r0, #0
 8004456:	d022      	beq.n	800449e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004458:	f3ef 8310 	mrs	r3, PRIMASK
 800445c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800445e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004462:	2301      	movs	r3, #1
 8004464:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004468:	f383 8810 	msr	PRIMASK, r3
}
 800446c:	46c0      	nop			@ (mov r8, r8)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2180      	movs	r1, #128	@ 0x80
 800447a:	438a      	bics	r2, r1
 800447c:	601a      	str	r2, [r3, #0]
 800447e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004480:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004484:	f383 8810 	msr	PRIMASK, r3
}
 8004488:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2288      	movs	r2, #136	@ 0x88
 800448e:	2120      	movs	r1, #32
 8004490:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2284      	movs	r2, #132	@ 0x84
 8004496:	2100      	movs	r1, #0
 8004498:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e060      	b.n	8004560 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2204      	movs	r2, #4
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d146      	bne.n	800453a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	2280      	movs	r2, #128	@ 0x80
 80044b0:	03d1      	lsls	r1, r2, #15
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004568 <UART_CheckIdleState+0x14c>)
 80044b6:	9200      	str	r2, [sp, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f000 f859 	bl	8004570 <UART_WaitOnFlagUntilTimeout>
 80044be:	1e03      	subs	r3, r0, #0
 80044c0:	d03b      	beq.n	800453a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80044cc:	2301      	movs	r3, #1
 80044ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4922      	ldr	r1, [pc, #136]	@ (800456c <UART_CheckIdleState+0x150>)
 80044e4:	400a      	ands	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f4:	f3ef 8310 	mrs	r3, PRIMASK
 80044f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80044fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80044fe:	2301      	movs	r3, #1
 8004500:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			@ (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2101      	movs	r1, #1
 8004516:	438a      	bics	r2, r1
 8004518:	609a      	str	r2, [r3, #8]
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f383 8810 	msr	PRIMASK, r3
}
 8004524:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	228c      	movs	r2, #140	@ 0x8c
 800452a:	2120      	movs	r1, #32
 800452c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2284      	movs	r2, #132	@ 0x84
 8004532:	2100      	movs	r1, #0
 8004534:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e012      	b.n	8004560 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2288      	movs	r2, #136	@ 0x88
 800453e:	2120      	movs	r1, #32
 8004540:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	228c      	movs	r2, #140	@ 0x8c
 8004546:	2120      	movs	r1, #32
 8004548:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2284      	movs	r2, #132	@ 0x84
 800455a:	2100      	movs	r1, #0
 800455c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	0018      	movs	r0, r3
 8004562:	46bd      	mov	sp, r7
 8004564:	b010      	add	sp, #64	@ 0x40
 8004566:	bd80      	pop	{r7, pc}
 8004568:	01ffffff 	.word	0x01ffffff
 800456c:	fffffedf 	.word	0xfffffedf

08004570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	603b      	str	r3, [r7, #0]
 800457c:	1dfb      	adds	r3, r7, #7
 800457e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004580:	e051      	b.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3301      	adds	r3, #1
 8004586:	d04e      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004588:	f7fc fc98 	bl	8000ebc <HAL_GetTick>
 800458c:	0002      	movs	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	429a      	cmp	r2, r3
 8004596:	d302      	bcc.n	800459e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e051      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2204      	movs	r2, #4
 80045aa:	4013      	ands	r3, r2
 80045ac:	d03b      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b80      	cmp	r3, #128	@ 0x80
 80045b2:	d038      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b40      	cmp	r3, #64	@ 0x40
 80045b8:	d035      	beq.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	2208      	movs	r2, #8
 80045c2:	4013      	ands	r3, r2
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d111      	bne.n	80045ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2208      	movs	r2, #8
 80045ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	0018      	movs	r0, r3
 80045d4:	f000 f83c 	bl	8004650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2290      	movs	r2, #144	@ 0x90
 80045dc:	2108      	movs	r1, #8
 80045de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2284      	movs	r2, #132	@ 0x84
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e02c      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69da      	ldr	r2, [r3, #28]
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	401a      	ands	r2, r3
 80045f8:	2380      	movs	r3, #128	@ 0x80
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d112      	bne.n	8004626 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2280      	movs	r2, #128	@ 0x80
 8004606:	0112      	lsls	r2, r2, #4
 8004608:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	0018      	movs	r0, r3
 800460e:	f000 f81f 	bl	8004650 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2290      	movs	r2, #144	@ 0x90
 8004616:	2120      	movs	r1, #32
 8004618:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2284      	movs	r2, #132	@ 0x84
 800461e:	2100      	movs	r1, #0
 8004620:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e00f      	b.n	8004646 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	4013      	ands	r3, r2
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	425a      	negs	r2, r3
 8004636:	4153      	adcs	r3, r2
 8004638:	b2db      	uxtb	r3, r3
 800463a:	001a      	movs	r2, r3
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d09e      	beq.n	8004582 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	0018      	movs	r0, r3
 8004648:	46bd      	mov	sp, r7
 800464a:	b004      	add	sp, #16
 800464c:	bd80      	pop	{r7, pc}
	...

08004650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8310 	mrs	r3, PRIMASK
 800465c:	617b      	str	r3, [r7, #20]
  return(result);
 800465e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f383 8810 	msr	PRIMASK, r3
}
 800466c:	46c0      	nop			@ (mov r8, r8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4926      	ldr	r1, [pc, #152]	@ (8004714 <UART_EndRxTransfer+0xc4>)
 800467a:	400a      	ands	r2, r1
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f383 8810 	msr	PRIMASK, r3
}
 8004688:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800468a:	f3ef 8310 	mrs	r3, PRIMASK
 800468e:	623b      	str	r3, [r7, #32]
  return(result);
 8004690:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004692:	633b      	str	r3, [r7, #48]	@ 0x30
 8004694:	2301      	movs	r3, #1
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	f383 8810 	msr	PRIMASK, r3
}
 800469e:	46c0      	nop			@ (mov r8, r8)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	491b      	ldr	r1, [pc, #108]	@ (8004718 <UART_EndRxTransfer+0xc8>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d118      	bne.n	80046f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046c4:	f3ef 8310 	mrs	r3, PRIMASK
 80046c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046ce:	2301      	movs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2110      	movs	r1, #16
 80046e6:	438a      	bics	r2, r1
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f383 8810 	msr	PRIMASK, r3
}
 80046f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	228c      	movs	r2, #140	@ 0x8c
 80046fa:	2120      	movs	r1, #32
 80046fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b00e      	add	sp, #56	@ 0x38
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	fffffedf 	.word	0xfffffedf
 8004718:	effffffe 	.word	0xeffffffe

0800471c <memset>:
 800471c:	0003      	movs	r3, r0
 800471e:	1882      	adds	r2, r0, r2
 8004720:	4293      	cmp	r3, r2
 8004722:	d100      	bne.n	8004726 <memset+0xa>
 8004724:	4770      	bx	lr
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	3301      	adds	r3, #1
 800472a:	e7f9      	b.n	8004720 <memset+0x4>

0800472c <__libc_init_array>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	2600      	movs	r6, #0
 8004730:	4c0c      	ldr	r4, [pc, #48]	@ (8004764 <__libc_init_array+0x38>)
 8004732:	4d0d      	ldr	r5, [pc, #52]	@ (8004768 <__libc_init_array+0x3c>)
 8004734:	1b64      	subs	r4, r4, r5
 8004736:	10a4      	asrs	r4, r4, #2
 8004738:	42a6      	cmp	r6, r4
 800473a:	d109      	bne.n	8004750 <__libc_init_array+0x24>
 800473c:	2600      	movs	r6, #0
 800473e:	f000 f819 	bl	8004774 <_init>
 8004742:	4c0a      	ldr	r4, [pc, #40]	@ (800476c <__libc_init_array+0x40>)
 8004744:	4d0a      	ldr	r5, [pc, #40]	@ (8004770 <__libc_init_array+0x44>)
 8004746:	1b64      	subs	r4, r4, r5
 8004748:	10a4      	asrs	r4, r4, #2
 800474a:	42a6      	cmp	r6, r4
 800474c:	d105      	bne.n	800475a <__libc_init_array+0x2e>
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	00b3      	lsls	r3, r6, #2
 8004752:	58eb      	ldr	r3, [r5, r3]
 8004754:	4798      	blx	r3
 8004756:	3601      	adds	r6, #1
 8004758:	e7ee      	b.n	8004738 <__libc_init_array+0xc>
 800475a:	00b3      	lsls	r3, r6, #2
 800475c:	58eb      	ldr	r3, [r5, r3]
 800475e:	4798      	blx	r3
 8004760:	3601      	adds	r6, #1
 8004762:	e7f2      	b.n	800474a <__libc_init_array+0x1e>
 8004764:	080048b4 	.word	0x080048b4
 8004768:	080048b4 	.word	0x080048b4
 800476c:	080048b8 	.word	0x080048b8
 8004770:	080048b4 	.word	0x080048b4

08004774 <_init>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	46c0      	nop			@ (mov r8, r8)
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr

08004780 <_fini>:
 8004780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004782:	46c0      	nop			@ (mov r8, r8)
 8004784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004786:	bc08      	pop	{r3}
 8004788:	469e      	mov	lr, r3
 800478a:	4770      	bx	lr
