
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc20  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800ccdc  0800ccdc  0000dcdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d74c  0800d74c  0000f44c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d74c  0800d74c  0000e74c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d754  0800d754  0000f44c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d754  0800d754  0000e754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d758  0800d758  0000e758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000044c  20000000  0800d75c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  2000044c  0800dba8  0000f44c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd0  0800dba8  0000fcd0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f44c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202c5  00000000  00000000  0000f474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004585  00000000  00000000  0002f739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b0  00000000  00000000  00033cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001257  00000000  00000000  00035470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00015c50  00000000  00000000  000366c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000081f6  00000000  00000000  0004c317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0005450d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005470  00000000  00000000  00054550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  000599c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000044c 	.word	0x2000044c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800ccc4 	.word	0x0800ccc4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000450 	.word	0x20000450
 8000100:	0800ccc4 	.word	0x0800ccc4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 800044e:	1dfb      	adds	r3, r7, #7
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
 8000454:	e047      	b.n	80004e6 <Initialise_Preset_Arrays+0x9e>

		if(i == 0){
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d10c      	bne.n	8000478 <Initialise_Preset_Arrays+0x30>
			factory_presets_array[i] = &factory_preset_0;
 800045e:	1dfb      	adds	r3, r7, #7
 8000460:	781a      	ldrb	r2, [r3, #0]
 8000462:	4b25      	ldr	r3, [pc, #148]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	4925      	ldr	r1, [pc, #148]	@ (80004fc <Initialise_Preset_Arrays+0xb4>)
 8000468:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	781a      	ldrb	r2, [r3, #0]
 800046e:	4b24      	ldr	r3, [pc, #144]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4924      	ldr	r1, [pc, #144]	@ (8000504 <Initialise_Preset_Arrays+0xbc>)
 8000474:	50d1      	str	r1, [r2, r3]
 8000476:	e031      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 1){
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b01      	cmp	r3, #1
 800047e:	d10c      	bne.n	800049a <Initialise_Preset_Arrays+0x52>
			factory_presets_array[i] = &factory_preset_1;
 8000480:	1dfb      	adds	r3, r7, #7
 8000482:	781a      	ldrb	r2, [r3, #0]
 8000484:	4b1c      	ldr	r3, [pc, #112]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 8000486:	0092      	lsls	r2, r2, #2
 8000488:	491f      	ldr	r1, [pc, #124]	@ (8000508 <Initialise_Preset_Arrays+0xc0>)
 800048a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800048c:	1dfb      	adds	r3, r7, #7
 800048e:	781a      	ldrb	r2, [r3, #0]
 8000490:	4b1b      	ldr	r3, [pc, #108]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 8000492:	0092      	lsls	r2, r2, #2
 8000494:	491d      	ldr	r1, [pc, #116]	@ (800050c <Initialise_Preset_Arrays+0xc4>)
 8000496:	50d1      	str	r1, [r2, r3]
 8000498:	e020      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 2){
 800049a:	1dfb      	adds	r3, r7, #7
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b02      	cmp	r3, #2
 80004a0:	d10c      	bne.n	80004bc <Initialise_Preset_Arrays+0x74>
			factory_presets_array[i] = &factory_preset_2;
 80004a2:	1dfb      	adds	r3, r7, #7
 80004a4:	781a      	ldrb	r2, [r3, #0]
 80004a6:	4b14      	ldr	r3, [pc, #80]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	4919      	ldr	r1, [pc, #100]	@ (8000510 <Initialise_Preset_Arrays+0xc8>)
 80004ac:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004b4:	0092      	lsls	r2, r2, #2
 80004b6:	4917      	ldr	r1, [pc, #92]	@ (8000514 <Initialise_Preset_Arrays+0xcc>)
 80004b8:	50d1      	str	r1, [r2, r3]
 80004ba:	e00f      	b.n	80004dc <Initialise_Preset_Arrays+0x94>
		}
		else if(i == 3){
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	2b03      	cmp	r3, #3
 80004c2:	d10b      	bne.n	80004dc <Initialise_Preset_Arrays+0x94>
			factory_presets_array[i] = &factory_preset_3;
 80004c4:	1dfb      	adds	r3, r7, #7
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <Initialise_Preset_Arrays+0xb0>)
 80004ca:	0092      	lsls	r2, r2, #2
 80004cc:	4912      	ldr	r1, [pc, #72]	@ (8000518 <Initialise_Preset_Arrays+0xd0>)
 80004ce:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Initialise_Preset_Arrays+0xb8>)
 80004d6:	0092      	lsls	r2, r2, #2
 80004d8:	4910      	ldr	r1, [pc, #64]	@ (800051c <Initialise_Preset_Arrays+0xd4>)
 80004da:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 80004dc:	1dfb      	adds	r3, r7, #7
 80004de:	781a      	ldrb	r2, [r3, #0]
 80004e0:	1dfb      	adds	r3, r7, #7
 80004e2:	3201      	adds	r2, #1
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d9b3      	bls.n	8000456 <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	0018      	movs	r0, r3
 80004f2:	46bd      	mov	sp, r7
 80004f4:	b002      	add	sp, #8
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000468 	.word	0x20000468
 80004fc:	0800ccdc 	.word	0x0800ccdc
 8000500:	20000478 	.word	0x20000478
 8000504:	20000000 	.word	0x20000000
 8000508:	0800cce4 	.word	0x0800cce4
 800050c:	20000008 	.word	0x20000008
 8000510:	0800ccec 	.word	0x0800ccec
 8000514:	20000010 	.word	0x20000010
 8000518:	0800ccf4 	.word	0x0800ccf4
 800051c:	20000018 	.word	0x20000018

08000520 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 8000524:	4b68      	ldr	r3, [pc, #416]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b01      	cmp	r3, #1
 800052c:	d104      	bne.n	8000538 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 800052e:	4b67      	ldr	r3, [pc, #412]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000530:	799b      	ldrb	r3, [r3, #6]
 8000532:	b2da      	uxtb	r2, r3
 8000534:	4b66      	ldr	r3, [pc, #408]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000536:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000538:	4b66      	ldr	r3, [pc, #408]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d104      	bne.n	800054c <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 8000542:	4b62      	ldr	r3, [pc, #392]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000544:	891b      	ldrh	r3, [r3, #8]
 8000546:	b29a      	uxth	r2, r3
 8000548:	4b61      	ldr	r3, [pc, #388]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800054a:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 800054c:	4b62      	ldr	r3, [pc, #392]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b01      	cmp	r3, #1
 8000554:	d104      	bne.n	8000560 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 8000556:	4b5d      	ldr	r3, [pc, #372]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000558:	7a9b      	ldrb	r3, [r3, #10]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b5c      	ldr	r3, [pc, #368]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800055e:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 8000560:	4b5e      	ldr	r3, [pc, #376]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b01      	cmp	r3, #1
 8000568:	d104      	bne.n	8000574 <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 800056a:	4b58      	ldr	r3, [pc, #352]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800056c:	899b      	ldrh	r3, [r3, #12]
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b57      	ldr	r3, [pc, #348]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000572:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 8000574:	4b5a      	ldr	r3, [pc, #360]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b01      	cmp	r3, #1
 800057c:	d104      	bne.n	8000588 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 800057e:	4b53      	ldr	r3, [pc, #332]	@ (80006cc <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000580:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b52      	ldr	r3, [pc, #328]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000586:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 8000588:	4b4f      	ldr	r3, [pc, #316]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	b2db      	uxtb	r3, r3
 800058e:	2b03      	cmp	r3, #3
 8000590:	d10e      	bne.n	80005b0 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000592:	4b54      	ldr	r3, [pc, #336]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	1e5a      	subs	r2, r3, #1
 800059a:	0013      	movs	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	189b      	adds	r3, r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005a4:	189b      	adds	r3, r3, r2
 80005a6:	4a4a      	ldr	r2, [pc, #296]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f8d1 	bl	8000752 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005b0:	4b48      	ldr	r3, [pc, #288]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	d10e      	bne.n	80005d8 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005ba:	4b4a      	ldr	r3, [pc, #296]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	1e5a      	subs	r2, r3, #1
 80005c2:	0013      	movs	r3, r2
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	189b      	adds	r3, r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4a47      	ldr	r2, [pc, #284]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005cc:	189b      	adds	r3, r3, r2
 80005ce:	4a40      	ldr	r2, [pc, #256]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 f8e6 	bl	80007a4 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 80005d8:	4b3f      	ldr	r3, [pc, #252]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d10e      	bne.n	8000600 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005e2:	4b40      	ldr	r3, [pc, #256]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	0013      	movs	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	189b      	adds	r3, r3, r2
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	4a3d      	ldr	r2, [pc, #244]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	4a36      	ldr	r2, [pc, #216]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f8:	0011      	movs	r1, r2
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 f8e1 	bl	80007c2 <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000600:	4b36      	ldr	r3, [pc, #216]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d10e      	bne.n	8000628 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800060a:	4b36      	ldr	r3, [pc, #216]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	0013      	movs	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	189b      	adds	r3, r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800061c:	189b      	adds	r3, r3, r2
 800061e:	4a2c      	ldr	r2, [pc, #176]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000620:	0011      	movs	r1, r2
 8000622:	0018      	movs	r0, r3
 8000624:	f000 f8dc 	bl	80007e0 <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000628:	4b2d      	ldr	r3, [pc, #180]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d10e      	bne.n	8000650 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000632:	4b2c      	ldr	r3, [pc, #176]	@ (80006e4 <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	1e5a      	subs	r2, r3, #1
 800063a:	0013      	movs	r3, r2
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	189b      	adds	r3, r3, r2
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	4a29      	ldr	r2, [pc, #164]	@ (80006e8 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000644:	189b      	adds	r3, r3, r2
 8000646:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f000 f8d7 	bl	80007fe <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000650:	4b1d      	ldr	r3, [pc, #116]	@ (80006c8 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b02      	cmp	r3, #2
 8000658:	d105      	bne.n	8000666 <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <Update_Params_Based_On_Mode_Selected+0x1cc>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fa4f 	bl	8000b04 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b02      	cmp	r3, #2
 800066e:	d105      	bne.n	800067c <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 8000674:	0011      	movs	r1, r2
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fa69 	bl	8000b4e <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 800067c:	4b16      	ldr	r3, [pc, #88]	@ (80006d8 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	2b02      	cmp	r3, #2
 8000684:	d105      	bne.n	8000692 <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <Update_Params_Based_On_Mode_Selected+0x1d4>)
 800068a:	0011      	movs	r1, r2
 800068c:	0018      	movs	r0, r3
 800068e:	f000 fa77 	bl	8000b80 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <Update_Params_Based_On_Mode_Selected+0x1bc>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	b2db      	uxtb	r3, r3
 8000698:	2b02      	cmp	r3, #2
 800069a:	d105      	bne.n	80006a8 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006a0:	0011      	movs	r1, r2
 80006a2:	0018      	movs	r0, r3
 80006a4:	f000 fa7f 	bl	8000ba6 <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	d105      	bne.n	80006be <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006b2:	4a07      	ldr	r2, [pc, #28]	@ (80006d0 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006b4:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f000 fa8d 	bl	8000bd8 <Update_Phase_with_CC_Value>
	}

	return 1;
 80006be:	2301      	movs	r3, #1
}
 80006c0:	0018      	movs	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	46c0      	nop			@ (mov r8, r8)
 80006c8:	20000430 	.word	0x20000430
 80006cc:	20000c5c 	.word	0x20000c5c
 80006d0:	20000c38 	.word	0x20000c38
 80006d4:	20000428 	.word	0x20000428
 80006d8:	2000042c 	.word	0x2000042c
 80006dc:	20000434 	.word	0x20000434
 80006e0:	20000438 	.word	0x20000438
 80006e4:	200004b0 	.word	0x200004b0
 80006e8:	20000488 	.word	0x20000488
 80006ec:	200004b8 	.word	0x200004b8
 80006f0:	200004b9 	.word	0x200004b9
 80006f4:	200004ba 	.word	0x200004ba
 80006f8:	200004bb 	.word	0x200004bb
 80006fc:	200004bc 	.word	0x200004bc

08000700 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b2da      	uxtb	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	b29a      	uxth	r2, r3
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	789b      	ldrb	r3, [r3, #2]
 8000726:	b2da      	uxtb	r2, r3
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	78db      	ldrb	r3, [r3, #3]
 8000730:	b2db      	uxtb	r3, r3
 8000732:	18db      	adds	r3, r3, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	791b      	ldrb	r3, [r3, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	811a      	strh	r2, [r3, #8]

	return 1;
 8000748:	2301      	movs	r3, #1
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}

08000752 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	6039      	str	r1, [r7, #0]

	uint8_t waveshape = preset_converted_ptr->waveshape;
 800075c:	210f      	movs	r1, #15
 800075e:	187b      	adds	r3, r7, r1
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	701a      	strb	r2, [r3, #0]

	if(waveshape <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000766:	187b      	adds	r3, r7, r1
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b2a      	cmp	r3, #42	@ 0x2a
 800076c:	d803      	bhi.n	8000776 <Update_Waveshape_with_Converted_Preset_Value+0x24>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	719a      	strb	r2, [r3, #6]
 8000774:	e011      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SINE_MODE_ADC_THRESHOLD){
 8000776:	230f      	movs	r3, #15
 8000778:	18fb      	adds	r3, r7, r3
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b55      	cmp	r3, #85	@ 0x55
 800077e:	d803      	bhi.n	8000788 <Update_Waveshape_with_Converted_Preset_Value+0x36>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2201      	movs	r2, #1
 8000784:	719a      	strb	r2, [r3, #6]
 8000786:	e008      	b.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
	}
	else if (waveshape <= SQUARE_MODE_ADC_THRESHOLD){
 8000788:	230f      	movs	r3, #15
 800078a:	18fb      	adds	r3, r7, r3
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	b25b      	sxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	db02      	blt.n	800079a <Update_Waveshape_with_Converted_Preset_Value+0x48>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2202      	movs	r2, #2
 8000798:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b004      	add	sp, #16
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	885b      	ldrh	r3, [r3, #2]
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	811a      	strh	r2, [r3, #8]

	return 1;
 80007b8:	2301      	movs	r3, #1
}
 80007ba:	0018      	movs	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	b002      	add	sp, #8
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	791b      	ldrb	r3, [r3, #4]
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	729a      	strb	r2, [r3, #10]

	return 1;
 80007d6:	2301      	movs	r3, #1
}
 80007d8:	0018      	movs	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	b002      	add	sp, #8
 80007de:	bd80      	pop	{r7, pc}

080007e0 <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	88db      	ldrh	r3, [r3, #6]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	819a      	strh	r2, [r3, #12]

	return 1;
 80007f4:	2301      	movs	r3, #1
}
 80007f6:	0018      	movs	r0, r3
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}

080007fe <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	891b      	ldrh	r3, [r3, #8]
 800080c:	b29a      	uxth	r2, r3
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	0018      	movs	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	b002      	add	sp, #8
 800081a:	bd80      	pop	{r7, pc}

0800081c <Read_and_Interpret_Preset_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800081c:	b580      	push	{r7, lr}
 800081e:	b086      	sub	sp, #24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800082e:	2317      	movs	r3, #23
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e020      	b.n	800087a <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000838:	2117      	movs	r1, #23
 800083a:	187b      	adds	r3, r7, r1
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	693a      	ldr	r2, [r7, #16]
 8000840:	18d3      	adds	r3, r2, r3
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	b25b      	sxtb	r3, r3
 8000846:	2b00      	cmp	r3, #0
 8000848:	da06      	bge.n	8000858 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	18d3      	adds	r3, r2, r3
 8000852:	227f      	movs	r2, #127	@ 0x7f
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	e00a      	b.n	800086e <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000858:	2117      	movs	r1, #23
 800085a:	187b      	adds	r3, r7, r1
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	693a      	ldr	r2, [r7, #16]
 8000860:	18d2      	adds	r2, r2, r3
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	68f9      	ldr	r1, [r7, #12]
 8000868:	18cb      	adds	r3, r1, r3
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800086e:	2117      	movs	r1, #23
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781a      	ldrb	r2, [r3, #0]
 8000874:	187b      	adds	r3, r7, r1
 8000876:	3201      	adds	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	2317      	movs	r3, #23
 800087c:	18fb      	adds	r3, r7, r3
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	d9d9      	bls.n	8000838 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 8000884:	2301      	movs	r3, #1
}
 8000886:	0018      	movs	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	b006      	add	sp, #24
 800088c:	bd80      	pop	{r7, pc}

0800088e <Read_and_Interpret_Misc_From_Flash>:
	*Doubleword_ptr = packed;

	return 1;
}

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val, volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint8_t num_presets){
 800088e:	b580      	push	{r7, lr}
 8000890:	b088      	sub	sp, #32
 8000892:	af00      	add	r7, sp, #0
 8000894:	60f8      	str	r0, [r7, #12]
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 80008a0:	2316      	movs	r3, #22
 80008a2:	18fb      	adds	r3, r7, r3
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 80008a8:	231f      	movs	r3, #31
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
 80008b0:	e02c      	b.n	800090c <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 80008b2:	211f      	movs	r1, #31
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	2016      	movs	r0, #22
 80008c0:	183b      	adds	r3, r7, r0
 80008c2:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 80008c4:	183b      	adds	r3, r7, r0
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d106      	bne.n	80008dc <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	18d3      	adds	r3, r2, r3
 80008d6:	2201      	movs	r2, #1
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	e011      	b.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 80008dc:	2216      	movs	r2, #22
 80008de:	18bb      	adds	r3, r7, r2
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d004      	beq.n	80008f2 <Read_and_Interpret_Misc_From_Flash+0x64>
 80008e8:	18bb      	adds	r3, r7, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d106      	bne.n	8000900 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 80008f2:	231f      	movs	r3, #31
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	18d3      	adds	r3, r2, r3
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000900:	211f      	movs	r1, #31
 8000902:	187b      	adds	r3, r7, r1
 8000904:	781a      	ldrb	r2, [r3, #0]
 8000906:	187b      	adds	r3, r7, r1
 8000908:	3201      	adds	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]
 800090c:	231f      	movs	r3, #31
 800090e:	18fa      	adds	r2, r7, r3
 8000910:	2128      	movs	r1, #40	@ 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	7812      	ldrb	r2, [r2, #0]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ca      	bcc.n	80008b2 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 800091c:	187b      	adds	r3, r7, r1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	2116      	movs	r1, #22
 8000928:	187b      	adds	r3, r7, r1
 800092a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 800092c:	187b      	adds	r3, r7, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d105      	bne.n	8000942 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f004 ff7a 	bl	8005834 <Clear_Status_Bit>
 8000940:	e00f      	b.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000942:	2216      	movs	r2, #22
 8000944:	18bb      	adds	r3, r7, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b01      	cmp	r3, #1
 800094c:	d004      	beq.n	8000958 <Read_and_Interpret_Misc_From_Flash+0xca>
 800094e:	18bb      	adds	r3, r7, r2
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	2bff      	cmp	r3, #255	@ 0xff
 8000956:	d104      	bne.n	8000962 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2180      	movs	r1, #128	@ 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f004 ff57 	bl	8005810 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000962:	2328      	movs	r3, #40	@ 0x28
 8000964:	18fb      	adds	r3, r7, r3
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	3301      	adds	r3, #1
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	18d3      	adds	r3, r2, r3
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	2116      	movs	r1, #22
 8000972:	187b      	adds	r3, r7, r1
 8000974:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	2b00      	cmp	r3, #0
 800097e:	d107      	bne.n	8000990 <Read_and_Interpret_Misc_From_Flash+0x102>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f004 ff53 	bl	8005834 <Clear_Status_Bit>
 800098e:	e011      	b.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000990:	2216      	movs	r2, #22
 8000992:	18bb      	adds	r3, r7, r2
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	2b01      	cmp	r3, #1
 800099a:	d004      	beq.n	80009a6 <Read_and_Interpret_Misc_From_Flash+0x118>
 800099c:	18bb      	adds	r3, r7, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2bff      	cmp	r3, #255	@ 0xff
 80009a4:	d106      	bne.n	80009b4 <Read_and_Interpret_Misc_From_Flash+0x126>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 80009a6:	2380      	movs	r3, #128	@ 0x80
 80009a8:	00da      	lsls	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 ff2e 	bl	8005810 <Set_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 80009b4:	2328      	movs	r3, #40	@ 0x28
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	3302      	adds	r3, #2
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	781a      	ldrb	r2, [r3, #0]
 80009c2:	2116      	movs	r1, #22
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b0f      	cmp	r3, #15
 80009d0:	d908      	bls.n	80009e4 <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 80009d2:	2117      	movs	r1, #23
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	187a      	adds	r2, r7, r1
 80009de:	7812      	ldrb	r2, [r2, #0]
 80009e0:	701a      	strb	r2, [r3, #0]
 80009e2:	e005      	b.n	80009f0 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 80009e4:	2316      	movs	r3, #22
 80009e6:	18fb      	adds	r3, r7, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	0018      	movs	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b008      	add	sp, #32
 80009f8:	bd80      	pop	{r7, pc}

080009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b086      	sub	sp, #24
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
 8000a06:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a08:	2317      	movs	r3, #23
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e03c      	b.n	8000a8c <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000a12:	2117      	movs	r1, #23
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	68ba      	ldr	r2, [r7, #8]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d112      	bne.n	8000a4a <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	009b      	lsls	r3, r3, #2
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	18d3      	adds	r3, r2, r3
 8000a2e:	6818      	ldr	r0, [r3, #0]
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	0013      	movs	r3, r2
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	189b      	adds	r3, r3, r2
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	189b      	adds	r3, r3, r2
 8000a42:	0019      	movs	r1, r3
 8000a44:	f7ff fe5c 	bl	8000700 <Convert_All_Preset_Values>
 8000a48:	e01a      	b.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8000a4a:	2117      	movs	r1, #23
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	18d3      	adds	r3, r2, r3
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d111      	bne.n	8000a80 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	18d3      	adds	r3, r2, r3
 8000a66:	6818      	ldr	r0, [r3, #0]
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	189b      	adds	r3, r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	001a      	movs	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	189b      	adds	r3, r3, r2
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	f7ff fe40 	bl	8000700 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000a80:	2117      	movs	r1, #23
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	781a      	ldrb	r2, [r3, #0]
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	3201      	adds	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
 8000a8c:	2317      	movs	r3, #23
 8000a8e:	18fa      	adds	r2, r7, r3
 8000a90:	2320      	movs	r3, #32
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	7812      	ldrb	r2, [r2, #0]
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d3ba      	bcc.n	8000a12 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8000a9c:	2301      	movs	r3, #1
}
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b006      	add	sp, #24
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8000aac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8000aae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ae8 <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f7ff feb2 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 8000aba:	4a0d      	ldr	r2, [pc, #52]	@ (8000af0 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8000abc:	0019      	movs	r1, r3
 8000abe:	0010      	movs	r0, r2
 8000ac0:	f7ff feac 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8000ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 8000ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8000af8 <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0010      	movs	r0, r2
 8000acc:	f7ff fea6 	bl	800081c <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8000b00 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	0010      	movs	r0, r2
 8000ad8:	f7ff fea0 	bl	800081c <Read_and_Interpret_Preset_From_Flash>

	return 1;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	0018      	movs	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	0800f800 	.word	0x0800f800
 8000aec:	20000008 	.word	0x20000008
 8000af0:	0800f808 	.word	0x0800f808
 8000af4:	20000010 	.word	0x20000010
 8000af8:	0800f810 	.word	0x0800f810
 8000afc:	20000018 	.word	0x20000018
 8000b00:	0800f818 	.word	0x0800f818

08000b04 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b16:	d803      	bhi.n	8000b20 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	719a      	strb	r2, [r3, #6]
 8000b1e:	e011      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b55      	cmp	r3, #85	@ 0x55
 8000b28:	d803      	bhi.n	8000b32 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e008      	b.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	db02      	blt.n	8000b44 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2202      	movs	r2, #2
 8000b42:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	0018      	movs	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b002      	add	sp, #8
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b084      	sub	sp, #16
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
 8000b56:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	210e      	movs	r1, #14
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	187a      	adds	r2, r7, r1
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	00d2      	lsls	r2, r2, #3
 8000b6c:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	187a      	adds	r2, r7, r1
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	811a      	strh	r2, [r3, #8]

	return 1;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	0018      	movs	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 8000b8a:	210f      	movs	r1, #15
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	687a      	ldr	r2, [r7, #4]
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	7812      	ldrb	r2, [r2, #0]
 8000b9a:	729a      	strb	r2, [r3, #10]

	return 1;
 8000b9c:	2301      	movs	r3, #1
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b084      	sub	sp, #16
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	7812      	ldrb	r2, [r2, #0]
 8000bb8:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 8000bba:	187a      	adds	r2, r7, r1
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	18db      	adds	r3, r3, r3
 8000bc2:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	819a      	strh	r2, [r3, #12]

	return 1;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b004      	add	sp, #16
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 8000be2:	210f      	movs	r1, #15
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	7812      	ldrb	r2, [r2, #0]
 8000bea:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	187a      	adds	r2, r7, r1
 8000bf0:	7812      	ldrb	r2, [r2, #0]
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b004      	add	sp, #16
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000c14:	4b08      	ldr	r3, [pc, #32]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 8000c20:	2202      	movs	r2, #2
 8000c22:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 8000c2a:	701a      	strb	r2, [r3, #0]

	return 1;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000430 	.word	0x20000430
 8000c3c:	200004b8 	.word	0x200004b8

08000c40 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000c48:	4b08      	ldr	r3, [pc, #32]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c50:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8000c5e:	705a      	strb	r2, [r3, #1]

	return 1;
 8000c60:	2301      	movs	r3, #1
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b002      	add	sp, #8
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000428 	.word	0x20000428
 8000c70:	200004b8 	.word	0x200004b8

08000c74 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c84:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8000c92:	709a      	strb	r2, [r3, #2]

	return 1;
 8000c94:	2301      	movs	r3, #1
}
 8000c96:	0018      	movs	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	b002      	add	sp, #8
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	46c0      	nop			@ (mov r8, r8)
 8000ca0:	2000042c 	.word	0x2000042c
 8000ca4:	200004b8 	.word	0x200004b8

08000ca8 <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000cb0:	4b08      	ldr	r3, [pc, #32]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cb8:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 8000cc6:	70da      	strb	r2, [r3, #3]

	return 1;
 8000cc8:	2301      	movs	r3, #1
}
 8000cca:	0018      	movs	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	20000434 	.word	0x20000434
 8000cd8:	200004b8 	.word	0x200004b8

08000cdc <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cec:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	781a      	ldrb	r2, [r3, #0]
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <Set_Phase_to_CC_Mode_and_Value+0x30>)
 8000cfa:	711a      	strb	r2, [r3, #4]

	return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	0018      	movs	r0, r3
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	20000438 	.word	0x20000438
 8000d0c:	200004b8 	.word	0x200004b8

08000d10 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8000d14:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d1c:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 8000d1e:	4b13      	ldr	r3, [pc, #76]	@ (8000d6c <Set_All_Pots_to_PC_Mode+0x5c>)
 8000d20:	2203      	movs	r2, #3
 8000d22:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8000d24:	4b12      	ldr	r3, [pc, #72]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d2c:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <Set_All_Pots_to_PC_Mode+0x60>)
 8000d30:	2203      	movs	r2, #3
 8000d32:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d3c:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d74 <Set_All_Pots_to_PC_Mode+0x64>)
 8000d40:	2203      	movs	r2, #3
 8000d42:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d4c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <Set_All_Pots_to_PC_Mode+0x68>)
 8000d50:	2203      	movs	r2, #3
 8000d52:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8000d54:	4b09      	ldr	r3, [pc, #36]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d5c:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	@ (8000d7c <Set_All_Pots_to_PC_Mode+0x6c>)
 8000d60:	2203      	movs	r2, #3
 8000d62:	701a      	strb	r2, [r3, #0]

	return 1;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000430 	.word	0x20000430
 8000d70:	20000428 	.word	0x20000428
 8000d74:	2000042c 	.word	0x2000042c
 8000d78:	20000434 	.word	0x20000434
 8000d7c:	20000438 	.word	0x20000438

08000d80 <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000d88:	210f      	movs	r1, #15
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	7812      	ldrb	r2, [r2, #0]
 8000d90:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	187a      	adds	r2, r7, r1
 8000d96:	7812      	ldrb	r2, [r2, #0]
 8000d98:	09d2      	lsrs	r2, r2, #7
 8000d9a:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8000da8:	2300      	movs	r3, #0
	}
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b004      	add	sp, #16
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b084      	sub	sp, #16
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8000dba:	210f      	movs	r1, #15
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	187a      	adds	r2, r7, r1
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	09d2      	lsrs	r2, r2, #7
 8000dcc:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 8000dda:	2301      	movs	r3, #1
	}
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b004      	add	sp, #16
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 8000dec:	210f      	movs	r1, #15
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	220c      	movs	r2, #12
 8000df2:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	200e      	movs	r0, #14
 8000dfc:	183b      	adds	r3, r7, r0
 8000dfe:	0912      	lsrs	r2, r2, #4
 8000e00:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e02:	183a      	adds	r2, r7, r0
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d101      	bne.n	8000e12 <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e000      	b.n	8000e14 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e12:	2300      	movs	r3, #0
	}
}
 8000e14:	0018      	movs	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b004      	add	sp, #16
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 8000e24:	210f      	movs	r1, #15
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	220b      	movs	r2, #11
 8000e2a:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	200e      	movs	r0, #14
 8000e34:	183b      	adds	r3, r7, r0
 8000e36:	0912      	lsrs	r2, r2, #4
 8000e38:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8000e3a:	183a      	adds	r2, r7, r0
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	7812      	ldrb	r2, [r2, #0]
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d101      	bne.n	8000e4a <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8000e4a:	2300      	movs	r3, #0
	}
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b004      	add	sp, #16
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b77      	cmp	r3, #119	@ 0x77
 8000e64:	d91d      	bls.n	8000ea2 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	2b79      	cmp	r3, #121	@ 0x79
 8000e6e:	d101      	bne.n	8000e74 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e017      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2b7a      	cmp	r3, #122	@ 0x7a
 8000e7c:	d101      	bne.n	8000e82 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e010      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b7d      	cmp	r3, #125	@ 0x7d
 8000e8a:	d101      	bne.n	8000e90 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e009      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b7c      	cmp	r3, #124	@ 0x7c
 8000e98:	d101      	bne.n	8000e9e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e002      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 8000ea2:	2300      	movs	r3, #0
	}
}
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	b002      	add	sp, #8
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b77      	cmp	r3, #119	@ 0x77
 8000ebc:	d901      	bls.n	8000ec2 <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e023      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b14      	cmp	r3, #20
 8000eca:	d101      	bne.n	8000ed0 <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e01c      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d101      	bne.n	8000ede <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e015      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b16      	cmp	r3, #22
 8000ee6:	d101      	bne.n	8000eec <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	e00e      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d101      	bne.n	8000efa <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e007      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b18      	cmp	r3, #24
 8000f02:	d101      	bne.n	8000f08 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e000      	b.n	8000f0a <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 8000f08:	2300      	movs	r3, #0
		}
	}
}
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	b002      	add	sp, #8
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b79      	cmp	r3, #121	@ 0x79
 8000f24:	d108      	bne.n	8000f38 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d101      	bne.n	8000f34 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e031      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e02f      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b7a      	cmp	r3, #122	@ 0x7a
 8000f40:	d10d      	bne.n	8000f5e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d004      	beq.n	8000f56 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f54:	d101      	bne.n	8000f5a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e01e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e01c      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	2b7c      	cmp	r3, #124	@ 0x7c
 8000f66:	d108      	bne.n	8000f7a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e010      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e00e      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b7d      	cmp	r3, #125	@ 0x7d
 8000f82:	d108      	bne.n	8000f96 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e002      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e000      	b.n	8000f98 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8000f96:	2300      	movs	r3, #0
	}
}
 8000f98:	0018      	movs	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b002      	add	sp, #8
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fb0:	d101      	bne.n	8000fb6 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8000fb6:	2300      	movs	r3, #0
	}
}
 8000fb8:	0018      	movs	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b002      	add	sp, #8
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	000a      	movs	r2, r1
 8000fca:	1cfb      	adds	r3, r7, #3
 8000fcc:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	183b      	adds	r3, r7, r0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	400a      	ands	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 8000fde:	210e      	movs	r1, #14
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	1cfa      	adds	r2, r7, #3
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 8000fe8:	183a      	adds	r2, r7, r0
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	7812      	ldrb	r2, [r2, #0]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d101      	bne.n	8000ff8 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e000      	b.n	8000ffa <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 8000ff8:	2300      	movs	r3, #0
	}
}
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b004      	add	sp, #16
 8001000:	bd80      	pop	{r7, pc}

08001002 <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 800100a:	230e      	movs	r3, #14
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001012:	230d      	movs	r3, #13
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
 800101a:	e011      	b.n	8001040 <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 800101c:	200d      	movs	r0, #13
 800101e:	183b      	adds	r3, r7, r0
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	5cd3      	ldrb	r3, [r2, r3]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	0019      	movs	r1, r3
 800102a:	220e      	movs	r2, #14
 800102c:	18bb      	adds	r3, r7, r2
 800102e:	18ba      	adds	r2, r7, r2
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	188a      	adds	r2, r1, r2
 8001034:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	183b      	adds	r3, r7, r0
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	230d      	movs	r3, #13
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b09      	cmp	r3, #9
 8001048:	d9e8      	bls.n	800101c <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 800104a:	230e      	movs	r3, #14
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	881b      	ldrh	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001054:	2301      	movs	r3, #1
 8001056:	e000      	b.n	800105a <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001058:	2300      	movs	r3, #0
	}
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 8001062:	b580      	push	{r7, lr}
 8001064:	b084      	sub	sp, #16
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800106a:	230f      	movs	r3, #15
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	e00a      	b.n	800108a <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001074:	200f      	movs	r0, #15
 8001076:	183b      	adds	r3, r7, r0
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	2100      	movs	r1, #0
 800107e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001080:	183b      	adds	r3, r7, r0
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	183b      	adds	r3, r7, r0
 8001086:	3201      	adds	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
 800108a:	230f      	movs	r3, #15
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b09      	cmp	r3, #9
 8001092:	d9ef      	bls.n	8001074 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001094:	2301      	movs	r3, #1
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b004      	add	sp, #16
 800109c:	bd80      	pop	{r7, pc}

0800109e <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	000a      	movs	r2, r1
 80010a8:	1cfb      	adds	r3, r7, #3
 80010aa:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	1cfa      	adds	r2, r7, #3
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d901      	bls.n	80010be <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e000      	b.n	80010c0 <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 80010be:	2300      	movs	r3, #0
	}
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2bf8      	cmp	r3, #248	@ 0xf8
 80010d8:	d101      	bne.n	80010de <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80010da:	2301      	movs	r3, #1
 80010dc:	e023      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2bfa      	cmp	r3, #250	@ 0xfa
 80010e6:	d101      	bne.n	80010ec <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e01c      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2bfb      	cmp	r3, #251	@ 0xfb
 80010f4:	d101      	bne.n	80010fa <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e015      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2bfc      	cmp	r3, #252	@ 0xfc
 8001102:	d101      	bne.n	8001108 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 8001104:	2301      	movs	r3, #1
 8001106:	e00e      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2bfe      	cmp	r3, #254	@ 0xfe
 8001110:	d101      	bne.n	8001116 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 8001112:	2301      	movs	r3, #1
 8001114:	e007      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2bff      	cmp	r3, #255	@ 0xff
 800111e:	d101      	bne.n	8001124 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 8001124:	2300      	movs	r3, #0
	}
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}

0800112e <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 800112e:	b5b0      	push	{r4, r5, r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001136:	250f      	movs	r5, #15
 8001138:	197c      	adds	r4, r7, r5
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	00da      	lsls	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f004 fb50 	bl	80057e8 <Get_Status_Bit>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 800114c:	197b      	adds	r3, r7, r5
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d101      	bne.n	8001158 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001158:	2300      	movs	r3, #0
	}
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b004      	add	sp, #16
 8001160:	bdb0      	pop	{r4, r5, r7, pc}

08001162 <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	005a      	lsls	r2, r3, #1
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f004 fb5d 	bl	8005834 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	009a      	lsls	r2, r3, #2
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	0011      	movs	r1, r2
 8001182:	0018      	movs	r0, r3
 8001184:	f004 fb56 	bl	8005834 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

	return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011a2:	4b24      	ldr	r3, [pc, #144]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b22      	ldr	r3, [pc, #136]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011aa:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80011ac:	4b22      	ldr	r3, [pc, #136]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b21      	ldr	r3, [pc, #132]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011b4:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011be:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011c8:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 80011ca:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011d2:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <Reset_All_Controllers+0x9c>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <Reset_All_Controllers+0xa0>)
 80011dc:	2202      	movs	r2, #2
 80011de:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	@ (800123c <Reset_All_Controllers+0xa4>)
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	@ (8001240 <Reset_All_Controllers+0xa8>)
 80011e8:	2202      	movs	r2, #2
 80011ea:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <Reset_All_Controllers+0xac>)
 80011ee:	2202      	movs	r2, #2
 80011f0:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80011f2:	230e      	movs	r3, #14
 80011f4:	18fb      	adds	r3, r7, r3
 80011f6:	223f      	movs	r2, #63	@ 0x3f
 80011f8:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80011fa:	230f      	movs	r3, #15
 80011fc:	18fb      	adds	r3, r7, r3
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
 8001202:	e00c      	b.n	800121e <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 8001204:	200f      	movs	r0, #15
 8001206:	183b      	adds	r3, r7, r0
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	4a0f      	ldr	r2, [pc, #60]	@ (8001248 <Reset_All_Controllers+0xb0>)
 800120c:	210e      	movs	r1, #14
 800120e:	1879      	adds	r1, r7, r1
 8001210:	7809      	ldrb	r1, [r1, #0]
 8001212:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 8001214:	183b      	adds	r3, r7, r0
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	183b      	adds	r3, r7, r0
 800121a:	3201      	adds	r2, #1
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	230f      	movs	r3, #15
 8001220:	18fb      	adds	r3, r7, r3
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b04      	cmp	r3, #4
 8001226:	d9ed      	bls.n	8001204 <Reset_All_Controllers+0x6c>
	}

	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	0018      	movs	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	b004      	add	sp, #16
 8001230:	bd80      	pop	{r7, pc}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	20000430 	.word	0x20000430
 8001238:	20000428 	.word	0x20000428
 800123c:	2000042c 	.word	0x2000042c
 8001240:	20000434 	.word	0x20000434
 8001244:	20000438 	.word	0x20000438
 8001248:	200004b8 	.word	0x200004b8

0800124c <Set_Local_Control>:

uint8_t Set_Local_Control(){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001258:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <Set_Local_Control+0x60>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <Set_Local_Control+0x60>)
 8001262:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <Set_Local_Control+0x64>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2da      	uxtb	r2, r3
 800126a:	4b11      	ldr	r3, [pc, #68]	@ (80012b0 <Set_Local_Control+0x64>)
 800126c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <Set_Local_Control+0x68>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <Set_Local_Control+0x68>)
 8001276:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <Set_Local_Control+0x6c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <Set_Local_Control+0x6c>)
 8001280:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <Set_Local_Control+0x5c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001288:	4b08      	ldr	r3, [pc, #32]	@ (80012ac <Set_Local_Control+0x60>)
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800128e:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <Set_Local_Control+0x64>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <Set_Local_Control+0x68>)
 8001296:	2201      	movs	r2, #1
 8001298:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <Set_Local_Control+0x6c>)
 800129c:	2201      	movs	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]

	return 1;
 80012a0:	2301      	movs	r3, #1
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000430 	.word	0x20000430
 80012ac:	20000428 	.word	0x20000428
 80012b0:	2000042c 	.word	0x2000042c
 80012b4:	20000434 	.word	0x20000434
 80012b8:	20000438 	.word	0x20000438

080012bc <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	00da      	lsls	r2, r3, #3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f004 fab1 	bl	8005834 <Clear_Status_Bit>

	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}

080012dc <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80012e4:	2380      	movs	r3, #128	@ 0x80
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	0011      	movs	r1, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	f004 fa8f 	bl	8005810 <Set_Status_Bit>

	return 1;
 80012f2:	2301      	movs	r3, #1
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <Start_UART_Receive+0x18>)
 8001302:	4b05      	ldr	r3, [pc, #20]	@ (8001318 <Start_UART_Receive+0x1c>)
 8001304:	2201      	movs	r2, #1
 8001306:	0018      	movs	r0, r3
 8001308:	f00a f984 	bl	800b614 <HAL_UART_Receive_DMA>

	return 1;
 800130c:	2301      	movs	r3, #1
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200004cc 	.word	0x200004cc
 8001318:	20000a34 	.word	0x20000a34

0800131c <Pot_Check>:
volatile uint8_t depth_pot_adc_measurement_num = 0;
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(struct Params* params_ptr, enum Pot_Type pot_type){
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	000a      	movs	r2, r1
 8001326:	1cfb      	adds	r3, r7, #3
 8001328:	701a      	strb	r2, [r3, #0]
	static volatile uint16_t second_symmetry_measurement;

	static volatile uint16_t first_phase_measurement;
	static volatile uint16_t second_phase_measurement;

	volatile uint16_t *first_measurement_ptr = NULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
	volatile uint16_t *second_measurement_ptr = NULL;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
	volatile uint8_t tolerance = 0;
 800133a:	210d      	movs	r1, #13
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]

	if(pot_type == WAVESHAPE_POT){
 800134a:	1cfb      	adds	r3, r7, #3
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10e      	bne.n	8001370 <Pot_Check+0x54>

		first_measurement_ptr = &first_waveshape_measurement;
 8001352:	4b75      	ldr	r3, [pc, #468]	@ (8001528 <Pot_Check+0x20c>)
 8001354:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001356:	4b75      	ldr	r3, [pc, #468]	@ (800152c <Pot_Check+0x210>)
 8001358:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 800135a:	4b75      	ldr	r3, [pc, #468]	@ (8001530 <Pot_Check+0x214>)
 800135c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->waveshape;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	3306      	adds	r3, #6
 8001362:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2206      	movs	r2, #6
 8001368:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 800136a:	4b72      	ldr	r3, [pc, #456]	@ (8001534 <Pot_Check+0x218>)
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e04e      	b.n	800140e <Pot_Check+0xf2>
	}
	else if(pot_type == SPEED_POT){
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10f      	bne.n	8001398 <Pot_Check+0x7c>

		first_measurement_ptr = &first_speed_measurement;
 8001378:	4b6f      	ldr	r3, [pc, #444]	@ (8001538 <Pot_Check+0x21c>)
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 800137c:	4b6f      	ldr	r3, [pc, #444]	@ (800153c <Pot_Check+0x220>)
 800137e:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001380:	4b6f      	ldr	r3, [pc, #444]	@ (8001540 <Pot_Check+0x224>)
 8001382:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->speed;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3308      	adds	r3, #8
 8001388:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 800138a:	230d      	movs	r3, #13
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2206      	movs	r2, #6
 8001390:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001392:	4b6c      	ldr	r3, [pc, #432]	@ (8001544 <Pot_Check+0x228>)
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	e03a      	b.n	800140e <Pot_Check+0xf2>
	}
	else if(pot_type == DEPTH_POT){
 8001398:	1cfb      	adds	r3, r7, #3
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d10f      	bne.n	80013c0 <Pot_Check+0xa4>

		first_measurement_ptr = &first_depth_measurement;
 80013a0:	4b69      	ldr	r3, [pc, #420]	@ (8001548 <Pot_Check+0x22c>)
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 80013a4:	4b69      	ldr	r3, [pc, #420]	@ (800154c <Pot_Check+0x230>)
 80013a6:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 80013a8:	4b69      	ldr	r3, [pc, #420]	@ (8001550 <Pot_Check+0x234>)
 80013aa:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->depth;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	330a      	adds	r3, #10
 80013b0:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 80013b2:	230d      	movs	r3, #13
 80013b4:	18fb      	adds	r3, r7, r3
 80013b6:	2206      	movs	r2, #6
 80013b8:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 80013ba:	4b66      	ldr	r3, [pc, #408]	@ (8001554 <Pot_Check+0x238>)
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e026      	b.n	800140e <Pot_Check+0xf2>
	}
	else if(pot_type == SYMMETRY_POT){
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b03      	cmp	r3, #3
 80013c6:	d10f      	bne.n	80013e8 <Pot_Check+0xcc>

		first_measurement_ptr = &first_symmetry_measurement;
 80013c8:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <Pot_Check+0x23c>)
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 80013cc:	4b63      	ldr	r3, [pc, #396]	@ (800155c <Pot_Check+0x240>)
 80013ce:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 80013d0:	4b63      	ldr	r3, [pc, #396]	@ (8001560 <Pot_Check+0x244>)
 80013d2:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->symmetry;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	330c      	adds	r3, #12
 80013d8:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 80013da:	230d      	movs	r3, #13
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2206      	movs	r2, #6
 80013e0:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 80013e2:	4b60      	ldr	r3, [pc, #384]	@ (8001564 <Pot_Check+0x248>)
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e012      	b.n	800140e <Pot_Check+0xf2>
	}
	else if(pot_type == PHASE_POT){
 80013e8:	1cfb      	adds	r3, r7, #3
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d10e      	bne.n	800140e <Pot_Check+0xf2>

		first_measurement_ptr = &first_phase_measurement;
 80013f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001568 <Pot_Check+0x24c>)
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 80013f4:	4b5d      	ldr	r3, [pc, #372]	@ (800156c <Pot_Check+0x250>)
 80013f6:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 80013f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001570 <Pot_Check+0x254>)
 80013fa:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)&params_ptr->duty_delay_line_read_pointer_offset;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3322      	adds	r3, #34	@ 0x22
 8001400:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001402:	230d      	movs	r3, #13
 8001404:	18fb      	adds	r3, r7, r3
 8001406:	2206      	movs	r2, #6
 8001408:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 800140a:	4b5a      	ldr	r3, [pc, #360]	@ (8001574 <Pot_Check+0x258>)
 800140c:	617b      	str	r3, [r7, #20]
	}

	if(*measurement_num_ptr == 0){
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10b      	bne.n	8001430 <Pot_Check+0x114>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	881a      	ldrh	r2, [r3, #0]
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	3301      	adds	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	701a      	strb	r2, [r3, #0]
 800142e:	e075      	b.n	800151c <Pot_Check+0x200>
	}
	else if(*measurement_num_ptr == 1){
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10b      	bne.n	8001452 <Pot_Check+0x136>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	881a      	ldrh	r2, [r3, #0]
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	3301      	adds	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e064      	b.n	800151c <Pot_Check+0x200>
	}
	else if(*measurement_num_ptr == 2){
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d15f      	bne.n	800151c <Pot_Check+0x200>

		*measurement_num_ptr = 0;
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	2200      	movs	r2, #0
 8001460:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001462:	200e      	movs	r0, #14
 8001464:	183b      	adds	r3, r7, r0
 8001466:	2200      	movs	r2, #0
 8001468:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 800146a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	b29a      	uxth	r2, r3
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	429a      	cmp	r2, r3
 8001478:	d909      	bls.n	800148e <Pot_Check+0x172>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 800147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b299      	uxth	r1, r3
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29a      	uxth	r2, r3
 8001486:	183b      	adds	r3, r7, r0
 8001488:	1a8a      	subs	r2, r1, r2
 800148a:	801a      	strh	r2, [r3, #0]
 800148c:	e011      	b.n	80014b2 <Pot_Check+0x196>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	b29a      	uxth	r2, r3
 8001494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	b29b      	uxth	r3, r3
 800149a:	429a      	cmp	r2, r3
 800149c:	d909      	bls.n	80014b2 <Pot_Check+0x196>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	b299      	uxth	r1, r3
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	230e      	movs	r3, #14
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	1a8a      	subs	r2, r1, r2
 80014b0:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 80014b2:	230d      	movs	r3, #13
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	001a      	movs	r2, r3
 80014bc:	230e      	movs	r3, #14
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d924      	bls.n	8001510 <Pot_Check+0x1f4>

			if(normal_fsm_ptr != NULL){
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <Pot_Check+0x1c2>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e018      	b.n	8001510 <Pot_Check+0x1f4>

			}
			else if(speed_fsm_ptr != NULL){
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d015      	beq.n	8001510 <Pot_Check+0x1f4>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	7812      	ldrb	r2, [r2, #0]
 80014ea:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80014f2:	4b21      	ldr	r3, [pc, #132]	@ (8001578 <Pot_Check+0x25c>)
 80014f4:	2120      	movs	r1, #32
 80014f6:	0018      	movs	r0, r3
 80014f8:	f004 f99c 	bl	8005834 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <Pot_Check+0x25c>)
 80014fe:	2140      	movs	r1, #64	@ 0x40
 8001500:	0018      	movs	r0, r3
 8001502:	f004 f997 	bl	8005834 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <Pot_Check+0x25c>)
 8001508:	2108      	movs	r1, #8
 800150a:	0018      	movs	r0, r3
 800150c:	f004 f992 	bl	8005834 <Clear_Status_Bit>
			}
		}

		*first_measurement_ptr = 0;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	2200      	movs	r2, #0
 8001514:	801a      	strh	r2, [r3, #0]
		*second_measurement_ptr = 0;
 8001516:	6a3b      	ldr	r3, [r7, #32]
 8001518:	2200      	movs	r2, #0
 800151a:	801a      	strh	r2, [r3, #0]
	}

	return 1;
 800151c:	2301      	movs	r3, #1
}
 800151e:	0018      	movs	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	b00a      	add	sp, #40	@ 0x28
 8001524:	bd80      	pop	{r7, pc}
 8001526:	46c0      	nop			@ (mov r8, r8)
 8001528:	200004d2 	.word	0x200004d2
 800152c:	200004d4 	.word	0x200004d4
 8001530:	200004cd 	.word	0x200004cd
 8001534:	20000430 	.word	0x20000430
 8001538:	200004d6 	.word	0x200004d6
 800153c:	200004d8 	.word	0x200004d8
 8001540:	200004ce 	.word	0x200004ce
 8001544:	20000428 	.word	0x20000428
 8001548:	200004da 	.word	0x200004da
 800154c:	200004dc 	.word	0x200004dc
 8001550:	200004cf 	.word	0x200004cf
 8001554:	2000042c 	.word	0x2000042c
 8001558:	200004de 	.word	0x200004de
 800155c:	200004e0 	.word	0x200004e0
 8001560:	200004d0 	.word	0x200004d0
 8001564:	20000434 	.word	0x20000434
 8001568:	200004e2 	.word	0x200004e2
 800156c:	200004e4 	.word	0x200004e4
 8001570:	200004d1 	.word	0x200004d1
 8001574:	20000438 	.word	0x20000438
 8001578:	20000c20 	.word	0x20000c20

0800157c <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 800157c:	b5b0      	push	{r4, r5, r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001584:	250f      	movs	r5, #15
 8001586:	197c      	adds	r4, r7, r5
 8001588:	2380      	movs	r3, #128	@ 0x80
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	23a0      	movs	r3, #160	@ 0xa0
 800158e:	05db      	lsls	r3, r3, #23
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f006 f9ce 	bl	8007934 <HAL_GPIO_ReadPin>
 8001598:	0003      	movs	r3, r0
 800159a:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 800159c:	197b      	adds	r3, r7, r5
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10a      	bne.n	80015ba <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01e      	beq.n	80015ea <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b17      	ldr	r3, [pc, #92]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015b6:	701a      	strb	r2, [r3, #0]
 80015b8:	e017      	b.n	80015ea <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80015ba:	4b16      	ldr	r3, [pc, #88]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b0e      	cmp	r3, #14
 80015c0:	d013      	beq.n	80015ea <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	d109      	bne.n	80015de <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015d4:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 80015d6:	4b10      	ldr	r3, [pc, #64]	@ (8001618 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]
 80015dc:	e005      	b.n	80015ea <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <Check_Tap_Tempo_Switch_State+0x9c>)
 80015e8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 80015ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e006      	b.n	8001608 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <Check_Tap_Tempo_Switch_State+0x98>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b0e      	cmp	r3, #14
 8001600:	d102      	bne.n	8001608 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001608:	2301      	movs	r3, #1
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bdb0      	pop	{r4, r5, r7, pc}
 8001612:	46c0      	nop			@ (mov r8, r8)
 8001614:	2000001d 	.word	0x2000001d
 8001618:	200004e6 	.word	0x200004e6

0800161c <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b093      	sub	sp, #76	@ 0x4c
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	2410      	movs	r4, #16
 8001624:	193b      	adds	r3, r7, r4
 8001626:	0018      	movs	r0, r3
 8001628:	2338      	movs	r3, #56	@ 0x38
 800162a:	001a      	movs	r2, r3
 800162c:	2100      	movs	r1, #0
 800162e:	f00b fb13 	bl	800cc58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001632:	003b      	movs	r3, r7
 8001634:	0018      	movs	r0, r3
 8001636:	2310      	movs	r3, #16
 8001638:	001a      	movs	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	f00b fb0c 	bl	800cc58 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	0018      	movs	r0, r3
 8001646:	f006 fde7 	bl	8008218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164a:	193b      	adds	r3, r7, r4
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	193b      	adds	r3, r7, r4
 8001652:	2280      	movs	r2, #128	@ 0x80
 8001654:	0052      	lsls	r2, r2, #1
 8001656:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001658:	0021      	movs	r1, r4
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2240      	movs	r2, #64	@ 0x40
 8001664:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2202      	movs	r2, #2
 800166a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2202      	movs	r2, #2
 8001670:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2208      	movs	r2, #8
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	0292      	lsls	r2, r2, #10
 8001684:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001686:	187b      	adds	r3, r7, r1
 8001688:	22c0      	movs	r2, #192	@ 0xc0
 800168a:	04d2      	lsls	r2, r2, #19
 800168c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	0592      	lsls	r2, r2, #22
 8001694:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	187b      	adds	r3, r7, r1
 8001698:	0018      	movs	r0, r3
 800169a:	f006 fe09 	bl	80082b0 <HAL_RCC_OscConfig>
 800169e:	1e03      	subs	r3, r0, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016a2:	f000 fdb1 	bl	8002208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a6:	003b      	movs	r3, r7
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ac:	003b      	movs	r3, r7
 80016ae:	2202      	movs	r2, #2
 80016b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	003b      	movs	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b8:	003b      	movs	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016be:	003b      	movs	r3, r7
 80016c0:	2102      	movs	r1, #2
 80016c2:	0018      	movs	r0, r3
 80016c4:	f007 f90e 	bl	80088e4 <HAL_RCC_ClockConfig>
 80016c8:	1e03      	subs	r3, r0, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80016cc:	f000 fd9c 	bl	8002208 <Error_Handler>
  }
}
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b013      	add	sp, #76	@ 0x4c
 80016d6:	bd90      	pop	{r4, r7, pc}

080016d8 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	0018      	movs	r0, r3
 80016e2:	230c      	movs	r3, #12
 80016e4:	001a      	movs	r2, r3
 80016e6:	2100      	movs	r1, #0
 80016e8:	f00b fab6 	bl	800cc58 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ec:	4b54      	ldr	r3, [pc, #336]	@ (8001840 <MX_ADC1_Init+0x168>)
 80016ee:	4a55      	ldr	r2, [pc, #340]	@ (8001844 <MX_ADC1_Init+0x16c>)
 80016f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016f2:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <MX_ADC1_Init+0x168>)
 80016f4:	2280      	movs	r2, #128	@ 0x80
 80016f6:	05d2      	lsls	r2, r2, #23
 80016f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016fa:	4b51      	ldr	r3, [pc, #324]	@ (8001840 <MX_ADC1_Init+0x168>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001700:	4b4f      	ldr	r3, [pc, #316]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001706:	4b4e      	ldr	r3, [pc, #312]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001708:	2280      	movs	r2, #128	@ 0x80
 800170a:	0392      	lsls	r2, r2, #14
 800170c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001710:	2208      	movs	r2, #8
 8001712:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001714:	4b4a      	ldr	r3, [pc, #296]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001716:	2200      	movs	r2, #0
 8001718:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <MX_ADC1_Init+0x168>)
 800171c:	2200      	movs	r2, #0
 800171e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001720:	4b47      	ldr	r3, [pc, #284]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001722:	2200      	movs	r2, #0
 8001724:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001726:	4b46      	ldr	r3, [pc, #280]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001728:	2205      	movs	r2, #5
 800172a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800172c:	4b44      	ldr	r3, [pc, #272]	@ (8001840 <MX_ADC1_Init+0x168>)
 800172e:	2220      	movs	r2, #32
 8001730:	2100      	movs	r1, #0
 8001732:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001734:	4b42      	ldr	r3, [pc, #264]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800173a:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <MX_ADC1_Init+0x168>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001740:	4b3f      	ldr	r3, [pc, #252]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001742:	222c      	movs	r2, #44	@ 0x2c
 8001744:	2100      	movs	r1, #0
 8001746:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001748:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <MX_ADC1_Init+0x168>)
 800174a:	2200      	movs	r2, #0
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800174e:	4b3c      	ldr	r3, [pc, #240]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001750:	2200      	movs	r2, #0
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001754:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001756:	2200      	movs	r2, #0
 8001758:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800175a:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <MX_ADC1_Init+0x168>)
 800175c:	223c      	movs	r2, #60	@ 0x3c
 800175e:	2100      	movs	r1, #0
 8001760:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001764:	2200      	movs	r2, #0
 8001766:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <MX_ADC1_Init+0x168>)
 800176a:	0018      	movs	r0, r3
 800176c:	f004 fa90 	bl	8005c90 <HAL_ADC_Init>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001774:	f000 fd48 	bl	8002208 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2201      	movs	r2, #1
 800177c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001784:	1d3b      	adds	r3, r7, #4
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800178a:	1d3a      	adds	r2, r7, #4
 800178c:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <MX_ADC1_Init+0x168>)
 800178e:	0011      	movs	r1, r2
 8001790:	0018      	movs	r0, r3
 8001792:	f004 fe01 	bl	8006398 <HAL_ADC_ConfigChannel>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800179a:	f000 fd35 	bl	8002208 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <MX_ADC1_Init+0x170>)
 80017a2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	2204      	movs	r2, #4
 80017a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	2200      	movs	r2, #0
 80017ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017b0:	1d3a      	adds	r2, r7, #4
 80017b2:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <MX_ADC1_Init+0x168>)
 80017b4:	0011      	movs	r1, r2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f004 fdee 	bl	8006398 <HAL_ADC_ConfigChannel>
 80017bc:	1e03      	subs	r3, r0, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80017c0:	f000 fd22 	bl	8002208 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4a21      	ldr	r2, [pc, #132]	@ (800184c <MX_ADC1_Init+0x174>)
 80017c8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2208      	movs	r2, #8
 80017ce:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d6:	1d3a      	adds	r2, r7, #4
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <MX_ADC1_Init+0x168>)
 80017da:	0011      	movs	r1, r2
 80017dc:	0018      	movs	r0, r3
 80017de:	f004 fddb 	bl	8006398 <HAL_ADC_ConfigChannel>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80017e6:	f000 fd0f 	bl	8002208 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4a18      	ldr	r2, [pc, #96]	@ (8001850 <MX_ADC1_Init+0x178>)
 80017ee:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	220c      	movs	r2, #12
 80017f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017fc:	1d3a      	adds	r2, r7, #4
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001800:	0011      	movs	r1, r2
 8001802:	0018      	movs	r0, r3
 8001804:	f004 fdc8 	bl	8006398 <HAL_ADC_ConfigChannel>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 800180c:	f000 fcfc 	bl	8002208 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	4a10      	ldr	r2, [pc, #64]	@ (8001854 <MX_ADC1_Init+0x17c>)
 8001814:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2210      	movs	r2, #16
 800181a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001822:	1d3a      	adds	r2, r7, #4
 8001824:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <MX_ADC1_Init+0x168>)
 8001826:	0011      	movs	r1, r2
 8001828:	0018      	movs	r0, r3
 800182a:	f004 fdb5 	bl	8006398 <HAL_ADC_ConfigChannel>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001832:	f000 fce9 	bl	8002208 <Error_Handler>
  }
}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	46bd      	mov	sp, r7
 800183a:	b004      	add	sp, #16
 800183c:	bd80      	pop	{r7, pc}
 800183e:	46c0      	nop			@ (mov r8, r8)
 8001840:	200004e8 	.word	0x200004e8
 8001844:	40012400 	.word	0x40012400
 8001848:	04000002 	.word	0x04000002
 800184c:	10000010 	.word	0x10000010
 8001850:	14000020 	.word	0x14000020
 8001854:	18000040 	.word	0x18000040

08001858 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b094      	sub	sp, #80	@ 0x50
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	2334      	movs	r3, #52	@ 0x34
 8001860:	18fb      	adds	r3, r7, r3
 8001862:	0018      	movs	r0, r3
 8001864:	231c      	movs	r3, #28
 8001866:	001a      	movs	r2, r3
 8001868:	2100      	movs	r1, #0
 800186a:	f00b f9f5 	bl	800cc58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800186e:	003b      	movs	r3, r7
 8001870:	0018      	movs	r0, r3
 8001872:	2334      	movs	r3, #52	@ 0x34
 8001874:	001a      	movs	r2, r3
 8001876:	2100      	movs	r1, #0
 8001878:	f00b f9ee 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800187c:	4b3a      	ldr	r3, [pc, #232]	@ (8001968 <MX_TIM16_Init+0x110>)
 800187e:	4a3b      	ldr	r2, [pc, #236]	@ (800196c <MX_TIM16_Init+0x114>)
 8001880:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001882:	4b39      	ldr	r3, [pc, #228]	@ (8001968 <MX_TIM16_Init+0x110>)
 8001884:	2200      	movs	r2, #0
 8001886:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <MX_TIM16_Init+0x110>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 800188e:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <MX_TIM16_Init+0x110>)
 8001890:	22ff      	movs	r2, #255	@ 0xff
 8001892:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001894:	4b34      	ldr	r3, [pc, #208]	@ (8001968 <MX_TIM16_Init+0x110>)
 8001896:	2280      	movs	r2, #128	@ 0x80
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800189c:	4b32      	ldr	r3, [pc, #200]	@ (8001968 <MX_TIM16_Init+0x110>)
 800189e:	2200      	movs	r2, #0
 80018a0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a2:	4b31      	ldr	r3, [pc, #196]	@ (8001968 <MX_TIM16_Init+0x110>)
 80018a4:	2280      	movs	r2, #128	@ 0x80
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001968 <MX_TIM16_Init+0x110>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f007 fb3e 	bl	8008f2c <HAL_TIM_Base_Init>
 80018b0:	1e03      	subs	r3, r0, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80018b4:	f000 fca8 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <MX_TIM16_Init+0x110>)
 80018ba:	0018      	movs	r0, r3
 80018bc:	f007 fc3c 	bl	8009138 <HAL_TIM_OC_Init>
 80018c0:	1e03      	subs	r3, r0, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80018c4:	f000 fca0 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80018c8:	2134      	movs	r1, #52	@ 0x34
 80018ca:	187b      	adds	r3, r7, r1
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 80018d0:	187b      	adds	r3, r7, r1
 80018d2:	22ff      	movs	r2, #255	@ 0xff
 80018d4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d6:	187b      	adds	r3, r7, r1
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018dc:	187b      	adds	r3, r7, r1
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ee:	187b      	adds	r3, r7, r1
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018f4:	1879      	adds	r1, r7, r1
 80018f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001968 <MX_TIM16_Init+0x110>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	0018      	movs	r0, r3
 80018fc:	f008 fa90 	bl	8009e20 <HAL_TIM_OC_ConfigChannel>
 8001900:	1e03      	subs	r3, r0, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001904:	f000 fc80 	bl	8002208 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001908:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <MX_TIM16_Init+0x110>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	4b16      	ldr	r3, [pc, #88]	@ (8001968 <MX_TIM16_Init+0x110>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2108      	movs	r1, #8
 8001914:	438a      	bics	r2, r1
 8001916:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001918:	003b      	movs	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	003b      	movs	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001924:	003b      	movs	r3, r7
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192a:	003b      	movs	r3, r7
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001930:	003b      	movs	r3, r7
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001936:	003b      	movs	r3, r7
 8001938:	2280      	movs	r2, #128	@ 0x80
 800193a:	0192      	lsls	r2, r2, #6
 800193c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800193e:	003b      	movs	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001944:	003b      	movs	r3, r7
 8001946:	2200      	movs	r2, #0
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800194a:	003a      	movs	r2, r7
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <MX_TIM16_Init+0x110>)
 800194e:	0011      	movs	r1, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f009 fc8b 	bl	800b26c <HAL_TIMEx_ConfigBreakDeadTime>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d001      	beq.n	800195e <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 800195a:	f000 fc55 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	46bd      	mov	sp, r7
 8001962:	b014      	add	sp, #80	@ 0x50
 8001964:	bd80      	pop	{r7, pc}
 8001966:	46c0      	nop			@ (mov r8, r8)
 8001968:	20000744 	.word	0x20000744
 800196c:	40014400 	.word	0x40014400

08001970 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	@ 0x30
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	2320      	movs	r3, #32
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	0018      	movs	r0, r3
 800197c:	2310      	movs	r3, #16
 800197e:	001a      	movs	r2, r3
 8001980:	2100      	movs	r1, #0
 8001982:	f00b f969 	bl	800cc58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	2314      	movs	r3, #20
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	0018      	movs	r0, r3
 800198c:	230c      	movs	r3, #12
 800198e:	001a      	movs	r2, r3
 8001990:	2100      	movs	r1, #0
 8001992:	f00b f961 	bl	800cc58 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	0018      	movs	r0, r3
 800199a:	2310      	movs	r3, #16
 800199c:	001a      	movs	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f00b f95a 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019a6:	2280      	movs	r2, #128	@ 0x80
 80019a8:	05d2      	lsls	r2, r2, #23
 80019aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 80019ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019ae:	223f      	movs	r2, #63	@ 0x3f
 80019b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 80019b8:	4b29      	ldr	r3, [pc, #164]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019ba:	4a2a      	ldr	r2, [pc, #168]	@ (8001a64 <MX_TIM2_Init+0xf4>)
 80019bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80019be:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c6:	4b26      	ldr	r3, [pc, #152]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019c8:	2280      	movs	r2, #128	@ 0x80
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019cc:	4b24      	ldr	r3, [pc, #144]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019ce:	0018      	movs	r0, r3
 80019d0:	f007 faac 	bl	8008f2c <HAL_TIM_Base_Init>
 80019d4:	1e03      	subs	r3, r0, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80019d8:	f000 fc16 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019dc:	2120      	movs	r1, #32
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2280      	movs	r2, #128	@ 0x80
 80019e2:	0152      	lsls	r2, r2, #5
 80019e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019e6:	187a      	adds	r2, r7, r1
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f008 fc1b 	bl	800a228 <HAL_TIM_ConfigClockSource>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80019f6:	f000 fc07 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 80019fc:	0018      	movs	r0, r3
 80019fe:	f007 ff47 	bl	8009890 <HAL_TIM_IC_Init>
 8001a02:	1e03      	subs	r3, r0, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a06:	f000 fbff 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0a:	2114      	movs	r1, #20
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a18:	187a      	adds	r2, r7, r1
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 8001a1c:	0011      	movs	r1, r2
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f009 fbbc 	bl	800b19c <HAL_TIMEx_MasterConfigSynchronization>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8001a28:	f000 fbee 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2202      	movs	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2201      	movs	r2, #1
 8001a36:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	220f      	movs	r2, #15
 8001a42:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a44:	1d39      	adds	r1, r7, #4
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <MX_TIM2_Init+0xf0>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f008 fa48 	bl	8009ee0 <HAL_TIM_IC_ConfigChannel>
 8001a50:	1e03      	subs	r3, r0, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8001a54:	f000 fbd8 	bl	8002208 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a58:	46c0      	nop			@ (mov r8, r8)
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	b00c      	add	sp, #48	@ 0x30
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000800 	.word	0x20000800
 8001a64:	001fffff 	.word	0x001fffff

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	2328      	movs	r3, #40	@ 0x28
 8001a70:	18fb      	adds	r3, r7, r3
 8001a72:	0018      	movs	r0, r3
 8001a74:	2310      	movs	r3, #16
 8001a76:	001a      	movs	r2, r3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f00b f8ed 	bl	800cc58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7e:	231c      	movs	r3, #28
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	0018      	movs	r0, r3
 8001a84:	230c      	movs	r3, #12
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f00b f8e5 	bl	800cc58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	003b      	movs	r3, r7
 8001a90:	0018      	movs	r0, r3
 8001a92:	231c      	movs	r3, #28
 8001a94:	001a      	movs	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f00b f8de 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a9c:	4b32      	ldr	r3, [pc, #200]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001a9e:	4a33      	ldr	r2, [pc, #204]	@ (8001b6c <MX_TIM3_Init+0x104>)
 8001aa0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8001aa2:	4b31      	ldr	r3, [pc, #196]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001aa4:	4a32      	ldr	r2, [pc, #200]	@ (8001b70 <MX_TIM3_Init+0x108>)
 8001aa6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001ab0:	4a30      	ldr	r2, [pc, #192]	@ (8001b74 <MX_TIM3_Init+0x10c>)
 8001ab2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001ab6:	2280      	movs	r2, #128	@ 0x80
 8001ab8:	0092      	lsls	r2, r2, #2
 8001aba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001abc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001abe:	2280      	movs	r2, #128	@ 0x80
 8001ac0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ac2:	4b29      	ldr	r3, [pc, #164]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f007 fa31 	bl	8008f2c <HAL_TIM_Base_Init>
 8001aca:	1e03      	subs	r3, r0, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f000 fb9b 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ad2:	2128      	movs	r1, #40	@ 0x28
 8001ad4:	187b      	adds	r3, r7, r1
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	0152      	lsls	r2, r2, #5
 8001ada:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001adc:	187a      	adds	r2, r7, r1
 8001ade:	4b22      	ldr	r3, [pc, #136]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001ae0:	0011      	movs	r1, r2
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f008 fba0 	bl	800a228 <HAL_TIM_ConfigClockSource>
 8001ae8:	1e03      	subs	r3, r0, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001aec:	f000 fb8c 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001af0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f007 fb20 	bl	8009138 <HAL_TIM_OC_Init>
 8001af8:	1e03      	subs	r3, r0, #0
 8001afa:	d001      	beq.n	8001b00 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001afc:	f000 fb84 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b00:	211c      	movs	r1, #28
 8001b02:	187b      	adds	r3, r7, r1
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	187b      	adds	r3, r7, r1
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0e:	187a      	adds	r2, r7, r1
 8001b10:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001b12:	0011      	movs	r1, r2
 8001b14:	0018      	movs	r0, r3
 8001b16:	f009 fb41 	bl	800b19c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	1e03      	subs	r3, r0, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001b1e:	f000 fb73 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b22:	003b      	movs	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b28:	003b      	movs	r3, r7
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b2e:	003b      	movs	r3, r7
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	003b      	movs	r3, r7
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	0039      	movs	r1, r7
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	0018      	movs	r0, r3
 8001b42:	f008 f96d 	bl	8009e20 <HAL_TIM_OC_ConfigChannel>
 8001b46:	1e03      	subs	r3, r0, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8001b4a:	f000 fb5d 	bl	8002208 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8001b4e:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699a      	ldr	r2, [r3, #24]
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <MX_TIM3_Init+0x100>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2108      	movs	r1, #8
 8001b5a:	438a      	bics	r2, r1
 8001b5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b00e      	add	sp, #56	@ 0x38
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			@ (mov r8, r8)
 8001b68:	200008bc 	.word	0x200008bc
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	00007fff 	.word	0x00007fff
 8001b74:	00000fff 	.word	0x00000fff

08001b78 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b09c      	sub	sp, #112	@ 0x70
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7e:	2360      	movs	r3, #96	@ 0x60
 8001b80:	18fb      	adds	r3, r7, r3
 8001b82:	0018      	movs	r0, r3
 8001b84:	2310      	movs	r3, #16
 8001b86:	001a      	movs	r2, r3
 8001b88:	2100      	movs	r1, #0
 8001b8a:	f00b f865 	bl	800cc58 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8e:	2354      	movs	r3, #84	@ 0x54
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	0018      	movs	r0, r3
 8001b94:	230c      	movs	r3, #12
 8001b96:	001a      	movs	r2, r3
 8001b98:	2100      	movs	r1, #0
 8001b9a:	f00b f85d 	bl	800cc58 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b9e:	2338      	movs	r3, #56	@ 0x38
 8001ba0:	18fb      	adds	r3, r7, r3
 8001ba2:	0018      	movs	r0, r3
 8001ba4:	231c      	movs	r3, #28
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	2100      	movs	r1, #0
 8001baa:	f00b f855 	bl	800cc58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	2334      	movs	r3, #52	@ 0x34
 8001bb4:	001a      	movs	r2, r3
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	f00b f84e 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bbe:	4a60      	ldr	r2, [pc, #384]	@ (8001d40 <MX_TIM1_Init+0x1c8>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 8001bce:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bd0:	4a5c      	ldr	r2, [pc, #368]	@ (8001d44 <MX_TIM1_Init+0x1cc>)
 8001bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bd6:	2280      	movs	r2, #128	@ 0x80
 8001bd8:	0052      	lsls	r2, r2, #1
 8001bda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bdc:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001be2:	4b56      	ldr	r3, [pc, #344]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001be8:	4b54      	ldr	r3, [pc, #336]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001bea:	0018      	movs	r0, r3
 8001bec:	f007 f99e 	bl	8008f2c <HAL_TIM_Base_Init>
 8001bf0:	1e03      	subs	r3, r0, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 8001bf4:	f000 fb08 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf8:	2160      	movs	r1, #96	@ 0x60
 8001bfa:	187b      	adds	r3, r7, r1
 8001bfc:	2280      	movs	r2, #128	@ 0x80
 8001bfe:	0152      	lsls	r2, r2, #5
 8001c00:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c02:	187a      	adds	r2, r7, r1
 8001c04:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c06:	0011      	movs	r1, r2
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f008 fb0d 	bl	800a228 <HAL_TIM_ConfigClockSource>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001c12:	f000 faf9 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c16:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f007 fced 	bl	80095f8 <HAL_TIM_PWM_Init>
 8001c1e:	1e03      	subs	r3, r0, #0
 8001c20:	d001      	beq.n	8001c26 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 8001c22:	f000 faf1 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c26:	2154      	movs	r1, #84	@ 0x54
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2200      	movs	r2, #0
 8001c32:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c3a:	187a      	adds	r2, r7, r1
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c3e:	0011      	movs	r1, r2
 8001c40:	0018      	movs	r0, r3
 8001c42:	f009 faab 	bl	800b19c <HAL_TIMEx_MasterConfigSynchronization>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c4a:	f000 fadd 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4e:	2138      	movs	r1, #56	@ 0x38
 8001c50:	187b      	adds	r3, r7, r1
 8001c52:	2260      	movs	r2, #96	@ 0x60
 8001c54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c56:	187b      	adds	r3, r7, r1
 8001c58:	2200      	movs	r2, #0
 8001c5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c5c:	187b      	adds	r3, r7, r1
 8001c5e:	2200      	movs	r2, #0
 8001c60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c62:	187b      	adds	r3, r7, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c7a:	1879      	adds	r1, r7, r1
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c7e:	2204      	movs	r2, #4
 8001c80:	0018      	movs	r0, r3
 8001c82:	f008 f9d1 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8001c86:	1e03      	subs	r3, r0, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c8a:	f000 fabd 	bl	8002208 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699a      	ldr	r2, [r3, #24]
 8001c94:	4b29      	ldr	r3, [pc, #164]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	492b      	ldr	r1, [pc, #172]	@ (8001d48 <MX_TIM1_Init+0x1d0>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c9e:	2338      	movs	r3, #56	@ 0x38
 8001ca0:	18f9      	adds	r1, r7, r3
 8001ca2:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001ca4:	220c      	movs	r2, #12
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f008 f9be 	bl	800a028 <HAL_TIM_PWM_ConfigChannel>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 8001cb0:	f000 faaa 	bl	8002208 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8001cb4:	4b21      	ldr	r3, [pc, #132]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	4b20      	ldr	r3, [pc, #128]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4922      	ldr	r1, [pc, #136]	@ (8001d48 <MX_TIM1_Init+0x1d0>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cd6:	1d3b      	adds	r3, r7, #4
 8001cd8:	2200      	movs	r2, #0
 8001cda:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	2280      	movs	r2, #128	@ 0x80
 8001ce6:	0192      	lsls	r2, r2, #6
 8001ce8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cf6:	1d3b      	adds	r3, r7, #4
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2280      	movs	r2, #128	@ 0x80
 8001d00:	0492      	lsls	r2, r2, #18
 8001d02:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	2200      	movs	r2, #0
 8001d08:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d0a:	1d3b      	adds	r3, r7, #4
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d16:	1d3a      	adds	r2, r7, #4
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f009 faa5 	bl	800b26c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d22:	1e03      	subs	r3, r0, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 8001d26:	f000 fa6f 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2a:	4b04      	ldr	r3, [pc, #16]	@ (8001d3c <MX_TIM1_Init+0x1c4>)
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f002 ff07 	bl	8004b40 <HAL_TIM_MspPostInit>

}
 8001d32:	46c0      	nop			@ (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b01c      	add	sp, #112	@ 0x70
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	20000978 	.word	0x20000978
 8001d40:	40012c00 	.word	0x40012c00
 8001d44:	000003ff 	.word	0x000003ff
 8001d48:	fffff7ff 	.word	0xfffff7ff

08001d4c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b094      	sub	sp, #80	@ 0x50
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d52:	2334      	movs	r3, #52	@ 0x34
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	0018      	movs	r0, r3
 8001d58:	231c      	movs	r3, #28
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	f00a ff7b 	bl	800cc58 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d62:	003b      	movs	r3, r7
 8001d64:	0018      	movs	r0, r3
 8001d66:	2334      	movs	r3, #52	@ 0x34
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	f00a ff74 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d70:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d72:	4a3b      	ldr	r2, [pc, #236]	@ (8001e60 <MX_TIM17_Init+0x114>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8001d76:	4b39      	ldr	r3, [pc, #228]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d78:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <MX_TIM17_Init+0x118>)
 8001d7a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7c:	4b37      	ldr	r3, [pc, #220]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 0;
 8001d82:	4b36      	ldr	r3, [pc, #216]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001d88:	4b34      	ldr	r3, [pc, #208]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d8a:	2280      	movs	r2, #128	@ 0x80
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001d90:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d98:	2280      	movs	r2, #128	@ 0x80
 8001d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f007 f8c4 	bl	8008f2c <HAL_TIM_Base_Init>
 8001da4:	1e03      	subs	r3, r0, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001da8:	f000 fa2e 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001dae:	0018      	movs	r0, r3
 8001db0:	f007 f9c2 	bl	8009138 <HAL_TIM_OC_Init>
 8001db4:	1e03      	subs	r3, r0, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8001db8:	f000 fa26 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001dbc:	2134      	movs	r1, #52	@ 0x34
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dd6:	187b      	adds	r3, r7, r1
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ddc:	187b      	adds	r3, r7, r1
 8001dde:	2200      	movs	r2, #0
 8001de0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001de2:	187b      	adds	r3, r7, r1
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	1879      	adds	r1, r7, r1
 8001dea:	4b1c      	ldr	r3, [pc, #112]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f008 f816 	bl	8009e20 <HAL_TIM_OC_ConfigChannel>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8001df8:	f000 fa06 	bl	8002208 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	4b16      	ldr	r3, [pc, #88]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2108      	movs	r1, #8
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e0c:	003b      	movs	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e12:	003b      	movs	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e18:	003b      	movs	r3, r7
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e1e:	003b      	movs	r3, r7
 8001e20:	2200      	movs	r2, #0
 8001e22:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e24:	003b      	movs	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e2a:	003b      	movs	r3, r7
 8001e2c:	2280      	movs	r2, #128	@ 0x80
 8001e2e:	0192      	lsls	r2, r2, #6
 8001e30:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e32:	003b      	movs	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e38:	003b      	movs	r3, r7
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e3e:	003a      	movs	r2, r7
 8001e40:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_TIM17_Init+0x110>)
 8001e42:	0011      	movs	r1, r2
 8001e44:	0018      	movs	r0, r3
 8001e46:	f009 fa11 	bl	800b26c <HAL_TIMEx_ConfigBreakDeadTime>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8001e4e:	f000 f9db 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e52:	46c0      	nop			@ (mov r8, r8)
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b014      	add	sp, #80	@ 0x50
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	20000688 	.word	0x20000688
 8001e60:	40014800 	.word	0x40014800
 8001e64:	00007fff 	.word	0x00007fff

08001e68 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e6e:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <MX_LPTIM1_Init+0x68>)
 8001e70:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e7a:	22e0      	movs	r2, #224	@ 0xe0
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001e80:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e82:	4a14      	ldr	r2, [pc, #80]	@ (8001ed4 <MX_LPTIM1_Init+0x6c>)
 8001e84:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001e86:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e8e:	2280      	movs	r2, #128	@ 0x80
 8001e90:	03d2      	lsls	r2, r2, #15
 8001e92:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001ea6:	4b09      	ldr	r3, [pc, #36]	@ (8001ecc <MX_LPTIM1_Init+0x64>)
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f005 fda7 	bl	80079fc <HAL_LPTIM_Init>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001eb2:	f000 f9a9 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 8001eb6:	2202      	movs	r2, #2
 8001eb8:	2102      	movs	r1, #2
 8001eba:	2011      	movs	r0, #17
 8001ebc:	f005 f876 	bl	8006fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001ec0:	2011      	movs	r0, #17
 8001ec2:	f005 f888 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000bb8 	.word	0x20000bb8
 8001ed0:	40007c00 	.word	0x40007c00
 8001ed4:	0000ffff 	.word	0x0000ffff

08001ed8 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	231c      	movs	r3, #28
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	f00a feb6 	bl	800cc58 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001eec:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001eee:	4a1f      	ldr	r2, [pc, #124]	@ (8001f6c <MX_TIM14_Init+0x94>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 8001ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001ef4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <MX_TIM14_Init+0x98>)
 8001ef6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 0;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f04:	4b18      	ldr	r3, [pc, #96]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f06:	2280      	movs	r2, #128	@ 0x80
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b16      	ldr	r3, [pc, #88]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001f12:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f14:	0018      	movs	r0, r3
 8001f16:	f007 f809 	bl	8008f2c <HAL_TIM_Base_Init>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 8001f1e:	f000 f973 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f24:	0018      	movs	r0, r3
 8001f26:	f007 f907 	bl	8009138 <HAL_TIM_OC_Init>
 8001f2a:	1e03      	subs	r3, r0, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 8001f2e:	f000 f96b 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2200      	movs	r2, #0
 8001f48:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	1d39      	adds	r1, r7, #4
 8001f4c:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <MX_TIM14_Init+0x90>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	0018      	movs	r0, r3
 8001f52:	f007 ff65 	bl	8009e20 <HAL_TIM_OC_ConfigChannel>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 8001f5a:	f000 f955 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001f5e:	46c0      	nop			@ (mov r8, r8)
 8001f60:	46bd      	mov	sp, r7
 8001f62:	b008      	add	sp, #32
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	200005cc 	.word	0x200005cc
 8001f6c:	40002000 	.word	0x40002000
 8001f70:	00007fff 	.word	0x00007fff

08001f74 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <MX_USART2_UART_Init+0x60>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8001f7e:	4b14      	ldr	r3, [pc, #80]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f80:	4a15      	ldr	r2, [pc, #84]	@ (8001fd8 <MX_USART2_UART_Init+0x64>)
 8001f82:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f84:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8a:	4b11      	ldr	r3, [pc, #68]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f96:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f98:	220c      	movs	r2, #12
 8001f9a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <MX_USART2_UART_Init+0x5c>)
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f009 fa11 	bl	800b3e4 <HAL_UART_Init>
 8001fc2:	1e03      	subs	r3, r0, #0
 8001fc4:	d001      	beq.n	8001fca <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8001fc6:	f000 f91f 	bl	8002208 <Error_Handler>
  }
}
 8001fca:	46c0      	nop			@ (mov r8, r8)
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20000a34 	.word	0x20000a34
 8001fd4:	40004400 	.word	0x40004400
 8001fd8:	00007a12 	.word	0x00007a12

08001fdc <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <MX_DMA_Init+0x48>)
 8001fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8002024 <MX_DMA_Init+0x48>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	430a      	orrs	r2, r1
 8001fec:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fee:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <MX_DMA_Init+0x48>)
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	607b      	str	r3, [r7, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2009      	movs	r0, #9
 8002000:	f004 ffd4 	bl	8006fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002004:	2009      	movs	r0, #9
 8002006:	f004 ffe6 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 800200a:	2202      	movs	r2, #2
 800200c:	2102      	movs	r1, #2
 800200e:	200a      	movs	r0, #10
 8002010:	f004 ffcc 	bl	8006fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8002014:	200a      	movs	r0, #10
 8002016:	f004 ffde 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	40021000 	.word	0x40021000

08002028 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b08b      	sub	sp, #44	@ 0x2c
 800202c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	2414      	movs	r4, #20
 8002030:	193b      	adds	r3, r7, r4
 8002032:	0018      	movs	r0, r3
 8002034:	2314      	movs	r3, #20
 8002036:	001a      	movs	r2, r3
 8002038:	2100      	movs	r1, #0
 800203a:	f00a fe0d 	bl	800cc58 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800203e:	4b6e      	ldr	r3, [pc, #440]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002040:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002042:	4b6d      	ldr	r3, [pc, #436]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002044:	2104      	movs	r1, #4
 8002046:	430a      	orrs	r2, r1
 8002048:	635a      	str	r2, [r3, #52]	@ 0x34
 800204a:	4b6b      	ldr	r3, [pc, #428]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 800204c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800204e:	2204      	movs	r2, #4
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002056:	4b68      	ldr	r3, [pc, #416]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002058:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800205a:	4b67      	ldr	r3, [pc, #412]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 800205c:	2120      	movs	r1, #32
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
 8002062:	4b65      	ldr	r3, [pc, #404]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002066:	2220      	movs	r2, #32
 8002068:	4013      	ands	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800206e:	4b62      	ldr	r3, [pc, #392]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002072:	4b61      	ldr	r3, [pc, #388]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	635a      	str	r2, [r3, #52]	@ 0x34
 800207a:	4b5f      	ldr	r3, [pc, #380]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 800207c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800207e:	2201      	movs	r2, #1
 8002080:	4013      	ands	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002086:	4b5c      	ldr	r3, [pc, #368]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800208a:	4b5b      	ldr	r3, [pc, #364]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 800208c:	2102      	movs	r1, #2
 800208e:	430a      	orrs	r2, r1
 8002090:	635a      	str	r2, [r3, #52]	@ 0x34
 8002092:	4b59      	ldr	r3, [pc, #356]	@ (80021f8 <MX_GPIO_Init+0x1d0>)
 8002094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800209e:	4b57      	ldr	r3, [pc, #348]	@ (80021fc <MX_GPIO_Init+0x1d4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	2140      	movs	r1, #64	@ 0x40
 80020a4:	0018      	movs	r0, r3
 80020a6:	f005 fc62 	bl	800796e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	2204      	movs	r2, #4
 80020ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020b0:	193b      	adds	r3, r7, r4
 80020b2:	2288      	movs	r2, #136	@ 0x88
 80020b4:	0352      	lsls	r2, r2, #13
 80020b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80020be:	193b      	adds	r3, r7, r4
 80020c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002200 <MX_GPIO_Init+0x1d8>)
 80020c2:	0019      	movs	r1, r3
 80020c4:	0010      	movs	r0, r2
 80020c6:	f005 fad1 	bl	800766c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 80020ca:	0021      	movs	r1, r4
 80020cc:	193b      	adds	r3, r7, r4
 80020ce:	2280      	movs	r2, #128	@ 0x80
 80020d0:	0092      	lsls	r2, r2, #2
 80020d2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d4:	000c      	movs	r4, r1
 80020d6:	193b      	adds	r3, r7, r4
 80020d8:	2201      	movs	r2, #1
 80020da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	193b      	adds	r3, r7, r4
 80020de:	2200      	movs	r2, #0
 80020e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	193b      	adds	r3, r7, r4
 80020e4:	2200      	movs	r2, #0
 80020e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80020e8:	193a      	adds	r2, r7, r4
 80020ea:	23a0      	movs	r3, #160	@ 0xa0
 80020ec:	05db      	lsls	r3, r3, #23
 80020ee:	0011      	movs	r1, r2
 80020f0:	0018      	movs	r0, r3
 80020f2:	f005 fabb 	bl	800766c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80020f6:	193b      	adds	r3, r7, r4
 80020f8:	2240      	movs	r2, #64	@ 0x40
 80020fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	193b      	adds	r3, r7, r4
 80020fe:	2201      	movs	r2, #1
 8002100:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	193b      	adds	r3, r7, r4
 8002104:	2200      	movs	r2, #0
 8002106:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	193b      	adds	r3, r7, r4
 800210a:	2200      	movs	r2, #0
 800210c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800210e:	193b      	adds	r3, r7, r4
 8002110:	4a3a      	ldr	r2, [pc, #232]	@ (80021fc <MX_GPIO_Init+0x1d4>)
 8002112:	0019      	movs	r1, r3
 8002114:	0010      	movs	r0, r2
 8002116:	f005 faa9 	bl	800766c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 800211a:	193b      	adds	r3, r7, r4
 800211c:	2280      	movs	r2, #128	@ 0x80
 800211e:	00d2      	lsls	r2, r2, #3
 8002120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002122:	193b      	adds	r3, r7, r4
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002128:	193b      	adds	r3, r7, r4
 800212a:	2201      	movs	r2, #1
 800212c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 800212e:	193a      	adds	r2, r7, r4
 8002130:	23a0      	movs	r3, #160	@ 0xa0
 8002132:	05db      	lsls	r3, r3, #23
 8002134:	0011      	movs	r1, r2
 8002136:	0018      	movs	r0, r3
 8002138:	f005 fa98 	bl	800766c <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 800213c:	193b      	adds	r3, r7, r4
 800213e:	2240      	movs	r2, #64	@ 0x40
 8002140:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2201      	movs	r2, #1
 8002146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214e:	193b      	adds	r3, r7, r4
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002154:	193b      	adds	r3, r7, r4
 8002156:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <MX_GPIO_Init+0x1dc>)
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f005 fa86 	bl	800766c <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002160:	0021      	movs	r1, r4
 8002162:	187b      	adds	r3, r7, r1
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	22c4      	movs	r2, #196	@ 0xc4
 800216c:	0392      	lsls	r2, r2, #14
 800216e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002170:	000c      	movs	r4, r1
 8002172:	193b      	adds	r3, r7, r4
 8002174:	2202      	movs	r2, #2
 8002176:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	193b      	adds	r3, r7, r4
 800217a:	2200      	movs	r2, #0
 800217c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800217e:	193b      	adds	r3, r7, r4
 8002180:	4a20      	ldr	r2, [pc, #128]	@ (8002204 <MX_GPIO_Init+0x1dc>)
 8002182:	0019      	movs	r1, r3
 8002184:	0010      	movs	r0, r2
 8002186:	f005 fa71 	bl	800766c <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800218a:	0021      	movs	r1, r4
 800218c:	187b      	adds	r3, r7, r1
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	0152      	lsls	r2, r2, #5
 8002192:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002194:	000c      	movs	r4, r1
 8002196:	193b      	adds	r3, r7, r4
 8002198:	2201      	movs	r2, #1
 800219a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219c:	193b      	adds	r3, r7, r4
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	193b      	adds	r3, r7, r4
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 80021a8:	193a      	adds	r2, r7, r4
 80021aa:	23a0      	movs	r3, #160	@ 0xa0
 80021ac:	05db      	lsls	r3, r3, #23
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f005 fa5b 	bl	800766c <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 80021b6:	0021      	movs	r1, r4
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2280      	movs	r2, #128	@ 0x80
 80021bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2201      	movs	r2, #1
 80021c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80021d0:	187a      	adds	r2, r7, r1
 80021d2:	23a0      	movs	r3, #160	@ 0xa0
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	0011      	movs	r1, r2
 80021d8:	0018      	movs	r0, r3
 80021da:	f005 fa47 	bl	800766c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80021de:	2202      	movs	r2, #2
 80021e0:	2102      	movs	r1, #2
 80021e2:	2007      	movs	r0, #7
 80021e4:	f004 fee2 	bl	8006fac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80021e8:	2007      	movs	r0, #7
 80021ea:	f004 fef4 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b00b      	add	sp, #44	@ 0x2c
 80021f4:	bd90      	pop	{r4, r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	40021000 	.word	0x40021000
 80021fc:	50000800 	.word	0x50000800
 8002200:	50001400 	.word	0x50001400
 8002204:	50000400 	.word	0x50000400

08002208 <Error_Handler>:

void Error_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002210:	46c0      	nop			@ (mov r8, r8)
 8002212:	e7fd      	b.n	8002210 <Error_Handler+0x8>

08002214 <System_Init>:
  {

  }
}

void System_Init(void){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002218:	f003 fb4a 	bl	80058b0 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 800221c:	f7ff f9fe 	bl	800161c <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002220:	f7ff ff02 	bl	8002028 <MX_GPIO_Init>
	MX_DMA_Init();
 8002224:	f7ff feda 	bl	8001fdc <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002228:	f7ff fea4 	bl	8001f74 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800222c:	f7ff fa54 	bl	80016d8 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002230:	f7ff fb12 	bl	8001858 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002234:	f7ff fb9c 	bl	8001970 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002238:	f7ff fc16 	bl	8001a68 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800223c:	f7ff fc9c 	bl	8001b78 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002240:	f7ff fd84 	bl	8001d4c <MX_TIM17_Init>
	MX_TIM14_Init();
 8002244:	f7ff fe48 	bl	8001ed8 <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002248:	f7ff fe0e 	bl	8001e68 <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 800224c:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <System_Init+0xc0>)
 800224e:	0018      	movs	r0, r3
 8002250:	f004 fcca 	bl	8006be8 <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002254:	4a20      	ldr	r2, [pc, #128]	@ (80022d8 <System_Init+0xc4>)
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <System_Init+0xc8>)
 8002258:	210e      	movs	r1, #14
 800225a:	0018      	movs	r0, r3
 800225c:	f008 f93e 	bl	800a4dc <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <System_Init+0xcc>)
 8002262:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <System_Init+0xc0>)
 8002264:	2100      	movs	r1, #0
 8002266:	0018      	movs	r0, r3
 8002268:	f003 feea 	bl	8006040 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 800226c:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <System_Init+0xd0>)
 800226e:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <System_Init+0xd4>)
 8002270:	2112      	movs	r1, #18
 8002272:	0018      	movs	r0, r3
 8002274:	f008 f932 	bl	800a4dc <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002278:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <System_Init+0xd8>)
 800227a:	4b1b      	ldr	r3, [pc, #108]	@ (80022e8 <System_Init+0xd4>)
 800227c:	210e      	movs	r1, #14
 800227e:	0018      	movs	r0, r3
 8002280:	f008 f92c 	bl	800a4dc <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002284:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <System_Init+0xdc>)
 8002286:	4b1b      	ldr	r3, [pc, #108]	@ (80022f4 <System_Init+0xe0>)
 8002288:	2114      	movs	r1, #20
 800228a:	0018      	movs	r0, r3
 800228c:	f008 f926 	bl	800a4dc <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002290:	4a19      	ldr	r2, [pc, #100]	@ (80022f8 <System_Init+0xe4>)
 8002292:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <System_Init+0xe8>)
 8002294:	2101      	movs	r1, #1
 8002296:	0018      	movs	r0, r3
 8002298:	f009 f90c 	bl	800b4b4 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 800229c:	4a18      	ldr	r2, [pc, #96]	@ (8002300 <System_Init+0xec>)
 800229e:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <System_Init+0xe8>)
 80022a0:	2103      	movs	r1, #3
 80022a2:	0018      	movs	r0, r3
 80022a4:	f009 f906 	bl	800b4b4 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <System_Init+0xf0>)
 80022aa:	4b17      	ldr	r3, [pc, #92]	@ (8002308 <System_Init+0xf4>)
 80022ac:	2102      	movs	r1, #2
 80022ae:	0018      	movs	r0, r3
 80022b0:	f005 fdca 	bl	8007e48 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 80022b4:	4a15      	ldr	r2, [pc, #84]	@ (800230c <System_Init+0xf8>)
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <System_Init+0xfc>)
 80022b8:	2114      	movs	r1, #20
 80022ba:	0018      	movs	r0, r3
 80022bc:	f008 f90e 	bl	800a4dc <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <System_Init+0x100>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <System_Init+0x104>)
 80022c4:	2114      	movs	r1, #20
 80022c6:	0018      	movs	r0, r3
 80022c8:	f008 f908 	bl	800a4dc <HAL_TIM_RegisterCallback>
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	200004e8 	.word	0x200004e8
 80022d8:	0800231d 	.word	0x0800231d
 80022dc:	20000744 	.word	0x20000744
 80022e0:	08002371 	.word	0x08002371
 80022e4:	08002405 	.word	0x08002405
 80022e8:	20000800 	.word	0x20000800
 80022ec:	08002521 	.word	0x08002521
 80022f0:	0800262d 	.word	0x0800262d
 80022f4:	200008bc 	.word	0x200008bc
 80022f8:	08002769 	.word	0x08002769
 80022fc:	20000a34 	.word	0x20000a34
 8002300:	08002779 	.word	0x08002779
 8002304:	08003a91 	.word	0x08003a91
 8002308:	20000bb8 	.word	0x20000bb8
 800230c:	08003c71 	.word	0x08003c71
 8002310:	20000688 	.word	0x20000688
 8002314:	08003c81 	.word	0x08003c81
 8002318:	200005cc 	.word	0x200005cc

0800231c <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002324:	4b0d      	ldr	r3, [pc, #52]	@ (800235c <TIM16_callback+0x40>)
 8002326:	0018      	movs	r0, r3
 8002328:	f001 feae 	bl	8004088 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800232c:	4b0b      	ldr	r3, [pc, #44]	@ (800235c <TIM16_callback+0x40>)
 800232e:	2100      	movs	r1, #0
 8002330:	0018      	movs	r0, r3
 8002332:	f001 fed5 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002336:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <TIM16_callback+0x44>)
 8002338:	4b08      	ldr	r3, [pc, #32]	@ (800235c <TIM16_callback+0x40>)
 800233a:	0011      	movs	r1, r2
 800233c:	0018      	movs	r0, r3
 800233e:	f001 ffc5 	bl	80042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002342:	4b08      	ldr	r3, [pc, #32]	@ (8002364 <TIM16_callback+0x48>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	001a      	movs	r2, r3
 8002348:	4907      	ldr	r1, [pc, #28]	@ (8002368 <TIM16_callback+0x4c>)
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <TIM16_callback+0x50>)
 800234c:	0018      	movs	r0, r3
 800234e:	f003 ff03 	bl	8006158 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	20000c38 	.word	0x20000c38
 8002360:	20000020 	.word	0x20000020
 8002364:	0800d4fc 	.word	0x0800d4fc
 8002368:	20000c2c 	.word	0x20000c2c
 800236c:	200004e8 	.word	0x200004e8

08002370 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0018      	movs	r0, r3
 800237c:	f003 ff7a 	bl	8006274 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002380:	4a1b      	ldr	r2, [pc, #108]	@ (80023f0 <ADC_DMA_conversion_complete_callback+0x80>)
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <ADC_DMA_conversion_complete_callback+0x84>)
 8002384:	0011      	movs	r1, r2
 8002386:	0018      	movs	r0, r3
 8002388:	f002 f836 	bl	80043f8 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 800238c:	f7fe f8c8 	bl	8000520 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002390:	250f      	movs	r5, #15
 8002392:	197c      	adds	r4, r7, r5
 8002394:	4b18      	ldr	r3, [pc, #96]	@ (80023f8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002396:	2108      	movs	r1, #8
 8002398:	0018      	movs	r0, r3
 800239a:	f003 fa25 	bl	80057e8 <Get_Status_Bit>
 800239e:	0003      	movs	r3, r0
 80023a0:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 80023a2:	197b      	adds	r3, r7, r5
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10a      	bne.n	80023c0 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 80023aa:	4b14      	ldr	r3, [pc, #80]	@ (80023fc <ADC_DMA_conversion_complete_callback+0x8c>)
 80023ac:	8a5b      	ldrh	r3, [r3, #18]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <ADC_DMA_conversion_complete_callback+0x90>)
 80023b2:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 80023b4:	4b11      	ldr	r3, [pc, #68]	@ (80023fc <ADC_DMA_conversion_complete_callback+0x8c>)
 80023b6:	8b5b      	ldrh	r3, [r3, #26]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <ADC_DMA_conversion_complete_callback+0x90>)
 80023bc:	835a      	strh	r2, [r3, #26]
 80023be:	e003      	b.n	80023c8 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002400 <ADC_DMA_conversion_complete_callback+0x90>)
 80023c2:	0018      	movs	r0, r3
 80023c4:	f001 fe2a 	bl	800401c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 80023c8:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <ADC_DMA_conversion_complete_callback+0x90>)
 80023ca:	0018      	movs	r0, r3
 80023cc:	f002 fd7e 	bl	8004ecc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 80023d0:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023d2:	2110      	movs	r1, #16
 80023d4:	0018      	movs	r0, r3
 80023d6:	f003 fa07 	bl	80057e8 <Get_Status_Bit>
 80023da:	1e03      	subs	r3, r0, #0
 80023dc:	d104      	bne.n	80023e8 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <ADC_DMA_conversion_complete_callback+0x88>)
 80023e0:	2110      	movs	r1, #16
 80023e2:	0018      	movs	r0, r3
 80023e4:	f003 fa14 	bl	8005810 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80023e8:	46c0      	nop			@ (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	20000c2c 	.word	0x20000c2c
 80023f4:	20000c5c 	.word	0x20000c5c
 80023f8:	20000c20 	.word	0x20000c20
 80023fc:	20000ca4 	.word	0x20000ca4
 8002400:	20000c38 	.word	0x20000c38

08002404 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2100      	movs	r1, #0
 8002410:	0018      	movs	r0, r3
 8002412:	f007 ffdf 	bl	800a3d4 <HAL_TIM_ReadCapturedValue>
 8002416:	0002      	movs	r2, r0
 8002418:	4b3a      	ldr	r3, [pc, #232]	@ (8002504 <TIM2_ch1_IP_capture_callback+0x100>)
 800241a:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 800241c:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <TIM2_ch1_IP_capture_callback+0x100>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0a5b      	lsrs	r3, r3, #9
 8002422:	b29a      	uxth	r2, r3
 8002424:	4b38      	ldr	r3, [pc, #224]	@ (8002508 <TIM2_ch1_IP_capture_callback+0x104>)
 8002426:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002428:	4b38      	ldr	r3, [pc, #224]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d108      	bne.n	8002444 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002432:	f001 fd13 	bl	8003e5c <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002436:	4b35      	ldr	r3, [pc, #212]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 800243c:	4b33      	ldr	r3, [pc, #204]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 800243e:	2200      	movs	r2, #0
 8002440:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002442:	e05b      	b.n	80024fc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002444:	4b31      	ldr	r3, [pc, #196]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d124      	bne.n	8002498 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 800244e:	4b2e      	ldr	r3, [pc, #184]	@ (8002508 <TIM2_ch1_IP_capture_callback+0x104>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	b29b      	uxth	r3, r3
 8002454:	2b80      	cmp	r3, #128	@ 0x80
 8002456:	d951      	bls.n	80024fc <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002458:	f001 fce2 	bl	8003e20 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 800245c:	4b2b      	ldr	r3, [pc, #172]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 800245e:	2202      	movs	r2, #2
 8002460:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 8002464:	2201      	movs	r2, #1
 8002466:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002468:	4a29      	ldr	r2, [pc, #164]	@ (8002510 <TIM2_ch1_IP_capture_callback+0x10c>)
 800246a:	4b2a      	ldr	r3, [pc, #168]	@ (8002514 <TIM2_ch1_IP_capture_callback+0x110>)
 800246c:	0011      	movs	r1, r2
 800246e:	0018      	movs	r0, r3
 8002470:	f001 fcc4 	bl	8003dfc <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002474:	4b28      	ldr	r3, [pc, #160]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x114>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d004      	beq.n	8002488 <TIM2_ch1_IP_capture_callback+0x84>
 800247e:	4b26      	ldr	r3, [pc, #152]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x114>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b07      	cmp	r3, #7
 8002486:	d101      	bne.n	800248c <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002488:	f002 f8f6 	bl	8004678 <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <TIM2_ch1_IP_capture_callback+0x118>)
 800248e:	2104      	movs	r1, #4
 8002490:	0018      	movs	r0, r3
 8002492:	f003 f9bd 	bl	8005810 <Set_Status_Bit>
}
 8002496:	e031      	b.n	80024fc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002498:	4b1c      	ldr	r3, [pc, #112]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d108      	bne.n	80024b4 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 80024a2:	f001 fcdb 	bl	8003e5c <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024a6:	4b19      	ldr	r3, [pc, #100]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 80024a8:	2203      	movs	r2, #3
 80024aa:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 80024ac:	4b17      	ldr	r3, [pc, #92]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 80024ae:	2202      	movs	r2, #2
 80024b0:	705a      	strb	r2, [r3, #1]
}
 80024b2:	e023      	b.n	80024fc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d11e      	bne.n	80024fc <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 80024be:	f001 fcaf 	bl	8003e20 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80024c2:	4b12      	ldr	r3, [pc, #72]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 80024c4:	2202      	movs	r2, #2
 80024c6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <TIM2_ch1_IP_capture_callback+0x108>)
 80024ca:	2203      	movs	r2, #3
 80024cc:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 80024ce:	4a10      	ldr	r2, [pc, #64]	@ (8002510 <TIM2_ch1_IP_capture_callback+0x10c>)
 80024d0:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <TIM2_ch1_IP_capture_callback+0x110>)
 80024d2:	0011      	movs	r1, r2
 80024d4:	0018      	movs	r0, r3
 80024d6:	f001 fc91 	bl	8003dfc <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x114>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d004      	beq.n	80024ee <TIM2_ch1_IP_capture_callback+0xea>
 80024e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002518 <TIM2_ch1_IP_capture_callback+0x114>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b07      	cmp	r3, #7
 80024ec:	d101      	bne.n	80024f2 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 80024ee:	f002 f8c3 	bl	8004678 <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <TIM2_ch1_IP_capture_callback+0x118>)
 80024f4:	2104      	movs	r1, #4
 80024f6:	0018      	movs	r0, r3
 80024f8:	f003 f98a 	bl	8005810 <Set_Status_Bit>
}
 80024fc:	46c0      	nop			@ (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000c18 	.word	0x20000c18
 8002508:	20000c1c 	.word	0x20000c1c
 800250c:	2000043c 	.word	0x2000043c
 8002510:	20000c80 	.word	0x20000c80
 8002514:	20000c38 	.word	0x20000c38
 8002518:	20000428 	.word	0x20000428
 800251c:	20000c20 	.word	0x20000c20

08002520 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002528:	240c      	movs	r4, #12
 800252a:	193b      	adds	r3, r7, r4
 800252c:	4a3a      	ldr	r2, [pc, #232]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 800252e:	7852      	ldrb	r2, [r2, #1]
 8002530:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002532:	4b3a      	ldr	r3, [pc, #232]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d131      	bne.n	80025a0 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 800253c:	4b37      	ldr	r3, [pc, #220]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 800253e:	2200      	movs	r2, #0
 8002540:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 8002544:	2201      	movs	r2, #1
 8002546:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002548:	4b35      	ldr	r3, [pc, #212]	@ (8002620 <TIM2_ch1_overflow_callback+0x100>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 800254e:	4b35      	ldr	r3, [pc, #212]	@ (8002624 <TIM2_ch1_overflow_callback+0x104>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	23a0      	movs	r3, #160	@ 0xa0
 800255a:	05db      	lsls	r3, r3, #23
 800255c:	2201      	movs	r2, #1
 800255e:	0018      	movs	r0, r3
 8002560:	f005 fa05 	bl	800796e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002564:	4b30      	ldr	r3, [pc, #192]	@ (8002628 <TIM2_ch1_overflow_callback+0x108>)
 8002566:	2200      	movs	r2, #0
 8002568:	2140      	movs	r1, #64	@ 0x40
 800256a:	0018      	movs	r0, r3
 800256c:	f005 f9ff 	bl	800796e <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002570:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b04      	cmp	r3, #4
 8002578:	d049      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 800257a:	4b27      	ldr	r3, [pc, #156]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b06      	cmp	r3, #6
 8002582:	d044      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>
 8002584:	4b24      	ldr	r3, [pc, #144]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 800258a:	2b08      	cmp	r3, #8
 800258c:	d03f      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 800258e:	4b22      	ldr	r3, [pc, #136]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002590:	4a21      	ldr	r2, [pc, #132]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002592:	7812      	ldrb	r2, [r2, #0]
 8002594:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002596:	4b20      	ldr	r3, [pc, #128]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002598:	193a      	adds	r2, r7, r4
 800259a:	7812      	ldrb	r2, [r2, #0]
 800259c:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 800259e:	e036      	b.n	800260e <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 80025a0:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d131      	bne.n	800260e <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 80025aa:	4b1c      	ldr	r3, [pc, #112]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80025b0:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <TIM2_ch1_overflow_callback+0xfc>)
 80025b2:	2203      	movs	r2, #3
 80025b4:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <TIM2_ch1_overflow_callback+0x100>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 80025bc:	4b19      	ldr	r3, [pc, #100]	@ (8002624 <TIM2_ch1_overflow_callback+0x104>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	0099      	lsls	r1, r3, #2
 80025c6:	23a0      	movs	r3, #160	@ 0xa0
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	2201      	movs	r2, #1
 80025cc:	0018      	movs	r0, r3
 80025ce:	f005 f9ce 	bl	800796e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80025d2:	4b15      	ldr	r3, [pc, #84]	@ (8002628 <TIM2_ch1_overflow_callback+0x108>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	2140      	movs	r1, #64	@ 0x40
 80025d8:	0018      	movs	r0, r3
 80025da:	f005 f9c8 	bl	800796e <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025de:	4b0e      	ldr	r3, [pc, #56]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d012      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 80025e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b06      	cmp	r3, #6
 80025f0:	d00d      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>
 80025f2:	4b09      	ldr	r3, [pc, #36]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d008      	beq.n	800260e <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 80025fe:	4a06      	ldr	r2, [pc, #24]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002600:	7812      	ldrb	r2, [r2, #0]
 8002602:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <TIM2_ch1_overflow_callback+0xf8>)
 8002606:	220c      	movs	r2, #12
 8002608:	18ba      	adds	r2, r7, r2
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b005      	add	sp, #20
 8002614:	bd90      	pop	{r4, r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	20000428 	.word	0x20000428
 800261c:	2000043c 	.word	0x2000043c
 8002620:	20000cc8 	.word	0x20000cc8
 8002624:	20000c1e 	.word	0x20000c1e
 8002628:	50000800 	.word	0x50000800

0800262c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002634:	4b41      	ldr	r3, [pc, #260]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b0b      	cmp	r3, #11
 800263c:	d01c      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 800263e:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b0c      	cmp	r3, #12
 8002646:	d017      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002648:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b0d      	cmp	r3, #13
 8002650:	d012      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002652:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b10      	cmp	r3, #16
 800265a:	d00d      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 800265c:	4b37      	ldr	r3, [pc, #220]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b11      	cmp	r3, #17
 8002664:	d008      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002666:	4b35      	ldr	r3, [pc, #212]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 800266c:	2b12      	cmp	r3, #18
 800266e:	d003      	beq.n	8002678 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002670:	4b33      	ldr	r3, [pc, #204]	@ (8002740 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002672:	0018      	movs	r0, r3
 8002674:	f001 fd08 	bl	8004088 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002678:	4b32      	ldr	r3, [pc, #200]	@ (8002744 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 800267a:	2100      	movs	r1, #0
 800267c:	0018      	movs	r0, r3
 800267e:	f003 f84c 	bl	800571a <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002682:	4b31      	ldr	r3, [pc, #196]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d106      	bne.n	800269a <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 800268c:	4b2e      	ldr	r3, [pc, #184]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002692:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002694:	2202      	movs	r2, #2
 8002696:	705a      	strb	r2, [r3, #1]
 8002698:	e00a      	b.n	80026b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 800269a:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b03      	cmp	r3, #3
 80026a2:	d105      	bne.n	80026b0 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 80026aa:	4b27      	ldr	r3, [pc, #156]	@ (8002748 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 80026ac:	2203      	movs	r2, #3
 80026ae:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026b0:	4b22      	ldr	r3, [pc, #136]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b0b      	cmp	r3, #11
 80026b8:	d03c      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 80026ba:	4b20      	ldr	r3, [pc, #128]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d037      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b0d      	cmp	r3, #13
 80026cc:	d032      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 80026ce:	4b1b      	ldr	r3, [pc, #108]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d02d      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 80026d8:	4b18      	ldr	r3, [pc, #96]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b11      	cmp	r3, #17
 80026e0:	d028      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 80026e8:	2b12      	cmp	r3, #18
 80026ea:	d023      	beq.n	8002734 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80026ec:	4a17      	ldr	r2, [pc, #92]	@ (800274c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026f0:	0011      	movs	r1, r2
 80026f2:	0018      	movs	r0, r3
 80026f4:	f001 fb82 	bl	8003dfc <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 80026f8:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 80026fc:	0011      	movs	r1, r2
 80026fe:	0018      	movs	r0, r3
 8002700:	f001 fb7c 	bl	8003dfc <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002706:	2108      	movs	r1, #8
 8002708:	0018      	movs	r0, r3
 800270a:	f003 f881 	bl	8005810 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002710:	2100      	movs	r1, #0
 8002712:	0018      	movs	r0, r3
 8002714:	f001 fce4 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002718:	4a0f      	ldr	r2, [pc, #60]	@ (8002758 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 800271c:	0011      	movs	r1, r2
 800271e:	0018      	movs	r0, r3
 8002720:	f001 fdd4 	bl	80042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002724:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	001a      	movs	r2, r3
 800272a:	490d      	ldr	r1, [pc, #52]	@ (8002760 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 800272c:	4b0d      	ldr	r3, [pc, #52]	@ (8002764 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 800272e:	0018      	movs	r0, r3
 8002730:	f003 fd12 	bl	8006158 <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b002      	add	sp, #8
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000428 	.word	0x20000428
 8002740:	20000c80 	.word	0x20000c80
 8002744:	200008bc 	.word	0x200008bc
 8002748:	2000043c 	.word	0x2000043c
 800274c:	20000ca4 	.word	0x20000ca4
 8002750:	20000c38 	.word	0x20000c38
 8002754:	20000c20 	.word	0x20000c20
 8002758:	20000020 	.word	0x20000020
 800275c:	0800d4fc 	.word	0x0800d4fc
 8002760:	20000c2c 	.word	0x20000c2c
 8002764:	200004e8 	.word	0x200004e8

08002768 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002780:	4bbe      	ldr	r3, [pc, #760]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 8002782:	0018      	movs	r0, r3
 8002784:	f7fe fca0 	bl	80010c8 <Is_System_Real_Time_Status_Byte>
 8002788:	0003      	movs	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <UART2_RX_transfer_complete_callback+0x1a>
 800278e:	f000 fc0c 	bl	8002faa <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002792:	4bbb      	ldr	r3, [pc, #748]	@ (8002a80 <UART2_RX_transfer_complete_callback+0x308>)
 8002794:	2180      	movs	r1, #128	@ 0x80
 8002796:	0018      	movs	r0, r3
 8002798:	f003 f826 	bl	80057e8 <Get_Status_Bit>
 800279c:	0003      	movs	r3, r0
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d001      	beq.n	80027a6 <UART2_RX_transfer_complete_callback+0x2e>
 80027a2:	f001 f831 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 80027a6:	4bb7      	ldr	r3, [pc, #732]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d159      	bne.n	8002864 <UART2_RX_transfer_complete_callback+0xec>
 80027b0:	4bb5      	ldr	r3, [pc, #724]	@ (8002a88 <UART2_RX_transfer_complete_callback+0x310>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d154      	bne.n	8002864 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 80027ba:	4bb4      	ldr	r3, [pc, #720]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d013      	beq.n	80027ec <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 80027c4:	4bb1      	ldr	r3, [pc, #708]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00e      	beq.n	80027ec <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 80027ce:	4baf      	ldr	r3, [pc, #700]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b06      	cmp	r3, #6
 80027d6:	d009      	beq.n	80027ec <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 80027d8:	4bac      	ldr	r3, [pc, #688]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b03      	cmp	r3, #3
 80027e0:	d004      	beq.n	80027ec <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 80027e2:	4baa      	ldr	r3, [pc, #680]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d13b      	bne.n	8002864 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80027ec:	4ba3      	ldr	r3, [pc, #652]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2bfa      	cmp	r3, #250	@ 0xfa
 80027f4:	d10b      	bne.n	800280e <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 80027f6:	4ba5      	ldr	r3, [pc, #660]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027f8:	4aa4      	ldr	r2, [pc, #656]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80027fa:	7812      	ldrb	r2, [r2, #0]
 80027fc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 80027fe:	4ba3      	ldr	r3, [pc, #652]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002800:	2209      	movs	r2, #9
 8002802:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002804:	4ba2      	ldr	r3, [pc, #648]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 800280a:	f000 fffa 	bl	8003802 <UART2_RX_transfer_complete_callback+0x108a>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800280e:	4b9b      	ldr	r3, [pc, #620]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2bf8      	cmp	r3, #248	@ 0xf8
 8002816:	d001      	beq.n	800281c <UART2_RX_transfer_complete_callback+0xa4>
 8002818:	f000 fff3 	bl	8003802 <UART2_RX_transfer_complete_callback+0x108a>

					speed_fsm.prev_state = speed_fsm.current_state;
 800281c:	4b9b      	ldr	r3, [pc, #620]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 800281e:	4a9b      	ldr	r2, [pc, #620]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002820:	7812      	ldrb	r2, [r2, #0]
 8002822:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002824:	4b99      	ldr	r3, [pc, #612]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002826:	220b      	movs	r2, #11
 8002828:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 800282a:	4b99      	ldr	r3, [pc, #612]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002830:	2380      	movs	r3, #128	@ 0x80
 8002832:	0099      	lsls	r1, r3, #2
 8002834:	23a0      	movs	r3, #160	@ 0xa0
 8002836:	05db      	lsls	r3, r3, #23
 8002838:	2200      	movs	r2, #0
 800283a:	0018      	movs	r0, r3
 800283c:	f005 f897 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002840:	4b94      	ldr	r3, [pc, #592]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 8002842:	2201      	movs	r2, #1
 8002844:	2140      	movs	r1, #64	@ 0x40
 8002846:	0018      	movs	r0, r3
 8002848:	f005 f891 	bl	800796e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 800284c:	4b8d      	ldr	r3, [pc, #564]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002852:	4b8f      	ldr	r3, [pc, #572]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 800285e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002860:	f000 ffcf 	bl	8003802 <UART2_RX_transfer_complete_callback+0x108a>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002864:	4b89      	ldr	r3, [pc, #548]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b09      	cmp	r3, #9
 800286c:	d123      	bne.n	80028b6 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800286e:	4b83      	ldr	r3, [pc, #524]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2bf8      	cmp	r3, #248	@ 0xf8
 8002876:	d001      	beq.n	800287c <UART2_RX_transfer_complete_callback+0x104>
 8002878:	f000 ffc6 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800287c:	2380      	movs	r3, #128	@ 0x80
 800287e:	0099      	lsls	r1, r3, #2
 8002880:	23a0      	movs	r3, #160	@ 0xa0
 8002882:	05db      	lsls	r3, r3, #23
 8002884:	2200      	movs	r2, #0
 8002886:	0018      	movs	r0, r3
 8002888:	f005 f871 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800288c:	4b81      	ldr	r3, [pc, #516]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 800288e:	2201      	movs	r2, #1
 8002890:	2140      	movs	r1, #64	@ 0x40
 8002892:	0018      	movs	r0, r3
 8002894:	f005 f86b 	bl	800796e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002898:	4b7a      	ldr	r3, [pc, #488]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800289e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	4b79      	ldr	r3, [pc, #484]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80028aa:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 80028ac:	4b77      	ldr	r3, [pc, #476]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80028ae:	220a      	movs	r2, #10
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	f000 ffa9 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 80028b6:	4b75      	ldr	r3, [pc, #468]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b0a      	cmp	r3, #10
 80028be:	d145      	bne.n	800294c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80028c0:	4b6e      	ldr	r3, [pc, #440]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2bf8      	cmp	r3, #248	@ 0xf8
 80028c8:	d001      	beq.n	80028ce <UART2_RX_transfer_complete_callback+0x156>
 80028ca:	f000 ff9d 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 80028ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 80028d0:	2201      	movs	r2, #1
 80028d2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80028d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b6c      	ldr	r3, [pc, #432]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80028e0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80028e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b0b      	cmp	r3, #11
 80028ea:	d80f      	bhi.n	800290c <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	0099      	lsls	r1, r3, #2
 80028f0:	23a0      	movs	r3, #160	@ 0xa0
 80028f2:	05db      	lsls	r3, r3, #23
 80028f4:	2200      	movs	r2, #0
 80028f6:	0018      	movs	r0, r3
 80028f8:	f005 f839 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80028fc:	4b65      	ldr	r3, [pc, #404]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 80028fe:	2201      	movs	r2, #1
 8002900:	2140      	movs	r1, #64	@ 0x40
 8002902:	0018      	movs	r0, r3
 8002904:	f005 f833 	bl	800796e <HAL_GPIO_WritePin>
 8002908:	f000 ff7e 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 800290c:	4b60      	ldr	r3, [pc, #384]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b18      	cmp	r3, #24
 8002914:	d80f      	bhi.n	8002936 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	0099      	lsls	r1, r3, #2
 800291a:	23a0      	movs	r3, #160	@ 0xa0
 800291c:	05db      	lsls	r3, r3, #23
 800291e:	2201      	movs	r2, #1
 8002920:	0018      	movs	r0, r3
 8002922:	f005 f824 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002926:	4b5b      	ldr	r3, [pc, #364]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 8002928:	2200      	movs	r2, #0
 800292a:	2140      	movs	r1, #64	@ 0x40
 800292c:	0018      	movs	r0, r3
 800292e:	f005 f81e 	bl	800796e <HAL_GPIO_WritePin>
 8002932:	f000 ff69 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002936:	4b55      	ldr	r3, [pc, #340]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002938:	220a      	movs	r2, #10
 800293a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800293c:	4b53      	ldr	r3, [pc, #332]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 800293e:	2208      	movs	r2, #8
 8002940:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002942:	4b53      	ldr	r3, [pc, #332]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002944:	2201      	movs	r2, #1
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	f000 ff5e 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 800294c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b0b      	cmp	r3, #11
 8002954:	d142      	bne.n	80029dc <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002956:	4b49      	ldr	r3, [pc, #292]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2bf8      	cmp	r3, #248	@ 0xf8
 800295e:	d001      	beq.n	8002964 <UART2_RX_transfer_complete_callback+0x1ec>
 8002960:	f000 ff52 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002964:	4b47      	ldr	r3, [pc, #284]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b46      	ldr	r3, [pc, #280]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002976:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002978:	4b45      	ldr	r3, [pc, #276]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b0b      	cmp	r3, #11
 8002980:	d80f      	bhi.n	80029a2 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	0099      	lsls	r1, r3, #2
 8002986:	23a0      	movs	r3, #160	@ 0xa0
 8002988:	05db      	lsls	r3, r3, #23
 800298a:	2200      	movs	r2, #0
 800298c:	0018      	movs	r0, r3
 800298e:	f004 ffee 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002992:	4b40      	ldr	r3, [pc, #256]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 8002994:	2201      	movs	r2, #1
 8002996:	2140      	movs	r1, #64	@ 0x40
 8002998:	0018      	movs	r0, r3
 800299a:	f004 ffe8 	bl	800796e <HAL_GPIO_WritePin>
 800299e:	f000 ff33 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 80029a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b18      	cmp	r3, #24
 80029aa:	d80f      	bhi.n	80029cc <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80029ac:	2380      	movs	r3, #128	@ 0x80
 80029ae:	0099      	lsls	r1, r3, #2
 80029b0:	23a0      	movs	r3, #160	@ 0xa0
 80029b2:	05db      	lsls	r3, r3, #23
 80029b4:	2201      	movs	r2, #1
 80029b6:	0018      	movs	r0, r3
 80029b8:	f004 ffd9 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80029bc:	4b35      	ldr	r3, [pc, #212]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 80029be:	2200      	movs	r2, #0
 80029c0:	2140      	movs	r1, #64	@ 0x40
 80029c2:	0018      	movs	r0, r3
 80029c4:	f004 ffd3 	bl	800796e <HAL_GPIO_WritePin>
 80029c8:	f000 ff1e 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 80029cc:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80029d2:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80029d4:	220c      	movs	r2, #12
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	f000 ff16 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d158      	bne.n	8002a98 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80029e6:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	2bf8      	cmp	r3, #248	@ 0xf8
 80029ee:	d138      	bne.n	8002a62 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 80029f0:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <UART2_RX_transfer_complete_callback+0x30c>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002a02:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002a04:	4b22      	ldr	r3, [pc, #136]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b0b      	cmp	r3, #11
 8002a0c:	d80f      	bhi.n	8002a2e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	0099      	lsls	r1, r3, #2
 8002a12:	23a0      	movs	r3, #160	@ 0xa0
 8002a14:	05db      	lsls	r3, r3, #23
 8002a16:	2200      	movs	r2, #0
 8002a18:	0018      	movs	r0, r3
 8002a1a:	f004 ffa8 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	2140      	movs	r1, #64	@ 0x40
 8002a24:	0018      	movs	r0, r3
 8002a26:	f004 ffa2 	bl	800796e <HAL_GPIO_WritePin>
 8002a2a:	f000 feed 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002a2e:	4b18      	ldr	r3, [pc, #96]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b18      	cmp	r3, #24
 8002a36:	d80f      	bhi.n	8002a58 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002a38:	2380      	movs	r3, #128	@ 0x80
 8002a3a:	0099      	lsls	r1, r3, #2
 8002a3c:	23a0      	movs	r3, #160	@ 0xa0
 8002a3e:	05db      	lsls	r3, r3, #23
 8002a40:	2201      	movs	r2, #1
 8002a42:	0018      	movs	r0, r3
 8002a44:	f004 ff93 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002a48:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <UART2_RX_transfer_complete_callback+0x31c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f004 ff8d 	bl	800796e <HAL_GPIO_WritePin>
 8002a54:	f000 fed8 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002a58:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <UART2_RX_transfer_complete_callback+0x318>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	f000 fed3 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002a62:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <UART2_RX_transfer_complete_callback+0x304>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a6a:	d001      	beq.n	8002a70 <UART2_RX_transfer_complete_callback+0x2f8>
 8002a6c:	f000 fecc 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002a70:	4b06      	ldr	r3, [pc, #24]	@ (8002a8c <UART2_RX_transfer_complete_callback+0x314>)
 8002a72:	220d      	movs	r2, #13
 8002a74:	701a      	strb	r2, [r3, #0]
 8002a76:	f000 fec7 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	200004cc 	.word	0x200004cc
 8002a80:	20000c20 	.word	0x20000c20
 8002a84:	20000cc8 	.word	0x20000cc8
 8002a88:	2000043c 	.word	0x2000043c
 8002a8c:	20000428 	.word	0x20000428
 8002a90:	20000c1e 	.word	0x20000c1e
 8002a94:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8002a98:	4bdc      	ldr	r3, [pc, #880]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b0d      	cmp	r3, #13
 8002aa0:	d160      	bne.n	8002b64 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002aa2:	4bdb      	ldr	r3, [pc, #876]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2bf8      	cmp	r3, #248	@ 0xf8
 8002aaa:	d001      	beq.n	8002ab0 <UART2_RX_transfer_complete_callback+0x338>
 8002aac:	f000 feac 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002ab0:	4bd8      	ldr	r3, [pc, #864]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x69c>)
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f001 fae8 	bl	8004088 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	23a0      	movs	r3, #160	@ 0xa0
 8002abe:	05db      	lsls	r3, r3, #23
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f004 ff53 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002ac8:	4bd3      	ldr	r3, [pc, #844]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	2140      	movs	r1, #64	@ 0x40
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f004 ff4d 	bl	800796e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	0099      	lsls	r1, r3, #2
 8002ad8:	23a0      	movs	r3, #160	@ 0xa0
 8002ada:	05db      	lsls	r3, r3, #23
 8002adc:	2200      	movs	r2, #0
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f004 ff45 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002ae4:	4bcc      	ldr	r3, [pc, #816]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2140      	movs	r1, #64	@ 0x40
 8002aea:	0018      	movs	r0, r3
 8002aec:	f004 ff3f 	bl	800796e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002af0:	4bca      	ldr	r3, [pc, #808]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 8002af6:	4bca      	ldr	r3, [pc, #808]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8002afc:	4bc3      	ldr	r3, [pc, #780]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002afe:	220d      	movs	r2, #13
 8002b00:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002b02:	4bc2      	ldr	r3, [pc, #776]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002b04:	2208      	movs	r2, #8
 8002b06:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002b08:	4bc6      	ldr	r3, [pc, #792]	@ (8002e24 <UART2_RX_transfer_complete_callback+0x6ac>)
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f002 fe04 	bl	800571a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002b12:	4bc5      	ldr	r3, [pc, #788]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002b18:	4ac4      	ldr	r2, [pc, #784]	@ (8002e2c <UART2_RX_transfer_complete_callback+0x6b4>)
 8002b1a:	4bbe      	ldr	r3, [pc, #760]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b1c:	0011      	movs	r1, r2
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f001 f96c 	bl	8003dfc <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002b24:	4ac2      	ldr	r2, [pc, #776]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b26:	4bbb      	ldr	r3, [pc, #748]	@ (8002e14 <UART2_RX_transfer_complete_callback+0x69c>)
 8002b28:	0011      	movs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f001 f966 	bl	8003dfc <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002b30:	4bc0      	ldr	r3, [pc, #768]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b32:	2108      	movs	r1, #8
 8002b34:	0018      	movs	r0, r3
 8002b36:	f002 fe6b 	bl	8005810 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002b3a:	4bbd      	ldr	r3, [pc, #756]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f001 face 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002b44:	4abc      	ldr	r2, [pc, #752]	@ (8002e38 <UART2_RX_transfer_complete_callback+0x6c0>)
 8002b46:	4bba      	ldr	r3, [pc, #744]	@ (8002e30 <UART2_RX_transfer_complete_callback+0x6b8>)
 8002b48:	0011      	movs	r1, r2
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f001 fbbe 	bl	80042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002b50:	4bba      	ldr	r3, [pc, #744]	@ (8002e3c <UART2_RX_transfer_complete_callback+0x6c4>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	001a      	movs	r2, r3
 8002b56:	49ba      	ldr	r1, [pc, #744]	@ (8002e40 <UART2_RX_transfer_complete_callback+0x6c8>)
 8002b58:	4bba      	ldr	r3, [pc, #744]	@ (8002e44 <UART2_RX_transfer_complete_callback+0x6cc>)
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f003 fafc 	bl	8006158 <HAL_ADC_Start_DMA>
 8002b60:	f000 fe52 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8002b64:	4ba9      	ldr	r3, [pc, #676]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d146      	bne.n	8002bfc <UART2_RX_transfer_complete_callback+0x484>
 8002b6e:	4bb1      	ldr	r3, [pc, #708]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002b70:	2120      	movs	r1, #32
 8002b72:	0018      	movs	r0, r3
 8002b74:	f002 fe38 	bl	80057e8 <Get_Status_Bit>
 8002b78:	1e03      	subs	r3, r0, #0
 8002b7a:	d13f      	bne.n	8002bfc <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002b7c:	4ba4      	ldr	r3, [pc, #656]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2bf8      	cmp	r3, #248	@ 0xf8
 8002b84:	d001      	beq.n	8002b8a <UART2_RX_transfer_complete_callback+0x412>
 8002b86:	f000 fe3f 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002b8a:	4ba4      	ldr	r3, [pc, #656]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002b90:	4ba3      	ldr	r3, [pc, #652]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	3301      	adds	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4ba1      	ldr	r3, [pc, #644]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002b9c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002b9e:	4ba0      	ldr	r3, [pc, #640]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b0b      	cmp	r3, #11
 8002ba6:	d80f      	bhi.n	8002bc8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002ba8:	2380      	movs	r3, #128	@ 0x80
 8002baa:	0099      	lsls	r1, r3, #2
 8002bac:	23a0      	movs	r3, #160	@ 0xa0
 8002bae:	05db      	lsls	r3, r3, #23
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f004 fedb 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002bb8:	4b97      	ldr	r3, [pc, #604]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2140      	movs	r1, #64	@ 0x40
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f004 fed5 	bl	800796e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bc4:	f000 fe20 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002bc8:	4b95      	ldr	r3, [pc, #596]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b18      	cmp	r3, #24
 8002bd0:	d80f      	bhi.n	8002bf2 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	0099      	lsls	r1, r3, #2
 8002bd6:	23a0      	movs	r3, #160	@ 0xa0
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	2201      	movs	r2, #1
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f004 fec6 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002be2:	4b8d      	ldr	r3, [pc, #564]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	2140      	movs	r1, #64	@ 0x40
 8002be8:	0018      	movs	r0, r3
 8002bea:	f004 fec0 	bl	800796e <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bee:	f000 fe0b 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002bf2:	4b8b      	ldr	r3, [pc, #556]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002bf8:	f000 fe06 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8002bfc:	4b83      	ldr	r3, [pc, #524]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d14c      	bne.n	8002ca0 <UART2_RX_transfer_complete_callback+0x528>
 8002c06:	4b88      	ldr	r3, [pc, #544]	@ (8002e28 <UART2_RX_transfer_complete_callback+0x6b0>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d147      	bne.n	8002ca0 <UART2_RX_transfer_complete_callback+0x528>
 8002c10:	4b88      	ldr	r3, [pc, #544]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c12:	2120      	movs	r1, #32
 8002c14:	0018      	movs	r0, r3
 8002c16:	f002 fde7 	bl	80057e8 <Get_Status_Bit>
 8002c1a:	0003      	movs	r3, r0
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d13f      	bne.n	8002ca0 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c20:	4b7b      	ldr	r3, [pc, #492]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2bf8      	cmp	r3, #248	@ 0xf8
 8002c28:	d11e      	bne.n	8002c68 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 8002c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002c30:	4b7b      	ldr	r3, [pc, #492]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	3301      	adds	r3, #1
 8002c38:	b2da      	uxtb	r2, r3
 8002c3a:	4b79      	ldr	r3, [pc, #484]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c3c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 8002c3e:	4b77      	ldr	r3, [pc, #476]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002c40:	2201      	movs	r2, #1
 8002c42:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8002c44:	4b71      	ldr	r3, [pc, #452]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002c46:	2210      	movs	r2, #16
 8002c48:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c4a:	4b70      	ldr	r3, [pc, #448]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c50:	4b78      	ldr	r3, [pc, #480]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c52:	2120      	movs	r1, #32
 8002c54:	0018      	movs	r0, r3
 8002c56:	f002 fded 	bl	8005834 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c5a:	4b76      	ldr	r3, [pc, #472]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c5c:	2140      	movs	r1, #64	@ 0x40
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f002 fde8 	bl	8005834 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c64:	f000 fdcf 	bl	8003806 <UART2_RX_transfer_complete_callback+0x108e>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002c68:	4b69      	ldr	r3, [pc, #420]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2bfa      	cmp	r3, #250	@ 0xfa
 8002c70:	d001      	beq.n	8002c76 <UART2_RX_transfer_complete_callback+0x4fe>
 8002c72:	f000 fdc8 	bl	8003806 <UART2_RX_transfer_complete_callback+0x108e>

					MIDI_CLK_tag = 0; //just in case
 8002c76:	4b6a      	ldr	r3, [pc, #424]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 8002c7c:	4b63      	ldr	r3, [pc, #396]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002c7e:	220e      	movs	r2, #14
 8002c80:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002c82:	4b62      	ldr	r3, [pc, #392]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002c84:	2208      	movs	r2, #8
 8002c86:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8002c88:	4b6a      	ldr	r3, [pc, #424]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f002 fdd1 	bl	8005834 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8002c92:	4b68      	ldr	r3, [pc, #416]	@ (8002e34 <UART2_RX_transfer_complete_callback+0x6bc>)
 8002c94:	2140      	movs	r1, #64	@ 0x40
 8002c96:	0018      	movs	r0, r3
 8002c98:	f002 fdcc 	bl	8005834 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002c9c:	f000 fdb3 	bl	8003806 <UART2_RX_transfer_complete_callback+0x108e>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8002ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b0e      	cmp	r3, #14
 8002ca8:	d123      	bne.n	8002cf2 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2bf8      	cmp	r3, #248	@ 0xf8
 8002cb2:	d001      	beq.n	8002cb8 <UART2_RX_transfer_complete_callback+0x540>
 8002cb4:	f000 fda8 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	0099      	lsls	r1, r3, #2
 8002cbc:	23a0      	movs	r3, #160	@ 0xa0
 8002cbe:	05db      	lsls	r3, r3, #23
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f004 fe53 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002cc8:	4b53      	ldr	r3, [pc, #332]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	2140      	movs	r1, #64	@ 0x40
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f004 fe4d 	bl	800796e <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002cd4:	4b51      	ldr	r3, [pc, #324]	@ (8002e1c <UART2_RX_transfer_complete_callback+0x6a4>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002cda:	4b51      	ldr	r3, [pc, #324]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b4e      	ldr	r3, [pc, #312]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002ce6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002ce8:	4b48      	ldr	r3, [pc, #288]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002cea:	220f      	movs	r2, #15
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	f000 fd8b 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 8002cf2:	4b46      	ldr	r3, [pc, #280]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d142      	bne.n	8002d82 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002cfc:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d04:	d001      	beq.n	8002d0a <UART2_RX_transfer_complete_callback+0x592>
 8002d06:	f000 fd7f 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					MIDI_CLK_tag++;
 8002d0a:	4b45      	ldr	r3, [pc, #276]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	3301      	adds	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b42      	ldr	r3, [pc, #264]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d16:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002d18:	4b41      	ldr	r3, [pc, #260]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b0b      	cmp	r3, #11
 8002d20:	d80f      	bhi.n	8002d42 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	0099      	lsls	r1, r3, #2
 8002d26:	23a0      	movs	r3, #160	@ 0xa0
 8002d28:	05db      	lsls	r3, r3, #23
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f004 fe1e 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002d32:	4b39      	ldr	r3, [pc, #228]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f004 fe18 	bl	800796e <HAL_GPIO_WritePin>
 8002d3e:	f000 fd63 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002d42:	4b37      	ldr	r3, [pc, #220]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b18      	cmp	r3, #24
 8002d4a:	d80f      	bhi.n	8002d6c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	0099      	lsls	r1, r3, #2
 8002d50:	23a0      	movs	r3, #160	@ 0xa0
 8002d52:	05db      	lsls	r3, r3, #23
 8002d54:	2201      	movs	r2, #1
 8002d56:	0018      	movs	r0, r3
 8002d58:	f004 fe09 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2140      	movs	r1, #64	@ 0x40
 8002d62:	0018      	movs	r0, r3
 8002d64:	f004 fe03 	bl	800796e <HAL_GPIO_WritePin>
 8002d68:	f000 fd4e 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 8002d6c:	4b27      	ldr	r3, [pc, #156]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002d6e:	220f      	movs	r2, #15
 8002d70:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002d72:	4b26      	ldr	r3, [pc, #152]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002d74:	2208      	movs	r2, #8
 8002d76:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8002d78:	4b29      	ldr	r3, [pc, #164]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
 8002d7e:	f000 fd43 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8002d82:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b10      	cmp	r3, #16
 8002d8a:	d15d      	bne.n	8002e48 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002d8c:	4b20      	ldr	r3, [pc, #128]	@ (8002e10 <UART2_RX_transfer_complete_callback+0x698>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2bf8      	cmp	r3, #248	@ 0xf8
 8002d94:	d001      	beq.n	8002d9a <UART2_RX_transfer_complete_callback+0x622>
 8002d96:	f000 fd37 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 8002d9a:	4b21      	ldr	r3, [pc, #132]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002da6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002da8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b0b      	cmp	r3, #11
 8002db0:	d80f      	bhi.n	8002dd2 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002db2:	2380      	movs	r3, #128	@ 0x80
 8002db4:	0099      	lsls	r1, r3, #2
 8002db6:	23a0      	movs	r3, #160	@ 0xa0
 8002db8:	05db      	lsls	r3, r3, #23
 8002dba:	2200      	movs	r2, #0
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f004 fdd6 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	2140      	movs	r1, #64	@ 0x40
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f004 fdd0 	bl	800796e <HAL_GPIO_WritePin>
 8002dce:	f000 fd1b 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002dd2:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b18      	cmp	r3, #24
 8002dda:	d80f      	bhi.n	8002dfc <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	23a0      	movs	r3, #160	@ 0xa0
 8002de2:	05db      	lsls	r3, r3, #23
 8002de4:	2201      	movs	r2, #1
 8002de6:	0018      	movs	r0, r3
 8002de8:	f004 fdc1 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <UART2_RX_transfer_complete_callback+0x6a0>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	2140      	movs	r1, #64	@ 0x40
 8002df2:	0018      	movs	r0, r3
 8002df4:	f004 fdbb 	bl	800796e <HAL_GPIO_WritePin>
 8002df8:	f000 fd06 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <UART2_RX_transfer_complete_callback+0x694>)
 8002dfe:	2211      	movs	r2, #17
 8002e00:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <UART2_RX_transfer_complete_callback+0x6a8>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	f000 fcfe 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
 8002e0c:	20000428 	.word	0x20000428
 8002e10:	200004cc 	.word	0x200004cc
 8002e14:	20000c80 	.word	0x20000c80
 8002e18:	50000800 	.word	0x50000800
 8002e1c:	20000cc8 	.word	0x20000cc8
 8002e20:	20000c1e 	.word	0x20000c1e
 8002e24:	200008bc 	.word	0x200008bc
 8002e28:	2000043c 	.word	0x2000043c
 8002e2c:	20000ca4 	.word	0x20000ca4
 8002e30:	20000c38 	.word	0x20000c38
 8002e34:	20000c20 	.word	0x20000c20
 8002e38:	20000020 	.word	0x20000020
 8002e3c:	0800d4fc 	.word	0x0800d4fc
 8002e40:	20000c2c 	.word	0x20000c2c
 8002e44:	200004e8 	.word	0x200004e8
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8002e48:	4bd9      	ldr	r3, [pc, #868]	@ (80031b0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b11      	cmp	r3, #17
 8002e50:	d146      	bne.n	8002ee0 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002e52:	4bd8      	ldr	r3, [pc, #864]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2bf8      	cmp	r3, #248	@ 0xf8
 8002e5a:	d135      	bne.n	8002ec8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 8002e5c:	4bd6      	ldr	r3, [pc, #856]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4bd4      	ldr	r3, [pc, #848]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e68:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002e6a:	4bd3      	ldr	r3, [pc, #844]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	2b0b      	cmp	r3, #11
 8002e72:	d80f      	bhi.n	8002e94 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002e74:	2380      	movs	r3, #128	@ 0x80
 8002e76:	0099      	lsls	r1, r3, #2
 8002e78:	23a0      	movs	r3, #160	@ 0xa0
 8002e7a:	05db      	lsls	r3, r3, #23
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f004 fd75 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002e84:	4bcd      	ldr	r3, [pc, #820]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa44>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	2140      	movs	r1, #64	@ 0x40
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f004 fd6f 	bl	800796e <HAL_GPIO_WritePin>
 8002e90:	f000 fcba 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else if(MIDI_CLK_tag < 25){
 8002e94:	4bc8      	ldr	r3, [pc, #800]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b18      	cmp	r3, #24
 8002e9c:	d80f      	bhi.n	8002ebe <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	0099      	lsls	r1, r3, #2
 8002ea2:	23a0      	movs	r3, #160	@ 0xa0
 8002ea4:	05db      	lsls	r3, r3, #23
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f004 fd60 	bl	800796e <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002eae:	4bc3      	ldr	r3, [pc, #780]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa44>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2140      	movs	r1, #64	@ 0x40
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f004 fd5a 	bl	800796e <HAL_GPIO_WritePin>
 8002eba:	f000 fca5 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					else{

						MIDI_CLK_tag = 1;
 8002ebe:	4bbe      	ldr	r3, [pc, #760]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	701a      	strb	r2, [r3, #0]
 8002ec4:	f000 fca0 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ec8:	4bba      	ldr	r3, [pc, #744]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2bfa      	cmp	r3, #250	@ 0xfa
 8002ed0:	d001      	beq.n	8002ed6 <UART2_RX_transfer_complete_callback+0x75e>
 8002ed2:	f000 fc99 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002ed6:	4bb6      	ldr	r3, [pc, #728]	@ (80031b0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002ed8:	2212      	movs	r2, #18
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	f000 fc94 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 8002ee0:	4bb3      	ldr	r3, [pc, #716]	@ (80031b0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b12      	cmp	r3, #18
 8002ee8:	d001      	beq.n	8002eee <UART2_RX_transfer_complete_callback+0x776>
 8002eea:	f000 fc8d 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002eee:	4bb1      	ldr	r3, [pc, #708]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef6:	d001      	beq.n	8002efc <UART2_RX_transfer_complete_callback+0x784>
 8002ef8:	f000 fc86 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8002efc:	4bb0      	ldr	r3, [pc, #704]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002efe:	0018      	movs	r0, r3
 8002f00:	f001 f8c2 	bl	8004088 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002f04:	2380      	movs	r3, #128	@ 0x80
 8002f06:	0099      	lsls	r1, r3, #2
 8002f08:	23a0      	movs	r3, #160	@ 0xa0
 8002f0a:	05db      	lsls	r3, r3, #23
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f004 fd2d 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002f14:	4ba9      	ldr	r3, [pc, #676]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa44>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	2140      	movs	r1, #64	@ 0x40
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f004 fd27 	bl	800796e <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	23a0      	movs	r3, #160	@ 0xa0
 8002f26:	05db      	lsls	r3, r3, #23
 8002f28:	2200      	movs	r2, #0
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	f004 fd1f 	bl	800796e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f30:	4ba2      	ldr	r3, [pc, #648]	@ (80031bc <UART2_RX_transfer_complete_callback+0xa44>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	2140      	movs	r1, #64	@ 0x40
 8002f36:	0018      	movs	r0, r3
 8002f38:	f004 fd19 	bl	800796e <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 8002f3c:	4b9c      	ldr	r3, [pc, #624]	@ (80031b0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002f3e:	2212      	movs	r2, #18
 8002f40:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8002f42:	4b9b      	ldr	r3, [pc, #620]	@ (80031b0 <UART2_RX_transfer_complete_callback+0xa38>)
 8002f44:	2208      	movs	r2, #8
 8002f46:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8002f48:	4b9b      	ldr	r3, [pc, #620]	@ (80031b8 <UART2_RX_transfer_complete_callback+0xa40>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 8002f4e:	4b9d      	ldr	r3, [pc, #628]	@ (80031c4 <UART2_RX_transfer_complete_callback+0xa4c>)
 8002f50:	2100      	movs	r1, #0
 8002f52:	0018      	movs	r0, r3
 8002f54:	f002 fbe1 	bl	800571a <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8002f58:	4b9b      	ldr	r3, [pc, #620]	@ (80031c8 <UART2_RX_transfer_complete_callback+0xa50>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002f5e:	4a9b      	ldr	r2, [pc, #620]	@ (80031cc <UART2_RX_transfer_complete_callback+0xa54>)
 8002f60:	4b97      	ldr	r3, [pc, #604]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002f62:	0011      	movs	r1, r2
 8002f64:	0018      	movs	r0, r3
 8002f66:	f000 ff49 	bl	8003dfc <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8002f6a:	4a99      	ldr	r2, [pc, #612]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f6c:	4b94      	ldr	r3, [pc, #592]	@ (80031c0 <UART2_RX_transfer_complete_callback+0xa48>)
 8002f6e:	0011      	movs	r1, r2
 8002f70:	0018      	movs	r0, r3
 8002f72:	f000 ff43 	bl	8003dfc <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8002f76:	4b97      	ldr	r3, [pc, #604]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8002f78:	2108      	movs	r1, #8
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f002 fc48 	bl	8005810 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002f80:	4b93      	ldr	r3, [pc, #588]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f82:	2100      	movs	r1, #0
 8002f84:	0018      	movs	r0, r3
 8002f86:	f001 f8ab 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002f8a:	4a93      	ldr	r2, [pc, #588]	@ (80031d8 <UART2_RX_transfer_complete_callback+0xa60>)
 8002f8c:	4b90      	ldr	r3, [pc, #576]	@ (80031d0 <UART2_RX_transfer_complete_callback+0xa58>)
 8002f8e:	0011      	movs	r1, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f001 f99b 	bl	80042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002f96:	4b91      	ldr	r3, [pc, #580]	@ (80031dc <UART2_RX_transfer_complete_callback+0xa64>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	4990      	ldr	r1, [pc, #576]	@ (80031e0 <UART2_RX_transfer_complete_callback+0xa68>)
 8002f9e:	4b91      	ldr	r3, [pc, #580]	@ (80031e4 <UART2_RX_transfer_complete_callback+0xa6c>)
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f003 f8d9 	bl	8006158 <HAL_ADC_Start_DMA>
 8002fa6:	f000 fc2f 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 8002faa:	4b8f      	ldr	r3, [pc, #572]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d000      	beq.n	8002fb6 <UART2_RX_transfer_complete_callback+0x83e>
 8002fb4:	e25d      	b.n	8003472 <UART2_RX_transfer_complete_callback+0xcfa>

			if(running_status_byte == 0){
 8002fb6:	4b8d      	ldr	r3, [pc, #564]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d000      	beq.n	8002fc2 <UART2_RX_transfer_complete_callback+0x84a>
 8002fc0:	e099      	b.n	80030f6 <UART2_RX_transfer_complete_callback+0x97e>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8002fc2:	4b8b      	ldr	r3, [pc, #556]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa78>)
 8002fc4:	0018      	movs	r0, r3
 8002fc6:	f7fe f81c 	bl	8001002 <Is_Data_Buffer_Empty>
 8002fca:	0003      	movs	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <UART2_RX_transfer_complete_callback+0x85c>
 8002fd0:	f000 fc1a 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					if(Is_Status_Byte(rx_buffer) == YES){
 8002fd4:	4b77      	ldr	r3, [pc, #476]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd fed2 	bl	8000d80 <Is_Status_Byte>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <UART2_RX_transfer_complete_callback+0x86e>
 8002fe2:	f000 fc11 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 8002fe6:	4b73      	ldr	r3, [pc, #460]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd fefb 	bl	8000de4 <Is_PC_Status_Byte>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d130      	bne.n	8003056 <UART2_RX_transfer_complete_callback+0x8de>

							running_status_byte = (uint8_t)*rx_buffer;
 8002ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	4b7c      	ldr	r3, [pc, #496]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 8002ffc:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8002ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa7c>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	4b6b      	ldr	r3, [pc, #428]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003006:	0011      	movs	r1, r2
 8003008:	0018      	movs	r0, r3
 800300a:	f7fd ffd9 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800300e:	0003      	movs	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d10b      	bne.n	800302c <UART2_RX_transfer_complete_callback+0x8b4>

								active_status_byte = (uint8_t)*rx_buffer;
 8003014:	4b67      	ldr	r3, [pc, #412]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b73      	ldr	r3, [pc, #460]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 800301c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800301e:	4b6d      	ldr	r3, [pc, #436]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003020:	2140      	movs	r1, #64	@ 0x40
 8003022:	0018      	movs	r0, r3
 8003024:	f002 fbf4 	bl	8005810 <Set_Status_Bit>
 8003028:	f000 fbee 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800302c:	4b69      	ldr	r3, [pc, #420]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 800302e:	0018      	movs	r0, r3
 8003030:	f7fe f87d 	bl	800112e <Is_OMNI_On>
 8003034:	0003      	movs	r3, r0
 8003036:	2b01      	cmp	r3, #1
 8003038:	d001      	beq.n	800303e <UART2_RX_transfer_complete_callback+0x8c6>
 800303a:	f000 fbe5 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

									active_status_byte = (uint8_t)*rx_buffer;
 800303e:	4b5d      	ldr	r3, [pc, #372]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b68      	ldr	r3, [pc, #416]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 8003046:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003048:	4b62      	ldr	r3, [pc, #392]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 800304a:	2140      	movs	r1, #64	@ 0x40
 800304c:	0018      	movs	r0, r3
 800304e:	f002 fbdf 	bl	8005810 <Set_Status_Bit>
 8003052:	f000 fbd9 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003056:	4b57      	ldr	r3, [pc, #348]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd fedf 	bl	8000e1c <Is_CC_Status_Byte>
 800305e:	0003      	movs	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d130      	bne.n	80030c6 <UART2_RX_transfer_complete_callback+0x94e>

							running_status_byte = (uint8_t)*rx_buffer;
 8003064:	4b53      	ldr	r3, [pc, #332]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4b60      	ldr	r3, [pc, #384]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 800306c:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800306e:	4b61      	ldr	r3, [pc, #388]	@ (80031f4 <UART2_RX_transfer_complete_callback+0xa7c>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b4f      	ldr	r3, [pc, #316]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003076:	0011      	movs	r1, r2
 8003078:	0018      	movs	r0, r3
 800307a:	f7fd ffa1 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800307e:	0003      	movs	r3, r0
 8003080:	2b01      	cmp	r3, #1
 8003082:	d10b      	bne.n	800309c <UART2_RX_transfer_complete_callback+0x924>

								active_status_byte = (uint8_t)*rx_buffer;
 8003084:	4b4b      	ldr	r3, [pc, #300]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b57      	ldr	r3, [pc, #348]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 800308c:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800308e:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003090:	2140      	movs	r1, #64	@ 0x40
 8003092:	0018      	movs	r0, r3
 8003094:	f002 fbbc 	bl	8005810 <Set_Status_Bit>
 8003098:	f000 fbb6 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 800309e:	0018      	movs	r0, r3
 80030a0:	f7fe f845 	bl	800112e <Is_OMNI_On>
 80030a4:	0003      	movs	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <UART2_RX_transfer_complete_callback+0x936>
 80030aa:	f000 fbad 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

									active_status_byte = (uint8_t)*rx_buffer;
 80030ae:	4b41      	ldr	r3, [pc, #260]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b4c      	ldr	r3, [pc, #304]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 80030b6:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80030b8:	4b46      	ldr	r3, [pc, #280]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030ba:	2140      	movs	r1, #64	@ 0x40
 80030bc:	0018      	movs	r0, r3
 80030be:	f002 fba7 	bl	8005810 <Set_Status_Bit>
 80030c2:	f000 fba1 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80030c6:	4b3b      	ldr	r3, [pc, #236]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7fd ff69 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80030ce:	0003      	movs	r3, r0
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d001      	beq.n	80030d8 <UART2_RX_transfer_complete_callback+0x960>
 80030d4:	f000 fb98 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							active_status_byte = (uint8_t)*rx_buffer;
 80030d8:	4b36      	ldr	r3, [pc, #216]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b42      	ldr	r3, [pc, #264]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 80030e0:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 80030e2:	4b42      	ldr	r3, [pc, #264]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80030e8:	4b3a      	ldr	r3, [pc, #232]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 80030ea:	2140      	movs	r1, #64	@ 0x40
 80030ec:	0018      	movs	r0, r3
 80030ee:	f002 fb8f 	bl	8005810 <Set_Status_Bit>
 80030f2:	f000 fb89 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80030f6:	4b3d      	ldr	r3, [pc, #244]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <UART2_RX_transfer_complete_callback+0x98c>
 8003100:	f000 fb82 	bl	8003808 <UART2_RX_transfer_complete_callback+0x1090>

				if(Is_Data_Byte(rx_buffer) == YES){
 8003104:	4b2b      	ldr	r3, [pc, #172]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003106:	0018      	movs	r0, r3
 8003108:	f7fd fe53 	bl	8000db2 <Is_Data_Byte>
 800310c:	0003      	movs	r3, r0
 800310e:	2b01      	cmp	r3, #1
 8003110:	d000      	beq.n	8003114 <UART2_RX_transfer_complete_callback+0x99c>
 8003112:	e124      	b.n	800335e <UART2_RX_transfer_complete_callback+0xbe6>

					Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003114:	4b2f      	ldr	r3, [pc, #188]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003116:	2140      	movs	r1, #64	@ 0x40
 8003118:	0018      	movs	r0, r3
 800311a:	f002 fb79 	bl	8005810 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 800311e:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 8003120:	0018      	movs	r0, r3
 8003122:	f7fd fe5f 	bl	8000de4 <Is_PC_Status_Byte>
 8003126:	0003      	movs	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d128      	bne.n	800317e <UART2_RX_transfer_complete_callback+0xa06>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800312c:	4b30      	ldr	r3, [pc, #192]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa78>)
 800312e:	0018      	movs	r0, r3
 8003130:	f7fd ff67 	bl	8001002 <Is_Data_Buffer_Empty>
 8003134:	0003      	movs	r3, r0
 8003136:	2b01      	cmp	r3, #1
 8003138:	d000      	beq.n	800313c <UART2_RX_transfer_complete_callback+0x9c4>
 800313a:	e365      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800313c:	4b1d      	ldr	r3, [pc, #116]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 800313e:	2104      	movs	r1, #4
 8003140:	0018      	movs	r0, r3
 8003142:	f7fd ffac 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 8003146:	0003      	movs	r3, r0
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10a      	bne.n	8003162 <UART2_RX_transfer_complete_callback+0x9ea>

								Set_All_Pots_to_PC_Mode();
 800314c:	f7fd fde0 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003150:	4b18      	ldr	r3, [pc, #96]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	b2da      	uxtb	r2, r3
 800315a:	4b27      	ldr	r3, [pc, #156]	@ (80031f8 <UART2_RX_transfer_complete_callback+0xa80>)
 800315c:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 800315e:	f7fd f9df 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003162:	4b23      	ldr	r3, [pc, #140]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa78>)
 8003164:	0018      	movs	r0, r3
 8003166:	f7fd ff7c 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 800316a:	4b1f      	ldr	r3, [pc, #124]	@ (80031e8 <UART2_RX_transfer_complete_callback+0xa70>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]

							//not really required
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003170:	4a18      	ldr	r2, [pc, #96]	@ (80031d4 <UART2_RX_transfer_complete_callback+0xa5c>)
 8003172:	4b22      	ldr	r3, [pc, #136]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa84>)
 8003174:	0011      	movs	r1, r2
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd fff3 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 800317c:	e344      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 800317e:	4b1b      	ldr	r3, [pc, #108]	@ (80031ec <UART2_RX_transfer_complete_callback+0xa74>)
 8003180:	0018      	movs	r0, r3
 8003182:	f7fd fe4b 	bl	8000e1c <Is_CC_Status_Byte>
 8003186:	0003      	movs	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d000      	beq.n	800318e <UART2_RX_transfer_complete_callback+0xa16>
 800318c:	e33c      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800318e:	4b18      	ldr	r3, [pc, #96]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa78>)
 8003190:	0018      	movs	r0, r3
 8003192:	f7fd ff36 	bl	8001002 <Is_Data_Buffer_Empty>
 8003196:	0003      	movs	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d131      	bne.n	8003200 <UART2_RX_transfer_complete_callback+0xa88>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <UART2_RX_transfer_complete_callback+0xa3c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <UART2_RX_transfer_complete_callback+0xa78>)
 80031a4:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80031a6:	4b15      	ldr	r3, [pc, #84]	@ (80031fc <UART2_RX_transfer_complete_callback+0xa84>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	e32c      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	20000428 	.word	0x20000428
 80031b4:	200004cc 	.word	0x200004cc
 80031b8:	20000c1e 	.word	0x20000c1e
 80031bc:	50000800 	.word	0x50000800
 80031c0:	20000c80 	.word	0x20000c80
 80031c4:	200008bc 	.word	0x200008bc
 80031c8:	2000043c 	.word	0x2000043c
 80031cc:	20000ca4 	.word	0x20000ca4
 80031d0:	20000c38 	.word	0x20000c38
 80031d4:	20000c20 	.word	0x20000c20
 80031d8:	20000020 	.word	0x20000020
 80031dc:	0800d4fc 	.word	0x0800d4fc
 80031e0:	20000c2c 	.word	0x20000c2c
 80031e4:	200004e8 	.word	0x200004e8
 80031e8:	200004be 	.word	0x200004be
 80031ec:	200004bf 	.word	0x200004bf
 80031f0:	200004c0 	.word	0x200004c0
 80031f4:	200004bd 	.word	0x200004bd
 80031f8:	200004b0 	.word	0x200004b0
 80031fc:	20000c28 	.word	0x20000c28

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003200:	4bd3      	ldr	r3, [pc, #844]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	4bd3      	ldr	r3, [pc, #844]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003208:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800320a:	4ad3      	ldr	r2, [pc, #844]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 800320c:	4bd3      	ldr	r3, [pc, #844]	@ (800355c <UART2_RX_transfer_complete_callback+0xde4>)
 800320e:	0011      	movs	r1, r2
 8003210:	0018      	movs	r0, r3
 8003212:	f7fd ffa6 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003216:	4bcf      	ldr	r3, [pc, #828]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003218:	0018      	movs	r0, r3
 800321a:	f7fd fe1b 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800321e:	0003      	movs	r3, r0
 8003220:	2b01      	cmp	r3, #1
 8003222:	d142      	bne.n	80032aa <UART2_RX_transfer_complete_callback+0xb32>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003224:	4bce      	ldr	r3, [pc, #824]	@ (8003560 <UART2_RX_transfer_complete_callback+0xde8>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4bce      	ldr	r3, [pc, #824]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 800322c:	0011      	movs	r1, r2
 800322e:	0018      	movs	r0, r3
 8003230:	f7fd fec6 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003234:	0003      	movs	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d12f      	bne.n	800329a <UART2_RX_transfer_complete_callback+0xb22>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800323a:	4acb      	ldr	r2, [pc, #812]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 800323c:	4bc5      	ldr	r3, [pc, #788]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800323e:	0011      	movs	r1, r2
 8003240:	0018      	movs	r0, r3
 8003242:	f7fd fe66 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003246:	0003      	movs	r3, r0
 8003248:	2b01      	cmp	r3, #1
 800324a:	d126      	bne.n	800329a <UART2_RX_transfer_complete_callback+0xb22>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800324c:	4bc1      	ldr	r3, [pc, #772]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b79      	cmp	r3, #121	@ 0x79
 8003254:	d106      	bne.n	8003264 <UART2_RX_transfer_complete_callback+0xaec>

											Reset_All_Controllers(&params, &delay_line);
 8003256:	4ac5      	ldr	r2, [pc, #788]	@ (800356c <UART2_RX_transfer_complete_callback+0xdf4>)
 8003258:	4bc5      	ldr	r3, [pc, #788]	@ (8003570 <UART2_RX_transfer_complete_callback+0xdf8>)
 800325a:	0011      	movs	r1, r2
 800325c:	0018      	movs	r0, r3
 800325e:	f7fd ff9b 	bl	8001198 <Reset_All_Controllers>
 8003262:	e01a      	b.n	800329a <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003264:	4bbb      	ldr	r3, [pc, #748]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b7a      	cmp	r3, #122	@ 0x7a
 800326c:	d102      	bne.n	8003274 <UART2_RX_transfer_complete_callback+0xafc>

											Set_Local_Control();
 800326e:	f7fd ffed 	bl	800124c <Set_Local_Control>
 8003272:	e012      	b.n	800329a <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003274:	4bb7      	ldr	r3, [pc, #732]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b7c      	cmp	r3, #124	@ 0x7c
 800327c:	d104      	bne.n	8003288 <UART2_RX_transfer_complete_callback+0xb10>

											Set_OMNI_Off(&statuses);
 800327e:	4bb6      	ldr	r3, [pc, #728]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003280:	0018      	movs	r0, r3
 8003282:	f7fe f81b 	bl	80012bc <Set_OMNI_Off>
 8003286:	e008      	b.n	800329a <UART2_RX_transfer_complete_callback+0xb22>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003288:	4bb2      	ldr	r3, [pc, #712]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b7d      	cmp	r3, #125	@ 0x7d
 8003290:	d103      	bne.n	800329a <UART2_RX_transfer_complete_callback+0xb22>

											Set_OMNI_On(&statuses);
 8003292:	4bb1      	ldr	r3, [pc, #708]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003294:	0018      	movs	r0, r3
 8003296:	f7fe f821 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 800329a:	4bb2      	ldr	r3, [pc, #712]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80032a0:	4bac      	ldr	r3, [pc, #688]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7fd fedd 	bl	8001062 <Clear_Data_Buffer>
 80032a8:	e2ae      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80032aa:	4baa      	ldr	r3, [pc, #680]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7fd fdfd 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 80032b2:	0003      	movs	r3, r0
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d14a      	bne.n	800334e <UART2_RX_transfer_complete_callback+0xbd6>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 80032b8:	4ba9      	ldr	r3, [pc, #676]	@ (8003560 <UART2_RX_transfer_complete_callback+0xde8>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	4ba9      	ldr	r3, [pc, #676]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 80032c0:	0011      	movs	r1, r2
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7fd fe7c 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80032c8:	0003      	movs	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d006      	beq.n	80032dc <UART2_RX_transfer_complete_callback+0xb64>
										|| (Is_OMNI_On(&statuses) == YES)){
 80032ce:	4ba2      	ldr	r3, [pc, #648]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fd ff2c 	bl	800112e <Is_OMNI_On>
 80032d6:	0003      	movs	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d130      	bne.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 80032dc:	4b9d      	ldr	r3, [pc, #628]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b14      	cmp	r3, #20
 80032e4:	d104      	bne.n	80032f0 <UART2_RX_transfer_complete_callback+0xb78>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80032e6:	4ba0      	ldr	r3, [pc, #640]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7fd fc8f 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 80032ee:	e026      	b.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 80032f0:	4b98      	ldr	r3, [pc, #608]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b15      	cmp	r3, #21
 80032f8:	d104      	bne.n	8003304 <UART2_RX_transfer_complete_callback+0xb8c>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80032fa:	4b9b      	ldr	r3, [pc, #620]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fd fc9f 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 8003302:	e01c      	b.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003304:	4b93      	ldr	r3, [pc, #588]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b16      	cmp	r3, #22
 800330c:	d104      	bne.n	8003318 <UART2_RX_transfer_complete_callback+0xba0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800330e:	4b96      	ldr	r3, [pc, #600]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003310:	0018      	movs	r0, r3
 8003312:	f7fd fcaf 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003316:	e012      	b.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003318:	4b8e      	ldr	r3, [pc, #568]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b17      	cmp	r3, #23
 8003320:	d104      	bne.n	800332c <UART2_RX_transfer_complete_callback+0xbb4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003322:	4b91      	ldr	r3, [pc, #580]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003324:	0018      	movs	r0, r3
 8003326:	f7fd fcbf 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 800332a:	e008      	b.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 800332c:	4b89      	ldr	r3, [pc, #548]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b18      	cmp	r3, #24
 8003334:	d103      	bne.n	800333e <UART2_RX_transfer_complete_callback+0xbc6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003336:	4b8c      	ldr	r3, [pc, #560]	@ (8003568 <UART2_RX_transfer_complete_callback+0xdf0>)
 8003338:	0018      	movs	r0, r3
 800333a:	f7fd fccf 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 800333e:	4b89      	ldr	r3, [pc, #548]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003344:	4b83      	ldr	r3, [pc, #524]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003346:	0018      	movs	r0, r3
 8003348:	f7fd fe8b 	bl	8001062 <Clear_Data_Buffer>
 800334c:	e25c      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 800334e:	4b85      	ldr	r3, [pc, #532]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003354:	4b7f      	ldr	r3, [pc, #508]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003356:	0018      	movs	r0, r3
 8003358:	f7fd fe83 	bl	8001062 <Clear_Data_Buffer>
 800335c:	e254      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 800335e:	4b7d      	ldr	r3, [pc, #500]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003360:	0018      	movs	r0, r3
 8003362:	f7fd fe7e 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003366:	4a7c      	ldr	r2, [pc, #496]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003368:	4b7c      	ldr	r3, [pc, #496]	@ (800355c <UART2_RX_transfer_complete_callback+0xde4>)
 800336a:	0011      	movs	r1, r2
 800336c:	0018      	movs	r0, r3
 800336e:	f7fd fef8 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003372:	4b77      	ldr	r3, [pc, #476]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003374:	0018      	movs	r0, r3
 8003376:	f7fd fd35 	bl	8000de4 <Is_PC_Status_Byte>
 800337a:	0003      	movs	r3, r0
 800337c:	2b01      	cmp	r3, #1
 800337e:	d12d      	bne.n	80033dc <UART2_RX_transfer_complete_callback+0xc64>

						running_status_byte = (uint8_t)*rx_buffer;
 8003380:	4b73      	ldr	r3, [pc, #460]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4b7b      	ldr	r3, [pc, #492]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003388:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 800338a:	4b75      	ldr	r3, [pc, #468]	@ (8003560 <UART2_RX_transfer_complete_callback+0xde8>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b6f      	ldr	r3, [pc, #444]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003392:	0011      	movs	r1, r2
 8003394:	0018      	movs	r0, r3
 8003396:	f7fd fe13 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 800339a:	0003      	movs	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d10a      	bne.n	80033b6 <UART2_RX_transfer_complete_callback+0xc3e>

							active_status_byte = (uint8_t)*rx_buffer;
 80033a0:	4b6b      	ldr	r3, [pc, #428]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 80033a8:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 80033ac:	2140      	movs	r1, #64	@ 0x40
 80033ae:	0018      	movs	r0, r3
 80033b0:	f002 fa2e 	bl	8005810 <Set_Status_Bit>
 80033b4:	e228      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80033b6:	4b68      	ldr	r3, [pc, #416]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd feb8 	bl	800112e <Is_OMNI_On>
 80033be:	0003      	movs	r3, r0
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d000      	beq.n	80033c6 <UART2_RX_transfer_complete_callback+0xc4e>
 80033c4:	e220      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 80033c6:	4b62      	ldr	r3, [pc, #392]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	4b65      	ldr	r3, [pc, #404]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 80033ce:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80033d0:	4b61      	ldr	r3, [pc, #388]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 80033d2:	2140      	movs	r1, #64	@ 0x40
 80033d4:	0018      	movs	r0, r3
 80033d6:	f002 fa1b 	bl	8005810 <Set_Status_Bit>
 80033da:	e215      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 80033dc:	4b5c      	ldr	r3, [pc, #368]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033de:	0018      	movs	r0, r3
 80033e0:	f7fd fd1c 	bl	8000e1c <Is_CC_Status_Byte>
 80033e4:	0003      	movs	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d12d      	bne.n	8003446 <UART2_RX_transfer_complete_callback+0xcce>

						running_status_byte = (uint8_t)*rx_buffer;
 80033ea:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	4b60      	ldr	r3, [pc, #384]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdfc>)
 80033f2:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80033f4:	4b5a      	ldr	r3, [pc, #360]	@ (8003560 <UART2_RX_transfer_complete_callback+0xde8>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b55      	ldr	r3, [pc, #340]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80033fc:	0011      	movs	r1, r2
 80033fe:	0018      	movs	r0, r3
 8003400:	f7fd fdde 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003404:	0003      	movs	r3, r0
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10a      	bne.n	8003420 <UART2_RX_transfer_complete_callback+0xca8>

							active_status_byte = (uint8_t)*rx_buffer;
 800340a:	4b51      	ldr	r3, [pc, #324]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b54      	ldr	r3, [pc, #336]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003412:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003414:	4b50      	ldr	r3, [pc, #320]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003416:	2140      	movs	r1, #64	@ 0x40
 8003418:	0018      	movs	r0, r3
 800341a:	f002 f9f9 	bl	8005810 <Set_Status_Bit>
 800341e:	e1f3      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003420:	4b4d      	ldr	r3, [pc, #308]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003422:	0018      	movs	r0, r3
 8003424:	f7fd fe83 	bl	800112e <Is_OMNI_On>
 8003428:	0003      	movs	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d000      	beq.n	8003430 <UART2_RX_transfer_complete_callback+0xcb8>
 800342e:	e1eb      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 8003430:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003438:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800343a:	4b47      	ldr	r3, [pc, #284]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 800343c:	2140      	movs	r1, #64	@ 0x40
 800343e:	0018      	movs	r0, r3
 8003440:	f002 f9e6 	bl	8005810 <Set_Status_Bit>
 8003444:	e1e0      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003446:	4b42      	ldr	r3, [pc, #264]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd fda9 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 800344e:	0003      	movs	r3, r0
 8003450:	2b01      	cmp	r3, #1
 8003452:	d000      	beq.n	8003456 <UART2_RX_transfer_complete_callback+0xcde>
 8003454:	e1d8      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						active_status_byte = (uint8_t)*rx_buffer;
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b41      	ldr	r3, [pc, #260]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 800345e:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003460:	4b44      	ldr	r3, [pc, #272]	@ (8003574 <UART2_RX_transfer_complete_callback+0xdfc>)
 8003462:	2200      	movs	r2, #0
 8003464:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003466:	4b3c      	ldr	r3, [pc, #240]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003468:	2140      	movs	r1, #64	@ 0x40
 800346a:	0018      	movs	r0, r3
 800346c:	f002 f9d0 	bl	8005810 <Set_Status_Bit>
 8003470:	e1ca      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					}
				}
			}
		}
		else if(active_status_byte != 0){
 8003472:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d100      	bne.n	800347e <UART2_RX_transfer_complete_callback+0xd06>
 800347c:	e1c4      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	4b35      	ldr	r3, [pc, #212]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f002 f9ae 	bl	80057e8 <Get_Status_Bit>
 800348c:	0003      	movs	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10e      	bne.n	80034b0 <UART2_RX_transfer_complete_callback+0xd38>

				active_status_byte = 0;
 8003492:	4b34      	ldr	r3, [pc, #208]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003498:	4b2e      	ldr	r3, [pc, #184]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 800349a:	0018      	movs	r0, r3
 800349c:	f7fd fde1 	bl	8001062 <Clear_Data_Buffer>
				//running status is kept

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 80034a6:	0011      	movs	r1, r2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f002 f9c3 	bl	8005834 <Clear_Status_Bit>
 80034ae:	e1ab      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 80034b0:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80034b2:	0018      	movs	r0, r3
 80034b4:	f7fd fc7d 	bl	8000db2 <Is_Data_Byte>
 80034b8:	0003      	movs	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d000      	beq.n	80034c0 <UART2_RX_transfer_complete_callback+0xd48>
 80034be:	e119      	b.n	80036f4 <UART2_RX_transfer_complete_callback+0xf7c>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 80034c0:	4b28      	ldr	r3, [pc, #160]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fd fc8e 	bl	8000de4 <Is_PC_Status_Byte>
 80034c8:	0003      	movs	r3, r0
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d128      	bne.n	8003520 <UART2_RX_transfer_complete_callback+0xda8>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80034ce:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fd fd96 	bl	8001002 <Is_Data_Buffer_Empty>
 80034d6:	0003      	movs	r3, r0
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d000      	beq.n	80034de <UART2_RX_transfer_complete_callback+0xd66>
 80034dc:	e194      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 80034de:	4b1c      	ldr	r3, [pc, #112]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80034e0:	2104      	movs	r1, #4
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fd fddb 	bl	800109e <Is_Program_Change_Data_Byte_In_Range>
 80034e8:	0003      	movs	r3, r0
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d10a      	bne.n	8003504 <UART2_RX_transfer_complete_callback+0xd8c>

								Set_All_Pots_to_PC_Mode();
 80034ee:	f7fd fc0f 	bl	8000d10 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 80034f2:	4b17      	ldr	r3, [pc, #92]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003578 <UART2_RX_transfer_complete_callback+0xe00>)
 80034fe:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003500:	f7fd f80e 	bl	8000520 <Update_Params_Based_On_Mode_Selected>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003504:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003506:	0018      	movs	r0, r3
 8003508:	f7fd fdab 	bl	8001062 <Clear_Data_Buffer>
							active_status_byte = 0;
 800350c:	4b15      	ldr	r3, [pc, #84]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003512:	4a11      	ldr	r2, [pc, #68]	@ (8003558 <UART2_RX_transfer_complete_callback+0xde0>)
 8003514:	4b11      	ldr	r3, [pc, #68]	@ (800355c <UART2_RX_transfer_complete_callback+0xde4>)
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f7fd fe22 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>
 800351e:	e173      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003520:	4b10      	ldr	r3, [pc, #64]	@ (8003564 <UART2_RX_transfer_complete_callback+0xdec>)
 8003522:	0018      	movs	r0, r3
 8003524:	f7fd fc7a 	bl	8000e1c <Is_CC_Status_Byte>
 8003528:	0003      	movs	r3, r0
 800352a:	2b01      	cmp	r3, #1
 800352c:	d000      	beq.n	8003530 <UART2_RX_transfer_complete_callback+0xdb8>
 800352e:	e0d4      	b.n	80036da <UART2_RX_transfer_complete_callback+0xf62>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003530:	4b08      	ldr	r3, [pc, #32]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003532:	0018      	movs	r0, r3
 8003534:	f7fd fd65 	bl	8001002 <Is_Data_Buffer_Empty>
 8003538:	0003      	movs	r3, r0
 800353a:	2b01      	cmp	r3, #1
 800353c:	d11e      	bne.n	800357c <UART2_RX_transfer_complete_callback+0xe04>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 800353e:	4b04      	ldr	r3, [pc, #16]	@ (8003550 <UART2_RX_transfer_complete_callback+0xdd8>)
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b03      	ldr	r3, [pc, #12]	@ (8003554 <UART2_RX_transfer_complete_callback+0xddc>)
 8003546:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003548:	4b04      	ldr	r3, [pc, #16]	@ (800355c <UART2_RX_transfer_complete_callback+0xde4>)
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e15b      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
 8003550:	200004cc 	.word	0x200004cc
 8003554:	200004c0 	.word	0x200004c0
 8003558:	20000c20 	.word	0x20000c20
 800355c:	20000c28 	.word	0x20000c28
 8003560:	200004bd 	.word	0x200004bd
 8003564:	200004be 	.word	0x200004be
 8003568:	200004c1 	.word	0x200004c1
 800356c:	20000020 	.word	0x20000020
 8003570:	20000c38 	.word	0x20000c38
 8003574:	200004bf 	.word	0x200004bf
 8003578:	200004b0 	.word	0x200004b0

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 800357c:	4ba9      	ldr	r3, [pc, #676]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4ba9      	ldr	r3, [pc, #676]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003584:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003586:	4aa9      	ldr	r2, [pc, #676]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003588:	4ba9      	ldr	r3, [pc, #676]	@ (8003830 <UART2_RX_transfer_complete_callback+0x10b8>)
 800358a:	0011      	movs	r1, r2
 800358c:	0018      	movs	r0, r3
 800358e:	f7fd fde8 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003592:	4ba5      	ldr	r3, [pc, #660]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003594:	0018      	movs	r0, r3
 8003596:	f7fd fc5d 	bl	8000e54 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800359a:	0003      	movs	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d142      	bne.n	8003626 <UART2_RX_transfer_complete_callback+0xeae>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 80035a0:	4ba4      	ldr	r3, [pc, #656]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10bc>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f7fd fd08 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 80035b0:	0003      	movs	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d12f      	bne.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 80035b6:	4aa1      	ldr	r2, [pc, #644]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 80035b8:	4b9b      	ldr	r3, [pc, #620]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd fca8 	bl	8000f12 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 80035c2:	0003      	movs	r3, r0
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d126      	bne.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 80035c8:	4b97      	ldr	r3, [pc, #604]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035ca:	785b      	ldrb	r3, [r3, #1]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b79      	cmp	r3, #121	@ 0x79
 80035d0:	d106      	bne.n	80035e0 <UART2_RX_transfer_complete_callback+0xe68>

											Reset_All_Controllers(&params, &delay_line);
 80035d2:	4a9b      	ldr	r2, [pc, #620]	@ (8003840 <UART2_RX_transfer_complete_callback+0x10c8>)
 80035d4:	4b9b      	ldr	r3, [pc, #620]	@ (8003844 <UART2_RX_transfer_complete_callback+0x10cc>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f7fd fddd 	bl	8001198 <Reset_All_Controllers>
 80035de:	e01a      	b.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 80035e0:	4b91      	ldr	r3, [pc, #580]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b7a      	cmp	r3, #122	@ 0x7a
 80035e8:	d102      	bne.n	80035f0 <UART2_RX_transfer_complete_callback+0xe78>

											Set_Local_Control();
 80035ea:	f7fd fe2f 	bl	800124c <Set_Local_Control>
 80035ee:	e012      	b.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80035f0:	4b8d      	ldr	r3, [pc, #564]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80035f2:	785b      	ldrb	r3, [r3, #1]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b7c      	cmp	r3, #124	@ 0x7c
 80035f8:	d104      	bne.n	8003604 <UART2_RX_transfer_complete_callback+0xe8c>

											Set_OMNI_Off(&statuses);
 80035fa:	4b8c      	ldr	r3, [pc, #560]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7fd fe5d 	bl	80012bc <Set_OMNI_Off>
 8003602:	e008      	b.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003604:	4b88      	ldr	r3, [pc, #544]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b7d      	cmp	r3, #125	@ 0x7d
 800360c:	d103      	bne.n	8003616 <UART2_RX_transfer_complete_callback+0xe9e>

											Set_OMNI_On(&statuses);
 800360e:	4b87      	ldr	r3, [pc, #540]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003610:	0018      	movs	r0, r3
 8003612:	f7fd fe63 	bl	80012dc <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003616:	4b88      	ldr	r3, [pc, #544]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 800361c:	4b82      	ldr	r3, [pc, #520]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 800361e:	0018      	movs	r0, r3
 8003620:	f7fd fd1f 	bl	8001062 <Clear_Data_Buffer>
 8003624:	e0f0      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003626:	4b80      	ldr	r3, [pc, #512]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003628:	0018      	movs	r0, r3
 800362a:	f7fd fc3f 	bl	8000eac <Is_Utilised_CC_First_Data_Byte>
 800362e:	0003      	movs	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d14a      	bne.n	80036ca <UART2_RX_transfer_complete_callback+0xf52>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003634:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10bc>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b7f      	ldr	r3, [pc, #508]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f7fd fcbe 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003644:	0003      	movs	r3, r0
 8003646:	2b01      	cmp	r3, #1
 8003648:	d006      	beq.n	8003658 <UART2_RX_transfer_complete_callback+0xee0>
										|| (Is_OMNI_On(&statuses) == YES)){
 800364a:	4b78      	ldr	r3, [pc, #480]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 800364c:	0018      	movs	r0, r3
 800364e:	f7fd fd6e 	bl	800112e <Is_OMNI_On>
 8003652:	0003      	movs	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d130      	bne.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003658:	4b73      	ldr	r3, [pc, #460]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b14      	cmp	r3, #20
 8003660:	d104      	bne.n	800366c <UART2_RX_transfer_complete_callback+0xef4>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003662:	4b76      	ldr	r3, [pc, #472]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 8003664:	0018      	movs	r0, r3
 8003666:	f7fd fad1 	bl	8000c0c <Set_Waveshape_to_CC_Mode_and_Value>
 800366a:	e026      	b.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 800366c:	4b6e      	ldr	r3, [pc, #440]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b15      	cmp	r3, #21
 8003674:	d104      	bne.n	8003680 <UART2_RX_transfer_complete_callback+0xf08>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003676:	4b71      	ldr	r3, [pc, #452]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 8003678:	0018      	movs	r0, r3
 800367a:	f7fd fae1 	bl	8000c40 <Set_Speed_to_CC_Mode_and_Value>
 800367e:	e01c      	b.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003680:	4b69      	ldr	r3, [pc, #420]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b16      	cmp	r3, #22
 8003688:	d104      	bne.n	8003694 <UART2_RX_transfer_complete_callback+0xf1c>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800368a:	4b6c      	ldr	r3, [pc, #432]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 800368c:	0018      	movs	r0, r3
 800368e:	f7fd faf1 	bl	8000c74 <Set_Depth_to_CC_Mode_and_Value>
 8003692:	e012      	b.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003694:	4b64      	ldr	r3, [pc, #400]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b17      	cmp	r3, #23
 800369c:	d104      	bne.n	80036a8 <UART2_RX_transfer_complete_callback+0xf30>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 800369e:	4b67      	ldr	r3, [pc, #412]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 80036a0:	0018      	movs	r0, r3
 80036a2:	f7fd fb01 	bl	8000ca8 <Set_Symmetry_to_CC_Mode_and_Value>
 80036a6:	e008      	b.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 80036a8:	4b5f      	ldr	r3, [pc, #380]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b18      	cmp	r3, #24
 80036b0:	d103      	bne.n	80036ba <UART2_RX_transfer_complete_callback+0xf42>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 80036b2:	4b62      	ldr	r3, [pc, #392]	@ (800383c <UART2_RX_transfer_complete_callback+0x10c4>)
 80036b4:	0018      	movs	r0, r3
 80036b6:	f7fd fb11 	bl	8000cdc <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 80036ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036bc:	2200      	movs	r2, #0
 80036be:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036c0:	4b59      	ldr	r3, [pc, #356]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036c2:	0018      	movs	r0, r3
 80036c4:	f7fd fccd 	bl	8001062 <Clear_Data_Buffer>
 80036c8:	e09e      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 80036ca:	4b5b      	ldr	r3, [pc, #364]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80036d0:	4b55      	ldr	r3, [pc, #340]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036d2:	0018      	movs	r0, r3
 80036d4:	f7fd fcc5 	bl	8001062 <Clear_Data_Buffer>
 80036d8:	e096      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 80036da:	4b57      	ldr	r3, [pc, #348]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fd fc5f 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80036e2:	0003      	movs	r3, r0
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d000      	beq.n	80036ea <UART2_RX_transfer_complete_callback+0xf72>
 80036e8:	e08e      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7fd fc88 	bl	8001002 <Is_Data_Buffer_Empty>
 80036f2:	e089      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 80036f4:	4b4c      	ldr	r3, [pc, #304]	@ (8003828 <UART2_RX_transfer_complete_callback+0x10b0>)
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7fd fcb3 	bl	8001062 <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 80036fc:	4a4b      	ldr	r2, [pc, #300]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80036fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003830 <UART2_RX_transfer_complete_callback+0x10b8>)
 8003700:	0011      	movs	r1, r2
 8003702:	0018      	movs	r0, r3
 8003704:	f7fd fd2d 	bl	8001162 <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003708:	4b46      	ldr	r3, [pc, #280]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fd fb6a 	bl	8000de4 <Is_PC_Status_Byte>
 8003710:	0003      	movs	r3, r0
 8003712:	2b01      	cmp	r3, #1
 8003714:	d12c      	bne.n	8003770 <UART2_RX_transfer_complete_callback+0xff8>

						running_status_byte = (uint8_t)*rx_buffer;
 8003716:	4b43      	ldr	r3, [pc, #268]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2da      	uxtb	r2, r3
 800371c:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10d0>)
 800371e:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003720:	4b44      	ldr	r3, [pc, #272]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10bc>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4b3f      	ldr	r3, [pc, #252]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003728:	0011      	movs	r1, r2
 800372a:	0018      	movs	r0, r3
 800372c:	f7fd fc48 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003730:	0003      	movs	r3, r0
 8003732:	2b01      	cmp	r3, #1
 8003734:	d10a      	bne.n	800374c <UART2_RX_transfer_complete_callback+0xfd4>

							active_status_byte = (uint8_t)*rx_buffer;
 8003736:	4b3b      	ldr	r3, [pc, #236]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	4b3e      	ldr	r3, [pc, #248]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 800373e:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003740:	4b3a      	ldr	r3, [pc, #232]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003742:	2140      	movs	r1, #64	@ 0x40
 8003744:	0018      	movs	r0, r3
 8003746:	f002 f863 	bl	8005810 <Set_Status_Bit>
 800374a:	e05d      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 800374c:	4b37      	ldr	r3, [pc, #220]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 800374e:	0018      	movs	r0, r3
 8003750:	f7fd fced 	bl	800112e <Is_OMNI_On>
 8003754:	0003      	movs	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d156      	bne.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 800375a:	4b32      	ldr	r3, [pc, #200]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 8003762:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003764:	4b31      	ldr	r3, [pc, #196]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 8003766:	2140      	movs	r1, #64	@ 0x40
 8003768:	0018      	movs	r0, r3
 800376a:	f002 f851 	bl	8005810 <Set_Status_Bit>
 800376e:	e04b      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003770:	4b2c      	ldr	r3, [pc, #176]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003772:	0018      	movs	r0, r3
 8003774:	f7fd fb52 	bl	8000e1c <Is_CC_Status_Byte>
 8003778:	0003      	movs	r3, r0
 800377a:	2b01      	cmp	r3, #1
 800377c:	d12c      	bne.n	80037d8 <UART2_RX_transfer_complete_callback+0x1060>

						running_status_byte = (uint8_t)*rx_buffer;
 800377e:	4b29      	ldr	r3, [pc, #164]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10d0>)
 8003786:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003788:	4b2a      	ldr	r3, [pc, #168]	@ (8003834 <UART2_RX_transfer_complete_callback+0x10bc>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b25      	ldr	r3, [pc, #148]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f7fd fc14 	bl	8000fc0 <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003798:	0003      	movs	r3, r0
 800379a:	2b01      	cmp	r3, #1
 800379c:	d10a      	bne.n	80037b4 <UART2_RX_transfer_complete_callback+0x103c>

							active_status_byte = (uint8_t)*rx_buffer;
 800379e:	4b21      	ldr	r3, [pc, #132]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b24      	ldr	r3, [pc, #144]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037a6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80037a8:	4b20      	ldr	r3, [pc, #128]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037aa:	2140      	movs	r1, #64	@ 0x40
 80037ac:	0018      	movs	r0, r3
 80037ae:	f002 f82f 	bl	8005810 <Set_Status_Bit>
 80037b2:	e029      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 80037b4:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fd fcb9 	bl	800112e <Is_OMNI_On>
 80037bc:	0003      	movs	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d122      	bne.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

								active_status_byte = (uint8_t)*rx_buffer;
 80037c2:	4b18      	ldr	r3, [pc, #96]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037ca:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80037cc:	4b17      	ldr	r3, [pc, #92]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	0018      	movs	r0, r3
 80037d2:	f002 f81d 	bl	8005810 <Set_Status_Bit>
 80037d6:	e017      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80037d8:	4b12      	ldr	r3, [pc, #72]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037da:	0018      	movs	r0, r3
 80037dc:	f7fd fbe0 	bl	8000fa0 <Is_Sysex_Start_Status_Byte>
 80037e0:	0003      	movs	r3, r0
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d110      	bne.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>

						active_status_byte = (uint8_t)*rx_buffer;
 80037e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <UART2_RX_transfer_complete_callback+0x10c0>)
 80037ee:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 80037f0:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <UART2_RX_transfer_complete_callback+0x10d0>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <UART2_RX_transfer_complete_callback+0x10b4>)
 80037f8:	2140      	movs	r1, #64	@ 0x40
 80037fa:	0018      	movs	r0, r3
 80037fc:	f002 f808 	bl	8005810 <Set_Status_Bit>
 8003800:	e002      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003802:	46c0      	nop			@ (mov r8, r8)
 8003804:	e000      	b.n	8003808 <UART2_RX_transfer_complete_callback+0x1090>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003806:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003808:	4b06      	ldr	r3, [pc, #24]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 800380e:	4905      	ldr	r1, [pc, #20]	@ (8003824 <UART2_RX_transfer_complete_callback+0x10ac>)
 8003810:	4b0e      	ldr	r3, [pc, #56]	@ (800384c <UART2_RX_transfer_complete_callback+0x10d4>)
 8003812:	2201      	movs	r2, #1
 8003814:	0018      	movs	r0, r3
 8003816:	f007 fefd 	bl	800b614 <HAL_UART_Receive_DMA>
}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			@ (mov r8, r8)
 8003824:	200004cc 	.word	0x200004cc
 8003828:	200004c0 	.word	0x200004c0
 800382c:	20000c20 	.word	0x20000c20
 8003830:	20000c28 	.word	0x20000c28
 8003834:	200004bd 	.word	0x200004bd
 8003838:	200004be 	.word	0x200004be
 800383c:	200004c1 	.word	0x200004c1
 8003840:	20000020 	.word	0x20000020
 8003844:	20000c38 	.word	0x20000c38
 8003848:	200004bf 	.word	0x200004bf
 800384c:	20000a34 	.word	0x20000a34

08003850 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	0002      	movs	r2, r0
 8003858:	1dbb      	adds	r3, r7, #6
 800385a:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 800385c:	1dbb      	adds	r3, r7, #6
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	2b80      	cmp	r3, #128	@ 0x80
 8003862:	d117      	bne.n	8003894 <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8003864:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b06      	cmp	r3, #6
 800386c:	d004      	beq.n	8003878 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b07      	cmp	r3, #7
 8003876:	d10d      	bne.n	8003894 <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003878:	2380      	movs	r3, #128	@ 0x80
 800387a:	0099      	lsls	r1, r3, #2
 800387c:	23a0      	movs	r3, #160	@ 0xa0
 800387e:	05db      	lsls	r3, r3, #23
 8003880:	2201      	movs	r2, #1
 8003882:	0018      	movs	r0, r3
 8003884:	f004 f873 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800388a:	2200      	movs	r2, #0
 800388c:	2140      	movs	r1, #64	@ 0x40
 800388e:	0018      	movs	r0, r3
 8003890:	f004 f86d 	bl	800796e <HAL_GPIO_WritePin>
		}
	}
}
 8003894:	46c0      	nop			@ (mov r8, r8)
 8003896:	46bd      	mov	sp, r7
 8003898:	b002      	add	sp, #8
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000428 	.word	0x20000428
 80038a0:	50000800 	.word	0x50000800

080038a4 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	0002      	movs	r2, r0
 80038ac:	1dbb      	adds	r3, r7, #6
 80038ae:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 80038b0:	1dbb      	adds	r3, r7, #6
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	2b80      	cmp	r3, #128	@ 0x80
 80038b6:	d000      	beq.n	80038ba <HAL_GPIO_EXTI_Rising_Callback+0x16>
 80038b8:	e0dd      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 80038ba:	4b71      	ldr	r3, [pc, #452]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d114      	bne.n	80038ee <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80038c4:	2380      	movs	r3, #128	@ 0x80
 80038c6:	0099      	lsls	r1, r3, #2
 80038c8:	23a0      	movs	r3, #160	@ 0xa0
 80038ca:	05db      	lsls	r3, r3, #23
 80038cc:	2200      	movs	r2, #0
 80038ce:	0018      	movs	r0, r3
 80038d0:	f004 f84d 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80038d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	2140      	movs	r1, #64	@ 0x40
 80038da:	0018      	movs	r0, r3
 80038dc:	f004 f847 	bl	800796e <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 80038e0:	4b67      	ldr	r3, [pc, #412]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038e2:	2201      	movs	r2, #1
 80038e4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80038e6:	4b66      	ldr	r3, [pc, #408]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 80038ec:	e0c3      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 80038ee:	4b64      	ldr	r3, [pc, #400]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d114      	bne.n	8003922 <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80038f8:	2380      	movs	r3, #128	@ 0x80
 80038fa:	0099      	lsls	r1, r3, #2
 80038fc:	23a0      	movs	r3, #160	@ 0xa0
 80038fe:	05db      	lsls	r3, r3, #23
 8003900:	2200      	movs	r2, #0
 8003902:	0018      	movs	r0, r3
 8003904:	f004 f833 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003908:	4b5e      	ldr	r3, [pc, #376]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800390a:	2201      	movs	r2, #1
 800390c:	2140      	movs	r1, #64	@ 0x40
 800390e:	0018      	movs	r0, r3
 8003910:	f004 f82d 	bl	800796e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 8003914:	4b5a      	ldr	r3, [pc, #360]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003916:	2203      	movs	r2, #3
 8003918:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800391a:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800391c:	2207      	movs	r2, #7
 800391e:	701a      	strb	r2, [r3, #0]
}
 8003920:	e0a9      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 8003922:	4b57      	ldr	r3, [pc, #348]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d114      	bne.n	8003956 <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800392c:	2380      	movs	r3, #128	@ 0x80
 800392e:	0099      	lsls	r1, r3, #2
 8003930:	23a0      	movs	r3, #160	@ 0xa0
 8003932:	05db      	lsls	r3, r3, #23
 8003934:	2200      	movs	r2, #0
 8003936:	0018      	movs	r0, r3
 8003938:	f004 f819 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800393c:	4b51      	ldr	r3, [pc, #324]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800393e:	2201      	movs	r2, #1
 8003940:	2140      	movs	r1, #64	@ 0x40
 8003942:	0018      	movs	r0, r3
 8003944:	f004 f813 	bl	800796e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 8003948:	4b4d      	ldr	r3, [pc, #308]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800394a:	2202      	movs	r2, #2
 800394c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800394e:	4b4c      	ldr	r3, [pc, #304]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003950:	2207      	movs	r2, #7
 8003952:	701a      	strb	r2, [r3, #0]
}
 8003954:	e08f      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003956:	4b4a      	ldr	r3, [pc, #296]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b04      	cmp	r3, #4
 800395e:	d12b      	bne.n	80039b8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8003960:	4b49      	ldr	r3, [pc, #292]	@ (8003a88 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d126      	bne.n	80039b8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 800396a:	4b48      	ldr	r3, [pc, #288]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800396c:	2120      	movs	r1, #32
 800396e:	0018      	movs	r0, r3
 8003970:	f001 ff3a 	bl	80057e8 <Get_Status_Bit>
 8003974:	0003      	movs	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11e      	bne.n	80039b8 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800397a:	2380      	movs	r3, #128	@ 0x80
 800397c:	0099      	lsls	r1, r3, #2
 800397e:	23a0      	movs	r3, #160	@ 0xa0
 8003980:	05db      	lsls	r3, r3, #23
 8003982:	2200      	movs	r2, #0
 8003984:	0018      	movs	r0, r3
 8003986:	f003 fff2 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800398a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800398c:	2201      	movs	r2, #1
 800398e:	2140      	movs	r1, #64	@ 0x40
 8003990:	0018      	movs	r0, r3
 8003992:	f003 ffec 	bl	800796e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 8003996:	4b3a      	ldr	r3, [pc, #232]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003998:	2204      	movs	r2, #4
 800399a:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800399c:	4b38      	ldr	r3, [pc, #224]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800399e:	2207      	movs	r2, #7
 80039a0:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80039a2:	4b3a      	ldr	r3, [pc, #232]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039a4:	2120      	movs	r1, #32
 80039a6:	0018      	movs	r0, r3
 80039a8:	f001 ff44 	bl	8005834 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80039ac:	4b37      	ldr	r3, [pc, #220]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039ae:	2140      	movs	r1, #64	@ 0x40
 80039b0:	0018      	movs	r0, r3
 80039b2:	f001 ff3f 	bl	8005834 <Clear_Status_Bit>
 80039b6:	e05e      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80039b8:	4b31      	ldr	r3, [pc, #196]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b08      	cmp	r3, #8
 80039c0:	d12b      	bne.n	8003a1a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80039c2:	4b31      	ldr	r3, [pc, #196]	@ (8003a88 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d126      	bne.n	8003a1a <HAL_GPIO_EXTI_Rising_Callback+0x176>
 80039cc:	4b2f      	ldr	r3, [pc, #188]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80039ce:	2120      	movs	r1, #32
 80039d0:	0018      	movs	r0, r3
 80039d2:	f001 ff09 	bl	80057e8 <Get_Status_Bit>
 80039d6:	0003      	movs	r3, r0
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d11e      	bne.n	8003a1a <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80039dc:	2380      	movs	r3, #128	@ 0x80
 80039de:	0099      	lsls	r1, r3, #2
 80039e0:	23a0      	movs	r3, #160	@ 0xa0
 80039e2:	05db      	lsls	r3, r3, #23
 80039e4:	2200      	movs	r2, #0
 80039e6:	0018      	movs	r0, r3
 80039e8:	f003 ffc1 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80039ec:	4b25      	ldr	r3, [pc, #148]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80039ee:	2201      	movs	r2, #1
 80039f0:	2140      	movs	r1, #64	@ 0x40
 80039f2:	0018      	movs	r0, r3
 80039f4:	f003 ffbb 	bl	800796e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80039f8:	4b21      	ldr	r3, [pc, #132]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80039fa:	2208      	movs	r2, #8
 80039fc:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80039fe:	4b20      	ldr	r3, [pc, #128]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a00:	2207      	movs	r2, #7
 8003a02:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003a04:	4b21      	ldr	r3, [pc, #132]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a06:	2120      	movs	r1, #32
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f001 ff13 	bl	8005834 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003a8c <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8003a10:	2140      	movs	r1, #64	@ 0x40
 8003a12:	0018      	movs	r0, r3
 8003a14:	f001 ff0e 	bl	8005834 <Clear_Status_Bit>
 8003a18:	e02d      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 8003a1a:	4b19      	ldr	r3, [pc, #100]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b07      	cmp	r3, #7
 8003a22:	d114      	bne.n	8003a4e <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	0099      	lsls	r1, r3, #2
 8003a28:	23a0      	movs	r3, #160	@ 0xa0
 8003a2a:	05db      	lsls	r3, r3, #23
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f003 ff9d 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a34:	4b13      	ldr	r3, [pc, #76]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	2140      	movs	r1, #64	@ 0x40
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f003 ff97 	bl	800796e <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8003a40:	4b0f      	ldr	r3, [pc, #60]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a42:	2207      	movs	r2, #7
 8003a44:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 8003a46:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a48:	2206      	movs	r2, #6
 8003a4a:	701a      	strb	r2, [r3, #0]
}
 8003a4c:	e013      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a80 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b06      	cmp	r3, #6
 8003a56:	d10e      	bne.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003a58:	2380      	movs	r3, #128	@ 0x80
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	23a0      	movs	r3, #160	@ 0xa0
 8003a5e:	05db      	lsls	r3, r3, #23
 8003a60:	2200      	movs	r2, #0
 8003a62:	0018      	movs	r0, r3
 8003a64:	f003 ff83 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003a68:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	2140      	movs	r1, #64	@ 0x40
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f003 ff7d 	bl	800796e <HAL_GPIO_WritePin>
}
 8003a74:	e7ff      	b.n	8003a76 <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b002      	add	sp, #8
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			@ (mov r8, r8)
 8003a80:	20000428 	.word	0x20000428
 8003a84:	50000800 	.word	0x50000800
 8003a88:	2000043c 	.word	0x2000043c
 8003a8c:	20000c20 	.word	0x20000c20

08003a90 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8003a90:	b5b0      	push	{r4, r5, r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};

	//CHECK IF NEED TO TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8003a98:	250f      	movs	r5, #15
 8003a9a:	197c      	adds	r4, r7, r5
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	23a0      	movs	r3, #160	@ 0xa0
 8003aa2:	05db      	lsls	r3, r3, #23
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f003 ff44 	bl	8007934 <HAL_GPIO_ReadPin>
 8003aac:	0003      	movs	r3, r0
 8003aae:	7023      	strb	r3, [r4, #0]

	if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8003ab0:	4b67      	ldr	r3, [pc, #412]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10a      	bne.n	8003ad0 <LPTIM1_callback+0x40>
 8003aba:	197b      	adds	r3, r7, r5
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <LPTIM1_callback+0x40>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ac2:	4b63      	ldr	r3, [pc, #396]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003ac4:	2205      	movs	r2, #5
 8003ac6:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8003ac8:	4b61      	ldr	r3, [pc, #388]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003aca:	2201      	movs	r2, #1
 8003acc:	705a      	strb	r2, [r3, #1]
 8003ace:	e070      	b.n	8003bb2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8003ad0:	4b5f      	ldr	r3, [pc, #380]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d10b      	bne.n	8003af2 <LPTIM1_callback+0x62>
 8003ada:	230f      	movs	r3, #15
 8003adc:	18fb      	adds	r3, r7, r3
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d106      	bne.n	8003af2 <LPTIM1_callback+0x62>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = CC_MODE;
 8003aea:	4b59      	ldr	r3, [pc, #356]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003aec:	2202      	movs	r2, #2
 8003aee:	705a      	strb	r2, [r3, #1]
 8003af0:	e05f      	b.n	8003bb2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 8003af2:	4b57      	ldr	r3, [pc, #348]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d10b      	bne.n	8003b14 <LPTIM1_callback+0x84>
 8003afc:	230f      	movs	r3, #15
 8003afe:	18fb      	adds	r3, r7, r3
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d106      	bne.n	8003b14 <LPTIM1_callback+0x84>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b06:	4b52      	ldr	r3, [pc, #328]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b08:	2205      	movs	r2, #5
 8003b0a:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.shared_state = PC_MODE;
 8003b0c:	4b50      	ldr	r3, [pc, #320]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b0e:	2203      	movs	r2, #3
 8003b10:	705a      	strb	r2, [r3, #1]
 8003b12:	e04e      	b.n	8003bb2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b14:	4b4e      	ldr	r3, [pc, #312]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b06      	cmp	r3, #6
 8003b1c:	d122      	bne.n	8003b64 <LPTIM1_callback+0xd4>
 8003b1e:	230f      	movs	r3, #15
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d11d      	bne.n	8003b64 <LPTIM1_callback+0xd4>
 8003b28:	4b4a      	ldr	r3, [pc, #296]	@ (8003c54 <LPTIM1_callback+0x1c4>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <LPTIM1_callback+0xd4>
 8003b32:	4b49      	ldr	r3, [pc, #292]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003b34:	2120      	movs	r1, #32
 8003b36:	0018      	movs	r0, r3
 8003b38:	f001 fe56 	bl	80057e8 <Get_Status_Bit>
 8003b3c:	0003      	movs	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d110      	bne.n	8003b64 <LPTIM1_callback+0xd4>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b42:	4b43      	ldr	r3, [pc, #268]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b44:	2205      	movs	r2, #5
 8003b46:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 8003b48:	4b41      	ldr	r3, [pc, #260]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b4a:	2206      	movs	r2, #6
 8003b4c:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b4e:	4b42      	ldr	r3, [pc, #264]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003b50:	2120      	movs	r1, #32
 8003b52:	0018      	movs	r0, r3
 8003b54:	f001 fe6e 	bl	8005834 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003b58:	4b3f      	ldr	r3, [pc, #252]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003b5a:	2140      	movs	r1, #64	@ 0x40
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f001 fe69 	bl	8005834 <Clear_Status_Bit>
 8003b62:	e026      	b.n	8003bb2 <LPTIM1_callback+0x122>
	}
	else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8003b64:	4b3a      	ldr	r3, [pc, #232]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d121      	bne.n	8003bb2 <LPTIM1_callback+0x122>
 8003b6e:	230f      	movs	r3, #15
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11c      	bne.n	8003bb2 <LPTIM1_callback+0x122>
 8003b78:	4b36      	ldr	r3, [pc, #216]	@ (8003c54 <LPTIM1_callback+0x1c4>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d117      	bne.n	8003bb2 <LPTIM1_callback+0x122>
 8003b82:	4b35      	ldr	r3, [pc, #212]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003b84:	2120      	movs	r1, #32
 8003b86:	0018      	movs	r0, r3
 8003b88:	f001 fe2e 	bl	80057e8 <Get_Status_Bit>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10f      	bne.n	8003bb2 <LPTIM1_callback+0x122>

		speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8003b92:	4b2f      	ldr	r3, [pc, #188]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b94:	2205      	movs	r2, #5
 8003b96:	701a      	strb	r2, [r3, #0]
		speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003b98:	4b2d      	ldr	r3, [pc, #180]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	705a      	strb	r2, [r3, #1]

		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003ba0:	2120      	movs	r1, #32
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f001 fe46 	bl	8005834 <Clear_Status_Bit>
		Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c58 <LPTIM1_callback+0x1c8>)
 8003baa:	2140      	movs	r1, #64	@ 0x40
 8003bac:	0018      	movs	r0, r3
 8003bae:	f001 fe41 	bl	8005834 <Clear_Status_Bit>
	}

	//CHECK TAP TEMPO STATE
	if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8003bb2:	4b27      	ldr	r3, [pc, #156]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b05      	cmp	r3, #5
 8003bba:	d004      	beq.n	8003bc6 <LPTIM1_callback+0x136>
 8003bbc:	4b24      	ldr	r3, [pc, #144]	@ (8003c50 <LPTIM1_callback+0x1c0>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d12a      	bne.n	8003c1c <LPTIM1_callback+0x18c>

		Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 8003bc6:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <LPTIM1_callback+0x1cc>)
 8003bc8:	0018      	movs	r0, r3
 8003bca:	f7fd fcd7 	bl	800157c <Check_Tap_Tempo_Switch_State>

		if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8003bce:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <LPTIM1_callback+0x1cc>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d10e      	bne.n	8003bf6 <LPTIM1_callback+0x166>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003bd8:	2380      	movs	r3, #128	@ 0x80
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	23a0      	movs	r3, #160	@ 0xa0
 8003bde:	05db      	lsls	r3, r3, #23
 8003be0:	2200      	movs	r2, #0
 8003be2:	0018      	movs	r0, r3
 8003be4:	f003 fec3 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003be8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c60 <LPTIM1_callback+0x1d0>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	0018      	movs	r0, r3
 8003bf0:	f003 febd 	bl	800796e <HAL_GPIO_WritePin>
 8003bf4:	e012      	b.n	8003c1c <LPTIM1_callback+0x18c>

		}
		else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8003bf6:	4b19      	ldr	r3, [pc, #100]	@ (8003c5c <LPTIM1_callback+0x1cc>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10d      	bne.n	8003c1c <LPTIM1_callback+0x18c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8003c00:	2380      	movs	r3, #128	@ 0x80
 8003c02:	0099      	lsls	r1, r3, #2
 8003c04:	23a0      	movs	r3, #160	@ 0xa0
 8003c06:	05db      	lsls	r3, r3, #23
 8003c08:	2201      	movs	r2, #1
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f003 feaf 	bl	800796e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003c10:	4b13      	ldr	r3, [pc, #76]	@ (8003c60 <LPTIM1_callback+0x1d0>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	2140      	movs	r1, #64	@ 0x40
 8003c16:	0018      	movs	r0, r3
 8003c18:	f003 fea9 	bl	800796e <HAL_GPIO_WritePin>
	}*/
	/*
	if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
		Pot_Check(&params_manual, WAVESHAPE_POT);
	}*/
	if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 8003c1c:	4b11      	ldr	r3, [pc, #68]	@ (8003c64 <LPTIM1_callback+0x1d4>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d004      	beq.n	8003c30 <LPTIM1_callback+0x1a0>
 8003c26:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <LPTIM1_callback+0x1d4>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d104      	bne.n	8003c3a <LPTIM1_callback+0x1aa>
		Pot_Check(&params_manual, DEPTH_POT);
 8003c30:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <LPTIM1_callback+0x1d8>)
 8003c32:	2102      	movs	r1, #2
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fd fb71 	bl	800131c <Pot_Check>
	if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
		Pot_Check(&params_manual, PHASE_POT);
	}*/

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8003c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c6c <LPTIM1_callback+0x1dc>)
 8003c3c:	22fa      	movs	r2, #250	@ 0xfa
 8003c3e:	21fa      	movs	r1, #250	@ 0xfa
 8003c40:	0018      	movs	r0, r3
 8003c42:	f003 ff8b 	bl	8007b5c <HAL_LPTIM_SetOnce_Start_IT>

}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b004      	add	sp, #16
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	20000428 	.word	0x20000428
 8003c54:	2000043c 	.word	0x2000043c
 8003c58:	20000c20 	.word	0x20000c20
 8003c5c:	20000c14 	.word	0x20000c14
 8003c60:	50000800 	.word	0x50000800
 8003c64:	2000042c 	.word	0x2000042c
 8003c68:	20000c5c 	.word	0x20000c5c
 8003c6c:	20000bb8 	.word	0x20000bb8

08003c70 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]


}
 8003c78:	46c0      	nop			@ (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b002      	add	sp, #8
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]


}
 8003c88:	46c0      	nop			@ (mov r8, r8)
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	b002      	add	sp, #8
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	0002      	movs	r2, r0
 8003c98:	6039      	str	r1, [r7, #0]
 8003c9a:	1dbb      	adds	r3, r7, #6
 8003c9c:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8003c9e:	4b34      	ldr	r3, [pc, #208]	@ (8003d70 <Input_Capture_Processing+0xe0>)
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f001 fdc6 	bl	8005834 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8003ca8:	1dbb      	adds	r3, r7, #6
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f001 fd4f 	bl	8005752 <isPrime>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d106      	bne.n	8003cc8 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8003cba:	1dbb      	adds	r3, r7, #6
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	1dbb      	adds	r3, r7, #6
 8003cc6:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8003cc8:	1dbb      	adds	r3, r7, #6
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	019b      	lsls	r3, r3, #6
 8003cd0:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003cd2:	2317      	movs	r3, #23
 8003cd4:	18fb      	adds	r3, r7, r3
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	e02d      	b.n	8003d38 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8003cdc:	2317      	movs	r3, #23
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2280      	movs	r2, #128	@ 0x80
 8003ce6:	0052      	lsls	r2, r2, #1
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	1dbb      	adds	r3, r7, #6
 8003cee:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8003cf0:	1dbb      	adds	r3, r7, #6
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	001a      	movs	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	0011      	movs	r1, r2
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f7fc fa87 	bl	8000210 <__aeabi_uidivmod>
 8003d02:	000b      	movs	r3, r1
 8003d04:	001a      	movs	r2, r3
 8003d06:	210e      	movs	r1, #14
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8003d0c:	187b      	adds	r3, r7, r1
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10b      	bne.n	8003d2c <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8003d14:	1dbb      	adds	r3, r7, #6
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	0019      	movs	r1, r3
 8003d1c:	6938      	ldr	r0, [r7, #16]
 8003d1e:	f7fc f9f1 	bl	8000104 <__udivsi3>
 8003d22:	0003      	movs	r3, r0
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	835a      	strh	r2, [r3, #26]
			break;
 8003d2a:	e00a      	b.n	8003d42 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8003d2c:	2117      	movs	r1, #23
 8003d2e:	187b      	adds	r3, r7, r1
 8003d30:	781a      	ldrb	r2, [r3, #0]
 8003d32:	187b      	adds	r3, r7, r1
 8003d34:	3201      	adds	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	2317      	movs	r3, #23
 8003d3a:	18fb      	adds	r3, r7, r3
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b80      	cmp	r3, #128	@ 0x80
 8003d40:	d9cc      	bls.n	8003cdc <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8003d42:	1dbb      	adds	r3, r7, #6
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2280      	movs	r2, #128	@ 0x80
 8003d4a:	0052      	lsls	r2, r2, #1
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2101      	movs	r1, #1
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f000 f9c1 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f001 f8b3 	bl	8004ecc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8003d66:	2301      	movs	r3, #1
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b006      	add	sp, #24
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000c20 	.word	0x20000c20

08003d74 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8003d7a:	1dfc      	adds	r4, r7, #7
 8003d7c:	4b09      	ldr	r3, [pc, #36]	@ (8003da4 <Start_Input_Capture_Timer+0x30>)
 8003d7e:	2100      	movs	r1, #0
 8003d80:	0018      	movs	r0, r3
 8003d82:	f000 f811 	bl	8003da8 <Start_IC_TIM>
 8003d86:	0003      	movs	r3, r0
 8003d88:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8003d8a:	1dfb      	adds	r3, r7, #7
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8003d92:	f7fe fa39 	bl	8002208 <Error_Handler>
	}

	return ok;
 8003d96:	1dfb      	adds	r3, r7, #7
 8003d98:	781b      	ldrb	r3, [r3, #0]
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b003      	add	sp, #12
 8003da0:	bd90      	pop	{r4, r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	20000800 	.word	0x20000800

08003da8 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8003db2:	250f      	movs	r5, #15
 8003db4:	197c      	adds	r4, r7, r5
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <Start_IC_TIM+0x50>)
 8003db8:	0018      	movs	r0, r3
 8003dba:	f005 f969 	bl	8009090 <HAL_TIM_Base_Start_IT>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003df8 <Start_IC_TIM+0x50>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f005 fdcf 	bl	800996c <HAL_TIM_IC_Start_IT>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	197b      	adds	r3, r7, r5
 8003dd4:	197a      	adds	r2, r7, r5
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	400a      	ands	r2, r1
 8003dda:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8003ddc:	197b      	adds	r3, r7, r5
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <Start_IC_TIM+0x40>

		Error_Handler();
 8003de4:	f7fe fa10 	bl	8002208 <Error_Handler>
	}

	return ok_AND;
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	781b      	ldrb	r3, [r3, #0]
}
 8003dee:	0018      	movs	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	b004      	add	sp, #16
 8003df4:	bdb0      	pop	{r4, r5, r7, pc}
 8003df6:	46c0      	nop			@ (mov r8, r8)
 8003df8:	20000800 	.word	0x20000800

08003dfc <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	0010      	movs	r0, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	2324      	movs	r3, #36	@ 0x24
 8003e10:	001a      	movs	r2, r3
 8003e12:	f008 ff4d 	bl	800ccb0 <memcpy>

	return 1;
 8003e16:	2301      	movs	r3, #1
}
 8003e18:	0018      	movs	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	b002      	add	sp, #8
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e24:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e26:	2100      	movs	r1, #0
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f001 fc76 	bl	800571a <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003e2e:	4b09      	ldr	r3, [pc, #36]	@ (8003e54 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8003e36:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <Start_Measurement_Reelapse_Timer+0x38>)
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8003e42:	4b04      	ldr	r3, [pc, #16]	@ (8003e54 <Start_Measurement_Reelapse_Timer+0x34>)
 8003e44:	2100      	movs	r1, #0
 8003e46:	0018      	movs	r0, r3
 8003e48:	f001 fc4b 	bl	80056e2 <Start_OC_TIM>

	return 1;
 8003e4c:	2301      	movs	r3, #1
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200008bc 	.word	0x200008bc
 8003e58:	20000c1c 	.word	0x20000c1c

08003e5c <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8003e60:	4b03      	ldr	r3, [pc, #12]	@ (8003e70 <Begin_Input_Capture_Measurement+0x14>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2200      	movs	r2, #0
 8003e66:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8003e68:	2301      	movs	r3, #1
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000800 	.word	0x20000800

08003e74 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8003e78:	f7fe f9cc 	bl	8002214 <System_Init>

	//STARTUP
	Startup();
 8003e7c:	f000 fb26 	bl	80044cc <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003e80:	4b35      	ldr	r3, [pc, #212]	@ (8003f58 <main+0xe4>)
 8003e82:	2104      	movs	r1, #4
 8003e84:	0018      	movs	r0, r3
 8003e86:	f001 fcaf 	bl	80057e8 <Get_Status_Bit>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d107      	bne.n	8003ea0 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8003e90:	4b32      	ldr	r3, [pc, #200]	@ (8003f5c <main+0xe8>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	4a32      	ldr	r2, [pc, #200]	@ (8003f60 <main+0xec>)
 8003e98:	0011      	movs	r1, r2
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff fef8 	bl	8003c90 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f58 <main+0xe4>)
 8003ea2:	2140      	movs	r1, #64	@ 0x40
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f001 fc9f 	bl	80057e8 <Get_Status_Bit>
 8003eaa:	0003      	movs	r3, r0
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d12b      	bne.n	8003f08 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8003eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f64 <main+0xf0>)
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	23fa      	movs	r3, #250	@ 0xfa
 8003eb6:	01db      	lsls	r3, r3, #7
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d218      	bcs.n	8003eee <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8003ebc:	4b2a      	ldr	r3, [pc, #168]	@ (8003f68 <main+0xf4>)
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003ec6:	4b24      	ldr	r3, [pc, #144]	@ (8003f58 <main+0xe4>)
 8003ec8:	2140      	movs	r1, #64	@ 0x40
 8003eca:	0018      	movs	r0, r3
 8003ecc:	f001 fcb2 	bl	8005834 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ed0:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <main+0xe4>)
 8003ed2:	2120      	movs	r1, #32
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f001 fcad 	bl	8005834 <Clear_Status_Bit>
					idle_counter = 0;
 8003eda:	4b22      	ldr	r3, [pc, #136]	@ (8003f64 <main+0xf0>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	e012      	b.n	8003f08 <main+0x94>
				}
				else{

					idle_counter++;
 8003ee2:	4b20      	ldr	r3, [pc, #128]	@ (8003f64 <main+0xf0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	1c5a      	adds	r2, r3, #1
 8003ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8003f64 <main+0xf0>)
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	e00c      	b.n	8003f08 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003eee:	4b1a      	ldr	r3, [pc, #104]	@ (8003f58 <main+0xe4>)
 8003ef0:	2140      	movs	r1, #64	@ 0x40
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f001 fc9e 	bl	8005834 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003ef8:	4b17      	ldr	r3, [pc, #92]	@ (8003f58 <main+0xe4>)
 8003efa:	2120      	movs	r1, #32
 8003efc:	0018      	movs	r0, r3
 8003efe:	f001 fc87 	bl	8005810 <Set_Status_Bit>
				idle_counter = 0;
 8003f02:	4b18      	ldr	r3, [pc, #96]	@ (8003f64 <main+0xf0>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8003f08:	2380      	movs	r3, #128	@ 0x80
 8003f0a:	005a      	lsls	r2, r3, #1
 8003f0c:	4b12      	ldr	r3, [pc, #72]	@ (8003f58 <main+0xe4>)
 8003f0e:	0011      	movs	r1, r2
 8003f10:	0018      	movs	r0, r3
 8003f12:	f001 fc69 	bl	80057e8 <Get_Status_Bit>
 8003f16:	0003      	movs	r3, r0
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d1b1      	bne.n	8003e80 <main+0xc>

			if(midi_counter < MIDI_COUNT){
 8003f1c:	4b13      	ldr	r3, [pc, #76]	@ (8003f6c <main+0xf8>)
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	23fa      	movs	r3, #250	@ 0xfa
 8003f22:	01db      	lsls	r3, r3, #7
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d205      	bcs.n	8003f34 <main+0xc0>

				midi_counter++;
 8003f28:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <main+0xf8>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f6c <main+0xf8>)
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e7a5      	b.n	8003e80 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	005a      	lsls	r2, r3, #1
 8003f38:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <main+0xe4>)
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f001 fc79 	bl	8005834 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8003f42:	2380      	movs	r3, #128	@ 0x80
 8003f44:	009a      	lsls	r2, r3, #2
 8003f46:	4b04      	ldr	r3, [pc, #16]	@ (8003f58 <main+0xe4>)
 8003f48:	0011      	movs	r1, r2
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f001 fc60 	bl	8005810 <Set_Status_Bit>
				midi_counter = 0;
 8003f50:	4b06      	ldr	r3, [pc, #24]	@ (8003f6c <main+0xf8>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8003f56:	e793      	b.n	8003e80 <main+0xc>
 8003f58:	20000c20 	.word	0x20000c20
 8003f5c:	20000c1c 	.word	0x20000c1c
 8003f60:	20000c80 	.word	0x20000c80
 8003f64:	20000c24 	.word	0x20000c24
 8003f68:	2000043c 	.word	0x2000043c
 8003f6c:	20000c28 	.word	0x20000c28

08003f70 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 8003f70:	b590      	push	{r4, r7, lr}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8003f7c:	2417      	movs	r4, #23
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f005 f836 	bl	8008ff8 <HAL_TIM_Base_Start>
 8003f8c:	0003      	movs	r3, r0
 8003f8e:	0019      	movs	r1, r3
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	193a      	adds	r2, r7, r4
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f005 fb97 	bl	80096d4 <HAL_TIM_PWM_Start>
 8003fa6:	0003      	movs	r3, r0
 8003fa8:	0019      	movs	r1, r3
 8003faa:	193b      	adds	r3, r7, r4
 8003fac:	193a      	adds	r2, r7, r4
 8003fae:	7812      	ldrb	r2, [r2, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	0011      	movs	r1, r2
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f005 fb8a 	bl	80096d4 <HAL_TIM_PWM_Start>
 8003fc0:	0003      	movs	r3, r0
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	193b      	adds	r3, r7, r4
 8003fc6:	193a      	adds	r2, r7, r4
 8003fc8:	7812      	ldrb	r2, [r2, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 8003fce:	193b      	adds	r3, r7, r4
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 8003fd6:	f7fe f917 	bl	8002208 <Error_Handler>
	}

	return ok_OR;
 8003fda:	2317      	movs	r3, #23
 8003fdc:	18fb      	adds	r3, r7, r3
 8003fde:	781b      	ldrb	r3, [r3, #0]
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b007      	add	sp, #28
 8003fe6:	bd90      	pop	{r4, r7, pc}

08003fe8 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 8003fee:	1dfc      	adds	r4, r7, #7
 8003ff0:	4b09      	ldr	r3, [pc, #36]	@ (8004018 <Start_Freq_Gen_Timer+0x30>)
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f001 fb74 	bl	80056e2 <Start_OC_TIM>
 8003ffa:	0003      	movs	r3, r0
 8003ffc:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8003ffe:	1dfb      	adds	r3, r7, #7
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 8004006:	f7fe f8ff 	bl	8002208 <Error_Handler>
	}

	return ok;
 800400a:	1dfb      	adds	r3, r7, #7
 800400c:	781b      	ldrb	r3, [r3, #0]
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	b003      	add	sp, #12
 8004014:	bd90      	pop	{r4, r7, pc}
 8004016:	46c0      	nop			@ (mov r8, r8)
 8004018:	20000744 	.word	0x20000744

0800401c <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8004028:	210b      	movs	r1, #11
 800402a:	187b      	adds	r3, r7, r1
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	891b      	ldrh	r3, [r3, #8]
 8004034:	b29b      	uxth	r3, r3
 8004036:	001a      	movs	r2, r3
 8004038:	0013      	movs	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	189b      	adds	r3, r3, r2
 800403e:	019b      	lsls	r3, r3, #6
 8004040:	189b      	adds	r3, r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	189b      	adds	r3, r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	0a9b      	lsrs	r3, r3, #10
 800404c:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	09da      	lsrs	r2, r3, #7
 8004052:	187b      	adds	r3, r7, r1
 8004054:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	b29a      	uxth	r2, r3
 800405a:	187b      	adds	r3, r7, r1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	01db      	lsls	r3, r3, #7
 8004062:	b29b      	uxth	r3, r3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	b29a      	uxth	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 800406c:	187b      	adds	r3, r7, r1
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2280      	movs	r2, #128	@ 0x80
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	411a      	asrs	r2, r3
 8004076:	0013      	movs	r3, r2
 8004078:	b29a      	uxth	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	835a      	strh	r2, [r3, #26]

    return 1;
 800407e:	2301      	movs	r3, #1
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}

08004088 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8b1b      	ldrh	r3, [r3, #24]
 8004094:	b29a      	uxth	r2, r3
 8004096:	4b10      	ldr	r3, [pc, #64]	@ (80040d8 <Set_Oscillator_Values+0x50>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8b1b      	ldrh	r3, [r3, #24]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	001a      	movs	r2, r3
 80040a4:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <Set_Oscillator_Values+0x50>)
 80040a6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8bdb      	ldrh	r3, [r3, #30]
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b0a      	ldr	r3, [pc, #40]	@ (80040d8 <Set_Oscillator_Values+0x50>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	885b      	ldrh	r3, [r3, #2]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	4b08      	ldr	r3, [pc, #32]	@ (80040dc <Set_Oscillator_Values+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	889b      	ldrh	r3, [r3, #4]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <Set_Oscillator_Values+0x54>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80040cc:	2301      	movs	r3, #1
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b002      	add	sp, #8
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	46c0      	nop			@ (mov r8, r8)
 80040d8:	20000744 	.word	0x20000744
 80040dc:	20000978 	.word	0x20000978

080040e0 <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	000a      	movs	r2, r1
 80040ea:	1cfb      	adds	r3, r7, #3
 80040ec:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d144      	bne.n	8004180 <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	89db      	ldrh	r3, [r3, #14]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3301      	adds	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	89db      	ldrh	r3, [r3, #14]
 8004108:	b29a      	uxth	r2, r3
 800410a:	2380      	movs	r3, #128	@ 0x80
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	429a      	cmp	r2, r3
 8004110:	d102      	bne.n	8004118 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	89db      	ldrh	r3, [r3, #14]
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	741a      	strb	r2, [r3, #16]
 800412e:	e05a      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	89db      	ldrh	r3, [r3, #14]
 8004134:	b29b      	uxth	r3, r3
 8004136:	2b80      	cmp	r3, #128	@ 0x80
 8004138:	d106      	bne.n	8004148 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	741a      	strb	r2, [r3, #16]
 8004146:	e04e      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	89db      	ldrh	r3, [r3, #14]
 800414c:	b29a      	uxth	r2, r3
 800414e:	2380      	movs	r3, #128	@ 0x80
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	429a      	cmp	r2, r3
 8004154:	d106      	bne.n	8004164 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	741a      	strb	r2, [r3, #16]
 8004162:	e040      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	89db      	ldrh	r3, [r3, #14]
 8004168:	b29a      	uxth	r2, r3
 800416a:	23c0      	movs	r3, #192	@ 0xc0
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	429a      	cmp	r2, r3
 8004170:	d139      	bne.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	741a      	strb	r2, [r3, #16]
 800417e:	e032      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 8004180:	1cfb      	adds	r3, r7, #3
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d11f      	bne.n	80041c8 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	799b      	ldrb	r3, [r3, #6]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d004      	beq.n	800419c <Calculate_Next_Main_Oscillator_Values+0xbc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	799b      	ldrb	r3, [r3, #6]
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	22a7      	movs	r2, #167	@ 0xa7
 80041a0:	0052      	lsls	r2, r2, #1
 80041a2:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	741a      	strb	r2, [r3, #16]
 80041b0:	e019      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2280      	movs	r2, #128	@ 0x80
 80041b6:	0052      	lsls	r2, r2, #1
 80041b8:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	741a      	strb	r2, [r3, #16]
 80041c6:	e00e      	b.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80041c8:	1cfb      	adds	r3, r7, #3
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10a      	bne.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	89db      	ldrh	r3, [r3, #14]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d105      	bne.n	80041e6 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	799b      	ldrb	r3, [r3, #6]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d109      	bne.n	8004204 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	89db      	ldrh	r3, [r3, #14]
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	001a      	movs	r2, r3
 80041f8:	4b31      	ldr	r3, [pc, #196]	@ (80042c0 <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 80041fa:	0052      	lsls	r2, r2, #1
 80041fc:	5ad2      	ldrh	r2, [r2, r3]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	e029      	b.n	8004258 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	799b      	ldrb	r3, [r3, #6]
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b01      	cmp	r3, #1
 800420c:	d109      	bne.n	8004222 <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	89db      	ldrh	r3, [r3, #14]
 8004212:	b29b      	uxth	r3, r3
 8004214:	001a      	movs	r2, r3
 8004216:	4b2b      	ldr	r3, [pc, #172]	@ (80042c4 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 8004218:	0052      	lsls	r2, r2, #1
 800421a:	5ad2      	ldrh	r2, [r2, r3]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	e01a      	b.n	8004258 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d108      	bne.n	800423e <Calculate_Next_Main_Oscillator_Values+0x15e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	89db      	ldrh	r3, [r3, #14]
 8004230:	b29b      	uxth	r3, r3
 8004232:	2bff      	cmp	r3, #255	@ 0xff
 8004234:	d803      	bhi.n	800423e <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a23      	ldr	r2, [pc, #140]	@ (80042c8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800423a:	801a      	strh	r2, [r3, #0]
 800423c:	e00c      	b.n	8004258 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	799b      	ldrb	r3, [r3, #6]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d107      	bne.n	8004258 <Calculate_Next_Main_Oscillator_Values+0x178>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	89db      	ldrh	r3, [r3, #14]
 800424c:	b29b      	uxth	r3, r3
 800424e:	2bff      	cmp	r3, #255	@ 0xff
 8004250:	d902      	bls.n	8004258 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	7a9b      	ldrb	r3, [r3, #10]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004260:	d108      	bne.n	8004274 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29b      	uxth	r3, r3
 8004268:	4a17      	ldr	r2, [pc, #92]	@ (80042c8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	b29a      	uxth	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	801a      	strh	r2, [r3, #0]
 8004272:	e01b      	b.n	80042ac <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7a9b      	ldrb	r3, [r3, #10]
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d013      	beq.n	80042a6 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	b29b      	uxth	r3, r3
 8004288:	001a      	movs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7a9b      	ldrb	r3, [r3, #10]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	4353      	muls	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	09db      	lsrs	r3, r3, #7
 8004298:	b29b      	uxth	r3, r3
 800429a:	4a0b      	ldr	r2, [pc, #44]	@ (80042c8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	e002      	b.n	80042ac <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a07      	ldr	r2, [pc, #28]	@ (80042c8 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 80042aa:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	805a      	strh	r2, [r3, #2]

	return 1;
 80042b6:	2301      	movs	r3, #1
}
 80042b8:	0018      	movs	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b004      	add	sp, #16
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	0800d0fc 	.word	0x0800d0fc
 80042c4:	0800ccfc 	.word	0x0800ccfc
 80042c8:	000003ff 	.word	0x000003ff

080042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	4a44      	ldr	r2, [pc, #272]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80042da:	5a9b      	ldrh	r3, [r3, r2]
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	4a41      	ldr	r2, [pc, #260]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80042e6:	5a9b      	ldrh	r3, [r3, r2]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	1e5a      	subs	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	881b      	ldrh	r3, [r3, #0]
 80042f0:	b299      	uxth	r1, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	0052      	lsls	r2, r2, #1
 80042f6:	52d1      	strh	r1, [r2, r3]
 80042f8:	e006      	b.n	8004308 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b299      	uxth	r1, r3
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	2380      	movs	r3, #128	@ 0x80
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	4a38      	ldr	r2, [pc, #224]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800430c:	5a9b      	ldrh	r3, [r3, r2]
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10e      	bne.n	8004332 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4a35      	ldr	r2, [pc, #212]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004318:	2180      	movs	r1, #128	@ 0x80
 800431a:	0089      	lsls	r1, r1, #2
 800431c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	4a33      	ldr	r2, [pc, #204]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004322:	5a9b      	ldrh	r3, [r3, r2]
 8004324:	b29b      	uxth	r3, r3
 8004326:	3b01      	subs	r3, #1
 8004328:	b299      	uxth	r1, r3
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800432e:	5299      	strh	r1, [r3, r2]
 8004330:	e026      	b.n	8004380 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	4a2e      	ldr	r2, [pc, #184]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004336:	5a9b      	ldrh	r3, [r3, r2]
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10e      	bne.n	800435c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4a2b      	ldr	r2, [pc, #172]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004342:	2180      	movs	r1, #128	@ 0x80
 8004344:	0089      	lsls	r1, r1, #2
 8004346:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4a28      	ldr	r2, [pc, #160]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800434c:	5a9b      	ldrh	r3, [r3, r2]
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b299      	uxth	r1, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4a25      	ldr	r2, [pc, #148]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004358:	5299      	strh	r1, [r3, r2]
 800435a:	e011      	b.n	8004380 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	4a23      	ldr	r2, [pc, #140]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004360:	5a9b      	ldrh	r3, [r3, r2]
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b299      	uxth	r1, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4a20      	ldr	r2, [pc, #128]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800436c:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4a1f      	ldr	r2, [pc, #124]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8004372:	5a9b      	ldrh	r3, [r3, r2]
 8004374:	b29b      	uxth	r3, r3
 8004376:	3b01      	subs	r3, #1
 8004378:	b299      	uxth	r1, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800437e:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	4a1a      	ldr	r2, [pc, #104]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8004384:	5a9b      	ldrh	r3, [r3, r2]
 8004386:	b29b      	uxth	r3, r3
 8004388:	001a      	movs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800438e:	b29b      	uxth	r3, r3
 8004390:	18d2      	adds	r2, r2, r3
 8004392:	2380      	movs	r3, #128	@ 0x80
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	429a      	cmp	r2, r3
 8004398:	dd13      	ble.n	80043c2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	4913      	ldr	r1, [pc, #76]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80043a0:	5a5b      	ldrh	r3, [r3, r1]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	18cb      	adds	r3, r1, r3
 80043ae:	4911      	ldr	r1, [pc, #68]	@ (80043f4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 80043b0:	468c      	mov	ip, r1
 80043b2:	4463      	add	r3, ip
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	809a      	strh	r2, [r3, #4]
 80043c0:	e00f      	b.n	80043e2 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4909      	ldr	r1, [pc, #36]	@ (80043ec <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80043c8:	5a5b      	ldrh	r3, [r3, r1]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	0019      	movs	r1, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	18cb      	adds	r3, r1, r3
 80043d6:	005b      	lsls	r3, r3, #1
 80043d8:	18d3      	adds	r3, r2, r3
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b002      	add	sp, #8
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	00000402 	.word	0x00000402
 80043f0:	00000404 	.word	0x00000404
 80043f4:	7ffffe00 	.word	0x7ffffe00

080043f8 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	881b      	ldrh	r3, [r3, #0]
 8004406:	b29a      	uxth	r2, r3
 8004408:	2116      	movs	r1, #22
 800440a:	187b      	adds	r3, r7, r1
 800440c:	0952      	lsrs	r2, r2, #5
 800440e:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 8004410:	187b      	adds	r3, r7, r1
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	2b2a      	cmp	r3, #42	@ 0x2a
 8004416:	d803      	bhi.n	8004420 <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	719a      	strb	r2, [r3, #6]
 800441e:	e010      	b.n	8004442 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 8004420:	2316      	movs	r3, #22
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	2b55      	cmp	r3, #85	@ 0x55
 8004428:	d803      	bhi.n	8004432 <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	719a      	strb	r2, [r3, #6]
 8004430:	e007      	b.n	8004442 <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 8004432:	2316      	movs	r3, #22
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	881b      	ldrh	r3, [r3, #0]
 8004438:	2b7f      	cmp	r3, #127	@ 0x7f
 800443a:	d802      	bhi.n	8004442 <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	3302      	adds	r3, #2
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	2114      	movs	r1, #20
 800444c:	187b      	adds	r3, r7, r1
 800444e:	0952      	lsrs	r2, r2, #5
 8004450:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 8004452:	187b      	adds	r3, r7, r1
 8004454:	187a      	adds	r2, r7, r1
 8004456:	8812      	ldrh	r2, [r2, #0]
 8004458:	00d2      	lsls	r2, r2, #3
 800445a:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	187a      	adds	r2, r7, r1
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	3304      	adds	r3, #4
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	b29b      	uxth	r3, r3
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	b29a      	uxth	r2, r3
 8004470:	2113      	movs	r1, #19
 8004472:	187b      	adds	r3, r7, r1
 8004474:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	187a      	adds	r2, r7, r1
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	3306      	adds	r3, #6
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	b29a      	uxth	r2, r3
 8004486:	2110      	movs	r1, #16
 8004488:	187b      	adds	r3, r7, r1
 800448a:	0952      	lsrs	r2, r2, #5
 800448c:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 800448e:	187a      	adds	r2, r7, r1
 8004490:	187b      	adds	r3, r7, r1
 8004492:	881b      	ldrh	r3, [r3, #0]
 8004494:	18db      	adds	r3, r3, r3
 8004496:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	187a      	adds	r2, r7, r1
 800449c:	8812      	ldrh	r2, [r2, #0]
 800449e:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	210e      	movs	r1, #14
 80044aa:	187b      	adds	r3, r7, r1
 80044ac:	0952      	lsrs	r2, r2, #5
 80044ae:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 80044b0:	187b      	adds	r3, r7, r1
 80044b2:	187a      	adds	r2, r7, r1
 80044b4:	8812      	ldrh	r2, [r2, #0]
 80044b6:	0092      	lsls	r2, r2, #2
 80044b8:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	187a      	adds	r2, r7, r1
 80044be:	8812      	ldrh	r2, [r2, #0]
 80044c0:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80044c2:	2301      	movs	r3, #1
}
 80044c4:	0018      	movs	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	b006      	add	sp, #24
 80044ca:	bd80      	pop	{r7, pc}

080044cc <Startup>:

#include "stm32g0xx_ll_lptim.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80044d2:	2007      	movs	r0, #7
 80044d4:	f002 fd8f 	bl	8006ff6 <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80044d8:	4b56      	ldr	r3, [pc, #344]	@ (8004634 <Startup+0x168>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b55      	ldr	r3, [pc, #340]	@ (8004634 <Startup+0x168>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	430a      	orrs	r2, r1
 80044e6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80044e8:	4b53      	ldr	r3, [pc, #332]	@ (8004638 <Startup+0x16c>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	4b52      	ldr	r3, [pc, #328]	@ (8004638 <Startup+0x16c>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2101      	movs	r1, #1
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80044f8:	2380      	movs	r3, #128	@ 0x80
 80044fa:	0099      	lsls	r1, r3, #2
 80044fc:	23a0      	movs	r3, #160	@ 0xa0
 80044fe:	05db      	lsls	r3, r3, #23
 8004500:	2201      	movs	r2, #1
 8004502:	0018      	movs	r0, r3
 8004504:	f003 fa33 	bl	800796e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 8004508:	2380      	movs	r3, #128	@ 0x80
 800450a:	0159      	lsls	r1, r3, #5
 800450c:	23a0      	movs	r3, #160	@ 0xa0
 800450e:	05db      	lsls	r3, r3, #23
 8004510:	2201      	movs	r2, #1
 8004512:	0018      	movs	r0, r3
 8004514:	f003 fa2b 	bl	800796e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 8004518:	23a0      	movs	r3, #160	@ 0xa0
 800451a:	05db      	lsls	r3, r3, #23
 800451c:	2200      	movs	r2, #0
 800451e:	2180      	movs	r1, #128	@ 0x80
 8004520:	0018      	movs	r0, r3
 8004522:	f003 fa24 	bl	800796e <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8004526:	f7fb ff8f 	bl	8000448 <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 800452a:	f7fc fabd 	bl	8000aa8 <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 800452e:	4b43      	ldr	r3, [pc, #268]	@ (800463c <Startup+0x170>)
 8004530:	4a43      	ldr	r2, [pc, #268]	@ (8004640 <Startup+0x174>)
 8004532:	4944      	ldr	r1, [pc, #272]	@ (8004644 <Startup+0x178>)
 8004534:	4c44      	ldr	r4, [pc, #272]	@ (8004648 <Startup+0x17c>)
 8004536:	2004      	movs	r0, #4
 8004538:	9000      	str	r0, [sp, #0]
 800453a:	0020      	movs	r0, r4
 800453c:	f7fc f9a7 	bl	800088e <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 8004540:	4b42      	ldr	r3, [pc, #264]	@ (800464c <Startup+0x180>)
 8004542:	4a43      	ldr	r2, [pc, #268]	@ (8004650 <Startup+0x184>)
 8004544:	493f      	ldr	r1, [pc, #252]	@ (8004644 <Startup+0x178>)
 8004546:	4843      	ldr	r0, [pc, #268]	@ (8004654 <Startup+0x188>)
 8004548:	2404      	movs	r4, #4
 800454a:	9400      	str	r4, [sp, #0]
 800454c:	f7fc fa55 	bl	80009fa <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 8004550:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <Startup+0x18c>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	001a      	movs	r2, r3
 8004556:	4941      	ldr	r1, [pc, #260]	@ (800465c <Startup+0x190>)
 8004558:	4b41      	ldr	r3, [pc, #260]	@ (8004660 <Startup+0x194>)
 800455a:	0018      	movs	r0, r3
 800455c:	f001 fdfc 	bl	8006158 <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	4b37      	ldr	r3, [pc, #220]	@ (8004640 <Startup+0x174>)
 8004564:	2110      	movs	r1, #16
 8004566:	0018      	movs	r0, r3
 8004568:	f001 f93e 	bl	80057e8 <Get_Status_Bit>
 800456c:	1e03      	subs	r3, r0, #0
 800456e:	d0f8      	beq.n	8004562 <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 8004570:	1dbb      	adds	r3, r7, #6
 8004572:	2200      	movs	r2, #0
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	e02c      	b.n	80045d2 <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8004578:	4b3a      	ldr	r3, [pc, #232]	@ (8004664 <Startup+0x198>)
 800457a:	799b      	ldrb	r3, [r3, #6]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d111      	bne.n	80045a6 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 8004582:	4b38      	ldr	r3, [pc, #224]	@ (8004664 <Startup+0x198>)
 8004584:	7a9b      	ldrb	r3, [r3, #10]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	001a      	movs	r2, r3
 800458a:	0013      	movs	r3, r2
 800458c:	029b      	lsls	r3, r3, #10
 800458e:	1a9b      	subs	r3, r3, r2
 8004590:	11db      	asrs	r3, r3, #7
 8004592:	b29b      	uxth	r3, r3
 8004594:	1dba      	adds	r2, r7, #6
 8004596:	8812      	ldrh	r2, [r2, #0]
 8004598:	4933      	ldr	r1, [pc, #204]	@ (8004668 <Startup+0x19c>)
 800459a:	1acb      	subs	r3, r1, r3
 800459c:	b299      	uxth	r1, r3
 800459e:	4b33      	ldr	r3, [pc, #204]	@ (800466c <Startup+0x1a0>)
 80045a0:	0052      	lsls	r2, r2, #1
 80045a2:	52d1      	strh	r1, [r2, r3]
 80045a4:	e010      	b.n	80045c8 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 80045a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004664 <Startup+0x198>)
 80045a8:	7a9b      	ldrb	r3, [r3, #10]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	001a      	movs	r2, r3
 80045ae:	0013      	movs	r3, r2
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	121b      	asrs	r3, r3, #8
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	1dba      	adds	r2, r7, #6
 80045ba:	8812      	ldrh	r2, [r2, #0]
 80045bc:	492a      	ldr	r1, [pc, #168]	@ (8004668 <Startup+0x19c>)
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	b299      	uxth	r1, r3
 80045c2:	4b2a      	ldr	r3, [pc, #168]	@ (800466c <Startup+0x1a0>)
 80045c4:	0052      	lsls	r2, r2, #1
 80045c6:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	881a      	ldrh	r2, [r3, #0]
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	3201      	adds	r2, #1
 80045d0:	801a      	strh	r2, [r3, #0]
 80045d2:	1dbb      	adds	r3, r7, #6
 80045d4:	881a      	ldrh	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	@ 0x80
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	429a      	cmp	r2, r3
 80045dc:	d9cc      	bls.n	8004578 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80045de:	4b21      	ldr	r3, [pc, #132]	@ (8004664 <Startup+0x198>)
 80045e0:	2102      	movs	r1, #2
 80045e2:	0018      	movs	r0, r3
 80045e4:	f7ff fd7c 	bl	80040e0 <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80045e8:	4a20      	ldr	r2, [pc, #128]	@ (800466c <Startup+0x1a0>)
 80045ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004664 <Startup+0x198>)
 80045ec:	0011      	movs	r1, r2
 80045ee:	0018      	movs	r0, r3
 80045f0:	f7ff fe6c 	bl	80042cc <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80045f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004664 <Startup+0x198>)
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff fd46 	bl	8004088 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80045fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004670 <Startup+0x1a4>)
 80045fe:	220c      	movs	r2, #12
 8004600:	2104      	movs	r1, #4
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff fcb4 	bl	8003f70 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 8004608:	f7ff fcee 	bl	8003fe8 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 800460c:	f7fc fe76 	bl	80012fc <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 8004610:	f7ff fbb0 	bl	8003d74 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 8004614:	f001 f8e0 	bl	80057d8 <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004618:	4b16      	ldr	r3, [pc, #88]	@ (8004674 <Startup+0x1a8>)
 800461a:	22fa      	movs	r2, #250	@ 0xfa
 800461c:	21fa      	movs	r1, #250	@ 0xfa
 800461e:	0018      	movs	r0, r3
 8004620:	f003 fa9c 	bl	8007b5c <HAL_LPTIM_SetOnce_Start_IT>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004624:	2007      	movs	r0, #7
 8004626:	f002 fcd6 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

	return 1;
 800462a:	2301      	movs	r3, #1
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b003      	add	sp, #12
 8004632:	bd90      	pop	{r4, r7, pc}
 8004634:	20000800 	.word	0x20000800
 8004638:	20000744 	.word	0x20000744
 800463c:	200004bd 	.word	0x200004bd
 8004640:	20000c20 	.word	0x20000c20
 8004644:	200004b4 	.word	0x200004b4
 8004648:	0800f820 	.word	0x0800f820
 800464c:	20000478 	.word	0x20000478
 8004650:	20000468 	.word	0x20000468
 8004654:	20000488 	.word	0x20000488
 8004658:	0800d4fc 	.word	0x0800d4fc
 800465c:	20000c2c 	.word	0x20000c2c
 8004660:	200004e8 	.word	0x200004e8
 8004664:	20000c38 	.word	0x20000c38
 8004668:	000003ff 	.word	0x000003ff
 800466c:	20000020 	.word	0x20000020
 8004670:	20000978 	.word	0x20000978
 8004674:	20000bb8 	.word	0x20000bb8

08004678 <Advance_Pending_States>:
volatile struct Normal_FSM phase_fsm = {.current_state = MANUAL_MODE, .prev_state = NONE};
volatile struct IP_CAP_FSM IP_CAP_fsm = {.current_state = IDLE, .prev_state = IP_CAP_NONE};
volatile enum MIDI_CLK_FSM_State MIDI_CLK_fsm = NOT_COMPILING;

//FUNCTION DEFINITIONS
uint8_t Advance_Pending_States(void){
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0

	//UPDATE SPEED FSM
	union Speed_FSM_States current_state = speed_fsm.current_state;
 800467e:	1d3b      	adds	r3, r7, #4
 8004680:	4a12      	ldr	r2, [pc, #72]	@ (80046cc <Advance_Pending_States+0x54>)
 8004682:	7812      	ldrb	r2, [r2, #0]
 8004684:	701a      	strb	r2, [r3, #0]

	if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004686:	4b11      	ldr	r3, [pc, #68]	@ (80046cc <Advance_Pending_States+0x54>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b05      	cmp	r3, #5
 800468e:	d103      	bne.n	8004698 <Advance_Pending_States+0x20>

		speed_fsm.current_state.speed_exclusive_state = TAP_MODE;
 8004690:	4b0e      	ldr	r3, [pc, #56]	@ (80046cc <Advance_Pending_States+0x54>)
 8004692:	2204      	movs	r2, #4
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e007      	b.n	80046a8 <Advance_Pending_States+0x30>
	}
	else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){
 8004698:	4b0c      	ldr	r3, [pc, #48]	@ (80046cc <Advance_Pending_States+0x54>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b07      	cmp	r3, #7
 80046a0:	d102      	bne.n	80046a8 <Advance_Pending_States+0x30>

		speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <Advance_Pending_States+0x54>)
 80046a4:	2206      	movs	r2, #6
 80046a6:	701a      	strb	r2, [r3, #0]
	}

	//DON'T ADD MIDI CLK CODE


	if(!((current_state.speed_exclusive_state == CLK_IN_MODE) || (current_state.speed_exclusive_state == TAP_MODE))){
 80046a8:	1d3b      	adds	r3, r7, #4
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b06      	cmp	r3, #6
 80046ae:	d007      	beq.n	80046c0 <Advance_Pending_States+0x48>
 80046b0:	1d3b      	adds	r3, r7, #4
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d003      	beq.n	80046c0 <Advance_Pending_States+0x48>

		speed_fsm.prev_state = current_state;
 80046b8:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <Advance_Pending_States+0x54>)
 80046ba:	1d3a      	adds	r2, r7, #4
 80046bc:	7812      	ldrb	r2, [r2, #0]
 80046be:	705a      	strb	r2, [r3, #1]
	}

	return 1;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	0018      	movs	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	b002      	add	sp, #8
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	46c0      	nop			@ (mov r8, r8)
 80046cc:	20000428 	.word	0x20000428

080046d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004714 <HAL_MspInit+0x44>)
 80046d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046da:	4b0e      	ldr	r3, [pc, #56]	@ (8004714 <HAL_MspInit+0x44>)
 80046dc:	2101      	movs	r1, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80046e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004714 <HAL_MspInit+0x44>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	2201      	movs	r2, #1
 80046e8:	4013      	ands	r3, r2
 80046ea:	607b      	str	r3, [r7, #4]
 80046ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ee:	4b09      	ldr	r3, [pc, #36]	@ (8004714 <HAL_MspInit+0x44>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046f2:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <HAL_MspInit+0x44>)
 80046f4:	2180      	movs	r1, #128	@ 0x80
 80046f6:	0549      	lsls	r1, r1, #21
 80046f8:	430a      	orrs	r2, r1
 80046fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_MspInit+0x44>)
 80046fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	055b      	lsls	r3, r3, #21
 8004704:	4013      	ands	r3, r2
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b002      	add	sp, #8
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b08b      	sub	sp, #44	@ 0x2c
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004720:	2414      	movs	r4, #20
 8004722:	193b      	adds	r3, r7, r4
 8004724:	0018      	movs	r0, r3
 8004726:	2314      	movs	r3, #20
 8004728:	001a      	movs	r2, r3
 800472a:	2100      	movs	r1, #0
 800472c:	f008 fa94 	bl	800cc58 <memset>
  if(hadc->Instance==ADC1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a2e      	ldr	r2, [pc, #184]	@ (80047f0 <HAL_ADC_MspInit+0xd8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d155      	bne.n	80047e6 <HAL_ADC_MspInit+0xce>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800473a:	4b2e      	ldr	r3, [pc, #184]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 800473c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800473e:	4b2d      	ldr	r3, [pc, #180]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 8004740:	2180      	movs	r1, #128	@ 0x80
 8004742:	0349      	lsls	r1, r1, #13
 8004744:	430a      	orrs	r2, r1
 8004746:	641a      	str	r2, [r3, #64]	@ 0x40
 8004748:	4b2a      	ldr	r3, [pc, #168]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 800474a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800474c:	2380      	movs	r3, #128	@ 0x80
 800474e:	035b      	lsls	r3, r3, #13
 8004750:	4013      	ands	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004756:	4b27      	ldr	r3, [pc, #156]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 8004758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800475a:	4b26      	ldr	r3, [pc, #152]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 800475c:	2101      	movs	r1, #1
 800475e:	430a      	orrs	r2, r1
 8004760:	635a      	str	r2, [r3, #52]	@ 0x34
 8004762:	4b24      	ldr	r3, [pc, #144]	@ (80047f4 <HAL_ADC_MspInit+0xdc>)
 8004764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004766:	2201      	movs	r2, #1
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800476e:	193b      	adds	r3, r7, r4
 8004770:	2273      	movs	r2, #115	@ 0x73
 8004772:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004774:	193b      	adds	r3, r7, r4
 8004776:	2203      	movs	r2, #3
 8004778:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477a:	193b      	adds	r3, r7, r4
 800477c:	2200      	movs	r2, #0
 800477e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004780:	193a      	adds	r2, r7, r4
 8004782:	23a0      	movs	r3, #160	@ 0xa0
 8004784:	05db      	lsls	r3, r3, #23
 8004786:	0011      	movs	r1, r2
 8004788:	0018      	movs	r0, r3
 800478a:	f002 ff6f 	bl	800766c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800478e:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 8004790:	4a1a      	ldr	r2, [pc, #104]	@ (80047fc <HAL_ADC_MspInit+0xe4>)
 8004792:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004794:	4b18      	ldr	r3, [pc, #96]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 8004796:	2205      	movs	r2, #5
 8004798:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800479a:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80047a6:	4b14      	ldr	r3, [pc, #80]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047a8:	2280      	movs	r2, #128	@ 0x80
 80047aa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80047ac:	4b12      	ldr	r3, [pc, #72]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047ae:	2280      	movs	r2, #128	@ 0x80
 80047b0:	0052      	lsls	r2, r2, #1
 80047b2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80047b4:	4b10      	ldr	r3, [pc, #64]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047b6:	2280      	movs	r2, #128	@ 0x80
 80047b8:	00d2      	lsls	r2, r2, #3
 80047ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80047bc:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047be:	2200      	movs	r2, #0
 80047c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80047c2:	4b0d      	ldr	r3, [pc, #52]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047c4:	2280      	movs	r2, #128	@ 0x80
 80047c6:	0192      	lsls	r2, r2, #6
 80047c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80047ca:	4b0b      	ldr	r3, [pc, #44]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047cc:	0018      	movs	r0, r3
 80047ce:	f002 fc2f 	bl	8007030 <HAL_DMA_Init>
 80047d2:	1e03      	subs	r3, r0, #0
 80047d4:	d001      	beq.n	80047da <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 80047d6:	f7fd fd17 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a06      	ldr	r2, [pc, #24]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047de:	651a      	str	r2, [r3, #80]	@ 0x50
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_ADC_MspInit+0xe0>)
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b00b      	add	sp, #44	@ 0x2c
 80047ec:	bd90      	pop	{r4, r7, pc}
 80047ee:	46c0      	nop			@ (mov r8, r8)
 80047f0:	40012400 	.word	0x40012400
 80047f4:	40021000 	.word	0x40021000
 80047f8:	20000570 	.word	0x20000570
 80047fc:	40020008 	.word	0x40020008

08004800 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8004800:	b590      	push	{r4, r7, lr}
 8004802:	b097      	sub	sp, #92	@ 0x5c
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	2344      	movs	r3, #68	@ 0x44
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	0018      	movs	r0, r3
 800480e:	2314      	movs	r3, #20
 8004810:	001a      	movs	r2, r3
 8004812:	2100      	movs	r1, #0
 8004814:	f008 fa20 	bl	800cc58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004818:	241c      	movs	r4, #28
 800481a:	193b      	adds	r3, r7, r4
 800481c:	0018      	movs	r0, r3
 800481e:	2328      	movs	r3, #40	@ 0x28
 8004820:	001a      	movs	r2, r3
 8004822:	2100      	movs	r1, #0
 8004824:	f008 fa18 	bl	800cc58 <memset>
  if(hlptim->Instance==LPTIM1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a46      	ldr	r2, [pc, #280]	@ (8004948 <HAL_LPTIM_MspInit+0x148>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d13e      	bne.n	80048b0 <HAL_LPTIM_MspInit+0xb0>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8004832:	193b      	adds	r3, r7, r4
 8004834:	2280      	movs	r2, #128	@ 0x80
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 800483a:	193b      	adds	r3, r7, r4
 800483c:	2200      	movs	r2, #0
 800483e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004840:	193b      	adds	r3, r7, r4
 8004842:	0018      	movs	r0, r3
 8004844:	f004 f9f8 	bl	8008c38 <HAL_RCCEx_PeriphCLKConfig>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d001      	beq.n	8004850 <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 800484c:	f7fd fcdc 	bl	8002208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8004850:	4b3e      	ldr	r3, [pc, #248]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004852:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004854:	4b3d      	ldr	r3, [pc, #244]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004856:	2180      	movs	r1, #128	@ 0x80
 8004858:	0609      	lsls	r1, r1, #24
 800485a:	430a      	orrs	r2, r1
 800485c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800485e:	4b3b      	ldr	r3, [pc, #236]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	0fdb      	lsrs	r3, r3, #31
 8004864:	07db      	lsls	r3, r3, #31
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800486a:	4b38      	ldr	r3, [pc, #224]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 800486c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486e:	4b37      	ldr	r3, [pc, #220]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004870:	2102      	movs	r1, #2
 8004872:	430a      	orrs	r2, r1
 8004874:	635a      	str	r2, [r3, #52]	@ 0x34
 8004876:	4b35      	ldr	r3, [pc, #212]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	2202      	movs	r2, #2
 800487c:	4013      	ands	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]
    /**LPTIM1 GPIO Configuration
    PB0     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004882:	2144      	movs	r1, #68	@ 0x44
 8004884:	187b      	adds	r3, r7, r1
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	187b      	adds	r3, r7, r1
 800488c:	2202      	movs	r2, #2
 800488e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	187b      	adds	r3, r7, r1
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004896:	187b      	adds	r3, r7, r1
 8004898:	2200      	movs	r2, #0
 800489a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM1;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	2205      	movs	r2, #5
 80048a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a2:	187b      	adds	r3, r7, r1
 80048a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004950 <HAL_LPTIM_MspInit+0x150>)
 80048a6:	0019      	movs	r1, r3
 80048a8:	0010      	movs	r0, r2
 80048aa:	f002 fedf 	bl	800766c <HAL_GPIO_Init>
  /* USER CODE BEGIN LPTIM2_MspInit 1 */

  /* USER CODE END LPTIM2_MspInit 1 */
  }

}
 80048ae:	e046      	b.n	800493e <HAL_LPTIM_MspInit+0x13e>
  else if(hlptim->Instance==LPTIM2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <HAL_LPTIM_MspInit+0x154>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d141      	bne.n	800493e <HAL_LPTIM_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 80048ba:	211c      	movs	r1, #28
 80048bc:	187b      	adds	r3, r7, r1
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	00d2      	lsls	r2, r2, #3
 80048c2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK1;
 80048c4:	187b      	adds	r3, r7, r1
 80048c6:	2200      	movs	r2, #0
 80048c8:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ca:	187b      	adds	r3, r7, r1
 80048cc:	0018      	movs	r0, r3
 80048ce:	f004 f9b3 	bl	8008c38 <HAL_RCCEx_PeriphCLKConfig>
 80048d2:	1e03      	subs	r3, r0, #0
 80048d4:	d001      	beq.n	80048da <HAL_LPTIM_MspInit+0xda>
      Error_Handler();
 80048d6:	f7fd fc97 	bl	8002208 <Error_Handler>
    __HAL_RCC_LPTIM2_CLK_ENABLE();
 80048da:	4b1c      	ldr	r3, [pc, #112]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 80048dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 80048e0:	2180      	movs	r1, #128	@ 0x80
 80048e2:	05c9      	lsls	r1, r1, #23
 80048e4:	430a      	orrs	r2, r1
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80048e8:	4b18      	ldr	r3, [pc, #96]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 80048ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048ec:	2380      	movs	r3, #128	@ 0x80
 80048ee:	05db      	lsls	r3, r3, #23
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b15      	ldr	r3, [pc, #84]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 80048f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fa:	4b14      	ldr	r3, [pc, #80]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 80048fc:	2101      	movs	r1, #1
 80048fe:	430a      	orrs	r2, r1
 8004900:	635a      	str	r2, [r3, #52]	@ 0x34
 8004902:	4b12      	ldr	r3, [pc, #72]	@ (800494c <HAL_LPTIM_MspInit+0x14c>)
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	2201      	movs	r2, #1
 8004908:	4013      	ands	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800490e:	2144      	movs	r1, #68	@ 0x44
 8004910:	187b      	adds	r3, r7, r1
 8004912:	2280      	movs	r2, #128	@ 0x80
 8004914:	0052      	lsls	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004918:	187b      	adds	r3, r7, r1
 800491a:	2202      	movs	r2, #2
 800491c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800491e:	187b      	adds	r3, r7, r1
 8004920:	2200      	movs	r2, #0
 8004922:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004924:	187b      	adds	r3, r7, r1
 8004926:	2200      	movs	r2, #0
 8004928:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_LPTIM2;
 800492a:	187b      	adds	r3, r7, r1
 800492c:	2205      	movs	r2, #5
 800492e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004930:	187a      	adds	r2, r7, r1
 8004932:	23a0      	movs	r3, #160	@ 0xa0
 8004934:	05db      	lsls	r3, r3, #23
 8004936:	0011      	movs	r1, r2
 8004938:	0018      	movs	r0, r3
 800493a:	f002 fe97 	bl	800766c <HAL_GPIO_Init>
}
 800493e:	46c0      	nop			@ (mov r8, r8)
 8004940:	46bd      	mov	sp, r7
 8004942:	b017      	add	sp, #92	@ 0x5c
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	40007c00 	.word	0x40007c00
 800494c:	40021000 	.word	0x40021000
 8004950:	50000400 	.word	0x50000400
 8004954:	40009400 	.word	0x40009400

08004958 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004958:	b590      	push	{r4, r7, lr}
 800495a:	b099      	sub	sp, #100	@ 0x64
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004960:	234c      	movs	r3, #76	@ 0x4c
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	0018      	movs	r0, r3
 8004966:	2314      	movs	r3, #20
 8004968:	001a      	movs	r2, r3
 800496a:	2100      	movs	r1, #0
 800496c:	f008 f974 	bl	800cc58 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004970:	2424      	movs	r4, #36	@ 0x24
 8004972:	193b      	adds	r3, r7, r4
 8004974:	0018      	movs	r0, r3
 8004976:	2328      	movs	r3, #40	@ 0x28
 8004978:	001a      	movs	r2, r3
 800497a:	2100      	movs	r1, #0
 800497c:	f008 f96c 	bl	800cc58 <memset>
  if(htim_base->Instance==TIM1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a68      	ldr	r2, [pc, #416]	@ (8004b28 <HAL_TIM_Base_MspInit+0x1d0>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d11d      	bne.n	80049c6 <HAL_TIM_Base_MspInit+0x6e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800498a:	193b      	adds	r3, r7, r4
 800498c:	2280      	movs	r2, #128	@ 0x80
 800498e:	0392      	lsls	r2, r2, #14
 8004990:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8004992:	193b      	adds	r3, r7, r4
 8004994:	2200      	movs	r2, #0
 8004996:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004998:	193b      	adds	r3, r7, r4
 800499a:	0018      	movs	r0, r3
 800499c:	f004 f94c 	bl	8008c38 <HAL_RCCEx_PeriphCLKConfig>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_TIM_Base_MspInit+0x50>
    {
      Error_Handler();
 80049a4:	f7fd fc30 	bl	8002208 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049a8:	4b60      	ldr	r3, [pc, #384]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ac:	4b5f      	ldr	r3, [pc, #380]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049ae:	2180      	movs	r1, #128	@ 0x80
 80049b0:	0109      	lsls	r1, r1, #4
 80049b2:	430a      	orrs	r2, r1
 80049b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80049b6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	4013      	ands	r3, r2
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
    }

}
 80049c4:	e0ab      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	2380      	movs	r3, #128	@ 0x80
 80049cc:	05db      	lsls	r3, r3, #23
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d138      	bne.n	8004a44 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80049d2:	4b56      	ldr	r3, [pc, #344]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049d6:	4b55      	ldr	r3, [pc, #340]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049d8:	2101      	movs	r1, #1
 80049da:	430a      	orrs	r2, r1
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049de:	4b53      	ldr	r3, [pc, #332]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	2201      	movs	r2, #1
 80049e4:	4013      	ands	r3, r2
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049ea:	4b50      	ldr	r3, [pc, #320]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049ee:	4b4f      	ldr	r3, [pc, #316]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049f0:	2101      	movs	r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f6:	4b4d      	ldr	r3, [pc, #308]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 80049f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049fa:	2201      	movs	r2, #1
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IP_CAP_Pin;
 8004a02:	214c      	movs	r1, #76	@ 0x4c
 8004a04:	187b      	adds	r3, r7, r1
 8004a06:	2280      	movs	r2, #128	@ 0x80
 8004a08:	0212      	lsls	r2, r2, #8
 8004a0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a0c:	187b      	adds	r3, r7, r1
 8004a0e:	2202      	movs	r2, #2
 8004a10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP; //even though we do not 'technically' need a pullup as a push-pull O/P will be driving the I/P cap pin, I think it is better to ensure the I/P cap input properly idles
 8004a12:	187b      	adds	r3, r7, r1
 8004a14:	2201      	movs	r2, #1
 8004a16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a18:	187b      	adds	r3, r7, r1
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8004a1e:	187b      	adds	r3, r7, r1
 8004a20:	2202      	movs	r2, #2
 8004a22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(IP_CAP_GPIO_Port, &GPIO_InitStruct);
 8004a24:	187a      	adds	r2, r7, r1
 8004a26:	23a0      	movs	r3, #160	@ 0xa0
 8004a28:	05db      	lsls	r3, r3, #23
 8004a2a:	0011      	movs	r1, r2
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	f002 fe1d 	bl	800766c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 2);
 8004a32:	2202      	movs	r2, #2
 8004a34:	2102      	movs	r1, #2
 8004a36:	200f      	movs	r0, #15
 8004a38:	f002 fab8 	bl	8006fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a3c:	200f      	movs	r0, #15
 8004a3e:	f002 faca 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8004a42:	e06c      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM3)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a39      	ldr	r2, [pc, #228]	@ (8004b30 <HAL_TIM_Base_MspInit+0x1d8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d114      	bne.n	8004a78 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a52:	4b36      	ldr	r3, [pc, #216]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a54:	2102      	movs	r1, #2
 8004a56:	430a      	orrs	r2, r1
 8004a58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a5a:	4b34      	ldr	r3, [pc, #208]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5e:	2202      	movs	r2, #2
 8004a60:	4013      	ands	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004a66:	2200      	movs	r2, #0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	2010      	movs	r0, #16
 8004a6c:	f002 fa9e 	bl	8006fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004a70:	2010      	movs	r0, #16
 8004a72:	f002 fab0 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8004a76:	e052      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM16)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2d      	ldr	r2, [pc, #180]	@ (8004b34 <HAL_TIM_Base_MspInit+0x1dc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d116      	bne.n	8004ab0 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004a82:	4b2a      	ldr	r3, [pc, #168]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a86:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a88:	2180      	movs	r1, #128	@ 0x80
 8004a8a:	0289      	lsls	r1, r1, #10
 8004a8c:	430a      	orrs	r2, r1
 8004a8e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a90:	4b26      	ldr	r3, [pc, #152]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004a92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a94:	2380      	movs	r3, #128	@ 0x80
 8004a96:	029b      	lsls	r3, r3, #10
 8004a98:	4013      	ands	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
 8004a9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2015      	movs	r0, #21
 8004aa4:	f002 fa82 	bl	8006fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8004aa8:	2015      	movs	r0, #21
 8004aaa:	f002 fa94 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8004aae:	e036      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM17)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	@ (8004b38 <HAL_TIM_Base_MspInit+0x1e0>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d116      	bne.n	8004ae8 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004aba:	4b1c      	ldr	r3, [pc, #112]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004abc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004abe:	4b1b      	ldr	r3, [pc, #108]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004ac0:	2180      	movs	r1, #128	@ 0x80
 8004ac2:	02c9      	lsls	r1, r1, #11
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ac8:	4b18      	ldr	r3, [pc, #96]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004acc:	2380      	movs	r3, #128	@ 0x80
 8004ace:	02db      	lsls	r3, r3, #11
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 3, 3);
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	2103      	movs	r1, #3
 8004ada:	2016      	movs	r0, #22
 8004adc:	f002 fa66 	bl	8006fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004ae0:	2016      	movs	r0, #22
 8004ae2:	f002 fa78 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8004ae6:	e01a      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
  else if(htim_base->Instance==TIM14)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <HAL_TIM_Base_MspInit+0x1e4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d115      	bne.n	8004b1e <HAL_TIM_Base_MspInit+0x1c6>
      __HAL_RCC_TIM14_CLK_ENABLE();
 8004af2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004af4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004af8:	2180      	movs	r1, #128	@ 0x80
 8004afa:	0209      	lsls	r1, r1, #8
 8004afc:	430a      	orrs	r2, r1
 8004afe:	641a      	str	r2, [r3, #64]	@ 0x40
 8004b00:	4b0a      	ldr	r3, [pc, #40]	@ (8004b2c <HAL_TIM_Base_MspInit+0x1d4>)
 8004b02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	021b      	lsls	r3, r3, #8
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
      HAL_NVIC_SetPriority(TIM14_IRQn, 3, 3);
 8004b0e:	2203      	movs	r2, #3
 8004b10:	2103      	movs	r1, #3
 8004b12:	2013      	movs	r0, #19
 8004b14:	f002 fa4a 	bl	8006fac <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004b18:	2013      	movs	r0, #19
 8004b1a:	f002 fa5c 	bl	8006fd6 <HAL_NVIC_EnableIRQ>
}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	b019      	add	sp, #100	@ 0x64
 8004b24:	bd90      	pop	{r4, r7, pc}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40021000 	.word	0x40021000
 8004b30:	40000400 	.word	0x40000400
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	40002000 	.word	0x40002000

08004b40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b40:	b590      	push	{r4, r7, lr}
 8004b42:	b08b      	sub	sp, #44	@ 0x2c
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b48:	2414      	movs	r4, #20
 8004b4a:	193b      	adds	r3, r7, r4
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	2314      	movs	r3, #20
 8004b50:	001a      	movs	r2, r3
 8004b52:	2100      	movs	r1, #0
 8004b54:	f008 f880 	bl	800cc58 <memset>
  if(htim->Instance==TIM1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a25      	ldr	r2, [pc, #148]	@ (8004bf4 <HAL_TIM_MspPostInit+0xb4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d144      	bne.n	8004bec <HAL_TIM_MspPostInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b62:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b72:	2201      	movs	r2, #1
 8004b74:	4013      	ands	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b80:	2102      	movs	r1, #2
 8004b82:	430a      	orrs	r2, r1
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b86:	4b1c      	ldr	r3, [pc, #112]	@ (8004bf8 <HAL_TIM_MspPostInit+0xb8>)
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	60fb      	str	r3, [r7, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11 [PA9]     ------> TIM1_CH4
    PB3     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = SECONDARY_OSCILLATOR_Pin;
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	2280      	movs	r2, #128	@ 0x80
 8004b96:	0112      	lsls	r2, r2, #4
 8004b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9a:	193b      	adds	r3, r7, r4
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	193b      	adds	r3, r7, r4
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba6:	193b      	adds	r3, r7, r4
 8004ba8:	2200      	movs	r2, #0
 8004baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004bac:	193b      	adds	r3, r7, r4
 8004bae:	2202      	movs	r2, #2
 8004bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(SECONDARY_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004bb2:	193a      	adds	r2, r7, r4
 8004bb4:	23a0      	movs	r3, #160	@ 0xa0
 8004bb6:	05db      	lsls	r3, r3, #23
 8004bb8:	0011      	movs	r1, r2
 8004bba:	0018      	movs	r0, r3
 8004bbc:	f002 fd56 	bl	800766c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAIN_OSCILLATOR_Pin;
 8004bc0:	0021      	movs	r1, r4
 8004bc2:	187b      	adds	r3, r7, r1
 8004bc4:	2208      	movs	r2, #8
 8004bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc8:	187b      	adds	r3, r7, r1
 8004bca:	2202      	movs	r2, #2
 8004bcc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	2201      	movs	r2, #1
 8004bde:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MAIN_OSCILLATOR_GPIO_Port, &GPIO_InitStruct);
 8004be0:	187b      	adds	r3, r7, r1
 8004be2:	4a06      	ldr	r2, [pc, #24]	@ (8004bfc <HAL_TIM_MspPostInit+0xbc>)
 8004be4:	0019      	movs	r1, r3
 8004be6:	0010      	movs	r0, r2
 8004be8:	f002 fd40 	bl	800766c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b00b      	add	sp, #44	@ 0x2c
 8004bf2:	bd90      	pop	{r4, r7, pc}
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	50000400 	.word	0x50000400

08004c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c00:	b590      	push	{r4, r7, lr}
 8004c02:	b08b      	sub	sp, #44	@ 0x2c
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	2414      	movs	r4, #20
 8004c0a:	193b      	adds	r3, r7, r4
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	2314      	movs	r3, #20
 8004c10:	001a      	movs	r2, r3
 8004c12:	2100      	movs	r1, #0
 8004c14:	f008 f820 	bl	800cc58 <memset>
  if(huart->Instance==USART2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_UART_MspInit+0x148>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d000      	beq.n	8004c24 <HAL_UART_MspInit+0x24>
 8004c22:	e08d      	b.n	8004d40 <HAL_UART_MspInit+0x140>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c24:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c28:	4b48      	ldr	r3, [pc, #288]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c2a:	2180      	movs	r1, #128	@ 0x80
 8004c2c:	0289      	lsls	r1, r1, #10
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c32:	4b46      	ldr	r3, [pc, #280]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	029b      	lsls	r3, r3, #10
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c40:	4b42      	ldr	r3, [pc, #264]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c44:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c46:	2101      	movs	r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	635a      	str	r2, [r3, #52]	@ 0x34
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d4c <HAL_UART_MspInit+0x14c>)
 8004c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c50:	2201      	movs	r2, #1
 8004c52:	4013      	ands	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004c58:	0021      	movs	r1, r4
 8004c5a:	187b      	adds	r3, r7, r1
 8004c5c:	220c      	movs	r2, #12
 8004c5e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c60:	187b      	adds	r3, r7, r1
 8004c62:	2202      	movs	r2, #2
 8004c64:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c66:	187b      	adds	r3, r7, r1
 8004c68:	2201      	movs	r2, #1
 8004c6a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2200      	movs	r2, #0
 8004c70:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	2201      	movs	r2, #1
 8004c76:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c78:	187a      	adds	r2, r7, r1
 8004c7a:	23a0      	movs	r3, #160	@ 0xa0
 8004c7c:	05db      	lsls	r3, r3, #23
 8004c7e:	0011      	movs	r1, r2
 8004c80:	0018      	movs	r0, r3
 8004c82:	f002 fcf3 	bl	800766c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004c86:	4b32      	ldr	r3, [pc, #200]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004c88:	4a32      	ldr	r2, [pc, #200]	@ (8004d54 <HAL_UART_MspInit+0x154>)
 8004c8a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004c8c:	4b30      	ldr	r3, [pc, #192]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004c8e:	2234      	movs	r2, #52	@ 0x34
 8004c90:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c92:	4b2f      	ldr	r3, [pc, #188]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c98:	4b2d      	ldr	r3, [pc, #180]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004ca0:	2280      	movs	r2, #128	@ 0x80
 8004ca2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ca4:	4b2a      	ldr	r3, [pc, #168]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004caa:	4b29      	ldr	r3, [pc, #164]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cac:	2200      	movs	r2, #0
 8004cae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004cb6:	4b26      	ldr	r3, [pc, #152]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cb8:	2280      	movs	r2, #128	@ 0x80
 8004cba:	0152      	lsls	r2, r2, #5
 8004cbc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f002 f9b5 	bl	8007030 <HAL_DMA_Init>
 8004cc6:	1e03      	subs	r3, r0, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004cca:	f7fd fa9d 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2180      	movs	r1, #128	@ 0x80
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cd4:	505a      	str	r2, [r3, r1]
 8004cd6:	4b1e      	ldr	r3, [pc, #120]	@ (8004d50 <HAL_UART_MspInit+0x150>)
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004cde:	4a1f      	ldr	r2, [pc, #124]	@ (8004d5c <HAL_UART_MspInit+0x15c>)
 8004ce0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004ce4:	2235      	movs	r2, #53	@ 0x35
 8004ce6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004cea:	2210      	movs	r2, #16
 8004cec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cee:	4b1a      	ldr	r3, [pc, #104]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cf4:	4b18      	ldr	r3, [pc, #96]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004cf6:	2280      	movs	r2, #128	@ 0x80
 8004cf8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cfa:	4b17      	ldr	r3, [pc, #92]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d06:	4b14      	ldr	r3, [pc, #80]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004d0c:	4b12      	ldr	r3, [pc, #72]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d0e:	2280      	movs	r2, #128	@ 0x80
 8004d10:	0152      	lsls	r2, r2, #5
 8004d12:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d14:	4b10      	ldr	r3, [pc, #64]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d16:	0018      	movs	r0, r3
 8004d18:	f002 f98a 	bl	8007030 <HAL_DMA_Init>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_MspInit+0x124>
    {
      Error_Handler();
 8004d20:	f7fd fa72 	bl	8002208 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0c      	ldr	r2, [pc, #48]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d58 <HAL_UART_MspInit+0x158>)
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 1);
 8004d30:	2201      	movs	r2, #1
 8004d32:	2101      	movs	r1, #1
 8004d34:	201c      	movs	r0, #28
 8004d36:	f002 f939 	bl	8006fac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d3a:	201c      	movs	r0, #28
 8004d3c:	f002 f94b 	bl	8006fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004d40:	46c0      	nop			@ (mov r8, r8)
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b00b      	add	sp, #44	@ 0x2c
 8004d46:	bd90      	pop	{r4, r7, pc}
 8004d48:	40004400 	.word	0x40004400
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	20000b00 	.word	0x20000b00
 8004d54:	4002001c 	.word	0x4002001c
 8004d58:	20000b5c 	.word	0x20000b5c
 8004d5c:	40020030 	.word	0x40020030

08004d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d64:	46c0      	nop			@ (mov r8, r8)
 8004d66:	e7fd      	b.n	8004d64 <NMI_Handler+0x4>

08004d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d6c:	46c0      	nop			@ (mov r8, r8)
 8004d6e:	e7fd      	b.n	8004d6c <HardFault_Handler+0x4>

08004d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004d74:	46c0      	nop			@ (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}

08004d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004d88:	f000 fdfc 	bl	8005984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d8c:	46c0      	nop			@ (mov r8, r8)
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8004d96:	2080      	movs	r0, #128	@ 0x80
 8004d98:	f002 fe06 	bl	80079a8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004da8:	4b03      	ldr	r3, [pc, #12]	@ (8004db8 <DMA1_Channel1_IRQHandler+0x14>)
 8004daa:	0018      	movs	r0, r3
 8004dac:	f002 fb1c 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004db0:	46c0      	nop			@ (mov r8, r8)
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	20000570 	.word	0x20000570

08004dbc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f002 fb10 	bl	80073e8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dc8:	4b04      	ldr	r3, [pc, #16]	@ (8004ddc <DMA1_Channel2_3_IRQHandler+0x20>)
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f002 fb0c 	bl	80073e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8004dd0:	46c0      	nop			@ (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	46c0      	nop			@ (mov r8, r8)
 8004dd8:	20000b00 	.word	0x20000b00
 8004ddc:	20000b5c 	.word	0x20000b5c

08004de0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <TIM2_IRQHandler+0x14>)
 8004de6:	0018      	movs	r0, r3
 8004de8:	f004 fef0 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004dec:	46c0      	nop			@ (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	20000800 	.word	0x20000800

08004df8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <TIM3_IRQHandler+0x14>)
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f004 fee4 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			@ (mov r8, r8)
 8004e0c:	200008bc 	.word	0x200008bc

08004e10 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004e14:	4b03      	ldr	r3, [pc, #12]	@ (8004e24 <TIM16_IRQHandler+0x14>)
 8004e16:	0018      	movs	r0, r3
 8004e18:	f004 fed8 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8004e1c:	46c0      	nop			@ (mov r8, r8)
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	46c0      	nop			@ (mov r8, r8)
 8004e24:	20000744 	.word	0x20000744

08004e28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <USART2_IRQHandler+0x14>)
 8004e2e:	0018      	movs	r0, r3
 8004e30:	f006 fc4e 	bl	800b6d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	46c0      	nop			@ (mov r8, r8)
 8004e3c:	20000a34 	.word	0x20000a34

08004e40 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8004e44:	4b03      	ldr	r3, [pc, #12]	@ (8004e54 <LPTIM1_IRQHandler+0x14>)
 8004e46:	0018      	movs	r0, r3
 8004e48:	f002 ff1c 	bl	8007c84 <HAL_LPTIM_IRQHandler>
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	20000bb8 	.word	0x20000bb8

08004e58 <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004e5c:	4b03      	ldr	r3, [pc, #12]	@ (8004e6c <TIM17_IRQHandler+0x14>)
 8004e5e:	0018      	movs	r0, r3
 8004e60:	f004 feb4 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004e64:	46c0      	nop			@ (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	20000688 	.word	0x20000688

08004e70 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004e74:	4b03      	ldr	r3, [pc, #12]	@ (8004e84 <TIM14_IRQHandler+0x14>)
 8004e76:	0018      	movs	r0, r3
 8004e78:	f004 fea8 	bl	8009bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004e7c:	46c0      	nop			@ (mov r8, r8)
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	46c0      	nop			@ (mov r8, r8)
 8004e84:	200005cc 	.word	0x200005cc

08004e88 <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	5c9b      	ldrb	r3, [r3, r2]
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d107      	bne.n	8004eac <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	8b5b      	ldrh	r3, [r3, #26]
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	18db      	adds	r3, r3, r3
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	839a      	strh	r2, [r3, #28]
 8004eaa:	e00a      	b.n	8004ec2 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	5c9b      	ldrb	r3, [r3, r2]
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8b5b      	ldrh	r3, [r3, #26]
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8004ec2:	2301      	movs	r3, #1
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b002      	add	sp, #8
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8004ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8004ed4:	2317      	movs	r3, #23
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	2200      	movs	r2, #0
 8004eda:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8004edc:	2316      	movs	r3, #22
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8004ee4:	2315      	movs	r3, #21
 8004ee6:	18fb      	adds	r3, r7, r3
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8004eec:	2114      	movs	r1, #20
 8004eee:	187b      	adds	r3, r7, r1
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	899b      	ldrh	r3, [r3, #12]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efc:	d803      	bhi.n	8004f06 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e003      	b.n	8004f0e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8004f06:	2314      	movs	r3, #20
 8004f08:	18fb      	adds	r3, r7, r3
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	799b      	ldrb	r3, [r3, #6]
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d004      	beq.n	8004f22 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	799b      	ldrb	r3, [r3, #6]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d146      	bne.n	8004fb0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7c1b      	ldrb	r3, [r3, #16]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d104      	bne.n	8004f36 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	7c5b      	ldrb	r3, [r3, #17]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	7c1b      	ldrb	r3, [r3, #16]
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d113      	bne.n	8004f68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	7c5b      	ldrb	r3, [r3, #17]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d10e      	bne.n	8004f68 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 8004f4a:	2314      	movs	r3, #20
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d104      	bne.n	8004f5e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8004f54:	2316      	movs	r3, #22
 8004f56:	18fb      	adds	r3, r7, r3
 8004f58:	2201      	movs	r2, #1
 8004f5a:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8004f5c:	e027      	b.n	8004fae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8004f5e:	2316      	movs	r3, #22
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8004f66:	e022      	b.n	8004fae <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	7c1b      	ldrb	r3, [r3, #16]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d104      	bne.n	8004f7c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7c5b      	ldrb	r3, [r3, #17]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d009      	beq.n	8004f90 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7c1b      	ldrb	r3, [r3, #16]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d13c      	bne.n	8005000 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	7c5b      	ldrb	r3, [r3, #17]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d137      	bne.n	8005000 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8004f90:	2314      	movs	r3, #20
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d104      	bne.n	8004fa4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 8004f9a:	2316      	movs	r3, #22
 8004f9c:	18fb      	adds	r3, r7, r3
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004fa2:	e02d      	b.n	8005000 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8004fa4:	2316      	movs	r3, #22
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2201      	movs	r2, #1
 8004faa:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8004fac:	e028      	b.n	8005000 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 8004fae:	e027      	b.n	8005000 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	799b      	ldrb	r3, [r3, #6]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d123      	bne.n	8005002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7c1b      	ldrb	r3, [r3, #16]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d10e      	bne.n	8004fe2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 8004fc4:	2314      	movs	r3, #20
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 8004fce:	2316      	movs	r3, #22
 8004fd0:	18fb      	adds	r3, r7, r3
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e014      	b.n	8005002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8004fd8:	2316      	movs	r3, #22
 8004fda:	18fb      	adds	r3, r7, r3
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	e00f      	b.n	8005002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 8004fe2:	2314      	movs	r3, #20
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d104      	bne.n	8004ff6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 8004fec:	2316      	movs	r3, #22
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
 8004ff4:	e005      	b.n	8005002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8004ff6:	2316      	movs	r3, #22
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e000      	b.n	8005002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8005000:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 8005002:	2314      	movs	r3, #20
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	899b      	ldrh	r3, [r3, #12]
 8005010:	b29b      	uxth	r3, r3
 8005012:	b2da      	uxtb	r2, r3
 8005014:	2315      	movs	r3, #21
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	217f      	movs	r1, #127	@ 0x7f
 800501a:	1a8a      	subs	r2, r1, r2
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e007      	b.n	8005030 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	899b      	ldrh	r3, [r3, #12]
 8005024:	b29b      	uxth	r3, r3
 8005026:	b2da      	uxtb	r2, r3
 8005028:	2315      	movs	r3, #21
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	3a80      	subs	r2, #128	@ 0x80
 800502e:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8a5b      	ldrh	r3, [r3, #18]
 8005034:	b29a      	uxth	r2, r3
 8005036:	200e      	movs	r0, #14
 8005038:	183b      	adds	r3, r7, r0
 800503a:	2180      	movs	r1, #128	@ 0x80
 800503c:	0049      	lsls	r1, r1, #1
 800503e:	1a8a      	subs	r2, r1, r2
 8005040:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8005042:	0001      	movs	r1, r0
 8005044:	187b      	adds	r3, r7, r1
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	2215      	movs	r2, #21
 800504a:	18ba      	adds	r2, r7, r2
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	435a      	muls	r2, r3
 8005050:	0013      	movs	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	189b      	adds	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	10da      	asrs	r2, r3, #3
 800505a:	240c      	movs	r4, #12
 800505c:	193b      	adds	r3, r7, r4
 800505e:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8005060:	250a      	movs	r5, #10
 8005062:	197b      	adds	r3, r7, r5
 8005064:	193a      	adds	r2, r7, r4
 8005066:	8812      	ldrh	r2, [r2, #0]
 8005068:	0a12      	lsrs	r2, r2, #8
 800506a:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 800506c:	2312      	movs	r3, #18
 800506e:	18fb      	adds	r3, r7, r3
 8005070:	0008      	movs	r0, r1
 8005072:	1879      	adds	r1, r7, r1
 8005074:	197a      	adds	r2, r7, r5
 8005076:	8809      	ldrh	r1, [r1, #0]
 8005078:	8812      	ldrh	r2, [r2, #0]
 800507a:	1a8a      	subs	r2, r1, r2
 800507c:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 800507e:	2610      	movs	r6, #16
 8005080:	19bb      	adds	r3, r7, r6
 8005082:	1839      	adds	r1, r7, r0
 8005084:	197a      	adds	r2, r7, r5
 8005086:	8809      	ldrh	r1, [r1, #0]
 8005088:	8812      	ldrh	r2, [r2, #0]
 800508a:	188a      	adds	r2, r1, r2
 800508c:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 800508e:	19bb      	adds	r3, r7, r6
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	2bff      	cmp	r3, #255	@ 0xff
 8005094:	d90f      	bls.n	80050b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 8005096:	19bb      	adds	r3, r7, r6
 8005098:	881a      	ldrh	r2, [r3, #0]
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	429a      	cmp	r2, r3
 80050a0:	d000      	beq.n	80050a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 80050a2:	e0b0      	b.n	8005206 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	881b      	ldrh	r3, [r3, #0]
 80050a8:	2108      	movs	r1, #8
 80050aa:	0018      	movs	r0, r3
 80050ac:	f000 fb80 	bl	80057b0 <unsigned_bitwise_modulo>
 80050b0:	1e03      	subs	r3, r0, #0
 80050b2:	d000      	beq.n	80050b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80050b4:	e0a7      	b.n	8005206 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80050b6:	230c      	movs	r3, #12
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	2108      	movs	r1, #8
 80050be:	0018      	movs	r0, r3
 80050c0:	f000 fb76 	bl	80057b0 <unsigned_bitwise_modulo>
 80050c4:	0003      	movs	r3, r0
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d117      	bne.n	80050fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80050ca:	2316      	movs	r3, #22
 80050cc:	18fb      	adds	r3, r7, r3
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80050d4:	2317      	movs	r3, #23
 80050d6:	18fb      	adds	r3, r7, r3
 80050d8:	2202      	movs	r2, #2
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e008      	b.n	80050f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80050de:	2316      	movs	r3, #22
 80050e0:	18fb      	adds	r3, r7, r3
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d103      	bne.n	80050f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80050e8:	2317      	movs	r3, #23
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	2100      	movs	r1, #0
 80050f6:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80050f8:	e21f      	b.n	800553a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80050fa:	230c      	movs	r3, #12
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	2108      	movs	r1, #8
 8005102:	0018      	movs	r0, r3
 8005104:	f000 fb54 	bl	80057b0 <unsigned_bitwise_modulo>
 8005108:	1e03      	subs	r3, r0, #0
 800510a:	d121      	bne.n	8005150 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800510c:	2212      	movs	r2, #18
 800510e:	18bb      	adds	r3, r7, r2
 8005110:	18ba      	adds	r2, r7, r2
 8005112:	8812      	ldrh	r2, [r2, #0]
 8005114:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8005116:	2210      	movs	r2, #16
 8005118:	18bb      	adds	r3, r7, r2
 800511a:	18ba      	adds	r2, r7, r2
 800511c:	8812      	ldrh	r2, [r2, #0]
 800511e:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005120:	2316      	movs	r3, #22
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d104      	bne.n	8005134 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800512a:	2317      	movs	r3, #23
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	2200      	movs	r2, #0
 8005130:	701a      	strb	r2, [r3, #0]
 8005132:	e008      	b.n	8005146 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005134:	2316      	movs	r3, #22
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d103      	bne.n	8005146 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800513e:	2317      	movs	r3, #23
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	2100      	movs	r1, #0
 800514c:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800514e:	e1f4      	b.n	800553a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8005150:	230c      	movs	r3, #12
 8005152:	18fb      	adds	r3, r7, r3
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	2108      	movs	r1, #8
 8005158:	0018      	movs	r0, r3
 800515a:	f000 fb29 	bl	80057b0 <unsigned_bitwise_modulo>
 800515e:	0003      	movs	r3, r0
 8005160:	2b7f      	cmp	r3, #127	@ 0x7f
 8005162:	d821      	bhi.n	80051a8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8005164:	2212      	movs	r2, #18
 8005166:	18bb      	adds	r3, r7, r2
 8005168:	18ba      	adds	r2, r7, r2
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800516e:	2210      	movs	r2, #16
 8005170:	18bb      	adds	r3, r7, r2
 8005172:	18ba      	adds	r2, r7, r2
 8005174:	8812      	ldrh	r2, [r2, #0]
 8005176:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8005178:	2316      	movs	r3, #22
 800517a:	18fb      	adds	r3, r7, r3
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005182:	2317      	movs	r3, #23
 8005184:	18fb      	adds	r3, r7, r3
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	e008      	b.n	800519e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 800518c:	2316      	movs	r3, #22
 800518e:	18fb      	adds	r3, r7, r3
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d103      	bne.n	800519e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005196:	2317      	movs	r3, #23
 8005198:	18fb      	adds	r3, r7, r3
 800519a:	2200      	movs	r2, #0
 800519c:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2220      	movs	r2, #32
 80051a2:	2100      	movs	r1, #0
 80051a4:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80051a6:	e1c8      	b.n	800553a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80051a8:	230c      	movs	r3, #12
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	881b      	ldrh	r3, [r3, #0]
 80051ae:	2108      	movs	r1, #8
 80051b0:	0018      	movs	r0, r3
 80051b2:	f000 fafd 	bl	80057b0 <unsigned_bitwise_modulo>
 80051b6:	0003      	movs	r3, r0
 80051b8:	2b80      	cmp	r3, #128	@ 0x80
 80051ba:	d800      	bhi.n	80051be <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 80051bc:	e1bd      	b.n	800553a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80051be:	2212      	movs	r2, #18
 80051c0:	18bb      	adds	r3, r7, r2
 80051c2:	18ba      	adds	r2, r7, r2
 80051c4:	8812      	ldrh	r2, [r2, #0]
 80051c6:	3a01      	subs	r2, #1
 80051c8:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80051ca:	2210      	movs	r2, #16
 80051cc:	18bb      	adds	r3, r7, r2
 80051ce:	18ba      	adds	r2, r7, r2
 80051d0:	8812      	ldrh	r2, [r2, #0]
 80051d2:	3201      	adds	r2, #1
 80051d4:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80051d6:	2316      	movs	r3, #22
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80051e0:	2317      	movs	r3, #23
 80051e2:	18fb      	adds	r3, r7, r3
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e008      	b.n	80051fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80051ea:	2316      	movs	r3, #22
 80051ec:	18fb      	adds	r3, r7, r3
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d103      	bne.n	80051fc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80051f4:	2317      	movs	r3, #23
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	2100      	movs	r1, #0
 8005202:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005204:	e199      	b.n	800553a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8005206:	2110      	movs	r1, #16
 8005208:	187b      	adds	r3, r7, r1
 800520a:	881a      	ldrh	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	429a      	cmp	r2, r3
 8005212:	d810      	bhi.n	8005236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005214:	187b      	adds	r3, r7, r1
 8005216:	881a      	ldrh	r2, [r3, #0]
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	429a      	cmp	r2, r3
 800521e:	d000      	beq.n	8005222 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8005220:	e18c      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8005222:	230c      	movs	r3, #12
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	2108      	movs	r1, #8
 800522a:	0018      	movs	r0, r3
 800522c:	f000 fac0 	bl	80057b0 <unsigned_bitwise_modulo>
 8005230:	1e03      	subs	r3, r0, #0
 8005232:	d100      	bne.n	8005236 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8005234:	e182      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8005236:	230c      	movs	r3, #12
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	881b      	ldrh	r3, [r3, #0]
 800523c:	2108      	movs	r1, #8
 800523e:	0018      	movs	r0, r3
 8005240:	f000 fab6 	bl	80057b0 <unsigned_bitwise_modulo>
 8005244:	0003      	movs	r3, r0
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d159      	bne.n	80052fe <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800524a:	2212      	movs	r2, #18
 800524c:	18bb      	adds	r3, r7, r2
 800524e:	18ba      	adds	r2, r7, r2
 8005250:	8812      	ldrh	r2, [r2, #0]
 8005252:	3a01      	subs	r2, #1
 8005254:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005256:	2110      	movs	r1, #16
 8005258:	187b      	adds	r3, r7, r1
 800525a:	187a      	adds	r2, r7, r1
 800525c:	8812      	ldrh	r2, [r2, #0]
 800525e:	3201      	adds	r2, #1
 8005260:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8005262:	000c      	movs	r4, r1
 8005264:	187b      	adds	r3, r7, r1
 8005266:	881b      	ldrh	r3, [r3, #0]
 8005268:	2101      	movs	r1, #1
 800526a:	0018      	movs	r0, r3
 800526c:	f000 faa0 	bl	80057b0 <unsigned_bitwise_modulo>
 8005270:	1e03      	subs	r3, r0, #0
 8005272:	d121      	bne.n	80052b8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005274:	193b      	adds	r3, r7, r4
 8005276:	193a      	adds	r2, r7, r4
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	0852      	lsrs	r2, r2, #1
 800527c:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800527e:	2316      	movs	r3, #22
 8005280:	18fb      	adds	r3, r7, r3
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d108      	bne.n	800529a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005288:	2317      	movs	r3, #23
 800528a:	18fb      	adds	r3, r7, r3
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2220      	movs	r2, #32
 8005294:	2100      	movs	r1, #0
 8005296:	5499      	strb	r1, [r3, r2]
 8005298:	e150      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800529a:	2316      	movs	r3, #22
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d000      	beq.n	80052a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 80052a4:	e14a      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80052a6:	2317      	movs	r3, #23
 80052a8:	18fb      	adds	r3, r7, r3
 80052aa:	2200      	movs	r2, #0
 80052ac:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	2101      	movs	r1, #1
 80052b4:	5499      	strb	r1, [r3, r2]
 80052b6:	e141      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80052b8:	2210      	movs	r2, #16
 80052ba:	18bb      	adds	r3, r7, r2
 80052bc:	18ba      	adds	r2, r7, r2
 80052be:	8812      	ldrh	r2, [r2, #0]
 80052c0:	0852      	lsrs	r2, r2, #1
 80052c2:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80052c4:	2316      	movs	r3, #22
 80052c6:	18fb      	adds	r3, r7, r3
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d108      	bne.n	80052e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80052ce:	2317      	movs	r3, #23
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2220      	movs	r2, #32
 80052da:	2100      	movs	r1, #0
 80052dc:	5499      	strb	r1, [r3, r2]
 80052de:	e12d      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80052e0:	2316      	movs	r3, #22
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d000      	beq.n	80052ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80052ea:	e127      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80052ec:	2317      	movs	r3, #23
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	2101      	movs	r1, #1
 80052fa:	5499      	strb	r1, [r3, r2]
 80052fc:	e11e      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80052fe:	230c      	movs	r3, #12
 8005300:	18fb      	adds	r3, r7, r3
 8005302:	881b      	ldrh	r3, [r3, #0]
 8005304:	2108      	movs	r1, #8
 8005306:	0018      	movs	r0, r3
 8005308:	f000 fa52 	bl	80057b0 <unsigned_bitwise_modulo>
 800530c:	1e03      	subs	r3, r0, #0
 800530e:	d152      	bne.n	80053b6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8005310:	2212      	movs	r2, #18
 8005312:	18bb      	adds	r3, r7, r2
 8005314:	18ba      	adds	r2, r7, r2
 8005316:	8812      	ldrh	r2, [r2, #0]
 8005318:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800531a:	2410      	movs	r4, #16
 800531c:	193b      	adds	r3, r7, r4
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	2101      	movs	r1, #1
 8005322:	0018      	movs	r0, r3
 8005324:	f000 fa44 	bl	80057b0 <unsigned_bitwise_modulo>
 8005328:	1e03      	subs	r3, r0, #0
 800532a:	d121      	bne.n	8005370 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 800532c:	193b      	adds	r3, r7, r4
 800532e:	193a      	adds	r2, r7, r4
 8005330:	8812      	ldrh	r2, [r2, #0]
 8005332:	0852      	lsrs	r2, r2, #1
 8005334:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005336:	2316      	movs	r3, #22
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005340:	2317      	movs	r3, #23
 8005342:	18fb      	adds	r3, r7, r3
 8005344:	2200      	movs	r2, #0
 8005346:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	2100      	movs	r1, #0
 800534e:	5499      	strb	r1, [r3, r2]
 8005350:	e0f4      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005352:	2316      	movs	r3, #22
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d000      	beq.n	800535e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 800535c:	e0ee      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800535e:	2317      	movs	r3, #23
 8005360:	18fb      	adds	r3, r7, r3
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2220      	movs	r2, #32
 800536a:	2101      	movs	r1, #1
 800536c:	5499      	strb	r1, [r3, r2]
 800536e:	e0e5      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005370:	2210      	movs	r2, #16
 8005372:	18bb      	adds	r3, r7, r2
 8005374:	18ba      	adds	r2, r7, r2
 8005376:	8812      	ldrh	r2, [r2, #0]
 8005378:	0852      	lsrs	r2, r2, #1
 800537a:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800537c:	2316      	movs	r3, #22
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005386:	2317      	movs	r3, #23
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	2100      	movs	r1, #0
 8005394:	5499      	strb	r1, [r3, r2]
 8005396:	e0d1      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005398:	2316      	movs	r3, #22
 800539a:	18fb      	adds	r3, r7, r3
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d000      	beq.n	80053a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 80053a2:	e0cb      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80053a4:	2317      	movs	r3, #23
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	2201      	movs	r2, #1
 80053aa:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	2101      	movs	r1, #1
 80053b2:	5499      	strb	r1, [r3, r2]
 80053b4:	e0c2      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80053b6:	230c      	movs	r3, #12
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	2108      	movs	r1, #8
 80053be:	0018      	movs	r0, r3
 80053c0:	f000 f9f6 	bl	80057b0 <unsigned_bitwise_modulo>
 80053c4:	0003      	movs	r3, r0
 80053c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053c8:	d856      	bhi.n	8005478 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80053ca:	2212      	movs	r2, #18
 80053cc:	18bb      	adds	r3, r7, r2
 80053ce:	18ba      	adds	r2, r7, r2
 80053d0:	8812      	ldrh	r2, [r2, #0]
 80053d2:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80053d4:	2410      	movs	r4, #16
 80053d6:	193b      	adds	r3, r7, r4
 80053d8:	193a      	adds	r2, r7, r4
 80053da:	8812      	ldrh	r2, [r2, #0]
 80053dc:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80053de:	193b      	adds	r3, r7, r4
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 f9e3 	bl	80057b0 <unsigned_bitwise_modulo>
 80053ea:	1e03      	subs	r3, r0, #0
 80053ec:	d121      	bne.n	8005432 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80053ee:	193b      	adds	r3, r7, r4
 80053f0:	193a      	adds	r2, r7, r4
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	0852      	lsrs	r2, r2, #1
 80053f6:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80053f8:	2316      	movs	r3, #22
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005402:	2317      	movs	r3, #23
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2220      	movs	r2, #32
 800540e:	2100      	movs	r1, #0
 8005410:	5499      	strb	r1, [r3, r2]
 8005412:	e093      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8005414:	2316      	movs	r3, #22
 8005416:	18fb      	adds	r3, r7, r3
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d000      	beq.n	8005420 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 800541e:	e08d      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005420:	2317      	movs	r3, #23
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	2101      	movs	r1, #1
 800542e:	5499      	strb	r1, [r3, r2]
 8005430:	e084      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8005432:	2210      	movs	r2, #16
 8005434:	18bb      	adds	r3, r7, r2
 8005436:	18ba      	adds	r2, r7, r2
 8005438:	8812      	ldrh	r2, [r2, #0]
 800543a:	0852      	lsrs	r2, r2, #1
 800543c:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800543e:	2316      	movs	r3, #22
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d108      	bne.n	800545a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]
 8005458:	e070      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800545a:	2316      	movs	r3, #22
 800545c:	18fb      	adds	r3, r7, r3
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d000      	beq.n	8005466 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8005464:	e06a      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005466:	2317      	movs	r3, #23
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	2201      	movs	r2, #1
 800546c:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	2101      	movs	r1, #1
 8005474:	5499      	strb	r1, [r3, r2]
 8005476:	e061      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8005478:	230c      	movs	r3, #12
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	881b      	ldrh	r3, [r3, #0]
 800547e:	2108      	movs	r1, #8
 8005480:	0018      	movs	r0, r3
 8005482:	f000 f995 	bl	80057b0 <unsigned_bitwise_modulo>
 8005486:	0003      	movs	r3, r0
 8005488:	2b80      	cmp	r3, #128	@ 0x80
 800548a:	d957      	bls.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800548c:	2212      	movs	r2, #18
 800548e:	18bb      	adds	r3, r7, r2
 8005490:	18ba      	adds	r2, r7, r2
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	3a01      	subs	r2, #1
 8005496:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8005498:	2410      	movs	r4, #16
 800549a:	193b      	adds	r3, r7, r4
 800549c:	193a      	adds	r2, r7, r4
 800549e:	8812      	ldrh	r2, [r2, #0]
 80054a0:	3201      	adds	r2, #1
 80054a2:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80054a4:	193b      	adds	r3, r7, r4
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	2101      	movs	r1, #1
 80054aa:	0018      	movs	r0, r3
 80054ac:	f000 f980 	bl	80057b0 <unsigned_bitwise_modulo>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d120      	bne.n	80054f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	193a      	adds	r2, r7, r4
 80054b8:	8812      	ldrh	r2, [r2, #0]
 80054ba:	0852      	lsrs	r2, r2, #1
 80054bc:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80054be:	2316      	movs	r3, #22
 80054c0:	18fb      	adds	r3, r7, r3
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d108      	bne.n	80054da <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054c8:	2317      	movs	r3, #23
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	2200      	movs	r2, #0
 80054ce:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	2100      	movs	r1, #0
 80054d6:	5499      	strb	r1, [r3, r2]
 80054d8:	e030      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80054da:	2316      	movs	r3, #22
 80054dc:	18fb      	adds	r3, r7, r3
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d12b      	bne.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80054e4:	2317      	movs	r3, #23
 80054e6:	18fb      	adds	r3, r7, r3
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2220      	movs	r2, #32
 80054f0:	2101      	movs	r1, #1
 80054f2:	5499      	strb	r1, [r3, r2]
 80054f4:	e022      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80054f6:	2210      	movs	r2, #16
 80054f8:	18bb      	adds	r3, r7, r2
 80054fa:	18ba      	adds	r2, r7, r2
 80054fc:	8812      	ldrh	r2, [r2, #0]
 80054fe:	0852      	lsrs	r2, r2, #1
 8005500:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8005502:	2316      	movs	r3, #22
 8005504:	18fb      	adds	r3, r7, r3
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d108      	bne.n	800551e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800550c:	2317      	movs	r3, #23
 800550e:	18fb      	adds	r3, r7, r3
 8005510:	2200      	movs	r2, #0
 8005512:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	2100      	movs	r1, #0
 800551a:	5499      	strb	r1, [r3, r2]
 800551c:	e00e      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800551e:	2316      	movs	r3, #22
 8005520:	18fb      	adds	r3, r7, r3
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d109      	bne.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8005528:	2317      	movs	r3, #23
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	2101      	movs	r1, #1
 8005536:	5499      	strb	r1, [r3, r2]
 8005538:	e000      	b.n	800553c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800553a:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 800553c:	2316      	movs	r3, #22
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d152      	bne.n	80055ec <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8005546:	2317      	movs	r3, #23
 8005548:	18fb      	adds	r3, r7, r3
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d109      	bne.n	8005564 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005550:	2312      	movs	r3, #18
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	2280      	movs	r2, #128	@ 0x80
 8005558:	0052      	lsls	r2, r2, #1
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	b29a      	uxth	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	829a      	strh	r2, [r3, #20]
 8005562:	e099      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005564:	2317      	movs	r3, #23
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d11b      	bne.n	80055a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	89db      	ldrh	r3, [r3, #14]
 8005572:	b29b      	uxth	r3, r3
 8005574:	2101      	movs	r1, #1
 8005576:	0018      	movs	r0, r3
 8005578:	f000 f91a 	bl	80057b0 <unsigned_bitwise_modulo>
 800557c:	1e03      	subs	r3, r0, #0
 800557e:	d109      	bne.n	8005594 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8005580:	2312      	movs	r3, #18
 8005582:	18fb      	adds	r3, r7, r3
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	2280      	movs	r2, #128	@ 0x80
 8005588:	0052      	lsls	r2, r2, #1
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	b29a      	uxth	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	829a      	strh	r2, [r3, #20]
 8005592:	e081      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8005594:	2312      	movs	r3, #18
 8005596:	18fb      	adds	r3, r7, r3
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	22ff      	movs	r2, #255	@ 0xff
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	b29a      	uxth	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	829a      	strh	r2, [r3, #20]
 80055a4:	e078      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 80055a6:	2317      	movs	r3, #23
 80055a8:	18fb      	adds	r3, r7, r3
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d000      	beq.n	80055b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 80055b0:	e072      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	89db      	ldrh	r3, [r3, #14]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2101      	movs	r1, #1
 80055ba:	0018      	movs	r0, r3
 80055bc:	f000 f8f8 	bl	80057b0 <unsigned_bitwise_modulo>
 80055c0:	1e03      	subs	r3, r0, #0
 80055c2:	d109      	bne.n	80055d8 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80055c4:	2312      	movs	r3, #18
 80055c6:	18fb      	adds	r3, r7, r3
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	2280      	movs	r2, #128	@ 0x80
 80055cc:	0052      	lsls	r2, r2, #1
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	829a      	strh	r2, [r3, #20]
 80055d6:	e05f      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80055d8:	2312      	movs	r3, #18
 80055da:	18fb      	adds	r3, r7, r3
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	2202      	movs	r2, #2
 80055e0:	32ff      	adds	r2, #255	@ 0xff
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	b29a      	uxth	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	829a      	strh	r2, [r3, #20]
 80055ea:	e055      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80055ec:	2316      	movs	r3, #22
 80055ee:	18fb      	adds	r3, r7, r3
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d150      	bne.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80055f6:	2317      	movs	r3, #23
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005600:	2310      	movs	r3, #16
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	2280      	movs	r2, #128	@ 0x80
 8005608:	0052      	lsls	r2, r2, #1
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	b29a      	uxth	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	829a      	strh	r2, [r3, #20]
 8005612:	e041      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8005614:	2317      	movs	r3, #23
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d11b      	bne.n	8005656 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	89db      	ldrh	r3, [r3, #14]
 8005622:	b29b      	uxth	r3, r3
 8005624:	2101      	movs	r1, #1
 8005626:	0018      	movs	r0, r3
 8005628:	f000 f8c2 	bl	80057b0 <unsigned_bitwise_modulo>
 800562c:	1e03      	subs	r3, r0, #0
 800562e:	d109      	bne.n	8005644 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005630:	2310      	movs	r3, #16
 8005632:	18fb      	adds	r3, r7, r3
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	2280      	movs	r2, #128	@ 0x80
 8005638:	0052      	lsls	r2, r2, #1
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	b29a      	uxth	r2, r3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	829a      	strh	r2, [r3, #20]
 8005642:	e029      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8005644:	2310      	movs	r3, #16
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	22ff      	movs	r2, #255	@ 0xff
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	829a      	strh	r2, [r3, #20]
 8005654:	e020      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8005656:	2317      	movs	r3, #23
 8005658:	18fb      	adds	r3, r7, r3
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b02      	cmp	r3, #2
 800565e:	d11b      	bne.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	89db      	ldrh	r3, [r3, #14]
 8005664:	b29b      	uxth	r3, r3
 8005666:	2101      	movs	r1, #1
 8005668:	0018      	movs	r0, r3
 800566a:	f000 f8a1 	bl	80057b0 <unsigned_bitwise_modulo>
 800566e:	1e03      	subs	r3, r0, #0
 8005670:	d109      	bne.n	8005686 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8005672:	2310      	movs	r3, #16
 8005674:	18fb      	adds	r3, r7, r3
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	2280      	movs	r2, #128	@ 0x80
 800567a:	0052      	lsls	r2, r2, #1
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	b29a      	uxth	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	829a      	strh	r2, [r3, #20]
 8005684:	e008      	b.n	8005698 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 8005686:	2310      	movs	r3, #16
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	2202      	movs	r2, #2
 800568e:	32ff      	adds	r2, #255	@ 0xff
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	b29a      	uxth	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	0018      	movs	r0, r3
 800569c:	f7ff fbf4 	bl	8004e88 <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	8a9b      	ldrh	r3, [r3, #20]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	2280      	movs	r2, #128	@ 0x80
 80056a8:	0052      	lsls	r2, r2, #1
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8adb      	ldrh	r3, [r3, #22]
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	8b9b      	ldrh	r3, [r3, #28]
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	83da      	strh	r2, [r3, #30]

    return 1;
 80056ce:	2301      	movs	r3, #1
}
 80056d0:	0018      	movs	r0, r3
 80056d2:	46bd      	mov	sp, r7
 80056d4:	b007      	add	sp, #28
 80056d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80056dc:	46c0      	nop			@ (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <Start_OC_TIM>:
//INCLUDES
#include "timers.h"

//FUNCTION DEFINITIONS
uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 80056e2:	b5b0      	push	{r4, r5, r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 80056ec:	250f      	movs	r5, #15
 80056ee:	197c      	adds	r4, r7, r5
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	0011      	movs	r1, r2
 80056f6:	0018      	movs	r0, r3
 80056f8:	f003 fd8c 	bl	8009214 <HAL_TIM_OC_Start_IT>
 80056fc:	0003      	movs	r3, r0
 80056fe:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8005700:	197b      	adds	r3, r7, r5
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <Start_OC_TIM+0x2a>

		Error_Handler();
 8005708:	f7fc fd7e 	bl	8002208 <Error_Handler>
	}

	return ok;
 800570c:	230f      	movs	r3, #15
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	781b      	ldrb	r3, [r3, #0]
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b004      	add	sp, #16
 8005718:	bdb0      	pop	{r4, r5, r7, pc}

0800571a <Stop_OC_TIM>:

uint8_t Stop_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 800571a:	b5b0      	push	{r4, r5, r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Stop_IT(TIM, OC_TIM_channel);
 8005724:	250f      	movs	r5, #15
 8005726:	197c      	adds	r4, r7, r5
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0011      	movs	r1, r2
 800572e:	0018      	movs	r0, r3
 8005730:	f003 fe94 	bl	800945c <HAL_TIM_OC_Stop_IT>
 8005734:	0003      	movs	r3, r0
 8005736:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8005738:	197b      	adds	r3, r7, r5
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <Stop_OC_TIM+0x2a>

		Error_Handler();
 8005740:	f7fc fd62 	bl	8002208 <Error_Handler>
	}

	return ok;
 8005744:	230f      	movs	r3, #15
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	781b      	ldrb	r3, [r3, #0]
}
 800574a:	0018      	movs	r0, r3
 800574c:	46bd      	mov	sp, r7
 800574e:	b004      	add	sp, #16
 8005750:	bdb0      	pop	{r4, r5, r7, pc}

08005752 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	0002      	movs	r2, r0
 800575a:	1dbb      	adds	r3, r7, #6
 800575c:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 800575e:	230e      	movs	r3, #14
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2202      	movs	r2, #2
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	e014      	b.n	8005792 <isPrime+0x40>
        if (x % d == 0)
 8005768:	1dba      	adds	r2, r7, #6
 800576a:	230e      	movs	r3, #14
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	0019      	movs	r1, r3
 8005774:	0010      	movs	r0, r2
 8005776:	f7fa fd4b 	bl	8000210 <__aeabi_uidivmod>
 800577a:	000b      	movs	r3, r1
 800577c:	b29b      	uxth	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <isPrime+0x34>
            return NO;
 8005782:	2300      	movs	r3, #0
 8005784:	e010      	b.n	80057a8 <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 8005786:	210e      	movs	r1, #14
 8005788:	187b      	adds	r3, r7, r1
 800578a:	881a      	ldrh	r2, [r3, #0]
 800578c:	187b      	adds	r3, r7, r1
 800578e:	3201      	adds	r2, #1
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	220e      	movs	r2, #14
 8005794:	18bb      	adds	r3, r7, r2
 8005796:	881b      	ldrh	r3, [r3, #0]
 8005798:	18ba      	adds	r2, r7, r2
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	435a      	muls	r2, r3
 800579e:	1dbb      	adds	r3, r7, #6
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	429a      	cmp	r2, r3
 80057a4:	dde0      	ble.n	8005768 <isPrime+0x16>
    }
    return YES;
 80057a6:	2301      	movs	r3, #1
}
 80057a8:	0018      	movs	r0, r3
 80057aa:	46bd      	mov	sp, r7
 80057ac:	b004      	add	sp, #16
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	000a      	movs	r2, r1
 80057ba:	1cfb      	adds	r3, r7, #3
 80057bc:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80057be:	1cfb      	adds	r3, r7, #3
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	2201      	movs	r2, #1
 80057c4:	409a      	lsls	r2, r3
 80057c6:	0013      	movs	r3, r2
 80057c8:	3b01      	subs	r3, #1
 80057ca:	001a      	movs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4013      	ands	r3, r2
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b002      	add	sp, #8
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80057dc:	b662      	cpsie	i
}
 80057de:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80057e0:	2301      	movs	r3, #1
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	000a      	movs	r2, r1
 80057f2:	1cbb      	adds	r3, r7, #2
 80057f4:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	1cba      	adds	r2, r7, #2
 80057fc:	8812      	ldrh	r2, [r2, #0]
 80057fe:	4013      	ands	r3, r2
 8005800:	d001      	beq.n	8005806 <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 8005802:	2301      	movs	r3, #1
 8005804:	e000      	b.n	8005808 <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 8005806:	2300      	movs	r3, #0
    }
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}

08005810 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	000a      	movs	r2, r1
 800581a:	1cbb      	adds	r3, r7, #2
 800581c:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	1cbb      	adds	r3, r7, #2
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	431a      	orrs	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	46c0      	nop			@ (mov r8, r8)
 800582e:	46bd      	mov	sp, r7
 8005830:	b002      	add	sp, #8
 8005832:	bd80      	pop	{r7, pc}

08005834 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	000a      	movs	r2, r1
 800583e:	1cbb      	adds	r3, r7, #2
 8005840:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1cba      	adds	r2, r7, #2
 8005848:	8812      	ldrh	r2, [r2, #0]
 800584a:	43d2      	mvns	r2, r2
 800584c:	401a      	ands	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	601a      	str	r2, [r3, #0]
}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	46bd      	mov	sp, r7
 8005856:	b002      	add	sp, #8
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800585c:	480d      	ldr	r0, [pc, #52]	@ (8005894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800585e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005860:	f7ff ff3a 	bl	80056d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005864:	480c      	ldr	r0, [pc, #48]	@ (8005898 <LoopForever+0x6>)
  ldr r1, =_edata
 8005866:	490d      	ldr	r1, [pc, #52]	@ (800589c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005868:	4a0d      	ldr	r2, [pc, #52]	@ (80058a0 <LoopForever+0xe>)
  movs r3, #0
 800586a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800586c:	e002      	b.n	8005874 <LoopCopyDataInit>

0800586e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800586e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005872:	3304      	adds	r3, #4

08005874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005878:	d3f9      	bcc.n	800586e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800587a:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800587c:	4c0a      	ldr	r4, [pc, #40]	@ (80058a8 <LoopForever+0x16>)
  movs r3, #0
 800587e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005880:	e001      	b.n	8005886 <LoopFillZerobss>

08005882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005884:	3204      	adds	r2, #4

08005886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005888:	d3fb      	bcc.n	8005882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800588a:	f007 f9ed 	bl	800cc68 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800588e:	f7fe faf1 	bl	8003e74 <main>

08005892 <LoopForever>:

LoopForever:
  b LoopForever
 8005892:	e7fe      	b.n	8005892 <LoopForever>
  ldr   r0, =_estack
 8005894:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8005898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800589c:	2000044c 	.word	0x2000044c
  ldr r2, =_sidata
 80058a0:	0800d75c 	.word	0x0800d75c
  ldr r2, =_sbss
 80058a4:	2000044c 	.word	0x2000044c
  ldr r4, =_ebss
 80058a8:	20000cd0 	.word	0x20000cd0

080058ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058ac:	e7fe      	b.n	80058ac <ADC1_IRQHandler>
	...

080058b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058bc:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_Init+0x3c>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <HAL_Init+0x3c>)
 80058c2:	2180      	movs	r1, #128	@ 0x80
 80058c4:	0049      	lsls	r1, r1, #1
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058ca:	2000      	movs	r0, #0
 80058cc:	f000 f810 	bl	80058f0 <HAL_InitTick>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d003      	beq.n	80058dc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058d4:	1dfb      	adds	r3, r7, #7
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e001      	b.n	80058e0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80058dc:	f7fe fef8 	bl	80046d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058e0:	1dfb      	adds	r3, r7, #7
 80058e2:	781b      	ldrb	r3, [r3, #0]
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b002      	add	sp, #8
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40022000 	.word	0x40022000

080058f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058f0:	b590      	push	{r4, r7, lr}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058f8:	230f      	movs	r3, #15
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005900:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <HAL_InitTick+0x88>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02b      	beq.n	8005960 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8005908:	4b1c      	ldr	r3, [pc, #112]	@ (800597c <HAL_InitTick+0x8c>)
 800590a:	681c      	ldr	r4, [r3, #0]
 800590c:	4b1a      	ldr	r3, [pc, #104]	@ (8005978 <HAL_InitTick+0x88>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	0019      	movs	r1, r3
 8005912:	23fa      	movs	r3, #250	@ 0xfa
 8005914:	0098      	lsls	r0, r3, #2
 8005916:	f7fa fbf5 	bl	8000104 <__udivsi3>
 800591a:	0003      	movs	r3, r0
 800591c:	0019      	movs	r1, r3
 800591e:	0020      	movs	r0, r4
 8005920:	f7fa fbf0 	bl	8000104 <__udivsi3>
 8005924:	0003      	movs	r3, r0
 8005926:	0018      	movs	r0, r3
 8005928:	f001 fb75 	bl	8007016 <HAL_SYSTICK_Config>
 800592c:	1e03      	subs	r3, r0, #0
 800592e:	d112      	bne.n	8005956 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d80a      	bhi.n	800594c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	2301      	movs	r3, #1
 800593a:	425b      	negs	r3, r3
 800593c:	2200      	movs	r2, #0
 800593e:	0018      	movs	r0, r3
 8005940:	f001 fb34 	bl	8006fac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005944:	4b0e      	ldr	r3, [pc, #56]	@ (8005980 <HAL_InitTick+0x90>)
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	601a      	str	r2, [r3, #0]
 800594a:	e00d      	b.n	8005968 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800594c:	230f      	movs	r3, #15
 800594e:	18fb      	adds	r3, r7, r3
 8005950:	2201      	movs	r2, #1
 8005952:	701a      	strb	r2, [r3, #0]
 8005954:	e008      	b.n	8005968 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005956:	230f      	movs	r3, #15
 8005958:	18fb      	adds	r3, r7, r3
 800595a:	2201      	movs	r2, #1
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	e003      	b.n	8005968 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005960:	230f      	movs	r3, #15
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005968:	230f      	movs	r3, #15
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	b005      	add	sp, #20
 8005974:	bd90      	pop	{r4, r7, pc}
 8005976:	46c0      	nop			@ (mov r8, r8)
 8005978:	20000448 	.word	0x20000448
 800597c:	20000440 	.word	0x20000440
 8005980:	20000444 	.word	0x20000444

08005984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005988:	4b05      	ldr	r3, [pc, #20]	@ (80059a0 <HAL_IncTick+0x1c>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	001a      	movs	r2, r3
 800598e:	4b05      	ldr	r3, [pc, #20]	@ (80059a4 <HAL_IncTick+0x20>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	18d2      	adds	r2, r2, r3
 8005994:	4b03      	ldr	r3, [pc, #12]	@ (80059a4 <HAL_IncTick+0x20>)
 8005996:	601a      	str	r2, [r3, #0]
}
 8005998:	46c0      	nop			@ (mov r8, r8)
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	46c0      	nop			@ (mov r8, r8)
 80059a0:	20000448 	.word	0x20000448
 80059a4:	20000ccc 	.word	0x20000ccc

080059a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  return uwTick;
 80059ac:	4b02      	ldr	r3, [pc, #8]	@ (80059b8 <HAL_GetTick+0x10>)
 80059ae:	681b      	ldr	r3, [r3, #0]
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	20000ccc 	.word	0x20000ccc

080059bc <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a05      	ldr	r2, [pc, #20]	@ (80059e0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80059cc:	401a      	ands	r2, r3
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	431a      	orrs	r2, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b002      	add	sp, #8
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			@ (mov r8, r8)
 80059e0:	fe3fffff 	.word	0xfe3fffff

080059e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	23e0      	movs	r3, #224	@ 0xe0
 80059f2:	045b      	lsls	r3, r3, #17
 80059f4:	4013      	ands	r3, r2
}
 80059f6:	0018      	movs	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	b002      	add	sp, #8
 80059fc:	bd80      	pop	{r7, pc}

080059fe <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80059fe:	b580      	push	{r7, lr}
 8005a00:	b084      	sub	sp, #16
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	2104      	movs	r1, #4
 8005a12:	400a      	ands	r2, r1
 8005a14:	2107      	movs	r1, #7
 8005a16:	4091      	lsls	r1, r2
 8005a18:	000a      	movs	r2, r1
 8005a1a:	43d2      	mvns	r2, r2
 8005a1c:	401a      	ands	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2104      	movs	r1, #4
 8005a22:	400b      	ands	r3, r1
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4099      	lsls	r1, r3
 8005a28:	000b      	movs	r3, r1
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005a30:	46c0      	nop			@ (mov r8, r8)
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b004      	add	sp, #16
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	2104      	movs	r1, #4
 8005a4a:	400a      	ands	r2, r1
 8005a4c:	2107      	movs	r1, #7
 8005a4e:	4091      	lsls	r1, r2
 8005a50:	000a      	movs	r2, r1
 8005a52:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2104      	movs	r1, #4
 8005a58:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005a5a:	40da      	lsrs	r2, r3
 8005a5c:	0013      	movs	r3, r2
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b002      	add	sp, #8
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	23c0      	movs	r3, #192	@ 0xc0
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4013      	ands	r3, r2
 8005a78:	d101      	bne.n	8005a7e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	0018      	movs	r0, r3
 8005a82:	46bd      	mov	sp, r7
 8005a84:	b002      	add	sp, #8
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	211f      	movs	r1, #31
 8005a9c:	400a      	ands	r2, r1
 8005a9e:	210f      	movs	r1, #15
 8005aa0:	4091      	lsls	r1, r2
 8005aa2:	000a      	movs	r2, r1
 8005aa4:	43d2      	mvns	r2, r2
 8005aa6:	401a      	ands	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	0e9b      	lsrs	r3, r3, #26
 8005aac:	210f      	movs	r1, #15
 8005aae:	4019      	ands	r1, r3
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	201f      	movs	r0, #31
 8005ab4:	4003      	ands	r3, r0
 8005ab6:	4099      	lsls	r1, r3
 8005ab8:	000b      	movs	r3, r1
 8005aba:	431a      	orrs	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005ac0:	46c0      	nop			@ (mov r8, r8)
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	b004      	add	sp, #16
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	035b      	lsls	r3, r3, #13
 8005ada:	0b5b      	lsrs	r3, r3, #13
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b002      	add	sp, #8
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
 8005af2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	0352      	lsls	r2, r2, #13
 8005afc:	0b52      	lsrs	r2, r2, #13
 8005afe:	43d2      	mvns	r2, r2
 8005b00:	401a      	ands	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	b002      	add	sp, #8
 8005b0c:	bd80      	pop	{r7, pc}
	...

08005b10 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	0212      	lsls	r2, r2, #8
 8005b24:	43d2      	mvns	r2, r2
 8005b26:	401a      	ands	r2, r3
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	021b      	lsls	r3, r3, #8
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	400b      	ands	r3, r1
 8005b30:	4904      	ldr	r1, [pc, #16]	@ (8005b44 <LL_ADC_SetChannelSamplingTime+0x34>)
 8005b32:	400b      	ands	r3, r1
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b004      	add	sp, #16
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	07ffff00 	.word	0x07ffff00

08005b48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	4a05      	ldr	r2, [pc, #20]	@ (8005b6c <LL_ADC_EnableInternalRegulator+0x24>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	2280      	movs	r2, #128	@ 0x80
 8005b5a:	0552      	lsls	r2, r2, #21
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b62:	46c0      	nop			@ (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b002      	add	sp, #8
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	6fffffe8 	.word	0x6fffffe8

08005b70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	2380      	movs	r3, #128	@ 0x80
 8005b7e:	055b      	lsls	r3, r3, #21
 8005b80:	401a      	ands	r2, r3
 8005b82:	2380      	movs	r3, #128	@ 0x80
 8005b84:	055b      	lsls	r3, r3, #21
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d101      	bne.n	8005b8e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	0018      	movs	r0, r3
 8005b92:	46bd      	mov	sp, r7
 8005b94:	b002      	add	sp, #8
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	4a04      	ldr	r2, [pc, #16]	@ (8005bb8 <LL_ADC_Enable+0x20>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	2201      	movs	r2, #1
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005bb0:	46c0      	nop			@ (mov r8, r8)
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	b002      	add	sp, #8
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	7fffffe8 	.word	0x7fffffe8

08005bbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4a04      	ldr	r2, [pc, #16]	@ (8005bdc <LL_ADC_Disable+0x20>)
 8005bca:	4013      	ands	r3, r2
 8005bcc:	2202      	movs	r2, #2
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005bd4:	46c0      	nop			@ (mov r8, r8)
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	7fffffe8 	.word	0x7fffffe8

08005be0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2201      	movs	r2, #1
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d101      	bne.n	8005bf8 <LL_ADC_IsEnabled+0x18>
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e000      	b.n	8005bfa <LL_ADC_IsEnabled+0x1a>
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b002      	add	sp, #8
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d101      	bne.n	8005c1a <LL_ADC_IsDisableOngoing+0x18>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e000      	b.n	8005c1c <LL_ADC_IsDisableOngoing+0x1a>
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	0018      	movs	r0, r3
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b082      	sub	sp, #8
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	4a04      	ldr	r2, [pc, #16]	@ (8005c44 <LL_ADC_REG_StartConversion+0x20>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	2204      	movs	r2, #4
 8005c36:	431a      	orrs	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005c3c:	46c0      	nop			@ (mov r8, r8)
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	b002      	add	sp, #8
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	7fffffe8 	.word	0x7fffffe8

08005c48 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a04      	ldr	r2, [pc, #16]	@ (8005c68 <LL_ADC_REG_StopConversion+0x20>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	2210      	movs	r2, #16
 8005c5a:	431a      	orrs	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005c60:	46c0      	nop			@ (mov r8, r8)
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b002      	add	sp, #8
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	7fffffe8 	.word	0x7fffffe8

08005c6c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2204      	movs	r2, #4
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d101      	bne.n	8005c84 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005c80:	2301      	movs	r3, #1
 8005c82:	e000      	b.n	8005c86 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b002      	add	sp, #8
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c98:	231f      	movs	r3, #31
 8005c9a:	18fb      	adds	r3, r7, r3
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e19f      	b.n	8005ff6 <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d12a      	bne.n	8005d14 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4acf      	ldr	r2, [pc, #828]	@ (8006000 <HAL_ADC_Init+0x370>)
 8005cc2:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4acf      	ldr	r2, [pc, #828]	@ (8006004 <HAL_ADC_Init+0x374>)
 8005cc8:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4ace      	ldr	r2, [pc, #824]	@ (8006008 <HAL_ADC_Init+0x378>)
 8005cce:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4ace      	ldr	r2, [pc, #824]	@ (800600c <HAL_ADC_Init+0x37c>)
 8005cd4:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4acd      	ldr	r2, [pc, #820]	@ (8006010 <HAL_ADC_Init+0x380>)
 8005cda:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4acd      	ldr	r2, [pc, #820]	@ (8006014 <HAL_ADC_Init+0x384>)
 8005ce0:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4acc      	ldr	r2, [pc, #816]	@ (8006018 <HAL_ADC_Init+0x388>)
 8005ce6:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2280      	movs	r2, #128	@ 0x80
 8005cec:	589b      	ldr	r3, [r3, r2]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d103      	bne.n	8005cfa <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2180      	movs	r1, #128	@ 0x80
 8005cf6:	4ac9      	ldr	r2, [pc, #804]	@ (800601c <HAL_ADC_Init+0x38c>)
 8005cf8:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2280      	movs	r2, #128	@ 0x80
 8005cfe:	589b      	ldr	r3, [r3, r2]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	0010      	movs	r0, r2
 8005d04:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2254      	movs	r2, #84	@ 0x54
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7ff ff29 	bl	8005b70 <LL_ADC_IsInternalRegulatorEnabled>
 8005d1e:	1e03      	subs	r3, r0, #0
 8005d20:	d115      	bne.n	8005d4e <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7ff ff0e 	bl	8005b48 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d2c:	4bbc      	ldr	r3, [pc, #752]	@ (8006020 <HAL_ADC_Init+0x390>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	49bc      	ldr	r1, [pc, #752]	@ (8006024 <HAL_ADC_Init+0x394>)
 8005d32:	0018      	movs	r0, r3
 8005d34:	f7fa f9e6 	bl	8000104 <__udivsi3>
 8005d38:	0003      	movs	r3, r0
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d40:	e002      	b.n	8005d48 <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f9      	bne.n	8005d42 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	0018      	movs	r0, r3
 8005d54:	f7ff ff0c 	bl	8005b70 <LL_ADC_IsInternalRegulatorEnabled>
 8005d58:	1e03      	subs	r3, r0, #0
 8005d5a:	d10f      	bne.n	8005d7c <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	2210      	movs	r2, #16
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d74:	231f      	movs	r3, #31
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	2201      	movs	r2, #1
 8005d7a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7ff ff73 	bl	8005c6c <LL_ADC_REG_IsConversionOngoing>
 8005d86:	0003      	movs	r3, r0
 8005d88:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d8e:	2210      	movs	r2, #16
 8005d90:	4013      	ands	r3, r2
 8005d92:	d000      	beq.n	8005d96 <HAL_ADC_Init+0x106>
 8005d94:	e122      	b.n	8005fdc <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d000      	beq.n	8005d9e <HAL_ADC_Init+0x10e>
 8005d9c:	e11e      	b.n	8005fdc <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005da2:	4aa1      	ldr	r2, [pc, #644]	@ (8006028 <HAL_ADC_Init+0x398>)
 8005da4:	4013      	ands	r3, r2
 8005da6:	2202      	movs	r2, #2
 8005da8:	431a      	orrs	r2, r3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	0018      	movs	r0, r3
 8005db4:	f7ff ff14 	bl	8005be0 <LL_ADC_IsEnabled>
 8005db8:	1e03      	subs	r3, r0, #0
 8005dba:	d000      	beq.n	8005dbe <HAL_ADC_Init+0x12e>
 8005dbc:	e0ad      	b.n	8005f1a <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	7e1b      	ldrb	r3, [r3, #24]
 8005dc6:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005dc8:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7e5b      	ldrb	r3, [r3, #25]
 8005dce:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005dd0:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	7e9b      	ldrb	r3, [r3, #26]
 8005dd6:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005dd8:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_ADC_Init+0x158>
 8005de2:	2380      	movs	r3, #128	@ 0x80
 8005de4:	015b      	lsls	r3, r3, #5
 8005de6:	e000      	b.n	8005dea <HAL_ADC_Init+0x15a>
 8005de8:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005dea:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005df0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da04      	bge.n	8005e04 <HAL_ADC_Init+0x174>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	085b      	lsrs	r3, r3, #1
 8005e02:	e001      	b.n	8005e08 <HAL_ADC_Init+0x178>
 8005e04:	2380      	movs	r3, #128	@ 0x80
 8005e06:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8005e08:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	212c      	movs	r1, #44	@ 0x2c
 8005e0e:	5c5b      	ldrb	r3, [r3, r1]
 8005e10:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e12:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	5c9b      	ldrb	r3, [r3, r2]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d115      	bne.n	8005e50 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	7e9b      	ldrb	r3, [r3, #26]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d105      	bne.n	8005e38 <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	2280      	movs	r2, #128	@ 0x80
 8005e30:	0252      	lsls	r2, r2, #9
 8005e32:	4313      	orrs	r3, r2
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	e00b      	b.n	8005e50 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e3c:	2220      	movs	r2, #32
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e48:	2201      	movs	r2, #1
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e5c:	23e0      	movs	r3, #224	@ 0xe0
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005e66:	4313      	orrs	r3, r2
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	4a6d      	ldr	r2, [pc, #436]	@ (800602c <HAL_ADC_Init+0x39c>)
 8005e76:	4013      	ands	r3, r2
 8005e78:	0019      	movs	r1, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	0f9b      	lsrs	r3, r3, #30
 8005e8a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005e90:	4313      	orrs	r3, r2
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	223c      	movs	r2, #60	@ 0x3c
 8005e9c:	5c9b      	ldrb	r3, [r3, r2]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d111      	bne.n	8005ec6 <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	0f9b      	lsrs	r3, r3, #30
 8005ea8:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005eae:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8005eb4:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8005eba:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	4a58      	ldr	r2, [pc, #352]	@ (8006030 <HAL_ADC_Init+0x3a0>)
 8005ece:	4013      	ands	r3, r2
 8005ed0:	0019      	movs	r1, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	23c0      	movs	r3, #192	@ 0xc0
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d018      	beq.n	8005f1a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	05db      	lsls	r3, r3, #23
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d012      	beq.n	8005f1a <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005ef8:	2380      	movs	r3, #128	@ 0x80
 8005efa:	061b      	lsls	r3, r3, #24
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d00c      	beq.n	8005f1a <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005f00:	4b4c      	ldr	r3, [pc, #304]	@ (8006034 <HAL_ADC_Init+0x3a4>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a4c      	ldr	r2, [pc, #304]	@ (8006038 <HAL_ADC_Init+0x3a8>)
 8005f06:	4013      	ands	r3, r2
 8005f08:	0019      	movs	r1, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	23f0      	movs	r3, #240	@ 0xf0
 8005f10:	039b      	lsls	r3, r3, #14
 8005f12:	401a      	ands	r2, r3
 8005f14:	4b47      	ldr	r3, [pc, #284]	@ (8006034 <HAL_ADC_Init+0x3a4>)
 8005f16:	430a      	orrs	r2, r1
 8005f18:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f22:	001a      	movs	r2, r3
 8005f24:	2100      	movs	r1, #0
 8005f26:	f7ff fd6a 	bl	80059fe <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f32:	4942      	ldr	r1, [pc, #264]	@ (800603c <HAL_ADC_Init+0x3ac>)
 8005f34:	001a      	movs	r2, r3
 8005f36:	f7ff fd62 	bl	80059fe <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2110      	movs	r1, #16
 8005f4e:	4249      	negs	r1, r1
 8005f50:	430a      	orrs	r2, r1
 8005f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f54:	e018      	b.n	8005f88 <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691a      	ldr	r2, [r3, #16]
 8005f5a:	2380      	movs	r3, #128	@ 0x80
 8005f5c:	039b      	lsls	r3, r3, #14
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d112      	bne.n	8005f88 <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	221c      	movs	r2, #28
 8005f72:	4013      	ands	r3, r2
 8005f74:	2210      	movs	r2, #16
 8005f76:	4252      	negs	r2, r2
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	0011      	movs	r1, r2
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	430a      	orrs	r2, r1
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	0018      	movs	r0, r3
 8005f90:	f7ff fd52 	bl	8005a38 <LL_ADC_GetSamplingTimeCommonChannels>
 8005f94:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d10b      	bne.n	8005fb6 <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fa8:	2203      	movs	r2, #3
 8005faa:	4393      	bics	r3, r2
 8005fac:	2201      	movs	r2, #1
 8005fae:	431a      	orrs	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fb4:	e01c      	b.n	8005ff0 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fba:	2212      	movs	r2, #18
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	2210      	movs	r2, #16
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8005fd2:	231f      	movs	r3, #31
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fda:	e009      	b.n	8005ff0 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe0:	2210      	movs	r2, #16
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005fe8:	231f      	movs	r3, #31
 8005fea:	18fb      	adds	r3, r7, r3
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8005ff0:	231f      	movs	r3, #31
 8005ff2:	18fb      	adds	r3, r7, r3
 8005ff4:	781b      	ldrb	r3, [r3, #0]
}
 8005ff6:	0018      	movs	r0, r3
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	b008      	add	sp, #32
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	46c0      	nop			@ (mov r8, r8)
 8006000:	08006359 	.word	0x08006359
 8006004:	08006369 	.word	0x08006369
 8006008:	08006379 	.word	0x08006379
 800600c:	08006389 	.word	0x08006389
 8006010:	08006de1 	.word	0x08006de1
 8006014:	08006df1 	.word	0x08006df1
 8006018:	08006e01 	.word	0x08006e01
 800601c:	08004719 	.word	0x08004719
 8006020:	20000440 	.word	0x20000440
 8006024:	00030d40 	.word	0x00030d40
 8006028:	fffffefd 	.word	0xfffffefd
 800602c:	ffde0201 	.word	0xffde0201
 8006030:	1ffffc02 	.word	0x1ffffc02
 8006034:	40012708 	.word	0x40012708
 8006038:	ffc3ffff 	.word	0xffc3ffff
 800603c:	07ffff04 	.word	0x07ffff04

08006040 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	607a      	str	r2, [r7, #4]
 800604a:	230b      	movs	r3, #11
 800604c:	18fb      	adds	r3, r7, r3
 800604e:	1c0a      	adds	r2, r1, #0
 8006050:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006052:	2317      	movs	r3, #23
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d107      	bne.n	8006070 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	2210      	movs	r2, #16
 8006066:	431a      	orrs	r2, r3
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e06d      	b.n	800614c <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006074:	2201      	movs	r2, #1
 8006076:	4013      	ands	r3, r2
 8006078:	d03a      	beq.n	80060f0 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800607a:	230b      	movs	r3, #11
 800607c:	18fb      	adds	r3, r7, r3
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b0a      	cmp	r3, #10
 8006082:	d82a      	bhi.n	80060da <HAL_ADC_RegisterCallback+0x9a>
 8006084:	009a      	lsls	r2, r3, #2
 8006086:	4b33      	ldr	r3, [pc, #204]	@ (8006154 <HAL_ADC_RegisterCallback+0x114>)
 8006088:	18d3      	adds	r3, r2, r3
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006094:	e057      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800609c:	e053      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80060a4:	e04f      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80060ac:	e04b      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80060b4:	e047      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80060bc:	e043      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80060c4:	e03f      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2180      	movs	r1, #128	@ 0x80
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	505a      	str	r2, [r3, r1]
        break;
 80060ce:	e03a      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2184      	movs	r1, #132	@ 0x84
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	505a      	str	r2, [r3, r1]
        break;
 80060d8:	e035      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060de:	2210      	movs	r2, #16
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80060e6:	2317      	movs	r3, #23
 80060e8:	18fb      	adds	r3, r7, r3
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
        break;
 80060ee:	e02a      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d11c      	bne.n	8006132 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 80060f8:	230b      	movs	r3, #11
 80060fa:	18fb      	adds	r3, r7, r3
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b09      	cmp	r3, #9
 8006100:	d002      	beq.n	8006108 <HAL_ADC_RegisterCallback+0xc8>
 8006102:	2b0a      	cmp	r3, #10
 8006104:	d005      	beq.n	8006112 <HAL_ADC_RegisterCallback+0xd2>
 8006106:	e009      	b.n	800611c <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2180      	movs	r1, #128	@ 0x80
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	505a      	str	r2, [r3, r1]
        break;
 8006110:	e019      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2184      	movs	r1, #132	@ 0x84
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	505a      	str	r2, [r3, r1]
        break;
 800611a:	e014      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006120:	2210      	movs	r2, #16
 8006122:	431a      	orrs	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 8006128:	2317      	movs	r3, #23
 800612a:	18fb      	adds	r3, r7, r3
 800612c:	2201      	movs	r2, #1
 800612e:	701a      	strb	r2, [r3, #0]
        break;
 8006130:	e009      	b.n	8006146 <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006136:	2210      	movs	r2, #16
 8006138:	431a      	orrs	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 800613e:	2317      	movs	r3, #23
 8006140:	18fb      	adds	r3, r7, r3
 8006142:	2201      	movs	r2, #1
 8006144:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006146:	2317      	movs	r3, #23
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	781b      	ldrb	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b006      	add	sp, #24
 8006152:	bd80      	pop	{r7, pc}
 8006154:	0800d560 	.word	0x0800d560

08006158 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006158:	b5b0      	push	{r4, r5, r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	0018      	movs	r0, r3
 800616a:	f7ff fd7f 	bl	8005c6c <LL_ADC_REG_IsConversionOngoing>
 800616e:	1e03      	subs	r3, r0, #0
 8006170:	d16c      	bne.n	800624c <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2254      	movs	r2, #84	@ 0x54
 8006176:	5c9b      	ldrb	r3, [r3, r2]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_ADC_Start_DMA+0x28>
 800617c:	2302      	movs	r3, #2
 800617e:	e06c      	b.n	800625a <HAL_ADC_Start_DMA+0x102>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2254      	movs	r2, #84	@ 0x54
 8006184:	2101      	movs	r1, #1
 8006186:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2201      	movs	r2, #1
 8006190:	4013      	ands	r3, r2
 8006192:	d113      	bne.n	80061bc <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff fd21 	bl	8005be0 <LL_ADC_IsEnabled>
 800619e:	1e03      	subs	r3, r0, #0
 80061a0:	d004      	beq.n	80061ac <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	0018      	movs	r0, r3
 80061a8:	f7ff fd08 	bl	8005bbc <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2101      	movs	r1, #1
 80061b8:	430a      	orrs	r2, r1
 80061ba:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80061bc:	2517      	movs	r5, #23
 80061be:	197c      	adds	r4, r7, r5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	0018      	movs	r0, r3
 80061c4:	f000 fb02 	bl	80067cc <ADC_Enable>
 80061c8:	0003      	movs	r3, r0
 80061ca:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80061cc:	002c      	movs	r4, r5
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d13e      	bne.n	8006254 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061da:	4a22      	ldr	r2, [pc, #136]	@ (8006264 <HAL_ADC_Start_DMA+0x10c>)
 80061dc:	4013      	ands	r3, r2
 80061de:	2280      	movs	r2, #128	@ 0x80
 80061e0:	0052      	lsls	r2, r2, #1
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <HAL_ADC_Start_DMA+0x110>)
 80061f4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061fa:	4a1c      	ldr	r2, [pc, #112]	@ (800626c <HAL_ADC_Start_DMA+0x114>)
 80061fc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006202:	4a1b      	ldr	r2, [pc, #108]	@ (8006270 <HAL_ADC_Start_DMA+0x118>)
 8006204:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	221c      	movs	r2, #28
 800620c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2254      	movs	r2, #84	@ 0x54
 8006212:	2100      	movs	r1, #0
 8006214:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2110      	movs	r1, #16
 8006222:	430a      	orrs	r2, r1
 8006224:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	3340      	adds	r3, #64	@ 0x40
 8006230:	0019      	movs	r1, r3
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	193c      	adds	r4, r7, r4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f000 ff84 	bl	8007144 <HAL_DMA_Start_IT>
 800623c:	0003      	movs	r3, r0
 800623e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0018      	movs	r0, r3
 8006246:	f7ff fced 	bl	8005c24 <LL_ADC_REG_StartConversion>
 800624a:	e003      	b.n	8006254 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800624c:	2317      	movs	r3, #23
 800624e:	18fb      	adds	r3, r7, r3
 8006250:	2202      	movs	r2, #2
 8006252:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8006254:	2317      	movs	r3, #23
 8006256:	18fb      	adds	r3, r7, r3
 8006258:	781b      	ldrb	r3, [r3, #0]
}
 800625a:	0018      	movs	r0, r3
 800625c:	46bd      	mov	sp, r7
 800625e:	b006      	add	sp, #24
 8006260:	bdb0      	pop	{r4, r5, r7, pc}
 8006262:	46c0      	nop			@ (mov r8, r8)
 8006264:	fffff0fe 	.word	0xfffff0fe
 8006268:	08006995 	.word	0x08006995
 800626c:	08006a61 	.word	0x08006a61
 8006270:	08006a81 	.word	0x08006a81

08006274 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8006274:	b5b0      	push	{r4, r5, r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2254      	movs	r2, #84	@ 0x54
 8006280:	5c9b      	ldrb	r3, [r3, r2]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d101      	bne.n	800628a <HAL_ADC_Stop_DMA+0x16>
 8006286:	2302      	movs	r3, #2
 8006288:	e05f      	b.n	800634a <HAL_ADC_Stop_DMA+0xd6>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2254      	movs	r2, #84	@ 0x54
 800628e:	2101      	movs	r1, #1
 8006290:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8006292:	250f      	movs	r5, #15
 8006294:	197c      	adds	r4, r7, r5
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	0018      	movs	r0, r3
 800629a:	f000 fa55 	bl	8006748 <ADC_ConversionStop>
 800629e:	0003      	movs	r3, r0
 80062a0:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80062a2:	0029      	movs	r1, r5
 80062a4:	187b      	adds	r3, r7, r1
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d147      	bne.n	800633c <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062b0:	2225      	movs	r2, #37	@ 0x25
 80062b2:	5c9b      	ldrb	r3, [r3, r2]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d112      	bne.n	80062e0 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062be:	000d      	movs	r5, r1
 80062c0:	187c      	adds	r4, r7, r1
 80062c2:	0018      	movs	r0, r3
 80062c4:	f000 ffc4 	bl	8007250 <HAL_DMA_Abort>
 80062c8:	0003      	movs	r3, r0
 80062ca:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80062cc:	197b      	adds	r3, r7, r5
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d005      	beq.n	80062e0 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d8:	2240      	movs	r2, #64	@ 0x40
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685a      	ldr	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2110      	movs	r1, #16
 80062ec:	438a      	bics	r2, r1
 80062ee:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80062f0:	220f      	movs	r2, #15
 80062f2:	18bb      	adds	r3, r7, r2
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d107      	bne.n	800630a <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80062fa:	18bc      	adds	r4, r7, r2
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	0018      	movs	r0, r3
 8006300:	f000 faea 	bl	80068d8 <ADC_Disable>
 8006304:	0003      	movs	r3, r0
 8006306:	7023      	strb	r3, [r4, #0]
 8006308:	e003      	b.n	8006312 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	0018      	movs	r0, r3
 800630e:	f000 fae3 	bl	80068d8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006312:	230f      	movs	r3, #15
 8006314:	18fb      	adds	r3, r7, r3
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d107      	bne.n	800632c <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006320:	4a0c      	ldr	r2, [pc, #48]	@ (8006354 <HAL_ADC_Stop_DMA+0xe0>)
 8006322:	4013      	ands	r3, r2
 8006324:	2201      	movs	r2, #1
 8006326:	431a      	orrs	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2101      	movs	r1, #1
 8006338:	438a      	bics	r2, r1
 800633a:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2254      	movs	r2, #84	@ 0x54
 8006340:	2100      	movs	r1, #0
 8006342:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006344:	230f      	movs	r3, #15
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	781b      	ldrb	r3, [r3, #0]
}
 800634a:	0018      	movs	r0, r3
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bdb0      	pop	{r4, r5, r7, pc}
 8006352:	46c0      	nop			@ (mov r8, r8)
 8006354:	fffffefe 	.word	0xfffffefe

08006358 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006360:	46c0      	nop			@ (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006370:	46c0      	nop			@ (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006380:	46c0      	nop			@ (mov r8, r8)
 8006382:	46bd      	mov	sp, r7
 8006384:	b002      	add	sp, #8
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006390:	46c0      	nop			@ (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b002      	add	sp, #8
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063a2:	2317      	movs	r3, #23
 80063a4:	18fb      	adds	r3, r7, r3
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2254      	movs	r2, #84	@ 0x54
 80063b2:	5c9b      	ldrb	r3, [r3, r2]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_ADC_ConfigChannel+0x24>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e1c0      	b.n	800673e <HAL_ADC_ConfigChannel+0x3a6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2254      	movs	r2, #84	@ 0x54
 80063c0:	2101      	movs	r1, #1
 80063c2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	0018      	movs	r0, r3
 80063ca:	f7ff fc4f 	bl	8005c6c <LL_ADC_REG_IsConversionOngoing>
 80063ce:	1e03      	subs	r3, r0, #0
 80063d0:	d000      	beq.n	80063d4 <HAL_ADC_ConfigChannel+0x3c>
 80063d2:	e1a3      	b.n	800671c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d100      	bne.n	80063de <HAL_ADC_ConfigChannel+0x46>
 80063dc:	e143      	b.n	8006666 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	2380      	movs	r3, #128	@ 0x80
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d004      	beq.n	80063f4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063ee:	4ac1      	ldr	r2, [pc, #772]	@ (80066f4 <HAL_ADC_ConfigChannel+0x35c>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d108      	bne.n	8006406 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	0019      	movs	r1, r3
 80063fe:	0010      	movs	r0, r2
 8006400:	f7ff fb62 	bl	8005ac8 <LL_ADC_REG_SetSequencerChAdd>
 8006404:	e0c9      	b.n	800659a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	211f      	movs	r1, #31
 8006410:	400b      	ands	r3, r1
 8006412:	210f      	movs	r1, #15
 8006414:	4099      	lsls	r1, r3
 8006416:	000b      	movs	r3, r1
 8006418:	43db      	mvns	r3, r3
 800641a:	4013      	ands	r3, r2
 800641c:	0019      	movs	r1, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	035b      	lsls	r3, r3, #13
 8006424:	0b5b      	lsrs	r3, r3, #13
 8006426:	d105      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x9c>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	0e9b      	lsrs	r3, r3, #26
 800642e:	221f      	movs	r2, #31
 8006430:	4013      	ands	r3, r2
 8006432:	e098      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2201      	movs	r2, #1
 800643a:	4013      	ands	r3, r2
 800643c:	d000      	beq.n	8006440 <HAL_ADC_ConfigChannel+0xa8>
 800643e:	e091      	b.n	8006564 <HAL_ADC_ConfigChannel+0x1cc>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2202      	movs	r2, #2
 8006446:	4013      	ands	r3, r2
 8006448:	d000      	beq.n	800644c <HAL_ADC_ConfigChannel+0xb4>
 800644a:	e089      	b.n	8006560 <HAL_ADC_ConfigChannel+0x1c8>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2204      	movs	r2, #4
 8006452:	4013      	ands	r3, r2
 8006454:	d000      	beq.n	8006458 <HAL_ADC_ConfigChannel+0xc0>
 8006456:	e081      	b.n	800655c <HAL_ADC_ConfigChannel+0x1c4>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2208      	movs	r2, #8
 800645e:	4013      	ands	r3, r2
 8006460:	d000      	beq.n	8006464 <HAL_ADC_ConfigChannel+0xcc>
 8006462:	e079      	b.n	8006558 <HAL_ADC_ConfigChannel+0x1c0>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2210      	movs	r2, #16
 800646a:	4013      	ands	r3, r2
 800646c:	d000      	beq.n	8006470 <HAL_ADC_ConfigChannel+0xd8>
 800646e:	e071      	b.n	8006554 <HAL_ADC_ConfigChannel+0x1bc>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2220      	movs	r2, #32
 8006476:	4013      	ands	r3, r2
 8006478:	d000      	beq.n	800647c <HAL_ADC_ConfigChannel+0xe4>
 800647a:	e069      	b.n	8006550 <HAL_ADC_ConfigChannel+0x1b8>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2240      	movs	r2, #64	@ 0x40
 8006482:	4013      	ands	r3, r2
 8006484:	d000      	beq.n	8006488 <HAL_ADC_ConfigChannel+0xf0>
 8006486:	e061      	b.n	800654c <HAL_ADC_ConfigChannel+0x1b4>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2280      	movs	r2, #128	@ 0x80
 800648e:	4013      	ands	r3, r2
 8006490:	d000      	beq.n	8006494 <HAL_ADC_ConfigChannel+0xfc>
 8006492:	e059      	b.n	8006548 <HAL_ADC_ConfigChannel+0x1b0>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	2380      	movs	r3, #128	@ 0x80
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	4013      	ands	r3, r2
 800649e:	d151      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x1ac>
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	2380      	movs	r3, #128	@ 0x80
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4013      	ands	r3, r2
 80064aa:	d149      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x1a8>
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	2380      	movs	r3, #128	@ 0x80
 80064b2:	00db      	lsls	r3, r3, #3
 80064b4:	4013      	ands	r3, r2
 80064b6:	d141      	bne.n	800653c <HAL_ADC_ConfigChannel+0x1a4>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	2380      	movs	r3, #128	@ 0x80
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	4013      	ands	r3, r2
 80064c2:	d139      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x1a0>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	2380      	movs	r3, #128	@ 0x80
 80064ca:	015b      	lsls	r3, r3, #5
 80064cc:	4013      	ands	r3, r2
 80064ce:	d131      	bne.n	8006534 <HAL_ADC_ConfigChannel+0x19c>
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	2380      	movs	r3, #128	@ 0x80
 80064d6:	019b      	lsls	r3, r3, #6
 80064d8:	4013      	ands	r3, r2
 80064da:	d129      	bne.n	8006530 <HAL_ADC_ConfigChannel+0x198>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	2380      	movs	r3, #128	@ 0x80
 80064e2:	01db      	lsls	r3, r3, #7
 80064e4:	4013      	ands	r3, r2
 80064e6:	d121      	bne.n	800652c <HAL_ADC_ConfigChannel+0x194>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	2380      	movs	r3, #128	@ 0x80
 80064ee:	021b      	lsls	r3, r3, #8
 80064f0:	4013      	ands	r3, r2
 80064f2:	d119      	bne.n	8006528 <HAL_ADC_ConfigChannel+0x190>
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	2380      	movs	r3, #128	@ 0x80
 80064fa:	025b      	lsls	r3, r3, #9
 80064fc:	4013      	ands	r3, r2
 80064fe:	d111      	bne.n	8006524 <HAL_ADC_ConfigChannel+0x18c>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	2380      	movs	r3, #128	@ 0x80
 8006506:	029b      	lsls	r3, r3, #10
 8006508:	4013      	ands	r3, r2
 800650a:	d109      	bne.n	8006520 <HAL_ADC_ConfigChannel+0x188>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	2380      	movs	r3, #128	@ 0x80
 8006512:	02db      	lsls	r3, r3, #11
 8006514:	4013      	ands	r3, r2
 8006516:	d001      	beq.n	800651c <HAL_ADC_ConfigChannel+0x184>
 8006518:	2312      	movs	r3, #18
 800651a:	e024      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 800651c:	2300      	movs	r3, #0
 800651e:	e022      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006520:	2311      	movs	r3, #17
 8006522:	e020      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006524:	2310      	movs	r3, #16
 8006526:	e01e      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006528:	230f      	movs	r3, #15
 800652a:	e01c      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 800652c:	230e      	movs	r3, #14
 800652e:	e01a      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006530:	230d      	movs	r3, #13
 8006532:	e018      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006534:	230c      	movs	r3, #12
 8006536:	e016      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006538:	230b      	movs	r3, #11
 800653a:	e014      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 800653c:	230a      	movs	r3, #10
 800653e:	e012      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006540:	2309      	movs	r3, #9
 8006542:	e010      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006544:	2308      	movs	r3, #8
 8006546:	e00e      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006548:	2307      	movs	r3, #7
 800654a:	e00c      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 800654c:	2306      	movs	r3, #6
 800654e:	e00a      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006550:	2305      	movs	r3, #5
 8006552:	e008      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006554:	2304      	movs	r3, #4
 8006556:	e006      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006558:	2303      	movs	r3, #3
 800655a:	e004      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 800655c:	2302      	movs	r3, #2
 800655e:	e002      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006560:	2301      	movs	r3, #1
 8006562:	e000      	b.n	8006566 <HAL_ADC_ConfigChannel+0x1ce>
 8006564:	2300      	movs	r3, #0
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6852      	ldr	r2, [r2, #4]
 800656a:	201f      	movs	r0, #31
 800656c:	4002      	ands	r2, r0
 800656e:	4093      	lsls	r3, r2
 8006570:	000a      	movs	r2, r1
 8006572:	431a      	orrs	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	089b      	lsrs	r3, r3, #2
 800657e:	1c5a      	adds	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	429a      	cmp	r2, r3
 8006586:	d808      	bhi.n	800659a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6859      	ldr	r1, [r3, #4]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	001a      	movs	r2, r3
 8006596:	f7ff fa77 	bl	8005a88 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6819      	ldr	r1, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	001a      	movs	r2, r3
 80065a8:	f7ff fab2 	bl	8005b10 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db00      	blt.n	80065b6 <HAL_ADC_ConfigChannel+0x21e>
 80065b4:	e0bc      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80065b6:	4b50      	ldr	r3, [pc, #320]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff fa13 	bl	80059e4 <LL_ADC_GetCommonPathInternalCh>
 80065be:	0003      	movs	r3, r0
 80065c0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a4d      	ldr	r2, [pc, #308]	@ (80066fc <HAL_ADC_ConfigChannel+0x364>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d122      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	2380      	movs	r3, #128	@ 0x80
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80065d4:	d11d      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	2280      	movs	r2, #128	@ 0x80
 80065da:	0412      	lsls	r2, r2, #16
 80065dc:	4313      	orrs	r3, r2
 80065de:	4a46      	ldr	r2, [pc, #280]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 80065e0:	0019      	movs	r1, r3
 80065e2:	0010      	movs	r0, r2
 80065e4:	f7ff f9ea 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065e8:	4b45      	ldr	r3, [pc, #276]	@ (8006700 <HAL_ADC_ConfigChannel+0x368>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4945      	ldr	r1, [pc, #276]	@ (8006704 <HAL_ADC_ConfigChannel+0x36c>)
 80065ee:	0018      	movs	r0, r3
 80065f0:	f7f9 fd88 	bl	8000104 <__udivsi3>
 80065f4:	0003      	movs	r3, r0
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	0013      	movs	r3, r2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006602:	e002      	b.n	800660a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b01      	subs	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1f9      	bne.n	8006604 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006610:	e08e      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a3c      	ldr	r2, [pc, #240]	@ (8006708 <HAL_ADC_ConfigChannel+0x370>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d10e      	bne.n	800663a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	2380      	movs	r3, #128	@ 0x80
 8006620:	045b      	lsls	r3, r3, #17
 8006622:	4013      	ands	r3, r2
 8006624:	d109      	bne.n	800663a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	2280      	movs	r2, #128	@ 0x80
 800662a:	0452      	lsls	r2, r2, #17
 800662c:	4313      	orrs	r3, r2
 800662e:	4a32      	ldr	r2, [pc, #200]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 8006630:	0019      	movs	r1, r3
 8006632:	0010      	movs	r0, r2
 8006634:	f7ff f9c2 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
 8006638:	e07a      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a33      	ldr	r2, [pc, #204]	@ (800670c <HAL_ADC_ConfigChannel+0x374>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d000      	beq.n	8006646 <HAL_ADC_ConfigChannel+0x2ae>
 8006644:	e074      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	2380      	movs	r3, #128	@ 0x80
 800664a:	03db      	lsls	r3, r3, #15
 800664c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800664e:	d000      	beq.n	8006652 <HAL_ADC_ConfigChannel+0x2ba>
 8006650:	e06e      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2280      	movs	r2, #128	@ 0x80
 8006656:	03d2      	lsls	r2, r2, #15
 8006658:	4313      	orrs	r3, r2
 800665a:	4a27      	ldr	r2, [pc, #156]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 800665c:	0019      	movs	r1, r3
 800665e:	0010      	movs	r0, r2
 8006660:	f7ff f9ac 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
 8006664:	e064      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	2380      	movs	r3, #128	@ 0x80
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	429a      	cmp	r2, r3
 8006670:	d004      	beq.n	800667c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006676:	4a1f      	ldr	r2, [pc, #124]	@ (80066f4 <HAL_ADC_ConfigChannel+0x35c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d107      	bne.n	800668c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	0019      	movs	r1, r3
 8006686:	0010      	movs	r0, r2
 8006688:	f7ff fa2f 	bl	8005aea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	da4d      	bge.n	8006730 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006694:	4b18      	ldr	r3, [pc, #96]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 8006696:	0018      	movs	r0, r3
 8006698:	f7ff f9a4 	bl	80059e4 <LL_ADC_GetCommonPathInternalCh>
 800669c:	0003      	movs	r3, r0
 800669e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a15      	ldr	r2, [pc, #84]	@ (80066fc <HAL_ADC_ConfigChannel+0x364>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	4a18      	ldr	r2, [pc, #96]	@ (8006710 <HAL_ADC_ConfigChannel+0x378>)
 80066ae:	4013      	ands	r3, r2
 80066b0:	4a11      	ldr	r2, [pc, #68]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 80066b2:	0019      	movs	r1, r3
 80066b4:	0010      	movs	r0, r2
 80066b6:	f7ff f981 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
 80066ba:	e039      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a11      	ldr	r2, [pc, #68]	@ (8006708 <HAL_ADC_ConfigChannel+0x370>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d108      	bne.n	80066d8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	4a12      	ldr	r2, [pc, #72]	@ (8006714 <HAL_ADC_ConfigChannel+0x37c>)
 80066ca:	4013      	ands	r3, r2
 80066cc:	4a0a      	ldr	r2, [pc, #40]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 80066ce:	0019      	movs	r1, r3
 80066d0:	0010      	movs	r0, r2
 80066d2:	f7ff f973 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
 80066d6:	e02b      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a0b      	ldr	r2, [pc, #44]	@ (800670c <HAL_ADC_ConfigChannel+0x374>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d126      	bne.n	8006730 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <HAL_ADC_ConfigChannel+0x380>)
 80066e6:	4013      	ands	r3, r2
 80066e8:	4a03      	ldr	r2, [pc, #12]	@ (80066f8 <HAL_ADC_ConfigChannel+0x360>)
 80066ea:	0019      	movs	r1, r3
 80066ec:	0010      	movs	r0, r2
 80066ee:	f7ff f965 	bl	80059bc <LL_ADC_SetCommonPathInternalCh>
 80066f2:	e01d      	b.n	8006730 <HAL_ADC_ConfigChannel+0x398>
 80066f4:	80000004 	.word	0x80000004
 80066f8:	40012708 	.word	0x40012708
 80066fc:	b0001000 	.word	0xb0001000
 8006700:	20000440 	.word	0x20000440
 8006704:	00030d40 	.word	0x00030d40
 8006708:	b8004000 	.word	0xb8004000
 800670c:	b4002000 	.word	0xb4002000
 8006710:	ff7fffff 	.word	0xff7fffff
 8006714:	feffffff 	.word	0xfeffffff
 8006718:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006720:	2220      	movs	r2, #32
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006728:	2317      	movs	r3, #23
 800672a:	18fb      	adds	r3, r7, r3
 800672c:	2201      	movs	r2, #1
 800672e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2254      	movs	r2, #84	@ 0x54
 8006734:	2100      	movs	r1, #0
 8006736:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006738:	2317      	movs	r3, #23
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	781b      	ldrb	r3, [r3, #0]
}
 800673e:	0018      	movs	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	b006      	add	sp, #24
 8006744:	bd80      	pop	{r7, pc}
 8006746:	46c0      	nop			@ (mov r8, r8)

08006748 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	0018      	movs	r0, r3
 8006756:	f7ff fa89 	bl	8005c6c <LL_ADC_REG_IsConversionOngoing>
 800675a:	1e03      	subs	r3, r0, #0
 800675c:	d031      	beq.n	80067c2 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	0018      	movs	r0, r3
 8006764:	f7ff fa4d 	bl	8005c02 <LL_ADC_IsDisableOngoing>
 8006768:	1e03      	subs	r3, r0, #0
 800676a:	d104      	bne.n	8006776 <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	0018      	movs	r0, r3
 8006772:	f7ff fa69 	bl	8005c48 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006776:	f7ff f917 	bl	80059a8 <HAL_GetTick>
 800677a:	0003      	movs	r3, r0
 800677c:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800677e:	e01a      	b.n	80067b6 <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8006780:	f7ff f912 	bl	80059a8 <HAL_GetTick>
 8006784:	0002      	movs	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d913      	bls.n	80067b6 <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2204      	movs	r2, #4
 8006796:	4013      	ands	r3, r2
 8006798:	d00d      	beq.n	80067b6 <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679e:	2210      	movs	r2, #16
 80067a0:	431a      	orrs	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067aa:	2201      	movs	r2, #1
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e006      	b.n	80067c4 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	2204      	movs	r2, #4
 80067be:	4013      	ands	r3, r2
 80067c0:	d1de      	bne.n	8006780 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b004      	add	sp, #16
 80067ca:	bd80      	pop	{r7, pc}

080067cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0018      	movs	r0, r3
 80067de:	f7ff f9ff 	bl	8005be0 <LL_ADC_IsEnabled>
 80067e2:	1e03      	subs	r3, r0, #0
 80067e4:	d000      	beq.n	80067e8 <ADC_Enable+0x1c>
 80067e6:	e069      	b.n	80068bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	4a36      	ldr	r2, [pc, #216]	@ (80068c8 <ADC_Enable+0xfc>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	d00d      	beq.n	8006810 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f8:	2210      	movs	r2, #16
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006804:	2201      	movs	r2, #1
 8006806:	431a      	orrs	r2, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e056      	b.n	80068be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0018      	movs	r0, r3
 8006816:	f7ff f9bf 	bl	8005b98 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 800681a:	4b2c      	ldr	r3, [pc, #176]	@ (80068cc <ADC_Enable+0x100>)
 800681c:	0018      	movs	r0, r3
 800681e:	f7ff f8e1 	bl	80059e4 <LL_ADC_GetCommonPathInternalCh>
 8006822:	0002      	movs	r2, r0
 8006824:	2380      	movs	r3, #128	@ 0x80
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	4013      	ands	r3, r2
 800682a:	d00f      	beq.n	800684c <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800682c:	4b28      	ldr	r3, [pc, #160]	@ (80068d0 <ADC_Enable+0x104>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4928      	ldr	r1, [pc, #160]	@ (80068d4 <ADC_Enable+0x108>)
 8006832:	0018      	movs	r0, r3
 8006834:	f7f9 fc66 	bl	8000104 <__udivsi3>
 8006838:	0003      	movs	r3, r0
 800683a:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 800683c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800683e:	e002      	b.n	8006846 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	3b01      	subs	r3, #1
 8006844:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1f9      	bne.n	8006840 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7e5b      	ldrb	r3, [r3, #25]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d033      	beq.n	80068bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8006854:	f7ff f8a8 	bl	80059a8 <HAL_GetTick>
 8006858:	0003      	movs	r3, r0
 800685a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800685c:	e027      	b.n	80068ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	0018      	movs	r0, r3
 8006864:	f7ff f9bc 	bl	8005be0 <LL_ADC_IsEnabled>
 8006868:	1e03      	subs	r3, r0, #0
 800686a:	d104      	bne.n	8006876 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	0018      	movs	r0, r3
 8006872:	f7ff f991 	bl	8005b98 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006876:	f7ff f897 	bl	80059a8 <HAL_GetTick>
 800687a:	0002      	movs	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d914      	bls.n	80068ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2201      	movs	r2, #1
 800688c:	4013      	ands	r3, r2
 800688e:	2b01      	cmp	r3, #1
 8006890:	d00d      	beq.n	80068ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006896:	2210      	movs	r2, #16
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068a2:	2201      	movs	r2, #1
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e007      	b.n	80068be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d1d0      	bne.n	800685e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	0018      	movs	r0, r3
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b004      	add	sp, #16
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			@ (mov r8, r8)
 80068c8:	80000017 	.word	0x80000017
 80068cc:	40012708 	.word	0x40012708
 80068d0:	20000440 	.word	0x20000440
 80068d4:	00030d40 	.word	0x00030d40

080068d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	0018      	movs	r0, r3
 80068e6:	f7ff f98c 	bl	8005c02 <LL_ADC_IsDisableOngoing>
 80068ea:	0003      	movs	r3, r0
 80068ec:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	0018      	movs	r0, r3
 80068f4:	f7ff f974 	bl	8005be0 <LL_ADC_IsEnabled>
 80068f8:	1e03      	subs	r3, r0, #0
 80068fa:	d046      	beq.n	800698a <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d143      	bne.n	800698a <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	2205      	movs	r2, #5
 800690a:	4013      	ands	r3, r2
 800690c:	2b01      	cmp	r3, #1
 800690e:	d10d      	bne.n	800692c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0018      	movs	r0, r3
 8006916:	f7ff f951 	bl	8005bbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2203      	movs	r2, #3
 8006920:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006922:	f7ff f841 	bl	80059a8 <HAL_GetTick>
 8006926:	0003      	movs	r3, r0
 8006928:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800692a:	e028      	b.n	800697e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	2210      	movs	r2, #16
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693c:	2201      	movs	r2, #1
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e021      	b.n	800698c <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006948:	f7ff f82e 	bl	80059a8 <HAL_GetTick>
 800694c:	0002      	movs	r2, r0
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b02      	cmp	r3, #2
 8006954:	d913      	bls.n	800697e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2201      	movs	r2, #1
 800695e:	4013      	ands	r3, r2
 8006960:	d00d      	beq.n	800697e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006966:	2210      	movs	r2, #16
 8006968:	431a      	orrs	r2, r3
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006972:	2201      	movs	r2, #1
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e006      	b.n	800698c <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2201      	movs	r2, #1
 8006986:	4013      	ands	r3, r2
 8006988:	d1de      	bne.n	8006948 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	0018      	movs	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	b004      	add	sp, #16
 8006992:	bd80      	pop	{r7, pc}

08006994 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a6:	2250      	movs	r2, #80	@ 0x50
 80069a8:	4013      	ands	r3, r2
 80069aa:	d142      	bne.n	8006a32 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b0:	2280      	movs	r2, #128	@ 0x80
 80069b2:	0092      	lsls	r2, r2, #2
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	0018      	movs	r0, r3
 80069c0:	f7ff f851 	bl	8005a66 <LL_ADC_REG_IsTriggerSourceSWStart>
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d02e      	beq.n	8006a26 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	7e9b      	ldrb	r3, [r3, #26]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d12a      	bne.n	8006a26 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2208      	movs	r2, #8
 80069d8:	4013      	ands	r3, r2
 80069da:	2b08      	cmp	r3, #8
 80069dc:	d123      	bne.n	8006a26 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	0018      	movs	r0, r3
 80069e4:	f7ff f942 	bl	8005c6c <LL_ADC_REG_IsConversionOngoing>
 80069e8:	1e03      	subs	r3, r0, #0
 80069ea:	d110      	bne.n	8006a0e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	210c      	movs	r1, #12
 80069f8:	438a      	bics	r2, r1
 80069fa:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a00:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <ADC_DMAConvCplt+0xc8>)
 8006a02:	4013      	ands	r3, r2
 8006a04:	2201      	movs	r2, #1
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a0c:	e00b      	b.n	8006a26 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a12:	2220      	movs	r2, #32
 8006a14:	431a      	orrs	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1e:	2201      	movs	r2, #1
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006a30:	e010      	b.n	8006a54 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a36:	2210      	movs	r2, #16
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d005      	beq.n	8006a48 <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	0010      	movs	r0, r2
 8006a44:	4798      	blx	r3
}
 8006a46:	e005      	b.n	8006a54 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	0010      	movs	r0, r2
 8006a52:	4798      	blx	r3
}
 8006a54:	46c0      	nop			@ (mov r8, r8)
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b004      	add	sp, #16
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	fffffefe 	.word	0xfffffefe

08006a60 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	0010      	movs	r0, r2
 8006a76:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006a78:	46c0      	nop			@ (mov r8, r8)
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a92:	2240      	movs	r2, #64	@ 0x40
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	0010      	movs	r0, r2
 8006aae:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ab0:	46c0      	nop			@ (mov r8, r8)
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	b004      	add	sp, #16
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <LL_ADC_GetCommonClock>:
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	23f0      	movs	r3, #240	@ 0xf0
 8006ac6:	039b      	lsls	r3, r3, #14
 8006ac8:	4013      	ands	r3, r2
}
 8006aca:	0018      	movs	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b002      	add	sp, #8
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <LL_ADC_GetClock>:
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	0f9b      	lsrs	r3, r3, #30
 8006ae0:	079b      	lsls	r3, r3, #30
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b002      	add	sp, #8
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <LL_ADC_SetCalibrationFactor>:
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	22b4      	movs	r2, #180	@ 0xb4
 8006af8:	589b      	ldr	r3, [r3, r2]
 8006afa:	227f      	movs	r2, #127	@ 0x7f
 8006afc:	4393      	bics	r3, r2
 8006afe:	001a      	movs	r2, r3
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	21b4      	movs	r1, #180	@ 0xb4
 8006b08:	505a      	str	r2, [r3, r1]
}
 8006b0a:	46c0      	nop			@ (mov r8, r8)
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b002      	add	sp, #8
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <LL_ADC_GetCalibrationFactor>:
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b082      	sub	sp, #8
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	22b4      	movs	r2, #180	@ 0xb4
 8006b1e:	589b      	ldr	r3, [r3, r2]
 8006b20:	227f      	movs	r2, #127	@ 0x7f
 8006b22:	4013      	ands	r3, r2
}
 8006b24:	0018      	movs	r0, r3
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b002      	add	sp, #8
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <LL_ADC_Enable>:
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	4a04      	ldr	r2, [pc, #16]	@ (8006b4c <LL_ADC_Enable+0x20>)
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	609a      	str	r2, [r3, #8]
}
 8006b44:	46c0      	nop			@ (mov r8, r8)
 8006b46:	46bd      	mov	sp, r7
 8006b48:	b002      	add	sp, #8
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	7fffffe8 	.word	0x7fffffe8

08006b50 <LL_ADC_Disable>:
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4a04      	ldr	r2, [pc, #16]	@ (8006b70 <LL_ADC_Disable+0x20>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2202      	movs	r2, #2
 8006b62:	431a      	orrs	r2, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]
}
 8006b68:	46c0      	nop			@ (mov r8, r8)
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b002      	add	sp, #8
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	7fffffe8 	.word	0x7fffffe8

08006b74 <LL_ADC_IsEnabled>:
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2201      	movs	r2, #1
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d101      	bne.n	8006b8c <LL_ADC_IsEnabled+0x18>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_ADC_IsEnabled+0x1a>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	0018      	movs	r0, r3
 8006b90:	46bd      	mov	sp, r7
 8006b92:	b002      	add	sp, #8
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <LL_ADC_StartCalibration>:
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	4a05      	ldr	r2, [pc, #20]	@ (8006bbc <LL_ADC_StartCalibration+0x24>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	2280      	movs	r2, #128	@ 0x80
 8006baa:	0612      	lsls	r2, r2, #24
 8006bac:	431a      	orrs	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	609a      	str	r2, [r3, #8]
}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	b002      	add	sp, #8
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	46c0      	nop			@ (mov r8, r8)
 8006bbc:	7fffffe8 	.word	0x7fffffe8

08006bc0 <LL_ADC_IsCalibrationOnGoing>:
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	0fdb      	lsrs	r3, r3, #31
 8006bce:	07da      	lsls	r2, r3, #31
 8006bd0:	2380      	movs	r3, #128	@ 0x80
 8006bd2:	061b      	lsls	r3, r3, #24
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d101      	bne.n	8006bdc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <LL_ADC_IsCalibrationOnGoing+0x1e>
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b002      	add	sp, #8
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8006be8:	b590      	push	{r4, r7, lr}
 8006bea:	b08b      	sub	sp, #44	@ 0x2c
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	623b      	str	r3, [r7, #32]
  __IO uint32_t delay_cpu_cycles;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2254      	movs	r2, #84	@ 0x54
 8006bfc:	5c9b      	ldrb	r3, [r3, r2]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d101      	bne.n	8006c06 <HAL_ADCEx_Calibration_Start+0x1e>
 8006c02:	2302      	movs	r3, #2
 8006c04:	e0dd      	b.n	8006dc2 <HAL_ADCEx_Calibration_Start+0x1da>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2254      	movs	r2, #84	@ 0x54
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006c0e:	231f      	movs	r3, #31
 8006c10:	18fc      	adds	r4, r7, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7ff fe5f 	bl	80068d8 <ADC_Disable>
 8006c1a:	0003      	movs	r3, r0
 8006c1c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	0018      	movs	r0, r3
 8006c24:	f7ff ffa6 	bl	8006b74 <LL_ADC_IsEnabled>
 8006c28:	1e03      	subs	r3, r0, #0
 8006c2a:	d000      	beq.n	8006c2e <HAL_ADCEx_Calibration_Start+0x46>
 8006c2c:	e0bc      	b.n	8006da8 <HAL_ADCEx_Calibration_Start+0x1c0>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	4a66      	ldr	r2, [pc, #408]	@ (8006dcc <HAL_ADCEx_Calibration_Start+0x1e4>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	2202      	movs	r2, #2
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	4a62      	ldr	r2, [pc, #392]	@ (8006dd0 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68da      	ldr	r2, [r3, #12]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	495f      	ldr	r1, [pc, #380]	@ (8006dd4 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c5e:	e02d      	b.n	8006cbc <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f7ff ff97 	bl	8006b98 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c6a:	e014      	b.n	8006c96 <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	4a58      	ldr	r2, [pc, #352]	@ (8006dd8 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d90d      	bls.n	8006c96 <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c7e:	2212      	movs	r2, #18
 8006c80:	4393      	bics	r3, r2
 8006c82:	2210      	movs	r2, #16
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2254      	movs	r2, #84	@ 0x54
 8006c8e:	2100      	movs	r1, #0
 8006c90:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e095      	b.n	8006dc2 <HAL_ADCEx_Calibration_Start+0x1da>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f7ff ff90 	bl	8006bc0 <LL_ADC_IsCalibrationOnGoing>
 8006ca0:	1e03      	subs	r3, r0, #0
 8006ca2:	d1e3      	bne.n	8006c6c <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	0018      	movs	r0, r3
 8006caa:	f7ff ff32 	bl	8006b12 <LL_ADC_GetCalibrationFactor>
 8006cae:	0002      	movs	r2, r0
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	189b      	adds	r3, r3, r2
 8006cb4:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb8:	3301      	adds	r3, #1
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cbe:	2b07      	cmp	r3, #7
 8006cc0:	d9ce      	bls.n	8006c60 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8006cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006cc4:	6a38      	ldr	r0, [r7, #32]
 8006cc6:	f7f9 fa1d 	bl	8000104 <__udivsi3>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	623b      	str	r3, [r7, #32]

    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f7ff ff2a 	bl	8006b2c <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if (LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0018      	movs	r0, r3
 8006cde:	f7ff fef8 	bl	8006ad2 <LL_ADC_GetClock>
 8006ce2:	1e03      	subs	r3, r0, #0
 8006ce4:	d11b      	bne.n	8006d1e <HAL_ADCEx_Calibration_Start+0x136>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8006ddc <HAL_ADCEx_Calibration_Start+0x1f4>)
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff fee5 	bl	8006ab8 <LL_ADC_GetCommonClock>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	617b      	str	r3, [r7, #20]

      if (adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	23e0      	movs	r3, #224	@ 0xe0
 8006cf6:	035b      	lsls	r3, r3, #13
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d310      	bcc.n	8006d1e <HAL_ADCEx_Calibration_Start+0x136>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1UL << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3UL));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	0c9b      	lsrs	r3, r3, #18
 8006d00:	3b03      	subs	r3, #3
 8006d02:	2201      	movs	r2, #1
 8006d04:	409a      	lsls	r2, r3
 8006d06:	0013      	movs	r3, r2
 8006d08:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1UL;
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	60bb      	str	r3, [r7, #8]

        while (delay_cpu_cycles != 0UL)
 8006d10:	e002      	b.n	8006d18 <HAL_ADCEx_Calibration_Start+0x130>
        {
          delay_cpu_cycles--;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	60bb      	str	r3, [r7, #8]
        while (delay_cpu_cycles != 0UL)
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f9      	bne.n	8006d12 <HAL_ADCEx_Calibration_Start+0x12a>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	0011      	movs	r1, r2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f7ff fedf 	bl	8006aea <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7ff ff0d 	bl	8006b50 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006d36:	f7fe fe37 	bl	80059a8 <HAL_GetTick>
 8006d3a:	0003      	movs	r3, r0
 8006d3c:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d3e:	e01b      	b.n	8006d78 <HAL_ADCEx_Calibration_Start+0x190>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006d40:	f7fe fe32 	bl	80059a8 <HAL_GetTick>
 8006d44:	0002      	movs	r2, r0
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d914      	bls.n	8006d78 <HAL_ADCEx_Calibration_Start+0x190>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0018      	movs	r0, r3
 8006d54:	f7ff ff0e 	bl	8006b74 <LL_ADC_IsEnabled>
 8006d58:	1e03      	subs	r3, r0, #0
 8006d5a:	d00d      	beq.n	8006d78 <HAL_ADCEx_Calibration_Start+0x190>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d60:	2210      	movs	r2, #16
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e024      	b.n	8006dc2 <HAL_ADCEx_Calibration_Start+0x1da>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	0018      	movs	r0, r3
 8006d7e:	f7ff fef9 	bl	8006b74 <LL_ADC_IsEnabled>
 8006d82:	1e03      	subs	r3, r0, #0
 8006d84:	d1dc      	bne.n	8006d40 <HAL_ADCEx_Calibration_Start+0x158>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68d9      	ldr	r1, [r3, #12]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4393      	bics	r3, r2
 8006d9e:	2201      	movs	r2, #1
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8006da6:	e005      	b.n	8006db4 <HAL_ADCEx_Calibration_Start+0x1cc>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dac:	2210      	movs	r2, #16
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2254      	movs	r2, #84	@ 0x54
 8006db8:	2100      	movs	r1, #0
 8006dba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8006dbc:	231f      	movs	r3, #31
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	781b      	ldrb	r3, [r3, #0]
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b00b      	add	sp, #44	@ 0x2c
 8006dc8:	bd90      	pop	{r4, r7, pc}
 8006dca:	46c0      	nop			@ (mov r8, r8)
 8006dcc:	fffffefd 	.word	0xfffffefd
 8006dd0:	00008003 	.word	0x00008003
 8006dd4:	ffff7ffc 	.word	0xffff7ffc
 8006dd8:	0002f1ff 	.word	0x0002f1ff
 8006ddc:	40012708 	.word	0x40012708

08006de0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006de8:	46c0      	nop			@ (mov r8, r8)
 8006dea:	46bd      	mov	sp, r7
 8006dec:	b002      	add	sp, #8
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006df8:	46c0      	nop			@ (mov r8, r8)
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b002      	add	sp, #8
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e08:	46c0      	nop			@ (mov r8, r8)
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	b002      	add	sp, #8
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	0002      	movs	r2, r0
 8006e18:	1dfb      	adds	r3, r7, #7
 8006e1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e1c:	1dfb      	adds	r3, r7, #7
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e22:	d809      	bhi.n	8006e38 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e24:	1dfb      	adds	r3, r7, #7
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	001a      	movs	r2, r3
 8006e2a:	231f      	movs	r3, #31
 8006e2c:	401a      	ands	r2, r3
 8006e2e:	4b04      	ldr	r3, [pc, #16]	@ (8006e40 <__NVIC_EnableIRQ+0x30>)
 8006e30:	2101      	movs	r1, #1
 8006e32:	4091      	lsls	r1, r2
 8006e34:	000a      	movs	r2, r1
 8006e36:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006e38:	46c0      	nop			@ (mov r8, r8)
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	b002      	add	sp, #8
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	e000e100 	.word	0xe000e100

08006e44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	1dfb      	adds	r3, r7, #7
 8006e4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e50:	1dfb      	adds	r3, r7, #7
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e56:	d810      	bhi.n	8006e7a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e58:	1dfb      	adds	r3, r7, #7
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	001a      	movs	r2, r3
 8006e5e:	231f      	movs	r3, #31
 8006e60:	4013      	ands	r3, r2
 8006e62:	4908      	ldr	r1, [pc, #32]	@ (8006e84 <__NVIC_DisableIRQ+0x40>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	409a      	lsls	r2, r3
 8006e68:	0013      	movs	r3, r2
 8006e6a:	2280      	movs	r2, #128	@ 0x80
 8006e6c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006e6e:	f3bf 8f4f 	dsb	sy
}
 8006e72:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8006e74:	f3bf 8f6f 	isb	sy
}
 8006e78:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8006e7a:	46c0      	nop			@ (mov r8, r8)
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	b002      	add	sp, #8
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	46c0      	nop			@ (mov r8, r8)
 8006e84:	e000e100 	.word	0xe000e100

08006e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006e88:	b590      	push	{r4, r7, lr}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	0002      	movs	r2, r0
 8006e90:	6039      	str	r1, [r7, #0]
 8006e92:	1dfb      	adds	r3, r7, #7
 8006e94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006e96:	1dfb      	adds	r3, r7, #7
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e9c:	d828      	bhi.n	8006ef0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006e9e:	4a2f      	ldr	r2, [pc, #188]	@ (8006f5c <__NVIC_SetPriority+0xd4>)
 8006ea0:	1dfb      	adds	r3, r7, #7
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	b25b      	sxtb	r3, r3
 8006ea6:	089b      	lsrs	r3, r3, #2
 8006ea8:	33c0      	adds	r3, #192	@ 0xc0
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	589b      	ldr	r3, [r3, r2]
 8006eae:	1dfa      	adds	r2, r7, #7
 8006eb0:	7812      	ldrb	r2, [r2, #0]
 8006eb2:	0011      	movs	r1, r2
 8006eb4:	2203      	movs	r2, #3
 8006eb6:	400a      	ands	r2, r1
 8006eb8:	00d2      	lsls	r2, r2, #3
 8006eba:	21ff      	movs	r1, #255	@ 0xff
 8006ebc:	4091      	lsls	r1, r2
 8006ebe:	000a      	movs	r2, r1
 8006ec0:	43d2      	mvns	r2, r2
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	019b      	lsls	r3, r3, #6
 8006eca:	22ff      	movs	r2, #255	@ 0xff
 8006ecc:	401a      	ands	r2, r3
 8006ece:	1dfb      	adds	r3, r7, #7
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	4003      	ands	r3, r0
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006edc:	481f      	ldr	r0, [pc, #124]	@ (8006f5c <__NVIC_SetPriority+0xd4>)
 8006ede:	1dfb      	adds	r3, r7, #7
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	b25b      	sxtb	r3, r3
 8006ee4:	089b      	lsrs	r3, r3, #2
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	33c0      	adds	r3, #192	@ 0xc0
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006eee:	e031      	b.n	8006f54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8006f60 <__NVIC_SetPriority+0xd8>)
 8006ef2:	1dfb      	adds	r3, r7, #7
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	0019      	movs	r1, r3
 8006ef8:	230f      	movs	r3, #15
 8006efa:	400b      	ands	r3, r1
 8006efc:	3b08      	subs	r3, #8
 8006efe:	089b      	lsrs	r3, r3, #2
 8006f00:	3306      	adds	r3, #6
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	18d3      	adds	r3, r2, r3
 8006f06:	3304      	adds	r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	1dfa      	adds	r2, r7, #7
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	2203      	movs	r2, #3
 8006f12:	400a      	ands	r2, r1
 8006f14:	00d2      	lsls	r2, r2, #3
 8006f16:	21ff      	movs	r1, #255	@ 0xff
 8006f18:	4091      	lsls	r1, r2
 8006f1a:	000a      	movs	r2, r1
 8006f1c:	43d2      	mvns	r2, r2
 8006f1e:	401a      	ands	r2, r3
 8006f20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	019b      	lsls	r3, r3, #6
 8006f26:	22ff      	movs	r2, #255	@ 0xff
 8006f28:	401a      	ands	r2, r3
 8006f2a:	1dfb      	adds	r3, r7, #7
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	0018      	movs	r0, r3
 8006f30:	2303      	movs	r3, #3
 8006f32:	4003      	ands	r3, r0
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006f38:	4809      	ldr	r0, [pc, #36]	@ (8006f60 <__NVIC_SetPriority+0xd8>)
 8006f3a:	1dfb      	adds	r3, r7, #7
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	001c      	movs	r4, r3
 8006f40:	230f      	movs	r3, #15
 8006f42:	4023      	ands	r3, r4
 8006f44:	3b08      	subs	r3, #8
 8006f46:	089b      	lsrs	r3, r3, #2
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	3306      	adds	r3, #6
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	18c3      	adds	r3, r0, r3
 8006f50:	3304      	adds	r3, #4
 8006f52:	601a      	str	r2, [r3, #0]
}
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b003      	add	sp, #12
 8006f5a:	bd90      	pop	{r4, r7, pc}
 8006f5c:	e000e100 	.word	0xe000e100
 8006f60:	e000ed00 	.word	0xe000ed00

08006f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	2380      	movs	r3, #128	@ 0x80
 8006f72:	045b      	lsls	r3, r3, #17
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d301      	bcc.n	8006f7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e010      	b.n	8006f9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa8 <SysTick_Config+0x44>)
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	3a01      	subs	r2, #1
 8006f82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006f84:	2301      	movs	r3, #1
 8006f86:	425b      	negs	r3, r3
 8006f88:	2103      	movs	r1, #3
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	f7ff ff7c 	bl	8006e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006f90:	4b05      	ldr	r3, [pc, #20]	@ (8006fa8 <SysTick_Config+0x44>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006f96:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <SysTick_Config+0x44>)
 8006f98:	2207      	movs	r2, #7
 8006f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	0018      	movs	r0, r3
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	46c0      	nop			@ (mov r8, r8)
 8006fa8:	e000e010 	.word	0xe000e010

08006fac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	210f      	movs	r1, #15
 8006fb8:	187b      	adds	r3, r7, r1
 8006fba:	1c02      	adds	r2, r0, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	187b      	adds	r3, r7, r1
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	b25b      	sxtb	r3, r3
 8006fc6:	0011      	movs	r1, r2
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7ff ff5d 	bl	8006e88 <__NVIC_SetPriority>
}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	b004      	add	sp, #16
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b082      	sub	sp, #8
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	0002      	movs	r2, r0
 8006fde:	1dfb      	adds	r3, r7, #7
 8006fe0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b25b      	sxtb	r3, r3
 8006fe8:	0018      	movs	r0, r3
 8006fea:	f7ff ff11 	bl	8006e10 <__NVIC_EnableIRQ>
}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	b002      	add	sp, #8
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b082      	sub	sp, #8
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	0002      	movs	r2, r0
 8006ffe:	1dfb      	adds	r3, r7, #7
 8007000:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007002:	1dfb      	adds	r3, r7, #7
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	0018      	movs	r0, r3
 800700a:	f7ff ff1b 	bl	8006e44 <__NVIC_DisableIRQ>
}
 800700e:	46c0      	nop			@ (mov r8, r8)
 8007010:	46bd      	mov	sp, r7
 8007012:	b002      	add	sp, #8
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b082      	sub	sp, #8
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	0018      	movs	r0, r3
 8007022:	f7ff ff9f 	bl	8006f64 <SysTick_Config>
 8007026:	0003      	movs	r3, r0
}
 8007028:	0018      	movs	r0, r3
 800702a:	46bd      	mov	sp, r7
 800702c:	b002      	add	sp, #8
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e077      	b.n	8007132 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a3d      	ldr	r2, [pc, #244]	@ (800713c <HAL_DMA_Init+0x10c>)
 8007048:	4694      	mov	ip, r2
 800704a:	4463      	add	r3, ip
 800704c:	2114      	movs	r1, #20
 800704e:	0018      	movs	r0, r3
 8007050:	f7f9 f858 	bl	8000104 <__udivsi3>
 8007054:	0003      	movs	r3, r0
 8007056:	009a      	lsls	r2, r3, #2
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2225      	movs	r2, #37	@ 0x25
 8007060:	2102      	movs	r1, #2
 8007062:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4934      	ldr	r1, [pc, #208]	@ (8007140 <HAL_DMA_Init+0x110>)
 8007070:	400a      	ands	r2, r1
 8007072:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	431a      	orrs	r2, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	431a      	orrs	r2, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	0018      	movs	r0, r3
 80070ae:	f000 fa8d 	bl	80075cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	2380      	movs	r3, #128	@ 0x80
 80070b8:	01db      	lsls	r3, r3, #7
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d102      	bne.n	80070c4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	213f      	movs	r1, #63	@ 0x3f
 80070ce:	400a      	ands	r2, r1
 80070d0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80070da:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d011      	beq.n	8007108 <HAL_DMA_Init+0xd8>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b04      	cmp	r3, #4
 80070ea:	d80d      	bhi.n	8007108 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	0018      	movs	r0, r3
 80070f0:	f000 fa98 	bl	8007624 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007104:	605a      	str	r2, [r3, #4]
 8007106:	e008      	b.n	800711a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2225      	movs	r2, #37	@ 0x25
 8007124:	2101      	movs	r1, #1
 8007126:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2224      	movs	r2, #36	@ 0x24
 800712c:	2100      	movs	r1, #0
 800712e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	0018      	movs	r0, r3
 8007134:	46bd      	mov	sp, r7
 8007136:	b002      	add	sp, #8
 8007138:	bd80      	pop	{r7, pc}
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	bffdfff8 	.word	0xbffdfff8
 8007140:	ffff800f 	.word	0xffff800f

08007144 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007152:	2317      	movs	r3, #23
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	2200      	movs	r2, #0
 8007158:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2224      	movs	r2, #36	@ 0x24
 800715e:	5c9b      	ldrb	r3, [r3, r2]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_DMA_Start_IT+0x24>
 8007164:	2302      	movs	r3, #2
 8007166:	e06f      	b.n	8007248 <HAL_DMA_Start_IT+0x104>
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2224      	movs	r2, #36	@ 0x24
 800716c:	2101      	movs	r1, #1
 800716e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2225      	movs	r2, #37	@ 0x25
 8007174:	5c9b      	ldrb	r3, [r3, r2]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b01      	cmp	r3, #1
 800717a:	d157      	bne.n	800722c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2225      	movs	r2, #37	@ 0x25
 8007180:	2102      	movs	r1, #2
 8007182:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2101      	movs	r1, #1
 8007196:	438a      	bics	r2, r1
 8007198:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 f9d3 	bl	800754c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	210e      	movs	r1, #14
 80071ba:	430a      	orrs	r2, r1
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	e00f      	b.n	80071e0 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2104      	movs	r1, #4
 80071cc:	438a      	bics	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	210a      	movs	r1, #10
 80071dc:	430a      	orrs	r2, r1
 80071de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	2380      	movs	r3, #128	@ 0x80
 80071e8:	025b      	lsls	r3, r3, #9
 80071ea:	4013      	ands	r3, r2
 80071ec:	d008      	beq.n	8007200 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f8:	2180      	movs	r1, #128	@ 0x80
 80071fa:	0049      	lsls	r1, r1, #1
 80071fc:	430a      	orrs	r2, r1
 80071fe:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007204:	2b00      	cmp	r3, #0
 8007206:	d008      	beq.n	800721a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007212:	2180      	movs	r1, #128	@ 0x80
 8007214:	0049      	lsls	r1, r1, #1
 8007216:	430a      	orrs	r2, r1
 8007218:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2101      	movs	r1, #1
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]
 800722a:	e00a      	b.n	8007242 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2280      	movs	r2, #128	@ 0x80
 8007230:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2224      	movs	r2, #36	@ 0x24
 8007236:	2100      	movs	r1, #0
 8007238:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800723a:	2317      	movs	r3, #23
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	2201      	movs	r2, #1
 8007240:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007242:	2317      	movs	r3, #23
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	781b      	ldrb	r3, [r3, #0]
}
 8007248:	0018      	movs	r0, r3
 800724a:	46bd      	mov	sp, r7
 800724c:	b006      	add	sp, #24
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e050      	b.n	8007304 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2225      	movs	r2, #37	@ 0x25
 8007266:	5c9b      	ldrb	r3, [r3, r2]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b02      	cmp	r3, #2
 800726c:	d008      	beq.n	8007280 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2204      	movs	r2, #4
 8007272:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2224      	movs	r2, #36	@ 0x24
 8007278:	2100      	movs	r1, #0
 800727a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e041      	b.n	8007304 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	210e      	movs	r1, #14
 800728c:	438a      	bics	r2, r1
 800728e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800729a:	491c      	ldr	r1, [pc, #112]	@ (800730c <HAL_DMA_Abort+0xbc>)
 800729c:	400a      	ands	r2, r1
 800729e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2101      	movs	r1, #1
 80072ac:	438a      	bics	r2, r1
 80072ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80072b0:	4b17      	ldr	r3, [pc, #92]	@ (8007310 <HAL_DMA_Abort+0xc0>)
 80072b2:	6859      	ldr	r1, [r3, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b8:	221c      	movs	r2, #28
 80072ba:	4013      	ands	r3, r2
 80072bc:	2201      	movs	r2, #1
 80072be:	409a      	lsls	r2, r3
 80072c0:	4b13      	ldr	r3, [pc, #76]	@ (8007310 <HAL_DMA_Abort+0xc0>)
 80072c2:	430a      	orrs	r2, r1
 80072c4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80072ce:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00c      	beq.n	80072f2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e2:	490a      	ldr	r1, [pc, #40]	@ (800730c <HAL_DMA_Abort+0xbc>)
 80072e4:	400a      	ands	r2, r1
 80072e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80072f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2225      	movs	r2, #37	@ 0x25
 80072f6:	2101      	movs	r1, #1
 80072f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2224      	movs	r2, #36	@ 0x24
 80072fe:	2100      	movs	r1, #0
 8007300:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	0018      	movs	r0, r3
 8007306:	46bd      	mov	sp, r7
 8007308:	b002      	add	sp, #8
 800730a:	bd80      	pop	{r7, pc}
 800730c:	fffffeff 	.word	0xfffffeff
 8007310:	40020000 	.word	0x40020000

08007314 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800731c:	210f      	movs	r1, #15
 800731e:	187b      	adds	r3, r7, r1
 8007320:	2200      	movs	r2, #0
 8007322:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2225      	movs	r2, #37	@ 0x25
 8007328:	5c9b      	ldrb	r3, [r3, r2]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b02      	cmp	r3, #2
 800732e:	d006      	beq.n	800733e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2204      	movs	r2, #4
 8007334:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007336:	187b      	adds	r3, r7, r1
 8007338:	2201      	movs	r2, #1
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e049      	b.n	80073d2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	210e      	movs	r1, #14
 800734a:	438a      	bics	r2, r1
 800734c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2101      	movs	r1, #1
 800735a:	438a      	bics	r2, r1
 800735c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007368:	491d      	ldr	r1, [pc, #116]	@ (80073e0 <HAL_DMA_Abort_IT+0xcc>)
 800736a:	400a      	ands	r2, r1
 800736c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800736e:	4b1d      	ldr	r3, [pc, #116]	@ (80073e4 <HAL_DMA_Abort_IT+0xd0>)
 8007370:	6859      	ldr	r1, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	221c      	movs	r2, #28
 8007378:	4013      	ands	r3, r2
 800737a:	2201      	movs	r2, #1
 800737c:	409a      	lsls	r2, r3
 800737e:	4b19      	ldr	r3, [pc, #100]	@ (80073e4 <HAL_DMA_Abort_IT+0xd0>)
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800738c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00c      	beq.n	80073b0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a0:	490f      	ldr	r1, [pc, #60]	@ (80073e0 <HAL_DMA_Abort_IT+0xcc>)
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80073ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2225      	movs	r2, #37	@ 0x25
 80073b4:	2101      	movs	r1, #1
 80073b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2224      	movs	r2, #36	@ 0x24
 80073bc:	2100      	movs	r1, #0
 80073be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	0010      	movs	r0, r2
 80073d0:	4798      	blx	r3
    }
  }
  return status;
 80073d2:	230f      	movs	r3, #15
 80073d4:	18fb      	adds	r3, r7, r3
 80073d6:	781b      	ldrb	r3, [r3, #0]
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b004      	add	sp, #16
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	fffffeff 	.word	0xfffffeff
 80073e4:	40020000 	.word	0x40020000

080073e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80073f0:	4b55      	ldr	r3, [pc, #340]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007402:	221c      	movs	r2, #28
 8007404:	4013      	ands	r3, r2
 8007406:	2204      	movs	r2, #4
 8007408:	409a      	lsls	r2, r3
 800740a:	0013      	movs	r3, r2
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4013      	ands	r3, r2
 8007410:	d027      	beq.n	8007462 <HAL_DMA_IRQHandler+0x7a>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2204      	movs	r2, #4
 8007416:	4013      	ands	r3, r2
 8007418:	d023      	beq.n	8007462 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2220      	movs	r2, #32
 8007422:	4013      	ands	r3, r2
 8007424:	d107      	bne.n	8007436 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2104      	movs	r1, #4
 8007432:	438a      	bics	r2, r1
 8007434:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8007436:	4b44      	ldr	r3, [pc, #272]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 8007438:	6859      	ldr	r1, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	221c      	movs	r2, #28
 8007440:	4013      	ands	r3, r2
 8007442:	2204      	movs	r2, #4
 8007444:	409a      	lsls	r2, r3
 8007446:	4b40      	ldr	r3, [pc, #256]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 8007448:	430a      	orrs	r2, r1
 800744a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007450:	2b00      	cmp	r3, #0
 8007452:	d100      	bne.n	8007456 <HAL_DMA_IRQHandler+0x6e>
 8007454:	e073      	b.n	800753e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	0010      	movs	r0, r2
 800745e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8007460:	e06d      	b.n	800753e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007466:	221c      	movs	r2, #28
 8007468:	4013      	ands	r3, r2
 800746a:	2202      	movs	r2, #2
 800746c:	409a      	lsls	r2, r3
 800746e:	0013      	movs	r3, r2
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4013      	ands	r3, r2
 8007474:	d02e      	beq.n	80074d4 <HAL_DMA_IRQHandler+0xec>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2202      	movs	r2, #2
 800747a:	4013      	ands	r3, r2
 800747c:	d02a      	beq.n	80074d4 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2220      	movs	r2, #32
 8007486:	4013      	ands	r3, r2
 8007488:	d10b      	bne.n	80074a2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	210a      	movs	r1, #10
 8007496:	438a      	bics	r2, r1
 8007498:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2225      	movs	r2, #37	@ 0x25
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80074a2:	4b29      	ldr	r3, [pc, #164]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074aa:	221c      	movs	r2, #28
 80074ac:	4013      	ands	r3, r2
 80074ae:	2202      	movs	r2, #2
 80074b0:	409a      	lsls	r2, r3
 80074b2:	4b25      	ldr	r3, [pc, #148]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2224      	movs	r2, #36	@ 0x24
 80074bc:	2100      	movs	r1, #0
 80074be:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d03a      	beq.n	800753e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	0010      	movs	r0, r2
 80074d0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80074d2:	e034      	b.n	800753e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	221c      	movs	r2, #28
 80074da:	4013      	ands	r3, r2
 80074dc:	2208      	movs	r2, #8
 80074de:	409a      	lsls	r2, r3
 80074e0:	0013      	movs	r3, r2
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4013      	ands	r3, r2
 80074e6:	d02b      	beq.n	8007540 <HAL_DMA_IRQHandler+0x158>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2208      	movs	r2, #8
 80074ec:	4013      	ands	r3, r2
 80074ee:	d027      	beq.n	8007540 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	210e      	movs	r1, #14
 80074fc:	438a      	bics	r2, r1
 80074fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007500:	4b11      	ldr	r3, [pc, #68]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 8007502:	6859      	ldr	r1, [r3, #4]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007508:	221c      	movs	r2, #28
 800750a:	4013      	ands	r3, r2
 800750c:	2201      	movs	r2, #1
 800750e:	409a      	lsls	r2, r3
 8007510:	4b0d      	ldr	r3, [pc, #52]	@ (8007548 <HAL_DMA_IRQHandler+0x160>)
 8007512:	430a      	orrs	r2, r1
 8007514:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2225      	movs	r2, #37	@ 0x25
 8007520:	2101      	movs	r1, #1
 8007522:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2224      	movs	r2, #36	@ 0x24
 8007528:	2100      	movs	r1, #0
 800752a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	0010      	movs	r0, r2
 800753c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800753e:	46c0      	nop			@ (mov r8, r8)
 8007540:	46c0      	nop			@ (mov r8, r8)
}
 8007542:	46bd      	mov	sp, r7
 8007544:	b004      	add	sp, #16
 8007546:	bd80      	pop	{r7, pc}
 8007548:	40020000 	.word	0x40020000

0800754c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007562:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8007574:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8007576:	4b14      	ldr	r3, [pc, #80]	@ (80075c8 <DMA_SetConfig+0x7c>)
 8007578:	6859      	ldr	r1, [r3, #4]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757e:	221c      	movs	r2, #28
 8007580:	4013      	ands	r3, r2
 8007582:	2201      	movs	r2, #1
 8007584:	409a      	lsls	r2, r3
 8007586:	4b10      	ldr	r3, [pc, #64]	@ (80075c8 <DMA_SetConfig+0x7c>)
 8007588:	430a      	orrs	r2, r1
 800758a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	2b10      	cmp	r3, #16
 800759a:	d108      	bne.n	80075ae <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80075ac:	e007      	b.n	80075be <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
}
 80075be:	46c0      	nop			@ (mov r8, r8)
 80075c0:	46bd      	mov	sp, r7
 80075c2:	b004      	add	sp, #16
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	46c0      	nop			@ (mov r8, r8)
 80075c8:	40020000 	.word	0x40020000

080075cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d8:	089b      	lsrs	r3, r3, #2
 80075da:	4a10      	ldr	r2, [pc, #64]	@ (800761c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80075dc:	4694      	mov	ip, r2
 80075de:	4463      	add	r3, ip
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	001a      	movs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	001a      	movs	r2, r3
 80075ee:	23ff      	movs	r3, #255	@ 0xff
 80075f0:	4013      	ands	r3, r2
 80075f2:	3b08      	subs	r3, #8
 80075f4:	2114      	movs	r1, #20
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7f8 fd84 	bl	8000104 <__udivsi3>
 80075fc:	0003      	movs	r3, r0
 80075fe:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a07      	ldr	r2, [pc, #28]	@ (8007620 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8007604:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	221f      	movs	r2, #31
 800760a:	4013      	ands	r3, r2
 800760c:	2201      	movs	r2, #1
 800760e:	409a      	lsls	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	b004      	add	sp, #16
 800761a:	bd80      	pop	{r7, pc}
 800761c:	10008200 	.word	0x10008200
 8007620:	40020880 	.word	0x40020880

08007624 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	223f      	movs	r2, #63	@ 0x3f
 8007632:	4013      	ands	r3, r2
 8007634:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	4a0a      	ldr	r2, [pc, #40]	@ (8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800763a:	4694      	mov	ip, r2
 800763c:	4463      	add	r3, ip
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	001a      	movs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a07      	ldr	r2, [pc, #28]	@ (8007668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800764a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	3b01      	subs	r3, #1
 8007650:	2203      	movs	r2, #3
 8007652:	4013      	ands	r3, r2
 8007654:	2201      	movs	r2, #1
 8007656:	409a      	lsls	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800765c:	46c0      	nop			@ (mov r8, r8)
 800765e:	46bd      	mov	sp, r7
 8007660:	b004      	add	sp, #16
 8007662:	bd80      	pop	{r7, pc}
 8007664:	1000823f 	.word	0x1000823f
 8007668:	40020940 	.word	0x40020940

0800766c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007676:	2300      	movs	r3, #0
 8007678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800767a:	e147      	b.n	800790c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2101      	movs	r1, #1
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	4091      	lsls	r1, r2
 8007686:	000a      	movs	r2, r1
 8007688:	4013      	ands	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d100      	bne.n	8007694 <HAL_GPIO_Init+0x28>
 8007692:	e138      	b.n	8007906 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2203      	movs	r2, #3
 800769a:	4013      	ands	r3, r2
 800769c:	2b01      	cmp	r3, #1
 800769e:	d005      	beq.n	80076ac <HAL_GPIO_Init+0x40>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2203      	movs	r2, #3
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	d130      	bne.n	800770e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	2203      	movs	r2, #3
 80076b8:	409a      	lsls	r2, r3
 80076ba:	0013      	movs	r3, r2
 80076bc:	43da      	mvns	r2, r3
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4013      	ands	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	68da      	ldr	r2, [r3, #12]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	409a      	lsls	r2, r3
 80076ce:	0013      	movs	r3, r2
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80076e2:	2201      	movs	r2, #1
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	409a      	lsls	r2, r3
 80076e8:	0013      	movs	r3, r2
 80076ea:	43da      	mvns	r2, r3
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	4013      	ands	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	091b      	lsrs	r3, r3, #4
 80076f8:	2201      	movs	r2, #1
 80076fa:	401a      	ands	r2, r3
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	409a      	lsls	r2, r3
 8007700:	0013      	movs	r3, r2
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	2203      	movs	r2, #3
 8007714:	4013      	ands	r3, r2
 8007716:	2b03      	cmp	r3, #3
 8007718:	d017      	beq.n	800774a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	2203      	movs	r2, #3
 8007726:	409a      	lsls	r2, r3
 8007728:	0013      	movs	r3, r2
 800772a:	43da      	mvns	r2, r3
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	4013      	ands	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	689a      	ldr	r2, [r3, #8]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	005b      	lsls	r3, r3, #1
 800773a:	409a      	lsls	r2, r3
 800773c:	0013      	movs	r3, r2
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	693a      	ldr	r2, [r7, #16]
 8007748:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2203      	movs	r2, #3
 8007750:	4013      	ands	r3, r2
 8007752:	2b02      	cmp	r3, #2
 8007754:	d123      	bne.n	800779e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	08da      	lsrs	r2, r3, #3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	3208      	adds	r2, #8
 800775e:	0092      	lsls	r2, r2, #2
 8007760:	58d3      	ldr	r3, [r2, r3]
 8007762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2207      	movs	r2, #7
 8007768:	4013      	ands	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	220f      	movs	r2, #15
 800776e:	409a      	lsls	r2, r3
 8007770:	0013      	movs	r3, r2
 8007772:	43da      	mvns	r2, r3
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	4013      	ands	r3, r2
 8007778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	691a      	ldr	r2, [r3, #16]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2107      	movs	r1, #7
 8007782:	400b      	ands	r3, r1
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	409a      	lsls	r2, r3
 8007788:	0013      	movs	r3, r2
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	08da      	lsrs	r2, r3, #3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3208      	adds	r2, #8
 8007798:	0092      	lsls	r2, r2, #2
 800779a:	6939      	ldr	r1, [r7, #16]
 800779c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	005b      	lsls	r3, r3, #1
 80077a8:	2203      	movs	r2, #3
 80077aa:	409a      	lsls	r2, r3
 80077ac:	0013      	movs	r3, r2
 80077ae:	43da      	mvns	r2, r3
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	4013      	ands	r3, r2
 80077b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2203      	movs	r2, #3
 80077bc:	401a      	ands	r2, r3
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	005b      	lsls	r3, r3, #1
 80077c2:	409a      	lsls	r2, r3
 80077c4:	0013      	movs	r3, r2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	693a      	ldr	r2, [r7, #16]
 80077d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	23c0      	movs	r3, #192	@ 0xc0
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	4013      	ands	r3, r2
 80077dc:	d100      	bne.n	80077e0 <HAL_GPIO_Init+0x174>
 80077de:	e092      	b.n	8007906 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80077e0:	4a50      	ldr	r2, [pc, #320]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	089b      	lsrs	r3, r3, #2
 80077e6:	3318      	adds	r3, #24
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	589b      	ldr	r3, [r3, r2]
 80077ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2203      	movs	r2, #3
 80077f2:	4013      	ands	r3, r2
 80077f4:	00db      	lsls	r3, r3, #3
 80077f6:	220f      	movs	r2, #15
 80077f8:	409a      	lsls	r2, r3
 80077fa:	0013      	movs	r3, r2
 80077fc:	43da      	mvns	r2, r3
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4013      	ands	r3, r2
 8007802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	23a0      	movs	r3, #160	@ 0xa0
 8007808:	05db      	lsls	r3, r3, #23
 800780a:	429a      	cmp	r2, r3
 800780c:	d013      	beq.n	8007836 <HAL_GPIO_Init+0x1ca>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a45      	ldr	r2, [pc, #276]	@ (8007928 <HAL_GPIO_Init+0x2bc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00d      	beq.n	8007832 <HAL_GPIO_Init+0x1c6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a44      	ldr	r2, [pc, #272]	@ (800792c <HAL_GPIO_Init+0x2c0>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d007      	beq.n	800782e <HAL_GPIO_Init+0x1c2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a43      	ldr	r2, [pc, #268]	@ (8007930 <HAL_GPIO_Init+0x2c4>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d101      	bne.n	800782a <HAL_GPIO_Init+0x1be>
 8007826:	2303      	movs	r3, #3
 8007828:	e006      	b.n	8007838 <HAL_GPIO_Init+0x1cc>
 800782a:	2305      	movs	r3, #5
 800782c:	e004      	b.n	8007838 <HAL_GPIO_Init+0x1cc>
 800782e:	2302      	movs	r3, #2
 8007830:	e002      	b.n	8007838 <HAL_GPIO_Init+0x1cc>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <HAL_GPIO_Init+0x1cc>
 8007836:	2300      	movs	r3, #0
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	2103      	movs	r1, #3
 800783c:	400a      	ands	r2, r1
 800783e:	00d2      	lsls	r2, r2, #3
 8007840:	4093      	lsls	r3, r2
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007848:	4936      	ldr	r1, [pc, #216]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	089b      	lsrs	r3, r3, #2
 800784e:	3318      	adds	r3, #24
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007856:	4b33      	ldr	r3, [pc, #204]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	43da      	mvns	r2, r3
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	4013      	ands	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685a      	ldr	r2, [r3, #4]
 800786a:	2380      	movs	r3, #128	@ 0x80
 800786c:	035b      	lsls	r3, r3, #13
 800786e:	4013      	ands	r3, r2
 8007870:	d003      	beq.n	800787a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800787a:	4b2a      	ldr	r3, [pc, #168]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007880:	4b28      	ldr	r3, [pc, #160]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	43da      	mvns	r2, r3
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4013      	ands	r3, r2
 800788e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	685a      	ldr	r2, [r3, #4]
 8007894:	2380      	movs	r3, #128	@ 0x80
 8007896:	039b      	lsls	r3, r3, #14
 8007898:	4013      	ands	r3, r2
 800789a:	d003      	beq.n	80078a4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80078a4:	4b1f      	ldr	r3, [pc, #124]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 80078a6:	693a      	ldr	r2, [r7, #16]
 80078a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80078aa:	4a1e      	ldr	r2, [pc, #120]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 80078ac:	2384      	movs	r3, #132	@ 0x84
 80078ae:	58d3      	ldr	r3, [r2, r3]
 80078b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	43da      	mvns	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	2380      	movs	r3, #128	@ 0x80
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	4013      	ands	r3, r2
 80078c6:	d003      	beq.n	80078d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80078d0:	4914      	ldr	r1, [pc, #80]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 80078d2:	2284      	movs	r2, #132	@ 0x84
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80078d8:	4a12      	ldr	r2, [pc, #72]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 80078da:	2380      	movs	r3, #128	@ 0x80
 80078dc:	58d3      	ldr	r3, [r2, r3]
 80078de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	43da      	mvns	r2, r3
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4013      	ands	r3, r2
 80078e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	2380      	movs	r3, #128	@ 0x80
 80078f0:	025b      	lsls	r3, r3, #9
 80078f2:	4013      	ands	r3, r2
 80078f4:	d003      	beq.n	80078fe <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80078f6:	693a      	ldr	r2, [r7, #16]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80078fe:	4909      	ldr	r1, [pc, #36]	@ (8007924 <HAL_GPIO_Init+0x2b8>)
 8007900:	2280      	movs	r2, #128	@ 0x80
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	3301      	adds	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	40da      	lsrs	r2, r3
 8007914:	1e13      	subs	r3, r2, #0
 8007916:	d000      	beq.n	800791a <HAL_GPIO_Init+0x2ae>
 8007918:	e6b0      	b.n	800767c <HAL_GPIO_Init+0x10>
  }
}
 800791a:	46c0      	nop			@ (mov r8, r8)
 800791c:	46c0      	nop			@ (mov r8, r8)
 800791e:	46bd      	mov	sp, r7
 8007920:	b006      	add	sp, #24
 8007922:	bd80      	pop	{r7, pc}
 8007924:	40021800 	.word	0x40021800
 8007928:	50000400 	.word	0x50000400
 800792c:	50000800 	.word	0x50000800
 8007930:	50000c00 	.word	0x50000c00

08007934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	000a      	movs	r2, r1
 800793e:	1cbb      	adds	r3, r7, #2
 8007940:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	1cba      	adds	r2, r7, #2
 8007948:	8812      	ldrh	r2, [r2, #0]
 800794a:	4013      	ands	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800794e:	230f      	movs	r3, #15
 8007950:	18fb      	adds	r3, r7, r3
 8007952:	2201      	movs	r2, #1
 8007954:	701a      	strb	r2, [r3, #0]
 8007956:	e003      	b.n	8007960 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007958:	230f      	movs	r3, #15
 800795a:	18fb      	adds	r3, r7, r3
 800795c:	2200      	movs	r2, #0
 800795e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007960:	230f      	movs	r3, #15
 8007962:	18fb      	adds	r3, r7, r3
 8007964:	781b      	ldrb	r3, [r3, #0]
}
 8007966:	0018      	movs	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	b004      	add	sp, #16
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b082      	sub	sp, #8
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	0008      	movs	r0, r1
 8007978:	0011      	movs	r1, r2
 800797a:	1cbb      	adds	r3, r7, #2
 800797c:	1c02      	adds	r2, r0, #0
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	1c7b      	adds	r3, r7, #1
 8007982:	1c0a      	adds	r2, r1, #0
 8007984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007986:	1c7b      	adds	r3, r7, #1
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d004      	beq.n	8007998 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800798e:	1cbb      	adds	r3, r7, #2
 8007990:	881a      	ldrh	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007996:	e003      	b.n	80079a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007998:	1cbb      	adds	r3, r7, #2
 800799a:	881a      	ldrh	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80079a0:	46c0      	nop			@ (mov r8, r8)
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	0002      	movs	r2, r0
 80079b0:	1dbb      	adds	r3, r7, #6
 80079b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80079b4:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	1dba      	adds	r2, r7, #6
 80079ba:	8812      	ldrh	r2, [r2, #0]
 80079bc:	4013      	ands	r3, r2
 80079be:	d008      	beq.n	80079d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80079c0:	4b0d      	ldr	r3, [pc, #52]	@ (80079f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079c2:	1dba      	adds	r2, r7, #6
 80079c4:	8812      	ldrh	r2, [r2, #0]
 80079c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80079c8:	1dbb      	adds	r3, r7, #6
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	0018      	movs	r0, r3
 80079ce:	f7fb ff69 	bl	80038a4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80079d2:	4b09      	ldr	r3, [pc, #36]	@ (80079f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	1dba      	adds	r2, r7, #6
 80079d8:	8812      	ldrh	r2, [r2, #0]
 80079da:	4013      	ands	r3, r2
 80079dc:	d008      	beq.n	80079f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80079de:	4b06      	ldr	r3, [pc, #24]	@ (80079f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80079e0:	1dba      	adds	r2, r7, #6
 80079e2:	8812      	ldrh	r2, [r2, #0]
 80079e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80079e6:	1dbb      	adds	r3, r7, #6
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	0018      	movs	r0, r3
 80079ec:	f7fb ff30 	bl	8003850 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80079f0:	46c0      	nop			@ (mov r8, r8)
 80079f2:	46bd      	mov	sp, r7
 80079f4:	b002      	add	sp, #8
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	40021800 	.word	0x40021800

080079fc <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e097      	b.n	8007b3e <HAL_LPTIM_Init+0x142>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2236      	movs	r2, #54	@ 0x36
 8007a12:	5c9b      	ldrb	r3, [r3, r2]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d113      	bne.n	8007a42 <HAL_LPTIM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2235      	movs	r2, #53	@ 0x35
 8007a1e:	2100      	movs	r1, #0
 8007a20:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    LPTIM_ResetCallback(hlptim);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	0018      	movs	r0, r3
 8007a26:	f000 fa8f 	bl	8007f48 <LPTIM_ResetCallback>

    if (hlptim->MspInitCallback == NULL)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d102      	bne.n	8007a38 <HAL_LPTIM_Init+0x3c>
    {
      hlptim->MspInitCallback = HAL_LPTIM_MspInit;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a44      	ldr	r2, [pc, #272]	@ (8007b48 <HAL_LPTIM_Init+0x14c>)
 8007a36:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	0010      	movs	r0, r2
 8007a40:	4798      	blx	r3
    HAL_LPTIM_MspInit(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2236      	movs	r2, #54	@ 0x36
 8007a46:	2102      	movs	r1, #2
 8007a48:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d005      	beq.n	8007a66 <HAL_LPTIM_Init+0x6a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a5e:	2380      	movs	r3, #128	@ 0x80
 8007a60:	041b      	lsls	r3, r3, #16
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d103      	bne.n	8007a6e <HAL_LPTIM_Init+0x72>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	221e      	movs	r2, #30
 8007a6a:	4393      	bics	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	4a36      	ldr	r2, [pc, #216]	@ (8007b4c <HAL_LPTIM_Init+0x150>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d003      	beq.n	8007a80 <HAL_LPTIM_Init+0x84>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4a35      	ldr	r2, [pc, #212]	@ (8007b50 <HAL_LPTIM_Init+0x154>)
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4a34      	ldr	r2, [pc, #208]	@ (8007b54 <HAL_LPTIM_Init+0x158>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007a90:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007a96:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8007a9c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8007aa2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007aa4:	68fa      	ldr	r2, [r7, #12]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d107      	bne.n	8007ac2 <HAL_LPTIM_Init+0xc6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007aba:	4313      	orrs	r3, r2
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d005      	beq.n	8007ad6 <HAL_LPTIM_Init+0xda>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ace:	2380      	movs	r3, #128	@ 0x80
 8007ad0:	041b      	lsls	r3, r3, #16
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d107      	bne.n	8007ae6 <HAL_LPTIM_Init+0xea>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	4a18      	ldr	r2, [pc, #96]	@ (8007b4c <HAL_LPTIM_Init+0x150>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d00a      	beq.n	8007b06 <HAL_LPTIM_Init+0x10a>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007af8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007afe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a11      	ldr	r2, [pc, #68]	@ (8007b58 <HAL_LPTIM_Init+0x15c>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d108      	bne.n	8007b2a <HAL_LPTIM_Init+0x12e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b28:	e004      	b.n	8007b34 <HAL_LPTIM_Init+0x138>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b32:	625a      	str	r2, [r3, #36]	@ 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2236      	movs	r2, #54	@ 0x36
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	0018      	movs	r0, r3
 8007b40:	46bd      	mov	sp, r7
 8007b42:	b004      	add	sp, #16
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	46c0      	nop			@ (mov r8, r8)
 8007b48:	08004801 	.word	0x08004801
 8007b4c:	0000ffff 	.word	0x0000ffff
 8007b50:	ffff1f3f 	.word	0xffff1f3f
 8007b54:	ff19f1fe 	.word	0xff19f1fe
 8007b58:	40007c00 	.word	0x40007c00

08007b5c <HAL_LPTIM_SetOnce_Start_IT>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_SetOnce_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2236      	movs	r2, #54	@ 0x36
 8007b6c:	2102      	movs	r1, #2
 8007b6e:	5499      	strb	r1, [r3, r2]

  /* Set WAVE bit to enable the set once mode */
  hlptim->Instance->CFGR |= LPTIM_CFGR_WAVE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68da      	ldr	r2, [r3, #12]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2180      	movs	r1, #128	@ 0x80
 8007b7c:	0349      	lsls	r1, r1, #13
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	691a      	ldr	r2, [r3, #16]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2210      	movs	r2, #16
 8007b98:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2110      	movs	r1, #16
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 f9fa 	bl	8007fa0 <LPTIM_WaitForFlag>
 8007bac:	0003      	movs	r3, r0
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d101      	bne.n	8007bb6 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
  {
    return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e060      	b.n	8007c78 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2208      	movs	r2, #8
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2108      	movs	r1, #8
 8007bca:	0018      	movs	r0, r3
 8007bcc:	f000 f9e8 	bl	8007fa0 <LPTIM_WaitForFlag>
 8007bd0:	0003      	movs	r3, r0
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d101      	bne.n	8007bda <HAL_LPTIM_SetOnce_Start_IT+0x7e>
  {
    return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e04e      	b.n	8007c78 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f000 fa17 	bl	8008010 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	0018      	movs	r0, r3
 8007be6:	f000 f9a3 	bl	8007f30 <HAL_LPTIM_GetState>
 8007bea:	0003      	movs	r3, r0
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d101      	bne.n	8007bf4 <HAL_LPTIM_SetOnce_Start_IT+0x98>
  {
    return HAL_TIMEOUT;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	e041      	b.n	8007c78 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2110      	movs	r1, #16
 8007c00:	430a      	orrs	r2, r1
 8007c02:	609a      	str	r2, [r3, #8]

  /* Enable Compare write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPOK);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	689a      	ldr	r2, [r3, #8]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2108      	movs	r1, #8
 8007c10:	430a      	orrs	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	689a      	ldr	r2, [r3, #8]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2102      	movs	r1, #2
 8007c20:	430a      	orrs	r2, r1
 8007c22:	609a      	str	r2, [r3, #8]

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	689a      	ldr	r2, [r3, #8]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2101      	movs	r1, #1
 8007c30:	430a      	orrs	r2, r1
 8007c32:	609a      	str	r2, [r3, #8]

  /* If external trigger source is used, then enable external trigger interrupt */
  if ((hlptim->Init.Trigger.Source) != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	4a11      	ldr	r2, [pc, #68]	@ (8007c80 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d007      	beq.n	8007c4e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
  {
    /* Enable external trigger interrupt */
    __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_EXTTRIG);
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2104      	movs	r1, #4
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2101      	movs	r1, #1
 8007c5a:	430a      	orrs	r2, r1
 8007c5c:	611a      	str	r2, [r3, #16]

  /* Start timer in single (one shot) mode */
  __HAL_LPTIM_START_SINGLE(hlptim);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691a      	ldr	r2, [r3, #16]
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2102      	movs	r1, #2
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2236      	movs	r2, #54	@ 0x36
 8007c72:	2101      	movs	r1, #1
 8007c74:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	0018      	movs	r0, r3
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	b004      	add	sp, #16
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	0000ffff 	.word	0x0000ffff

08007c84 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2201      	movs	r2, #1
 8007c94:	4013      	ands	r3, r2
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d10f      	bne.n	8007cba <HAL_LPTIM_IRQHandler+0x36>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	2201      	movs	r2, #1
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d108      	bne.n	8007cba <HAL_LPTIM_IRQHandler+0x36>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2201      	movs	r2, #1
 8007cae:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	0010      	movs	r0, r2
 8007cb8:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d10f      	bne.n	8007ce8 <HAL_LPTIM_IRQHandler+0x64>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2202      	movs	r2, #2
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d108      	bne.n	8007ce8 <HAL_LPTIM_IRQHandler+0x64>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	0010      	movs	r0, r2
 8007ce6:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d10f      	bne.n	8007d16 <HAL_LPTIM_IRQHandler+0x92>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	2204      	movs	r2, #4
 8007cfe:	4013      	ands	r3, r2
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d108      	bne.n	8007d16 <HAL_LPTIM_IRQHandler+0x92>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2204      	movs	r2, #4
 8007d0a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	0010      	movs	r0, r2
 8007d14:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	4013      	ands	r3, r2
 8007d20:	2b08      	cmp	r3, #8
 8007d22:	d10f      	bne.n	8007d44 <HAL_LPTIM_IRQHandler+0xc0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d108      	bne.n	8007d44 <HAL_LPTIM_IRQHandler+0xc0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2208      	movs	r2, #8
 8007d38:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	0010      	movs	r0, r2
 8007d42:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d10f      	bne.n	8007d72 <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	2210      	movs	r2, #16
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d108      	bne.n	8007d72 <HAL_LPTIM_IRQHandler+0xee>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2210      	movs	r2, #16
 8007d66:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	0010      	movs	r0, r2
 8007d70:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2220      	movs	r2, #32
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d10f      	bne.n	8007da0 <HAL_LPTIM_IRQHandler+0x11c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	2220      	movs	r2, #32
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d108      	bne.n	8007da0 <HAL_LPTIM_IRQHandler+0x11c>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2220      	movs	r2, #32
 8007d94:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	0010      	movs	r0, r2
 8007d9e:	4798      	blx	r3
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2240      	movs	r2, #64	@ 0x40
 8007da8:	4013      	ands	r3, r2
 8007daa:	2b40      	cmp	r3, #64	@ 0x40
 8007dac:	d10f      	bne.n	8007dce <HAL_LPTIM_IRQHandler+0x14a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2240      	movs	r2, #64	@ 0x40
 8007db6:	4013      	ands	r3, r2
 8007db8:	2b40      	cmp	r3, #64	@ 0x40
 8007dba:	d108      	bne.n	8007dce <HAL_LPTIM_IRQHandler+0x14a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2240      	movs	r2, #64	@ 0x40
 8007dc2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	0010      	movs	r0, r2
 8007dcc:	4798      	blx	r3
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dce:	46c0      	nop			@ (mov r8, r8)
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	b002      	add	sp, #8
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8007dde:	46c0      	nop			@ (mov r8, r8)
 8007de0:	46bd      	mov	sp, r7
 8007de2:	b002      	add	sp, #8
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b082      	sub	sp, #8
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b002      	add	sp, #8
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007dfe:	46c0      	nop			@ (mov r8, r8)
 8007e00:	46bd      	mov	sp, r7
 8007e02:	b002      	add	sp, #8
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b082      	sub	sp, #8
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b082      	sub	sp, #8
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007e2e:	46c0      	nop			@ (mov r8, r8)
 8007e30:	46bd      	mov	sp, r7
 8007e32:	b002      	add	sp, #8
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007e36:	b580      	push	{r7, lr}
 8007e38:	b082      	sub	sp, #8
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007e3e:	46c0      	nop			@ (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b002      	add	sp, #8
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_LPTIM_RegisterCallback>:
  * @retval status
  */
HAL_StatusTypeDef HAL_LPTIM_RegisterCallback(LPTIM_HandleTypeDef        *hlptim,
                                             HAL_LPTIM_CallbackIDTypeDef CallbackID,
                                             pLPTIM_CallbackTypeDef      pCallback)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	607a      	str	r2, [r7, #4]
 8007e52:	230b      	movs	r3, #11
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	1c0a      	adds	r2, r1, #0
 8007e58:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5a:	2317      	movs	r3, #23
 8007e5c:	18fb      	adds	r3, r7, r3
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <HAL_LPTIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e05a      	b.n	8007f22 <HAL_LPTIM_RegisterCallback+0xda>
  }

  if (hlptim->State == HAL_LPTIM_STATE_READY)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2236      	movs	r2, #54	@ 0x36
 8007e70:	5c9b      	ldrb	r3, [r3, r2]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d132      	bne.n	8007ede <HAL_LPTIM_RegisterCallback+0x96>
  {
    switch (CallbackID)
 8007e78:	230b      	movs	r3, #11
 8007e7a:	18fb      	adds	r3, r7, r3
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d828      	bhi.n	8007ed4 <HAL_LPTIM_RegisterCallback+0x8c>
 8007e82:	009a      	lsls	r2, r3, #2
 8007e84:	4b29      	ldr	r3, [pc, #164]	@ (8007f2c <HAL_LPTIM_RegisterCallback+0xe4>)
 8007e86:	18d3      	adds	r3, r2, r3
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	469f      	mov	pc, r3
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8007e92:	e043      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8007e9a:	e03f      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_MATCH_CB_ID :
        hlptim->CompareMatchCallback = pCallback;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 8007ea2:	e03b      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_MATCH_CB_ID :
        hlptim->AutoReloadMatchCallback = pCallback;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 8007eaa:	e037      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_TRIGGER_CB_ID :
        hlptim->TriggerCallback = pCallback;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8007eb2:	e033      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_COMPARE_WRITE_CB_ID :
        hlptim->CompareWriteCallback = pCallback;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007eba:	e02f      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_AUTORELOAD_WRITE_CB_ID :
        hlptim->AutoReloadWriteCallback = pCallback;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007ec2:	e02b      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_UP_CB_ID :
        hlptim->DirectionUpCallback = pCallback;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007eca:	e027      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_DIRECTION_DOWN_CB_ID :
        hlptim->DirectionDownCallback = pCallback;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007ed2:	e023      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8007ed4:	2317      	movs	r3, #23
 8007ed6:	18fb      	adds	r3, r7, r3
 8007ed8:	2201      	movs	r2, #1
 8007eda:	701a      	strb	r2, [r3, #0]
        break;
 8007edc:	e01e      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2236      	movs	r2, #54	@ 0x36
 8007ee2:	5c9b      	ldrb	r3, [r3, r2]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d114      	bne.n	8007f14 <HAL_LPTIM_RegisterCallback+0xcc>
  {
    switch (CallbackID)
 8007eea:	230b      	movs	r3, #11
 8007eec:	18fb      	adds	r3, r7, r3
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d002      	beq.n	8007efa <HAL_LPTIM_RegisterCallback+0xb2>
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d004      	beq.n	8007f02 <HAL_LPTIM_RegisterCallback+0xba>
 8007ef8:	e007      	b.n	8007f0a <HAL_LPTIM_RegisterCallback+0xc2>
    {
      case HAL_LPTIM_MSPINIT_CB_ID :
        hlptim->MspInitCallback = pCallback;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 8007f00:	e00c      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      case HAL_LPTIM_MSPDEINIT_CB_ID :
        hlptim->MspDeInitCallback = pCallback;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 8007f08:	e008      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8007f0a:	2317      	movs	r3, #23
 8007f0c:	18fb      	adds	r3, r7, r3
 8007f0e:	2201      	movs	r2, #1
 8007f10:	701a      	strb	r2, [r3, #0]
        break;
 8007f12:	e003      	b.n	8007f1c <HAL_LPTIM_RegisterCallback+0xd4>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8007f14:	2317      	movs	r3, #23
 8007f16:	18fb      	adds	r3, r7, r3
 8007f18:	2201      	movs	r2, #1
 8007f1a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007f1c:	2317      	movs	r3, #23
 8007f1e:	18fb      	adds	r3, r7, r3
 8007f20:	781b      	ldrb	r3, [r3, #0]
}
 8007f22:	0018      	movs	r0, r3
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b006      	add	sp, #24
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	0800d58c 	.word	0x0800d58c

08007f30 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2236      	movs	r2, #54	@ 0x36
 8007f3c:	5c9b      	ldrb	r3, [r3, r2]
 8007f3e:	b2db      	uxtb	r3, r3
}
 8007f40:	0018      	movs	r0, r3
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b002      	add	sp, #8
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <LPTIM_ResetCallback>:
  * @param  lptim pointer to a LPTIM_HandleTypeDef structure that contains
  *                the configuration information for LPTIM module.
  * @retval None
  */
static void LPTIM_ResetCallback(LPTIM_HandleTypeDef *lptim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Reset the LPTIM callback to the legacy weak callbacks */
  lptim->CompareMatchCallback    = HAL_LPTIM_CompareMatchCallback;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a0c      	ldr	r2, [pc, #48]	@ (8007f84 <LPTIM_ResetCallback+0x3c>)
 8007f54:	641a      	str	r2, [r3, #64]	@ 0x40
  lptim->AutoReloadMatchCallback = HAL_LPTIM_AutoReloadMatchCallback;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a0b      	ldr	r2, [pc, #44]	@ (8007f88 <LPTIM_ResetCallback+0x40>)
 8007f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  lptim->TriggerCallback         = HAL_LPTIM_TriggerCallback;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8007f8c <LPTIM_ResetCallback+0x44>)
 8007f60:	649a      	str	r2, [r3, #72]	@ 0x48
  lptim->CompareWriteCallback    = HAL_LPTIM_CompareWriteCallback;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a0a      	ldr	r2, [pc, #40]	@ (8007f90 <LPTIM_ResetCallback+0x48>)
 8007f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  lptim->AutoReloadWriteCallback = HAL_LPTIM_AutoReloadWriteCallback;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007f94 <LPTIM_ResetCallback+0x4c>)
 8007f6c:	651a      	str	r2, [r3, #80]	@ 0x50
  lptim->DirectionUpCallback     = HAL_LPTIM_DirectionUpCallback;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a09      	ldr	r2, [pc, #36]	@ (8007f98 <LPTIM_ResetCallback+0x50>)
 8007f72:	655a      	str	r2, [r3, #84]	@ 0x54
  lptim->DirectionDownCallback   = HAL_LPTIM_DirectionDownCallback;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a09      	ldr	r2, [pc, #36]	@ (8007f9c <LPTIM_ResetCallback+0x54>)
 8007f78:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8007f7a:	46c0      	nop			@ (mov r8, r8)
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b002      	add	sp, #8
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	08007dd7 	.word	0x08007dd7
 8007f88:	08007de7 	.word	0x08007de7
 8007f8c:	08007df7 	.word	0x08007df7
 8007f90:	08007e07 	.word	0x08007e07
 8007f94:	08007e17 	.word	0x08007e17
 8007f98:	08007e27 	.word	0x08007e27
 8007f9c:	08007e37 	.word	0x08007e37

08007fa0 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8007faa:	230f      	movs	r3, #15
 8007fac:	18fb      	adds	r3, r7, r3
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8007fb2:	4b15      	ldr	r3, [pc, #84]	@ (8008008 <LPTIM_WaitForFlag+0x68>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4915      	ldr	r1, [pc, #84]	@ (800800c <LPTIM_WaitForFlag+0x6c>)
 8007fb8:	0018      	movs	r0, r3
 8007fba:	f7f8 f8a3 	bl	8000104 <__udivsi3>
 8007fbe:	0003      	movs	r3, r0
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	0013      	movs	r3, r2
 8007fc4:	015b      	lsls	r3, r3, #5
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d103      	bne.n	8007fe4 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 8007fdc:	230f      	movs	r3, #15
 8007fde:	18fb      	adds	r3, r7, r3
 8007fe0:	2203      	movs	r2, #3
 8007fe2:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4013      	ands	r3, r2
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d002      	beq.n	8007ffa <LPTIM_WaitForFlag+0x5a>
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d1ea      	bne.n	8007fd0 <LPTIM_WaitForFlag+0x30>

  return result;
 8007ffa:	230f      	movs	r3, #15
 8007ffc:	18fb      	adds	r3, r7, r3
 8007ffe:	781b      	ldrb	r3, [r3, #0]
}
 8008000:	0018      	movs	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	b004      	add	sp, #16
 8008006:	bd80      	pop	{r7, pc}
 8008008:	20000440 	.word	0x20000440
 800800c:	00004e20 	.word	0x00004e20

08008010 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08c      	sub	sp, #48	@ 0x30
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801c:	f3ef 8310 	mrs	r3, PRIMASK
 8008020:	60fb      	str	r3, [r7, #12]
  return(result);
 8008022:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8008024:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008026:	2301      	movs	r3, #1
 8008028:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f383 8810 	msr	PRIMASK, r3
}
 8008030:	46c0      	nop			@ (mov r8, r8)
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a72      	ldr	r2, [pc, #456]	@ (8008200 <LPTIM_Disable+0x1f0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <LPTIM_Disable+0x34>
 800803c:	4a71      	ldr	r2, [pc, #452]	@ (8008204 <LPTIM_Disable+0x1f4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d007      	beq.n	8008052 <LPTIM_Disable+0x42>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008042:	e00d      	b.n	8008060 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008044:	4b70      	ldr	r3, [pc, #448]	@ (8008208 <LPTIM_Disable+0x1f8>)
 8008046:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008048:	23c0      	movs	r3, #192	@ 0xc0
 800804a:	031b      	lsls	r3, r3, #12
 800804c:	4013      	ands	r3, r2
 800804e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8008050:	e006      	b.n	8008060 <LPTIM_Disable+0x50>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008052:	4b6d      	ldr	r3, [pc, #436]	@ (8008208 <LPTIM_Disable+0x1f8>)
 8008054:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008056:	23c0      	movs	r3, #192	@ 0xc0
 8008058:	039b      	lsls	r3, r3, #14
 800805a:	4013      	ands	r3, r2
 800805c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800805e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	695b      	ldr	r3, [r3, #20]
 8008076:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008086:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a5c      	ldr	r2, [pc, #368]	@ (8008200 <LPTIM_Disable+0x1f0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <LPTIM_Disable+0x8a>
 8008092:	4a5c      	ldr	r2, [pc, #368]	@ (8008204 <LPTIM_Disable+0x1f4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d00e      	beq.n	80080b6 <LPTIM_Disable+0xa6>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8008098:	e01b      	b.n	80080d2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800809a:	4b5b      	ldr	r3, [pc, #364]	@ (8008208 <LPTIM_Disable+0x1f8>)
 800809c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800809e:	4b5a      	ldr	r3, [pc, #360]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080a0:	2180      	movs	r1, #128	@ 0x80
 80080a2:	0609      	lsls	r1, r1, #24
 80080a4:	430a      	orrs	r2, r1
 80080a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80080a8:	4b57      	ldr	r3, [pc, #348]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ac:	4b56      	ldr	r3, [pc, #344]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080ae:	0052      	lsls	r2, r2, #1
 80080b0:	0852      	lsrs	r2, r2, #1
 80080b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80080b4:	e00d      	b.n	80080d2 <LPTIM_Disable+0xc2>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80080b6:	4b54      	ldr	r3, [pc, #336]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080ba:	4b53      	ldr	r3, [pc, #332]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080bc:	2180      	movs	r1, #128	@ 0x80
 80080be:	05c9      	lsls	r1, r1, #23
 80080c0:	430a      	orrs	r2, r1
 80080c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80080c4:	4b50      	ldr	r3, [pc, #320]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080c8:	4b4f      	ldr	r3, [pc, #316]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080ca:	4950      	ldr	r1, [pc, #320]	@ (800820c <LPTIM_Disable+0x1fc>)
 80080cc:	400a      	ands	r2, r1
 80080ce:	62da      	str	r2, [r3, #44]	@ 0x2c
      break;
 80080d0:	46c0      	nop			@ (mov r8, r8)
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d103      	bne.n	80080e0 <LPTIM_Disable+0xd0>
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d100      	bne.n	80080e0 <LPTIM_Disable+0xd0>
 80080de:	e071      	b.n	80081c4 <LPTIM_Disable+0x1b4>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a46      	ldr	r2, [pc, #280]	@ (8008200 <LPTIM_Disable+0x1f0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d003      	beq.n	80080f2 <LPTIM_Disable+0xe2>
 80080ea:	4a46      	ldr	r2, [pc, #280]	@ (8008204 <LPTIM_Disable+0x1f4>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <LPTIM_Disable+0xf0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80080f0:	e00d      	b.n	800810e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80080f2:	4b45      	ldr	r3, [pc, #276]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80080f6:	4b44      	ldr	r3, [pc, #272]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80080f8:	4945      	ldr	r1, [pc, #276]	@ (8008210 <LPTIM_Disable+0x200>)
 80080fa:	400a      	ands	r2, r1
 80080fc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80080fe:	e006      	b.n	800810e <LPTIM_Disable+0xfe>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8008100:	4b41      	ldr	r3, [pc, #260]	@ (8008208 <LPTIM_Disable+0x1f8>)
 8008102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008104:	4b40      	ldr	r3, [pc, #256]	@ (8008208 <LPTIM_Disable+0x1f8>)
 8008106:	4943      	ldr	r1, [pc, #268]	@ (8008214 <LPTIM_Disable+0x204>)
 8008108:	400a      	ands	r2, r1
 800810a:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800810c:	46c0      	nop			@ (mov r8, r8)
    }

    if (tmpCMP != 0UL)
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01b      	beq.n	800814c <LPTIM_Disable+0x13c>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691a      	ldr	r2, [r3, #16]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2101      	movs	r1, #1
 8008120:	430a      	orrs	r2, r1
 8008122:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69fa      	ldr	r2, [r7, #28]
 800812a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2108      	movs	r1, #8
 8008130:	0018      	movs	r0, r3
 8008132:	f7ff ff35 	bl	8007fa0 <LPTIM_WaitForFlag>
 8008136:	0003      	movs	r3, r0
 8008138:	2b03      	cmp	r3, #3
 800813a:	d103      	bne.n	8008144 <LPTIM_Disable+0x134>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2236      	movs	r2, #54	@ 0x36
 8008140:	2103      	movs	r1, #3
 8008142:	5499      	strb	r1, [r3, r2]
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2208      	movs	r2, #8
 800814a:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800814c:	69bb      	ldr	r3, [r7, #24]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d01b      	beq.n	800818a <LPTIM_Disable+0x17a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	691a      	ldr	r2, [r3, #16]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	2101      	movs	r1, #1
 800815e:	430a      	orrs	r2, r1
 8008160:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2110      	movs	r1, #16
 800816e:	0018      	movs	r0, r3
 8008170:	f7ff ff16 	bl	8007fa0 <LPTIM_WaitForFlag>
 8008174:	0003      	movs	r3, r0
 8008176:	2b03      	cmp	r3, #3
 8008178:	d103      	bne.n	8008182 <LPTIM_Disable+0x172>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2236      	movs	r2, #54	@ 0x36
 800817e:	2103      	movs	r1, #3
 8008180:	5499      	strb	r1, [r3, r2]
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2210      	movs	r2, #16
 8008188:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	@ (8008200 <LPTIM_Disable+0x1f0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d003      	beq.n	800819c <LPTIM_Disable+0x18c>
 8008194:	4a1b      	ldr	r2, [pc, #108]	@ (8008204 <LPTIM_Disable+0x1f4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d00a      	beq.n	80081b0 <LPTIM_Disable+0x1a0>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800819a:	e013      	b.n	80081c4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800819c:	4b1a      	ldr	r3, [pc, #104]	@ (8008208 <LPTIM_Disable+0x1f8>)
 800819e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008210 <LPTIM_Disable+0x200>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	0019      	movs	r1, r3
 80081a6:	4b18      	ldr	r3, [pc, #96]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80081a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081aa:	430a      	orrs	r2, r1
 80081ac:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081ae:	e009      	b.n	80081c4 <LPTIM_Disable+0x1b4>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80081b0:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80081b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b4:	4a17      	ldr	r2, [pc, #92]	@ (8008214 <LPTIM_Disable+0x204>)
 80081b6:	4013      	ands	r3, r2
 80081b8:	0019      	movs	r1, r3
 80081ba:	4b13      	ldr	r3, [pc, #76]	@ (8008208 <LPTIM_Disable+0x1f8>)
 80081bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081be:	430a      	orrs	r2, r1
 80081c0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80081c2:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2101      	movs	r1, #1
 80081d0:	438a      	bics	r2, r1
 80081d2:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081da:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6a3a      	ldr	r2, [r7, #32]
 80081e2:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	697a      	ldr	r2, [r7, #20]
 80081ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80081ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	f383 8810 	msr	PRIMASK, r3
}
 80081f6:	46c0      	nop			@ (mov r8, r8)

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80081f8:	46c0      	nop			@ (mov r8, r8)
 80081fa:	46bd      	mov	sp, r7
 80081fc:	b00c      	add	sp, #48	@ 0x30
 80081fe:	bd80      	pop	{r7, pc}
 8008200:	40007c00 	.word	0x40007c00
 8008204:	40009400 	.word	0x40009400
 8008208:	40021000 	.word	0x40021000
 800820c:	bfffffff 	.word	0xbfffffff
 8008210:	fff3ffff 	.word	0xfff3ffff
 8008214:	ffcfffff 	.word	0xffcfffff

08008218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8008220:	4b19      	ldr	r3, [pc, #100]	@ (8008288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a19      	ldr	r2, [pc, #100]	@ (800828c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8008226:	4013      	ands	r3, r2
 8008228:	0019      	movs	r1, r3
 800822a:	4b17      	ldr	r3, [pc, #92]	@ (8008288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	430a      	orrs	r2, r1
 8008230:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	2380      	movs	r3, #128	@ 0x80
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	429a      	cmp	r2, r3
 800823a:	d11f      	bne.n	800827c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	0013      	movs	r3, r2
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	189b      	adds	r3, r3, r2
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	4912      	ldr	r1, [pc, #72]	@ (8008294 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800824a:	0018      	movs	r0, r3
 800824c:	f7f7 ff5a 	bl	8000104 <__udivsi3>
 8008250:	0003      	movs	r3, r0
 8008252:	3301      	adds	r3, #1
 8008254:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008256:	e008      	b.n	800826a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b01      	subs	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e001      	b.n	800826a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e009      	b.n	800827e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800826a:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800826c:	695a      	ldr	r2, [r3, #20]
 800826e:	2380      	movs	r3, #128	@ 0x80
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	401a      	ands	r2, r3
 8008274:	2380      	movs	r3, #128	@ 0x80
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	429a      	cmp	r2, r3
 800827a:	d0ed      	beq.n	8008258 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	0018      	movs	r0, r3
 8008280:	46bd      	mov	sp, r7
 8008282:	b004      	add	sp, #16
 8008284:	bd80      	pop	{r7, pc}
 8008286:	46c0      	nop			@ (mov r8, r8)
 8008288:	40007000 	.word	0x40007000
 800828c:	fffff9ff 	.word	0xfffff9ff
 8008290:	20000440 	.word	0x20000440
 8008294:	000f4240 	.word	0x000f4240

08008298 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800829c:	4b03      	ldr	r3, [pc, #12]	@ (80082ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800829e:	689a      	ldr	r2, [r3, #8]
 80082a0:	23e0      	movs	r3, #224	@ 0xe0
 80082a2:	01db      	lsls	r3, r3, #7
 80082a4:	4013      	ands	r3, r2
}
 80082a6:	0018      	movs	r0, r3
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40021000 	.word	0x40021000

080082b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e2fe      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2201      	movs	r2, #1
 80082c8:	4013      	ands	r3, r2
 80082ca:	d100      	bne.n	80082ce <HAL_RCC_OscConfig+0x1e>
 80082cc:	e07c      	b.n	80083c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ce:	4bc3      	ldr	r3, [pc, #780]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2238      	movs	r2, #56	@ 0x38
 80082d4:	4013      	ands	r3, r2
 80082d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082d8:	4bc0      	ldr	r3, [pc, #768]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	2203      	movs	r2, #3
 80082de:	4013      	ands	r3, r2
 80082e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b10      	cmp	r3, #16
 80082e6:	d102      	bne.n	80082ee <HAL_RCC_OscConfig+0x3e>
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2b03      	cmp	r3, #3
 80082ec:	d002      	beq.n	80082f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10b      	bne.n	800830c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082f4:	4bb9      	ldr	r3, [pc, #740]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	029b      	lsls	r3, r3, #10
 80082fc:	4013      	ands	r3, r2
 80082fe:	d062      	beq.n	80083c6 <HAL_RCC_OscConfig+0x116>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d15e      	bne.n	80083c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e2d9      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	2380      	movs	r3, #128	@ 0x80
 8008312:	025b      	lsls	r3, r3, #9
 8008314:	429a      	cmp	r2, r3
 8008316:	d107      	bne.n	8008328 <HAL_RCC_OscConfig+0x78>
 8008318:	4bb0      	ldr	r3, [pc, #704]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4baf      	ldr	r3, [pc, #700]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800831e:	2180      	movs	r1, #128	@ 0x80
 8008320:	0249      	lsls	r1, r1, #9
 8008322:	430a      	orrs	r2, r1
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	e020      	b.n	800836a <HAL_RCC_OscConfig+0xba>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	23a0      	movs	r3, #160	@ 0xa0
 800832e:	02db      	lsls	r3, r3, #11
 8008330:	429a      	cmp	r2, r3
 8008332:	d10e      	bne.n	8008352 <HAL_RCC_OscConfig+0xa2>
 8008334:	4ba9      	ldr	r3, [pc, #676]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4ba8      	ldr	r3, [pc, #672]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800833a:	2180      	movs	r1, #128	@ 0x80
 800833c:	02c9      	lsls	r1, r1, #11
 800833e:	430a      	orrs	r2, r1
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	4ba6      	ldr	r3, [pc, #664]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	4ba5      	ldr	r3, [pc, #660]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008348:	2180      	movs	r1, #128	@ 0x80
 800834a:	0249      	lsls	r1, r1, #9
 800834c:	430a      	orrs	r2, r1
 800834e:	601a      	str	r2, [r3, #0]
 8008350:	e00b      	b.n	800836a <HAL_RCC_OscConfig+0xba>
 8008352:	4ba2      	ldr	r3, [pc, #648]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	4ba1      	ldr	r3, [pc, #644]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008358:	49a1      	ldr	r1, [pc, #644]	@ (80085e0 <HAL_RCC_OscConfig+0x330>)
 800835a:	400a      	ands	r2, r1
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	4b9f      	ldr	r3, [pc, #636]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	4b9e      	ldr	r3, [pc, #632]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008364:	499f      	ldr	r1, [pc, #636]	@ (80085e4 <HAL_RCC_OscConfig+0x334>)
 8008366:	400a      	ands	r2, r1
 8008368:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d014      	beq.n	800839c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008372:	f7fd fb19 	bl	80059a8 <HAL_GetTick>
 8008376:	0003      	movs	r3, r0
 8008378:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800837a:	e008      	b.n	800838e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800837c:	f7fd fb14 	bl	80059a8 <HAL_GetTick>
 8008380:	0002      	movs	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	2b64      	cmp	r3, #100	@ 0x64
 8008388:	d901      	bls.n	800838e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800838a:	2303      	movs	r3, #3
 800838c:	e298      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800838e:	4b93      	ldr	r3, [pc, #588]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	2380      	movs	r3, #128	@ 0x80
 8008394:	029b      	lsls	r3, r3, #10
 8008396:	4013      	ands	r3, r2
 8008398:	d0f0      	beq.n	800837c <HAL_RCC_OscConfig+0xcc>
 800839a:	e015      	b.n	80083c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839c:	f7fd fb04 	bl	80059a8 <HAL_GetTick>
 80083a0:	0003      	movs	r3, r0
 80083a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083a4:	e008      	b.n	80083b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083a6:	f7fd faff 	bl	80059a8 <HAL_GetTick>
 80083aa:	0002      	movs	r2, r0
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b64      	cmp	r3, #100	@ 0x64
 80083b2:	d901      	bls.n	80083b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e283      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80083b8:	4b88      	ldr	r3, [pc, #544]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	2380      	movs	r3, #128	@ 0x80
 80083be:	029b      	lsls	r3, r3, #10
 80083c0:	4013      	ands	r3, r2
 80083c2:	d1f0      	bne.n	80083a6 <HAL_RCC_OscConfig+0xf6>
 80083c4:	e000      	b.n	80083c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083c6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2202      	movs	r2, #2
 80083ce:	4013      	ands	r3, r2
 80083d0:	d100      	bne.n	80083d4 <HAL_RCC_OscConfig+0x124>
 80083d2:	e099      	b.n	8008508 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083d4:	4b81      	ldr	r3, [pc, #516]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	2238      	movs	r2, #56	@ 0x38
 80083da:	4013      	ands	r3, r2
 80083dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083de:	4b7f      	ldr	r3, [pc, #508]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	2203      	movs	r2, #3
 80083e4:	4013      	ands	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	2b10      	cmp	r3, #16
 80083ec:	d102      	bne.n	80083f4 <HAL_RCC_OscConfig+0x144>
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d002      	beq.n	80083fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80083f4:	69bb      	ldr	r3, [r7, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d135      	bne.n	8008466 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083fa:	4b78      	ldr	r3, [pc, #480]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	2380      	movs	r3, #128	@ 0x80
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4013      	ands	r3, r2
 8008404:	d005      	beq.n	8008412 <HAL_RCC_OscConfig+0x162>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e256      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008412:	4b72      	ldr	r3, [pc, #456]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	4a74      	ldr	r2, [pc, #464]	@ (80085e8 <HAL_RCC_OscConfig+0x338>)
 8008418:	4013      	ands	r3, r2
 800841a:	0019      	movs	r1, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	021a      	lsls	r2, r3, #8
 8008422:	4b6e      	ldr	r3, [pc, #440]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008424:	430a      	orrs	r2, r1
 8008426:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d112      	bne.n	8008454 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800842e:	4b6b      	ldr	r3, [pc, #428]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a6e      	ldr	r2, [pc, #440]	@ (80085ec <HAL_RCC_OscConfig+0x33c>)
 8008434:	4013      	ands	r3, r2
 8008436:	0019      	movs	r1, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	4b67      	ldr	r3, [pc, #412]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800843e:	430a      	orrs	r2, r1
 8008440:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8008442:	4b66      	ldr	r3, [pc, #408]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	0adb      	lsrs	r3, r3, #11
 8008448:	2207      	movs	r2, #7
 800844a:	4013      	ands	r3, r2
 800844c:	4a68      	ldr	r2, [pc, #416]	@ (80085f0 <HAL_RCC_OscConfig+0x340>)
 800844e:	40da      	lsrs	r2, r3
 8008450:	4b68      	ldr	r3, [pc, #416]	@ (80085f4 <HAL_RCC_OscConfig+0x344>)
 8008452:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008454:	4b68      	ldr	r3, [pc, #416]	@ (80085f8 <HAL_RCC_OscConfig+0x348>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	0018      	movs	r0, r3
 800845a:	f7fd fa49 	bl	80058f0 <HAL_InitTick>
 800845e:	1e03      	subs	r3, r0, #0
 8008460:	d051      	beq.n	8008506 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e22c      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d030      	beq.n	80084d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800846e:	4b5b      	ldr	r3, [pc, #364]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a5e      	ldr	r2, [pc, #376]	@ (80085ec <HAL_RCC_OscConfig+0x33c>)
 8008474:	4013      	ands	r3, r2
 8008476:	0019      	movs	r1, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	4b57      	ldr	r3, [pc, #348]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800847e:	430a      	orrs	r2, r1
 8008480:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8008482:	4b56      	ldr	r3, [pc, #344]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	4b55      	ldr	r3, [pc, #340]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008488:	2180      	movs	r1, #128	@ 0x80
 800848a:	0049      	lsls	r1, r1, #1
 800848c:	430a      	orrs	r2, r1
 800848e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fd fa8a 	bl	80059a8 <HAL_GetTick>
 8008494:	0003      	movs	r3, r0
 8008496:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008498:	e008      	b.n	80084ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800849a:	f7fd fa85 	bl	80059a8 <HAL_GetTick>
 800849e:	0002      	movs	r2, r0
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d901      	bls.n	80084ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e209      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80084ac:	4b4b      	ldr	r3, [pc, #300]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084ae:	681a      	ldr	r2, [r3, #0]
 80084b0:	2380      	movs	r3, #128	@ 0x80
 80084b2:	00db      	lsls	r3, r3, #3
 80084b4:	4013      	ands	r3, r2
 80084b6:	d0f0      	beq.n	800849a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084b8:	4b48      	ldr	r3, [pc, #288]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	4a4a      	ldr	r2, [pc, #296]	@ (80085e8 <HAL_RCC_OscConfig+0x338>)
 80084be:	4013      	ands	r3, r2
 80084c0:	0019      	movs	r1, r3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	021a      	lsls	r2, r3, #8
 80084c8:	4b44      	ldr	r3, [pc, #272]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
 80084ce:	e01b      	b.n	8008508 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80084d0:	4b42      	ldr	r3, [pc, #264]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	4b41      	ldr	r3, [pc, #260]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084d6:	4949      	ldr	r1, [pc, #292]	@ (80085fc <HAL_RCC_OscConfig+0x34c>)
 80084d8:	400a      	ands	r2, r1
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fd fa64 	bl	80059a8 <HAL_GetTick>
 80084e0:	0003      	movs	r3, r0
 80084e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084e4:	e008      	b.n	80084f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084e6:	f7fd fa5f 	bl	80059a8 <HAL_GetTick>
 80084ea:	0002      	movs	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d901      	bls.n	80084f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e1e3      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80084f8:	4b38      	ldr	r3, [pc, #224]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	2380      	movs	r3, #128	@ 0x80
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	4013      	ands	r3, r2
 8008502:	d1f0      	bne.n	80084e6 <HAL_RCC_OscConfig+0x236>
 8008504:	e000      	b.n	8008508 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008506:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2208      	movs	r2, #8
 800850e:	4013      	ands	r3, r2
 8008510:	d047      	beq.n	80085a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008512:	4b32      	ldr	r3, [pc, #200]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2238      	movs	r2, #56	@ 0x38
 8008518:	4013      	ands	r3, r2
 800851a:	2b18      	cmp	r3, #24
 800851c:	d10a      	bne.n	8008534 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800851e:	4b2f      	ldr	r3, [pc, #188]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008522:	2202      	movs	r2, #2
 8008524:	4013      	ands	r3, r2
 8008526:	d03c      	beq.n	80085a2 <HAL_RCC_OscConfig+0x2f2>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d138      	bne.n	80085a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e1c5      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d019      	beq.n	8008570 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800853c:	4b27      	ldr	r3, [pc, #156]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800853e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008540:	4b26      	ldr	r3, [pc, #152]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008542:	2101      	movs	r1, #1
 8008544:	430a      	orrs	r2, r1
 8008546:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008548:	f7fd fa2e 	bl	80059a8 <HAL_GetTick>
 800854c:	0003      	movs	r3, r0
 800854e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008550:	e008      	b.n	8008564 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008552:	f7fd fa29 	bl	80059a8 <HAL_GetTick>
 8008556:	0002      	movs	r2, r0
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d901      	bls.n	8008564 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e1ad      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008564:	4b1d      	ldr	r3, [pc, #116]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008568:	2202      	movs	r2, #2
 800856a:	4013      	ands	r3, r2
 800856c:	d0f1      	beq.n	8008552 <HAL_RCC_OscConfig+0x2a2>
 800856e:	e018      	b.n	80085a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8008570:	4b1a      	ldr	r3, [pc, #104]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008572:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008574:	4b19      	ldr	r3, [pc, #100]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 8008576:	2101      	movs	r1, #1
 8008578:	438a      	bics	r2, r1
 800857a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800857c:	f7fd fa14 	bl	80059a8 <HAL_GetTick>
 8008580:	0003      	movs	r3, r0
 8008582:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008584:	e008      	b.n	8008598 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008586:	f7fd fa0f 	bl	80059a8 <HAL_GetTick>
 800858a:	0002      	movs	r2, r0
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d901      	bls.n	8008598 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e193      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008598:	4b10      	ldr	r3, [pc, #64]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 800859a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800859c:	2202      	movs	r2, #2
 800859e:	4013      	ands	r3, r2
 80085a0:	d1f1      	bne.n	8008586 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2204      	movs	r2, #4
 80085a8:	4013      	ands	r3, r2
 80085aa:	d100      	bne.n	80085ae <HAL_RCC_OscConfig+0x2fe>
 80085ac:	e0c6      	b.n	800873c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80085ae:	231f      	movs	r3, #31
 80085b0:	18fb      	adds	r3, r7, r3
 80085b2:	2200      	movs	r2, #0
 80085b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80085b6:	4b09      	ldr	r3, [pc, #36]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	2238      	movs	r2, #56	@ 0x38
 80085bc:	4013      	ands	r3, r2
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d11e      	bne.n	8008600 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80085c2:	4b06      	ldr	r3, [pc, #24]	@ (80085dc <HAL_RCC_OscConfig+0x32c>)
 80085c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c6:	2202      	movs	r2, #2
 80085c8:	4013      	ands	r3, r2
 80085ca:	d100      	bne.n	80085ce <HAL_RCC_OscConfig+0x31e>
 80085cc:	e0b6      	b.n	800873c <HAL_RCC_OscConfig+0x48c>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d000      	beq.n	80085d8 <HAL_RCC_OscConfig+0x328>
 80085d6:	e0b1      	b.n	800873c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e171      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
 80085dc:	40021000 	.word	0x40021000
 80085e0:	fffeffff 	.word	0xfffeffff
 80085e4:	fffbffff 	.word	0xfffbffff
 80085e8:	ffff80ff 	.word	0xffff80ff
 80085ec:	ffffc7ff 	.word	0xffffc7ff
 80085f0:	00f42400 	.word	0x00f42400
 80085f4:	20000440 	.word	0x20000440
 80085f8:	20000444 	.word	0x20000444
 80085fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008600:	4bb1      	ldr	r3, [pc, #708]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008602:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008604:	2380      	movs	r3, #128	@ 0x80
 8008606:	055b      	lsls	r3, r3, #21
 8008608:	4013      	ands	r3, r2
 800860a:	d101      	bne.n	8008610 <HAL_RCC_OscConfig+0x360>
 800860c:	2301      	movs	r3, #1
 800860e:	e000      	b.n	8008612 <HAL_RCC_OscConfig+0x362>
 8008610:	2300      	movs	r3, #0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8008616:	4bac      	ldr	r3, [pc, #688]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008618:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800861a:	4bab      	ldr	r3, [pc, #684]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800861c:	2180      	movs	r1, #128	@ 0x80
 800861e:	0549      	lsls	r1, r1, #21
 8008620:	430a      	orrs	r2, r1
 8008622:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008624:	4ba8      	ldr	r3, [pc, #672]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008626:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008628:	2380      	movs	r3, #128	@ 0x80
 800862a:	055b      	lsls	r3, r3, #21
 800862c:	4013      	ands	r3, r2
 800862e:	60fb      	str	r3, [r7, #12]
 8008630:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8008632:	231f      	movs	r3, #31
 8008634:	18fb      	adds	r3, r7, r3
 8008636:	2201      	movs	r2, #1
 8008638:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800863a:	4ba4      	ldr	r3, [pc, #656]	@ (80088cc <HAL_RCC_OscConfig+0x61c>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	2380      	movs	r3, #128	@ 0x80
 8008640:	005b      	lsls	r3, r3, #1
 8008642:	4013      	ands	r3, r2
 8008644:	d11a      	bne.n	800867c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008646:	4ba1      	ldr	r3, [pc, #644]	@ (80088cc <HAL_RCC_OscConfig+0x61c>)
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	4ba0      	ldr	r3, [pc, #640]	@ (80088cc <HAL_RCC_OscConfig+0x61c>)
 800864c:	2180      	movs	r1, #128	@ 0x80
 800864e:	0049      	lsls	r1, r1, #1
 8008650:	430a      	orrs	r2, r1
 8008652:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8008654:	f7fd f9a8 	bl	80059a8 <HAL_GetTick>
 8008658:	0003      	movs	r3, r0
 800865a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865e:	f7fd f9a3 	bl	80059a8 <HAL_GetTick>
 8008662:	0002      	movs	r2, r0
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e127      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008670:	4b96      	ldr	r3, [pc, #600]	@ (80088cc <HAL_RCC_OscConfig+0x61c>)
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	2380      	movs	r3, #128	@ 0x80
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	4013      	ands	r3, r2
 800867a:	d0f0      	beq.n	800865e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d106      	bne.n	8008692 <HAL_RCC_OscConfig+0x3e2>
 8008684:	4b90      	ldr	r3, [pc, #576]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008686:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008688:	4b8f      	ldr	r3, [pc, #572]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800868a:	2101      	movs	r1, #1
 800868c:	430a      	orrs	r2, r1
 800868e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008690:	e01c      	b.n	80086cc <HAL_RCC_OscConfig+0x41c>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d10c      	bne.n	80086b4 <HAL_RCC_OscConfig+0x404>
 800869a:	4b8b      	ldr	r3, [pc, #556]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800869c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800869e:	4b8a      	ldr	r3, [pc, #552]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086a0:	2104      	movs	r1, #4
 80086a2:	430a      	orrs	r2, r1
 80086a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086a6:	4b88      	ldr	r3, [pc, #544]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086aa:	4b87      	ldr	r3, [pc, #540]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086ac:	2101      	movs	r1, #1
 80086ae:	430a      	orrs	r2, r1
 80086b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086b2:	e00b      	b.n	80086cc <HAL_RCC_OscConfig+0x41c>
 80086b4:	4b84      	ldr	r3, [pc, #528]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086b8:	4b83      	ldr	r3, [pc, #524]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086ba:	2101      	movs	r1, #1
 80086bc:	438a      	bics	r2, r1
 80086be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80086c0:	4b81      	ldr	r3, [pc, #516]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80086c4:	4b80      	ldr	r3, [pc, #512]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086c6:	2104      	movs	r1, #4
 80086c8:	438a      	bics	r2, r1
 80086ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d014      	beq.n	80086fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d4:	f7fd f968 	bl	80059a8 <HAL_GetTick>
 80086d8:	0003      	movs	r3, r0
 80086da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086dc:	e009      	b.n	80086f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086de:	f7fd f963 	bl	80059a8 <HAL_GetTick>
 80086e2:	0002      	movs	r2, r0
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	4a79      	ldr	r2, [pc, #484]	@ (80088d0 <HAL_RCC_OscConfig+0x620>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d901      	bls.n	80086f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80086ee:	2303      	movs	r3, #3
 80086f0:	e0e6      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086f2:	4b75      	ldr	r3, [pc, #468]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80086f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f6:	2202      	movs	r2, #2
 80086f8:	4013      	ands	r3, r2
 80086fa:	d0f0      	beq.n	80086de <HAL_RCC_OscConfig+0x42e>
 80086fc:	e013      	b.n	8008726 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086fe:	f7fd f953 	bl	80059a8 <HAL_GetTick>
 8008702:	0003      	movs	r3, r0
 8008704:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008706:	e009      	b.n	800871c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008708:	f7fd f94e 	bl	80059a8 <HAL_GetTick>
 800870c:	0002      	movs	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	4a6f      	ldr	r2, [pc, #444]	@ (80088d0 <HAL_RCC_OscConfig+0x620>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d901      	bls.n	800871c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	e0d1      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800871c:	4b6a      	ldr	r3, [pc, #424]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800871e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008720:	2202      	movs	r2, #2
 8008722:	4013      	ands	r3, r2
 8008724:	d1f0      	bne.n	8008708 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8008726:	231f      	movs	r3, #31
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d105      	bne.n	800873c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8008730:	4b65      	ldr	r3, [pc, #404]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008732:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008734:	4b64      	ldr	r3, [pc, #400]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008736:	4967      	ldr	r1, [pc, #412]	@ (80088d4 <HAL_RCC_OscConfig+0x624>)
 8008738:	400a      	ands	r2, r1
 800873a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69db      	ldr	r3, [r3, #28]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d100      	bne.n	8008746 <HAL_RCC_OscConfig+0x496>
 8008744:	e0bb      	b.n	80088be <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008746:	4b60      	ldr	r3, [pc, #384]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	2238      	movs	r2, #56	@ 0x38
 800874c:	4013      	ands	r3, r2
 800874e:	2b10      	cmp	r3, #16
 8008750:	d100      	bne.n	8008754 <HAL_RCC_OscConfig+0x4a4>
 8008752:	e07b      	b.n	800884c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d156      	bne.n	800880a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875c:	4b5a      	ldr	r3, [pc, #360]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b59      	ldr	r3, [pc, #356]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008762:	495d      	ldr	r1, [pc, #372]	@ (80088d8 <HAL_RCC_OscConfig+0x628>)
 8008764:	400a      	ands	r2, r1
 8008766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008768:	f7fd f91e 	bl	80059a8 <HAL_GetTick>
 800876c:	0003      	movs	r3, r0
 800876e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008770:	e008      	b.n	8008784 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008772:	f7fd f919 	bl	80059a8 <HAL_GetTick>
 8008776:	0002      	movs	r2, r0
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	2b02      	cmp	r3, #2
 800877e:	d901      	bls.n	8008784 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8008780:	2303      	movs	r3, #3
 8008782:	e09d      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008784:	4b50      	ldr	r3, [pc, #320]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	2380      	movs	r3, #128	@ 0x80
 800878a:	049b      	lsls	r3, r3, #18
 800878c:	4013      	ands	r3, r2
 800878e:	d1f0      	bne.n	8008772 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008790:	4b4d      	ldr	r3, [pc, #308]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	4a51      	ldr	r2, [pc, #324]	@ (80088dc <HAL_RCC_OscConfig+0x62c>)
 8008796:	4013      	ands	r3, r2
 8008798:	0019      	movs	r1, r3
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a2:	431a      	orrs	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087b0:	431a      	orrs	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087bc:	431a      	orrs	r2, r3
 80087be:	4b42      	ldr	r3, [pc, #264]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087c0:	430a      	orrs	r2, r1
 80087c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087c4:	4b40      	ldr	r3, [pc, #256]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	4b3f      	ldr	r3, [pc, #252]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087ca:	2180      	movs	r1, #128	@ 0x80
 80087cc:	0449      	lsls	r1, r1, #17
 80087ce:	430a      	orrs	r2, r1
 80087d0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80087d2:	4b3d      	ldr	r3, [pc, #244]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087d4:	68da      	ldr	r2, [r3, #12]
 80087d6:	4b3c      	ldr	r3, [pc, #240]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087d8:	2180      	movs	r1, #128	@ 0x80
 80087da:	0549      	lsls	r1, r1, #21
 80087dc:	430a      	orrs	r2, r1
 80087de:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fd f8e2 	bl	80059a8 <HAL_GetTick>
 80087e4:	0003      	movs	r3, r0
 80087e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087e8:	e008      	b.n	80087fc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ea:	f7fd f8dd 	bl	80059a8 <HAL_GetTick>
 80087ee:	0002      	movs	r2, r0
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e061      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087fc:	4b32      	ldr	r3, [pc, #200]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	2380      	movs	r3, #128	@ 0x80
 8008802:	049b      	lsls	r3, r3, #18
 8008804:	4013      	ands	r3, r2
 8008806:	d0f0      	beq.n	80087ea <HAL_RCC_OscConfig+0x53a>
 8008808:	e059      	b.n	80088be <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880a:	4b2f      	ldr	r3, [pc, #188]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	4b2e      	ldr	r3, [pc, #184]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008810:	4931      	ldr	r1, [pc, #196]	@ (80088d8 <HAL_RCC_OscConfig+0x628>)
 8008812:	400a      	ands	r2, r1
 8008814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008816:	f7fd f8c7 	bl	80059a8 <HAL_GetTick>
 800881a:	0003      	movs	r3, r0
 800881c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008820:	f7fd f8c2 	bl	80059a8 <HAL_GetTick>
 8008824:	0002      	movs	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e046      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008832:	4b25      	ldr	r3, [pc, #148]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	2380      	movs	r3, #128	@ 0x80
 8008838:	049b      	lsls	r3, r3, #18
 800883a:	4013      	ands	r3, r2
 800883c:	d1f0      	bne.n	8008820 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800883e:	4b22      	ldr	r3, [pc, #136]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	4b21      	ldr	r3, [pc, #132]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 8008844:	4926      	ldr	r1, [pc, #152]	@ (80088e0 <HAL_RCC_OscConfig+0x630>)
 8008846:	400a      	ands	r2, r1
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	e038      	b.n	80088be <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e033      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8008858:	4b1b      	ldr	r3, [pc, #108]	@ (80088c8 <HAL_RCC_OscConfig+0x618>)
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2203      	movs	r2, #3
 8008862:	401a      	ands	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	429a      	cmp	r2, r3
 800886a:	d126      	bne.n	80088ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2270      	movs	r2, #112	@ 0x70
 8008870:	401a      	ands	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008876:	429a      	cmp	r2, r3
 8008878:	d11f      	bne.n	80088ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	23fe      	movs	r3, #254	@ 0xfe
 800887e:	01db      	lsls	r3, r3, #7
 8008880:	401a      	ands	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008886:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008888:	429a      	cmp	r2, r3
 800888a:	d116      	bne.n	80088ba <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	23f8      	movs	r3, #248	@ 0xf8
 8008890:	039b      	lsls	r3, r3, #14
 8008892:	401a      	ands	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008898:	429a      	cmp	r2, r3
 800889a:	d10e      	bne.n	80088ba <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	23e0      	movs	r3, #224	@ 0xe0
 80088a0:	051b      	lsls	r3, r3, #20
 80088a2:	401a      	ands	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d106      	bne.n	80088ba <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	0f5b      	lsrs	r3, r3, #29
 80088b0:	075a      	lsls	r2, r3, #29
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d001      	beq.n	80088be <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	0018      	movs	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	b008      	add	sp, #32
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	40021000 	.word	0x40021000
 80088cc:	40007000 	.word	0x40007000
 80088d0:	00001388 	.word	0x00001388
 80088d4:	efffffff 	.word	0xefffffff
 80088d8:	feffffff 	.word	0xfeffffff
 80088dc:	11c1808c 	.word	0x11c1808c
 80088e0:	eefefffc 	.word	0xeefefffc

080088e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d101      	bne.n	80088f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80088f4:	2301      	movs	r3, #1
 80088f6:	e0e9      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088f8:	4b76      	ldr	r3, [pc, #472]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2207      	movs	r2, #7
 80088fe:	4013      	ands	r3, r2
 8008900:	683a      	ldr	r2, [r7, #0]
 8008902:	429a      	cmp	r2, r3
 8008904:	d91e      	bls.n	8008944 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008906:	4b73      	ldr	r3, [pc, #460]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2207      	movs	r2, #7
 800890c:	4393      	bics	r3, r2
 800890e:	0019      	movs	r1, r3
 8008910:	4b70      	ldr	r3, [pc, #448]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008912:	683a      	ldr	r2, [r7, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008918:	f7fd f846 	bl	80059a8 <HAL_GetTick>
 800891c:	0003      	movs	r3, r0
 800891e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008920:	e009      	b.n	8008936 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008922:	f7fd f841 	bl	80059a8 <HAL_GetTick>
 8008926:	0002      	movs	r2, r0
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	4a6a      	ldr	r2, [pc, #424]	@ (8008ad8 <HAL_RCC_ClockConfig+0x1f4>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e0ca      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008936:	4b67      	ldr	r3, [pc, #412]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2207      	movs	r2, #7
 800893c:	4013      	ands	r3, r2
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	429a      	cmp	r2, r3
 8008942:	d1ee      	bne.n	8008922 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2202      	movs	r2, #2
 800894a:	4013      	ands	r3, r2
 800894c:	d015      	beq.n	800897a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2204      	movs	r2, #4
 8008954:	4013      	ands	r3, r2
 8008956:	d006      	beq.n	8008966 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008958:	4b60      	ldr	r3, [pc, #384]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	4b5f      	ldr	r3, [pc, #380]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 800895e:	21e0      	movs	r1, #224	@ 0xe0
 8008960:	01c9      	lsls	r1, r1, #7
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008966:	4b5d      	ldr	r3, [pc, #372]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	4a5d      	ldr	r2, [pc, #372]	@ (8008ae0 <HAL_RCC_ClockConfig+0x1fc>)
 800896c:	4013      	ands	r3, r2
 800896e:	0019      	movs	r1, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	4b59      	ldr	r3, [pc, #356]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008976:	430a      	orrs	r2, r1
 8008978:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2201      	movs	r2, #1
 8008980:	4013      	ands	r3, r2
 8008982:	d057      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d107      	bne.n	800899c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800898c:	4b53      	ldr	r3, [pc, #332]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	2380      	movs	r3, #128	@ 0x80
 8008992:	029b      	lsls	r3, r3, #10
 8008994:	4013      	ands	r3, r2
 8008996:	d12b      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e097      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	2b02      	cmp	r3, #2
 80089a2:	d107      	bne.n	80089b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80089a4:	4b4d      	ldr	r3, [pc, #308]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	2380      	movs	r3, #128	@ 0x80
 80089aa:	049b      	lsls	r3, r3, #18
 80089ac:	4013      	ands	r3, r2
 80089ae:	d11f      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	e08b      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d107      	bne.n	80089cc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80089bc:	4b47      	ldr	r3, [pc, #284]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	2380      	movs	r3, #128	@ 0x80
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	4013      	ands	r3, r2
 80089c6:	d113      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e07f      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d106      	bne.n	80089e2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089d4:	4b41      	ldr	r3, [pc, #260]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 80089d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80089d8:	2202      	movs	r2, #2
 80089da:	4013      	ands	r3, r2
 80089dc:	d108      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e074      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80089e2:	4b3e      	ldr	r3, [pc, #248]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 80089e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089e6:	2202      	movs	r2, #2
 80089e8:	4013      	ands	r3, r2
 80089ea:	d101      	bne.n	80089f0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e06d      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089f0:	4b3a      	ldr	r3, [pc, #232]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	2207      	movs	r2, #7
 80089f6:	4393      	bics	r3, r2
 80089f8:	0019      	movs	r1, r3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	4b37      	ldr	r3, [pc, #220]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008a00:	430a      	orrs	r2, r1
 8008a02:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a04:	f7fc ffd0 	bl	80059a8 <HAL_GetTick>
 8008a08:	0003      	movs	r3, r0
 8008a0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0c:	e009      	b.n	8008a22 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a0e:	f7fc ffcb 	bl	80059a8 <HAL_GetTick>
 8008a12:	0002      	movs	r2, r0
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	4a2f      	ldr	r2, [pc, #188]	@ (8008ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e054      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a22:	4b2e      	ldr	r3, [pc, #184]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2238      	movs	r2, #56	@ 0x38
 8008a28:	401a      	ands	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	00db      	lsls	r3, r3, #3
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d1ec      	bne.n	8008a0e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a34:	4b27      	ldr	r3, [pc, #156]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2207      	movs	r2, #7
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d21e      	bcs.n	8008a80 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a42:	4b24      	ldr	r3, [pc, #144]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2207      	movs	r2, #7
 8008a48:	4393      	bics	r3, r2
 8008a4a:	0019      	movs	r1, r3
 8008a4c:	4b21      	ldr	r3, [pc, #132]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	430a      	orrs	r2, r1
 8008a52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a54:	f7fc ffa8 	bl	80059a8 <HAL_GetTick>
 8008a58:	0003      	movs	r3, r0
 8008a5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a5c:	e009      	b.n	8008a72 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a5e:	f7fc ffa3 	bl	80059a8 <HAL_GetTick>
 8008a62:	0002      	movs	r2, r0
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	4a1b      	ldr	r2, [pc, #108]	@ (8008ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d901      	bls.n	8008a72 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e02c      	b.n	8008acc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8008a72:	4b18      	ldr	r3, [pc, #96]	@ (8008ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2207      	movs	r2, #7
 8008a78:	4013      	ands	r3, r2
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d1ee      	bne.n	8008a5e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2204      	movs	r2, #4
 8008a86:	4013      	ands	r3, r2
 8008a88:	d009      	beq.n	8008a9e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008a8a:	4b14      	ldr	r3, [pc, #80]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	4a15      	ldr	r2, [pc, #84]	@ (8008ae4 <HAL_RCC_ClockConfig+0x200>)
 8008a90:	4013      	ands	r3, r2
 8008a92:	0019      	movs	r1, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	4b10      	ldr	r3, [pc, #64]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008a9a:	430a      	orrs	r2, r1
 8008a9c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8008a9e:	f000 f829 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 8008aa2:	0001      	movs	r1, r0
 8008aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8008adc <HAL_RCC_ClockConfig+0x1f8>)
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	0a1b      	lsrs	r3, r3, #8
 8008aaa:	220f      	movs	r2, #15
 8008aac:	401a      	ands	r2, r3
 8008aae:	4b0e      	ldr	r3, [pc, #56]	@ (8008ae8 <HAL_RCC_ClockConfig+0x204>)
 8008ab0:	0092      	lsls	r2, r2, #2
 8008ab2:	58d3      	ldr	r3, [r2, r3]
 8008ab4:	221f      	movs	r2, #31
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	000a      	movs	r2, r1
 8008aba:	40da      	lsrs	r2, r3
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCC_ClockConfig+0x208>)
 8008abe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8008af0 <HAL_RCC_ClockConfig+0x20c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f7fc ff13 	bl	80058f0 <HAL_InitTick>
 8008aca:	0003      	movs	r3, r0
}
 8008acc:	0018      	movs	r0, r3
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	b004      	add	sp, #16
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40022000 	.word	0x40022000
 8008ad8:	00001388 	.word	0x00001388
 8008adc:	40021000 	.word	0x40021000
 8008ae0:	fffff0ff 	.word	0xfffff0ff
 8008ae4:	ffff8fff 	.word	0xffff8fff
 8008ae8:	0800d500 	.word	0x0800d500
 8008aec:	20000440 	.word	0x20000440
 8008af0:	20000444 	.word	0x20000444

08008af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008afa:	4b3c      	ldr	r3, [pc, #240]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	2238      	movs	r2, #56	@ 0x38
 8008b00:	4013      	ands	r3, r2
 8008b02:	d10f      	bne.n	8008b24 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8008b04:	4b39      	ldr	r3, [pc, #228]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	0adb      	lsrs	r3, r3, #11
 8008b0a:	2207      	movs	r2, #7
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	2201      	movs	r2, #1
 8008b10:	409a      	lsls	r2, r3
 8008b12:	0013      	movs	r3, r2
 8008b14:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	4835      	ldr	r0, [pc, #212]	@ (8008bf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008b1a:	f7f7 faf3 	bl	8000104 <__udivsi3>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	e05d      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008b24:	4b31      	ldr	r3, [pc, #196]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	2238      	movs	r2, #56	@ 0x38
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2b08      	cmp	r3, #8
 8008b2e:	d102      	bne.n	8008b36 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b30:	4b30      	ldr	r3, [pc, #192]	@ (8008bf4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b32:	613b      	str	r3, [r7, #16]
 8008b34:	e054      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b36:	4b2d      	ldr	r3, [pc, #180]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	2238      	movs	r2, #56	@ 0x38
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	2b10      	cmp	r3, #16
 8008b40:	d138      	bne.n	8008bb4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8008b42:	4b2a      	ldr	r3, [pc, #168]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	2203      	movs	r2, #3
 8008b48:	4013      	ands	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b4c:	4b27      	ldr	r3, [pc, #156]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	091b      	lsrs	r3, r3, #4
 8008b52:	2207      	movs	r2, #7
 8008b54:	4013      	ands	r3, r2
 8008b56:	3301      	adds	r3, #1
 8008b58:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d10d      	bne.n	8008b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	4824      	ldr	r0, [pc, #144]	@ (8008bf4 <HAL_RCC_GetSysClockFreq+0x100>)
 8008b64:	f7f7 face 	bl	8000104 <__udivsi3>
 8008b68:	0003      	movs	r3, r0
 8008b6a:	0019      	movs	r1, r3
 8008b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	227f      	movs	r2, #127	@ 0x7f
 8008b74:	4013      	ands	r3, r2
 8008b76:	434b      	muls	r3, r1
 8008b78:	617b      	str	r3, [r7, #20]
        break;
 8008b7a:	e00d      	b.n	8008b98 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	481c      	ldr	r0, [pc, #112]	@ (8008bf0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8008b80:	f7f7 fac0 	bl	8000104 <__udivsi3>
 8008b84:	0003      	movs	r3, r0
 8008b86:	0019      	movs	r1, r3
 8008b88:	4b18      	ldr	r3, [pc, #96]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	0a1b      	lsrs	r3, r3, #8
 8008b8e:	227f      	movs	r2, #127	@ 0x7f
 8008b90:	4013      	ands	r3, r2
 8008b92:	434b      	muls	r3, r1
 8008b94:	617b      	str	r3, [r7, #20]
        break;
 8008b96:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8008b98:	4b14      	ldr	r3, [pc, #80]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	0f5b      	lsrs	r3, r3, #29
 8008b9e:	2207      	movs	r2, #7
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	6978      	ldr	r0, [r7, #20]
 8008baa:	f7f7 faab 	bl	8000104 <__udivsi3>
 8008bae:	0003      	movs	r3, r0
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	e015      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	2238      	movs	r2, #56	@ 0x38
 8008bba:	4013      	ands	r3, r2
 8008bbc:	2b20      	cmp	r3, #32
 8008bbe:	d103      	bne.n	8008bc8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8008bc0:	2380      	movs	r3, #128	@ 0x80
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	613b      	str	r3, [r7, #16]
 8008bc6:	e00b      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8008bc8:	4b08      	ldr	r3, [pc, #32]	@ (8008bec <HAL_RCC_GetSysClockFreq+0xf8>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	2238      	movs	r2, #56	@ 0x38
 8008bce:	4013      	ands	r3, r2
 8008bd0:	2b18      	cmp	r3, #24
 8008bd2:	d103      	bne.n	8008bdc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8008bd4:	23fa      	movs	r3, #250	@ 0xfa
 8008bd6:	01db      	lsls	r3, r3, #7
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	e001      	b.n	8008be0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008be0:	693b      	ldr	r3, [r7, #16]
}
 8008be2:	0018      	movs	r0, r3
 8008be4:	46bd      	mov	sp, r7
 8008be6:	b006      	add	sp, #24
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	46c0      	nop			@ (mov r8, r8)
 8008bec:	40021000 	.word	0x40021000
 8008bf0:	00f42400 	.word	0x00f42400
 8008bf4:	007a1200 	.word	0x007a1200

08008bf8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bfc:	4b02      	ldr	r3, [pc, #8]	@ (8008c08 <HAL_RCC_GetHCLKFreq+0x10>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
}
 8008c00:	0018      	movs	r0, r3
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	46c0      	nop			@ (mov r8, r8)
 8008c08:	20000440 	.word	0x20000440

08008c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c0c:	b5b0      	push	{r4, r5, r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008c10:	f7ff fff2 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c14:	0004      	movs	r4, r0
 8008c16:	f7ff fb3f 	bl	8008298 <LL_RCC_GetAPB1Prescaler>
 8008c1a:	0003      	movs	r3, r0
 8008c1c:	0b1a      	lsrs	r2, r3, #12
 8008c1e:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c20:	0092      	lsls	r2, r2, #2
 8008c22:	58d3      	ldr	r3, [r2, r3]
 8008c24:	221f      	movs	r2, #31
 8008c26:	4013      	ands	r3, r2
 8008c28:	40dc      	lsrs	r4, r3
 8008c2a:	0023      	movs	r3, r4
}
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bdb0      	pop	{r4, r5, r7, pc}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	0800d540 	.word	0x0800d540

08008c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8008c40:	2313      	movs	r3, #19
 8008c42:	18fb      	adds	r3, r7, r3
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008c48:	2312      	movs	r3, #18
 8008c4a:	18fb      	adds	r3, r7, r3
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	2380      	movs	r3, #128	@ 0x80
 8008c56:	029b      	lsls	r3, r3, #10
 8008c58:	4013      	ands	r3, r2
 8008c5a:	d100      	bne.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8008c5c:	e0a3      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c5e:	2011      	movs	r0, #17
 8008c60:	183b      	adds	r3, r7, r0
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c66:	4ba5      	ldr	r3, [pc, #660]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c6a:	2380      	movs	r3, #128	@ 0x80
 8008c6c:	055b      	lsls	r3, r3, #21
 8008c6e:	4013      	ands	r3, r2
 8008c70:	d110      	bne.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c72:	4ba2      	ldr	r3, [pc, #648]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c76:	4ba1      	ldr	r3, [pc, #644]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c78:	2180      	movs	r1, #128	@ 0x80
 8008c7a:	0549      	lsls	r1, r1, #21
 8008c7c:	430a      	orrs	r2, r1
 8008c7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008c80:	4b9e      	ldr	r3, [pc, #632]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008c82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008c84:	2380      	movs	r3, #128	@ 0x80
 8008c86:	055b      	lsls	r3, r3, #21
 8008c88:	4013      	ands	r3, r2
 8008c8a:	60bb      	str	r3, [r7, #8]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c8e:	183b      	adds	r3, r7, r0
 8008c90:	2201      	movs	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c94:	4b9a      	ldr	r3, [pc, #616]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	4b99      	ldr	r3, [pc, #612]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008c9a:	2180      	movs	r1, #128	@ 0x80
 8008c9c:	0049      	lsls	r1, r1, #1
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ca2:	f7fc fe81 	bl	80059a8 <HAL_GetTick>
 8008ca6:	0003      	movs	r3, r0
 8008ca8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008caa:	e00b      	b.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cac:	f7fc fe7c 	bl	80059a8 <HAL_GetTick>
 8008cb0:	0002      	movs	r2, r0
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d904      	bls.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8008cba:	2313      	movs	r3, #19
 8008cbc:	18fb      	adds	r3, r7, r3
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	701a      	strb	r2, [r3, #0]
        break;
 8008cc2:	e005      	b.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008cc4:	4b8e      	ldr	r3, [pc, #568]	@ (8008f00 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	2380      	movs	r3, #128	@ 0x80
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	4013      	ands	r3, r2
 8008cce:	d0ed      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8008cd0:	2313      	movs	r3, #19
 8008cd2:	18fb      	adds	r3, r7, r3
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d154      	bne.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008cda:	4b88      	ldr	r3, [pc, #544]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008cdc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008cde:	23c0      	movs	r3, #192	@ 0xc0
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d019      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d014      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008cf6:	4b81      	ldr	r3, [pc, #516]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cfa:	4a82      	ldr	r2, [pc, #520]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d00:	4b7e      	ldr	r3, [pc, #504]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d04:	4b7d      	ldr	r3, [pc, #500]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d06:	2180      	movs	r1, #128	@ 0x80
 8008d08:	0249      	lsls	r1, r1, #9
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d10:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008d12:	4b7a      	ldr	r3, [pc, #488]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d14:	497c      	ldr	r1, [pc, #496]	@ (8008f08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8008d16:	400a      	ands	r2, r1
 8008d18:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008d1a:	4b78      	ldr	r3, [pc, #480]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	2201      	movs	r2, #1
 8008d24:	4013      	ands	r3, r2
 8008d26:	d016      	beq.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d28:	f7fc fe3e 	bl	80059a8 <HAL_GetTick>
 8008d2c:	0003      	movs	r3, r0
 8008d2e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d30:	e00c      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d32:	f7fc fe39 	bl	80059a8 <HAL_GetTick>
 8008d36:	0002      	movs	r2, r0
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	4a73      	ldr	r2, [pc, #460]	@ (8008f0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d904      	bls.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8008d42:	2313      	movs	r3, #19
 8008d44:	18fb      	adds	r3, r7, r3
 8008d46:	2203      	movs	r2, #3
 8008d48:	701a      	strb	r2, [r3, #0]
            break;
 8008d4a:	e004      	b.n	8008d56 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d50:	2202      	movs	r2, #2
 8008d52:	4013      	ands	r3, r2
 8008d54:	d0ed      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8008d56:	2313      	movs	r3, #19
 8008d58:	18fb      	adds	r3, r7, r3
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d60:	4b66      	ldr	r3, [pc, #408]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d64:	4a67      	ldr	r2, [pc, #412]	@ (8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	0019      	movs	r1, r3
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008d6e:	4b63      	ldr	r3, [pc, #396]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d70:	430a      	orrs	r2, r1
 8008d72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008d74:	e00c      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d76:	2312      	movs	r3, #18
 8008d78:	18fb      	adds	r3, r7, r3
 8008d7a:	2213      	movs	r2, #19
 8008d7c:	18ba      	adds	r2, r7, r2
 8008d7e:	7812      	ldrb	r2, [r2, #0]
 8008d80:	701a      	strb	r2, [r3, #0]
 8008d82:	e005      	b.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d84:	2312      	movs	r3, #18
 8008d86:	18fb      	adds	r3, r7, r3
 8008d88:	2213      	movs	r2, #19
 8008d8a:	18ba      	adds	r2, r7, r2
 8008d8c:	7812      	ldrb	r2, [r2, #0]
 8008d8e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d90:	2311      	movs	r3, #17
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	2b01      	cmp	r3, #1
 8008d98:	d105      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d9a:	4b58      	ldr	r3, [pc, #352]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d9e:	4b57      	ldr	r3, [pc, #348]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008da0:	495b      	ldr	r1, [pc, #364]	@ (8008f10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008da2:	400a      	ands	r2, r1
 8008da4:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2201      	movs	r2, #1
 8008dac:	4013      	ands	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008db0:	4b52      	ldr	r3, [pc, #328]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008db4:	2203      	movs	r2, #3
 8008db6:	4393      	bics	r3, r2
 8008db8:	0019      	movs	r1, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685a      	ldr	r2, [r3, #4]
 8008dbe:	4b4f      	ldr	r3, [pc, #316]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2210      	movs	r2, #16
 8008dca:	4013      	ands	r3, r2
 8008dcc:	d009      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008dce:	4b4b      	ldr	r3, [pc, #300]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd2:	4a50      	ldr	r2, [pc, #320]	@ (8008f14 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8008dd4:	4013      	ands	r3, r2
 8008dd6:	0019      	movs	r1, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	4b47      	ldr	r3, [pc, #284]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dde:	430a      	orrs	r2, r1
 8008de0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	2380      	movs	r3, #128	@ 0x80
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4013      	ands	r3, r2
 8008dec:	d009      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008dee:	4b43      	ldr	r3, [pc, #268]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008df2:	4a49      	ldr	r2, [pc, #292]	@ (8008f18 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8008df4:	4013      	ands	r3, r2
 8008df6:	0019      	movs	r1, r3
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	695a      	ldr	r2, [r3, #20]
 8008dfc:	4b3f      	ldr	r3, [pc, #252]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	2380      	movs	r3, #128	@ 0x80
 8008e08:	00db      	lsls	r3, r3, #3
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	d009      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e12:	4a42      	ldr	r2, [pc, #264]	@ (8008f1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8008e14:	4013      	ands	r3, r2
 8008e16:	0019      	movs	r1, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	699a      	ldr	r2, [r3, #24]
 8008e1c:	4b37      	ldr	r3, [pc, #220]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2220      	movs	r2, #32
 8008e28:	4013      	ands	r3, r2
 8008e2a:	d009      	beq.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e2c:	4b33      	ldr	r3, [pc, #204]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e30:	4a3b      	ldr	r2, [pc, #236]	@ (8008f20 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8008e32:	4013      	ands	r3, r2
 8008e34:	0019      	movs	r1, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	4b30      	ldr	r3, [pc, #192]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e3c:	430a      	orrs	r2, r1
 8008e3e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	2380      	movs	r3, #128	@ 0x80
 8008e46:	01db      	lsls	r3, r3, #7
 8008e48:	4013      	ands	r3, r2
 8008e4a:	d015      	beq.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	0899      	lsrs	r1, r3, #2
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	69da      	ldr	r2, [r3, #28]
 8008e58:	4b28      	ldr	r3, [pc, #160]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	2380      	movs	r3, #128	@ 0x80
 8008e64:	05db      	lsls	r3, r3, #23
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d106      	bne.n	8008e78 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008e6a:	4b24      	ldr	r3, [pc, #144]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	4b23      	ldr	r3, [pc, #140]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e70:	2180      	movs	r1, #128	@ 0x80
 8008e72:	0249      	lsls	r1, r1, #9
 8008e74:	430a      	orrs	r2, r1
 8008e76:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	2380      	movs	r3, #128	@ 0x80
 8008e7e:	039b      	lsls	r3, r3, #14
 8008e80:	4013      	ands	r3, r2
 8008e82:	d016      	beq.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008e84:	4b1d      	ldr	r3, [pc, #116]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e88:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	0019      	movs	r1, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a1a      	ldr	r2, [r3, #32]
 8008e92:	4b1a      	ldr	r3, [pc, #104]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008e94:	430a      	orrs	r2, r1
 8008e96:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a1a      	ldr	r2, [r3, #32]
 8008e9c:	2380      	movs	r3, #128	@ 0x80
 8008e9e:	03db      	lsls	r3, r3, #15
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d106      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8008ea4:	4b15      	ldr	r3, [pc, #84]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ea6:	68da      	ldr	r2, [r3, #12]
 8008ea8:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008eaa:	2180      	movs	r1, #128	@ 0x80
 8008eac:	0449      	lsls	r1, r1, #17
 8008eae:	430a      	orrs	r2, r1
 8008eb0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	2380      	movs	r3, #128	@ 0x80
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	4013      	ands	r3, r2
 8008ebc:	d016      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ec2:	4a19      	ldr	r2, [pc, #100]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	0019      	movs	r1, r3
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	691a      	ldr	r2, [r3, #16]
 8008ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	691a      	ldr	r2, [r3, #16]
 8008ed6:	2380      	movs	r3, #128	@ 0x80
 8008ed8:	01db      	lsls	r3, r3, #7
 8008eda:	429a      	cmp	r2, r3
 8008edc:	d106      	bne.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8008ede:	4b07      	ldr	r3, [pc, #28]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8008ee4:	2180      	movs	r1, #128	@ 0x80
 8008ee6:	0249      	lsls	r1, r1, #9
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8008eec:	2312      	movs	r3, #18
 8008eee:	18fb      	adds	r3, r7, r3
 8008ef0:	781b      	ldrb	r3, [r3, #0]
}
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	b006      	add	sp, #24
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	46c0      	nop			@ (mov r8, r8)
 8008efc:	40021000 	.word	0x40021000
 8008f00:	40007000 	.word	0x40007000
 8008f04:	fffffcff 	.word	0xfffffcff
 8008f08:	fffeffff 	.word	0xfffeffff
 8008f0c:	00001388 	.word	0x00001388
 8008f10:	efffffff 	.word	0xefffffff
 8008f14:	fffff3ff 	.word	0xfffff3ff
 8008f18:	fff3ffff 	.word	0xfff3ffff
 8008f1c:	ffcfffff 	.word	0xffcfffff
 8008f20:	ffffcfff 	.word	0xffffcfff
 8008f24:	ffbfffff 	.word	0xffbfffff
 8008f28:	ffff3fff 	.word	0xffff3fff

08008f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e056      	b.n	8008fec <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	223d      	movs	r2, #61	@ 0x3d
 8008f42:	5c9b      	ldrb	r3, [r3, r2]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d113      	bne.n	8008f72 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	223c      	movs	r2, #60	@ 0x3c
 8008f4e:	2100      	movs	r1, #0
 8008f50:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	0018      	movs	r0, r3
 8008f56:	f002 f8c5 	bl	800b0e4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d102      	bne.n	8008f68 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a23      	ldr	r2, [pc, #140]	@ (8008ff4 <HAL_TIM_Base_Init+0xc8>)
 8008f66:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	0010      	movs	r0, r2
 8008f70:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	223d      	movs	r2, #61	@ 0x3d
 8008f76:	2102      	movs	r1, #2
 8008f78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	3304      	adds	r3, #4
 8008f82:	0019      	movs	r1, r3
 8008f84:	0010      	movs	r0, r2
 8008f86:	f001 fbaf 	bl	800a6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2248      	movs	r2, #72	@ 0x48
 8008f8e:	2101      	movs	r1, #1
 8008f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	223e      	movs	r2, #62	@ 0x3e
 8008f96:	2101      	movs	r1, #1
 8008f98:	5499      	strb	r1, [r3, r2]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	223f      	movs	r2, #63	@ 0x3f
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	5499      	strb	r1, [r3, r2]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2240      	movs	r2, #64	@ 0x40
 8008fa6:	2101      	movs	r1, #1
 8008fa8:	5499      	strb	r1, [r3, r2]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2241      	movs	r2, #65	@ 0x41
 8008fae:	2101      	movs	r1, #1
 8008fb0:	5499      	strb	r1, [r3, r2]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2242      	movs	r2, #66	@ 0x42
 8008fb6:	2101      	movs	r1, #1
 8008fb8:	5499      	strb	r1, [r3, r2]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2243      	movs	r2, #67	@ 0x43
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2244      	movs	r2, #68	@ 0x44
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	5499      	strb	r1, [r3, r2]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2245      	movs	r2, #69	@ 0x45
 8008fce:	2101      	movs	r1, #1
 8008fd0:	5499      	strb	r1, [r3, r2]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2246      	movs	r2, #70	@ 0x46
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	5499      	strb	r1, [r3, r2]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2247      	movs	r2, #71	@ 0x47
 8008fde:	2101      	movs	r1, #1
 8008fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	223d      	movs	r2, #61	@ 0x3d
 8008fe6:	2101      	movs	r1, #1
 8008fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008fea:	2300      	movs	r3, #0
}
 8008fec:	0018      	movs	r0, r3
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	08004959 	.word	0x08004959

08008ff8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	223d      	movs	r2, #61	@ 0x3d
 8009004:	5c9b      	ldrb	r3, [r3, r2]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b01      	cmp	r3, #1
 800900a:	d001      	beq.n	8009010 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e035      	b.n	800907c <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	223d      	movs	r2, #61	@ 0x3d
 8009014:	2102      	movs	r1, #2
 8009016:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a19      	ldr	r2, [pc, #100]	@ (8009084 <HAL_TIM_Base_Start+0x8c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d00a      	beq.n	8009038 <HAL_TIM_Base_Start+0x40>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681a      	ldr	r2, [r3, #0]
 8009026:	2380      	movs	r3, #128	@ 0x80
 8009028:	05db      	lsls	r3, r3, #23
 800902a:	429a      	cmp	r2, r3
 800902c:	d004      	beq.n	8009038 <HAL_TIM_Base_Start+0x40>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a15      	ldr	r2, [pc, #84]	@ (8009088 <HAL_TIM_Base_Start+0x90>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d116      	bne.n	8009066 <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	4a13      	ldr	r2, [pc, #76]	@ (800908c <HAL_TIM_Base_Start+0x94>)
 8009040:	4013      	ands	r3, r2
 8009042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2b06      	cmp	r3, #6
 8009048:	d016      	beq.n	8009078 <HAL_TIM_Base_Start+0x80>
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	2380      	movs	r3, #128	@ 0x80
 800904e:	025b      	lsls	r3, r3, #9
 8009050:	429a      	cmp	r2, r3
 8009052:	d011      	beq.n	8009078 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2101      	movs	r1, #1
 8009060:	430a      	orrs	r2, r1
 8009062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009064:	e008      	b.n	8009078 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2101      	movs	r1, #1
 8009072:	430a      	orrs	r2, r1
 8009074:	601a      	str	r2, [r3, #0]
 8009076:	e000      	b.n	800907a <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009078:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	0018      	movs	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	b004      	add	sp, #16
 8009082:	bd80      	pop	{r7, pc}
 8009084:	40012c00 	.word	0x40012c00
 8009088:	40000400 	.word	0x40000400
 800908c:	00010007 	.word	0x00010007

08009090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b084      	sub	sp, #16
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	223d      	movs	r2, #61	@ 0x3d
 800909c:	5c9b      	ldrb	r3, [r3, r2]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d001      	beq.n	80090a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e03d      	b.n	8009124 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	223d      	movs	r2, #61	@ 0x3d
 80090ac:	2102      	movs	r1, #2
 80090ae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68da      	ldr	r2, [r3, #12]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2101      	movs	r1, #1
 80090bc:	430a      	orrs	r2, r1
 80090be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a19      	ldr	r2, [pc, #100]	@ (800912c <HAL_TIM_Base_Start_IT+0x9c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00a      	beq.n	80090e0 <HAL_TIM_Base_Start_IT+0x50>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	2380      	movs	r3, #128	@ 0x80
 80090d0:	05db      	lsls	r3, r3, #23
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d004      	beq.n	80090e0 <HAL_TIM_Base_Start_IT+0x50>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a15      	ldr	r2, [pc, #84]	@ (8009130 <HAL_TIM_Base_Start_IT+0xa0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d116      	bne.n	800910e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	4a13      	ldr	r2, [pc, #76]	@ (8009134 <HAL_TIM_Base_Start_IT+0xa4>)
 80090e8:	4013      	ands	r3, r2
 80090ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2b06      	cmp	r3, #6
 80090f0:	d016      	beq.n	8009120 <HAL_TIM_Base_Start_IT+0x90>
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	2380      	movs	r3, #128	@ 0x80
 80090f6:	025b      	lsls	r3, r3, #9
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d011      	beq.n	8009120 <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2101      	movs	r1, #1
 8009108:	430a      	orrs	r2, r1
 800910a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800910c:	e008      	b.n	8009120 <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2101      	movs	r1, #1
 800911a:	430a      	orrs	r2, r1
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	e000      	b.n	8009122 <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009120:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009122:	2300      	movs	r3, #0
}
 8009124:	0018      	movs	r0, r3
 8009126:	46bd      	mov	sp, r7
 8009128:	b004      	add	sp, #16
 800912a:	bd80      	pop	{r7, pc}
 800912c:	40012c00 	.word	0x40012c00
 8009130:	40000400 	.word	0x40000400
 8009134:	00010007 	.word	0x00010007

08009138 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e056      	b.n	80091f8 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	223d      	movs	r2, #61	@ 0x3d
 800914e:	5c9b      	ldrb	r3, [r3, r2]
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d113      	bne.n	800917e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	223c      	movs	r2, #60	@ 0x3c
 800915a:	2100      	movs	r1, #0
 800915c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	0018      	movs	r0, r3
 8009162:	f001 ffbf 	bl	800b0e4 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800916a:	2b00      	cmp	r3, #0
 800916c:	d102      	bne.n	8009174 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a23      	ldr	r2, [pc, #140]	@ (8009200 <HAL_TIM_OC_Init+0xc8>)
 8009172:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	0010      	movs	r0, r2
 800917c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	223d      	movs	r2, #61	@ 0x3d
 8009182:	2102      	movs	r1, #2
 8009184:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3304      	adds	r3, #4
 800918e:	0019      	movs	r1, r3
 8009190:	0010      	movs	r0, r2
 8009192:	f001 faa9 	bl	800a6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2248      	movs	r2, #72	@ 0x48
 800919a:	2101      	movs	r1, #1
 800919c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	223e      	movs	r2, #62	@ 0x3e
 80091a2:	2101      	movs	r1, #1
 80091a4:	5499      	strb	r1, [r3, r2]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	223f      	movs	r2, #63	@ 0x3f
 80091aa:	2101      	movs	r1, #1
 80091ac:	5499      	strb	r1, [r3, r2]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2240      	movs	r2, #64	@ 0x40
 80091b2:	2101      	movs	r1, #1
 80091b4:	5499      	strb	r1, [r3, r2]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2241      	movs	r2, #65	@ 0x41
 80091ba:	2101      	movs	r1, #1
 80091bc:	5499      	strb	r1, [r3, r2]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2242      	movs	r2, #66	@ 0x42
 80091c2:	2101      	movs	r1, #1
 80091c4:	5499      	strb	r1, [r3, r2]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2243      	movs	r2, #67	@ 0x43
 80091ca:	2101      	movs	r1, #1
 80091cc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2244      	movs	r2, #68	@ 0x44
 80091d2:	2101      	movs	r1, #1
 80091d4:	5499      	strb	r1, [r3, r2]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2245      	movs	r2, #69	@ 0x45
 80091da:	2101      	movs	r1, #1
 80091dc:	5499      	strb	r1, [r3, r2]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2246      	movs	r2, #70	@ 0x46
 80091e2:	2101      	movs	r1, #1
 80091e4:	5499      	strb	r1, [r3, r2]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2247      	movs	r2, #71	@ 0x47
 80091ea:	2101      	movs	r1, #1
 80091ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	223d      	movs	r2, #61	@ 0x3d
 80091f2:	2101      	movs	r1, #1
 80091f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	0018      	movs	r0, r3
 80091fa:	46bd      	mov	sp, r7
 80091fc:	b002      	add	sp, #8
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	08009205 	.word	0x08009205

08009204 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800920c:	46c0      	nop			@ (mov r8, r8)
 800920e:	46bd      	mov	sp, r7
 8009210:	b002      	add	sp, #8
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800921e:	230f      	movs	r3, #15
 8009220:	18fb      	adds	r3, r7, r3
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d108      	bne.n	800923e <HAL_TIM_OC_Start_IT+0x2a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	223e      	movs	r2, #62	@ 0x3e
 8009230:	5c9b      	ldrb	r3, [r3, r2]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	3b01      	subs	r3, #1
 8009236:	1e5a      	subs	r2, r3, #1
 8009238:	4193      	sbcs	r3, r2
 800923a:	b2db      	uxtb	r3, r3
 800923c:	e037      	b.n	80092ae <HAL_TIM_OC_Start_IT+0x9a>
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	2b04      	cmp	r3, #4
 8009242:	d108      	bne.n	8009256 <HAL_TIM_OC_Start_IT+0x42>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	223f      	movs	r2, #63	@ 0x3f
 8009248:	5c9b      	ldrb	r3, [r3, r2]
 800924a:	b2db      	uxtb	r3, r3
 800924c:	3b01      	subs	r3, #1
 800924e:	1e5a      	subs	r2, r3, #1
 8009250:	4193      	sbcs	r3, r2
 8009252:	b2db      	uxtb	r3, r3
 8009254:	e02b      	b.n	80092ae <HAL_TIM_OC_Start_IT+0x9a>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	2b08      	cmp	r3, #8
 800925a:	d108      	bne.n	800926e <HAL_TIM_OC_Start_IT+0x5a>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2240      	movs	r2, #64	@ 0x40
 8009260:	5c9b      	ldrb	r3, [r3, r2]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	3b01      	subs	r3, #1
 8009266:	1e5a      	subs	r2, r3, #1
 8009268:	4193      	sbcs	r3, r2
 800926a:	b2db      	uxtb	r3, r3
 800926c:	e01f      	b.n	80092ae <HAL_TIM_OC_Start_IT+0x9a>
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b0c      	cmp	r3, #12
 8009272:	d108      	bne.n	8009286 <HAL_TIM_OC_Start_IT+0x72>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2241      	movs	r2, #65	@ 0x41
 8009278:	5c9b      	ldrb	r3, [r3, r2]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	3b01      	subs	r3, #1
 800927e:	1e5a      	subs	r2, r3, #1
 8009280:	4193      	sbcs	r3, r2
 8009282:	b2db      	uxtb	r3, r3
 8009284:	e013      	b.n	80092ae <HAL_TIM_OC_Start_IT+0x9a>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b10      	cmp	r3, #16
 800928a:	d108      	bne.n	800929e <HAL_TIM_OC_Start_IT+0x8a>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2242      	movs	r2, #66	@ 0x42
 8009290:	5c9b      	ldrb	r3, [r3, r2]
 8009292:	b2db      	uxtb	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	1e5a      	subs	r2, r3, #1
 8009298:	4193      	sbcs	r3, r2
 800929a:	b2db      	uxtb	r3, r3
 800929c:	e007      	b.n	80092ae <HAL_TIM_OC_Start_IT+0x9a>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2243      	movs	r2, #67	@ 0x43
 80092a2:	5c9b      	ldrb	r3, [r3, r2]
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	1e5a      	subs	r2, r3, #1
 80092aa:	4193      	sbcs	r3, r2
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e0c4      	b.n	8009440 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d104      	bne.n	80092c6 <HAL_TIM_OC_Start_IT+0xb2>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	223e      	movs	r2, #62	@ 0x3e
 80092c0:	2102      	movs	r1, #2
 80092c2:	5499      	strb	r1, [r3, r2]
 80092c4:	e023      	b.n	800930e <HAL_TIM_OC_Start_IT+0xfa>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d104      	bne.n	80092d6 <HAL_TIM_OC_Start_IT+0xc2>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	223f      	movs	r2, #63	@ 0x3f
 80092d0:	2102      	movs	r1, #2
 80092d2:	5499      	strb	r1, [r3, r2]
 80092d4:	e01b      	b.n	800930e <HAL_TIM_OC_Start_IT+0xfa>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b08      	cmp	r3, #8
 80092da:	d104      	bne.n	80092e6 <HAL_TIM_OC_Start_IT+0xd2>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2240      	movs	r2, #64	@ 0x40
 80092e0:	2102      	movs	r1, #2
 80092e2:	5499      	strb	r1, [r3, r2]
 80092e4:	e013      	b.n	800930e <HAL_TIM_OC_Start_IT+0xfa>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b0c      	cmp	r3, #12
 80092ea:	d104      	bne.n	80092f6 <HAL_TIM_OC_Start_IT+0xe2>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2241      	movs	r2, #65	@ 0x41
 80092f0:	2102      	movs	r1, #2
 80092f2:	5499      	strb	r1, [r3, r2]
 80092f4:	e00b      	b.n	800930e <HAL_TIM_OC_Start_IT+0xfa>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b10      	cmp	r3, #16
 80092fa:	d104      	bne.n	8009306 <HAL_TIM_OC_Start_IT+0xf2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2242      	movs	r2, #66	@ 0x42
 8009300:	2102      	movs	r1, #2
 8009302:	5499      	strb	r1, [r3, r2]
 8009304:	e003      	b.n	800930e <HAL_TIM_OC_Start_IT+0xfa>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2243      	movs	r2, #67	@ 0x43
 800930a:	2102      	movs	r1, #2
 800930c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b0c      	cmp	r3, #12
 8009312:	d02a      	beq.n	800936a <HAL_TIM_OC_Start_IT+0x156>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	2b0c      	cmp	r3, #12
 8009318:	d830      	bhi.n	800937c <HAL_TIM_OC_Start_IT+0x168>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b08      	cmp	r3, #8
 800931e:	d01b      	beq.n	8009358 <HAL_TIM_OC_Start_IT+0x144>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	2b08      	cmp	r3, #8
 8009324:	d82a      	bhi.n	800937c <HAL_TIM_OC_Start_IT+0x168>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d003      	beq.n	8009334 <HAL_TIM_OC_Start_IT+0x120>
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	2b04      	cmp	r3, #4
 8009330:	d009      	beq.n	8009346 <HAL_TIM_OC_Start_IT+0x132>
 8009332:	e023      	b.n	800937c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68da      	ldr	r2, [r3, #12]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2102      	movs	r1, #2
 8009340:	430a      	orrs	r2, r1
 8009342:	60da      	str	r2, [r3, #12]
      break;
 8009344:	e01f      	b.n	8009386 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2104      	movs	r1, #4
 8009352:	430a      	orrs	r2, r1
 8009354:	60da      	str	r2, [r3, #12]
      break;
 8009356:	e016      	b.n	8009386 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2108      	movs	r1, #8
 8009364:	430a      	orrs	r2, r1
 8009366:	60da      	str	r2, [r3, #12]
      break;
 8009368:	e00d      	b.n	8009386 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	68da      	ldr	r2, [r3, #12]
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2110      	movs	r1, #16
 8009376:	430a      	orrs	r2, r1
 8009378:	60da      	str	r2, [r3, #12]
      break;
 800937a:	e004      	b.n	8009386 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800937c:	230f      	movs	r3, #15
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	2201      	movs	r2, #1
 8009382:	701a      	strb	r2, [r3, #0]
      break;
 8009384:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009386:	230f      	movs	r3, #15
 8009388:	18fb      	adds	r3, r7, r3
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d154      	bne.n	800943a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	2201      	movs	r2, #1
 8009398:	0018      	movs	r0, r3
 800939a:	f001 fe7f 	bl	800b09c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a29      	ldr	r2, [pc, #164]	@ (8009448 <HAL_TIM_OC_Start_IT+0x234>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d009      	beq.n	80093bc <HAL_TIM_OC_Start_IT+0x1a8>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a27      	ldr	r2, [pc, #156]	@ (800944c <HAL_TIM_OC_Start_IT+0x238>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d004      	beq.n	80093bc <HAL_TIM_OC_Start_IT+0x1a8>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a26      	ldr	r2, [pc, #152]	@ (8009450 <HAL_TIM_OC_Start_IT+0x23c>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d101      	bne.n	80093c0 <HAL_TIM_OC_Start_IT+0x1ac>
 80093bc:	2301      	movs	r3, #1
 80093be:	e000      	b.n	80093c2 <HAL_TIM_OC_Start_IT+0x1ae>
 80093c0:	2300      	movs	r3, #0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d008      	beq.n	80093d8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	2180      	movs	r1, #128	@ 0x80
 80093d2:	0209      	lsls	r1, r1, #8
 80093d4:	430a      	orrs	r2, r1
 80093d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a1a      	ldr	r2, [pc, #104]	@ (8009448 <HAL_TIM_OC_Start_IT+0x234>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00a      	beq.n	80093f8 <HAL_TIM_OC_Start_IT+0x1e4>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	2380      	movs	r3, #128	@ 0x80
 80093e8:	05db      	lsls	r3, r3, #23
 80093ea:	429a      	cmp	r2, r3
 80093ec:	d004      	beq.n	80093f8 <HAL_TIM_OC_Start_IT+0x1e4>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a18      	ldr	r2, [pc, #96]	@ (8009454 <HAL_TIM_OC_Start_IT+0x240>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d116      	bne.n	8009426 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	4a16      	ldr	r2, [pc, #88]	@ (8009458 <HAL_TIM_OC_Start_IT+0x244>)
 8009400:	4013      	ands	r3, r2
 8009402:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b06      	cmp	r3, #6
 8009408:	d016      	beq.n	8009438 <HAL_TIM_OC_Start_IT+0x224>
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	2380      	movs	r3, #128	@ 0x80
 800940e:	025b      	lsls	r3, r3, #9
 8009410:	429a      	cmp	r2, r3
 8009412:	d011      	beq.n	8009438 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2101      	movs	r1, #1
 8009420:	430a      	orrs	r2, r1
 8009422:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009424:	e008      	b.n	8009438 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2101      	movs	r1, #1
 8009432:	430a      	orrs	r2, r1
 8009434:	601a      	str	r2, [r3, #0]
 8009436:	e000      	b.n	800943a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009438:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800943a:	230f      	movs	r3, #15
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
}
 8009440:	0018      	movs	r0, r3
 8009442:	46bd      	mov	sp, r7
 8009444:	b004      	add	sp, #16
 8009446:	bd80      	pop	{r7, pc}
 8009448:	40012c00 	.word	0x40012c00
 800944c:	40014400 	.word	0x40014400
 8009450:	40014800 	.word	0x40014800
 8009454:	40000400 	.word	0x40000400
 8009458:	00010007 	.word	0x00010007

0800945c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009466:	230f      	movs	r3, #15
 8009468:	18fb      	adds	r3, r7, r3
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b0c      	cmp	r3, #12
 8009472:	d02a      	beq.n	80094ca <HAL_TIM_OC_Stop_IT+0x6e>
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b0c      	cmp	r3, #12
 8009478:	d830      	bhi.n	80094dc <HAL_TIM_OC_Stop_IT+0x80>
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	2b08      	cmp	r3, #8
 800947e:	d01b      	beq.n	80094b8 <HAL_TIM_OC_Stop_IT+0x5c>
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2b08      	cmp	r3, #8
 8009484:	d82a      	bhi.n	80094dc <HAL_TIM_OC_Stop_IT+0x80>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d003      	beq.n	8009494 <HAL_TIM_OC_Stop_IT+0x38>
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	2b04      	cmp	r3, #4
 8009490:	d009      	beq.n	80094a6 <HAL_TIM_OC_Stop_IT+0x4a>
 8009492:	e023      	b.n	80094dc <HAL_TIM_OC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68da      	ldr	r2, [r3, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2102      	movs	r1, #2
 80094a0:	438a      	bics	r2, r1
 80094a2:	60da      	str	r2, [r3, #12]
      break;
 80094a4:	e01f      	b.n	80094e6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2104      	movs	r1, #4
 80094b2:	438a      	bics	r2, r1
 80094b4:	60da      	str	r2, [r3, #12]
      break;
 80094b6:	e016      	b.n	80094e6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2108      	movs	r1, #8
 80094c4:	438a      	bics	r2, r1
 80094c6:	60da      	str	r2, [r3, #12]
      break;
 80094c8:	e00d      	b.n	80094e6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2110      	movs	r1, #16
 80094d6:	438a      	bics	r2, r1
 80094d8:	60da      	str	r2, [r3, #12]
      break;
 80094da:	e004      	b.n	80094e6 <HAL_TIM_OC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80094dc:	230f      	movs	r3, #15
 80094de:	18fb      	adds	r3, r7, r3
 80094e0:	2201      	movs	r2, #1
 80094e2:	701a      	strb	r2, [r3, #0]
      break;
 80094e4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80094e6:	230f      	movs	r3, #15
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d000      	beq.n	80094f2 <HAL_TIM_OC_Stop_IT+0x96>
 80094f0:	e06e      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	6839      	ldr	r1, [r7, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	0018      	movs	r0, r3
 80094fc:	f001 fdce 	bl	800b09c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a36      	ldr	r2, [pc, #216]	@ (80095e0 <HAL_TIM_OC_Stop_IT+0x184>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d009      	beq.n	800951e <HAL_TIM_OC_Stop_IT+0xc2>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a35      	ldr	r2, [pc, #212]	@ (80095e4 <HAL_TIM_OC_Stop_IT+0x188>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d004      	beq.n	800951e <HAL_TIM_OC_Stop_IT+0xc2>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a33      	ldr	r2, [pc, #204]	@ (80095e8 <HAL_TIM_OC_Stop_IT+0x18c>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d101      	bne.n	8009522 <HAL_TIM_OC_Stop_IT+0xc6>
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <HAL_TIM_OC_Stop_IT+0xc8>
 8009522:	2300      	movs	r3, #0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d013      	beq.n	8009550 <HAL_TIM_OC_Stop_IT+0xf4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6a1b      	ldr	r3, [r3, #32]
 800952e:	4a2f      	ldr	r2, [pc, #188]	@ (80095ec <HAL_TIM_OC_Stop_IT+0x190>)
 8009530:	4013      	ands	r3, r2
 8009532:	d10d      	bne.n	8009550 <HAL_TIM_OC_Stop_IT+0xf4>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a1b      	ldr	r3, [r3, #32]
 800953a:	4a2d      	ldr	r2, [pc, #180]	@ (80095f0 <HAL_TIM_OC_Stop_IT+0x194>)
 800953c:	4013      	ands	r3, r2
 800953e:	d107      	bne.n	8009550 <HAL_TIM_OC_Stop_IT+0xf4>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	492a      	ldr	r1, [pc, #168]	@ (80095f4 <HAL_TIM_OC_Stop_IT+0x198>)
 800954c:	400a      	ands	r2, r1
 800954e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6a1b      	ldr	r3, [r3, #32]
 8009556:	4a25      	ldr	r2, [pc, #148]	@ (80095ec <HAL_TIM_OC_Stop_IT+0x190>)
 8009558:	4013      	ands	r3, r2
 800955a:	d10d      	bne.n	8009578 <HAL_TIM_OC_Stop_IT+0x11c>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6a1b      	ldr	r3, [r3, #32]
 8009562:	4a23      	ldr	r2, [pc, #140]	@ (80095f0 <HAL_TIM_OC_Stop_IT+0x194>)
 8009564:	4013      	ands	r3, r2
 8009566:	d107      	bne.n	8009578 <HAL_TIM_OC_Stop_IT+0x11c>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	2101      	movs	r1, #1
 8009574:	438a      	bics	r2, r1
 8009576:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <HAL_TIM_OC_Stop_IT+0x12c>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	223e      	movs	r2, #62	@ 0x3e
 8009582:	2101      	movs	r1, #1
 8009584:	5499      	strb	r1, [r3, r2]
 8009586:	e023      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	2b04      	cmp	r3, #4
 800958c:	d104      	bne.n	8009598 <HAL_TIM_OC_Stop_IT+0x13c>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	223f      	movs	r2, #63	@ 0x3f
 8009592:	2101      	movs	r1, #1
 8009594:	5499      	strb	r1, [r3, r2]
 8009596:	e01b      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	2b08      	cmp	r3, #8
 800959c:	d104      	bne.n	80095a8 <HAL_TIM_OC_Stop_IT+0x14c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2240      	movs	r2, #64	@ 0x40
 80095a2:	2101      	movs	r1, #1
 80095a4:	5499      	strb	r1, [r3, r2]
 80095a6:	e013      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	2b0c      	cmp	r3, #12
 80095ac:	d104      	bne.n	80095b8 <HAL_TIM_OC_Stop_IT+0x15c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2241      	movs	r2, #65	@ 0x41
 80095b2:	2101      	movs	r1, #1
 80095b4:	5499      	strb	r1, [r3, r2]
 80095b6:	e00b      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b10      	cmp	r3, #16
 80095bc:	d104      	bne.n	80095c8 <HAL_TIM_OC_Stop_IT+0x16c>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2242      	movs	r2, #66	@ 0x42
 80095c2:	2101      	movs	r1, #1
 80095c4:	5499      	strb	r1, [r3, r2]
 80095c6:	e003      	b.n	80095d0 <HAL_TIM_OC_Stop_IT+0x174>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2243      	movs	r2, #67	@ 0x43
 80095cc:	2101      	movs	r1, #1
 80095ce:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80095d0:	230f      	movs	r3, #15
 80095d2:	18fb      	adds	r3, r7, r3
 80095d4:	781b      	ldrb	r3, [r3, #0]
}
 80095d6:	0018      	movs	r0, r3
 80095d8:	46bd      	mov	sp, r7
 80095da:	b004      	add	sp, #16
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	46c0      	nop			@ (mov r8, r8)
 80095e0:	40012c00 	.word	0x40012c00
 80095e4:	40014400 	.word	0x40014400
 80095e8:	40014800 	.word	0x40014800
 80095ec:	00001111 	.word	0x00001111
 80095f0:	00000444 	.word	0x00000444
 80095f4:	ffff7fff 	.word	0xffff7fff

080095f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d101      	bne.n	800960a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e056      	b.n	80096b8 <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	223d      	movs	r2, #61	@ 0x3d
 800960e:	5c9b      	ldrb	r3, [r3, r2]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	2b00      	cmp	r3, #0
 8009614:	d113      	bne.n	800963e <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	223c      	movs	r2, #60	@ 0x3c
 800961a:	2100      	movs	r1, #0
 800961c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	0018      	movs	r0, r3
 8009622:	f001 fd5f 	bl	800b0e4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800962a:	2b00      	cmp	r3, #0
 800962c:	d102      	bne.n	8009634 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a23      	ldr	r2, [pc, #140]	@ (80096c0 <HAL_TIM_PWM_Init+0xc8>)
 8009632:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	0010      	movs	r0, r2
 800963c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	223d      	movs	r2, #61	@ 0x3d
 8009642:	2102      	movs	r1, #2
 8009644:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	3304      	adds	r3, #4
 800964e:	0019      	movs	r1, r3
 8009650:	0010      	movs	r0, r2
 8009652:	f001 f849 	bl	800a6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2248      	movs	r2, #72	@ 0x48
 800965a:	2101      	movs	r1, #1
 800965c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	223e      	movs	r2, #62	@ 0x3e
 8009662:	2101      	movs	r1, #1
 8009664:	5499      	strb	r1, [r3, r2]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	223f      	movs	r2, #63	@ 0x3f
 800966a:	2101      	movs	r1, #1
 800966c:	5499      	strb	r1, [r3, r2]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2240      	movs	r2, #64	@ 0x40
 8009672:	2101      	movs	r1, #1
 8009674:	5499      	strb	r1, [r3, r2]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2241      	movs	r2, #65	@ 0x41
 800967a:	2101      	movs	r1, #1
 800967c:	5499      	strb	r1, [r3, r2]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2242      	movs	r2, #66	@ 0x42
 8009682:	2101      	movs	r1, #1
 8009684:	5499      	strb	r1, [r3, r2]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2243      	movs	r2, #67	@ 0x43
 800968a:	2101      	movs	r1, #1
 800968c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2244      	movs	r2, #68	@ 0x44
 8009692:	2101      	movs	r1, #1
 8009694:	5499      	strb	r1, [r3, r2]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2245      	movs	r2, #69	@ 0x45
 800969a:	2101      	movs	r1, #1
 800969c:	5499      	strb	r1, [r3, r2]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2246      	movs	r2, #70	@ 0x46
 80096a2:	2101      	movs	r1, #1
 80096a4:	5499      	strb	r1, [r3, r2]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2247      	movs	r2, #71	@ 0x47
 80096aa:	2101      	movs	r1, #1
 80096ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	223d      	movs	r2, #61	@ 0x3d
 80096b2:	2101      	movs	r1, #1
 80096b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	0018      	movs	r0, r3
 80096ba:	46bd      	mov	sp, r7
 80096bc:	b002      	add	sp, #8
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	080096c5 	.word	0x080096c5

080096c4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096cc:	46c0      	nop			@ (mov r8, r8)
 80096ce:	46bd      	mov	sp, r7
 80096d0:	b002      	add	sp, #8
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
 80096dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d108      	bne.n	80096f6 <HAL_TIM_PWM_Start+0x22>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	223e      	movs	r2, #62	@ 0x3e
 80096e8:	5c9b      	ldrb	r3, [r3, r2]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	1e5a      	subs	r2, r3, #1
 80096f0:	4193      	sbcs	r3, r2
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	e037      	b.n	8009766 <HAL_TIM_PWM_Start+0x92>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d108      	bne.n	800970e <HAL_TIM_PWM_Start+0x3a>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	223f      	movs	r2, #63	@ 0x3f
 8009700:	5c9b      	ldrb	r3, [r3, r2]
 8009702:	b2db      	uxtb	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	1e5a      	subs	r2, r3, #1
 8009708:	4193      	sbcs	r3, r2
 800970a:	b2db      	uxtb	r3, r3
 800970c:	e02b      	b.n	8009766 <HAL_TIM_PWM_Start+0x92>
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2b08      	cmp	r3, #8
 8009712:	d108      	bne.n	8009726 <HAL_TIM_PWM_Start+0x52>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2240      	movs	r2, #64	@ 0x40
 8009718:	5c9b      	ldrb	r3, [r3, r2]
 800971a:	b2db      	uxtb	r3, r3
 800971c:	3b01      	subs	r3, #1
 800971e:	1e5a      	subs	r2, r3, #1
 8009720:	4193      	sbcs	r3, r2
 8009722:	b2db      	uxtb	r3, r3
 8009724:	e01f      	b.n	8009766 <HAL_TIM_PWM_Start+0x92>
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b0c      	cmp	r3, #12
 800972a:	d108      	bne.n	800973e <HAL_TIM_PWM_Start+0x6a>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2241      	movs	r2, #65	@ 0x41
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	3b01      	subs	r3, #1
 8009736:	1e5a      	subs	r2, r3, #1
 8009738:	4193      	sbcs	r3, r2
 800973a:	b2db      	uxtb	r3, r3
 800973c:	e013      	b.n	8009766 <HAL_TIM_PWM_Start+0x92>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b10      	cmp	r3, #16
 8009742:	d108      	bne.n	8009756 <HAL_TIM_PWM_Start+0x82>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2242      	movs	r2, #66	@ 0x42
 8009748:	5c9b      	ldrb	r3, [r3, r2]
 800974a:	b2db      	uxtb	r3, r3
 800974c:	3b01      	subs	r3, #1
 800974e:	1e5a      	subs	r2, r3, #1
 8009750:	4193      	sbcs	r3, r2
 8009752:	b2db      	uxtb	r3, r3
 8009754:	e007      	b.n	8009766 <HAL_TIM_PWM_Start+0x92>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2243      	movs	r2, #67	@ 0x43
 800975a:	5c9b      	ldrb	r3, [r3, r2]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	3b01      	subs	r3, #1
 8009760:	1e5a      	subs	r2, r3, #1
 8009762:	4193      	sbcs	r3, r2
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e081      	b.n	8009872 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d104      	bne.n	800977e <HAL_TIM_PWM_Start+0xaa>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	223e      	movs	r2, #62	@ 0x3e
 8009778:	2102      	movs	r1, #2
 800977a:	5499      	strb	r1, [r3, r2]
 800977c:	e023      	b.n	80097c6 <HAL_TIM_PWM_Start+0xf2>
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	2b04      	cmp	r3, #4
 8009782:	d104      	bne.n	800978e <HAL_TIM_PWM_Start+0xba>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	223f      	movs	r2, #63	@ 0x3f
 8009788:	2102      	movs	r1, #2
 800978a:	5499      	strb	r1, [r3, r2]
 800978c:	e01b      	b.n	80097c6 <HAL_TIM_PWM_Start+0xf2>
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	2b08      	cmp	r3, #8
 8009792:	d104      	bne.n	800979e <HAL_TIM_PWM_Start+0xca>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2240      	movs	r2, #64	@ 0x40
 8009798:	2102      	movs	r1, #2
 800979a:	5499      	strb	r1, [r3, r2]
 800979c:	e013      	b.n	80097c6 <HAL_TIM_PWM_Start+0xf2>
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	2b0c      	cmp	r3, #12
 80097a2:	d104      	bne.n	80097ae <HAL_TIM_PWM_Start+0xda>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2241      	movs	r2, #65	@ 0x41
 80097a8:	2102      	movs	r1, #2
 80097aa:	5499      	strb	r1, [r3, r2]
 80097ac:	e00b      	b.n	80097c6 <HAL_TIM_PWM_Start+0xf2>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	2b10      	cmp	r3, #16
 80097b2:	d104      	bne.n	80097be <HAL_TIM_PWM_Start+0xea>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2242      	movs	r2, #66	@ 0x42
 80097b8:	2102      	movs	r1, #2
 80097ba:	5499      	strb	r1, [r3, r2]
 80097bc:	e003      	b.n	80097c6 <HAL_TIM_PWM_Start+0xf2>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2243      	movs	r2, #67	@ 0x43
 80097c2:	2102      	movs	r1, #2
 80097c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	2201      	movs	r2, #1
 80097ce:	0018      	movs	r0, r3
 80097d0:	f001 fc64 	bl	800b09c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a28      	ldr	r2, [pc, #160]	@ (800987c <HAL_TIM_PWM_Start+0x1a8>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d009      	beq.n	80097f2 <HAL_TIM_PWM_Start+0x11e>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a27      	ldr	r2, [pc, #156]	@ (8009880 <HAL_TIM_PWM_Start+0x1ac>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d004      	beq.n	80097f2 <HAL_TIM_PWM_Start+0x11e>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a25      	ldr	r2, [pc, #148]	@ (8009884 <HAL_TIM_PWM_Start+0x1b0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d101      	bne.n	80097f6 <HAL_TIM_PWM_Start+0x122>
 80097f2:	2301      	movs	r3, #1
 80097f4:	e000      	b.n	80097f8 <HAL_TIM_PWM_Start+0x124>
 80097f6:	2300      	movs	r3, #0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d008      	beq.n	800980e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	2180      	movs	r1, #128	@ 0x80
 8009808:	0209      	lsls	r1, r1, #8
 800980a:	430a      	orrs	r2, r1
 800980c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a1a      	ldr	r2, [pc, #104]	@ (800987c <HAL_TIM_PWM_Start+0x1a8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d00a      	beq.n	800982e <HAL_TIM_PWM_Start+0x15a>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681a      	ldr	r2, [r3, #0]
 800981c:	2380      	movs	r3, #128	@ 0x80
 800981e:	05db      	lsls	r3, r3, #23
 8009820:	429a      	cmp	r2, r3
 8009822:	d004      	beq.n	800982e <HAL_TIM_PWM_Start+0x15a>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a17      	ldr	r2, [pc, #92]	@ (8009888 <HAL_TIM_PWM_Start+0x1b4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d116      	bne.n	800985c <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	4a15      	ldr	r2, [pc, #84]	@ (800988c <HAL_TIM_PWM_Start+0x1b8>)
 8009836:	4013      	ands	r3, r2
 8009838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b06      	cmp	r3, #6
 800983e:	d016      	beq.n	800986e <HAL_TIM_PWM_Start+0x19a>
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	2380      	movs	r3, #128	@ 0x80
 8009844:	025b      	lsls	r3, r3, #9
 8009846:	429a      	cmp	r2, r3
 8009848:	d011      	beq.n	800986e <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2101      	movs	r1, #1
 8009856:	430a      	orrs	r2, r1
 8009858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800985a:	e008      	b.n	800986e <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2101      	movs	r1, #1
 8009868:	430a      	orrs	r2, r1
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e000      	b.n	8009870 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800986e:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	0018      	movs	r0, r3
 8009874:	46bd      	mov	sp, r7
 8009876:	b004      	add	sp, #16
 8009878:	bd80      	pop	{r7, pc}
 800987a:	46c0      	nop			@ (mov r8, r8)
 800987c:	40012c00 	.word	0x40012c00
 8009880:	40014400 	.word	0x40014400
 8009884:	40014800 	.word	0x40014800
 8009888:	40000400 	.word	0x40000400
 800988c:	00010007 	.word	0x00010007

08009890 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e056      	b.n	8009950 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	223d      	movs	r2, #61	@ 0x3d
 80098a6:	5c9b      	ldrb	r3, [r3, r2]
 80098a8:	b2db      	uxtb	r3, r3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d113      	bne.n	80098d6 <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	223c      	movs	r2, #60	@ 0x3c
 80098b2:	2100      	movs	r1, #0
 80098b4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	0018      	movs	r0, r3
 80098ba:	f001 fc13 	bl	800b0e4 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a23      	ldr	r2, [pc, #140]	@ (8009958 <HAL_TIM_IC_Init+0xc8>)
 80098ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	0010      	movs	r0, r2
 80098d4:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	223d      	movs	r2, #61	@ 0x3d
 80098da:	2102      	movs	r1, #2
 80098dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	0019      	movs	r1, r3
 80098e8:	0010      	movs	r0, r2
 80098ea:	f000 fefd 	bl	800a6e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2248      	movs	r2, #72	@ 0x48
 80098f2:	2101      	movs	r1, #1
 80098f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	223e      	movs	r2, #62	@ 0x3e
 80098fa:	2101      	movs	r1, #1
 80098fc:	5499      	strb	r1, [r3, r2]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	223f      	movs	r2, #63	@ 0x3f
 8009902:	2101      	movs	r1, #1
 8009904:	5499      	strb	r1, [r3, r2]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2240      	movs	r2, #64	@ 0x40
 800990a:	2101      	movs	r1, #1
 800990c:	5499      	strb	r1, [r3, r2]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2241      	movs	r2, #65	@ 0x41
 8009912:	2101      	movs	r1, #1
 8009914:	5499      	strb	r1, [r3, r2]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2242      	movs	r2, #66	@ 0x42
 800991a:	2101      	movs	r1, #1
 800991c:	5499      	strb	r1, [r3, r2]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2243      	movs	r2, #67	@ 0x43
 8009922:	2101      	movs	r1, #1
 8009924:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2244      	movs	r2, #68	@ 0x44
 800992a:	2101      	movs	r1, #1
 800992c:	5499      	strb	r1, [r3, r2]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2245      	movs	r2, #69	@ 0x45
 8009932:	2101      	movs	r1, #1
 8009934:	5499      	strb	r1, [r3, r2]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2246      	movs	r2, #70	@ 0x46
 800993a:	2101      	movs	r1, #1
 800993c:	5499      	strb	r1, [r3, r2]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2247      	movs	r2, #71	@ 0x47
 8009942:	2101      	movs	r1, #1
 8009944:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	223d      	movs	r2, #61	@ 0x3d
 800994a:	2101      	movs	r1, #1
 800994c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	0018      	movs	r0, r3
 8009952:	46bd      	mov	sp, r7
 8009954:	b002      	add	sp, #8
 8009956:	bd80      	pop	{r7, pc}
 8009958:	0800995d 	.word	0x0800995d

0800995c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009964:	46c0      	nop			@ (mov r8, r8)
 8009966:	46bd      	mov	sp, r7
 8009968:	b002      	add	sp, #8
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b084      	sub	sp, #16
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009976:	230f      	movs	r3, #15
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d104      	bne.n	800998e <HAL_TIM_IC_Start_IT+0x22>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	223e      	movs	r2, #62	@ 0x3e
 8009988:	5c9b      	ldrb	r3, [r3, r2]
 800998a:	b2db      	uxtb	r3, r3
 800998c:	e023      	b.n	80099d6 <HAL_TIM_IC_Start_IT+0x6a>
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	2b04      	cmp	r3, #4
 8009992:	d104      	bne.n	800999e <HAL_TIM_IC_Start_IT+0x32>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	223f      	movs	r2, #63	@ 0x3f
 8009998:	5c9b      	ldrb	r3, [r3, r2]
 800999a:	b2db      	uxtb	r3, r3
 800999c:	e01b      	b.n	80099d6 <HAL_TIM_IC_Start_IT+0x6a>
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d104      	bne.n	80099ae <HAL_TIM_IC_Start_IT+0x42>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2240      	movs	r2, #64	@ 0x40
 80099a8:	5c9b      	ldrb	r3, [r3, r2]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	e013      	b.n	80099d6 <HAL_TIM_IC_Start_IT+0x6a>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b0c      	cmp	r3, #12
 80099b2:	d104      	bne.n	80099be <HAL_TIM_IC_Start_IT+0x52>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2241      	movs	r2, #65	@ 0x41
 80099b8:	5c9b      	ldrb	r3, [r3, r2]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	e00b      	b.n	80099d6 <HAL_TIM_IC_Start_IT+0x6a>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b10      	cmp	r3, #16
 80099c2:	d104      	bne.n	80099ce <HAL_TIM_IC_Start_IT+0x62>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2242      	movs	r2, #66	@ 0x42
 80099c8:	5c9b      	ldrb	r3, [r3, r2]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	e003      	b.n	80099d6 <HAL_TIM_IC_Start_IT+0x6a>
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2243      	movs	r2, #67	@ 0x43
 80099d2:	5c9b      	ldrb	r3, [r3, r2]
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	220e      	movs	r2, #14
 80099d8:	18ba      	adds	r2, r7, r2
 80099da:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d104      	bne.n	80099ec <HAL_TIM_IC_Start_IT+0x80>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2244      	movs	r2, #68	@ 0x44
 80099e6:	5c9b      	ldrb	r3, [r3, r2]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	e013      	b.n	8009a14 <HAL_TIM_IC_Start_IT+0xa8>
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d104      	bne.n	80099fc <HAL_TIM_IC_Start_IT+0x90>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2245      	movs	r2, #69	@ 0x45
 80099f6:	5c9b      	ldrb	r3, [r3, r2]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	e00b      	b.n	8009a14 <HAL_TIM_IC_Start_IT+0xa8>
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	2b08      	cmp	r3, #8
 8009a00:	d104      	bne.n	8009a0c <HAL_TIM_IC_Start_IT+0xa0>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2246      	movs	r2, #70	@ 0x46
 8009a06:	5c9b      	ldrb	r3, [r3, r2]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e003      	b.n	8009a14 <HAL_TIM_IC_Start_IT+0xa8>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2247      	movs	r2, #71	@ 0x47
 8009a10:	5c9b      	ldrb	r3, [r3, r2]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	210d      	movs	r1, #13
 8009a16:	187a      	adds	r2, r7, r1
 8009a18:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8009a1a:	230e      	movs	r3, #14
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d103      	bne.n	8009a2c <HAL_TIM_IC_Start_IT+0xc0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8009a24:	187b      	adds	r3, r7, r1
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d001      	beq.n	8009a30 <HAL_TIM_IC_Start_IT+0xc4>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e0c3      	b.n	8009bb8 <HAL_TIM_IC_Start_IT+0x24c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d104      	bne.n	8009a40 <HAL_TIM_IC_Start_IT+0xd4>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	223e      	movs	r2, #62	@ 0x3e
 8009a3a:	2102      	movs	r1, #2
 8009a3c:	5499      	strb	r1, [r3, r2]
 8009a3e:	e023      	b.n	8009a88 <HAL_TIM_IC_Start_IT+0x11c>
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d104      	bne.n	8009a50 <HAL_TIM_IC_Start_IT+0xe4>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	223f      	movs	r2, #63	@ 0x3f
 8009a4a:	2102      	movs	r1, #2
 8009a4c:	5499      	strb	r1, [r3, r2]
 8009a4e:	e01b      	b.n	8009a88 <HAL_TIM_IC_Start_IT+0x11c>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b08      	cmp	r3, #8
 8009a54:	d104      	bne.n	8009a60 <HAL_TIM_IC_Start_IT+0xf4>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2240      	movs	r2, #64	@ 0x40
 8009a5a:	2102      	movs	r1, #2
 8009a5c:	5499      	strb	r1, [r3, r2]
 8009a5e:	e013      	b.n	8009a88 <HAL_TIM_IC_Start_IT+0x11c>
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b0c      	cmp	r3, #12
 8009a64:	d104      	bne.n	8009a70 <HAL_TIM_IC_Start_IT+0x104>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2241      	movs	r2, #65	@ 0x41
 8009a6a:	2102      	movs	r1, #2
 8009a6c:	5499      	strb	r1, [r3, r2]
 8009a6e:	e00b      	b.n	8009a88 <HAL_TIM_IC_Start_IT+0x11c>
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	2b10      	cmp	r3, #16
 8009a74:	d104      	bne.n	8009a80 <HAL_TIM_IC_Start_IT+0x114>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2242      	movs	r2, #66	@ 0x42
 8009a7a:	2102      	movs	r1, #2
 8009a7c:	5499      	strb	r1, [r3, r2]
 8009a7e:	e003      	b.n	8009a88 <HAL_TIM_IC_Start_IT+0x11c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2243      	movs	r2, #67	@ 0x43
 8009a84:	2102      	movs	r1, #2
 8009a86:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d104      	bne.n	8009a98 <HAL_TIM_IC_Start_IT+0x12c>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2244      	movs	r2, #68	@ 0x44
 8009a92:	2102      	movs	r1, #2
 8009a94:	5499      	strb	r1, [r3, r2]
 8009a96:	e013      	b.n	8009ac0 <HAL_TIM_IC_Start_IT+0x154>
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d104      	bne.n	8009aa8 <HAL_TIM_IC_Start_IT+0x13c>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2245      	movs	r2, #69	@ 0x45
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	5499      	strb	r1, [r3, r2]
 8009aa6:	e00b      	b.n	8009ac0 <HAL_TIM_IC_Start_IT+0x154>
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	2b08      	cmp	r3, #8
 8009aac:	d104      	bne.n	8009ab8 <HAL_TIM_IC_Start_IT+0x14c>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2246      	movs	r2, #70	@ 0x46
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	5499      	strb	r1, [r3, r2]
 8009ab6:	e003      	b.n	8009ac0 <HAL_TIM_IC_Start_IT+0x154>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2247      	movs	r2, #71	@ 0x47
 8009abc:	2102      	movs	r1, #2
 8009abe:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b0c      	cmp	r3, #12
 8009ac4:	d02a      	beq.n	8009b1c <HAL_TIM_IC_Start_IT+0x1b0>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b0c      	cmp	r3, #12
 8009aca:	d830      	bhi.n	8009b2e <HAL_TIM_IC_Start_IT+0x1c2>
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	2b08      	cmp	r3, #8
 8009ad0:	d01b      	beq.n	8009b0a <HAL_TIM_IC_Start_IT+0x19e>
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	2b08      	cmp	r3, #8
 8009ad6:	d82a      	bhi.n	8009b2e <HAL_TIM_IC_Start_IT+0x1c2>
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <HAL_TIM_IC_Start_IT+0x17a>
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	2b04      	cmp	r3, #4
 8009ae2:	d009      	beq.n	8009af8 <HAL_TIM_IC_Start_IT+0x18c>
 8009ae4:	e023      	b.n	8009b2e <HAL_TIM_IC_Start_IT+0x1c2>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68da      	ldr	r2, [r3, #12]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2102      	movs	r1, #2
 8009af2:	430a      	orrs	r2, r1
 8009af4:	60da      	str	r2, [r3, #12]
      break;
 8009af6:	e01f      	b.n	8009b38 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68da      	ldr	r2, [r3, #12]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2104      	movs	r1, #4
 8009b04:	430a      	orrs	r2, r1
 8009b06:	60da      	str	r2, [r3, #12]
      break;
 8009b08:	e016      	b.n	8009b38 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2108      	movs	r1, #8
 8009b16:	430a      	orrs	r2, r1
 8009b18:	60da      	str	r2, [r3, #12]
      break;
 8009b1a:	e00d      	b.n	8009b38 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2110      	movs	r1, #16
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	60da      	str	r2, [r3, #12]
      break;
 8009b2c:	e004      	b.n	8009b38 <HAL_TIM_IC_Start_IT+0x1cc>
    }

    default:
      status = HAL_ERROR;
 8009b2e:	230f      	movs	r3, #15
 8009b30:	18fb      	adds	r3, r7, r3
 8009b32:	2201      	movs	r2, #1
 8009b34:	701a      	strb	r2, [r3, #0]
      break;
 8009b36:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8009b38:	230f      	movs	r3, #15
 8009b3a:	18fb      	adds	r3, r7, r3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d137      	bne.n	8009bb2 <HAL_TIM_IC_Start_IT+0x246>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	2201      	movs	r2, #1
 8009b4a:	0018      	movs	r0, r3
 8009b4c:	f001 faa6 	bl	800b09c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a1a      	ldr	r2, [pc, #104]	@ (8009bc0 <HAL_TIM_IC_Start_IT+0x254>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d00a      	beq.n	8009b70 <HAL_TIM_IC_Start_IT+0x204>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	2380      	movs	r3, #128	@ 0x80
 8009b60:	05db      	lsls	r3, r3, #23
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d004      	beq.n	8009b70 <HAL_TIM_IC_Start_IT+0x204>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a16      	ldr	r2, [pc, #88]	@ (8009bc4 <HAL_TIM_IC_Start_IT+0x258>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d116      	bne.n	8009b9e <HAL_TIM_IC_Start_IT+0x232>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	4a14      	ldr	r2, [pc, #80]	@ (8009bc8 <HAL_TIM_IC_Start_IT+0x25c>)
 8009b78:	4013      	ands	r3, r2
 8009b7a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b06      	cmp	r3, #6
 8009b80:	d016      	beq.n	8009bb0 <HAL_TIM_IC_Start_IT+0x244>
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	2380      	movs	r3, #128	@ 0x80
 8009b86:	025b      	lsls	r3, r3, #9
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d011      	beq.n	8009bb0 <HAL_TIM_IC_Start_IT+0x244>
      {
        __HAL_TIM_ENABLE(htim);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2101      	movs	r1, #1
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b9c:	e008      	b.n	8009bb0 <HAL_TIM_IC_Start_IT+0x244>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2101      	movs	r1, #1
 8009baa:	430a      	orrs	r2, r1
 8009bac:	601a      	str	r2, [r3, #0]
 8009bae:	e000      	b.n	8009bb2 <HAL_TIM_IC_Start_IT+0x246>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb0:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8009bb2:	230f      	movs	r3, #15
 8009bb4:	18fb      	adds	r3, r7, r3
 8009bb6:	781b      	ldrb	r3, [r3, #0]
}
 8009bb8:	0018      	movs	r0, r3
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	b004      	add	sp, #16
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40012c00 	.word	0x40012c00
 8009bc4:	40000400 	.word	0x40000400
 8009bc8:	00010007 	.word	0x00010007

08009bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2202      	movs	r2, #2
 8009be8:	4013      	ands	r3, r2
 8009bea:	d027      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	d023      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2203      	movs	r2, #3
 8009bfa:	4252      	negs	r2, r2
 8009bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	d006      	beq.n	8009c1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2294      	movs	r2, #148	@ 0x94
 8009c14:	589b      	ldr	r3, [r3, r2]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	0010      	movs	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	e00b      	b.n	8009c36 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	229c      	movs	r2, #156	@ 0x9c
 8009c22:	589b      	ldr	r3, [r3, r2]
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	0010      	movs	r0, r2
 8009c28:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	22a0      	movs	r2, #160	@ 0xa0
 8009c2e:	589b      	ldr	r3, [r3, r2]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	0010      	movs	r0, r2
 8009c34:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2204      	movs	r2, #4
 8009c40:	4013      	ands	r3, r2
 8009c42:	d028      	beq.n	8009c96 <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2204      	movs	r2, #4
 8009c48:	4013      	ands	r3, r2
 8009c4a:	d024      	beq.n	8009c96 <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2205      	movs	r2, #5
 8009c52:	4252      	negs	r2, r2
 8009c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2202      	movs	r2, #2
 8009c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	23c0      	movs	r3, #192	@ 0xc0
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4013      	ands	r3, r2
 8009c68:	d006      	beq.n	8009c78 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2294      	movs	r2, #148	@ 0x94
 8009c6e:	589b      	ldr	r3, [r3, r2]
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	0010      	movs	r0, r2
 8009c74:	4798      	blx	r3
 8009c76:	e00b      	b.n	8009c90 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	229c      	movs	r2, #156	@ 0x9c
 8009c7c:	589b      	ldr	r3, [r3, r2]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	0010      	movs	r0, r2
 8009c82:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	22a0      	movs	r2, #160	@ 0xa0
 8009c88:	589b      	ldr	r3, [r3, r2]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	0010      	movs	r0, r2
 8009c8e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2208      	movs	r2, #8
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	d027      	beq.n	8009cee <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	d023      	beq.n	8009cee <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2209      	movs	r2, #9
 8009cac:	4252      	negs	r2, r2
 8009cae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	2203      	movs	r2, #3
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	d006      	beq.n	8009cd0 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2294      	movs	r2, #148	@ 0x94
 8009cc6:	589b      	ldr	r3, [r3, r2]
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	0010      	movs	r0, r2
 8009ccc:	4798      	blx	r3
 8009cce:	e00b      	b.n	8009ce8 <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	229c      	movs	r2, #156	@ 0x9c
 8009cd4:	589b      	ldr	r3, [r3, r2]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	0010      	movs	r0, r2
 8009cda:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	22a0      	movs	r2, #160	@ 0xa0
 8009ce0:	589b      	ldr	r3, [r3, r2]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	0010      	movs	r0, r2
 8009ce6:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2210      	movs	r2, #16
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	d028      	beq.n	8009d48 <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2210      	movs	r2, #16
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	d024      	beq.n	8009d48 <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2211      	movs	r2, #17
 8009d04:	4252      	negs	r2, r2
 8009d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	69da      	ldr	r2, [r3, #28]
 8009d14:	23c0      	movs	r3, #192	@ 0xc0
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4013      	ands	r3, r2
 8009d1a:	d006      	beq.n	8009d2a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2294      	movs	r2, #148	@ 0x94
 8009d20:	589b      	ldr	r3, [r3, r2]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	0010      	movs	r0, r2
 8009d26:	4798      	blx	r3
 8009d28:	e00b      	b.n	8009d42 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	229c      	movs	r2, #156	@ 0x9c
 8009d2e:	589b      	ldr	r3, [r3, r2]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	0010      	movs	r0, r2
 8009d34:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	22a0      	movs	r2, #160	@ 0xa0
 8009d3a:	589b      	ldr	r3, [r3, r2]
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	0010      	movs	r0, r2
 8009d40:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	4013      	ands	r3, r2
 8009d56:	d00a      	beq.n	8009d6e <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	4252      	negs	r2, r2
 8009d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2284      	movs	r2, #132	@ 0x84
 8009d66:	589b      	ldr	r3, [r3, r2]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	0010      	movs	r0, r2
 8009d6c:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	2280      	movs	r2, #128	@ 0x80
 8009d72:	4013      	ands	r3, r2
 8009d74:	d104      	bne.n	8009d80 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009d76:	68ba      	ldr	r2, [r7, #8]
 8009d78:	2380      	movs	r3, #128	@ 0x80
 8009d7a:	019b      	lsls	r3, r3, #6
 8009d7c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009d7e:	d00d      	beq.n	8009d9c <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2280      	movs	r2, #128	@ 0x80
 8009d84:	4013      	ands	r3, r2
 8009d86:	d009      	beq.n	8009d9c <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a22      	ldr	r2, [pc, #136]	@ (8009e18 <HAL_TIM_IRQHandler+0x24c>)
 8009d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	22b4      	movs	r2, #180	@ 0xb4
 8009d94:	589b      	ldr	r3, [r3, r2]
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	0010      	movs	r0, r2
 8009d9a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d9c:	68ba      	ldr	r2, [r7, #8]
 8009d9e:	2380      	movs	r3, #128	@ 0x80
 8009da0:	005b      	lsls	r3, r3, #1
 8009da2:	4013      	ands	r3, r2
 8009da4:	d00d      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2280      	movs	r2, #128	@ 0x80
 8009daa:	4013      	ands	r3, r2
 8009dac:	d009      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e1c <HAL_TIM_IRQHandler+0x250>)
 8009db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	22b8      	movs	r2, #184	@ 0xb8
 8009dba:	589b      	ldr	r3, [r3, r2]
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	0010      	movs	r0, r2
 8009dc0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	2240      	movs	r2, #64	@ 0x40
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	d00e      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2240      	movs	r2, #64	@ 0x40
 8009dce:	4013      	ands	r3, r2
 8009dd0:	d00a      	beq.n	8009de8 <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2241      	movs	r2, #65	@ 0x41
 8009dd8:	4252      	negs	r2, r2
 8009dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	228c      	movs	r2, #140	@ 0x8c
 8009de0:	589b      	ldr	r3, [r3, r2]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	0010      	movs	r0, r2
 8009de6:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2220      	movs	r2, #32
 8009dec:	4013      	ands	r3, r2
 8009dee:	d00e      	beq.n	8009e0e <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2220      	movs	r2, #32
 8009df4:	4013      	ands	r3, r2
 8009df6:	d00a      	beq.n	8009e0e <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	2221      	movs	r2, #33	@ 0x21
 8009dfe:	4252      	negs	r2, r2
 8009e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	22ac      	movs	r2, #172	@ 0xac
 8009e06:	589b      	ldr	r3, [r3, r2]
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	0010      	movs	r0, r2
 8009e0c:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e0e:	46c0      	nop			@ (mov r8, r8)
 8009e10:	46bd      	mov	sp, r7
 8009e12:	b004      	add	sp, #16
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	46c0      	nop			@ (mov r8, r8)
 8009e18:	ffffdf7f 	.word	0xffffdf7f
 8009e1c:	fffffeff 	.word	0xfffffeff

08009e20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e2c:	2317      	movs	r3, #23
 8009e2e:	18fb      	adds	r3, r7, r3
 8009e30:	2200      	movs	r2, #0
 8009e32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	223c      	movs	r2, #60	@ 0x3c
 8009e38:	5c9b      	ldrb	r3, [r3, r2]
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_TIM_OC_ConfigChannel+0x22>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e048      	b.n	8009ed4 <HAL_TIM_OC_ConfigChannel+0xb4>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	223c      	movs	r2, #60	@ 0x3c
 8009e46:	2101      	movs	r1, #1
 8009e48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2b14      	cmp	r3, #20
 8009e4e:	d835      	bhi.n	8009ebc <HAL_TIM_OC_ConfigChannel+0x9c>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	009a      	lsls	r2, r3, #2
 8009e54:	4b21      	ldr	r3, [pc, #132]	@ (8009edc <HAL_TIM_OC_ConfigChannel+0xbc>)
 8009e56:	18d3      	adds	r3, r2, r3
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	0011      	movs	r1, r2
 8009e64:	0018      	movs	r0, r3
 8009e66:	f000 fcc3 	bl	800a7f0 <TIM_OC1_SetConfig>
      break;
 8009e6a:	e02c      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	0011      	movs	r1, r2
 8009e74:	0018      	movs	r0, r3
 8009e76:	f000 fd3b 	bl	800a8f0 <TIM_OC2_SetConfig>
      break;
 8009e7a:	e024      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	0011      	movs	r1, r2
 8009e84:	0018      	movs	r0, r3
 8009e86:	f000 fdb1 	bl	800a9ec <TIM_OC3_SetConfig>
      break;
 8009e8a:	e01c      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68ba      	ldr	r2, [r7, #8]
 8009e92:	0011      	movs	r1, r2
 8009e94:	0018      	movs	r0, r3
 8009e96:	f000 fe2b 	bl	800aaf0 <TIM_OC4_SetConfig>
      break;
 8009e9a:	e014      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	0011      	movs	r1, r2
 8009ea4:	0018      	movs	r0, r3
 8009ea6:	f000 fe87 	bl	800abb8 <TIM_OC5_SetConfig>
      break;
 8009eaa:	e00c      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	0011      	movs	r1, r2
 8009eb4:	0018      	movs	r0, r3
 8009eb6:	f000 fed9 	bl	800ac6c <TIM_OC6_SetConfig>
      break;
 8009eba:	e004      	b.n	8009ec6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009ebc:	2317      	movs	r3, #23
 8009ebe:	18fb      	adds	r3, r7, r3
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
      break;
 8009ec4:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	223c      	movs	r2, #60	@ 0x3c
 8009eca:	2100      	movs	r1, #0
 8009ecc:	5499      	strb	r1, [r3, r2]

  return status;
 8009ece:	2317      	movs	r3, #23
 8009ed0:	18fb      	adds	r3, r7, r3
 8009ed2:	781b      	ldrb	r3, [r3, #0]
}
 8009ed4:	0018      	movs	r0, r3
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	b006      	add	sp, #24
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	0800d5b0 	.word	0x0800d5b0

08009ee0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b086      	sub	sp, #24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009eec:	2317      	movs	r3, #23
 8009eee:	18fb      	adds	r3, r7, r3
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	223c      	movs	r2, #60	@ 0x3c
 8009ef8:	5c9b      	ldrb	r3, [r3, r2]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d101      	bne.n	8009f02 <HAL_TIM_IC_ConfigChannel+0x22>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e08c      	b.n	800a01c <HAL_TIM_IC_ConfigChannel+0x13c>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	223c      	movs	r2, #60	@ 0x3c
 8009f06:	2101      	movs	r1, #1
 8009f08:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d11b      	bne.n	8009f48 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8009f20:	f000 ff02 	bl	800ad28 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	699a      	ldr	r2, [r3, #24]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	210c      	movs	r1, #12
 8009f30:	438a      	bics	r2, r1
 8009f32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	6999      	ldr	r1, [r3, #24]
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	619a      	str	r2, [r3, #24]
 8009f46:	e062      	b.n	800a00e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b04      	cmp	r3, #4
 8009f4c:	d11c      	bne.n	8009f88 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8009f5e:	f000 ff67 	bl	800ae30 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	699a      	ldr	r2, [r3, #24]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	492d      	ldr	r1, [pc, #180]	@ (800a024 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009f6e:	400a      	ands	r2, r1
 8009f70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6999      	ldr	r1, [r3, #24]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	021a      	lsls	r2, r3, #8
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	619a      	str	r2, [r3, #24]
 8009f86:	e042      	b.n	800a00e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b08      	cmp	r3, #8
 8009f8c:	d11b      	bne.n	8009fc6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8009f9e:	f000 ffbb 	bl	800af18 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	69da      	ldr	r2, [r3, #28]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	210c      	movs	r1, #12
 8009fae:	438a      	bics	r2, r1
 8009fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69d9      	ldr	r1, [r3, #28]
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	61da      	str	r2, [r3, #28]
 8009fc4:	e023      	b.n	800a00e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b0c      	cmp	r3, #12
 8009fca:	d11c      	bne.n	800a006 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8009fdc:	f000 ffdc 	bl	800af98 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69da      	ldr	r2, [r3, #28]
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	490e      	ldr	r1, [pc, #56]	@ (800a024 <HAL_TIM_IC_ConfigChannel+0x144>)
 8009fec:	400a      	ands	r2, r1
 8009fee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69d9      	ldr	r1, [r3, #28]
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	021a      	lsls	r2, r3, #8
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	430a      	orrs	r2, r1
 800a002:	61da      	str	r2, [r3, #28]
 800a004:	e003      	b.n	800a00e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800a006:	2317      	movs	r3, #23
 800a008:	18fb      	adds	r3, r7, r3
 800a00a:	2201      	movs	r2, #1
 800a00c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	223c      	movs	r2, #60	@ 0x3c
 800a012:	2100      	movs	r1, #0
 800a014:	5499      	strb	r1, [r3, r2]

  return status;
 800a016:	2317      	movs	r3, #23
 800a018:	18fb      	adds	r3, r7, r3
 800a01a:	781b      	ldrb	r3, [r3, #0]
}
 800a01c:	0018      	movs	r0, r3
 800a01e:	46bd      	mov	sp, r7
 800a020:	b006      	add	sp, #24
 800a022:	bd80      	pop	{r7, pc}
 800a024:	fffff3ff 	.word	0xfffff3ff

0800a028 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a034:	2317      	movs	r3, #23
 800a036:	18fb      	adds	r3, r7, r3
 800a038:	2200      	movs	r2, #0
 800a03a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	223c      	movs	r2, #60	@ 0x3c
 800a040:	5c9b      	ldrb	r3, [r3, r2]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d101      	bne.n	800a04a <HAL_TIM_PWM_ConfigChannel+0x22>
 800a046:	2302      	movs	r3, #2
 800a048:	e0e5      	b.n	800a216 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	223c      	movs	r2, #60	@ 0x3c
 800a04e:	2101      	movs	r1, #1
 800a050:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2b14      	cmp	r3, #20
 800a056:	d900      	bls.n	800a05a <HAL_TIM_PWM_ConfigChannel+0x32>
 800a058:	e0d1      	b.n	800a1fe <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	009a      	lsls	r2, r3, #2
 800a05e:	4b70      	ldr	r3, [pc, #448]	@ (800a220 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800a060:	18d3      	adds	r3, r2, r3
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	0011      	movs	r1, r2
 800a06e:	0018      	movs	r0, r3
 800a070:	f000 fbbe 	bl	800a7f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	699a      	ldr	r2, [r3, #24]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2108      	movs	r1, #8
 800a080:	430a      	orrs	r2, r1
 800a082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	699a      	ldr	r2, [r3, #24]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2104      	movs	r1, #4
 800a090:	438a      	bics	r2, r1
 800a092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6999      	ldr	r1, [r3, #24]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	691a      	ldr	r2, [r3, #16]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	619a      	str	r2, [r3, #24]
      break;
 800a0a6:	e0af      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	0011      	movs	r1, r2
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f000 fc1d 	bl	800a8f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	699a      	ldr	r2, [r3, #24]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2180      	movs	r1, #128	@ 0x80
 800a0c2:	0109      	lsls	r1, r1, #4
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	699a      	ldr	r2, [r3, #24]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4954      	ldr	r1, [pc, #336]	@ (800a224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a0d4:	400a      	ands	r2, r1
 800a0d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	6999      	ldr	r1, [r3, #24]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	021a      	lsls	r2, r3, #8
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	619a      	str	r2, [r3, #24]
      break;
 800a0ec:	e08c      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	0011      	movs	r1, r2
 800a0f6:	0018      	movs	r0, r3
 800a0f8:	f000 fc78 	bl	800a9ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69da      	ldr	r2, [r3, #28]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2108      	movs	r1, #8
 800a108:	430a      	orrs	r2, r1
 800a10a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	69da      	ldr	r2, [r3, #28]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	2104      	movs	r1, #4
 800a118:	438a      	bics	r2, r1
 800a11a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	69d9      	ldr	r1, [r3, #28]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	691a      	ldr	r2, [r3, #16]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	61da      	str	r2, [r3, #28]
      break;
 800a12e:	e06b      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	68ba      	ldr	r2, [r7, #8]
 800a136:	0011      	movs	r1, r2
 800a138:	0018      	movs	r0, r3
 800a13a:	f000 fcd9 	bl	800aaf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2180      	movs	r1, #128	@ 0x80
 800a14a:	0109      	lsls	r1, r1, #4
 800a14c:	430a      	orrs	r2, r1
 800a14e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69da      	ldr	r2, [r3, #28]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4932      	ldr	r1, [pc, #200]	@ (800a224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a15c:	400a      	ands	r2, r1
 800a15e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69d9      	ldr	r1, [r3, #28]
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	691b      	ldr	r3, [r3, #16]
 800a16a:	021a      	lsls	r2, r3, #8
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	430a      	orrs	r2, r1
 800a172:	61da      	str	r2, [r3, #28]
      break;
 800a174:	e048      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	0011      	movs	r1, r2
 800a17e:	0018      	movs	r0, r3
 800a180:	f000 fd1a 	bl	800abb8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2108      	movs	r1, #8
 800a190:	430a      	orrs	r2, r1
 800a192:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	2104      	movs	r1, #4
 800a1a0:	438a      	bics	r2, r1
 800a1a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	691a      	ldr	r2, [r3, #16]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	430a      	orrs	r2, r1
 800a1b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1b6:	e027      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	0011      	movs	r1, r2
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	f000 fd53 	bl	800ac6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2180      	movs	r1, #128	@ 0x80
 800a1d2:	0109      	lsls	r1, r1, #4
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4910      	ldr	r1, [pc, #64]	@ (800a224 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800a1e4:	400a      	ands	r2, r1
 800a1e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	021a      	lsls	r2, r3, #8
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800a1fc:	e004      	b.n	800a208 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800a1fe:	2317      	movs	r3, #23
 800a200:	18fb      	adds	r3, r7, r3
 800a202:	2201      	movs	r2, #1
 800a204:	701a      	strb	r2, [r3, #0]
      break;
 800a206:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	223c      	movs	r2, #60	@ 0x3c
 800a20c:	2100      	movs	r1, #0
 800a20e:	5499      	strb	r1, [r3, r2]

  return status;
 800a210:	2317      	movs	r3, #23
 800a212:	18fb      	adds	r3, r7, r3
 800a214:	781b      	ldrb	r3, [r3, #0]
}
 800a216:	0018      	movs	r0, r3
 800a218:	46bd      	mov	sp, r7
 800a21a:	b006      	add	sp, #24
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	46c0      	nop			@ (mov r8, r8)
 800a220:	0800d604 	.word	0x0800d604
 800a224:	fffffbff 	.word	0xfffffbff

0800a228 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a232:	230f      	movs	r3, #15
 800a234:	18fb      	adds	r3, r7, r3
 800a236:	2200      	movs	r2, #0
 800a238:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	223c      	movs	r2, #60	@ 0x3c
 800a23e:	5c9b      	ldrb	r3, [r3, r2]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d101      	bne.n	800a248 <HAL_TIM_ConfigClockSource+0x20>
 800a244:	2302      	movs	r3, #2
 800a246:	e0bc      	b.n	800a3c2 <HAL_TIM_ConfigClockSource+0x19a>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	223c      	movs	r2, #60	@ 0x3c
 800a24c:	2101      	movs	r1, #1
 800a24e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	223d      	movs	r2, #61	@ 0x3d
 800a254:	2102      	movs	r1, #2
 800a256:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	4a5a      	ldr	r2, [pc, #360]	@ (800a3cc <HAL_TIM_ConfigClockSource+0x1a4>)
 800a264:	4013      	ands	r3, r2
 800a266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4a59      	ldr	r2, [pc, #356]	@ (800a3d0 <HAL_TIM_ConfigClockSource+0x1a8>)
 800a26c:	4013      	ands	r3, r2
 800a26e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2280      	movs	r2, #128	@ 0x80
 800a27e:	0192      	lsls	r2, r2, #6
 800a280:	4293      	cmp	r3, r2
 800a282:	d040      	beq.n	800a306 <HAL_TIM_ConfigClockSource+0xde>
 800a284:	2280      	movs	r2, #128	@ 0x80
 800a286:	0192      	lsls	r2, r2, #6
 800a288:	4293      	cmp	r3, r2
 800a28a:	d900      	bls.n	800a28e <HAL_TIM_ConfigClockSource+0x66>
 800a28c:	e088      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a28e:	2280      	movs	r2, #128	@ 0x80
 800a290:	0152      	lsls	r2, r2, #5
 800a292:	4293      	cmp	r3, r2
 800a294:	d100      	bne.n	800a298 <HAL_TIM_ConfigClockSource+0x70>
 800a296:	e088      	b.n	800a3aa <HAL_TIM_ConfigClockSource+0x182>
 800a298:	2280      	movs	r2, #128	@ 0x80
 800a29a:	0152      	lsls	r2, r2, #5
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d900      	bls.n	800a2a2 <HAL_TIM_ConfigClockSource+0x7a>
 800a2a0:	e07e      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2a2:	2b70      	cmp	r3, #112	@ 0x70
 800a2a4:	d018      	beq.n	800a2d8 <HAL_TIM_ConfigClockSource+0xb0>
 800a2a6:	d900      	bls.n	800a2aa <HAL_TIM_ConfigClockSource+0x82>
 800a2a8:	e07a      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2aa:	2b60      	cmp	r3, #96	@ 0x60
 800a2ac:	d04f      	beq.n	800a34e <HAL_TIM_ConfigClockSource+0x126>
 800a2ae:	d900      	bls.n	800a2b2 <HAL_TIM_ConfigClockSource+0x8a>
 800a2b0:	e076      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2b2:	2b50      	cmp	r3, #80	@ 0x50
 800a2b4:	d03b      	beq.n	800a32e <HAL_TIM_ConfigClockSource+0x106>
 800a2b6:	d900      	bls.n	800a2ba <HAL_TIM_ConfigClockSource+0x92>
 800a2b8:	e072      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d057      	beq.n	800a36e <HAL_TIM_ConfigClockSource+0x146>
 800a2be:	d900      	bls.n	800a2c2 <HAL_TIM_ConfigClockSource+0x9a>
 800a2c0:	e06e      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2c2:	2b30      	cmp	r3, #48	@ 0x30
 800a2c4:	d063      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x166>
 800a2c6:	d86b      	bhi.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2c8:	2b20      	cmp	r3, #32
 800a2ca:	d060      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x166>
 800a2cc:	d868      	bhi.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d05d      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x166>
 800a2d2:	2b10      	cmp	r3, #16
 800a2d4:	d05b      	beq.n	800a38e <HAL_TIM_ConfigClockSource+0x166>
 800a2d6:	e063      	b.n	800a3a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2e8:	f000 feb8 	bl	800b05c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	2277      	movs	r2, #119	@ 0x77
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]
      break;
 800a304:	e052      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a316:	f000 fea1 	bl	800b05c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2180      	movs	r1, #128	@ 0x80
 800a326:	01c9      	lsls	r1, r1, #7
 800a328:	430a      	orrs	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
      break;
 800a32c:	e03e      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a33a:	001a      	movs	r2, r3
 800a33c:	f000 fd4a 	bl	800add4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2150      	movs	r1, #80	@ 0x50
 800a346:	0018      	movs	r0, r3
 800a348:	f000 fe6c 	bl	800b024 <TIM_ITRx_SetConfig>
      break;
 800a34c:	e02e      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a35a:	001a      	movs	r2, r3
 800a35c:	f000 fdaa 	bl	800aeb4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2160      	movs	r1, #96	@ 0x60
 800a366:	0018      	movs	r0, r3
 800a368:	f000 fe5c 	bl	800b024 <TIM_ITRx_SetConfig>
      break;
 800a36c:	e01e      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a37a:	001a      	movs	r2, r3
 800a37c:	f000 fd2a 	bl	800add4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2140      	movs	r1, #64	@ 0x40
 800a386:	0018      	movs	r0, r3
 800a388:	f000 fe4c 	bl	800b024 <TIM_ITRx_SetConfig>
      break;
 800a38c:	e00e      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681a      	ldr	r2, [r3, #0]
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	0019      	movs	r1, r3
 800a398:	0010      	movs	r0, r2
 800a39a:	f000 fe43 	bl	800b024 <TIM_ITRx_SetConfig>
      break;
 800a39e:	e005      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800a3a0:	230f      	movs	r3, #15
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	701a      	strb	r2, [r3, #0]
      break;
 800a3a8:	e000      	b.n	800a3ac <HAL_TIM_ConfigClockSource+0x184>
      break;
 800a3aa:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	223d      	movs	r2, #61	@ 0x3d
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	223c      	movs	r2, #60	@ 0x3c
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	5499      	strb	r1, [r3, r2]

  return status;
 800a3bc:	230f      	movs	r3, #15
 800a3be:	18fb      	adds	r3, r7, r3
 800a3c0:	781b      	ldrb	r3, [r3, #0]
}
 800a3c2:	0018      	movs	r0, r3
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	b004      	add	sp, #16
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	46c0      	nop			@ (mov r8, r8)
 800a3cc:	ffceff88 	.word	0xffceff88
 800a3d0:	ffff00ff 	.word	0xffff00ff

0800a3d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	2b0c      	cmp	r3, #12
 800a3e6:	d01e      	beq.n	800a426 <HAL_TIM_ReadCapturedValue+0x52>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b0c      	cmp	r3, #12
 800a3ec:	d820      	bhi.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2b08      	cmp	r3, #8
 800a3f2:	d013      	beq.n	800a41c <HAL_TIM_ReadCapturedValue+0x48>
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2b08      	cmp	r3, #8
 800a3f8:	d81a      	bhi.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <HAL_TIM_ReadCapturedValue+0x34>
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	2b04      	cmp	r3, #4
 800a404:	d005      	beq.n	800a412 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 800a406:	e013      	b.n	800a430 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a40e:	60fb      	str	r3, [r7, #12]
      break;
 800a410:	e00f      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a418:	60fb      	str	r3, [r7, #12]
      break;
 800a41a:	e00a      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a422:	60fb      	str	r3, [r7, #12]
      break;
 800a424:	e005      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42c:	60fb      	str	r3, [r7, #12]
      break;
 800a42e:	e000      	b.n	800a432 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800a430:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 800a432:	68fb      	ldr	r3, [r7, #12]
}
 800a434:	0018      	movs	r0, r3
 800a436:	46bd      	mov	sp, r7
 800a438:	b004      	add	sp, #16
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a444:	46c0      	nop			@ (mov r8, r8)
 800a446:	46bd      	mov	sp, r7
 800a448:	b002      	add	sp, #8
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a454:	46c0      	nop			@ (mov r8, r8)
 800a456:	46bd      	mov	sp, r7
 800a458:	b002      	add	sp, #8
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a464:	46c0      	nop			@ (mov r8, r8)
 800a466:	46bd      	mov	sp, r7
 800a468:	b002      	add	sp, #8
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b082      	sub	sp, #8
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a474:	46c0      	nop			@ (mov r8, r8)
 800a476:	46bd      	mov	sp, r7
 800a478:	b002      	add	sp, #8
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a484:	46c0      	nop			@ (mov r8, r8)
 800a486:	46bd      	mov	sp, r7
 800a488:	b002      	add	sp, #8
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a494:	46c0      	nop			@ (mov r8, r8)
 800a496:	46bd      	mov	sp, r7
 800a498:	b002      	add	sp, #8
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a4a4:	46c0      	nop			@ (mov r8, r8)
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	b002      	add	sp, #8
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4b4:	46c0      	nop			@ (mov r8, r8)
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	b002      	add	sp, #8
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a4c4:	46c0      	nop			@ (mov r8, r8)
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	b002      	add	sp, #8
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a4d4:	46c0      	nop			@ (mov r8, r8)
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	b002      	add	sp, #8
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	607a      	str	r2, [r7, #4]
 800a4e6:	230b      	movs	r3, #11
 800a4e8:	18fb      	adds	r3, r7, r3
 800a4ea:	1c0a      	adds	r2, r1, #0
 800a4ec:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4ee:	2317      	movs	r3, #23
 800a4f0:	18fb      	adds	r3, r7, r3
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d101      	bne.n	800a500 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e0ea      	b.n	800a6d6 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	223d      	movs	r2, #61	@ 0x3d
 800a504:	5c9b      	ldrb	r3, [r3, r2]
 800a506:	b2db      	uxtb	r3, r3
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d000      	beq.n	800a50e <HAL_TIM_RegisterCallback+0x32>
 800a50c:	e08e      	b.n	800a62c <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a50e:	230b      	movs	r3, #11
 800a510:	18fb      	adds	r3, r7, r3
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	2b1b      	cmp	r3, #27
 800a516:	d900      	bls.n	800a51a <HAL_TIM_RegisterCallback+0x3e>
 800a518:	e083      	b.n	800a622 <HAL_TIM_RegisterCallback+0x146>
 800a51a:	009a      	lsls	r2, r3, #2
 800a51c:	4b70      	ldr	r3, [pc, #448]	@ (800a6e0 <HAL_TIM_RegisterCallback+0x204>)
 800a51e:	18d3      	adds	r3, r2, r3
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a52a:	e0d1      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a532:	e0cd      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a53a:	e0c9      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a542:	e0c5      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	687a      	ldr	r2, [r7, #4]
 800a548:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a54a:	e0c1      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a552:	e0bd      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a55a:	e0b9      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a562:	e0b5      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a56a:	e0b1      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a572:	e0ad      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a57a:	e0a9      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a582:	e0a5      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	687a      	ldr	r2, [r7, #4]
 800a588:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a58a:	e0a1      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2180      	movs	r1, #128	@ 0x80
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	505a      	str	r2, [r3, r1]
        break;
 800a594:	e09c      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2184      	movs	r1, #132	@ 0x84
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	505a      	str	r2, [r3, r1]
        break;
 800a59e:	e097      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2188      	movs	r1, #136	@ 0x88
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	505a      	str	r2, [r3, r1]
        break;
 800a5a8:	e092      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	218c      	movs	r1, #140	@ 0x8c
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	505a      	str	r2, [r3, r1]
        break;
 800a5b2:	e08d      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2190      	movs	r1, #144	@ 0x90
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	505a      	str	r2, [r3, r1]
        break;
 800a5bc:	e088      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2194      	movs	r1, #148	@ 0x94
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	505a      	str	r2, [r3, r1]
        break;
 800a5c6:	e083      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2198      	movs	r1, #152	@ 0x98
 800a5cc:	687a      	ldr	r2, [r7, #4]
 800a5ce:	505a      	str	r2, [r3, r1]
        break;
 800a5d0:	e07e      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	219c      	movs	r1, #156	@ 0x9c
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	505a      	str	r2, [r3, r1]
        break;
 800a5da:	e079      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	21a0      	movs	r1, #160	@ 0xa0
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	505a      	str	r2, [r3, r1]
        break;
 800a5e4:	e074      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	21a4      	movs	r1, #164	@ 0xa4
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	505a      	str	r2, [r3, r1]
        break;
 800a5ee:	e06f      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	21a8      	movs	r1, #168	@ 0xa8
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	505a      	str	r2, [r3, r1]
        break;
 800a5f8:	e06a      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	21ac      	movs	r1, #172	@ 0xac
 800a5fe:	687a      	ldr	r2, [r7, #4]
 800a600:	505a      	str	r2, [r3, r1]
        break;
 800a602:	e065      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	21b0      	movs	r1, #176	@ 0xb0
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	505a      	str	r2, [r3, r1]
        break;
 800a60c:	e060      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	21b4      	movs	r1, #180	@ 0xb4
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	505a      	str	r2, [r3, r1]
        break;
 800a616:	e05b      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	21b8      	movs	r1, #184	@ 0xb8
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	505a      	str	r2, [r3, r1]
        break;
 800a620:	e056      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a622:	2317      	movs	r3, #23
 800a624:	18fb      	adds	r3, r7, r3
 800a626:	2201      	movs	r2, #1
 800a628:	701a      	strb	r2, [r3, #0]
        break;
 800a62a:	e051      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	223d      	movs	r2, #61	@ 0x3d
 800a630:	5c9b      	ldrb	r3, [r3, r2]
 800a632:	b2db      	uxtb	r3, r3
 800a634:	2b00      	cmp	r3, #0
 800a636:	d147      	bne.n	800a6c8 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 800a638:	230b      	movs	r3, #11
 800a63a:	18fb      	adds	r3, r7, r3
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	2b0d      	cmp	r3, #13
 800a640:	d83d      	bhi.n	800a6be <HAL_TIM_RegisterCallback+0x1e2>
 800a642:	009a      	lsls	r2, r3, #2
 800a644:	4b27      	ldr	r3, [pc, #156]	@ (800a6e4 <HAL_TIM_RegisterCallback+0x208>)
 800a646:	18d3      	adds	r3, r2, r3
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800a652:	e03d      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	687a      	ldr	r2, [r7, #4]
 800a658:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800a65a:	e039      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800a662:	e035      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800a66a:	e031      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800a672:	e02d      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800a67a:	e029      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800a682:	e025      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800a68a:	e021      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800a692:	e01d      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800a69a:	e019      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800a6a2:	e015      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800a6aa:	e011      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800a6b2:	e00d      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2180      	movs	r1, #128	@ 0x80
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	505a      	str	r2, [r3, r1]
        break;
 800a6bc:	e008      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a6be:	2317      	movs	r3, #23
 800a6c0:	18fb      	adds	r3, r7, r3
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	701a      	strb	r2, [r3, #0]
        break;
 800a6c6:	e003      	b.n	800a6d0 <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a6c8:	2317      	movs	r3, #23
 800a6ca:	18fb      	adds	r3, r7, r3
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a6d0:	2317      	movs	r3, #23
 800a6d2:	18fb      	adds	r3, r7, r3
 800a6d4:	781b      	ldrb	r3, [r3, #0]
}
 800a6d6:	0018      	movs	r0, r3
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	b006      	add	sp, #24
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	46c0      	nop			@ (mov r8, r8)
 800a6e0:	0800d658 	.word	0x0800d658
 800a6e4:	0800d6c8 	.word	0x0800d6c8

0800a6e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	4a37      	ldr	r2, [pc, #220]	@ (800a7d8 <TIM_Base_SetConfig+0xf0>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d008      	beq.n	800a712 <TIM_Base_SetConfig+0x2a>
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	2380      	movs	r3, #128	@ 0x80
 800a704:	05db      	lsls	r3, r3, #23
 800a706:	429a      	cmp	r2, r3
 800a708:	d003      	beq.n	800a712 <TIM_Base_SetConfig+0x2a>
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	4a33      	ldr	r2, [pc, #204]	@ (800a7dc <TIM_Base_SetConfig+0xf4>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d108      	bne.n	800a724 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2270      	movs	r2, #112	@ 0x70
 800a716:	4393      	bics	r3, r2
 800a718:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	4313      	orrs	r3, r2
 800a722:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a2c      	ldr	r2, [pc, #176]	@ (800a7d8 <TIM_Base_SetConfig+0xf0>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d014      	beq.n	800a756 <TIM_Base_SetConfig+0x6e>
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	2380      	movs	r3, #128	@ 0x80
 800a730:	05db      	lsls	r3, r3, #23
 800a732:	429a      	cmp	r2, r3
 800a734:	d00f      	beq.n	800a756 <TIM_Base_SetConfig+0x6e>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a28      	ldr	r2, [pc, #160]	@ (800a7dc <TIM_Base_SetConfig+0xf4>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d00b      	beq.n	800a756 <TIM_Base_SetConfig+0x6e>
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a27      	ldr	r2, [pc, #156]	@ (800a7e0 <TIM_Base_SetConfig+0xf8>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <TIM_Base_SetConfig+0x6e>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a26      	ldr	r2, [pc, #152]	@ (800a7e4 <TIM_Base_SetConfig+0xfc>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d003      	beq.n	800a756 <TIM_Base_SetConfig+0x6e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a25      	ldr	r2, [pc, #148]	@ (800a7e8 <TIM_Base_SetConfig+0x100>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d108      	bne.n	800a768 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	4a24      	ldr	r2, [pc, #144]	@ (800a7ec <TIM_Base_SetConfig+0x104>)
 800a75a:	4013      	ands	r3, r2
 800a75c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2280      	movs	r2, #128	@ 0x80
 800a76c:	4393      	bics	r3, r2
 800a76e:	001a      	movs	r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	695b      	ldr	r3, [r3, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	689a      	ldr	r2, [r3, #8]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	4a11      	ldr	r2, [pc, #68]	@ (800a7d8 <TIM_Base_SetConfig+0xf0>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d007      	beq.n	800a7a6 <TIM_Base_SetConfig+0xbe>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a12      	ldr	r2, [pc, #72]	@ (800a7e4 <TIM_Base_SetConfig+0xfc>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d003      	beq.n	800a7a6 <TIM_Base_SetConfig+0xbe>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a11      	ldr	r2, [pc, #68]	@ (800a7e8 <TIM_Base_SetConfig+0x100>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d103      	bne.n	800a7ae <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	691a      	ldr	r2, [r3, #16]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d106      	bne.n	800a7ce <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	2201      	movs	r2, #1
 800a7c6:	4393      	bics	r3, r2
 800a7c8:	001a      	movs	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	611a      	str	r2, [r3, #16]
  }
}
 800a7ce:	46c0      	nop			@ (mov r8, r8)
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	b004      	add	sp, #16
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	46c0      	nop			@ (mov r8, r8)
 800a7d8:	40012c00 	.word	0x40012c00
 800a7dc:	40000400 	.word	0x40000400
 800a7e0:	40002000 	.word	0x40002000
 800a7e4:	40014400 	.word	0x40014400
 800a7e8:	40014800 	.word	0x40014800
 800a7ec:	fffffcff 	.word	0xfffffcff

0800a7f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a1b      	ldr	r3, [r3, #32]
 800a7fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6a1b      	ldr	r3, [r3, #32]
 800a804:	2201      	movs	r2, #1
 800a806:	4393      	bics	r3, r2
 800a808:	001a      	movs	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4a2e      	ldr	r2, [pc, #184]	@ (800a8d8 <TIM_OC1_SetConfig+0xe8>)
 800a81e:	4013      	ands	r3, r2
 800a820:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2203      	movs	r2, #3
 800a826:	4393      	bics	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68fa      	ldr	r2, [r7, #12]
 800a830:	4313      	orrs	r3, r2
 800a832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	2202      	movs	r2, #2
 800a838:	4393      	bics	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	697a      	ldr	r2, [r7, #20]
 800a842:	4313      	orrs	r3, r2
 800a844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	4a24      	ldr	r2, [pc, #144]	@ (800a8dc <TIM_OC1_SetConfig+0xec>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d007      	beq.n	800a85e <TIM_OC1_SetConfig+0x6e>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	4a23      	ldr	r2, [pc, #140]	@ (800a8e0 <TIM_OC1_SetConfig+0xf0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d003      	beq.n	800a85e <TIM_OC1_SetConfig+0x6e>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4a22      	ldr	r2, [pc, #136]	@ (800a8e4 <TIM_OC1_SetConfig+0xf4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d10c      	bne.n	800a878 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	2208      	movs	r2, #8
 800a862:	4393      	bics	r3, r2
 800a864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2204      	movs	r2, #4
 800a874:	4393      	bics	r3, r2
 800a876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a18      	ldr	r2, [pc, #96]	@ (800a8dc <TIM_OC1_SetConfig+0xec>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d007      	beq.n	800a890 <TIM_OC1_SetConfig+0xa0>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a17      	ldr	r2, [pc, #92]	@ (800a8e0 <TIM_OC1_SetConfig+0xf0>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d003      	beq.n	800a890 <TIM_OC1_SetConfig+0xa0>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a16      	ldr	r2, [pc, #88]	@ (800a8e4 <TIM_OC1_SetConfig+0xf4>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d111      	bne.n	800a8b4 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4a15      	ldr	r2, [pc, #84]	@ (800a8e8 <TIM_OC1_SetConfig+0xf8>)
 800a894:	4013      	ands	r3, r2
 800a896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	4a14      	ldr	r2, [pc, #80]	@ (800a8ec <TIM_OC1_SetConfig+0xfc>)
 800a89c:	4013      	ands	r3, r2
 800a89e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	695b      	ldr	r3, [r3, #20]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	693a      	ldr	r2, [r7, #16]
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	693a      	ldr	r2, [r7, #16]
 800a8b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	621a      	str	r2, [r3, #32]
}
 800a8ce:	46c0      	nop			@ (mov r8, r8)
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	b006      	add	sp, #24
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	46c0      	nop			@ (mov r8, r8)
 800a8d8:	fffeff8f 	.word	0xfffeff8f
 800a8dc:	40012c00 	.word	0x40012c00
 800a8e0:	40014400 	.word	0x40014400
 800a8e4:	40014800 	.word	0x40014800
 800a8e8:	fffffeff 	.word	0xfffffeff
 800a8ec:	fffffdff 	.word	0xfffffdff

0800a8f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a1b      	ldr	r3, [r3, #32]
 800a8fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a1b      	ldr	r3, [r3, #32]
 800a904:	2210      	movs	r2, #16
 800a906:	4393      	bics	r3, r2
 800a908:	001a      	movs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	699b      	ldr	r3, [r3, #24]
 800a918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4a2c      	ldr	r2, [pc, #176]	@ (800a9d0 <TIM_OC2_SetConfig+0xe0>)
 800a91e:	4013      	ands	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4a2b      	ldr	r2, [pc, #172]	@ (800a9d4 <TIM_OC2_SetConfig+0xe4>)
 800a926:	4013      	ands	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4313      	orrs	r3, r2
 800a934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2220      	movs	r2, #32
 800a93a:	4393      	bics	r3, r2
 800a93c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	011b      	lsls	r3, r3, #4
 800a944:	697a      	ldr	r2, [r7, #20]
 800a946:	4313      	orrs	r3, r2
 800a948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a22      	ldr	r2, [pc, #136]	@ (800a9d8 <TIM_OC2_SetConfig+0xe8>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d10d      	bne.n	800a96e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	2280      	movs	r2, #128	@ 0x80
 800a956:	4393      	bics	r3, r2
 800a958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	011b      	lsls	r3, r3, #4
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	4313      	orrs	r3, r2
 800a964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	2240      	movs	r2, #64	@ 0x40
 800a96a:	4393      	bics	r3, r2
 800a96c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a19      	ldr	r2, [pc, #100]	@ (800a9d8 <TIM_OC2_SetConfig+0xe8>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d007      	beq.n	800a986 <TIM_OC2_SetConfig+0x96>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a18      	ldr	r2, [pc, #96]	@ (800a9dc <TIM_OC2_SetConfig+0xec>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d003      	beq.n	800a986 <TIM_OC2_SetConfig+0x96>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a17      	ldr	r2, [pc, #92]	@ (800a9e0 <TIM_OC2_SetConfig+0xf0>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d113      	bne.n	800a9ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	4a16      	ldr	r2, [pc, #88]	@ (800a9e4 <TIM_OC2_SetConfig+0xf4>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	4a15      	ldr	r2, [pc, #84]	@ (800a9e8 <TIM_OC2_SetConfig+0xf8>)
 800a992:	4013      	ands	r3, r2
 800a994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	695b      	ldr	r3, [r3, #20]
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	699b      	ldr	r3, [r3, #24]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	693a      	ldr	r2, [r7, #16]
 800a9b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	685a      	ldr	r2, [r3, #4]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	621a      	str	r2, [r3, #32]
}
 800a9c8:	46c0      	nop			@ (mov r8, r8)
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	b006      	add	sp, #24
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	feff8fff 	.word	0xfeff8fff
 800a9d4:	fffffcff 	.word	0xfffffcff
 800a9d8:	40012c00 	.word	0x40012c00
 800a9dc:	40014400 	.word	0x40014400
 800a9e0:	40014800 	.word	0x40014800
 800a9e4:	fffffbff 	.word	0xfffffbff
 800a9e8:	fffff7ff 	.word	0xfffff7ff

0800a9ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6a1b      	ldr	r3, [r3, #32]
 800a9fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a1b      	ldr	r3, [r3, #32]
 800aa00:	4a31      	ldr	r2, [pc, #196]	@ (800aac8 <TIM_OC3_SetConfig+0xdc>)
 800aa02:	401a      	ands	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	69db      	ldr	r3, [r3, #28]
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	4a2d      	ldr	r2, [pc, #180]	@ (800aacc <TIM_OC3_SetConfig+0xe0>)
 800aa18:	4013      	ands	r3, r2
 800aa1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2203      	movs	r2, #3
 800aa20:	4393      	bics	r3, r2
 800aa22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	4a27      	ldr	r2, [pc, #156]	@ (800aad0 <TIM_OC3_SetConfig+0xe4>)
 800aa32:	4013      	ands	r3, r2
 800aa34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	021b      	lsls	r3, r3, #8
 800aa3c:	697a      	ldr	r2, [r7, #20]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a23      	ldr	r2, [pc, #140]	@ (800aad4 <TIM_OC3_SetConfig+0xe8>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d10d      	bne.n	800aa66 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	4a22      	ldr	r2, [pc, #136]	@ (800aad8 <TIM_OC3_SetConfig+0xec>)
 800aa4e:	4013      	ands	r3, r2
 800aa50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	021b      	lsls	r3, r3, #8
 800aa58:	697a      	ldr	r2, [r7, #20]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	4a1e      	ldr	r2, [pc, #120]	@ (800aadc <TIM_OC3_SetConfig+0xf0>)
 800aa62:	4013      	ands	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a1a      	ldr	r2, [pc, #104]	@ (800aad4 <TIM_OC3_SetConfig+0xe8>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d007      	beq.n	800aa7e <TIM_OC3_SetConfig+0x92>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a1b      	ldr	r2, [pc, #108]	@ (800aae0 <TIM_OC3_SetConfig+0xf4>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d003      	beq.n	800aa7e <TIM_OC3_SetConfig+0x92>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	4a1a      	ldr	r2, [pc, #104]	@ (800aae4 <TIM_OC3_SetConfig+0xf8>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d113      	bne.n	800aaa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4a19      	ldr	r2, [pc, #100]	@ (800aae8 <TIM_OC3_SetConfig+0xfc>)
 800aa82:	4013      	ands	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	4a18      	ldr	r2, [pc, #96]	@ (800aaec <TIM_OC3_SetConfig+0x100>)
 800aa8a:	4013      	ands	r3, r2
 800aa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	011b      	lsls	r3, r3, #4
 800aa94:	693a      	ldr	r2, [r7, #16]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	011b      	lsls	r3, r3, #4
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	68fa      	ldr	r2, [r7, #12]
 800aab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	621a      	str	r2, [r3, #32]
}
 800aac0:	46c0      	nop			@ (mov r8, r8)
 800aac2:	46bd      	mov	sp, r7
 800aac4:	b006      	add	sp, #24
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	fffffeff 	.word	0xfffffeff
 800aacc:	fffeff8f 	.word	0xfffeff8f
 800aad0:	fffffdff 	.word	0xfffffdff
 800aad4:	40012c00 	.word	0x40012c00
 800aad8:	fffff7ff 	.word	0xfffff7ff
 800aadc:	fffffbff 	.word	0xfffffbff
 800aae0:	40014400 	.word	0x40014400
 800aae4:	40014800 	.word	0x40014800
 800aae8:	ffffefff 	.word	0xffffefff
 800aaec:	ffffdfff 	.word	0xffffdfff

0800aaf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b086      	sub	sp, #24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	4a24      	ldr	r2, [pc, #144]	@ (800ab98 <TIM_OC4_SetConfig+0xa8>)
 800ab06:	401a      	ands	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	69db      	ldr	r3, [r3, #28]
 800ab16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	4a20      	ldr	r2, [pc, #128]	@ (800ab9c <TIM_OC4_SetConfig+0xac>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4a1f      	ldr	r2, [pc, #124]	@ (800aba0 <TIM_OC4_SetConfig+0xb0>)
 800ab24:	4013      	ands	r3, r2
 800ab26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	021b      	lsls	r3, r3, #8
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	4a1b      	ldr	r2, [pc, #108]	@ (800aba4 <TIM_OC4_SetConfig+0xb4>)
 800ab38:	4013      	ands	r3, r2
 800ab3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	031b      	lsls	r3, r3, #12
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	4313      	orrs	r3, r2
 800ab46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	4a17      	ldr	r2, [pc, #92]	@ (800aba8 <TIM_OC4_SetConfig+0xb8>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d007      	beq.n	800ab60 <TIM_OC4_SetConfig+0x70>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a16      	ldr	r2, [pc, #88]	@ (800abac <TIM_OC4_SetConfig+0xbc>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d003      	beq.n	800ab60 <TIM_OC4_SetConfig+0x70>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a15      	ldr	r2, [pc, #84]	@ (800abb0 <TIM_OC4_SetConfig+0xc0>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d109      	bne.n	800ab74 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	4a14      	ldr	r2, [pc, #80]	@ (800abb4 <TIM_OC4_SetConfig+0xc4>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	695b      	ldr	r3, [r3, #20]
 800ab6c:	019b      	lsls	r3, r3, #6
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	685a      	ldr	r2, [r3, #4]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	621a      	str	r2, [r3, #32]
}
 800ab8e:	46c0      	nop			@ (mov r8, r8)
 800ab90:	46bd      	mov	sp, r7
 800ab92:	b006      	add	sp, #24
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	46c0      	nop			@ (mov r8, r8)
 800ab98:	ffffefff 	.word	0xffffefff
 800ab9c:	feff8fff 	.word	0xfeff8fff
 800aba0:	fffffcff 	.word	0xfffffcff
 800aba4:	ffffdfff 	.word	0xffffdfff
 800aba8:	40012c00 	.word	0x40012c00
 800abac:	40014400 	.word	0x40014400
 800abb0:	40014800 	.word	0x40014800
 800abb4:	ffffbfff 	.word	0xffffbfff

0800abb8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6a1b      	ldr	r3, [r3, #32]
 800abcc:	4a21      	ldr	r2, [pc, #132]	@ (800ac54 <TIM_OC5_SetConfig+0x9c>)
 800abce:	401a      	ands	r2, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800abde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4a1d      	ldr	r2, [pc, #116]	@ (800ac58 <TIM_OC5_SetConfig+0xa0>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	4313      	orrs	r3, r2
 800abf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	4a19      	ldr	r2, [pc, #100]	@ (800ac5c <TIM_OC5_SetConfig+0xa4>)
 800abf6:	4013      	ands	r3, r2
 800abf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	041b      	lsls	r3, r3, #16
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4a15      	ldr	r2, [pc, #84]	@ (800ac60 <TIM_OC5_SetConfig+0xa8>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d007      	beq.n	800ac1e <TIM_OC5_SetConfig+0x66>
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	4a14      	ldr	r2, [pc, #80]	@ (800ac64 <TIM_OC5_SetConfig+0xac>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d003      	beq.n	800ac1e <TIM_OC5_SetConfig+0x66>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a13      	ldr	r2, [pc, #76]	@ (800ac68 <TIM_OC5_SetConfig+0xb0>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d109      	bne.n	800ac32 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	4a0c      	ldr	r2, [pc, #48]	@ (800ac54 <TIM_OC5_SetConfig+0x9c>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	021b      	lsls	r3, r3, #8
 800ac2c:	697a      	ldr	r2, [r7, #20]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	697a      	ldr	r2, [r7, #20]
 800ac36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	621a      	str	r2, [r3, #32]
}
 800ac4c:	46c0      	nop			@ (mov r8, r8)
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	b006      	add	sp, #24
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	fffeffff 	.word	0xfffeffff
 800ac58:	fffeff8f 	.word	0xfffeff8f
 800ac5c:	fffdffff 	.word	0xfffdffff
 800ac60:	40012c00 	.word	0x40012c00
 800ac64:	40014400 	.word	0x40014400
 800ac68:	40014800 	.word	0x40014800

0800ac6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a1b      	ldr	r3, [r3, #32]
 800ac7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	4a22      	ldr	r2, [pc, #136]	@ (800ad0c <TIM_OC6_SetConfig+0xa0>)
 800ac82:	401a      	ands	r2, r3
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4a1e      	ldr	r2, [pc, #120]	@ (800ad10 <TIM_OC6_SetConfig+0xa4>)
 800ac98:	4013      	ands	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4a1a      	ldr	r2, [pc, #104]	@ (800ad14 <TIM_OC6_SetConfig+0xa8>)
 800acac:	4013      	ands	r3, r2
 800acae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	051b      	lsls	r3, r3, #20
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	4313      	orrs	r3, r2
 800acba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a16      	ldr	r2, [pc, #88]	@ (800ad18 <TIM_OC6_SetConfig+0xac>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d007      	beq.n	800acd4 <TIM_OC6_SetConfig+0x68>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a15      	ldr	r2, [pc, #84]	@ (800ad1c <TIM_OC6_SetConfig+0xb0>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d003      	beq.n	800acd4 <TIM_OC6_SetConfig+0x68>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a14      	ldr	r2, [pc, #80]	@ (800ad20 <TIM_OC6_SetConfig+0xb4>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d109      	bne.n	800ace8 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	4a13      	ldr	r2, [pc, #76]	@ (800ad24 <TIM_OC6_SetConfig+0xb8>)
 800acd8:	4013      	ands	r3, r2
 800acda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	695b      	ldr	r3, [r3, #20]
 800ace0:	029b      	lsls	r3, r3, #10
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	68fa      	ldr	r2, [r7, #12]
 800acf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685a      	ldr	r2, [r3, #4]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	621a      	str	r2, [r3, #32]
}
 800ad02:	46c0      	nop			@ (mov r8, r8)
 800ad04:	46bd      	mov	sp, r7
 800ad06:	b006      	add	sp, #24
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	46c0      	nop			@ (mov r8, r8)
 800ad0c:	ffefffff 	.word	0xffefffff
 800ad10:	feff8fff 	.word	0xfeff8fff
 800ad14:	ffdfffff 	.word	0xffdfffff
 800ad18:	40012c00 	.word	0x40012c00
 800ad1c:	40014400 	.word	0x40014400
 800ad20:	40014800 	.word	0x40014800
 800ad24:	fffbffff 	.word	0xfffbffff

0800ad28 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	6a1b      	ldr	r3, [r3, #32]
 800ad3a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6a1b      	ldr	r3, [r3, #32]
 800ad40:	2201      	movs	r2, #1
 800ad42:	4393      	bics	r3, r2
 800ad44:	001a      	movs	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	699b      	ldr	r3, [r3, #24]
 800ad4e:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4a1e      	ldr	r2, [pc, #120]	@ (800adcc <TIM_TI1_SetConfig+0xa4>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d008      	beq.n	800ad6a <TIM_TI1_SetConfig+0x42>
 800ad58:	68fa      	ldr	r2, [r7, #12]
 800ad5a:	2380      	movs	r3, #128	@ 0x80
 800ad5c:	05db      	lsls	r3, r3, #23
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d003      	beq.n	800ad6a <TIM_TI1_SetConfig+0x42>
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	4a1a      	ldr	r2, [pc, #104]	@ (800add0 <TIM_TI1_SetConfig+0xa8>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d101      	bne.n	800ad6e <TIM_TI1_SetConfig+0x46>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <TIM_TI1_SetConfig+0x48>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d008      	beq.n	800ad86 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	2203      	movs	r2, #3
 800ad78:	4393      	bics	r3, r2
 800ad7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	617b      	str	r3, [r7, #20]
 800ad84:	e003      	b.n	800ad8e <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	22f0      	movs	r2, #240	@ 0xf0
 800ad92:	4393      	bics	r3, r2
 800ad94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	011b      	lsls	r3, r3, #4
 800ad9a:	22ff      	movs	r2, #255	@ 0xff
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	220a      	movs	r2, #10
 800ada8:	4393      	bics	r3, r2
 800adaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	220a      	movs	r2, #10
 800adb0:	4013      	ands	r3, r2
 800adb2:	693a      	ldr	r2, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	697a      	ldr	r2, [r7, #20]
 800adbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	693a      	ldr	r2, [r7, #16]
 800adc2:	621a      	str	r2, [r3, #32]
}
 800adc4:	46c0      	nop			@ (mov r8, r8)
 800adc6:	46bd      	mov	sp, r7
 800adc8:	b006      	add	sp, #24
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	40012c00 	.word	0x40012c00
 800add0:	40000400 	.word	0x40000400

0800add4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a1b      	ldr	r3, [r3, #32]
 800adea:	2201      	movs	r2, #1
 800adec:	4393      	bics	r3, r2
 800adee:	001a      	movs	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	22f0      	movs	r2, #240	@ 0xf0
 800adfe:	4393      	bics	r3, r2
 800ae00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	011b      	lsls	r3, r3, #4
 800ae06:	693a      	ldr	r2, [r7, #16]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	220a      	movs	r2, #10
 800ae10:	4393      	bics	r3, r2
 800ae12:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	621a      	str	r2, [r3, #32]
}
 800ae28:	46c0      	nop			@ (mov r8, r8)
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	b006      	add	sp, #24
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6a1b      	ldr	r3, [r3, #32]
 800ae42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6a1b      	ldr	r3, [r3, #32]
 800ae48:	2210      	movs	r2, #16
 800ae4a:	4393      	bics	r3, r2
 800ae4c:	001a      	movs	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	699b      	ldr	r3, [r3, #24]
 800ae56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	4a14      	ldr	r2, [pc, #80]	@ (800aeac <TIM_TI2_SetConfig+0x7c>)
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	4313      	orrs	r3, r2
 800ae68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4a10      	ldr	r2, [pc, #64]	@ (800aeb0 <TIM_TI2_SetConfig+0x80>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	031b      	lsls	r3, r3, #12
 800ae76:	041b      	lsls	r3, r3, #16
 800ae78:	0c1b      	lsrs	r3, r3, #16
 800ae7a:	693a      	ldr	r2, [r7, #16]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	22a0      	movs	r2, #160	@ 0xa0
 800ae84:	4393      	bics	r3, r2
 800ae86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	011b      	lsls	r3, r3, #4
 800ae8c:	22a0      	movs	r2, #160	@ 0xa0
 800ae8e:	4013      	ands	r3, r2
 800ae90:	697a      	ldr	r2, [r7, #20]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	697a      	ldr	r2, [r7, #20]
 800aea0:	621a      	str	r2, [r3, #32]
}
 800aea2:	46c0      	nop			@ (mov r8, r8)
 800aea4:	46bd      	mov	sp, r7
 800aea6:	b006      	add	sp, #24
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	46c0      	nop			@ (mov r8, r8)
 800aeac:	fffffcff 	.word	0xfffffcff
 800aeb0:	ffff0fff 	.word	0xffff0fff

0800aeb4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	6a1b      	ldr	r3, [r3, #32]
 800aeca:	2210      	movs	r2, #16
 800aecc:	4393      	bics	r3, r2
 800aece:	001a      	movs	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	699b      	ldr	r3, [r3, #24]
 800aed8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	4a0d      	ldr	r2, [pc, #52]	@ (800af14 <TIM_TI2_ConfigInputStage+0x60>)
 800aede:	4013      	ands	r3, r2
 800aee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	031b      	lsls	r3, r3, #12
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	22a0      	movs	r2, #160	@ 0xa0
 800aef0:	4393      	bics	r3, r2
 800aef2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	011b      	lsls	r3, r3, #4
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	693a      	ldr	r2, [r7, #16]
 800af02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	621a      	str	r2, [r3, #32]
}
 800af0a:	46c0      	nop			@ (mov r8, r8)
 800af0c:	46bd      	mov	sp, r7
 800af0e:	b006      	add	sp, #24
 800af10:	bd80      	pop	{r7, pc}
 800af12:	46c0      	nop			@ (mov r8, r8)
 800af14:	ffff0fff 	.word	0xffff0fff

0800af18 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	607a      	str	r2, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a1b      	ldr	r3, [r3, #32]
 800af2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6a1b      	ldr	r3, [r3, #32]
 800af30:	4a17      	ldr	r2, [pc, #92]	@ (800af90 <TIM_TI3_SetConfig+0x78>)
 800af32:	401a      	ands	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	2203      	movs	r2, #3
 800af42:	4393      	bics	r3, r2
 800af44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800af46:	693a      	ldr	r2, [r7, #16]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	22f0      	movs	r2, #240	@ 0xf0
 800af52:	4393      	bics	r3, r2
 800af54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	011b      	lsls	r3, r3, #4
 800af5a:	22ff      	movs	r2, #255	@ 0xff
 800af5c:	4013      	ands	r3, r2
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	4313      	orrs	r3, r2
 800af62:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	4a0b      	ldr	r2, [pc, #44]	@ (800af94 <TIM_TI3_SetConfig+0x7c>)
 800af68:	4013      	ands	r3, r2
 800af6a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	021a      	lsls	r2, r3, #8
 800af70:	23a0      	movs	r3, #160	@ 0xa0
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	4013      	ands	r3, r2
 800af76:	697a      	ldr	r2, [r7, #20]
 800af78:	4313      	orrs	r3, r2
 800af7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	693a      	ldr	r2, [r7, #16]
 800af80:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	697a      	ldr	r2, [r7, #20]
 800af86:	621a      	str	r2, [r3, #32]
}
 800af88:	46c0      	nop			@ (mov r8, r8)
 800af8a:	46bd      	mov	sp, r7
 800af8c:	b006      	add	sp, #24
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	fffffeff 	.word	0xfffffeff
 800af94:	fffff5ff 	.word	0xfffff5ff

0800af98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
 800afa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	6a1b      	ldr	r3, [r3, #32]
 800afb0:	4a18      	ldr	r2, [pc, #96]	@ (800b014 <TIM_TI4_SetConfig+0x7c>)
 800afb2:	401a      	ands	r2, r3
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	4a15      	ldr	r2, [pc, #84]	@ (800b018 <TIM_TI4_SetConfig+0x80>)
 800afc2:	4013      	ands	r3, r2
 800afc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	4313      	orrs	r3, r2
 800afce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	4a12      	ldr	r2, [pc, #72]	@ (800b01c <TIM_TI4_SetConfig+0x84>)
 800afd4:	4013      	ands	r3, r2
 800afd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	031b      	lsls	r3, r3, #12
 800afdc:	041b      	lsls	r3, r3, #16
 800afde:	0c1b      	lsrs	r3, r3, #16
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	4a0d      	ldr	r2, [pc, #52]	@ (800b020 <TIM_TI4_SetConfig+0x88>)
 800afea:	4013      	ands	r3, r2
 800afec:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	031a      	lsls	r2, r3, #12
 800aff2:	23a0      	movs	r3, #160	@ 0xa0
 800aff4:	021b      	lsls	r3, r3, #8
 800aff6:	4013      	ands	r3, r2
 800aff8:	697a      	ldr	r2, [r7, #20]
 800affa:	4313      	orrs	r3, r2
 800affc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	697a      	ldr	r2, [r7, #20]
 800b008:	621a      	str	r2, [r3, #32]
}
 800b00a:	46c0      	nop			@ (mov r8, r8)
 800b00c:	46bd      	mov	sp, r7
 800b00e:	b006      	add	sp, #24
 800b010:	bd80      	pop	{r7, pc}
 800b012:	46c0      	nop			@ (mov r8, r8)
 800b014:	ffffefff 	.word	0xffffefff
 800b018:	fffffcff 	.word	0xfffffcff
 800b01c:	ffff0fff 	.word	0xffff0fff
 800b020:	ffff5fff 	.word	0xffff5fff

0800b024 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4a08      	ldr	r2, [pc, #32]	@ (800b058 <TIM_ITRx_SetConfig+0x34>)
 800b038:	4013      	ands	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b03c:	683a      	ldr	r2, [r7, #0]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	2207      	movs	r2, #7
 800b044:	4313      	orrs	r3, r2
 800b046:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	609a      	str	r2, [r3, #8]
}
 800b04e:	46c0      	nop			@ (mov r8, r8)
 800b050:	46bd      	mov	sp, r7
 800b052:	b004      	add	sp, #16
 800b054:	bd80      	pop	{r7, pc}
 800b056:	46c0      	nop			@ (mov r8, r8)
 800b058:	ffcfff8f 	.word	0xffcfff8f

0800b05c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	607a      	str	r2, [r7, #4]
 800b068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	4a09      	ldr	r2, [pc, #36]	@ (800b098 <TIM_ETR_SetConfig+0x3c>)
 800b074:	4013      	ands	r3, r2
 800b076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	021a      	lsls	r2, r3, #8
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	431a      	orrs	r2, r3
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	4313      	orrs	r3, r2
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	697a      	ldr	r2, [r7, #20]
 800b08e:	609a      	str	r2, [r3, #8]
}
 800b090:	46c0      	nop			@ (mov r8, r8)
 800b092:	46bd      	mov	sp, r7
 800b094:	b006      	add	sp, #24
 800b096:	bd80      	pop	{r7, pc}
 800b098:	ffff00ff 	.word	0xffff00ff

0800b09c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b086      	sub	sp, #24
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	221f      	movs	r2, #31
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	2201      	movs	r2, #1
 800b0b0:	409a      	lsls	r2, r3
 800b0b2:	0013      	movs	r3, r2
 800b0b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	43d2      	mvns	r2, r2
 800b0be:	401a      	ands	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a1a      	ldr	r2, [r3, #32]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	211f      	movs	r1, #31
 800b0cc:	400b      	ands	r3, r1
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4099      	lsls	r1, r3
 800b0d2:	000b      	movs	r3, r1
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	621a      	str	r2, [r3, #32]
}
 800b0da:	46c0      	nop			@ (mov r8, r8)
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	b006      	add	sp, #24
 800b0e0:	bd80      	pop	{r7, pc}
	...

0800b0e4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2184      	movs	r1, #132	@ 0x84
 800b0f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b164 <TIM_ResetCallback+0x80>)
 800b0f2:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2188      	movs	r1, #136	@ 0x88
 800b0f8:	4a1b      	ldr	r2, [pc, #108]	@ (800b168 <TIM_ResetCallback+0x84>)
 800b0fa:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	218c      	movs	r1, #140	@ 0x8c
 800b100:	4a1a      	ldr	r2, [pc, #104]	@ (800b16c <TIM_ResetCallback+0x88>)
 800b102:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2190      	movs	r1, #144	@ 0x90
 800b108:	4a19      	ldr	r2, [pc, #100]	@ (800b170 <TIM_ResetCallback+0x8c>)
 800b10a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2194      	movs	r1, #148	@ 0x94
 800b110:	4a18      	ldr	r2, [pc, #96]	@ (800b174 <TIM_ResetCallback+0x90>)
 800b112:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2198      	movs	r1, #152	@ 0x98
 800b118:	4a17      	ldr	r2, [pc, #92]	@ (800b178 <TIM_ResetCallback+0x94>)
 800b11a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	219c      	movs	r1, #156	@ 0x9c
 800b120:	4a16      	ldr	r2, [pc, #88]	@ (800b17c <TIM_ResetCallback+0x98>)
 800b122:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	21a0      	movs	r1, #160	@ 0xa0
 800b128:	4a15      	ldr	r2, [pc, #84]	@ (800b180 <TIM_ResetCallback+0x9c>)
 800b12a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	21a4      	movs	r1, #164	@ 0xa4
 800b130:	4a14      	ldr	r2, [pc, #80]	@ (800b184 <TIM_ResetCallback+0xa0>)
 800b132:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	21a8      	movs	r1, #168	@ 0xa8
 800b138:	4a13      	ldr	r2, [pc, #76]	@ (800b188 <TIM_ResetCallback+0xa4>)
 800b13a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	21ac      	movs	r1, #172	@ 0xac
 800b140:	4a12      	ldr	r2, [pc, #72]	@ (800b18c <TIM_ResetCallback+0xa8>)
 800b142:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	21b0      	movs	r1, #176	@ 0xb0
 800b148:	4a11      	ldr	r2, [pc, #68]	@ (800b190 <TIM_ResetCallback+0xac>)
 800b14a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	21b4      	movs	r1, #180	@ 0xb4
 800b150:	4a10      	ldr	r2, [pc, #64]	@ (800b194 <TIM_ResetCallback+0xb0>)
 800b152:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	21b8      	movs	r1, #184	@ 0xb8
 800b158:	4a0f      	ldr	r2, [pc, #60]	@ (800b198 <TIM_ResetCallback+0xb4>)
 800b15a:	505a      	str	r2, [r3, r1]
}
 800b15c:	46c0      	nop			@ (mov r8, r8)
 800b15e:	46bd      	mov	sp, r7
 800b160:	b002      	add	sp, #8
 800b162:	bd80      	pop	{r7, pc}
 800b164:	0800a43d 	.word	0x0800a43d
 800b168:	0800a44d 	.word	0x0800a44d
 800b16c:	0800a4ad 	.word	0x0800a4ad
 800b170:	0800a4bd 	.word	0x0800a4bd
 800b174:	0800a46d 	.word	0x0800a46d
 800b178:	0800a47d 	.word	0x0800a47d
 800b17c:	0800a45d 	.word	0x0800a45d
 800b180:	0800a48d 	.word	0x0800a48d
 800b184:	0800a49d 	.word	0x0800a49d
 800b188:	0800a4cd 	.word	0x0800a4cd
 800b18c:	0800b3a5 	.word	0x0800b3a5
 800b190:	0800b3b5 	.word	0x0800b3b5
 800b194:	0800b3c5 	.word	0x0800b3c5
 800b198:	0800b3d5 	.word	0x0800b3d5

0800b19c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	223c      	movs	r2, #60	@ 0x3c
 800b1aa:	5c9b      	ldrb	r3, [r3, r2]
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d101      	bne.n	800b1b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	e050      	b.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	223c      	movs	r2, #60	@ 0x3c
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	223d      	movs	r2, #61	@ 0x3d
 800b1c0:	2102      	movs	r1, #2
 800b1c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a21      	ldr	r2, [pc, #132]	@ (800b260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d108      	bne.n	800b1f0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	4a20      	ldr	r2, [pc, #128]	@ (800b264 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	68fa      	ldr	r2, [r7, #12]
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2270      	movs	r2, #112	@ 0x70
 800b1f4:	4393      	bics	r3, r2
 800b1f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	68fa      	ldr	r2, [r7, #12]
 800b1fe:	4313      	orrs	r3, r2
 800b200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a14      	ldr	r2, [pc, #80]	@ (800b260 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d00a      	beq.n	800b22a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	2380      	movs	r3, #128	@ 0x80
 800b21a:	05db      	lsls	r3, r3, #23
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d004      	beq.n	800b22a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a10      	ldr	r2, [pc, #64]	@ (800b268 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d10c      	bne.n	800b244 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2280      	movs	r2, #128	@ 0x80
 800b22e:	4393      	bics	r3, r2
 800b230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	4313      	orrs	r3, r2
 800b23a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	68ba      	ldr	r2, [r7, #8]
 800b242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	223d      	movs	r2, #61	@ 0x3d
 800b248:	2101      	movs	r1, #1
 800b24a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	223c      	movs	r2, #60	@ 0x3c
 800b250:	2100      	movs	r1, #0
 800b252:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	0018      	movs	r0, r3
 800b258:	46bd      	mov	sp, r7
 800b25a:	b004      	add	sp, #16
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	46c0      	nop			@ (mov r8, r8)
 800b260:	40012c00 	.word	0x40012c00
 800b264:	ff0fffff 	.word	0xff0fffff
 800b268:	40000400 	.word	0x40000400

0800b26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b276:	2300      	movs	r3, #0
 800b278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	223c      	movs	r2, #60	@ 0x3c
 800b27e:	5c9b      	ldrb	r3, [r3, r2]
 800b280:	2b01      	cmp	r3, #1
 800b282:	d101      	bne.n	800b288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b284:	2302      	movs	r3, #2
 800b286:	e06f      	b.n	800b368 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	223c      	movs	r2, #60	@ 0x3c
 800b28c:	2101      	movs	r1, #1
 800b28e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	22ff      	movs	r2, #255	@ 0xff
 800b294:	4393      	bics	r3, r2
 800b296:	001a      	movs	r2, r3
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4a33      	ldr	r2, [pc, #204]	@ (800b370 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800b2a4:	401a      	ands	r2, r3
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	4a30      	ldr	r2, [pc, #192]	@ (800b374 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800b2b2:	401a      	ands	r2, r3
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4a2e      	ldr	r2, [pc, #184]	@ (800b378 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800b2c0:	401a      	ands	r2, r3
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	4a2b      	ldr	r2, [pc, #172]	@ (800b37c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800b2ce:	401a      	ands	r2, r3
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4a29      	ldr	r2, [pc, #164]	@ (800b380 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800b2dc:	401a      	ands	r2, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	4a26      	ldr	r2, [pc, #152]	@ (800b384 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800b2ea:	401a      	ands	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	4a24      	ldr	r2, [pc, #144]	@ (800b388 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b2f8:	401a      	ands	r2, r3
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	699b      	ldr	r3, [r3, #24]
 800b2fe:	041b      	lsls	r3, r3, #16
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	4a21      	ldr	r2, [pc, #132]	@ (800b38c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b308:	401a      	ands	r2, r3
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	69db      	ldr	r3, [r3, #28]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a1e      	ldr	r2, [pc, #120]	@ (800b390 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d11c      	bne.n	800b356 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	4a1d      	ldr	r2, [pc, #116]	@ (800b394 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800b320:	401a      	ands	r2, r3
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	051b      	lsls	r3, r3, #20
 800b328:	4313      	orrs	r3, r2
 800b32a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4a1a      	ldr	r2, [pc, #104]	@ (800b398 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800b330:	401a      	ands	r2, r3
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	6a1b      	ldr	r3, [r3, #32]
 800b336:	4313      	orrs	r3, r2
 800b338:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4a17      	ldr	r2, [pc, #92]	@ (800b39c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800b33e:	401a      	ands	r2, r3
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	4313      	orrs	r3, r2
 800b346:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4a15      	ldr	r2, [pc, #84]	@ (800b3a0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800b34c:	401a      	ands	r2, r3
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b352:	4313      	orrs	r3, r2
 800b354:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68fa      	ldr	r2, [r7, #12]
 800b35c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	223c      	movs	r2, #60	@ 0x3c
 800b362:	2100      	movs	r1, #0
 800b364:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b366:	2300      	movs	r3, #0
}
 800b368:	0018      	movs	r0, r3
 800b36a:	46bd      	mov	sp, r7
 800b36c:	b004      	add	sp, #16
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	fffffcff 	.word	0xfffffcff
 800b374:	fffffbff 	.word	0xfffffbff
 800b378:	fffff7ff 	.word	0xfffff7ff
 800b37c:	ffffefff 	.word	0xffffefff
 800b380:	ffffdfff 	.word	0xffffdfff
 800b384:	ffffbfff 	.word	0xffffbfff
 800b388:	fff0ffff 	.word	0xfff0ffff
 800b38c:	efffffff 	.word	0xefffffff
 800b390:	40012c00 	.word	0x40012c00
 800b394:	ff0fffff 	.word	0xff0fffff
 800b398:	feffffff 	.word	0xfeffffff
 800b39c:	fdffffff 	.word	0xfdffffff
 800b3a0:	dfffffff 	.word	0xdfffffff

0800b3a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3ac:	46c0      	nop			@ (mov r8, r8)
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	b002      	add	sp, #8
 800b3b2:	bd80      	pop	{r7, pc}

0800b3b4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b3bc:	46c0      	nop			@ (mov r8, r8)
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	b002      	add	sp, #8
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3cc:	46c0      	nop			@ (mov r8, r8)
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	b002      	add	sp, #8
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b3dc:	46c0      	nop			@ (mov r8, r8)
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	b002      	add	sp, #8
 800b3e2:	bd80      	pop	{r7, pc}

0800b3e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e055      	b.n	800b4a2 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2288      	movs	r2, #136	@ 0x88
 800b3fa:	589b      	ldr	r3, [r3, r2]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d116      	bne.n	800b42e <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2284      	movs	r2, #132	@ 0x84
 800b404:	2100      	movs	r1, #0
 800b406:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	0018      	movs	r0, r3
 800b40c:	f000 fce0 	bl	800bdd0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	22c4      	movs	r2, #196	@ 0xc4
 800b414:	589b      	ldr	r3, [r3, r2]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d103      	bne.n	800b422 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	21c4      	movs	r1, #196	@ 0xc4
 800b41e:	4a23      	ldr	r2, [pc, #140]	@ (800b4ac <HAL_UART_Init+0xc8>)
 800b420:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	22c4      	movs	r2, #196	@ 0xc4
 800b426:	589b      	ldr	r3, [r3, r2]
 800b428:	687a      	ldr	r2, [r7, #4]
 800b42a:	0010      	movs	r0, r2
 800b42c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2288      	movs	r2, #136	@ 0x88
 800b432:	2124      	movs	r1, #36	@ 0x24
 800b434:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	681a      	ldr	r2, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2101      	movs	r1, #1
 800b442:	438a      	bics	r2, r1
 800b444:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d003      	beq.n	800b456 <HAL_UART_Init+0x72>
  {
    UART_AdvFeatureConfig(huart);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	0018      	movs	r0, r3
 800b452:	f000 ff85 	bl	800c360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	0018      	movs	r0, r3
 800b45a:	f000 fd09 	bl	800be70 <UART_SetConfig>
 800b45e:	0003      	movs	r3, r0
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UART_Init+0x84>
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e01c      	b.n	800b4a2 <HAL_UART_Init+0xbe>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	490f      	ldr	r1, [pc, #60]	@ (800b4b0 <HAL_UART_Init+0xcc>)
 800b474:	400a      	ands	r2, r1
 800b476:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	689a      	ldr	r2, [r3, #8]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	212a      	movs	r1, #42	@ 0x2a
 800b484:	438a      	bics	r2, r1
 800b486:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	681a      	ldr	r2, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2101      	movs	r1, #1
 800b494:	430a      	orrs	r2, r1
 800b496:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	0018      	movs	r0, r3
 800b49c:	f001 f814 	bl	800c4c8 <UART_CheckIdleState>
 800b4a0:	0003      	movs	r3, r0
}
 800b4a2:	0018      	movs	r0, r3
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	b002      	add	sp, #8
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	46c0      	nop			@ (mov r8, r8)
 800b4ac:	08004c01 	.word	0x08004c01
 800b4b0:	ffffb7ff 	.word	0xffffb7ff

0800b4b4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	607a      	str	r2, [r7, #4]
 800b4be:	230b      	movs	r3, #11
 800b4c0:	18fb      	adds	r3, r7, r3
 800b4c2:	1c0a      	adds	r2, r1, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b4c6:	2317      	movs	r3, #23
 800b4c8:	18fb      	adds	r3, r7, r3
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d109      	bne.n	800b4e8 <HAL_UART_RegisterCallback+0x34>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2290      	movs	r2, #144	@ 0x90
 800b4d8:	589b      	ldr	r3, [r3, r2]
 800b4da:	2240      	movs	r2, #64	@ 0x40
 800b4dc:	431a      	orrs	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2190      	movs	r1, #144	@ 0x90
 800b4e2:	505a      	str	r2, [r3, r1]

    return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e08f      	b.n	800b608 <HAL_UART_RegisterCallback+0x154>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2288      	movs	r2, #136	@ 0x88
 800b4ec:	589b      	ldr	r3, [r3, r2]
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	d157      	bne.n	800b5a2 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b4f2:	230b      	movs	r3, #11
 800b4f4:	18fb      	adds	r3, r7, r3
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	2b0c      	cmp	r3, #12
 800b4fa:	d845      	bhi.n	800b588 <HAL_UART_RegisterCallback+0xd4>
 800b4fc:	009a      	lsls	r2, r3, #2
 800b4fe:	4b44      	ldr	r3, [pc, #272]	@ (800b610 <HAL_UART_RegisterCallback+0x15c>)
 800b500:	18d3      	adds	r3, r2, r3
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	469f      	mov	pc, r3
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2194      	movs	r1, #148	@ 0x94
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	505a      	str	r2, [r3, r1]
        break;
 800b50e:	e078      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2198      	movs	r1, #152	@ 0x98
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	505a      	str	r2, [r3, r1]
        break;
 800b518:	e073      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	219c      	movs	r1, #156	@ 0x9c
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	505a      	str	r2, [r3, r1]
        break;
 800b522:	e06e      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	21a0      	movs	r1, #160	@ 0xa0
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	505a      	str	r2, [r3, r1]
        break;
 800b52c:	e069      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	21a4      	movs	r1, #164	@ 0xa4
 800b532:	687a      	ldr	r2, [r7, #4]
 800b534:	505a      	str	r2, [r3, r1]
        break;
 800b536:	e064      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	21a8      	movs	r1, #168	@ 0xa8
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	505a      	str	r2, [r3, r1]
        break;
 800b540:	e05f      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	21ac      	movs	r1, #172	@ 0xac
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	505a      	str	r2, [r3, r1]
        break;
 800b54a:	e05a      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	21b0      	movs	r1, #176	@ 0xb0
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	505a      	str	r2, [r3, r1]
        break;
 800b554:	e055      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	21b4      	movs	r1, #180	@ 0xb4
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	505a      	str	r2, [r3, r1]
        break;
 800b55e:	e050      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	21b8      	movs	r1, #184	@ 0xb8
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	505a      	str	r2, [r3, r1]
        break;
 800b568:	e04b      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	21bc      	movs	r1, #188	@ 0xbc
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	505a      	str	r2, [r3, r1]
        break;
 800b572:	e046      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	21c4      	movs	r1, #196	@ 0xc4
 800b578:	687a      	ldr	r2, [r7, #4]
 800b57a:	505a      	str	r2, [r3, r1]
        break;
 800b57c:	e041      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	21c8      	movs	r1, #200	@ 0xc8
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	505a      	str	r2, [r3, r1]
        break;
 800b586:	e03c      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2290      	movs	r2, #144	@ 0x90
 800b58c:	589b      	ldr	r3, [r3, r2]
 800b58e:	2240      	movs	r2, #64	@ 0x40
 800b590:	431a      	orrs	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2190      	movs	r1, #144	@ 0x90
 800b596:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b598:	2317      	movs	r3, #23
 800b59a:	18fb      	adds	r3, r7, r3
 800b59c:	2201      	movs	r2, #1
 800b59e:	701a      	strb	r2, [r3, #0]
        break;
 800b5a0:	e02f      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2288      	movs	r2, #136	@ 0x88
 800b5a6:	589b      	ldr	r3, [r3, r2]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d11e      	bne.n	800b5ea <HAL_UART_RegisterCallback+0x136>
  {
    switch (CallbackID)
 800b5ac:	230b      	movs	r3, #11
 800b5ae:	18fb      	adds	r3, r7, r3
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b0b      	cmp	r3, #11
 800b5b4:	d002      	beq.n	800b5bc <HAL_UART_RegisterCallback+0x108>
 800b5b6:	2b0c      	cmp	r3, #12
 800b5b8:	d005      	beq.n	800b5c6 <HAL_UART_RegisterCallback+0x112>
 800b5ba:	e009      	b.n	800b5d0 <HAL_UART_RegisterCallback+0x11c>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	21c4      	movs	r1, #196	@ 0xc4
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	505a      	str	r2, [r3, r1]
        break;
 800b5c4:	e01d      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	21c8      	movs	r1, #200	@ 0xc8
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	505a      	str	r2, [r3, r1]
        break;
 800b5ce:	e018      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2290      	movs	r2, #144	@ 0x90
 800b5d4:	589b      	ldr	r3, [r3, r2]
 800b5d6:	2240      	movs	r2, #64	@ 0x40
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2190      	movs	r1, #144	@ 0x90
 800b5de:	505a      	str	r2, [r3, r1]

        status =  HAL_ERROR;
 800b5e0:	2317      	movs	r3, #23
 800b5e2:	18fb      	adds	r3, r7, r3
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	701a      	strb	r2, [r3, #0]
        break;
 800b5e8:	e00b      	b.n	800b602 <HAL_UART_RegisterCallback+0x14e>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	2290      	movs	r2, #144	@ 0x90
 800b5ee:	589b      	ldr	r3, [r3, r2]
 800b5f0:	2240      	movs	r2, #64	@ 0x40
 800b5f2:	431a      	orrs	r2, r3
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2190      	movs	r1, #144	@ 0x90
 800b5f8:	505a      	str	r2, [r3, r1]

    status =  HAL_ERROR;
 800b5fa:	2317      	movs	r3, #23
 800b5fc:	18fb      	adds	r3, r7, r3
 800b5fe:	2201      	movs	r2, #1
 800b600:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b602:	2317      	movs	r3, #23
 800b604:	18fb      	adds	r3, r7, r3
 800b606:	781b      	ldrb	r3, [r3, #0]
}
 800b608:	0018      	movs	r0, r3
 800b60a:	46bd      	mov	sp, r7
 800b60c:	b006      	add	sp, #24
 800b60e:	bd80      	pop	{r7, pc}
 800b610:	0800d718 	.word	0x0800d718

0800b614 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	1dbb      	adds	r3, r7, #6
 800b620:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	228c      	movs	r2, #140	@ 0x8c
 800b626:	589b      	ldr	r3, [r3, r2]
 800b628:	2b20      	cmp	r3, #32
 800b62a:	d14a      	bne.n	800b6c2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_UART_Receive_DMA+0x26>
 800b632:	1dbb      	adds	r3, r7, #6
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d101      	bne.n	800b63e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800b63a:	2301      	movs	r3, #1
 800b63c:	e042      	b.n	800b6c4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	689a      	ldr	r2, [r3, #8]
 800b642:	2380      	movs	r3, #128	@ 0x80
 800b644:	015b      	lsls	r3, r3, #5
 800b646:	429a      	cmp	r2, r3
 800b648:	d109      	bne.n	800b65e <HAL_UART_Receive_DMA+0x4a>
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	691b      	ldr	r3, [r3, #16]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d105      	bne.n	800b65e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2201      	movs	r2, #1
 800b656:	4013      	ands	r3, r2
 800b658:	d001      	beq.n	800b65e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800b65a:	2301      	movs	r3, #1
 800b65c:	e032      	b.n	800b6c4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a18      	ldr	r2, [pc, #96]	@ (800b6cc <HAL_UART_Receive_DMA+0xb8>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d020      	beq.n	800b6b0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	2380      	movs	r3, #128	@ 0x80
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	4013      	ands	r3, r2
 800b67a:	d019      	beq.n	800b6b0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b67c:	f3ef 8310 	mrs	r3, PRIMASK
 800b680:	613b      	str	r3, [r7, #16]
  return(result);
 800b682:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b684:	61fb      	str	r3, [r7, #28]
 800b686:	2301      	movs	r3, #1
 800b688:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	f383 8810 	msr	PRIMASK, r3
}
 800b690:	46c0      	nop			@ (mov r8, r8)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2180      	movs	r1, #128	@ 0x80
 800b69e:	04c9      	lsls	r1, r1, #19
 800b6a0:	430a      	orrs	r2, r1
 800b6a2:	601a      	str	r2, [r3, #0]
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b6a8:	69bb      	ldr	r3, [r7, #24]
 800b6aa:	f383 8810 	msr	PRIMASK, r3
}
 800b6ae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800b6b0:	1dbb      	adds	r3, r7, #6
 800b6b2:	881a      	ldrh	r2, [r3, #0]
 800b6b4:	68b9      	ldr	r1, [r7, #8]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	f001 f81f 	bl	800c6fc <UART_Start_Receive_DMA>
 800b6be:	0003      	movs	r3, r0
 800b6c0:	e000      	b.n	800b6c4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800b6c2:	2302      	movs	r3, #2
  }
}
 800b6c4:	0018      	movs	r0, r3
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	b008      	add	sp, #32
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	40008000 	.word	0x40008000

0800b6d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6d0:	b5b0      	push	{r4, r5, r7, lr}
 800b6d2:	b0aa      	sub	sp, #168	@ 0xa8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	22a4      	movs	r2, #164	@ 0xa4
 800b6e0:	18b9      	adds	r1, r7, r2
 800b6e2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	20a0      	movs	r0, #160	@ 0xa0
 800b6ec:	1839      	adds	r1, r7, r0
 800b6ee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	249c      	movs	r4, #156	@ 0x9c
 800b6f8:	1939      	adds	r1, r7, r4
 800b6fa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6fc:	0011      	movs	r1, r2
 800b6fe:	18bb      	adds	r3, r7, r2
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4aa5      	ldr	r2, [pc, #660]	@ (800b998 <HAL_UART_IRQHandler+0x2c8>)
 800b704:	4013      	ands	r3, r2
 800b706:	2298      	movs	r2, #152	@ 0x98
 800b708:	18bd      	adds	r5, r7, r2
 800b70a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800b70c:	18bb      	adds	r3, r7, r2
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d11a      	bne.n	800b74a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b714:	187b      	adds	r3, r7, r1
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	2220      	movs	r2, #32
 800b71a:	4013      	ands	r3, r2
 800b71c:	d015      	beq.n	800b74a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b71e:	183b      	adds	r3, r7, r0
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2220      	movs	r2, #32
 800b724:	4013      	ands	r3, r2
 800b726:	d105      	bne.n	800b734 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b728:	193b      	adds	r3, r7, r4
 800b72a:	681a      	ldr	r2, [r3, #0]
 800b72c:	2380      	movs	r3, #128	@ 0x80
 800b72e:	055b      	lsls	r3, r3, #21
 800b730:	4013      	ands	r3, r2
 800b732:	d00a      	beq.n	800b74a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d100      	bne.n	800b73e <HAL_UART_IRQHandler+0x6e>
 800b73c:	e2ea      	b.n	800bd14 <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	0010      	movs	r0, r2
 800b746:	4798      	blx	r3
      }
      return;
 800b748:	e2e4      	b.n	800bd14 <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b74a:	2398      	movs	r3, #152	@ 0x98
 800b74c:	18fb      	adds	r3, r7, r3
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d100      	bne.n	800b756 <HAL_UART_IRQHandler+0x86>
 800b754:	e128      	b.n	800b9a8 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b756:	239c      	movs	r3, #156	@ 0x9c
 800b758:	18fb      	adds	r3, r7, r3
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a8f      	ldr	r2, [pc, #572]	@ (800b99c <HAL_UART_IRQHandler+0x2cc>)
 800b75e:	4013      	ands	r3, r2
 800b760:	d106      	bne.n	800b770 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b762:	23a0      	movs	r3, #160	@ 0xa0
 800b764:	18fb      	adds	r3, r7, r3
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a8d      	ldr	r2, [pc, #564]	@ (800b9a0 <HAL_UART_IRQHandler+0x2d0>)
 800b76a:	4013      	ands	r3, r2
 800b76c:	d100      	bne.n	800b770 <HAL_UART_IRQHandler+0xa0>
 800b76e:	e11b      	b.n	800b9a8 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b770:	23a4      	movs	r3, #164	@ 0xa4
 800b772:	18fb      	adds	r3, r7, r3
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2201      	movs	r2, #1
 800b778:	4013      	ands	r3, r2
 800b77a:	d012      	beq.n	800b7a2 <HAL_UART_IRQHandler+0xd2>
 800b77c:	23a0      	movs	r3, #160	@ 0xa0
 800b77e:	18fb      	adds	r3, r7, r3
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	2380      	movs	r3, #128	@ 0x80
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	4013      	ands	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	2201      	movs	r2, #1
 800b790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2290      	movs	r2, #144	@ 0x90
 800b796:	589b      	ldr	r3, [r3, r2]
 800b798:	2201      	movs	r2, #1
 800b79a:	431a      	orrs	r2, r3
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2190      	movs	r1, #144	@ 0x90
 800b7a0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7a2:	23a4      	movs	r3, #164	@ 0xa4
 800b7a4:	18fb      	adds	r3, r7, r3
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2202      	movs	r2, #2
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	d011      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x102>
 800b7ae:	239c      	movs	r3, #156	@ 0x9c
 800b7b0:	18fb      	adds	r3, r7, r3
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	d00b      	beq.n	800b7d2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2290      	movs	r2, #144	@ 0x90
 800b7c6:	589b      	ldr	r3, [r3, r2]
 800b7c8:	2204      	movs	r2, #4
 800b7ca:	431a      	orrs	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2190      	movs	r1, #144	@ 0x90
 800b7d0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7d2:	23a4      	movs	r3, #164	@ 0xa4
 800b7d4:	18fb      	adds	r3, r7, r3
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2204      	movs	r2, #4
 800b7da:	4013      	ands	r3, r2
 800b7dc:	d011      	beq.n	800b802 <HAL_UART_IRQHandler+0x132>
 800b7de:	239c      	movs	r3, #156	@ 0x9c
 800b7e0:	18fb      	adds	r3, r7, r3
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	4013      	ands	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2290      	movs	r2, #144	@ 0x90
 800b7f6:	589b      	ldr	r3, [r3, r2]
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	431a      	orrs	r2, r3
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2190      	movs	r1, #144	@ 0x90
 800b800:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b802:	23a4      	movs	r3, #164	@ 0xa4
 800b804:	18fb      	adds	r3, r7, r3
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2208      	movs	r2, #8
 800b80a:	4013      	ands	r3, r2
 800b80c:	d017      	beq.n	800b83e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b80e:	23a0      	movs	r3, #160	@ 0xa0
 800b810:	18fb      	adds	r3, r7, r3
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2220      	movs	r2, #32
 800b816:	4013      	ands	r3, r2
 800b818:	d105      	bne.n	800b826 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b81a:	239c      	movs	r3, #156	@ 0x9c
 800b81c:	18fb      	adds	r3, r7, r3
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a5e      	ldr	r2, [pc, #376]	@ (800b99c <HAL_UART_IRQHandler+0x2cc>)
 800b822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b824:	d00b      	beq.n	800b83e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2208      	movs	r2, #8
 800b82c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2290      	movs	r2, #144	@ 0x90
 800b832:	589b      	ldr	r3, [r3, r2]
 800b834:	2208      	movs	r2, #8
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2190      	movs	r1, #144	@ 0x90
 800b83c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b83e:	23a4      	movs	r3, #164	@ 0xa4
 800b840:	18fb      	adds	r3, r7, r3
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	2380      	movs	r3, #128	@ 0x80
 800b846:	011b      	lsls	r3, r3, #4
 800b848:	4013      	ands	r3, r2
 800b84a:	d013      	beq.n	800b874 <HAL_UART_IRQHandler+0x1a4>
 800b84c:	23a0      	movs	r3, #160	@ 0xa0
 800b84e:	18fb      	adds	r3, r7, r3
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	2380      	movs	r3, #128	@ 0x80
 800b854:	04db      	lsls	r3, r3, #19
 800b856:	4013      	ands	r3, r2
 800b858:	d00c      	beq.n	800b874 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	2280      	movs	r2, #128	@ 0x80
 800b860:	0112      	lsls	r2, r2, #4
 800b862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2290      	movs	r2, #144	@ 0x90
 800b868:	589b      	ldr	r3, [r3, r2]
 800b86a:	2220      	movs	r2, #32
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2190      	movs	r1, #144	@ 0x90
 800b872:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2290      	movs	r2, #144	@ 0x90
 800b878:	589b      	ldr	r3, [r3, r2]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d100      	bne.n	800b880 <HAL_UART_IRQHandler+0x1b0>
 800b87e:	e24b      	b.n	800bd18 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b880:	23a4      	movs	r3, #164	@ 0xa4
 800b882:	18fb      	adds	r3, r7, r3
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2220      	movs	r2, #32
 800b888:	4013      	ands	r3, r2
 800b88a:	d015      	beq.n	800b8b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b88c:	23a0      	movs	r3, #160	@ 0xa0
 800b88e:	18fb      	adds	r3, r7, r3
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2220      	movs	r2, #32
 800b894:	4013      	ands	r3, r2
 800b896:	d106      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b898:	239c      	movs	r3, #156	@ 0x9c
 800b89a:	18fb      	adds	r3, r7, r3
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	2380      	movs	r3, #128	@ 0x80
 800b8a0:	055b      	lsls	r3, r3, #21
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	d008      	beq.n	800b8b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d004      	beq.n	800b8b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	0010      	movs	r0, r2
 800b8b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2290      	movs	r2, #144	@ 0x90
 800b8bc:	589b      	ldr	r3, [r3, r2]
 800b8be:	2194      	movs	r1, #148	@ 0x94
 800b8c0:	187a      	adds	r2, r7, r1
 800b8c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	2240      	movs	r2, #64	@ 0x40
 800b8cc:	4013      	ands	r3, r2
 800b8ce:	2b40      	cmp	r3, #64	@ 0x40
 800b8d0:	d004      	beq.n	800b8dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8d2:	187b      	adds	r3, r7, r1
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2228      	movs	r2, #40	@ 0x28
 800b8d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8da:	d050      	beq.n	800b97e <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	0018      	movs	r0, r3
 800b8e0:	f000 fff2 	bl	800c8c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	2240      	movs	r2, #64	@ 0x40
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d13e      	bne.n	800b970 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800b8f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8fa:	2090      	movs	r0, #144	@ 0x90
 800b8fc:	183a      	adds	r2, r7, r0
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	2301      	movs	r3, #1
 800b902:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b906:	f383 8810 	msr	PRIMASK, r3
}
 800b90a:	46c0      	nop			@ (mov r8, r8)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	689a      	ldr	r2, [r3, #8]
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2140      	movs	r1, #64	@ 0x40
 800b918:	438a      	bics	r2, r1
 800b91a:	609a      	str	r2, [r3, #8]
 800b91c:	183b      	adds	r3, r7, r0
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b924:	f383 8810 	msr	PRIMASK, r3
}
 800b928:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2280      	movs	r2, #128	@ 0x80
 800b92e:	589b      	ldr	r3, [r3, r2]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d016      	beq.n	800b962 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2280      	movs	r2, #128	@ 0x80
 800b938:	589b      	ldr	r3, [r3, r2]
 800b93a:	4a1a      	ldr	r2, [pc, #104]	@ (800b9a4 <HAL_UART_IRQHandler+0x2d4>)
 800b93c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2280      	movs	r2, #128	@ 0x80
 800b942:	589b      	ldr	r3, [r3, r2]
 800b944:	0018      	movs	r0, r3
 800b946:	f7fb fce5 	bl	8007314 <HAL_DMA_Abort_IT>
 800b94a:	1e03      	subs	r3, r0, #0
 800b94c:	d022      	beq.n	800b994 <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2280      	movs	r2, #128	@ 0x80
 800b952:	589b      	ldr	r3, [r3, r2]
 800b954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	2180      	movs	r1, #128	@ 0x80
 800b95a:	5852      	ldr	r2, [r2, r1]
 800b95c:	0010      	movs	r0, r2
 800b95e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b960:	e018      	b.n	800b994 <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	22a4      	movs	r2, #164	@ 0xa4
 800b966:	589b      	ldr	r3, [r3, r2]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	0010      	movs	r0, r2
 800b96c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b96e:	e011      	b.n	800b994 <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	22a4      	movs	r2, #164	@ 0xa4
 800b974:	589b      	ldr	r3, [r3, r2]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	0010      	movs	r0, r2
 800b97a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b97c:	e00a      	b.n	800b994 <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	22a4      	movs	r2, #164	@ 0xa4
 800b982:	589b      	ldr	r3, [r3, r2]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	0010      	movs	r0, r2
 800b988:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2290      	movs	r2, #144	@ 0x90
 800b98e:	2100      	movs	r1, #0
 800b990:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800b992:	e1c1      	b.n	800bd18 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b994:	46c0      	nop			@ (mov r8, r8)
    return;
 800b996:	e1bf      	b.n	800bd18 <HAL_UART_IRQHandler+0x648>
 800b998:	0000080f 	.word	0x0000080f
 800b99c:	10000001 	.word	0x10000001
 800b9a0:	04000120 	.word	0x04000120
 800b9a4:	0800cb9b 	.word	0x0800cb9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d000      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x2e2>
 800b9b0:	e140      	b.n	800bc34 <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b9b2:	23a4      	movs	r3, #164	@ 0xa4
 800b9b4:	18fb      	adds	r3, r7, r3
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2210      	movs	r2, #16
 800b9ba:	4013      	ands	r3, r2
 800b9bc:	d100      	bne.n	800b9c0 <HAL_UART_IRQHandler+0x2f0>
 800b9be:	e139      	b.n	800bc34 <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b9c0:	23a0      	movs	r3, #160	@ 0xa0
 800b9c2:	18fb      	adds	r3, r7, r3
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	2210      	movs	r2, #16
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	d100      	bne.n	800b9ce <HAL_UART_IRQHandler+0x2fe>
 800b9cc:	e132      	b.n	800bc34 <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2210      	movs	r2, #16
 800b9d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	2240      	movs	r2, #64	@ 0x40
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b40      	cmp	r3, #64	@ 0x40
 800b9e2:	d000      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x316>
 800b9e4:	e0a5      	b.n	800bb32 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2280      	movs	r2, #128	@ 0x80
 800b9ea:	589b      	ldr	r3, [r3, r2]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	685a      	ldr	r2, [r3, #4]
 800b9f0:	217e      	movs	r1, #126	@ 0x7e
 800b9f2:	187b      	adds	r3, r7, r1
 800b9f4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800b9f6:	187b      	adds	r3, r7, r1
 800b9f8:	881b      	ldrh	r3, [r3, #0]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d100      	bne.n	800ba00 <HAL_UART_IRQHandler+0x330>
 800b9fe:	e18d      	b.n	800bd1c <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	225c      	movs	r2, #92	@ 0x5c
 800ba04:	5a9b      	ldrh	r3, [r3, r2]
 800ba06:	187a      	adds	r2, r7, r1
 800ba08:	8812      	ldrh	r2, [r2, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d300      	bcc.n	800ba10 <HAL_UART_IRQHandler+0x340>
 800ba0e:	e185      	b.n	800bd1c <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	187a      	adds	r2, r7, r1
 800ba14:	215e      	movs	r1, #94	@ 0x5e
 800ba16:	8812      	ldrh	r2, [r2, #0]
 800ba18:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2280      	movs	r2, #128	@ 0x80
 800ba1e:	589b      	ldr	r3, [r3, r2]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2220      	movs	r2, #32
 800ba26:	4013      	ands	r3, r2
 800ba28:	d170      	bne.n	800bb0c <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba2a:	f3ef 8310 	mrs	r3, PRIMASK
 800ba2e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ba30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba32:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ba34:	2301      	movs	r3, #1
 800ba36:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba3a:	f383 8810 	msr	PRIMASK, r3
}
 800ba3e:	46c0      	nop			@ (mov r8, r8)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	681a      	ldr	r2, [r3, #0]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	49b8      	ldr	r1, [pc, #736]	@ (800bd2c <HAL_UART_IRQHandler+0x65c>)
 800ba4c:	400a      	ands	r2, r1
 800ba4e:	601a      	str	r2, [r3, #0]
 800ba50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ba52:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba56:	f383 8810 	msr	PRIMASK, r3
}
 800ba5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ba60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800ba62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba64:	677b      	str	r3, [r7, #116]	@ 0x74
 800ba66:	2301      	movs	r3, #1
 800ba68:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba6c:	f383 8810 	msr	PRIMASK, r3
}
 800ba70:	46c0      	nop			@ (mov r8, r8)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	689a      	ldr	r2, [r3, #8]
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2101      	movs	r1, #1
 800ba7e:	438a      	bics	r2, r1
 800ba80:	609a      	str	r2, [r3, #8]
 800ba82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ba84:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba88:	f383 8810 	msr	PRIMASK, r3
}
 800ba8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ba8e:	f3ef 8310 	mrs	r3, PRIMASK
 800ba92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800ba94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba96:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba98:	2301      	movs	r3, #1
 800ba9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ba9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba9e:	f383 8810 	msr	PRIMASK, r3
}
 800baa2:	46c0      	nop			@ (mov r8, r8)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2140      	movs	r1, #64	@ 0x40
 800bab0:	438a      	bics	r2, r1
 800bab2:	609a      	str	r2, [r3, #8]
 800bab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bab6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800baba:	f383 8810 	msr	PRIMASK, r3
}
 800babe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	228c      	movs	r2, #140	@ 0x8c
 800bac4:	2120      	movs	r1, #32
 800bac6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bace:	f3ef 8310 	mrs	r3, PRIMASK
 800bad2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800bad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bad8:	2301      	movs	r3, #1
 800bada:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800badc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bade:	f383 8810 	msr	PRIMASK, r3
}
 800bae2:	46c0      	nop			@ (mov r8, r8)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2110      	movs	r1, #16
 800baf0:	438a      	bics	r2, r1
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800baf8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bafa:	f383 8810 	msr	PRIMASK, r3
}
 800bafe:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2280      	movs	r2, #128	@ 0x80
 800bb04:	589b      	ldr	r3, [r3, r2]
 800bb06:	0018      	movs	r0, r3
 800bb08:	f7fb fba2 	bl	8007250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2202      	movs	r2, #2
 800bb10:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	22c0      	movs	r2, #192	@ 0xc0
 800bb16:	589b      	ldr	r3, [r3, r2]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	215c      	movs	r1, #92	@ 0x5c
 800bb1c:	5a51      	ldrh	r1, [r2, r1]
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	205e      	movs	r0, #94	@ 0x5e
 800bb22:	5a12      	ldrh	r2, [r2, r0]
 800bb24:	b292      	uxth	r2, r2
 800bb26:	1a8a      	subs	r2, r1, r2
 800bb28:	b291      	uxth	r1, r2
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	0010      	movs	r0, r2
 800bb2e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bb30:	e0f4      	b.n	800bd1c <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	225c      	movs	r2, #92	@ 0x5c
 800bb36:	5a99      	ldrh	r1, [r3, r2]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	225e      	movs	r2, #94	@ 0x5e
 800bb3c:	5a9b      	ldrh	r3, [r3, r2]
 800bb3e:	b29a      	uxth	r2, r3
 800bb40:	208e      	movs	r0, #142	@ 0x8e
 800bb42:	183b      	adds	r3, r7, r0
 800bb44:	1a8a      	subs	r2, r1, r2
 800bb46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	225e      	movs	r2, #94	@ 0x5e
 800bb4c:	5a9b      	ldrh	r3, [r3, r2]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d100      	bne.n	800bb56 <HAL_UART_IRQHandler+0x486>
 800bb54:	e0e4      	b.n	800bd20 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800bb56:	183b      	adds	r3, r7, r0
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d100      	bne.n	800bb60 <HAL_UART_IRQHandler+0x490>
 800bb5e:	e0df      	b.n	800bd20 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb60:	f3ef 8310 	mrs	r3, PRIMASK
 800bb64:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb68:	2488      	movs	r4, #136	@ 0x88
 800bb6a:	193a      	adds	r2, r7, r4
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	2301      	movs	r3, #1
 800bb70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	f383 8810 	msr	PRIMASK, r3
}
 800bb78:	46c0      	nop			@ (mov r8, r8)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	496a      	ldr	r1, [pc, #424]	@ (800bd30 <HAL_UART_IRQHandler+0x660>)
 800bb86:	400a      	ands	r2, r1
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	193b      	adds	r3, r7, r4
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f383 8810 	msr	PRIMASK, r3
}
 800bb96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb98:	f3ef 8310 	mrs	r3, PRIMASK
 800bb9c:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bba0:	2484      	movs	r4, #132	@ 0x84
 800bba2:	193a      	adds	r2, r7, r4
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	2301      	movs	r3, #1
 800bba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	f383 8810 	msr	PRIMASK, r3
}
 800bbb0:	46c0      	nop			@ (mov r8, r8)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	689a      	ldr	r2, [r3, #8]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	495d      	ldr	r1, [pc, #372]	@ (800bd34 <HAL_UART_IRQHandler+0x664>)
 800bbbe:	400a      	ands	r2, r1
 800bbc0:	609a      	str	r2, [r3, #8]
 800bbc2:	193b      	adds	r3, r7, r4
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbc8:	6a3b      	ldr	r3, [r7, #32]
 800bbca:	f383 8810 	msr	PRIMASK, r3
}
 800bbce:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	228c      	movs	r2, #140	@ 0x8c
 800bbd4:	2120      	movs	r1, #32
 800bbd6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bbe4:	f3ef 8310 	mrs	r3, PRIMASK
 800bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bbea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbec:	2480      	movs	r4, #128	@ 0x80
 800bbee:	193a      	adds	r2, r7, r4
 800bbf0:	6013      	str	r3, [r2, #0]
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bbf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbf8:	f383 8810 	msr	PRIMASK, r3
}
 800bbfc:	46c0      	nop			@ (mov r8, r8)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681a      	ldr	r2, [r3, #0]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2110      	movs	r1, #16
 800bc0a:	438a      	bics	r2, r1
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	193b      	adds	r3, r7, r4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc16:	f383 8810 	msr	PRIMASK, r3
}
 800bc1a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	22c0      	movs	r2, #192	@ 0xc0
 800bc26:	589b      	ldr	r3, [r3, r2]
 800bc28:	183a      	adds	r2, r7, r0
 800bc2a:	8811      	ldrh	r1, [r2, #0]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	0010      	movs	r0, r2
 800bc30:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800bc32:	e075      	b.n	800bd20 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bc34:	23a4      	movs	r3, #164	@ 0xa4
 800bc36:	18fb      	adds	r3, r7, r3
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	2380      	movs	r3, #128	@ 0x80
 800bc3c:	035b      	lsls	r3, r3, #13
 800bc3e:	4013      	ands	r3, r2
 800bc40:	d012      	beq.n	800bc68 <HAL_UART_IRQHandler+0x598>
 800bc42:	239c      	movs	r3, #156	@ 0x9c
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	2380      	movs	r3, #128	@ 0x80
 800bc4a:	03db      	lsls	r3, r3, #15
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	d00b      	beq.n	800bc68 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2280      	movs	r2, #128	@ 0x80
 800bc56:	0352      	lsls	r2, r2, #13
 800bc58:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	22b4      	movs	r2, #180	@ 0xb4
 800bc5e:	589b      	ldr	r3, [r3, r2]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	0010      	movs	r0, r2
 800bc64:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bc66:	e05e      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bc68:	23a4      	movs	r3, #164	@ 0xa4
 800bc6a:	18fb      	adds	r3, r7, r3
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2280      	movs	r2, #128	@ 0x80
 800bc70:	4013      	ands	r3, r2
 800bc72:	d016      	beq.n	800bca2 <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bc74:	23a0      	movs	r3, #160	@ 0xa0
 800bc76:	18fb      	adds	r3, r7, r3
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2280      	movs	r2, #128	@ 0x80
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	d106      	bne.n	800bc8e <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bc80:	239c      	movs	r3, #156	@ 0x9c
 800bc82:	18fb      	adds	r3, r7, r3
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	2380      	movs	r3, #128	@ 0x80
 800bc88:	041b      	lsls	r3, r3, #16
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	d009      	beq.n	800bca2 <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d046      	beq.n	800bd24 <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	0010      	movs	r0, r2
 800bc9e:	4798      	blx	r3
    }
    return;
 800bca0:	e040      	b.n	800bd24 <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bca2:	23a4      	movs	r3, #164	@ 0xa4
 800bca4:	18fb      	adds	r3, r7, r3
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	2240      	movs	r2, #64	@ 0x40
 800bcaa:	4013      	ands	r3, r2
 800bcac:	d00a      	beq.n	800bcc4 <HAL_UART_IRQHandler+0x5f4>
 800bcae:	23a0      	movs	r3, #160	@ 0xa0
 800bcb0:	18fb      	adds	r3, r7, r3
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2240      	movs	r2, #64	@ 0x40
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	d004      	beq.n	800bcc4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	0018      	movs	r0, r3
 800bcbe:	f000 ff85 	bl	800cbcc <UART_EndTransmit_IT>
    return;
 800bcc2:	e030      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bcc4:	23a4      	movs	r3, #164	@ 0xa4
 800bcc6:	18fb      	adds	r3, r7, r3
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	2380      	movs	r3, #128	@ 0x80
 800bccc:	041b      	lsls	r3, r3, #16
 800bcce:	4013      	ands	r3, r2
 800bcd0:	d00d      	beq.n	800bcee <HAL_UART_IRQHandler+0x61e>
 800bcd2:	23a0      	movs	r3, #160	@ 0xa0
 800bcd4:	18fb      	adds	r3, r7, r3
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	2380      	movs	r3, #128	@ 0x80
 800bcda:	05db      	lsls	r3, r3, #23
 800bcdc:	4013      	ands	r3, r2
 800bcde:	d006      	beq.n	800bcee <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	22bc      	movs	r2, #188	@ 0xbc
 800bce4:	589b      	ldr	r3, [r3, r2]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	0010      	movs	r0, r2
 800bcea:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bcec:	e01b      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bcee:	23a4      	movs	r3, #164	@ 0xa4
 800bcf0:	18fb      	adds	r3, r7, r3
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	2380      	movs	r3, #128	@ 0x80
 800bcf6:	045b      	lsls	r3, r3, #17
 800bcf8:	4013      	ands	r3, r2
 800bcfa:	d014      	beq.n	800bd26 <HAL_UART_IRQHandler+0x656>
 800bcfc:	23a0      	movs	r3, #160	@ 0xa0
 800bcfe:	18fb      	adds	r3, r7, r3
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	da0f      	bge.n	800bd26 <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	22b8      	movs	r2, #184	@ 0xb8
 800bd0a:	589b      	ldr	r3, [r3, r2]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	0010      	movs	r0, r2
 800bd10:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bd12:	e008      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
      return;
 800bd14:	46c0      	nop			@ (mov r8, r8)
 800bd16:	e006      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
    return;
 800bd18:	46c0      	nop			@ (mov r8, r8)
 800bd1a:	e004      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
      return;
 800bd1c:	46c0      	nop			@ (mov r8, r8)
 800bd1e:	e002      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
      return;
 800bd20:	46c0      	nop			@ (mov r8, r8)
 800bd22:	e000      	b.n	800bd26 <HAL_UART_IRQHandler+0x656>
    return;
 800bd24:	46c0      	nop			@ (mov r8, r8)
  }
}
 800bd26:	46bd      	mov	sp, r7
 800bd28:	b02a      	add	sp, #168	@ 0xa8
 800bd2a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd2c:	fffffeff 	.word	0xfffffeff
 800bd30:	fffffedf 	.word	0xfffffedf
 800bd34:	effffffe 	.word	0xeffffffe

0800bd38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bd40:	46c0      	nop			@ (mov r8, r8)
 800bd42:	46bd      	mov	sp, r7
 800bd44:	b002      	add	sp, #8
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd50:	46c0      	nop			@ (mov r8, r8)
 800bd52:	46bd      	mov	sp, r7
 800bd54:	b002      	add	sp, #8
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bd60:	46c0      	nop			@ (mov r8, r8)
 800bd62:	46bd      	mov	sp, r7
 800bd64:	b002      	add	sp, #8
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bd70:	46c0      	nop			@ (mov r8, r8)
 800bd72:	46bd      	mov	sp, r7
 800bd74:	b002      	add	sp, #8
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bd80:	46c0      	nop			@ (mov r8, r8)
 800bd82:	46bd      	mov	sp, r7
 800bd84:	b002      	add	sp, #8
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bd90:	46c0      	nop			@ (mov r8, r8)
 800bd92:	46bd      	mov	sp, r7
 800bd94:	b002      	add	sp, #8
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bda0:	46c0      	nop			@ (mov r8, r8)
 800bda2:	46bd      	mov	sp, r7
 800bda4:	b002      	add	sp, #8
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bdb0:	46c0      	nop			@ (mov r8, r8)
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	b002      	add	sp, #8
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	000a      	movs	r2, r1
 800bdc2:	1cbb      	adds	r3, r7, #2
 800bdc4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bdc6:	46c0      	nop			@ (mov r8, r8)
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	b002      	add	sp, #8
 800bdcc:	bd80      	pop	{r7, pc}
	...

0800bdd0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b082      	sub	sp, #8
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2194      	movs	r1, #148	@ 0x94
 800bddc:	4a18      	ldr	r2, [pc, #96]	@ (800be40 <UART_InitCallbacksToDefault+0x70>)
 800bdde:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2198      	movs	r1, #152	@ 0x98
 800bde4:	4a17      	ldr	r2, [pc, #92]	@ (800be44 <UART_InitCallbacksToDefault+0x74>)
 800bde6:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	219c      	movs	r1, #156	@ 0x9c
 800bdec:	4a16      	ldr	r2, [pc, #88]	@ (800be48 <UART_InitCallbacksToDefault+0x78>)
 800bdee:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	21a0      	movs	r1, #160	@ 0xa0
 800bdf4:	4a15      	ldr	r2, [pc, #84]	@ (800be4c <UART_InitCallbacksToDefault+0x7c>)
 800bdf6:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	21a4      	movs	r1, #164	@ 0xa4
 800bdfc:	4a14      	ldr	r2, [pc, #80]	@ (800be50 <UART_InitCallbacksToDefault+0x80>)
 800bdfe:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	21a8      	movs	r1, #168	@ 0xa8
 800be04:	4a13      	ldr	r2, [pc, #76]	@ (800be54 <UART_InitCallbacksToDefault+0x84>)
 800be06:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	21ac      	movs	r1, #172	@ 0xac
 800be0c:	4a12      	ldr	r2, [pc, #72]	@ (800be58 <UART_InitCallbacksToDefault+0x88>)
 800be0e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	21b0      	movs	r1, #176	@ 0xb0
 800be14:	4a11      	ldr	r2, [pc, #68]	@ (800be5c <UART_InitCallbacksToDefault+0x8c>)
 800be16:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	21b4      	movs	r1, #180	@ 0xb4
 800be1c:	4a10      	ldr	r2, [pc, #64]	@ (800be60 <UART_InitCallbacksToDefault+0x90>)
 800be1e:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	21b8      	movs	r1, #184	@ 0xb8
 800be24:	4a0f      	ldr	r2, [pc, #60]	@ (800be64 <UART_InitCallbacksToDefault+0x94>)
 800be26:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	21bc      	movs	r1, #188	@ 0xbc
 800be2c:	4a0e      	ldr	r2, [pc, #56]	@ (800be68 <UART_InitCallbacksToDefault+0x98>)
 800be2e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	21c0      	movs	r1, #192	@ 0xc0
 800be34:	4a0d      	ldr	r2, [pc, #52]	@ (800be6c <UART_InitCallbacksToDefault+0x9c>)
 800be36:	505a      	str	r2, [r3, r1]

}
 800be38:	46c0      	nop			@ (mov r8, r8)
 800be3a:	46bd      	mov	sp, r7
 800be3c:	b002      	add	sp, #8
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	0800bd49 	.word	0x0800bd49
 800be44:	0800bd39 	.word	0x0800bd39
 800be48:	0800bd69 	.word	0x0800bd69
 800be4c:	0800bd59 	.word	0x0800bd59
 800be50:	0800bd79 	.word	0x0800bd79
 800be54:	0800bd89 	.word	0x0800bd89
 800be58:	0800bd99 	.word	0x0800bd99
 800be5c:	0800bda9 	.word	0x0800bda9
 800be60:	0800cc29 	.word	0x0800cc29
 800be64:	0800cc39 	.word	0x0800cc39
 800be68:	0800cc49 	.word	0x0800cc49
 800be6c:	0800bdb9 	.word	0x0800bdb9

0800be70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be70:	b5b0      	push	{r4, r5, r7, lr}
 800be72:	b090      	sub	sp, #64	@ 0x40
 800be74:	af00      	add	r7, sp, #0
 800be76:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be78:	231a      	movs	r3, #26
 800be7a:	2220      	movs	r2, #32
 800be7c:	189b      	adds	r3, r3, r2
 800be7e:	19db      	adds	r3, r3, r7
 800be80:	2200      	movs	r2, #0
 800be82:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be86:	689a      	ldr	r2, [r3, #8]
 800be88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8a:	691b      	ldr	r3, [r3, #16]
 800be8c:	431a      	orrs	r2, r3
 800be8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	431a      	orrs	r2, r3
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	69db      	ldr	r3, [r3, #28]
 800be98:	4313      	orrs	r3, r2
 800be9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4ac4      	ldr	r2, [pc, #784]	@ (800c1b4 <UART_SetConfig+0x344>)
 800bea4:	4013      	ands	r3, r2
 800bea6:	0019      	movs	r1, r3
 800bea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800beae:	430b      	orrs	r3, r1
 800beb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800beb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	4abf      	ldr	r2, [pc, #764]	@ (800c1b8 <UART_SetConfig+0x348>)
 800beba:	4013      	ands	r3, r2
 800bebc:	0018      	movs	r0, r3
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	68d9      	ldr	r1, [r3, #12]
 800bec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	0003      	movs	r3, r0
 800bec8:	430b      	orrs	r3, r1
 800beca:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800becc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	4ab9      	ldr	r2, [pc, #740]	@ (800c1bc <UART_SetConfig+0x34c>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d004      	beq.n	800bee6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bee2:	4313      	orrs	r3, r2
 800bee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	4ab4      	ldr	r2, [pc, #720]	@ (800c1c0 <UART_SetConfig+0x350>)
 800beee:	4013      	ands	r3, r2
 800bef0:	0019      	movs	r1, r3
 800bef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bef8:	430b      	orrs	r3, r1
 800befa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf02:	220f      	movs	r2, #15
 800bf04:	4393      	bics	r3, r2
 800bf06:	0018      	movs	r0, r3
 800bf08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bf0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	0003      	movs	r3, r0
 800bf12:	430b      	orrs	r3, r1
 800bf14:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4aaa      	ldr	r2, [pc, #680]	@ (800c1c4 <UART_SetConfig+0x354>)
 800bf1c:	4293      	cmp	r3, r2
 800bf1e:	d131      	bne.n	800bf84 <UART_SetConfig+0x114>
 800bf20:	4ba9      	ldr	r3, [pc, #676]	@ (800c1c8 <UART_SetConfig+0x358>)
 800bf22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf24:	2203      	movs	r2, #3
 800bf26:	4013      	ands	r3, r2
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d01d      	beq.n	800bf68 <UART_SetConfig+0xf8>
 800bf2c:	d823      	bhi.n	800bf76 <UART_SetConfig+0x106>
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d00c      	beq.n	800bf4c <UART_SetConfig+0xdc>
 800bf32:	d820      	bhi.n	800bf76 <UART_SetConfig+0x106>
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <UART_SetConfig+0xce>
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d00e      	beq.n	800bf5a <UART_SetConfig+0xea>
 800bf3c:	e01b      	b.n	800bf76 <UART_SetConfig+0x106>
 800bf3e:	231b      	movs	r3, #27
 800bf40:	2220      	movs	r2, #32
 800bf42:	189b      	adds	r3, r3, r2
 800bf44:	19db      	adds	r3, r3, r7
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	e071      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf4c:	231b      	movs	r3, #27
 800bf4e:	2220      	movs	r2, #32
 800bf50:	189b      	adds	r3, r3, r2
 800bf52:	19db      	adds	r3, r3, r7
 800bf54:	2202      	movs	r2, #2
 800bf56:	701a      	strb	r2, [r3, #0]
 800bf58:	e06a      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf5a:	231b      	movs	r3, #27
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	189b      	adds	r3, r3, r2
 800bf60:	19db      	adds	r3, r3, r7
 800bf62:	2204      	movs	r2, #4
 800bf64:	701a      	strb	r2, [r3, #0]
 800bf66:	e063      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf68:	231b      	movs	r3, #27
 800bf6a:	2220      	movs	r2, #32
 800bf6c:	189b      	adds	r3, r3, r2
 800bf6e:	19db      	adds	r3, r3, r7
 800bf70:	2208      	movs	r2, #8
 800bf72:	701a      	strb	r2, [r3, #0]
 800bf74:	e05c      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf76:	231b      	movs	r3, #27
 800bf78:	2220      	movs	r2, #32
 800bf7a:	189b      	adds	r3, r3, r2
 800bf7c:	19db      	adds	r3, r3, r7
 800bf7e:	2210      	movs	r2, #16
 800bf80:	701a      	strb	r2, [r3, #0]
 800bf82:	e055      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4a90      	ldr	r2, [pc, #576]	@ (800c1cc <UART_SetConfig+0x35c>)
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d106      	bne.n	800bf9c <UART_SetConfig+0x12c>
 800bf8e:	231b      	movs	r3, #27
 800bf90:	2220      	movs	r2, #32
 800bf92:	189b      	adds	r3, r3, r2
 800bf94:	19db      	adds	r3, r3, r7
 800bf96:	2200      	movs	r2, #0
 800bf98:	701a      	strb	r2, [r3, #0]
 800bf9a:	e049      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a86      	ldr	r2, [pc, #536]	@ (800c1bc <UART_SetConfig+0x34c>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d13e      	bne.n	800c024 <UART_SetConfig+0x1b4>
 800bfa6:	4b88      	ldr	r3, [pc, #544]	@ (800c1c8 <UART_SetConfig+0x358>)
 800bfa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfaa:	23c0      	movs	r3, #192	@ 0xc0
 800bfac:	011b      	lsls	r3, r3, #4
 800bfae:	4013      	ands	r3, r2
 800bfb0:	22c0      	movs	r2, #192	@ 0xc0
 800bfb2:	0112      	lsls	r2, r2, #4
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d027      	beq.n	800c008 <UART_SetConfig+0x198>
 800bfb8:	22c0      	movs	r2, #192	@ 0xc0
 800bfba:	0112      	lsls	r2, r2, #4
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d82a      	bhi.n	800c016 <UART_SetConfig+0x1a6>
 800bfc0:	2280      	movs	r2, #128	@ 0x80
 800bfc2:	0112      	lsls	r2, r2, #4
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d011      	beq.n	800bfec <UART_SetConfig+0x17c>
 800bfc8:	2280      	movs	r2, #128	@ 0x80
 800bfca:	0112      	lsls	r2, r2, #4
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d822      	bhi.n	800c016 <UART_SetConfig+0x1a6>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <UART_SetConfig+0x16e>
 800bfd4:	2280      	movs	r2, #128	@ 0x80
 800bfd6:	00d2      	lsls	r2, r2, #3
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d00e      	beq.n	800bffa <UART_SetConfig+0x18a>
 800bfdc:	e01b      	b.n	800c016 <UART_SetConfig+0x1a6>
 800bfde:	231b      	movs	r3, #27
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	189b      	adds	r3, r3, r2
 800bfe4:	19db      	adds	r3, r3, r7
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]
 800bfea:	e021      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bfec:	231b      	movs	r3, #27
 800bfee:	2220      	movs	r2, #32
 800bff0:	189b      	adds	r3, r3, r2
 800bff2:	19db      	adds	r3, r3, r7
 800bff4:	2202      	movs	r2, #2
 800bff6:	701a      	strb	r2, [r3, #0]
 800bff8:	e01a      	b.n	800c030 <UART_SetConfig+0x1c0>
 800bffa:	231b      	movs	r3, #27
 800bffc:	2220      	movs	r2, #32
 800bffe:	189b      	adds	r3, r3, r2
 800c000:	19db      	adds	r3, r3, r7
 800c002:	2204      	movs	r2, #4
 800c004:	701a      	strb	r2, [r3, #0]
 800c006:	e013      	b.n	800c030 <UART_SetConfig+0x1c0>
 800c008:	231b      	movs	r3, #27
 800c00a:	2220      	movs	r2, #32
 800c00c:	189b      	adds	r3, r3, r2
 800c00e:	19db      	adds	r3, r3, r7
 800c010:	2208      	movs	r2, #8
 800c012:	701a      	strb	r2, [r3, #0]
 800c014:	e00c      	b.n	800c030 <UART_SetConfig+0x1c0>
 800c016:	231b      	movs	r3, #27
 800c018:	2220      	movs	r2, #32
 800c01a:	189b      	adds	r3, r3, r2
 800c01c:	19db      	adds	r3, r3, r7
 800c01e:	2210      	movs	r2, #16
 800c020:	701a      	strb	r2, [r3, #0]
 800c022:	e005      	b.n	800c030 <UART_SetConfig+0x1c0>
 800c024:	231b      	movs	r3, #27
 800c026:	2220      	movs	r2, #32
 800c028:	189b      	adds	r3, r3, r2
 800c02a:	19db      	adds	r3, r3, r7
 800c02c:	2210      	movs	r2, #16
 800c02e:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a61      	ldr	r2, [pc, #388]	@ (800c1bc <UART_SetConfig+0x34c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d000      	beq.n	800c03c <UART_SetConfig+0x1cc>
 800c03a:	e092      	b.n	800c162 <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c03c:	231b      	movs	r3, #27
 800c03e:	2220      	movs	r2, #32
 800c040:	189b      	adds	r3, r3, r2
 800c042:	19db      	adds	r3, r3, r7
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	2b08      	cmp	r3, #8
 800c048:	d015      	beq.n	800c076 <UART_SetConfig+0x206>
 800c04a:	dc18      	bgt.n	800c07e <UART_SetConfig+0x20e>
 800c04c:	2b04      	cmp	r3, #4
 800c04e:	d00d      	beq.n	800c06c <UART_SetConfig+0x1fc>
 800c050:	dc15      	bgt.n	800c07e <UART_SetConfig+0x20e>
 800c052:	2b00      	cmp	r3, #0
 800c054:	d002      	beq.n	800c05c <UART_SetConfig+0x1ec>
 800c056:	2b02      	cmp	r3, #2
 800c058:	d005      	beq.n	800c066 <UART_SetConfig+0x1f6>
 800c05a:	e010      	b.n	800c07e <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c05c:	f7fc fdd6 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800c060:	0003      	movs	r3, r0
 800c062:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c064:	e014      	b.n	800c090 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c066:	4b5a      	ldr	r3, [pc, #360]	@ (800c1d0 <UART_SetConfig+0x360>)
 800c068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c06a:	e011      	b.n	800c090 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c06c:	f7fc fd42 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800c070:	0003      	movs	r3, r0
 800c072:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c074:	e00c      	b.n	800c090 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c076:	2380      	movs	r3, #128	@ 0x80
 800c078:	021b      	lsls	r3, r3, #8
 800c07a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c07c:	e008      	b.n	800c090 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800c07e:	2300      	movs	r3, #0
 800c080:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c082:	231a      	movs	r3, #26
 800c084:	2220      	movs	r2, #32
 800c086:	189b      	adds	r3, r3, r2
 800c088:	19db      	adds	r3, r3, r7
 800c08a:	2201      	movs	r2, #1
 800c08c:	701a      	strb	r2, [r3, #0]
        break;
 800c08e:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c092:	2b00      	cmp	r3, #0
 800c094:	d100      	bne.n	800c098 <UART_SetConfig+0x228>
 800c096:	e147      	b.n	800c328 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c09a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c09c:	4b4d      	ldr	r3, [pc, #308]	@ (800c1d4 <UART_SetConfig+0x364>)
 800c09e:	0052      	lsls	r2, r2, #1
 800c0a0:	5ad3      	ldrh	r3, [r2, r3]
 800c0a2:	0019      	movs	r1, r3
 800c0a4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c0a6:	f7f4 f82d 	bl	8000104 <__udivsi3>
 800c0aa:	0003      	movs	r3, r0
 800c0ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b0:	685a      	ldr	r2, [r3, #4]
 800c0b2:	0013      	movs	r3, r2
 800c0b4:	005b      	lsls	r3, r3, #1
 800c0b6:	189b      	adds	r3, r3, r2
 800c0b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d305      	bcc.n	800c0ca <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d906      	bls.n	800c0d8 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 800c0ca:	231a      	movs	r3, #26
 800c0cc:	2220      	movs	r2, #32
 800c0ce:	189b      	adds	r3, r3, r2
 800c0d0:	19db      	adds	r3, r3, r7
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	e127      	b.n	800c328 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0da:	61bb      	str	r3, [r7, #24]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0e4:	4b3b      	ldr	r3, [pc, #236]	@ (800c1d4 <UART_SetConfig+0x364>)
 800c0e6:	0052      	lsls	r2, r2, #1
 800c0e8:	5ad3      	ldrh	r3, [r2, r3]
 800c0ea:	613b      	str	r3, [r7, #16]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	697b      	ldr	r3, [r7, #20]
 800c0f4:	69b8      	ldr	r0, [r7, #24]
 800c0f6:	69f9      	ldr	r1, [r7, #28]
 800c0f8:	f7f4 f890 	bl	800021c <__aeabi_uldivmod>
 800c0fc:	0002      	movs	r2, r0
 800c0fe:	000b      	movs	r3, r1
 800c100:	0e11      	lsrs	r1, r2, #24
 800c102:	021d      	lsls	r5, r3, #8
 800c104:	430d      	orrs	r5, r1
 800c106:	0214      	lsls	r4, r2, #8
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	685b      	ldr	r3, [r3, #4]
 800c10c:	085b      	lsrs	r3, r3, #1
 800c10e:	60bb      	str	r3, [r7, #8]
 800c110:	2300      	movs	r3, #0
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	68b8      	ldr	r0, [r7, #8]
 800c116:	68f9      	ldr	r1, [r7, #12]
 800c118:	1900      	adds	r0, r0, r4
 800c11a:	4169      	adcs	r1, r5
 800c11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	603b      	str	r3, [r7, #0]
 800c122:	2300      	movs	r3, #0
 800c124:	607b      	str	r3, [r7, #4]
 800c126:	683a      	ldr	r2, [r7, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f7f4 f877 	bl	800021c <__aeabi_uldivmod>
 800c12e:	0002      	movs	r2, r0
 800c130:	000b      	movs	r3, r1
 800c132:	0013      	movs	r3, r2
 800c134:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c138:	23c0      	movs	r3, #192	@ 0xc0
 800c13a:	009b      	lsls	r3, r3, #2
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d309      	bcc.n	800c154 <UART_SetConfig+0x2e4>
 800c140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c142:	2380      	movs	r3, #128	@ 0x80
 800c144:	035b      	lsls	r3, r3, #13
 800c146:	429a      	cmp	r2, r3
 800c148:	d204      	bcs.n	800c154 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c150:	60da      	str	r2, [r3, #12]
 800c152:	e0e9      	b.n	800c328 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 800c154:	231a      	movs	r3, #26
 800c156:	2220      	movs	r2, #32
 800c158:	189b      	adds	r3, r3, r2
 800c15a:	19db      	adds	r3, r3, r7
 800c15c:	2201      	movs	r2, #1
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e0e2      	b.n	800c328 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c164:	69da      	ldr	r2, [r3, #28]
 800c166:	2380      	movs	r3, #128	@ 0x80
 800c168:	021b      	lsls	r3, r3, #8
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d000      	beq.n	800c170 <UART_SetConfig+0x300>
 800c16e:	e083      	b.n	800c278 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c170:	231b      	movs	r3, #27
 800c172:	2220      	movs	r2, #32
 800c174:	189b      	adds	r3, r3, r2
 800c176:	19db      	adds	r3, r3, r7
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	d015      	beq.n	800c1aa <UART_SetConfig+0x33a>
 800c17e:	dc2b      	bgt.n	800c1d8 <UART_SetConfig+0x368>
 800c180:	2b04      	cmp	r3, #4
 800c182:	d00d      	beq.n	800c1a0 <UART_SetConfig+0x330>
 800c184:	dc28      	bgt.n	800c1d8 <UART_SetConfig+0x368>
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <UART_SetConfig+0x320>
 800c18a:	2b02      	cmp	r3, #2
 800c18c:	d005      	beq.n	800c19a <UART_SetConfig+0x32a>
 800c18e:	e023      	b.n	800c1d8 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c190:	f7fc fd3c 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800c194:	0003      	movs	r3, r0
 800c196:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c198:	e027      	b.n	800c1ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c19a:	4b0d      	ldr	r3, [pc, #52]	@ (800c1d0 <UART_SetConfig+0x360>)
 800c19c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c19e:	e024      	b.n	800c1ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1a0:	f7fc fca8 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800c1a4:	0003      	movs	r3, r0
 800c1a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1a8:	e01f      	b.n	800c1ea <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1aa:	2380      	movs	r3, #128	@ 0x80
 800c1ac:	021b      	lsls	r3, r3, #8
 800c1ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c1b0:	e01b      	b.n	800c1ea <UART_SetConfig+0x37a>
 800c1b2:	46c0      	nop			@ (mov r8, r8)
 800c1b4:	cfff69f3 	.word	0xcfff69f3
 800c1b8:	ffffcfff 	.word	0xffffcfff
 800c1bc:	40008000 	.word	0x40008000
 800c1c0:	11fff4ff 	.word	0x11fff4ff
 800c1c4:	40013800 	.word	0x40013800
 800c1c8:	40021000 	.word	0x40021000
 800c1cc:	40004400 	.word	0x40004400
 800c1d0:	00f42400 	.word	0x00f42400
 800c1d4:	0800d700 	.word	0x0800d700
      default:
        pclk = 0U;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c1dc:	231a      	movs	r3, #26
 800c1de:	2220      	movs	r2, #32
 800c1e0:	189b      	adds	r3, r3, r2
 800c1e2:	19db      	adds	r3, r3, r7
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	701a      	strb	r2, [r3, #0]
        break;
 800c1e8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d100      	bne.n	800c1f2 <UART_SetConfig+0x382>
 800c1f0:	e09a      	b.n	800c328 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c1f6:	4b58      	ldr	r3, [pc, #352]	@ (800c358 <UART_SetConfig+0x4e8>)
 800c1f8:	0052      	lsls	r2, r2, #1
 800c1fa:	5ad3      	ldrh	r3, [r2, r3]
 800c1fc:	0019      	movs	r1, r3
 800c1fe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c200:	f7f3 ff80 	bl	8000104 <__udivsi3>
 800c204:	0003      	movs	r3, r0
 800c206:	005a      	lsls	r2, r3, #1
 800c208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	085b      	lsrs	r3, r3, #1
 800c20e:	18d2      	adds	r2, r2, r3
 800c210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	0019      	movs	r1, r3
 800c216:	0010      	movs	r0, r2
 800c218:	f7f3 ff74 	bl	8000104 <__udivsi3>
 800c21c:	0003      	movs	r3, r0
 800c21e:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c222:	2b0f      	cmp	r3, #15
 800c224:	d921      	bls.n	800c26a <UART_SetConfig+0x3fa>
 800c226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c228:	2380      	movs	r3, #128	@ 0x80
 800c22a:	025b      	lsls	r3, r3, #9
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d21c      	bcs.n	800c26a <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c232:	b29a      	uxth	r2, r3
 800c234:	200e      	movs	r0, #14
 800c236:	2420      	movs	r4, #32
 800c238:	1903      	adds	r3, r0, r4
 800c23a:	19db      	adds	r3, r3, r7
 800c23c:	210f      	movs	r1, #15
 800c23e:	438a      	bics	r2, r1
 800c240:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c244:	085b      	lsrs	r3, r3, #1
 800c246:	b29b      	uxth	r3, r3
 800c248:	2207      	movs	r2, #7
 800c24a:	4013      	ands	r3, r2
 800c24c:	b299      	uxth	r1, r3
 800c24e:	1903      	adds	r3, r0, r4
 800c250:	19db      	adds	r3, r3, r7
 800c252:	1902      	adds	r2, r0, r4
 800c254:	19d2      	adds	r2, r2, r7
 800c256:	8812      	ldrh	r2, [r2, #0]
 800c258:	430a      	orrs	r2, r1
 800c25a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	1902      	adds	r2, r0, r4
 800c262:	19d2      	adds	r2, r2, r7
 800c264:	8812      	ldrh	r2, [r2, #0]
 800c266:	60da      	str	r2, [r3, #12]
 800c268:	e05e      	b.n	800c328 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c26a:	231a      	movs	r3, #26
 800c26c:	2220      	movs	r2, #32
 800c26e:	189b      	adds	r3, r3, r2
 800c270:	19db      	adds	r3, r3, r7
 800c272:	2201      	movs	r2, #1
 800c274:	701a      	strb	r2, [r3, #0]
 800c276:	e057      	b.n	800c328 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c278:	231b      	movs	r3, #27
 800c27a:	2220      	movs	r2, #32
 800c27c:	189b      	adds	r3, r3, r2
 800c27e:	19db      	adds	r3, r3, r7
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	2b08      	cmp	r3, #8
 800c284:	d015      	beq.n	800c2b2 <UART_SetConfig+0x442>
 800c286:	dc18      	bgt.n	800c2ba <UART_SetConfig+0x44a>
 800c288:	2b04      	cmp	r3, #4
 800c28a:	d00d      	beq.n	800c2a8 <UART_SetConfig+0x438>
 800c28c:	dc15      	bgt.n	800c2ba <UART_SetConfig+0x44a>
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <UART_SetConfig+0x428>
 800c292:	2b02      	cmp	r3, #2
 800c294:	d005      	beq.n	800c2a2 <UART_SetConfig+0x432>
 800c296:	e010      	b.n	800c2ba <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c298:	f7fc fcb8 	bl	8008c0c <HAL_RCC_GetPCLK1Freq>
 800c29c:	0003      	movs	r3, r0
 800c29e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2a0:	e014      	b.n	800c2cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c2a2:	4b2e      	ldr	r3, [pc, #184]	@ (800c35c <UART_SetConfig+0x4ec>)
 800c2a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2a6:	e011      	b.n	800c2cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c2a8:	f7fc fc24 	bl	8008af4 <HAL_RCC_GetSysClockFreq>
 800c2ac:	0003      	movs	r3, r0
 800c2ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2b0:	e00c      	b.n	800c2cc <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2b2:	2380      	movs	r3, #128	@ 0x80
 800c2b4:	021b      	lsls	r3, r3, #8
 800c2b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800c2b8:	e008      	b.n	800c2cc <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800c2be:	231a      	movs	r3, #26
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	189b      	adds	r3, r3, r2
 800c2c4:	19db      	adds	r3, r3, r7
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]
        break;
 800c2ca:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800c2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d02a      	beq.n	800c328 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c2d6:	4b20      	ldr	r3, [pc, #128]	@ (800c358 <UART_SetConfig+0x4e8>)
 800c2d8:	0052      	lsls	r2, r2, #1
 800c2da:	5ad3      	ldrh	r3, [r2, r3]
 800c2dc:	0019      	movs	r1, r3
 800c2de:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800c2e0:	f7f3 ff10 	bl	8000104 <__udivsi3>
 800c2e4:	0003      	movs	r3, r0
 800c2e6:	001a      	movs	r2, r3
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	085b      	lsrs	r3, r3, #1
 800c2ee:	18d2      	adds	r2, r2, r3
 800c2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	0019      	movs	r1, r3
 800c2f6:	0010      	movs	r0, r2
 800c2f8:	f7f3 ff04 	bl	8000104 <__udivsi3>
 800c2fc:	0003      	movs	r3, r0
 800c2fe:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c302:	2b0f      	cmp	r3, #15
 800c304:	d90a      	bls.n	800c31c <UART_SetConfig+0x4ac>
 800c306:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c308:	2380      	movs	r3, #128	@ 0x80
 800c30a:	025b      	lsls	r3, r3, #9
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d205      	bcs.n	800c31c <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c312:	b29a      	uxth	r2, r3
 800c314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	60da      	str	r2, [r3, #12]
 800c31a:	e005      	b.n	800c328 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 800c31c:	231a      	movs	r3, #26
 800c31e:	2220      	movs	r2, #32
 800c320:	189b      	adds	r3, r3, r2
 800c322:	19db      	adds	r3, r3, r7
 800c324:	2201      	movs	r2, #1
 800c326:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	226a      	movs	r2, #106	@ 0x6a
 800c32c:	2101      	movs	r1, #1
 800c32e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	2268      	movs	r2, #104	@ 0x68
 800c334:	2101      	movs	r1, #1
 800c336:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	2200      	movs	r2, #0
 800c33c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c340:	2200      	movs	r2, #0
 800c342:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c344:	231a      	movs	r3, #26
 800c346:	2220      	movs	r2, #32
 800c348:	189b      	adds	r3, r3, r2
 800c34a:	19db      	adds	r3, r3, r7
 800c34c:	781b      	ldrb	r3, [r3, #0]
}
 800c34e:	0018      	movs	r0, r3
 800c350:	46bd      	mov	sp, r7
 800c352:	b010      	add	sp, #64	@ 0x40
 800c354:	bdb0      	pop	{r4, r5, r7, pc}
 800c356:	46c0      	nop			@ (mov r8, r8)
 800c358:	0800d700 	.word	0x0800d700
 800c35c:	00f42400 	.word	0x00f42400

0800c360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c36c:	2208      	movs	r2, #8
 800c36e:	4013      	ands	r3, r2
 800c370:	d00b      	beq.n	800c38a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	4a4a      	ldr	r2, [pc, #296]	@ (800c4a4 <UART_AdvFeatureConfig+0x144>)
 800c37a:	4013      	ands	r3, r2
 800c37c:	0019      	movs	r1, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	430a      	orrs	r2, r1
 800c388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c38e:	2201      	movs	r2, #1
 800c390:	4013      	ands	r3, r2
 800c392:	d00b      	beq.n	800c3ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	4a43      	ldr	r2, [pc, #268]	@ (800c4a8 <UART_AdvFeatureConfig+0x148>)
 800c39c:	4013      	ands	r3, r2
 800c39e:	0019      	movs	r1, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	430a      	orrs	r2, r1
 800c3aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	d00b      	beq.n	800c3ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	4a3b      	ldr	r2, [pc, #236]	@ (800c4ac <UART_AdvFeatureConfig+0x14c>)
 800c3be:	4013      	ands	r3, r2
 800c3c0:	0019      	movs	r1, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3d2:	2204      	movs	r2, #4
 800c3d4:	4013      	ands	r3, r2
 800c3d6:	d00b      	beq.n	800c3f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	4a34      	ldr	r2, [pc, #208]	@ (800c4b0 <UART_AdvFeatureConfig+0x150>)
 800c3e0:	4013      	ands	r3, r2
 800c3e2:	0019      	movs	r1, r3
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3f4:	2210      	movs	r2, #16
 800c3f6:	4013      	ands	r3, r2
 800c3f8:	d00b      	beq.n	800c412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	4a2c      	ldr	r2, [pc, #176]	@ (800c4b4 <UART_AdvFeatureConfig+0x154>)
 800c402:	4013      	ands	r3, r2
 800c404:	0019      	movs	r1, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c416:	2220      	movs	r2, #32
 800c418:	4013      	ands	r3, r2
 800c41a:	d00b      	beq.n	800c434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	4a25      	ldr	r2, [pc, #148]	@ (800c4b8 <UART_AdvFeatureConfig+0x158>)
 800c424:	4013      	ands	r3, r2
 800c426:	0019      	movs	r1, r3
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c438:	2240      	movs	r2, #64	@ 0x40
 800c43a:	4013      	ands	r3, r2
 800c43c:	d01d      	beq.n	800c47a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	4a1d      	ldr	r2, [pc, #116]	@ (800c4bc <UART_AdvFeatureConfig+0x15c>)
 800c446:	4013      	ands	r3, r2
 800c448:	0019      	movs	r1, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	430a      	orrs	r2, r1
 800c454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c45a:	2380      	movs	r3, #128	@ 0x80
 800c45c:	035b      	lsls	r3, r3, #13
 800c45e:	429a      	cmp	r2, r3
 800c460:	d10b      	bne.n	800c47a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a15      	ldr	r2, [pc, #84]	@ (800c4c0 <UART_AdvFeatureConfig+0x160>)
 800c46a:	4013      	ands	r3, r2
 800c46c:	0019      	movs	r1, r3
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c47e:	2280      	movs	r2, #128	@ 0x80
 800c480:	4013      	ands	r3, r2
 800c482:	d00b      	beq.n	800c49c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	4a0e      	ldr	r2, [pc, #56]	@ (800c4c4 <UART_AdvFeatureConfig+0x164>)
 800c48c:	4013      	ands	r3, r2
 800c48e:	0019      	movs	r1, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	430a      	orrs	r2, r1
 800c49a:	605a      	str	r2, [r3, #4]
  }
}
 800c49c:	46c0      	nop			@ (mov r8, r8)
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	b002      	add	sp, #8
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	ffff7fff 	.word	0xffff7fff
 800c4a8:	fffdffff 	.word	0xfffdffff
 800c4ac:	fffeffff 	.word	0xfffeffff
 800c4b0:	fffbffff 	.word	0xfffbffff
 800c4b4:	ffffefff 	.word	0xffffefff
 800c4b8:	ffffdfff 	.word	0xffffdfff
 800c4bc:	ffefffff 	.word	0xffefffff
 800c4c0:	ff9fffff 	.word	0xff9fffff
 800c4c4:	fff7ffff 	.word	0xfff7ffff

0800c4c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b092      	sub	sp, #72	@ 0x48
 800c4cc:	af02      	add	r7, sp, #8
 800c4ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2290      	movs	r2, #144	@ 0x90
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4d8:	f7f9 fa66 	bl	80059a8 <HAL_GetTick>
 800c4dc:	0003      	movs	r3, r0
 800c4de:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2208      	movs	r2, #8
 800c4e8:	4013      	ands	r3, r2
 800c4ea:	2b08      	cmp	r3, #8
 800c4ec:	d12d      	bne.n	800c54a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4f0:	2280      	movs	r2, #128	@ 0x80
 800c4f2:	0391      	lsls	r1, r2, #14
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	4a47      	ldr	r2, [pc, #284]	@ (800c614 <UART_CheckIdleState+0x14c>)
 800c4f8:	9200      	str	r2, [sp, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f000 f88e 	bl	800c61c <UART_WaitOnFlagUntilTimeout>
 800c500:	1e03      	subs	r3, r0, #0
 800c502:	d022      	beq.n	800c54a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c504:	f3ef 8310 	mrs	r3, PRIMASK
 800c508:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c50c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c50e:	2301      	movs	r3, #1
 800c510:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c514:	f383 8810 	msr	PRIMASK, r3
}
 800c518:	46c0      	nop			@ (mov r8, r8)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2180      	movs	r1, #128	@ 0x80
 800c526:	438a      	bics	r2, r1
 800c528:	601a      	str	r2, [r3, #0]
 800c52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c52c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c530:	f383 8810 	msr	PRIMASK, r3
}
 800c534:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2288      	movs	r2, #136	@ 0x88
 800c53a:	2120      	movs	r1, #32
 800c53c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2284      	movs	r2, #132	@ 0x84
 800c542:	2100      	movs	r1, #0
 800c544:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e060      	b.n	800c60c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	2204      	movs	r2, #4
 800c552:	4013      	ands	r3, r2
 800c554:	2b04      	cmp	r3, #4
 800c556:	d146      	bne.n	800c5e6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c55a:	2280      	movs	r2, #128	@ 0x80
 800c55c:	03d1      	lsls	r1, r2, #15
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	4a2c      	ldr	r2, [pc, #176]	@ (800c614 <UART_CheckIdleState+0x14c>)
 800c562:	9200      	str	r2, [sp, #0]
 800c564:	2200      	movs	r2, #0
 800c566:	f000 f859 	bl	800c61c <UART_WaitOnFlagUntilTimeout>
 800c56a:	1e03      	subs	r3, r0, #0
 800c56c:	d03b      	beq.n	800c5e6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c56e:	f3ef 8310 	mrs	r3, PRIMASK
 800c572:	60fb      	str	r3, [r7, #12]
  return(result);
 800c574:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c576:	637b      	str	r3, [r7, #52]	@ 0x34
 800c578:	2301      	movs	r3, #1
 800c57a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	f383 8810 	msr	PRIMASK, r3
}
 800c582:	46c0      	nop			@ (mov r8, r8)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4922      	ldr	r1, [pc, #136]	@ (800c618 <UART_CheckIdleState+0x150>)
 800c590:	400a      	ands	r2, r1
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c596:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	f383 8810 	msr	PRIMASK, r3
}
 800c59e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5a0:	f3ef 8310 	mrs	r3, PRIMASK
 800c5a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800c5a6:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ae:	69fb      	ldr	r3, [r7, #28]
 800c5b0:	f383 8810 	msr	PRIMASK, r3
}
 800c5b4:	46c0      	nop			@ (mov r8, r8)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	438a      	bics	r2, r1
 800c5c4:	609a      	str	r2, [r3, #8]
 800c5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c5ca:	6a3b      	ldr	r3, [r7, #32]
 800c5cc:	f383 8810 	msr	PRIMASK, r3
}
 800c5d0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	228c      	movs	r2, #140	@ 0x8c
 800c5d6:	2120      	movs	r1, #32
 800c5d8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2284      	movs	r2, #132	@ 0x84
 800c5de:	2100      	movs	r1, #0
 800c5e0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e012      	b.n	800c60c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2288      	movs	r2, #136	@ 0x88
 800c5ea:	2120      	movs	r1, #32
 800c5ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	228c      	movs	r2, #140	@ 0x8c
 800c5f2:	2120      	movs	r1, #32
 800c5f4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2284      	movs	r2, #132	@ 0x84
 800c606:	2100      	movs	r1, #0
 800c608:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	0018      	movs	r0, r3
 800c60e:	46bd      	mov	sp, r7
 800c610:	b010      	add	sp, #64	@ 0x40
 800c612:	bd80      	pop	{r7, pc}
 800c614:	01ffffff 	.word	0x01ffffff
 800c618:	fffffedf 	.word	0xfffffedf

0800c61c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	603b      	str	r3, [r7, #0]
 800c628:	1dfb      	adds	r3, r7, #7
 800c62a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c62c:	e051      	b.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	3301      	adds	r3, #1
 800c632:	d04e      	beq.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c634:	f7f9 f9b8 	bl	80059a8 <HAL_GetTick>
 800c638:	0002      	movs	r2, r0
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	69ba      	ldr	r2, [r7, #24]
 800c640:	429a      	cmp	r2, r3
 800c642:	d302      	bcc.n	800c64a <UART_WaitOnFlagUntilTimeout+0x2e>
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800c64a:	2303      	movs	r3, #3
 800c64c:	e051      	b.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	2204      	movs	r2, #4
 800c656:	4013      	ands	r3, r2
 800c658:	d03b      	beq.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	2b80      	cmp	r3, #128	@ 0x80
 800c65e:	d038      	beq.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	2b40      	cmp	r3, #64	@ 0x40
 800c664:	d035      	beq.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	69db      	ldr	r3, [r3, #28]
 800c66c:	2208      	movs	r2, #8
 800c66e:	4013      	ands	r3, r2
 800c670:	2b08      	cmp	r3, #8
 800c672:	d111      	bne.n	800c698 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2208      	movs	r2, #8
 800c67a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	0018      	movs	r0, r3
 800c680:	f000 f922 	bl	800c8c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2290      	movs	r2, #144	@ 0x90
 800c688:	2108      	movs	r1, #8
 800c68a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	2284      	movs	r2, #132	@ 0x84
 800c690:	2100      	movs	r1, #0
 800c692:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e02c      	b.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	69da      	ldr	r2, [r3, #28]
 800c69e:	2380      	movs	r3, #128	@ 0x80
 800c6a0:	011b      	lsls	r3, r3, #4
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	2380      	movs	r3, #128	@ 0x80
 800c6a6:	011b      	lsls	r3, r3, #4
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d112      	bne.n	800c6d2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2280      	movs	r2, #128	@ 0x80
 800c6b2:	0112      	lsls	r2, r2, #4
 800c6b4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	0018      	movs	r0, r3
 800c6ba:	f000 f905 	bl	800c8c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	2290      	movs	r2, #144	@ 0x90
 800c6c2:	2120      	movs	r1, #32
 800c6c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2284      	movs	r2, #132	@ 0x84
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c6ce:	2303      	movs	r3, #3
 800c6d0:	e00f      	b.n	800c6f2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	4013      	ands	r3, r2
 800c6dc:	68ba      	ldr	r2, [r7, #8]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	425a      	negs	r2, r3
 800c6e2:	4153      	adcs	r3, r2
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	001a      	movs	r2, r3
 800c6e8:	1dfb      	adds	r3, r7, #7
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d09e      	beq.n	800c62e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	0018      	movs	r0, r3
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	b004      	add	sp, #16
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b090      	sub	sp, #64	@ 0x40
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	1dbb      	adds	r3, r7, #6
 800c708:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	1dba      	adds	r2, r7, #6
 800c714:	215c      	movs	r1, #92	@ 0x5c
 800c716:	8812      	ldrh	r2, [r2, #0]
 800c718:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2290      	movs	r2, #144	@ 0x90
 800c71e:	2100      	movs	r1, #0
 800c720:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	228c      	movs	r2, #140	@ 0x8c
 800c726:	2122      	movs	r1, #34	@ 0x22
 800c728:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2280      	movs	r2, #128	@ 0x80
 800c72e:	589b      	ldr	r3, [r3, r2]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d02d      	beq.n	800c790 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2280      	movs	r2, #128	@ 0x80
 800c738:	589b      	ldr	r3, [r3, r2]
 800c73a:	4a40      	ldr	r2, [pc, #256]	@ (800c83c <UART_Start_Receive_DMA+0x140>)
 800c73c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2280      	movs	r2, #128	@ 0x80
 800c742:	589b      	ldr	r3, [r3, r2]
 800c744:	4a3e      	ldr	r2, [pc, #248]	@ (800c840 <UART_Start_Receive_DMA+0x144>)
 800c746:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2280      	movs	r2, #128	@ 0x80
 800c74c:	589b      	ldr	r3, [r3, r2]
 800c74e:	4a3d      	ldr	r2, [pc, #244]	@ (800c844 <UART_Start_Receive_DMA+0x148>)
 800c750:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2280      	movs	r2, #128	@ 0x80
 800c756:	589b      	ldr	r3, [r3, r2]
 800c758:	2200      	movs	r2, #0
 800c75a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2280      	movs	r2, #128	@ 0x80
 800c760:	5898      	ldr	r0, [r3, r2]
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3324      	adds	r3, #36	@ 0x24
 800c768:	0019      	movs	r1, r3
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c76e:	001a      	movs	r2, r3
 800c770:	1dbb      	adds	r3, r7, #6
 800c772:	881b      	ldrh	r3, [r3, #0]
 800c774:	f7fa fce6 	bl	8007144 <HAL_DMA_Start_IT>
 800c778:	1e03      	subs	r3, r0, #0
 800c77a:	d009      	beq.n	800c790 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	2290      	movs	r2, #144	@ 0x90
 800c780:	2110      	movs	r1, #16
 800c782:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	228c      	movs	r2, #140	@ 0x8c
 800c788:	2120      	movs	r1, #32
 800c78a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e050      	b.n	800c832 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	691b      	ldr	r3, [r3, #16]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d019      	beq.n	800c7cc <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c798:	f3ef 8310 	mrs	r3, PRIMASK
 800c79c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800c79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a8:	f383 8810 	msr	PRIMASK, r3
}
 800c7ac:	46c0      	nop			@ (mov r8, r8)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2180      	movs	r1, #128	@ 0x80
 800c7ba:	0049      	lsls	r1, r1, #1
 800c7bc:	430a      	orrs	r2, r1
 800c7be:	601a      	str	r2, [r3, #0]
 800c7c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c6:	f383 8810 	msr	PRIMASK, r3
}
 800c7ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7cc:	f3ef 8310 	mrs	r3, PRIMASK
 800c7d0:	613b      	str	r3, [r7, #16]
  return(result);
 800c7d2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f383 8810 	msr	PRIMASK, r3
}
 800c7e0:	46c0      	nop			@ (mov r8, r8)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	2101      	movs	r1, #1
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	609a      	str	r2, [r3, #8]
 800c7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	f383 8810 	msr	PRIMASK, r3
}
 800c7fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c7fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c802:	61fb      	str	r3, [r7, #28]
  return(result);
 800c804:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c806:	637b      	str	r3, [r7, #52]	@ 0x34
 800c808:	2301      	movs	r3, #1
 800c80a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c80c:	6a3b      	ldr	r3, [r7, #32]
 800c80e:	f383 8810 	msr	PRIMASK, r3
}
 800c812:	46c0      	nop			@ (mov r8, r8)
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	689a      	ldr	r2, [r3, #8]
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2140      	movs	r1, #64	@ 0x40
 800c820:	430a      	orrs	r2, r1
 800c822:	609a      	str	r2, [r3, #8]
 800c824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c826:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82a:	f383 8810 	msr	PRIMASK, r3
}
 800c82e:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	0018      	movs	r0, r3
 800c834:	46bd      	mov	sp, r7
 800c836:	b010      	add	sp, #64	@ 0x40
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	46c0      	nop			@ (mov r8, r8)
 800c83c:	0800c995 	.word	0x0800c995
 800c840:	0800cac9 	.word	0x0800cac9
 800c844:	0800cb11 	.word	0x0800cb11

0800c848 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	@ 0x28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c850:	f3ef 8310 	mrs	r3, PRIMASK
 800c854:	60bb      	str	r3, [r7, #8]
  return(result);
 800c856:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c858:	627b      	str	r3, [r7, #36]	@ 0x24
 800c85a:	2301      	movs	r3, #1
 800c85c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	f383 8810 	msr	PRIMASK, r3
}
 800c864:	46c0      	nop			@ (mov r8, r8)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	21c0      	movs	r1, #192	@ 0xc0
 800c872:	438a      	bics	r2, r1
 800c874:	601a      	str	r2, [r3, #0]
 800c876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	f383 8810 	msr	PRIMASK, r3
}
 800c880:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c882:	f3ef 8310 	mrs	r3, PRIMASK
 800c886:	617b      	str	r3, [r7, #20]
  return(result);
 800c888:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c88a:	623b      	str	r3, [r7, #32]
 800c88c:	2301      	movs	r3, #1
 800c88e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	f383 8810 	msr	PRIMASK, r3
}
 800c896:	46c0      	nop			@ (mov r8, r8)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	689a      	ldr	r2, [r3, #8]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4908      	ldr	r1, [pc, #32]	@ (800c8c4 <UART_EndTxTransfer+0x7c>)
 800c8a4:	400a      	ands	r2, r1
 800c8a6:	609a      	str	r2, [r3, #8]
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8ac:	69fb      	ldr	r3, [r7, #28]
 800c8ae:	f383 8810 	msr	PRIMASK, r3
}
 800c8b2:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2288      	movs	r2, #136	@ 0x88
 800c8b8:	2120      	movs	r1, #32
 800c8ba:	5099      	str	r1, [r3, r2]
}
 800c8bc:	46c0      	nop			@ (mov r8, r8)
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	b00a      	add	sp, #40	@ 0x28
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	ff7fffff 	.word	0xff7fffff

0800c8c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b08e      	sub	sp, #56	@ 0x38
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c8d0:	f3ef 8310 	mrs	r3, PRIMASK
 800c8d4:	617b      	str	r3, [r7, #20]
  return(result);
 800c8d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c8d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8da:	2301      	movs	r3, #1
 800c8dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	f383 8810 	msr	PRIMASK, r3
}
 800c8e4:	46c0      	nop			@ (mov r8, r8)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4926      	ldr	r1, [pc, #152]	@ (800c98c <UART_EndRxTransfer+0xc4>)
 800c8f2:	400a      	ands	r2, r1
 800c8f4:	601a      	str	r2, [r3, #0]
 800c8f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c8fa:	69fb      	ldr	r3, [r7, #28]
 800c8fc:	f383 8810 	msr	PRIMASK, r3
}
 800c900:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c902:	f3ef 8310 	mrs	r3, PRIMASK
 800c906:	623b      	str	r3, [r7, #32]
  return(result);
 800c908:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c90a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c90c:	2301      	movs	r3, #1
 800c90e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	f383 8810 	msr	PRIMASK, r3
}
 800c916:	46c0      	nop			@ (mov r8, r8)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689a      	ldr	r2, [r3, #8]
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	491b      	ldr	r1, [pc, #108]	@ (800c990 <UART_EndRxTransfer+0xc8>)
 800c924:	400a      	ands	r2, r1
 800c926:	609a      	str	r2, [r3, #8]
 800c928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92e:	f383 8810 	msr	PRIMASK, r3
}
 800c932:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d118      	bne.n	800c96e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c93c:	f3ef 8310 	mrs	r3, PRIMASK
 800c940:	60bb      	str	r3, [r7, #8]
  return(result);
 800c942:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c944:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c946:	2301      	movs	r3, #1
 800c948:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f383 8810 	msr	PRIMASK, r3
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2110      	movs	r1, #16
 800c95e:	438a      	bics	r2, r1
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c966:	693b      	ldr	r3, [r7, #16]
 800c968:	f383 8810 	msr	PRIMASK, r3
}
 800c96c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	228c      	movs	r2, #140	@ 0x8c
 800c972:	2120      	movs	r1, #32
 800c974:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2200      	movs	r2, #0
 800c980:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c982:	46c0      	nop			@ (mov r8, r8)
 800c984:	46bd      	mov	sp, r7
 800c986:	b00e      	add	sp, #56	@ 0x38
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	46c0      	nop			@ (mov r8, r8)
 800c98c:	fffffedf 	.word	0xfffffedf
 800c990:	effffffe 	.word	0xeffffffe

0800c994 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b094      	sub	sp, #80	@ 0x50
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2220      	movs	r2, #32
 800c9aa:	4013      	ands	r3, r2
 800c9ac:	d16f      	bne.n	800ca8e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800c9ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9b0:	225e      	movs	r2, #94	@ 0x5e
 800c9b2:	2100      	movs	r1, #0
 800c9b4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9b6:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ba:	61bb      	str	r3, [r7, #24]
  return(result);
 800c9bc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c9be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9c4:	69fb      	ldr	r3, [r7, #28]
 800c9c6:	f383 8810 	msr	PRIMASK, r3
}
 800c9ca:	46c0      	nop			@ (mov r8, r8)
 800c9cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681a      	ldr	r2, [r3, #0]
 800c9d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	493b      	ldr	r1, [pc, #236]	@ (800cac4 <UART_DMAReceiveCplt+0x130>)
 800c9d8:	400a      	ands	r2, r1
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c9de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
 800c9e2:	f383 8810 	msr	PRIMASK, r3
}
 800c9e6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c9e8:	f3ef 8310 	mrs	r3, PRIMASK
 800c9ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800c9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9f8:	f383 8810 	msr	PRIMASK, r3
}
 800c9fc:	46c0      	nop			@ (mov r8, r8)
 800c9fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	689a      	ldr	r2, [r3, #8]
 800ca04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	2101      	movs	r1, #1
 800ca0a:	438a      	bics	r2, r1
 800ca0c:	609a      	str	r2, [r3, #8]
 800ca0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca14:	f383 8810 	msr	PRIMASK, r3
}
 800ca18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ca1e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ca20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ca22:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca24:	2301      	movs	r3, #1
 800ca26:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca2a:	f383 8810 	msr	PRIMASK, r3
}
 800ca2e:	46c0      	nop			@ (mov r8, r8)
 800ca30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689a      	ldr	r2, [r3, #8]
 800ca36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	2140      	movs	r1, #64	@ 0x40
 800ca3c:	438a      	bics	r2, r1
 800ca3e:	609a      	str	r2, [r3, #8]
 800ca40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca42:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca46:	f383 8810 	msr	PRIMASK, r3
}
 800ca4a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ca4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca4e:	228c      	movs	r2, #140	@ 0x8c
 800ca50:	2120      	movs	r1, #32
 800ca52:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d118      	bne.n	800ca8e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca5c:	f3ef 8310 	mrs	r3, PRIMASK
 800ca60:	60fb      	str	r3, [r7, #12]
  return(result);
 800ca62:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca66:	2301      	movs	r3, #1
 800ca68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f383 8810 	msr	PRIMASK, r3
}
 800ca70:	46c0      	nop			@ (mov r8, r8)
 800ca72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681a      	ldr	r2, [r3, #0]
 800ca78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2110      	movs	r1, #16
 800ca7e:	438a      	bics	r2, r1
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f383 8810 	msr	PRIMASK, r3
}
 800ca8c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca90:	2200      	movs	r2, #0
 800ca92:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ca98:	2b01      	cmp	r3, #1
 800ca9a:	d109      	bne.n	800cab0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800ca9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ca9e:	22c0      	movs	r2, #192	@ 0xc0
 800caa0:	589b      	ldr	r3, [r3, r2]
 800caa2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caa4:	215c      	movs	r1, #92	@ 0x5c
 800caa6:	5a51      	ldrh	r1, [r2, r1]
 800caa8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800caaa:	0010      	movs	r0, r2
 800caac:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800caae:	e005      	b.n	800cabc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800cab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cab2:	22a0      	movs	r2, #160	@ 0xa0
 800cab4:	589b      	ldr	r3, [r3, r2]
 800cab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cab8:	0010      	movs	r0, r2
 800caba:	4798      	blx	r3
}
 800cabc:	46c0      	nop			@ (mov r8, r8)
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b014      	add	sp, #80	@ 0x50
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	fffffeff 	.word	0xfffffeff

0800cac8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cad4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2201      	movs	r2, #1
 800cada:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d10b      	bne.n	800cafc <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	22c0      	movs	r2, #192	@ 0xc0
 800cae8:	589b      	ldr	r3, [r3, r2]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	215c      	movs	r1, #92	@ 0x5c
 800caee:	5a52      	ldrh	r2, [r2, r1]
 800caf0:	0852      	lsrs	r2, r2, #1
 800caf2:	b291      	uxth	r1, r2
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	0010      	movs	r0, r2
 800caf8:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cafa:	e005      	b.n	800cb08 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	229c      	movs	r2, #156	@ 0x9c
 800cb00:	589b      	ldr	r3, [r3, r2]
 800cb02:	68fa      	ldr	r2, [r7, #12]
 800cb04:	0010      	movs	r0, r2
 800cb06:	4798      	blx	r3
}
 800cb08:	46c0      	nop			@ (mov r8, r8)
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	b004      	add	sp, #16
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b086      	sub	sp, #24
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	2288      	movs	r2, #136	@ 0x88
 800cb22:	589b      	ldr	r3, [r3, r2]
 800cb24:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	228c      	movs	r2, #140	@ 0x8c
 800cb2a:	589b      	ldr	r3, [r3, r2]
 800cb2c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	2280      	movs	r2, #128	@ 0x80
 800cb36:	4013      	ands	r3, r2
 800cb38:	2b80      	cmp	r3, #128	@ 0x80
 800cb3a:	d10a      	bne.n	800cb52 <UART_DMAError+0x42>
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	2b21      	cmp	r3, #33	@ 0x21
 800cb40:	d107      	bne.n	800cb52 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	2256      	movs	r2, #86	@ 0x56
 800cb46:	2100      	movs	r1, #0
 800cb48:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	0018      	movs	r0, r3
 800cb4e:	f7ff fe7b 	bl	800c848 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	2240      	movs	r2, #64	@ 0x40
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	2b40      	cmp	r3, #64	@ 0x40
 800cb5e:	d10a      	bne.n	800cb76 <UART_DMAError+0x66>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b22      	cmp	r3, #34	@ 0x22
 800cb64:	d107      	bne.n	800cb76 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	225e      	movs	r2, #94	@ 0x5e
 800cb6a:	2100      	movs	r1, #0
 800cb6c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	0018      	movs	r0, r3
 800cb72:	f7ff fea9 	bl	800c8c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	2290      	movs	r2, #144	@ 0x90
 800cb7a:	589b      	ldr	r3, [r3, r2]
 800cb7c:	2210      	movs	r2, #16
 800cb7e:	431a      	orrs	r2, r3
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2190      	movs	r1, #144	@ 0x90
 800cb84:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	22a4      	movs	r2, #164	@ 0xa4
 800cb8a:	589b      	ldr	r3, [r3, r2]
 800cb8c:	697a      	ldr	r2, [r7, #20]
 800cb8e:	0010      	movs	r0, r2
 800cb90:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cb92:	46c0      	nop			@ (mov r8, r8)
 800cb94:	46bd      	mov	sp, r7
 800cb96:	b006      	add	sp, #24
 800cb98:	bd80      	pop	{r7, pc}

0800cb9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb9a:	b580      	push	{r7, lr}
 800cb9c:	b084      	sub	sp, #16
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	225e      	movs	r2, #94	@ 0x5e
 800cbac:	2100      	movs	r1, #0
 800cbae:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	2256      	movs	r2, #86	@ 0x56
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	22a4      	movs	r2, #164	@ 0xa4
 800cbbc:	589b      	ldr	r3, [r3, r2]
 800cbbe:	68fa      	ldr	r2, [r7, #12]
 800cbc0:	0010      	movs	r0, r2
 800cbc2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cbc4:	46c0      	nop			@ (mov r8, r8)
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	b004      	add	sp, #16
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cbd4:	f3ef 8310 	mrs	r3, PRIMASK
 800cbd8:	60bb      	str	r3, [r7, #8]
  return(result);
 800cbda:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbdc:	617b      	str	r3, [r7, #20]
 800cbde:	2301      	movs	r3, #1
 800cbe0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f383 8810 	msr	PRIMASK, r3
}
 800cbe8:	46c0      	nop			@ (mov r8, r8)
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2140      	movs	r1, #64	@ 0x40
 800cbf6:	438a      	bics	r2, r1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	f383 8810 	msr	PRIMASK, r3
}
 800cc04:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2288      	movs	r2, #136	@ 0x88
 800cc0a:	2120      	movs	r1, #32
 800cc0c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2298      	movs	r2, #152	@ 0x98
 800cc18:	589b      	ldr	r3, [r3, r2]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	0010      	movs	r0, r2
 800cc1e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc20:	46c0      	nop			@ (mov r8, r8)
 800cc22:	46bd      	mov	sp, r7
 800cc24:	b006      	add	sp, #24
 800cc26:	bd80      	pop	{r7, pc}

0800cc28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cc30:	46c0      	nop			@ (mov r8, r8)
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b002      	add	sp, #8
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cc40:	46c0      	nop			@ (mov r8, r8)
 800cc42:	46bd      	mov	sp, r7
 800cc44:	b002      	add	sp, #8
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cc50:	46c0      	nop			@ (mov r8, r8)
 800cc52:	46bd      	mov	sp, r7
 800cc54:	b002      	add	sp, #8
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <memset>:
 800cc58:	0003      	movs	r3, r0
 800cc5a:	1882      	adds	r2, r0, r2
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d100      	bne.n	800cc62 <memset+0xa>
 800cc60:	4770      	bx	lr
 800cc62:	7019      	strb	r1, [r3, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	e7f9      	b.n	800cc5c <memset+0x4>

0800cc68 <__libc_init_array>:
 800cc68:	b570      	push	{r4, r5, r6, lr}
 800cc6a:	2600      	movs	r6, #0
 800cc6c:	4c0c      	ldr	r4, [pc, #48]	@ (800cca0 <__libc_init_array+0x38>)
 800cc6e:	4d0d      	ldr	r5, [pc, #52]	@ (800cca4 <__libc_init_array+0x3c>)
 800cc70:	1b64      	subs	r4, r4, r5
 800cc72:	10a4      	asrs	r4, r4, #2
 800cc74:	42a6      	cmp	r6, r4
 800cc76:	d109      	bne.n	800cc8c <__libc_init_array+0x24>
 800cc78:	2600      	movs	r6, #0
 800cc7a:	f000 f823 	bl	800ccc4 <_init>
 800cc7e:	4c0a      	ldr	r4, [pc, #40]	@ (800cca8 <__libc_init_array+0x40>)
 800cc80:	4d0a      	ldr	r5, [pc, #40]	@ (800ccac <__libc_init_array+0x44>)
 800cc82:	1b64      	subs	r4, r4, r5
 800cc84:	10a4      	asrs	r4, r4, #2
 800cc86:	42a6      	cmp	r6, r4
 800cc88:	d105      	bne.n	800cc96 <__libc_init_array+0x2e>
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	00b3      	lsls	r3, r6, #2
 800cc8e:	58eb      	ldr	r3, [r5, r3]
 800cc90:	4798      	blx	r3
 800cc92:	3601      	adds	r6, #1
 800cc94:	e7ee      	b.n	800cc74 <__libc_init_array+0xc>
 800cc96:	00b3      	lsls	r3, r6, #2
 800cc98:	58eb      	ldr	r3, [r5, r3]
 800cc9a:	4798      	blx	r3
 800cc9c:	3601      	adds	r6, #1
 800cc9e:	e7f2      	b.n	800cc86 <__libc_init_array+0x1e>
 800cca0:	0800d754 	.word	0x0800d754
 800cca4:	0800d754 	.word	0x0800d754
 800cca8:	0800d758 	.word	0x0800d758
 800ccac:	0800d754 	.word	0x0800d754

0800ccb0 <memcpy>:
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	b510      	push	{r4, lr}
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d100      	bne.n	800ccba <memcpy+0xa>
 800ccb8:	bd10      	pop	{r4, pc}
 800ccba:	5ccc      	ldrb	r4, [r1, r3]
 800ccbc:	54c4      	strb	r4, [r0, r3]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	e7f8      	b.n	800ccb4 <memcpy+0x4>
	...

0800ccc4 <_init>:
 800ccc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccc6:	46c0      	nop			@ (mov r8, r8)
 800ccc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccca:	bc08      	pop	{r3}
 800cccc:	469e      	mov	lr, r3
 800ccce:	4770      	bx	lr

0800ccd0 <_fini>:
 800ccd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccd2:	46c0      	nop			@ (mov r8, r8)
 800ccd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccd6:	bc08      	pop	{r3}
 800ccd8:	469e      	mov	lr, r3
 800ccda:	4770      	bx	lr
