
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f48  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  08007004  08007004  00008004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a08  08007a08  0000900c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a08  08007a08  00008a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a10  08007a10  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a10  08007a10  00008a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a14  08007a14  00008a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08007a18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000000c  08007a24  0000900c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  08007a24  0000957c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b9  00000000  00000000  00009034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ef  00000000  00000000  0001e3ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00020de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9e  00000000  00000000  00021f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001785b  00000000  00000000  00022cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bb8  00000000  00000000  0003a539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa89  00000000  00000000  0004f0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9b7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f34  00000000  00000000  000e9bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000edaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006fec 	.word	0x08006fec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08006fec 	.word	0x08006fec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uldivmod>:
 800021c:	2b00      	cmp	r3, #0
 800021e:	d111      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000220:	2a00      	cmp	r2, #0
 8000222:	d10f      	bne.n	8000244 <__aeabi_uldivmod+0x28>
 8000224:	2900      	cmp	r1, #0
 8000226:	d100      	bne.n	800022a <__aeabi_uldivmod+0xe>
 8000228:	2800      	cmp	r0, #0
 800022a:	d002      	beq.n	8000232 <__aeabi_uldivmod+0x16>
 800022c:	2100      	movs	r1, #0
 800022e:	43c9      	mvns	r1, r1
 8000230:	0008      	movs	r0, r1
 8000232:	b407      	push	{r0, r1, r2}
 8000234:	4802      	ldr	r0, [pc, #8]	@ (8000240 <__aeabi_uldivmod+0x24>)
 8000236:	a102      	add	r1, pc, #8	@ (adr r1, 8000240 <__aeabi_uldivmod+0x24>)
 8000238:	1840      	adds	r0, r0, r1
 800023a:	9002      	str	r0, [sp, #8]
 800023c:	bd03      	pop	{r0, r1, pc}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	ffffffd9 	.word	0xffffffd9
 8000244:	b403      	push	{r0, r1}
 8000246:	4668      	mov	r0, sp
 8000248:	b501      	push	{r0, lr}
 800024a:	9802      	ldr	r0, [sp, #8]
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	9b01      	ldr	r3, [sp, #4]
 8000252:	469e      	mov	lr, r3
 8000254:	b002      	add	sp, #8
 8000256:	bc0c      	pop	{r2, r3}
 8000258:	4770      	bx	lr
 800025a:	46c0      	nop			@ (mov r8, r8)

0800025c <__udivmoddi4>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	0004      	movs	r4, r0
 800026a:	000d      	movs	r5, r1
 800026c:	4692      	mov	sl, r2
 800026e:	4699      	mov	r9, r3
 8000270:	b083      	sub	sp, #12
 8000272:	428b      	cmp	r3, r1
 8000274:	d830      	bhi.n	80002d8 <__udivmoddi4+0x7c>
 8000276:	d02d      	beq.n	80002d4 <__udivmoddi4+0x78>
 8000278:	4649      	mov	r1, r9
 800027a:	4650      	mov	r0, sl
 800027c:	f000 f8ba 	bl	80003f4 <__clzdi2>
 8000280:	0029      	movs	r1, r5
 8000282:	0006      	movs	r6, r0
 8000284:	0020      	movs	r0, r4
 8000286:	f000 f8b5 	bl	80003f4 <__clzdi2>
 800028a:	1a33      	subs	r3, r6, r0
 800028c:	4698      	mov	r8, r3
 800028e:	3b20      	subs	r3, #32
 8000290:	d434      	bmi.n	80002fc <__udivmoddi4+0xa0>
 8000292:	469b      	mov	fp, r3
 8000294:	4653      	mov	r3, sl
 8000296:	465a      	mov	r2, fp
 8000298:	4093      	lsls	r3, r2
 800029a:	4642      	mov	r2, r8
 800029c:	001f      	movs	r7, r3
 800029e:	4653      	mov	r3, sl
 80002a0:	4093      	lsls	r3, r2
 80002a2:	001e      	movs	r6, r3
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d83b      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d100      	bne.n	80002ae <__udivmoddi4+0x52>
 80002ac:	e079      	b.n	80003a2 <__udivmoddi4+0x146>
 80002ae:	465b      	mov	r3, fp
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5e>
 80002b8:	e076      	b.n	80003a8 <__udivmoddi4+0x14c>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	465a      	mov	r2, fp
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4642      	mov	r2, r8
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e029      	b.n	8000328 <__udivmoddi4+0xcc>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9cf      	bls.n	8000278 <__udivmoddi4+0x1c>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8e>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b003      	add	sp, #12
 80002f0:	bcf0      	pop	{r4, r5, r6, r7}
 80002f2:	46bb      	mov	fp, r7
 80002f4:	46b2      	mov	sl, r6
 80002f6:	46a9      	mov	r9, r5
 80002f8:	46a0      	mov	r8, r4
 80002fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fc:	4642      	mov	r2, r8
 80002fe:	469b      	mov	fp, r3
 8000300:	2320      	movs	r3, #32
 8000302:	1a9b      	subs	r3, r3, r2
 8000304:	4652      	mov	r2, sl
 8000306:	40da      	lsrs	r2, r3
 8000308:	4641      	mov	r1, r8
 800030a:	0013      	movs	r3, r2
 800030c:	464a      	mov	r2, r9
 800030e:	408a      	lsls	r2, r1
 8000310:	0017      	movs	r7, r2
 8000312:	4642      	mov	r2, r8
 8000314:	431f      	orrs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d9c3      	bls.n	80002a8 <__udivmoddi4+0x4c>
 8000320:	2200      	movs	r2, #0
 8000322:	2300      	movs	r3, #0
 8000324:	9200      	str	r2, [sp, #0]
 8000326:	9301      	str	r3, [sp, #4]
 8000328:	4643      	mov	r3, r8
 800032a:	2b00      	cmp	r3, #0
 800032c:	d0d8      	beq.n	80002e0 <__udivmoddi4+0x84>
 800032e:	07fb      	lsls	r3, r7, #31
 8000330:	0872      	lsrs	r2, r6, #1
 8000332:	431a      	orrs	r2, r3
 8000334:	4646      	mov	r6, r8
 8000336:	087b      	lsrs	r3, r7, #1
 8000338:	e00e      	b.n	8000358 <__udivmoddi4+0xfc>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d101      	bne.n	8000342 <__udivmoddi4+0xe6>
 800033e:	42a2      	cmp	r2, r4
 8000340:	d80c      	bhi.n	800035c <__udivmoddi4+0x100>
 8000342:	1aa4      	subs	r4, r4, r2
 8000344:	419d      	sbcs	r5, r3
 8000346:	2001      	movs	r0, #1
 8000348:	1924      	adds	r4, r4, r4
 800034a:	416d      	adcs	r5, r5
 800034c:	2100      	movs	r1, #0
 800034e:	3e01      	subs	r6, #1
 8000350:	1824      	adds	r4, r4, r0
 8000352:	414d      	adcs	r5, r1
 8000354:	2e00      	cmp	r6, #0
 8000356:	d006      	beq.n	8000366 <__udivmoddi4+0x10a>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d9ee      	bls.n	800033a <__udivmoddi4+0xde>
 800035c:	3e01      	subs	r6, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2e00      	cmp	r6, #0
 8000364:	d1f8      	bne.n	8000358 <__udivmoddi4+0xfc>
 8000366:	9800      	ldr	r0, [sp, #0]
 8000368:	9901      	ldr	r1, [sp, #4]
 800036a:	465b      	mov	r3, fp
 800036c:	1900      	adds	r0, r0, r4
 800036e:	4169      	adcs	r1, r5
 8000370:	2b00      	cmp	r3, #0
 8000372:	db24      	blt.n	80003be <__udivmoddi4+0x162>
 8000374:	002b      	movs	r3, r5
 8000376:	465a      	mov	r2, fp
 8000378:	4644      	mov	r4, r8
 800037a:	40d3      	lsrs	r3, r2
 800037c:	002a      	movs	r2, r5
 800037e:	40e2      	lsrs	r2, r4
 8000380:	001c      	movs	r4, r3
 8000382:	465b      	mov	r3, fp
 8000384:	0015      	movs	r5, r2
 8000386:	2b00      	cmp	r3, #0
 8000388:	db2a      	blt.n	80003e0 <__udivmoddi4+0x184>
 800038a:	0026      	movs	r6, r4
 800038c:	409e      	lsls	r6, r3
 800038e:	0033      	movs	r3, r6
 8000390:	0026      	movs	r6, r4
 8000392:	4647      	mov	r7, r8
 8000394:	40be      	lsls	r6, r7
 8000396:	0032      	movs	r2, r6
 8000398:	1a80      	subs	r0, r0, r2
 800039a:	4199      	sbcs	r1, r3
 800039c:	9000      	str	r0, [sp, #0]
 800039e:	9101      	str	r1, [sp, #4]
 80003a0:	e79e      	b.n	80002e0 <__udivmoddi4+0x84>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d8bc      	bhi.n	8000320 <__udivmoddi4+0xc4>
 80003a6:	e782      	b.n	80002ae <__udivmoddi4+0x52>
 80003a8:	4642      	mov	r2, r8
 80003aa:	2320      	movs	r3, #32
 80003ac:	2100      	movs	r1, #0
 80003ae:	1a9b      	subs	r3, r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	9100      	str	r1, [sp, #0]
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	2201      	movs	r2, #1
 80003b8:	40da      	lsrs	r2, r3
 80003ba:	9201      	str	r2, [sp, #4]
 80003bc:	e785      	b.n	80002ca <__udivmoddi4+0x6e>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	1a9b      	subs	r3, r3, r2
 80003c4:	002a      	movs	r2, r5
 80003c6:	4646      	mov	r6, r8
 80003c8:	409a      	lsls	r2, r3
 80003ca:	0023      	movs	r3, r4
 80003cc:	40f3      	lsrs	r3, r6
 80003ce:	4644      	mov	r4, r8
 80003d0:	4313      	orrs	r3, r2
 80003d2:	002a      	movs	r2, r5
 80003d4:	40e2      	lsrs	r2, r4
 80003d6:	001c      	movs	r4, r3
 80003d8:	465b      	mov	r3, fp
 80003da:	0015      	movs	r5, r2
 80003dc:	2b00      	cmp	r3, #0
 80003de:	dad4      	bge.n	800038a <__udivmoddi4+0x12e>
 80003e0:	4642      	mov	r2, r8
 80003e2:	002f      	movs	r7, r5
 80003e4:	2320      	movs	r3, #32
 80003e6:	0026      	movs	r6, r4
 80003e8:	4097      	lsls	r7, r2
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	40de      	lsrs	r6, r3
 80003ee:	003b      	movs	r3, r7
 80003f0:	4333      	orrs	r3, r6
 80003f2:	e7cd      	b.n	8000390 <__udivmoddi4+0x134>

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	0008      	movs	r0, r1
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	@ (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <SystemClock_Config>:
UART_HandleTypeDef huart2;


//FUNCTIONS
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b093      	sub	sp, #76	@ 0x4c
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	2410      	movs	r4, #16
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2338      	movs	r3, #56	@ 0x38
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f006 fd9b 	bl	8006f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	003b      	movs	r3, r7
 8000460:	0018      	movs	r0, r3
 8000462:	2310      	movs	r3, #16
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f006 fd94 	bl	8006f94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	009b      	lsls	r3, r3, #2
 8000470:	0018      	movs	r0, r3
 8000472:	f003 fba7 	bl	8003bc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	0021      	movs	r1, r4
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2240      	movs	r2, #64	@ 0x40
 8000490:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000492:	187b      	adds	r3, r7, r1
 8000494:	2202      	movs	r2, #2
 8000496:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000498:	187b      	adds	r3, r7, r1
 800049a:	2202      	movs	r2, #2
 800049c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2200      	movs	r2, #0
 80004a2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2208      	movs	r2, #8
 80004a8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2280      	movs	r2, #128	@ 0x80
 80004ae:	0292      	lsls	r2, r2, #10
 80004b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	22c0      	movs	r2, #192	@ 0xc0
 80004b6:	04d2      	lsls	r2, r2, #19
 80004b8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2280      	movs	r2, #128	@ 0x80
 80004be:	0592      	lsls	r2, r2, #22
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	187b      	adds	r3, r7, r1
 80004c4:	0018      	movs	r0, r3
 80004c6:	f003 fbc9 	bl	8003c5c <HAL_RCC_OscConfig>
 80004ca:	1e03      	subs	r3, r0, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004ce:	f000 fc69 	bl	8000da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	003b      	movs	r3, r7
 80004d4:	2207      	movs	r2, #7
 80004d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2202      	movs	r2, #2
 80004dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	003b      	movs	r3, r7
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e4:	003b      	movs	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ea:	003b      	movs	r3, r7
 80004ec:	2102      	movs	r1, #2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fece 	bl	8004290 <HAL_RCC_ClockConfig>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80004f8:	f000 fc54 	bl	8000da4 <Error_Handler>
  }
}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b013      	add	sp, #76	@ 0x4c
 8000502:	bd90      	pop	{r4, r7, pc}

08000504 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f006 fd3e 	bl	8006f94 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b4a      	ldr	r3, [pc, #296]	@ (8000644 <MX_ADC1_Init+0x140>)
 800051a:	4a4b      	ldr	r2, [pc, #300]	@ (8000648 <MX_ADC1_Init+0x144>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000520:	2280      	movs	r2, #128	@ 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b47      	ldr	r3, [pc, #284]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b45      	ldr	r3, [pc, #276]	@ (8000644 <MX_ADC1_Init+0x140>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000532:	4b44      	ldr	r3, [pc, #272]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000534:	2280      	movs	r2, #128	@ 0x80
 8000536:	0392      	lsls	r2, r2, #14
 8000538:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800053a:	4b42      	ldr	r3, [pc, #264]	@ (8000644 <MX_ADC1_Init+0x140>)
 800053c:	2208      	movs	r2, #8
 800053e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000540:	4b40      	ldr	r3, [pc, #256]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000542:	2200      	movs	r2, #0
 8000544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000546:	4b3f      	ldr	r3, [pc, #252]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000548:	2200      	movs	r2, #0
 800054a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b3d      	ldr	r3, [pc, #244]	@ (8000644 <MX_ADC1_Init+0x140>)
 800054e:	2200      	movs	r2, #0
 8000550:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 8000552:	4b3c      	ldr	r3, [pc, #240]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000554:	2204      	movs	r2, #4
 8000556:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000558:	4b3a      	ldr	r3, [pc, #232]	@ (8000644 <MX_ADC1_Init+0x140>)
 800055a:	2220      	movs	r2, #32
 800055c:	2100      	movs	r1, #0
 800055e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b38      	ldr	r3, [pc, #224]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000562:	2200      	movs	r2, #0
 8000564:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000568:	2200      	movs	r2, #0
 800056a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056c:	4b35      	ldr	r3, [pc, #212]	@ (8000644 <MX_ADC1_Init+0x140>)
 800056e:	222c      	movs	r2, #44	@ 0x2c
 8000570:	2100      	movs	r1, #0
 8000572:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000574:	4b33      	ldr	r3, [pc, #204]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <MX_ADC1_Init+0x140>)
 800057c:	2200      	movs	r2, #0
 800057e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000580:	4b30      	ldr	r3, [pc, #192]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000582:	2200      	movs	r2, #0
 8000584:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000586:	4b2f      	ldr	r3, [pc, #188]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000588:	223c      	movs	r2, #60	@ 0x3c
 800058a:	2100      	movs	r1, #0
 800058c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058e:	4b2d      	ldr	r3, [pc, #180]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000590:	2200      	movs	r2, #0
 8000592:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fed4 	bl	8002344 <HAL_ADC_Init>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80005a0:	f000 fc00 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2201      	movs	r2, #1
 80005a8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b6:	1d3a      	adds	r2, r7, #4
 80005b8:	4b22      	ldr	r3, [pc, #136]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005ba:	0011      	movs	r1, r2
 80005bc:	0018      	movs	r0, r3
 80005be:	f002 fa45 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d001      	beq.n	80005ca <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80005c6:	f000 fbed 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	4a1f      	ldr	r2, [pc, #124]	@ (800064c <MX_ADC1_Init+0x148>)
 80005ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2204      	movs	r2, #4
 80005d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005dc:	1d3a      	adds	r2, r7, #4
 80005de:	4b19      	ldr	r3, [pc, #100]	@ (8000644 <MX_ADC1_Init+0x140>)
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 fa32 	bl	8002a4c <HAL_ADC_ConfigChannel>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80005ec:	f000 fbda 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <MX_ADC1_Init+0x14c>)
 80005f4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	2208      	movs	r2, #8
 80005fa:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_ADC1_Init+0x140>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f002 fa1f 	bl	8002a4c <HAL_ADC_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8000612:	f000 fbc7 	bl	8000da4 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_ADC1_Init+0x150>)
 800061a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	220c      	movs	r2, #12
 8000620:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	1d3a      	adds	r2, r7, #4
 800062a:	4b06      	ldr	r3, [pc, #24]	@ (8000644 <MX_ADC1_Init+0x140>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f002 fa0c 	bl	8002a4c <HAL_ADC_ConfigChannel>
 8000634:	1e03      	subs	r3, r0, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000638:	f000 fbb4 	bl	8000da4 <Error_Handler>
  }
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	b004      	add	sp, #16
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40012400 	.word	0x40012400
 800064c:	04000002 	.word	0x04000002
 8000650:	10000010 	.word	0x10000010
 8000654:	14000020 	.word	0x14000020

08000658 <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	0018      	movs	r0, r3
 8000662:	231c      	movs	r3, #28
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f006 fc94 	bl	8006f94 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800066c:	4b20      	ldr	r3, [pc, #128]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800066e:	4a21      	ldr	r2, [pc, #132]	@ (80006f4 <MX_TIM14_Init+0x9c>)
 8000670:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000672:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000678:	4b1d      	ldr	r3, [pc, #116]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1023;
 800067e:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <MX_TIM14_Init+0xa0>)
 8000682:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000686:	2280      	movs	r2, #128	@ 0x80
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_TIM14_Init+0x98>)
 800068e:	2280      	movs	r2, #128	@ 0x80
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_TIM14_Init+0x98>)
 8000694:	0018      	movs	r0, r3
 8000696:	f003 ffa5 	bl	80045e4 <HAL_TIM_Base_Init>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800069e:	f000 fb81 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f004 f9e1 	bl	8004a6c <HAL_TIM_PWM_Init>
 80006aa:	1e03      	subs	r3, r0, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80006ae:	f000 fb79 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2260      	movs	r2, #96	@ 0x60
 80006b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 400;
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	22c8      	movs	r2, #200	@ 0xc8
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	1d39      	adds	r1, r7, #4
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	0018      	movs	r0, r3
 80006d4:	f004 fdb2 	bl	800523c <HAL_TIM_PWM_ConfigChannel>
 80006d8:	1e03      	subs	r3, r0, #0
 80006da:	d001      	beq.n	80006e0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80006dc:	f000 fb62 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <MX_TIM14_Init+0x98>)
 80006e2:	0018      	movs	r0, r3
 80006e4:	f000 fe74 	bl	80013d0 <HAL_TIM_MspPostInit>

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b008      	add	sp, #32
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	2000010c 	.word	0x2000010c
 80006f4:	40002000 	.word	0x40002000
 80006f8:	000003ff 	.word	0x000003ff

080006fc <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	2334      	movs	r3, #52	@ 0x34
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0018      	movs	r0, r3
 8000708:	231c      	movs	r3, #28
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f006 fc41 	bl	8006f94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000712:	003b      	movs	r3, r7
 8000714:	0018      	movs	r0, r3
 8000716:	2334      	movs	r3, #52	@ 0x34
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f006 fc3a 	bl	8006f94 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000720:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <MX_TIM16_Init+0x120>)
 8000722:	4a3f      	ldr	r2, [pc, #252]	@ (8000820 <MX_TIM16_Init+0x124>)
 8000724:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000726:	4b3d      	ldr	r3, [pc, #244]	@ (800081c <MX_TIM16_Init+0x120>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <MX_TIM16_Init+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8000732:	4b3a      	ldr	r3, [pc, #232]	@ (800081c <MX_TIM16_Init+0x120>)
 8000734:	22ff      	movs	r2, #255	@ 0xff
 8000736:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000738:	4b38      	ldr	r3, [pc, #224]	@ (800081c <MX_TIM16_Init+0x120>)
 800073a:	2280      	movs	r2, #128	@ 0x80
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000740:	4b36      	ldr	r3, [pc, #216]	@ (800081c <MX_TIM16_Init+0x120>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <MX_TIM16_Init+0x120>)
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800074c:	4b33      	ldr	r3, [pc, #204]	@ (800081c <MX_TIM16_Init+0x120>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 ff48 	bl	80045e4 <HAL_TIM_Base_Init>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 fb24 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 800075c:	4b2f      	ldr	r3, [pc, #188]	@ (800081c <MX_TIM16_Init+0x120>)
 800075e:	0018      	movs	r0, r3
 8000760:	f003 fff2 	bl	8004748 <HAL_TIM_OC_Init>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d001      	beq.n	800076c <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 fb1c 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800076c:	2134      	movs	r1, #52	@ 0x34
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	22ff      	movs	r2, #255	@ 0xff
 8000778:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077a:	187b      	adds	r3, r7, r1
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000792:	187b      	adds	r3, r7, r1
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000798:	1879      	adds	r1, r7, r1
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_TIM16_Init+0x120>)
 800079c:	2200      	movs	r2, #0
 800079e:	0018      	movs	r0, r3
 80007a0:	f004 fc48 	bl	8005034 <HAL_TIM_OC_ConfigChannel>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 80007a8:	f000 fafc 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_TIM16_Init+0x120>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	699a      	ldr	r2, [r3, #24]
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_TIM16_Init+0x120>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2108      	movs	r1, #8
 80007b8:	430a      	orrs	r2, r1
 80007ba:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007bc:	003b      	movs	r3, r7
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c2:	003b      	movs	r3, r7
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c8:	003b      	movs	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	003b      	movs	r3, r7
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	003b      	movs	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007da:	003b      	movs	r3, r7
 80007dc:	2280      	movs	r2, #128	@ 0x80
 80007de:	0192      	lsls	r2, r2, #6
 80007e0:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007e2:	003b      	movs	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e8:	003b      	movs	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80007ee:	003a      	movs	r2, r7
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_TIM16_Init+0x120>)
 80007f2:	0011      	movs	r1, r2
 80007f4:	0018      	movs	r0, r3
 80007f6:	f005 fe0f 	bl	8006418 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 80007fe:	f000 fad1 	bl	8000da4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2015      	movs	r0, #21
 8000808:	f002 fd74 	bl	80032f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800080c:	2015      	movs	r0, #21
 800080e:	f002 fd86 	bl	800331e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM16_Init 2 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b014      	add	sp, #80	@ 0x50
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	200001c8 	.word	0x200001c8
 8000820:	40014400 	.word	0x40014400

08000824 <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800082a:	2320      	movs	r3, #32
 800082c:	18fb      	adds	r3, r7, r3
 800082e:	0018      	movs	r0, r3
 8000830:	2310      	movs	r3, #16
 8000832:	001a      	movs	r2, r3
 8000834:	2100      	movs	r1, #0
 8000836:	f006 fbad 	bl	8006f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	2314      	movs	r3, #20
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	0018      	movs	r0, r3
 8000840:	230c      	movs	r3, #12
 8000842:	001a      	movs	r2, r3
 8000844:	2100      	movs	r1, #0
 8000846:	f006 fba5 	bl	8006f94 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	0018      	movs	r0, r3
 800084e:	2310      	movs	r3, #16
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f006 fb9e 	bl	8006f94 <memset>

  htim2.Instance = TIM2;
 8000858:	4b2f      	ldr	r3, [pc, #188]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800085a:	2280      	movs	r2, #128	@ 0x80
 800085c:	05d2      	lsls	r2, r2, #23
 800085e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8000860:	4b2d      	ldr	r3, [pc, #180]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000862:	223f      	movs	r2, #63	@ 0x3f
 8000864:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800086c:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800086e:	2201      	movs	r2, #1
 8000870:	4252      	negs	r2, r2
 8000872:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087c:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <MX_TIM2_Init+0xf4>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_TIM2_Init+0xf4>)
 8000884:	0018      	movs	r0, r3
 8000886:	f003 fead 	bl	80045e4 <HAL_TIM_Base_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 fa89 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000892:	2120      	movs	r1, #32
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	0152      	lsls	r2, r2, #5
 800089a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800089c:	187a      	adds	r2, r7, r1
 800089e:	4b1e      	ldr	r3, [pc, #120]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f004 fdca 	bl	800543c <HAL_TIM_ConfigClockSource>
 80008a8:	1e03      	subs	r3, r0, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008ac:	f000 fa7a 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fa26 	bl	8004d04 <HAL_TIM_IC_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80008bc:	f000 fa72 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2114      	movs	r1, #20
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ce:	187a      	adds	r2, r7, r1
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008d2:	0011      	movs	r1, r2
 80008d4:	0018      	movs	r0, r3
 80008d6:	f005 fd37 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 80008da:	1e03      	subs	r3, r0, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80008de:	f000 fa61 	bl	8000da4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2202      	movs	r2, #2
 80008e6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2201      	movs	r2, #1
 80008ec:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	220f      	movs	r2, #15
 80008f8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80008fa:	1d39      	adds	r1, r7, #4
 80008fc:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <MX_TIM2_Init+0xf4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f004 fbf7 	bl	80050f4 <HAL_TIM_IC_ConfigChannel>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800090a:	f000 fa4b 	bl	8000da4 <Error_Handler>
  }
}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	b00c      	add	sp, #48	@ 0x30
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000284 	.word	0x20000284

0800091c <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08e      	sub	sp, #56	@ 0x38
 8000920:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000922:	2328      	movs	r3, #40	@ 0x28
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	2310      	movs	r3, #16
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f006 fb31 	bl	8006f94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000932:	231c      	movs	r3, #28
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	230c      	movs	r3, #12
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f006 fb29 	bl	8006f94 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	231c      	movs	r3, #28
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f006 fb22 	bl	8006f94 <memset>

  htim3.Instance = TIM3;
 8000950:	4b32      	ldr	r3, [pc, #200]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <MX_TIM3_Init+0x104>)
 8000954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000958:	4a32      	ldr	r2, [pc, #200]	@ (8000a24 <MX_TIM3_Init+0x108>)
 800095a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b2f      	ldr	r3, [pc, #188]	@ (8000a1c <MX_TIM3_Init+0x100>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4095;
 8000962:	4b2e      	ldr	r3, [pc, #184]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000964:	4a30      	ldr	r2, [pc, #192]	@ (8000a28 <MX_TIM3_Init+0x10c>)
 8000966:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <MX_TIM3_Init+0x100>)
 800096a:	2280      	movs	r2, #128	@ 0x80
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000970:	4b2a      	ldr	r3, [pc, #168]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000976:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fe33 	bl	80045e4 <HAL_TIM_Base_Init>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000982:	f000 fa0f 	bl	8000da4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	2128      	movs	r1, #40	@ 0x28
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000990:	187a      	adds	r2, r7, r1
 8000992:	4b22      	ldr	r3, [pc, #136]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000994:	0011      	movs	r1, r2
 8000996:	0018      	movs	r0, r3
 8000998:	f004 fd50 	bl	800543c <HAL_TIM_ConfigClockSource>
 800099c:	1e03      	subs	r3, r0, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80009a0:	f000 fa00 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80009a4:	4b1d      	ldr	r3, [pc, #116]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009a6:	0018      	movs	r0, r3
 80009a8:	f003 fece 	bl	8004748 <HAL_TIM_OC_Init>
 80009ac:	1e03      	subs	r3, r0, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009b0:	f000 f9f8 	bl	8000da4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	211c      	movs	r1, #28
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c2:	187a      	adds	r2, r7, r1
 80009c4:	4b15      	ldr	r3, [pc, #84]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009c6:	0011      	movs	r1, r2
 80009c8:	0018      	movs	r0, r3
 80009ca:	f005 fcbd 	bl	8006348 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	1e03      	subs	r3, r0, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80009d2:	f000 f9e7 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80009d6:	003b      	movs	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ee:	0039      	movs	r1, r7
 80009f0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a1c <MX_TIM3_Init+0x100>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	0018      	movs	r0, r3
 80009f6:	f004 fb1d 	bl	8005034 <HAL_TIM_OC_ConfigChannel>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80009fe:	f000 f9d1 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	699a      	ldr	r2, [r3, #24]
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <MX_TIM3_Init+0x100>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2108      	movs	r1, #8
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	619a      	str	r2, [r3, #24]
}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b00e      	add	sp, #56	@ 0x38
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	20000340 	.word	0x20000340
 8000a20:	40000400 	.word	0x40000400
 8000a24:	00007fff 	.word	0x00007fff
 8000a28:	00000fff 	.word	0x00000fff

08000a2c <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	@ 0x50
 8000a30:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	2334      	movs	r3, #52	@ 0x34
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	231c      	movs	r3, #28
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f006 faa9 	bl	8006f94 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	2334      	movs	r3, #52	@ 0x34
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f006 faa2 	bl	8006f94 <memset>

  htim17.Instance = TIM17;
 8000a50:	4b3a      	ldr	r3, [pc, #232]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a52:	4a3b      	ldr	r2, [pc, #236]	@ (8000b40 <MX_TIM17_Init+0x114>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (64 * 512) - 1;
 8000a56:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a58:	4a3a      	ldr	r2, [pc, #232]	@ (8000b44 <MX_TIM17_Init+0x118>)
 8000a5a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5c:	4b37      	ldr	r3, [pc, #220]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 4095;
 8000a62:	4b36      	ldr	r3, [pc, #216]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a64:	4a38      	ldr	r2, [pc, #224]	@ (8000b48 <MX_TIM17_Init+0x11c>)
 8000a66:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000a68:	4b34      	ldr	r3, [pc, #208]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a6a:	2280      	movs	r2, #128	@ 0x80
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a70:	4b32      	ldr	r3, [pc, #200]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a76:	4b31      	ldr	r3, [pc, #196]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f003 fdb0 	bl	80045e4 <HAL_TIM_Base_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8000a88:	f000 f98c 	bl	8000da4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 fe5a 	bl	8004748 <HAL_TIM_OC_Init>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8000a98:	f000 f984 	bl	8000da4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000a9c:	2134      	movs	r1, #52	@ 0x34
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac8:	1879      	adds	r1, r7, r1
 8000aca:	4b1c      	ldr	r3, [pc, #112]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f004 fab0 	bl	8005034 <HAL_TIM_OC_ConfigChannel>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 8000ad8:	f000 f964 	bl	8000da4 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 8000adc:	4b17      	ldr	r3, [pc, #92]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	699a      	ldr	r2, [r3, #24]
 8000ae2:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afe:	003b      	movs	r3, r7
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	0192      	lsls	r2, r2, #6
 8000b10:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b1e:	003a      	movs	r2, r7
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_TIM17_Init+0x110>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f005 fc77 	bl	8006418 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 8000b2e:	f000 f939 	bl	8000da4 <Error_Handler>
  }
}
 8000b32:	46c0      	nop			@ (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b014      	add	sp, #80	@ 0x50
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			@ (mov r8, r8)
 8000b3c:	200003fc 	.word	0x200003fc
 8000b40:	40014800 	.word	0x40014800
 8000b44:	00007fff 	.word	0x00007fff
 8000b48:	00000fff 	.word	0x00000fff

08000b4c <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8000b50:	4b16      	ldr	r3, [pc, #88]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <MX_USART2_UART_Init+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b56:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b58:	22e1      	movs	r2, #225	@ 0xe1
 8000b5a:	0252      	lsls	r2, r2, #9
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b88:	4b08      	ldr	r3, [pc, #32]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <MX_USART2_UART_Init+0x60>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f005 fcfa 	bl	8006590 <HAL_UART_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba0:	f000 f900 	bl	8000da4 <Error_Handler>
  }
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	200004b8 	.word	0x200004b8
 8000bb0:	40004400 	.word	0x40004400

08000bb4 <MX_DMA_Init>:

void MX_DMA_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <MX_DMA_Init+0x48>)
 8000bc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bca:	2201      	movs	r2, #1
 8000bcc:	4013      	ands	r3, r2
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 2);
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	2009      	movs	r0, #9
 8000bd8:	f002 fb8c 	bl	80032f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	2009      	movs	r0, #9
 8000bde:	f002 fb9e 	bl	800331e <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_5_DMAMUX1_OVR_IRQn interrupt configuration */ //- i think to do with scan mode adc
  HAL_NVIC_SetPriority(DMA1_Ch4_5_DMAMUX1_OVR_IRQn, 2, 2);
 8000be2:	2202      	movs	r2, #2
 8000be4:	2102      	movs	r1, #2
 8000be6:	200b      	movs	r0, #11
 8000be8:	f002 fb84 	bl	80032f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_5_DMAMUX1_OVR_IRQn);
 8000bec:	200b      	movs	r0, #11
 8000bee:	f002 fb96 	bl	800331e <HAL_NVIC_EnableIRQ>

}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:

void MX_GPIO_Init(void)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b089      	sub	sp, #36	@ 0x24
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	240c      	movs	r4, #12
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	001a      	movs	r2, r3
 8000c10:	2100      	movs	r1, #0
 8000c12:	f006 f9bf 	bl	8006f94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c16:	4b60      	ldr	r3, [pc, #384]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c22:	4b5d      	ldr	r3, [pc, #372]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c26:	2204      	movs	r2, #4
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2e:	4b5a      	ldr	r3, [pc, #360]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c32:	4b59      	ldr	r3, [pc, #356]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c34:	2120      	movs	r1, #32
 8000c36:	430a      	orrs	r2, r1
 8000c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c3a:	4b57      	ldr	r3, [pc, #348]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c3e:	2220      	movs	r2, #32
 8000c40:	4013      	ands	r3, r2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c4a:	4b53      	ldr	r3, [pc, #332]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c52:	4b51      	ldr	r3, [pc, #324]	@ (8000d98 <MX_GPIO_Init+0x198>)
 8000c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c56:	2201      	movs	r2, #1
 8000c58:	4013      	ands	r3, r2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8000d9c <MX_GPIO_Init+0x19c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	2140      	movs	r1, #64	@ 0x40
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 ff8f 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	2204      	movs	r2, #4
 8000c6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	2288      	movs	r2, #136	@ 0x88
 8000c74:	0352      	lsls	r2, r2, #13
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	4a47      	ldr	r2, [pc, #284]	@ (8000da0 <MX_GPIO_Init+0x1a0>)
 8000c82:	0019      	movs	r1, r3
 8000c84:	0010      	movs	r0, r2
 8000c86:	f002 fe1b 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */ // - on-board green LED
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c8a:	193b      	adds	r3, r7, r4
 8000c8c:	2240      	movs	r2, #64	@ 0x40
 8000c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2201      	movs	r2, #1
 8000c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <MX_GPIO_Init+0x19c>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f002 fe0c 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH0_Pin */
  GPIO_InitStruct.Pin = ADC_CH0_Pin;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cae:	193b      	adds	r3, r7, r4
 8000cb0:	2203      	movs	r2, #3
 8000cb2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH0_GPIO_Port, &GPIO_InitStruct);
 8000cba:	193a      	adds	r2, r7, r4
 8000cbc:	23a0      	movs	r3, #160	@ 0xa0
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	0011      	movs	r1, r2
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f002 fdfc 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH1_Pin */
  GPIO_InitStruct.Pin = ADC_CH1_Pin;
 8000cc8:	193b      	adds	r3, r7, r4
 8000cca:	2202      	movs	r2, #2
 8000ccc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cce:	193b      	adds	r3, r7, r4
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH1_GPIO_Port, &GPIO_InitStruct);
 8000cda:	193a      	adds	r2, r7, r4
 8000cdc:	23a0      	movs	r3, #160	@ 0xa0
 8000cde:	05db      	lsls	r3, r3, #23
 8000ce0:	0011      	movs	r1, r2
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f002 fdec 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH4_Pin */
  GPIO_InitStruct.Pin = ADC_CH4_Pin;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2210      	movs	r2, #16
 8000cec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH4_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	193a      	adds	r2, r7, r4
 8000cfc:	23a0      	movs	r3, #160	@ 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f002 fddc 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CH5_Pin */
  GPIO_InitStruct.Pin = ADC_CH5_Pin;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2220      	movs	r2, #32
 8000d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2203      	movs	r2, #3
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADC_CH5_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	@ 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 fdcc 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISR measurement pin */
  GPIO_InitStruct.Pin = ISR_MEAS_Pin;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2280      	movs	r2, #128	@ 0x80
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d30:	193b      	adds	r3, r7, r4
 8000d32:	2201      	movs	r2, #1
 8000d34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	193b      	adds	r3, r7, r4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ISR_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000d3c:	193a      	adds	r2, r7, r4
 8000d3e:	23a0      	movs	r3, #160	@ 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f002 fdbb 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tempo LED flash pin */
  GPIO_InitStruct.Pin = TEMPO_Pin;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2201      	movs	r2, #1
 8000d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEMPO_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	193a      	adds	r2, r7, r4
 8000d60:	23a0      	movs	r3, #160	@ 0xa0
 8000d62:	05db      	lsls	r3, r3, #23
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f002 fdaa 	bl	80038c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Tap Tempo I/P pin - requires pullup to detect falling edge */
  GPIO_InitStruct.Pin = TAP_TEMPO_Pin;
 8000d6c:	0021      	movs	r1, r4
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2280      	movs	r2, #128	@ 0x80
 8000d72:	0212      	lsls	r2, r2, #8
 8000d74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2201      	movs	r2, #1
 8000d80:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TAP_TEMPO_GPIO_Port, &GPIO_InitStruct);
 8000d82:	187a      	adds	r2, r7, r1
 8000d84:	23a0      	movs	r3, #160	@ 0xa0
 8000d86:	05db      	lsls	r3, r3, #23
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fd98 	bl	80038c0 <HAL_GPIO_Init>
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b009      	add	sp, #36	@ 0x24
 8000d96:	bd90      	pop	{r4, r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	50000800 	.word	0x50000800
 8000da0:	50001400 	.word	0x50001400

08000da4 <Error_Handler>:

void Error_Handler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da8:	b672      	cpsid	i
}
 8000daa:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dac:	46c0      	nop			@ (mov r8, r8)
 8000dae:	e7fd      	b.n	8000dac <Error_Handler+0x8>

08000db0 <System_Init>:
  {

  }
}

void System_Init(void){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000db4:	f001 f8d6 	bl	8001f64 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000db8:	f7ff fb46 	bl	8000448 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dbc:	f7ff ff20 	bl	8000c00 <MX_GPIO_Init>
	MX_DMA_Init();
 8000dc0:	f7ff fef8 	bl	8000bb4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000dc4:	f7ff fec2 	bl	8000b4c <MX_USART2_UART_Init>
	MX_ADC1_Init();
 8000dc8:	f7ff fb9c 	bl	8000504 <MX_ADC1_Init>
	MX_TIM14_Init(); //PWM Gen.
 8000dcc:	f7ff fc44 	bl	8000658 <MX_TIM14_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8000dd0:	f7ff fc94 	bl	80006fc <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement
 8000dd4:	f7ff fd26 	bl	8000824 <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse
 8000dd8:	f7ff fda0 	bl	800091c <MX_TIM3_Init>
	MX_TIM17_Init(); //Maximum I/P Capture Measurement Timeout
 8000ddc:	f7ff fe26 	bl	8000a2c <MX_TIM17_Init>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM16_callback);
 8000de0:	4a07      	ldr	r2, [pc, #28]	@ (8000e00 <System_Init+0x50>)
 8000de2:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <System_Init+0x54>)
 8000de4:	2114      	movs	r1, #20
 8000de6:	0018      	movs	r0, r3
 8000de8:	f004 fc4e 	bl	8005688 <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8000dec:	4a06      	ldr	r2, [pc, #24]	@ (8000e08 <System_Init+0x58>)
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <System_Init+0x5c>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f001 fc7e 	bl	80026f4 <HAL_ADC_RegisterCallback>
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	08000e11 	.word	0x08000e11
 8000e04:	200001c8 	.word	0x200001c8
 8000e08:	08001085 	.word	0x08001085
 8000e0c:	20000028 	.word	0x20000028

08000e10 <TIM16_callback>:
#include "custom_callbacks.h"

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	//TIM16 interrupt flag is already cleared by stm32g0xx_it.c

	TIM16_callback_active = YES;
 8000e18:	4b75      	ldr	r3, [pc, #468]	@ (8000ff0 <TIM16_callback+0x1e0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
	Global_Interrupt_Disable();
 8000e1e:	f000 fba9 	bl	8001574 <Global_Interrupt_Disable>
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	0159      	lsls	r1, r3, #5
 8000e26:	23a0      	movs	r3, #160	@ 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f002 feab 	bl	8003b88 <HAL_GPIO_WritePin>
	}*/

	////////////////////////////////
	//SET THE CURRENT(prev) VALUES//
	////////////////////////////////
	TIM16->EGR |= TIM_EGR_UG; //DO NOT DELETE THIS LINE, IT LITERALLY MAKES OR BREAKS THE BASTARD - It triggers an 'update' event
 8000e32:	4b70      	ldr	r3, [pc, #448]	@ (8000ff4 <TIM16_callback+0x1e4>)
 8000e34:	695a      	ldr	r2, [r3, #20]
 8000e36:	4b6f      	ldr	r3, [pc, #444]	@ (8000ff4 <TIM16_callback+0x1e4>)
 8000e38:	2101      	movs	r1, #1
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	615a      	str	r2, [r3, #20]
	__HAL_TIM_SET_COUNTER(&htim16, TIM16_final_start_value_locked); //this line must go here, or at least very near the beginning!
 8000e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8000ff8 <TIM16_callback+0x1e8>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b6d      	ldr	r3, [pc, #436]	@ (8000ffc <TIM16_callback+0x1ec>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_PRESCALER(&htim16, (TIM16_prescaler_divisors[TIM16_prescaler_divisors_final_index_locked]) - 1); //have to take one off the divisor
 8000e4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001000 <TIM16_callback+0x1f0>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	001a      	movs	r2, r3
 8000e52:	4b6c      	ldr	r3, [pc, #432]	@ (8001004 <TIM16_callback+0x1f4>)
 8000e54:	0052      	lsls	r2, r2, #1
 8000e56:	5ad3      	ldrh	r3, [r2, r3]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	4b68      	ldr	r3, [pc, #416]	@ (8000ffc <TIM16_callback+0x1ec>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8000e60:	4b69      	ldr	r3, [pc, #420]	@ (8001008 <TIM16_callback+0x1f8>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b69      	ldr	r3, [pc, #420]	@ (800100c <TIM16_callback+0x1fc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	635a      	str	r2, [r3, #52]	@ 0x34

	/////////////////////////////
	//CALCULATE THE NEXT VALUES//
	/////////////////////////////
	current_index++;
 8000e6c:	4b68      	ldr	r3, [pc, #416]	@ (8001010 <TIM16_callback+0x200>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	3301      	adds	r3, #1
 8000e74:	b29a      	uxth	r2, r3
 8000e76:	4b66      	ldr	r3, [pc, #408]	@ (8001010 <TIM16_callback+0x200>)
 8000e78:	801a      	strh	r2, [r3, #0]

	if(current_index == FINAL_INDEX + 1){
 8000e7a:	4b65      	ldr	r3, [pc, #404]	@ (8001010 <TIM16_callback+0x200>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	b29a      	uxth	r2, r3
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d108      	bne.n	8000e9a <TIM16_callback+0x8a>
		current_quadrant = FIRST_QUADRANT;
 8000e88:	4b62      	ldr	r3, [pc, #392]	@ (8001014 <TIM16_callback+0x204>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000e8e:	4b62      	ldr	r3, [pc, #392]	@ (8001018 <TIM16_callback+0x208>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]
		current_index = 0;
 8000e94:	4b5e      	ldr	r3, [pc, #376]	@ (8001010 <TIM16_callback+0x200>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	801a      	strh	r2, [r3, #0]
	}

	if(current_waveshape == TRIANGLE_MODE){
 8000e9a:	4b60      	ldr	r3, [pc, #384]	@ (800101c <TIM16_callback+0x20c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d109      	bne.n	8000eb8 <TIM16_callback+0xa8>
		duty = tri_wavetable[current_index];
 8000ea4:	4b5a      	ldr	r3, [pc, #360]	@ (8001010 <TIM16_callback+0x200>)
 8000ea6:	881b      	ldrh	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	001a      	movs	r2, r3
 8000eac:	4b5c      	ldr	r3, [pc, #368]	@ (8001020 <TIM16_callback+0x210>)
 8000eae:	0052      	lsls	r2, r2, #1
 8000eb0:	5ad2      	ldrh	r2, [r2, r3]
 8000eb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <TIM16_callback+0x214>)
 8000eb4:	801a      	strh	r2, [r3, #0]
 8000eb6:	e029      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if(current_waveshape == SINE_MODE){
 8000eb8:	4b58      	ldr	r3, [pc, #352]	@ (800101c <TIM16_callback+0x20c>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d109      	bne.n	8000ed6 <TIM16_callback+0xc6>
		duty = sine_wavetable[current_index];
 8000ec2:	4b53      	ldr	r3, [pc, #332]	@ (8001010 <TIM16_callback+0x200>)
 8000ec4:	881b      	ldrh	r3, [r3, #0]
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4b57      	ldr	r3, [pc, #348]	@ (8001028 <TIM16_callback+0x218>)
 8000ecc:	0052      	lsls	r2, r2, #1
 8000ece:	5ad2      	ldrh	r2, [r2, r3]
 8000ed0:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <TIM16_callback+0x214>)
 8000ed2:	801a      	strh	r2, [r3, #0]
 8000ed4:	e01a      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index < THIRD_QUADRANT_START_INDEX)){
 8000ed6:	4b51      	ldr	r3, [pc, #324]	@ (800101c <TIM16_callback+0x20c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d108      	bne.n	8000ef2 <TIM16_callback+0xe2>
 8000ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8001010 <TIM16_callback+0x200>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	2bff      	cmp	r3, #255	@ 0xff
 8000ee8:	d803      	bhi.n	8000ef2 <TIM16_callback+0xe2>
		duty = 1023;
 8000eea:	4b4e      	ldr	r3, [pc, #312]	@ (8001024 <TIM16_callback+0x214>)
 8000eec:	4a4f      	ldr	r2, [pc, #316]	@ (800102c <TIM16_callback+0x21c>)
 8000eee:	801a      	strh	r2, [r3, #0]
 8000ef0:	e00c      	b.n	8000f0c <TIM16_callback+0xfc>
	}
	else if((current_waveshape == SQUARE_MODE) && (current_index >= THIRD_QUADRANT_START_INDEX)){
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	@ (800101c <TIM16_callback+0x20c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d107      	bne.n	8000f0c <TIM16_callback+0xfc>
 8000efc:	4b44      	ldr	r3, [pc, #272]	@ (8001010 <TIM16_callback+0x200>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	2bff      	cmp	r3, #255	@ 0xff
 8000f04:	d902      	bls.n	8000f0c <TIM16_callback+0xfc>
			duty = 0;
 8000f06:	4b47      	ldr	r3, [pc, #284]	@ (8001024 <TIM16_callback+0x214>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	801a      	strh	r2, [r3, #0]
	}

	if(current_index == FIRST_QUADRANT_START_INDEX){
 8000f0c:	4b40      	ldr	r3, [pc, #256]	@ (8001010 <TIM16_callback+0x200>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d106      	bne.n	8000f24 <TIM16_callback+0x114>
		current_quadrant = FIRST_QUADRANT;
 8000f16:	4b3f      	ldr	r3, [pc, #252]	@ (8001014 <TIM16_callback+0x204>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000f1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001018 <TIM16_callback+0x208>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e026      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == SECOND_QUADRANT_START_INDEX){
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <TIM16_callback+0x200>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2b80      	cmp	r3, #128	@ 0x80
 8000f2c:	d106      	bne.n	8000f3c <TIM16_callback+0x12c>
		current_quadrant = SECOND_QUADRANT;
 8000f2e:	4b39      	ldr	r3, [pc, #228]	@ (8001014 <TIM16_callback+0x204>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	701a      	strb	r2, [r3, #0]
		current_halfcycle = FIRST_HALFCYCLE;
 8000f34:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <TIM16_callback+0x208>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
 8000f3a:	e01a      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == THIRD_QUADRANT_START_INDEX){
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <TIM16_callback+0x200>)
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d106      	bne.n	8000f58 <TIM16_callback+0x148>
		current_quadrant = FIRST_QUADRANT;
 8000f4a:	4b32      	ldr	r3, [pc, #200]	@ (8001014 <TIM16_callback+0x204>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000f50:	4b31      	ldr	r3, [pc, #196]	@ (8001018 <TIM16_callback+0x208>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
 8000f56:	e00c      	b.n	8000f72 <TIM16_callback+0x162>
	}
	else if(current_index == FOURTH_QUADRANT_START_INDEX){
 8000f58:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <TIM16_callback+0x200>)
 8000f5a:	881b      	ldrh	r3, [r3, #0]
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d105      	bne.n	8000f72 <TIM16_callback+0x162>
		current_quadrant = SECOND_QUADRANT;
 8000f66:	4b2b      	ldr	r3, [pc, #172]	@ (8001014 <TIM16_callback+0x204>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	701a      	strb	r2, [r3, #0]
		current_halfcycle = SECOND_HALFCYCLE;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <TIM16_callback+0x208>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(current_depth == 255){
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <TIM16_callback+0x220>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d108      	bne.n	8000f8e <TIM16_callback+0x17e>
			duty = 1023 - duty;
 8000f7c:	4b29      	ldr	r3, [pc, #164]	@ (8001024 <TIM16_callback+0x214>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4a2a      	ldr	r2, [pc, #168]	@ (800102c <TIM16_callback+0x21c>)
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <TIM16_callback+0x214>)
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e00a      	b.n	8000fa4 <TIM16_callback+0x194>
		}
		else if(current_depth != 0){
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <TIM16_callback+0x220>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d002      	beq.n	8000f9e <TIM16_callback+0x18e>
			//duty = 1023 - duty*(current_depth >> 8);
			Multiply_Duty_By_Current_Depth_and_Divide_By_256();
 8000f98:	f000 f852 	bl	8001040 <Multiply_Duty_By_Current_Depth_and_Divide_By_256>
 8000f9c:	e002      	b.n	8000fa4 <TIM16_callback+0x194>
		}
		else{
			duty = 1023; //if depth is 0, just output 1023
 8000f9e:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <TIM16_callback+0x214>)
 8000fa0:	4a22      	ldr	r2, [pc, #136]	@ (800102c <TIM16_callback+0x21c>)
 8000fa2:	801a      	strh	r2, [r3, #0]
		}

	#endif

	prev_duty = duty;
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <TIM16_callback+0x214>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <TIM16_callback+0x1f8>)
 8000fac:	801a      	strh	r2, [r3, #0]

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8000fae:	2380      	movs	r3, #128	@ 0x80
 8000fb0:	0159      	lsls	r1, r3, #5
 8000fb2:	23a0      	movs	r3, #160	@ 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fde5 	bl	8003b88 <HAL_GPIO_WritePin>
	TIM16_callback_active = NO;
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <TIM16_callback+0x1e0>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	0159      	lsls	r1, r3, #5
 8000fc8:	23a0      	movs	r3, #160	@ 0xa0
 8000fca:	05db      	lsls	r3, r3, #23
 8000fcc:	2201      	movs	r2, #1
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f002 fdda 	bl	8003b88 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <TIM16_callback+0x224>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	001a      	movs	r2, r3
 8000fda:	4917      	ldr	r1, [pc, #92]	@ (8001038 <TIM16_callback+0x228>)
 8000fdc:	4b17      	ldr	r3, [pc, #92]	@ (800103c <TIM16_callback+0x22c>)
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f001 fc14 	bl	800280c <HAL_ADC_Start_DMA>
	Global_Interrupt_Enable();
 8000fe4:	f000 fabe 	bl	8001564 <Global_Interrupt_Enable>
}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000571 	.word	0x20000571
 8000ff4:	40014400 	.word	0x40014400
 8000ff8:	20000572 	.word	0x20000572
 8000ffc:	200001c8 	.word	0x200001c8
 8001000:	20000567 	.word	0x20000567
 8001004:	08007804 	.word	0x08007804
 8001008:	20000574 	.word	0x20000574
 800100c:	2000010c 	.word	0x2000010c
 8001010:	20000558 	.word	0x20000558
 8001014:	2000055b 	.word	0x2000055b
 8001018:	2000055a 	.word	0x2000055a
 800101c:	2000054c 	.word	0x2000054c
 8001020:	08007404 	.word	0x08007404
 8001024:	20000564 	.word	0x20000564
 8001028:	08007004 	.word	0x08007004
 800102c:	000003ff 	.word	0x000003ff
 8001030:	20000550 	.word	0x20000550
 8001034:	08007810 	.word	0x08007810
 8001038:	20000568 	.word	0x20000568
 800103c:	20000028 	.word	0x20000028

08001040 <Multiply_Duty_By_Current_Depth_and_Divide_By_256>:

uint8_t Multiply_Duty_By_Current_Depth_and_Divide_By_256(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
	volatile uint32_t multiply_product = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]

	//Perform: (duty*current_depth) / 256
	multiply_product = duty * current_depth; //compiler should compile this as a hardware multiplication, but need to check
 800104a:	4b0b      	ldr	r3, [pc, #44]	@ (8001078 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	b29b      	uxth	r3, r3
 8001050:	001a      	movs	r2, r3
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x3c>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4353      	muls	r3, r2
 800105a:	607b      	str	r3, [r7, #4]
    duty = 1023 - (uint16_t)(multiply_product >> 8);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x40>)
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <Multiply_Duty_By_Current_Depth_and_Divide_By_256+0x38>)
 800106a:	801a      	strh	r2, [r3, #0]

    return 1;
 800106c:	2301      	movs	r3, #1
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	20000564 	.word	0x20000564
 800107c:	20000550 	.word	0x20000550
 8001080:	000003ff 	.word	0x000003ff

08001084 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	0018      	movs	r0, r3
 8001090:	f001 fc4a 	bl	8002928 <HAL_ADC_Stop_DMA>

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA[0]; //set ADC_Result to waveshape index value
 8001094:	210e      	movs	r1, #14
 8001096:	187b      	adds	r3, r7, r1
 8001098:	4a35      	ldr	r2, [pc, #212]	@ (8001170 <ADC_DMA_conversion_complete_callback+0xec>)
 800109a:	8812      	ldrh	r2, [r2, #0]
 800109c:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 800109e:	187b      	adds	r3, r7, r1
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	4a34      	ldr	r2, [pc, #208]	@ (8001174 <ADC_DMA_conversion_complete_callback+0xf0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d803      	bhi.n	80010b0 <ADC_DMA_conversion_complete_callback+0x2c>
		current_waveshape = TRIANGLE_MODE; //triangle wave
 80010a8:	4b33      	ldr	r3, [pc, #204]	@ (8001178 <ADC_DMA_conversion_complete_callback+0xf4>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	e017      	b.n	80010e0 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 80010b0:	230e      	movs	r3, #14
 80010b2:	18fb      	adds	r3, r7, r3
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	4a31      	ldr	r2, [pc, #196]	@ (800117c <ADC_DMA_conversion_complete_callback+0xf8>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d803      	bhi.n	80010c4 <ADC_DMA_conversion_complete_callback+0x40>
		current_waveshape = SINE_MODE; //sine wave
 80010bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001178 <ADC_DMA_conversion_complete_callback+0xf4>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	e00d      	b.n	80010e0 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 80010c4:	230e      	movs	r3, #14
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	881a      	ldrh	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	015b      	lsls	r3, r3, #5
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d203      	bcs.n	80010da <ADC_DMA_conversion_complete_callback+0x56>
		current_waveshape = SQUARE_MODE; //square wave
 80010d2:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <ADC_DMA_conversion_complete_callback+0xf4>)
 80010d4:	2202      	movs	r2, #2
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e002      	b.n	80010e0 <ADC_DMA_conversion_complete_callback+0x5c>
	}
	else{
		current_waveshape = SINE_MODE; //if error, return sine
 80010da:	4b27      	ldr	r3, [pc, #156]	@ (8001178 <ADC_DMA_conversion_complete_callback+0xf4>)
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
	}

	//GET SPEED
	current_speed = ADCResultsDMA[1] >> 2; //convert to 10-bit
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <ADC_DMA_conversion_complete_callback+0xec>)
 80010e2:	885b      	ldrh	r3, [r3, #2]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	089b      	lsrs	r3, r3, #2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <ADC_DMA_conversion_complete_callback+0xfc>)
 80010ec:	801a      	strh	r2, [r3, #0]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON
		current_depth = ADCResultsDMA[2] >> 4; //convert to 8-bit
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <ADC_DMA_conversion_complete_callback+0xec>)
 80010f0:	889b      	ldrh	r3, [r3, #4]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <ADC_DMA_conversion_complete_callback+0x100>)
 80010fa:	801a      	strh	r2, [r3, #0]
			current_symmetry = ADCResultsDMA[3] >> 2;

		#endif

		#if SYMMETRY_ADC_RESOLUTION == 8
			current_symmetry = ADCResultsDMA[3] >> 4;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001170 <ADC_DMA_conversion_complete_callback+0xec>)
 80010fe:	88db      	ldrh	r3, [r3, #6]
 8001100:	b29b      	uxth	r3, r3
 8001102:	091b      	lsrs	r3, r3, #4
 8001104:	b29b      	uxth	r3, r3
 8001106:	001a      	movs	r2, r3
 8001108:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <ADC_DMA_conversion_complete_callback+0x104>)
 800110a:	601a      	str	r2, [r3, #0]
		#endif

	#endif

	//after initial conversion is complete, set the conversion complete flag
	if(initial_ADC_conversion_complete == NO){
 800110c:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <ADC_DMA_conversion_complete_callback+0x108>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d102      	bne.n	800111c <ADC_DMA_conversion_complete_callback+0x98>
		initial_ADC_conversion_complete = YES;
 8001116:	4b1d      	ldr	r3, [pc, #116]	@ (800118c <ADC_DMA_conversion_complete_callback+0x108>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	0159      	lsls	r1, r3, #5
 8001120:	23a0      	movs	r3, #160	@ 0xa0
 8001122:	05db      	lsls	r3, r3, #23
 8001124:	2200      	movs	r2, #0
 8001126:	0018      	movs	r0, r3
 8001128:	f002 fd2e 	bl	8003b88 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 1);
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	0159      	lsls	r1, r3, #5
 8001130:	23a0      	movs	r3, #160	@ 0xa0
 8001132:	05db      	lsls	r3, r3, #23
 8001134:	2201      	movs	r2, #1
 8001136:	0018      	movs	r0, r3
 8001138:	f002 fd26 	bl	8003b88 <HAL_GPIO_WritePin>

	Process_TIM16_Raw_Start_Value_and_Raw_Prescaler();
 800113c:	f000 fa98 	bl	8001670 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	Process_TIM16_Final_Start_Value_and_Prescaler_Adjust();
 8001140:	f000 fb06 	bl	8001750 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>

	TIM16_final_start_value_locked = TIM16_final_start_value;
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <ADC_DMA_conversion_complete_callback+0x10c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	b29a      	uxth	r2, r3
 800114a:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <ADC_DMA_conversion_complete_callback+0x110>)
 800114c:	801a      	strh	r2, [r3, #0]
	TIM16_prescaler_divisors_final_index_locked = TIM16_prescaler_divisors_final_index;
 800114e:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <ADC_DMA_conversion_complete_callback+0x114>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	4b11      	ldr	r3, [pc, #68]	@ (800119c <ADC_DMA_conversion_complete_callback+0x118>)
 8001156:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(ISR_MEAS_GPIO_Port, ISR_MEAS_Pin, 0);
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	0159      	lsls	r1, r3, #5
 800115c:	23a0      	movs	r3, #160	@ 0xa0
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	2200      	movs	r2, #0
 8001162:	0018      	movs	r0, r3
 8001164:	f002 fd10 	bl	8003b88 <HAL_GPIO_WritePin>
}
 8001168:	46c0      	nop			@ (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	b004      	add	sp, #16
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000568 	.word	0x20000568
 8001174:	00000555 	.word	0x00000555
 8001178:	2000054c 	.word	0x2000054c
 800117c:	00000aaa 	.word	0x00000aaa
 8001180:	2000054e 	.word	0x2000054e
 8001184:	20000550 	.word	0x20000550
 8001188:	20000554 	.word	0x20000554
 800118c:	20000570 	.word	0x20000570
 8001190:	2000055c 	.word	0x2000055c
 8001194:	20000572 	.word	0x20000572
 8001198:	20000566 	.word	0x20000566
 800119c:	20000567 	.word	0x20000567

080011a0 <main>:

//INCLUDES
#include "system.h"

int main(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	System_Init();
 80011a4:	f7ff fe04 	bl	8000db0 <System_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <main+0x3c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	001a      	movs	r2, r3
 80011ae:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <main+0x40>)
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <main+0x44>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f001 fb2a 	bl	800280c <HAL_ADC_Start_DMA>

	//WAIT
	while(initial_ADC_conversion_complete == NO){}; //wait while first ADC conversion is ongoing
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <main+0x48>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0fa      	beq.n	80011ba <main+0x1a>

	HAL_ADC_Stop_DMA(&hadc1);
 80011c4:	4b07      	ldr	r3, [pc, #28]	@ (80011e4 <main+0x44>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f001 fbae 	bl	8002928 <HAL_ADC_Stop_DMA>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer();
 80011cc:	f000 f9da 	bl	8001584 <Start_PWM_Gen_Timer>
	Start_Freq_Gen_Timer();
 80011d0:	f000 f9f2 	bl	80015b8 <Start_Freq_Gen_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80011d4:	f000 f9c6 	bl	8001564 <Global_Interrupt_Enable>

	while (1)
 80011d8:	46c0      	nop			@ (mov r8, r8)
 80011da:	e7fd      	b.n	80011d8 <main+0x38>
 80011dc:	08007810 	.word	0x08007810
 80011e0:	20000568 	.word	0x20000568
 80011e4:	20000028 	.word	0x20000028
 80011e8:	20000570 	.word	0x20000570

080011ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <HAL_MspInit+0x44>)
 80011f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_MspInit+0x44>)
 80011f8:	2101      	movs	r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <HAL_MspInit+0x44>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	2201      	movs	r2, #1
 8001204:	4013      	ands	r3, r2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_MspInit+0x44>)
 800120c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <HAL_MspInit+0x44>)
 8001210:	2180      	movs	r1, #128	@ 0x80
 8001212:	0549      	lsls	r1, r1, #21
 8001214:	430a      	orrs	r2, r1
 8001216:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <HAL_MspInit+0x44>)
 800121a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800121c:	2380      	movs	r3, #128	@ 0x80
 800121e:	055b      	lsls	r3, r3, #21
 8001220:	4013      	ands	r3, r2
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08b      	sub	sp, #44	@ 0x2c
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	2414      	movs	r4, #20
 800123e:	193b      	adds	r3, r7, r4
 8001240:	0018      	movs	r0, r3
 8001242:	2314      	movs	r3, #20
 8001244:	001a      	movs	r2, r3
 8001246:	2100      	movs	r1, #0
 8001248:	f005 fea4 	bl	8006f94 <memset>
  if(hadc->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a2d      	ldr	r2, [pc, #180]	@ (8001308 <HAL_ADC_MspInit+0xd4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d154      	bne.n	8001300 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001256:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 8001258:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	0349      	lsls	r1, r1, #13
 8001260:	430a      	orrs	r2, r1
 8001262:	641a      	str	r2, [r3, #64]	@ 0x40
 8001264:	4b29      	ldr	r3, [pc, #164]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 8001266:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001268:	2380      	movs	r3, #128	@ 0x80
 800126a:	035b      	lsls	r3, r3, #13
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 8001278:	2101      	movs	r1, #1
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	@ 0x34
 800127e:	4b23      	ldr	r3, [pc, #140]	@ (800130c <HAL_ADC_MspInit+0xd8>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001282:	2201      	movs	r2, #1
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2233      	movs	r2, #51	@ 0x33
 800128e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2203      	movs	r2, #3
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	193b      	adds	r3, r7, r4
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129c:	193a      	adds	r2, r7, r4
 800129e:	23a0      	movs	r3, #160	@ 0xa0
 80012a0:	05db      	lsls	r3, r3, #23
 80012a2:	0011      	movs	r1, r2
 80012a4:	0018      	movs	r0, r3
 80012a6:	f002 fb0b 	bl	80038c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_ADC_MspInit+0xe0>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012b2:	2205      	movs	r2, #5
 80012b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b13      	ldr	r3, [pc, #76]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012c8:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012da:	2200      	movs	r2, #0
 80012dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012e6:	0018      	movs	r0, r3
 80012e8:	f002 f836 	bl	8003358 <HAL_DMA_Init>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 80012f0:	f7ff fd58 	bl	8000da4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80012fa:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_ADC_MspInit+0xdc>)
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001300:	46c0      	nop			@ (mov r8, r8)
 8001302:	46bd      	mov	sp, r7
 8001304:	b00b      	add	sp, #44	@ 0x2c
 8001306:	bd90      	pop	{r4, r7, pc}
 8001308:	40012400 	.word	0x40012400
 800130c:	40021000 	.word	0x40021000
 8001310:	200000b0 	.word	0x200000b0
 8001314:	40020008 	.word	0x40020008

08001318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a26      	ldr	r2, [pc, #152]	@ (80013c0 <HAL_TIM_Base_MspInit+0xa8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10e      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800132a:	4b26      	ldr	r3, [pc, #152]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 800132c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800132e:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 8001330:	2180      	movs	r1, #128	@ 0x80
 8001332:	0209      	lsls	r1, r1, #8
 8001334:	430a      	orrs	r2, r1
 8001336:	641a      	str	r2, [r3, #64]	@ 0x40
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 800133a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	4013      	ands	r3, r2
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001346:	e036      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a1e      	ldr	r2, [pc, #120]	@ (80013c8 <HAL_TIM_Base_MspInit+0xb0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d116      	bne.n	8001380 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 8001354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 8001358:	2180      	movs	r1, #128	@ 0x80
 800135a:	0289      	lsls	r1, r1, #10
 800135c:	430a      	orrs	r2, r1
 800135e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 8001362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001364:	2380      	movs	r3, #128	@ 0x80
 8001366:	029b      	lsls	r3, r3, #10
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2015      	movs	r0, #21
 8001374:	f001 ffbe 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001378:	2015      	movs	r0, #21
 800137a:	f001 ffd0 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 800137e:	e01a      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM17)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a11      	ldr	r2, [pc, #68]	@ (80013cc <HAL_TIM_Base_MspInit+0xb4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d115      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800138a:	4b0e      	ldr	r3, [pc, #56]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 800138c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 8001390:	2180      	movs	r1, #128	@ 0x80
 8001392:	02c9      	lsls	r1, r1, #11
 8001394:	430a      	orrs	r2, r1
 8001396:	641a      	str	r2, [r3, #64]	@ 0x40
 8001398:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_TIM_Base_MspInit+0xac>)
 800139a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800139c:	2380      	movs	r3, #128	@ 0x80
 800139e:	02db      	lsls	r3, r3, #11
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2016      	movs	r0, #22
 80013ac:	f001 ffa2 	bl	80032f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80013b0:	2016      	movs	r0, #22
 80013b2:	f001 ffb4 	bl	800331e <HAL_NVIC_EnableIRQ>
}
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b006      	add	sp, #24
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	40002000 	.word	0x40002000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40014400 	.word	0x40014400
 80013cc:	40014800 	.word	0x40014800

080013d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b089      	sub	sp, #36	@ 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	240c      	movs	r4, #12
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	0018      	movs	r0, r3
 80013de:	2314      	movs	r3, #20
 80013e0:	001a      	movs	r2, r3
 80013e2:	2100      	movs	r1, #0
 80013e4:	f005 fdd6 	bl	8006f94 <memset>
  if(htim->Instance==TIM14)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a14      	ldr	r2, [pc, #80]	@ (8001440 <HAL_TIM_MspPostInit+0x70>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d122      	bne.n	8001438 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <HAL_TIM_MspPostInit+0x74>)
 80013f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <HAL_TIM_MspPostInit+0x74>)
 80013f8:	2101      	movs	r1, #1
 80013fa:	430a      	orrs	r2, r1
 80013fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <HAL_TIM_MspPostInit+0x74>)
 8001400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001402:	2201      	movs	r2, #1
 8001404:	4013      	ands	r3, r2
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800140a:	0021      	movs	r1, r4
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2202      	movs	r2, #2
 8001416:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	187b      	adds	r3, r7, r1
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2204      	movs	r2, #4
 8001428:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142a:	187a      	adds	r2, r7, r1
 800142c:	23a0      	movs	r3, #160	@ 0xa0
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	0011      	movs	r1, r2
 8001432:	0018      	movs	r0, r3
 8001434:	f002 fa44 	bl	80038c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001438:	46c0      	nop			@ (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	b009      	add	sp, #36	@ 0x24
 800143e:	bd90      	pop	{r4, r7, pc}
 8001440:	40002000 	.word	0x40002000
 8001444:	40021000 	.word	0x40021000

08001448 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	@ 0x2c
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	2414      	movs	r4, #20
 8001452:	193b      	adds	r3, r7, r4
 8001454:	0018      	movs	r0, r3
 8001456:	2314      	movs	r3, #20
 8001458:	001a      	movs	r2, r3
 800145a:	2100      	movs	r1, #0
 800145c:	f005 fd9a 	bl	8006f94 <memset>
  if(huart->Instance==USART2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <HAL_UART_MspInit+0x8c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d130      	bne.n	80014cc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800146a:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 800146c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 8001470:	2180      	movs	r1, #128	@ 0x80
 8001472:	0289      	lsls	r1, r1, #10
 8001474:	430a      	orrs	r2, r1
 8001476:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001478:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 800147a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	029b      	lsls	r3, r3, #10
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 8001488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148a:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 800148c:	2101      	movs	r1, #1
 800148e:	430a      	orrs	r2, r1
 8001490:	635a      	str	r2, [r3, #52]	@ 0x34
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <HAL_UART_MspInit+0x90>)
 8001494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001496:	2201      	movs	r2, #1
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 800149e:	0021      	movs	r1, r4
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	187b      	adds	r3, r7, r1
 80014a8:	2202      	movs	r2, #2
 80014aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	187b      	adds	r3, r7, r1
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	187b      	adds	r3, r7, r1
 80014b4:	2200      	movs	r2, #0
 80014b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	2201      	movs	r2, #1
 80014bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	187a      	adds	r2, r7, r1
 80014c0:	23a0      	movs	r3, #160	@ 0xa0
 80014c2:	05db      	lsls	r3, r3, #23
 80014c4:	0011      	movs	r1, r2
 80014c6:	0018      	movs	r0, r3
 80014c8:	f002 f9fa 	bl	80038c0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014cc:	46c0      	nop			@ (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b00b      	add	sp, #44	@ 0x2c
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	46c0      	nop			@ (mov r8, r8)
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	46c0      	nop			@ (mov r8, r8)
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014f0:	46c0      	nop			@ (mov r8, r8)
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014fa:	46c0      	nop			@ (mov r8, r8)
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fd98 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001514:	4b03      	ldr	r3, [pc, #12]	@ (8001524 <DMA1_Channel1_IRQHandler+0x14>)
 8001516:	0018      	movs	r0, r3
 8001518:	f002 f890 	bl	800363c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	200000b0 	.word	0x200000b0

08001528 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5 and DMAMUX1 interrupts.
  */
void DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_5_DMAMUX1_OVR_IRQn 1 */
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <TIM16_IRQHandler+0x14>)
 800153a:	0018      	movs	r0, r3
 800153c:	f003 fc50 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001540:	46c0      	nop			@ (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	200001c8 	.word	0x200001c8

0800154c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <TIM17_IRQHandler+0x14>)
 8001552:	0018      	movs	r0, r3
 8001554:	f003 fc44 	bl	8004de0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001558:	46c0      	nop			@ (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	46c0      	nop			@ (mov r8, r8)
 8001560:	200003fc 	.word	0x200003fc

08001564 <Global_Interrupt_Enable>:
volatile uint16_t TIM16_final_start_value_locked = 0;
volatile uint8_t TIM16_prescaler_adjust_locked = 0;
volatile uint16_t prev_duty = 0;

//FUNCTION DEFINITIONS
uint8_t Global_Interrupt_Enable(void){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 8001568:	b662      	cpsie	i
}
 800156a:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	0018      	movs	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <Global_Interrupt_Disable>:

uint8_t Global_Interrupt_Disable(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001578:	b672      	cpsid	i
}
 800157a:	46c0      	nop			@ (mov r8, r8)

	__disable_irq();
	return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <Start_PWM_Gen_Timer>:

	return ok;
}

uint8_t Start_PWM_Gen_Timer(void)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
	uint8_t ok = Start_PWM_TIM(&htim14, TIM_CHANNEL_1); //start PWM
 800158a:	1dfc      	adds	r4, r7, #7
 800158c:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <Start_PWM_Gen_Timer+0x30>)
 800158e:	2100      	movs	r1, #0
 8001590:	0018      	movs	r0, r3
 8001592:	f000 f82b 	bl	80015ec <Start_PWM_TIM>
 8001596:	0003      	movs	r3, r0
 8001598:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800159a:	1dfb      	adds	r3, r7, #7
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <Start_PWM_Gen_Timer+0x22>

		Error_Handler();
 80015a2:	f7ff fbff 	bl	8000da4 <Error_Handler>
	}

	return ok;
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
}
 80015aa:	0018      	movs	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	b003      	add	sp, #12
 80015b0:	bd90      	pop	{r4, r7, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	2000010c 	.word	0x2000010c

080015b8 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80015be:	1dfc      	adds	r4, r7, #7
 80015c0:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <Start_Freq_Gen_Timer+0x30>)
 80015c2:	2100      	movs	r1, #0
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 f837 	bl	8001638 <Start_OC_TIM>
 80015ca:	0003      	movs	r3, r0
 80015cc:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80015ce:	1dfb      	adds	r3, r7, #7
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 80015d6:	f7ff fbe5 	bl	8000da4 <Error_Handler>
	}

	return ok;
 80015da:	1dfb      	adds	r3, r7, #7
 80015dc:	781b      	ldrb	r3, [r3, #0]
}
 80015de:	0018      	movs	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b003      	add	sp, #12
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	46c0      	nop			@ (mov r8, r8)
 80015e8:	200001c8 	.word	0x200001c8

080015ec <Start_PWM_TIM>:

uint8_t Start_PWM_TIM(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel){
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]

	uint8_t ok = 0;
 80015f6:	250f      	movs	r5, #15
 80015f8:	197b      	adds	r3, r7, r5
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
	ok = HAL_TIM_Base_Start(TIM);
 80015fe:	197c      	adds	r4, r7, r5
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	0018      	movs	r0, r3
 8001604:	f003 f854 	bl	80046b0 <HAL_TIM_Base_Start>
 8001608:	0003      	movs	r3, r0
 800160a:	7023      	strb	r3, [r4, #0]
	ok = HAL_TIM_PWM_Start(TIM, PWM_TIM_channel);
 800160c:	197c      	adds	r4, r7, r5
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	0011      	movs	r1, r2
 8001614:	0018      	movs	r0, r3
 8001616:	f003 fa97 	bl	8004b48 <HAL_TIM_PWM_Start>
 800161a:	0003      	movs	r3, r0
 800161c:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 800161e:	197b      	adds	r3, r7, r5
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <Start_PWM_TIM+0x3e>

		Error_Handler();
 8001626:	f7ff fbbd 	bl	8000da4 <Error_Handler>
	}

	return ok;
 800162a:	230f      	movs	r3, #15
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	781b      	ldrb	r3, [r3, #0]
}
 8001630:	0018      	movs	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	b004      	add	sp, #16
 8001636:	bdb0      	pop	{r4, r5, r7, pc}

08001638 <Start_OC_TIM>:

uint8_t Start_OC_TIM(TIM_HandleTypeDef *TIM, uint32_t OC_TIM_channel){
 8001638:	b5b0      	push	{r4, r5, r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]

	uint8_t ok = HAL_TIM_OC_Start_IT(TIM, OC_TIM_channel); //_IT variant of function
 8001642:	250f      	movs	r5, #15
 8001644:	197c      	adds	r4, r7, r5
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	0011      	movs	r1, r2
 800164c:	0018      	movs	r0, r3
 800164e:	f003 f8e9 	bl	8004824 <HAL_TIM_OC_Start_IT>
 8001652:	0003      	movs	r3, r0
 8001654:	7023      	strb	r3, [r4, #0]
	//means the timer will generate an interrupt on delay_elapsed (CNT = CCR) condition

	if(ok != HAL_OK){
 8001656:	197b      	adds	r3, r7, r5
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <Start_OC_TIM+0x2a>

		Error_Handler();
 800165e:	f7ff fba1 	bl	8000da4 <Error_Handler>
	}

	return ok;
 8001662:	230f      	movs	r3, #15
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
}
 8001668:	0018      	movs	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	b004      	add	sp, #16
 800166e:	bdb0      	pop	{r4, r5, r7, pc}

08001670 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:
	}

	return ok;
}

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(void){
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0

	uint32_t speed_control = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
	uint8_t how_many_128 = 0;
 800167a:	1cfb      	adds	r3, r7, #3
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]

    speed_control = current_speed * NUMBER_OF_FREQUENCY_STEPS;
 8001680:	4b1e      	ldr	r3, [pc, #120]	@ (80016fc <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x8c>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	b29b      	uxth	r3, r3
 8001686:	001a      	movs	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	015b      	lsls	r3, r3, #5
 800168c:	1a9b      	subs	r3, r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	189b      	adds	r3, r3, r2
 8001692:	009a      	lsls	r2, r3, #2
 8001694:	189b      	adds	r3, r3, r2
 8001696:	607b      	str	r3, [r7, #4]
    speed_control = speed_control >> 10;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0a9b      	lsrs	r3, r3, #10
 800169c:	607b      	str	r3, [r7, #4]

    //speed_control = (speed_adc_10_bit/1024)*883

        if(speed_control <= (127-12)){ //inequality is correct!
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2b73      	cmp	r3, #115	@ 0x73
 80016a2:	d809      	bhi.n	80016b8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x48>

            TIM16_raw_start_value = (uint8_t) speed_control + 12;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	330c      	adds	r3, #12
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x90>)
 80016ae:	801a      	strh	r2, [r3, #0]
            TIM16_base_prescaler_divisors_index = 1;
 80016b0:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x94>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	701a      	strb	r2, [r3, #0]
 80016b6:	e01c      	b.n	80016f2 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x82>
        }
        else{ 	//(speed_control > (127-12))

            uint16_t speed_control_subtracted;
            speed_control_subtracted = speed_control - (127-12);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	003b      	movs	r3, r7
 80016be:	3a73      	subs	r2, #115	@ 0x73
 80016c0:	801a      	strh	r2, [r3, #0]
            how_many_128 = (uint8_t)(speed_control_subtracted >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 80016c2:	003b      	movs	r3, r7
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	09db      	lsrs	r3, r3, #7
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	1cfb      	adds	r3, r7, #3
 80016cc:	701a      	strb	r2, [r3, #0]
            TIM16_raw_start_value = (uint8_t)(speed_control_subtracted - (uint16_t)(how_many_128 << 7)); //how_many_128*128, set TMR0
 80016ce:	003b      	movs	r3, r7
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	1cfb      	adds	r3, r7, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	01db      	lsls	r3, r3, #7
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	001a      	movs	r2, r3
 80016e2:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x90>)
 80016e4:	801a      	strh	r2, [r3, #0]
            //biggest how_many_128 for NUMBER_OF_FREQUENCY_STEPS == 600 is 3
            //biggest base_prescaler_divisors_index == 5 for NUMBER_OF_FREQUENCY_STEPS == 600
            TIM16_base_prescaler_divisors_index = (uint8_t)(how_many_128 + 2);
 80016e6:	1cfb      	adds	r3, r7, #3
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	3302      	adds	r3, #2
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler+0x94>)
 80016f0:	701a      	strb	r2, [r3, #0]
        }
    return 1;
 80016f2:	2301      	movs	r3, #1
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b002      	add	sp, #8
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000054e 	.word	0x2000054e
 8001700:	20000560 	.word	0x20000560
 8001704:	20000562 	.word	0x20000562

08001708 <Adjust_TIM16_Prescaler>:

uint8_t Adjust_TIM16_Prescaler(uint8_t TIM16_prescaler_adjust_arg){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	0002      	movs	r2, r0
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	701a      	strb	r2, [r3, #0]

    if(TIM16_prescaler_adjust_arg == MULTIPLY_BY_TWO){
 8001714:	1dfb      	adds	r3, r7, #7
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d107      	bne.n	800172c <Adjust_TIM16_Prescaler+0x24>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index - 1;
 800171c:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <Adjust_TIM16_Prescaler+0x40>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <Adjust_TIM16_Prescaler+0x44>)
 8001728:	701a      	strb	r2, [r3, #0]
 800172a:	e008      	b.n	800173e <Adjust_TIM16_Prescaler+0x36>
    }
    else if(TIM16_prescaler_adjust_arg == DO_NOTHING){
 800172c:	1dfb      	adds	r3, r7, #7
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d104      	bne.n	800173e <Adjust_TIM16_Prescaler+0x36>
    	TIM16_prescaler_divisors_final_index = TIM16_base_prescaler_divisors_index;
 8001734:	4b04      	ldr	r3, [pc, #16]	@ (8001748 <Adjust_TIM16_Prescaler+0x40>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b04      	ldr	r3, [pc, #16]	@ (800174c <Adjust_TIM16_Prescaler+0x44>)
 800173c:	701a      	strb	r2, [r3, #0]
    }
    return 1;
 800173e:	2301      	movs	r3, #1
}
 8001740:	0018      	movs	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	b002      	add	sp, #8
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000562 	.word	0x20000562
 800174c:	20000566 	.word	0x20000566

08001750 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust>:

uint8_t Process_TIM16_Final_Start_Value_and_Prescaler_Adjust(void){
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

    #if SYMMETRY_ON_OR_OFF == ON

		volatile enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001756:	1d7b      	adds	r3, r7, #5
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
		volatile enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]

		volatile uint8_t pot_rotation_corrected = 0;
 8001762:	1cfb      	adds	r3, r7, #3
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
		volatile uint8_t symmetry_status = CW;
 8001768:	1cbb      	adds	r3, r7, #2
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]

		if(current_symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 800176e:	4bb5      	ldr	r3, [pc, #724]	@ (8001a44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b7f      	cmp	r3, #127	@ 0x7f
 8001774:	d803      	bhi.n	800177e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2e>
			symmetry_status = CW;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e002      	b.n	8001784 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x34>
		}
		else{ //adc is 128-255
			symmetry_status = CCW;
 800177e:	1cbb      	adds	r3, r7, #2
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
		}

		if((current_waveshape == SINE_MODE) || (current_waveshape == TRIANGLE_MODE)){
 8001784:	4bb0      	ldr	r3, [pc, #704]	@ (8001a48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b01      	cmp	r3, #1
 800178c:	d004      	beq.n	8001798 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48>
 800178e:	4bae      	ldr	r3, [pc, #696]	@ (8001a48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d142      	bne.n	800181e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xce>

			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001798:	4bac      	ldr	r3, [pc, #688]	@ (8001a4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d104      	bne.n	80017ac <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c>
 80017a2:	4bab      	ldr	r3, [pc, #684]	@ (8001a50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x70>
 80017ac:	4ba7      	ldr	r3, [pc, #668]	@ (8001a4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d111      	bne.n	80017da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>
 80017b6:	4ba6      	ldr	r3, [pc, #664]	@ (8001a50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d10c      	bne.n	80017da <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x8a>

				if(symmetry_status == CW){
 80017c0:	1cbb      	adds	r3, r7, #2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x82>

					symmetry_type_for_halfcycle = LENGTHEN;
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
				if(symmetry_status == CW){
 80017d0:	e024      	b.n	800181c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				}
				else{

					symmetry_type_for_halfcycle = SHORTEN;
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
				if(symmetry_status == CW){
 80017d8:	e020      	b.n	800181c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xcc>
				}
			}
			else if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == SECOND_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == FIRST_QUADRANT)){
 80017da:	4b9c      	ldr	r3, [pc, #624]	@ (8001a4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d104      	bne.n	80017ee <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x9e>
 80017e4:	4b9a      	ldr	r3, [pc, #616]	@ (8001a50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d009      	beq.n	8001802 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xb2>
 80017ee:	4b97      	ldr	r3, [pc, #604]	@ (8001a4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d136      	bne.n	8001866 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
 80017f8:	4b95      	ldr	r3, [pc, #596]	@ (8001a50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x300>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d131      	bne.n	8001866 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>

				if(symmetry_status == CW){
 8001802:	1cbb      	adds	r3, r7, #2
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xc4>

					symmetry_type_for_halfcycle = SHORTEN;
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001812:	e028      	b.n	8001866 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
				}
				else{

					symmetry_type_for_halfcycle = LENGTHEN;
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 800181a:	e024      	b.n	8001866 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
 800181c:	e023      	b.n	8001866 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x116>
				}
			}
		}
		else if(current_waveshape == SQUARE_MODE){
 800181e:	4b8a      	ldr	r3, [pc, #552]	@ (8001a48 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f8>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d11f      	bne.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>

			if(current_halfcycle == FIRST_HALFCYCLE){
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2fc>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10c      	bne.n	800184c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xfc>

				if(symmetry_status == CW){
 8001832:	1cbb      	adds	r3, r7, #2
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d103      	bne.n	8001844 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0xf4>

					symmetry_type_for_halfcycle = LENGTHEN;
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
 8001842:	e011      	b.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
				else{

					symmetry_type_for_halfcycle = SHORTEN;
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e00d      	b.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
			}
			else{

				if(symmetry_status == CW){
 800184c:	1cbb      	adds	r3, r7, #2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x10e>

					symmetry_type_for_halfcycle = SHORTEN;
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	2200      	movs	r2, #0
 800185a:	701a      	strb	r2, [r3, #0]
 800185c:	e004      	b.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
				}
				else{

					symmetry_type_for_halfcycle = LENGTHEN;
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2201      	movs	r2, #1
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e000      	b.n	8001868 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x118>
			if((current_halfcycle == FIRST_HALFCYCLE && current_quadrant == FIRST_QUADRANT) || (current_halfcycle == SECOND_HALFCYCLE && current_quadrant == SECOND_QUADRANT)){
 8001866:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}

		if(symmetry_status == CW){
 8001868:	1cbb      	adds	r3, r7, #2
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d108      	bne.n	8001884 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x134>

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - current_symmetry;
 8001872:	4b74      	ldr	r3, [pc, #464]	@ (8001a44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	227f      	movs	r2, #127	@ 0x7f
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b2da      	uxtb	r2, r3
 800187e:	1cfb      	adds	r3, r7, #3
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e006      	b.n	8001892 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x142>
		}
		else{ //CCW

			pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - current_symmetry);
 8001884:	4b6f      	ldr	r3, [pc, #444]	@ (8001a44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2f4>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3b80      	subs	r3, #128	@ 0x80
 800188c:	b2da      	uxtb	r2, r3
 800188e:	1cfb      	adds	r3, r7, #3
 8001890:	701a      	strb	r2, [r3, #0]
		}

		//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - TIM16_raw_start_value;
 8001892:	4b70      	ldr	r3, [pc, #448]	@ (8001a54 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x304>)
 8001894:	881b      	ldrh	r3, [r3, #0]
 8001896:	b29a      	uxth	r2, r3
 8001898:	200a      	movs	r0, #10
 800189a:	183b      	adds	r3, r7, r0
 800189c:	2180      	movs	r1, #128	@ 0x80
 800189e:	0049      	lsls	r1, r1, #1
 80018a0:	1a8a      	subs	r2, r1, r2
 80018a2:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected;
 80018a4:	1cfb      	adds	r3, r7, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	0019      	movs	r1, r3
 80018ac:	2408      	movs	r4, #8
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	183a      	adds	r2, r7, r0
 80018b2:	8812      	ldrh	r2, [r2, #0]
 80018b4:	434a      	muls	r2, r1
 80018b6:	801a      	strh	r2, [r3, #0]

		uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 80018b8:	1dbb      	adds	r3, r7, #6
 80018ba:	193a      	adds	r2, r7, r4
 80018bc:	8812      	ldrh	r2, [r2, #0]
 80018be:	0a12      	lsrs	r2, r2, #8
 80018c0:	801a      	strh	r2, [r3, #0]


		//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
		uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 80018c2:	230e      	movs	r3, #14
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	1839      	adds	r1, r7, r0
 80018c8:	1dba      	adds	r2, r7, #6
 80018ca:	8809      	ldrh	r1, [r1, #0]
 80018cc:	8812      	ldrh	r2, [r2, #0]
 80018ce:	1a8a      	subs	r2, r1, r2
 80018d0:	801a      	strh	r2, [r3, #0]

		uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 80018d2:	250c      	movs	r5, #12
 80018d4:	197b      	adds	r3, r7, r5
 80018d6:	1839      	adds	r1, r7, r0
 80018d8:	1dba      	adds	r2, r7, #6
 80018da:	8809      	ldrh	r1, [r1, #0]
 80018dc:	8812      	ldrh	r2, [r2, #0]
 80018de:	188a      	adds	r2, r1, r2
 80018e0:	801a      	strh	r2, [r3, #0]


		if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 80018e2:	197b      	adds	r3, r7, r5
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	2bff      	cmp	r3, #255	@ 0xff
 80018e8:	d90f      	bls.n	800190a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>
 80018ea:	197b      	adds	r3, r7, r5
 80018ec:	881a      	ldrh	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	@ 0x80
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d000      	beq.n	80018f8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1a8>
 80018f6:	e0b1      	b.n	8001a5c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30c>
 80018f8:	193b      	adds	r3, r7, r4
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	2108      	movs	r1, #8
 80018fe:	0018      	movs	r0, r3
 8001900:	f000 faec 	bl	8001edc <unsigned_bitwise_modulo>
 8001904:	1e03      	subs	r3, r0, #0
 8001906:	d000      	beq.n	800190a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1ba>
 8001908:	e0a8      	b.n	8001a5c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x30c>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800190a:	2308      	movs	r3, #8
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	881b      	ldrh	r3, [r3, #0]
 8001910:	2108      	movs	r1, #8
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fae2 	bl	8001edc <unsigned_bitwise_modulo>
 8001918:	0003      	movs	r3, r0
 800191a:	2b80      	cmp	r3, #128	@ 0x80
 800191c:	d114      	bne.n	8001948 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f8>
				//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

				//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
				//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

				if(symmetry_type_for_halfcycle == SHORTEN){
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d103      	bne.n	8001930 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1e0>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 8001928:	1d7b      	adds	r3, r7, #5
 800192a:	2202      	movs	r2, #2
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e007      	b.n	8001940 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f0>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b01      	cmp	r3, #1
 8001938:	d102      	bne.n	8001940 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x1f0>

					TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800193a:	1d7b      	adds	r3, r7, #5
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001940:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001946:	e202      	b.n	8001d4e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001948:	2308      	movs	r3, #8
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	2108      	movs	r1, #8
 8001950:	0018      	movs	r0, r3
 8001952:	f000 fac3 	bl	8001edc <unsigned_bitwise_modulo>
 8001956:	1e03      	subs	r3, r0, #0
 8001958:	d11e      	bne.n	8001998 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x248>

				//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 800195a:	220e      	movs	r2, #14
 800195c:	18bb      	adds	r3, r7, r2
 800195e:	18ba      	adds	r2, r7, r2
 8001960:	8812      	ldrh	r2, [r2, #0]
 8001962:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001964:	220c      	movs	r2, #12
 8001966:	18bb      	adds	r3, r7, r2
 8001968:	18ba      	adds	r2, r7, r2
 800196a:	8812      	ldrh	r2, [r2, #0]
 800196c:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d103      	bne.n	8001980 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x230>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001978:	1d7b      	adds	r3, r7, #5
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x240>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001980:	1d3b      	adds	r3, r7, #4
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	d102      	bne.n	8001990 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x240>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800198a:	1d7b      	adds	r3, r7, #5
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001990:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001996:	e1da      	b.n	8001d4e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001998:	2308      	movs	r3, #8
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	881b      	ldrh	r3, [r3, #0]
 800199e:	2108      	movs	r1, #8
 80019a0:	0018      	movs	r0, r3
 80019a2:	f000 fa9b 	bl	8001edc <unsigned_bitwise_modulo>
 80019a6:	0003      	movs	r3, r0
 80019a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80019aa:	d81e      	bhi.n	80019ea <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x29a>

				//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

				manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 80019ac:	220e      	movs	r2, #14
 80019ae:	18bb      	adds	r3, r7, r2
 80019b0:	18ba      	adds	r2, r7, r2
 80019b2:	8812      	ldrh	r2, [r2, #0]
 80019b4:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80019b6:	220c      	movs	r2, #12
 80019b8:	18bb      	adds	r3, r7, r2
 80019ba:	18ba      	adds	r2, r7, r2
 80019bc:	8812      	ldrh	r2, [r2, #0]
 80019be:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d103      	bne.n	80019d2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x282>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019ca:	1d7b      	adds	r3, r7, #5
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
 80019d0:	e007      	b.n	80019e2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d102      	bne.n	80019e2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x292>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80019dc:	1d7b      	adds	r3, r7, #5
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80019e8:	e1b1      	b.n	8001d4e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 80019ea:	2308      	movs	r3, #8
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	2108      	movs	r1, #8
 80019f2:	0018      	movs	r0, r3
 80019f4:	f000 fa72 	bl	8001edc <unsigned_bitwise_modulo>
 80019f8:	0003      	movs	r3, r0
 80019fa:	2b80      	cmp	r3, #128	@ 0x80
 80019fc:	d800      	bhi.n	8001a00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2b0>
 80019fe:	e1a6      	b.n	8001d4e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>

				//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001a00:	220e      	movs	r2, #14
 8001a02:	18bb      	adds	r3, r7, r2
 8001a04:	18ba      	adds	r2, r7, r2
 8001a06:	8812      	ldrh	r2, [r2, #0]
 8001a08:	3a01      	subs	r2, #1
 8001a0a:	801a      	strh	r2, [r3, #0]
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001a0c:	220c      	movs	r2, #12
 8001a0e:	18bb      	adds	r3, r7, r2
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	8812      	ldrh	r2, [r2, #0]
 8001a14:	3201      	adds	r2, #1
 8001a16:	801a      	strh	r2, [r3, #0]

				if(symmetry_type_for_halfcycle == SHORTEN){
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2da>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001a22:	1d7b      	adds	r3, r7, #5
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e007      	b.n	8001a3a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ea>
				}
				else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d102      	bne.n	8001a3a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x2ea>
					TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001a34:	1d7b      	adds	r3, r7, #5
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
				}
				TIM16_prescaler_adjust = DO_NOTHING;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	@ (8001a58 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x308>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	701a      	strb	r2, [r3, #0]
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001a40:	e185      	b.n	8001d4e <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5fe>
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	20000554 	.word	0x20000554
 8001a48:	2000054c 	.word	0x2000054c
 8001a4c:	2000055a 	.word	0x2000055a
 8001a50:	2000055b 	.word	0x2000055b
 8001a54:	20000560 	.word	0x20000560
 8001a58:	2000055e 	.word	0x2000055e
			}
		}

		else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 8001a5c:	210c      	movs	r1, #12
 8001a5e:	187b      	adds	r3, r7, r1
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	2380      	movs	r3, #128	@ 0x80
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d810      	bhi.n	8001a8c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
 8001a6a:	187b      	adds	r3, r7, r1
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d000      	beq.n	8001a78 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x328>
 8001a76:	e16b      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
 8001a78:	2308      	movs	r3, #8
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	2108      	movs	r1, #8
 8001a80:	0018      	movs	r0, r3
 8001a82:	f000 fa2b 	bl	8001edc <unsigned_bitwise_modulo>
 8001a86:	1e03      	subs	r3, r0, #0
 8001a88:	d100      	bne.n	8001a8c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x33c>
 8001a8a:	e161      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>

			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001a8c:	2308      	movs	r3, #8
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	2108      	movs	r1, #8
 8001a94:	0018      	movs	r0, r3
 8001a96:	f000 fa21 	bl	8001edc <unsigned_bitwise_modulo>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	2b80      	cmp	r3, #128	@ 0x80
 8001a9e:	d151      	bne.n	8001b44 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3f4>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001aa0:	220e      	movs	r2, #14
 8001aa2:	18bb      	adds	r3, r7, r2
 8001aa4:	18ba      	adds	r2, r7, r2
 8001aa6:	8812      	ldrh	r2, [r2, #0]
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001aac:	210c      	movs	r1, #12
 8001aae:	187b      	adds	r3, r7, r1
 8001ab0:	187a      	adds	r2, r7, r1
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	3201      	adds	r2, #1
 8001ab6:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001ab8:	000c      	movs	r4, r1
 8001aba:	187b      	adds	r3, r7, r1
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	2101      	movs	r1, #1
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f000 fa0b 	bl	8001edc <unsigned_bitwise_modulo>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d11d      	bne.n	8001b06 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3b6>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	193a      	adds	r2, r7, r4
 8001ace:	8812      	ldrh	r2, [r2, #0]
 8001ad0:	0852      	lsrs	r2, r2, #1
 8001ad2:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x39c>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001ade:	1d7b      	adds	r3, r7, #5
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001ae4:	4bc6      	ldr	r3, [pc, #792]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e131      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d000      	beq.n	8001af8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3a8>
 8001af6:	e12b      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001af8:	1d7b      	adds	r3, r7, #5
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001afe:	4bc0      	ldr	r3, [pc, #768]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e124      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001b06:	220c      	movs	r2, #12
 8001b08:	18bb      	adds	r3, r7, r2
 8001b0a:	18ba      	adds	r2, r7, r2
 8001b0c:	8812      	ldrh	r2, [r2, #0]
 8001b0e:	0852      	lsrs	r2, r2, #1
 8001b10:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d106      	bne.n	8001b2a <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3da>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b1c:	1d7b      	adds	r3, r7, #5
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001b22:	4bb7      	ldr	r3, [pc, #732]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e112      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d000      	beq.n	8001b36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x3e6>
 8001b34:	e10c      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001b36:	1d7b      	adds	r3, r7, #5
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001b3c:	4bb0      	ldr	r3, [pc, #704]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
 8001b42:	e105      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 8001b44:	2308      	movs	r3, #8
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	881b      	ldrh	r3, [r3, #0]
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f000 f9c5 	bl	8001edc <unsigned_bitwise_modulo>
 8001b52:	1e03      	subs	r3, r0, #0
 8001b54:	d14a      	bne.n	8001bec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x49c>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001b56:	220e      	movs	r2, #14
 8001b58:	18bb      	adds	r3, r7, r2
 8001b5a:	18ba      	adds	r2, r7, r2
 8001b5c:	8812      	ldrh	r2, [r2, #0]
 8001b5e:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001b60:	240c      	movs	r4, #12
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	2101      	movs	r1, #1
 8001b68:	0018      	movs	r0, r3
 8001b6a:	f000 f9b7 	bl	8001edc <unsigned_bitwise_modulo>
 8001b6e:	1e03      	subs	r3, r0, #0
 8001b70:	d11d      	bne.n	8001bae <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x45e>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001b72:	193b      	adds	r3, r7, r4
 8001b74:	193a      	adds	r2, r7, r4
 8001b76:	8812      	ldrh	r2, [r2, #0]
 8001b78:	0852      	lsrs	r2, r2, #1
 8001b7a:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x444>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001b86:	1d7b      	adds	r3, r7, #5
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
 8001b92:	e0dd      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d000      	beq.n	8001ba0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x450>
 8001b9e:	e0d7      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001ba0:	1d7b      	adds	r3, r7, #5
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001ba6:	4b96      	ldr	r3, [pc, #600]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	e0d0      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001bae:	220c      	movs	r2, #12
 8001bb0:	18bb      	adds	r3, r7, r2
 8001bb2:	18ba      	adds	r2, r7, r2
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	0852      	lsrs	r2, r2, #1
 8001bb8:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d106      	bne.n	8001bd2 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x482>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001bc4:	1d7b      	adds	r3, r7, #5
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001bca:	4b8d      	ldr	r3, [pc, #564]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e0be      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d000      	beq.n	8001bde <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x48e>
 8001bdc:	e0b8      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001bde:	1d7b      	adds	r3, r7, #5
 8001be0:	2201      	movs	r2, #1
 8001be2:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001be4:	4b86      	ldr	r3, [pc, #536]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	e0b1      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8001bec:	2308      	movs	r3, #8
 8001bee:	18fb      	adds	r3, r7, r3
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f000 f971 	bl	8001edc <unsigned_bitwise_modulo>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8001bfe:	d84d      	bhi.n	8001c9c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x54c>

				manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8001c00:	220e      	movs	r2, #14
 8001c02:	18bb      	adds	r3, r7, r2
 8001c04:	18ba      	adds	r2, r7, r2
 8001c06:	8812      	ldrh	r2, [r2, #0]
 8001c08:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8001c0a:	240c      	movs	r4, #12
 8001c0c:	193b      	adds	r3, r7, r4
 8001c0e:	193a      	adds	r2, r7, r4
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001c14:	193b      	adds	r3, r7, r4
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 f95e 	bl	8001edc <unsigned_bitwise_modulo>
 8001c20:	1e03      	subs	r3, r0, #0
 8001c22:	d11d      	bne.n	8001c60 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x510>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	193a      	adds	r2, r7, r4
 8001c28:	8812      	ldrh	r2, [r2, #0]
 8001c2a:	0852      	lsrs	r2, r2, #1
 8001c2c:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x4f6>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c38:	1d7b      	adds	r3, r7, #5
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001c3e:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e084      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d000      	beq.n	8001c52 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x502>
 8001c50:	e07e      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c52:	1d7b      	adds	r3, r7, #5
 8001c54:	2200      	movs	r2, #0
 8001c56:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c58:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e077      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001c60:	220c      	movs	r2, #12
 8001c62:	18bb      	adds	r3, r7, r2
 8001c64:	18ba      	adds	r2, r7, r2
 8001c66:	8812      	ldrh	r2, [r2, #0]
 8001c68:	0852      	lsrs	r2, r2, #1
 8001c6a:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x534>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001c76:	1d7b      	adds	r3, r7, #5
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001c7c:	4b60      	ldr	r3, [pc, #384]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	e065      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d160      	bne.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001c8e:	1d7b      	adds	r3, r7, #5
 8001c90:	2201      	movs	r2, #1
 8001c92:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e059      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
			}
			else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 8001c9c:	2308      	movs	r3, #8
 8001c9e:	18fb      	adds	r3, r7, r3
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 f919 	bl	8001edc <unsigned_bitwise_modulo>
 8001caa:	0003      	movs	r3, r0
 8001cac:	2b80      	cmp	r3, #128	@ 0x80
 8001cae:	d94f      	bls.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>

				manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8001cb0:	220e      	movs	r2, #14
 8001cb2:	18bb      	adds	r3, r7, r2
 8001cb4:	18ba      	adds	r2, r7, r2
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	801a      	strh	r2, [r3, #0]
				//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
				manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 8001cbc:	240c      	movs	r4, #12
 8001cbe:	193b      	adds	r3, r7, r4
 8001cc0:	193a      	adds	r2, r7, r4
 8001cc2:	8812      	ldrh	r2, [r2, #0]
 8001cc4:	3201      	adds	r2, #1
 8001cc6:	801a      	strh	r2, [r3, #0]

				if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8001cc8:	193b      	adds	r3, r7, r4
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 f904 	bl	8001edc <unsigned_bitwise_modulo>
 8001cd4:	1e03      	subs	r3, r0, #0
 8001cd6:	d11c      	bne.n	8001d12 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5c2>

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001cd8:	193b      	adds	r3, r7, r4
 8001cda:	193a      	adds	r2, r7, r4
 8001cdc:	8812      	ldrh	r2, [r2, #0]
 8001cde:	0852      	lsrs	r2, r2, #1
 8001ce0:	801a      	strh	r2, [r3, #0]
					//DO NOT OSCILLATE BETWEEN VALUES //DONE
					//prescaler during lengthened halfperiod should be set to half //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5aa>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001cec:	1d7b      	adds	r3, r7, #5
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e02a      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d125      	bne.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d04:	1d7b      	adds	r3, r7, #5
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e01e      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
				}
				else{

					manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8001d12:	220c      	movs	r2, #12
 8001d14:	18bb      	adds	r3, r7, r2
 8001d16:	18ba      	adds	r2, r7, r2
 8001d18:	8812      	ldrh	r2, [r2, #0]
 8001d1a:	0852      	lsrs	r2, r2, #1
 8001d1c:	801a      	strh	r2, [r3, #0]
					//prescaler during lengthened halfperiod should be set to half //DONE
					//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d106      	bne.n	8001d36 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x5e6>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8001d28:	1d7b      	adds	r3, r7, #5
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = DO_NOTHING;
 8001d2e:	4b34      	ldr	r3, [pc, #208]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
 8001d34:	e00c      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8001d40:	1d7b      	adds	r3, r7, #5
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
						TIM16_prescaler_adjust = MULTIPLY_BY_TWO;
 8001d46:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b0>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e000      	b.n	8001d50 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x600>
			if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8001d4e:	46c0      	nop			@ (mov r8, r8)
		}

	//DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	//NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	//ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	if(symmetry_type_for_halfcycle == SHORTEN){
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d158      	bne.n	8001e0c <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6bc>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001d5a:	1d7b      	adds	r3, r7, #5
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x628>

			TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001d64:	230e      	movs	r3, #14
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	0052      	lsls	r2, r2, #1
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	e09f      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001d78:	1d7b      	adds	r3, r7, #5
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d11b      	bne.n	8001dba <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x66a>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b8>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2101      	movs	r1, #1
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f8a6 	bl	8001edc <unsigned_bitwise_modulo>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d109      	bne.n	8001da8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x658>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001d94:	230e      	movs	r3, #14
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	2280      	movs	r2, #128	@ 0x80
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	e087      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten - 1;
 8001da8:	230e      	movs	r3, #14
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	22ff      	movs	r2, #255	@ 0xff
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8001db6:	801a      	strh	r2, [r3, #0]
 8001db8:	e07e      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001dba:	1d7b      	adds	r3, r7, #5
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d000      	beq.n	8001dc6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x676>
 8001dc4:	e078      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001dc6:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b8>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	2101      	movs	r1, #1
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f884 	bl	8001edc <unsigned_bitwise_modulo>
 8001dd4:	1e03      	subs	r3, r0, #0
 8001dd6:	d109      	bne.n	8001dec <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x69c>

				TIM16_final_start_value = 256 - manipulated_period_shorten;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	0052      	lsls	r2, r2, #1
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8001de8:	801a      	strh	r2, [r3, #0]
 8001dea:	e065      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_shorten + 1;
 8001dec:	230e      	movs	r3, #14
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	32ff      	adds	r2, #255	@ 0xff
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	4b02      	ldr	r3, [pc, #8]	@ (8001e04 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6b4>)
 8001dfc:	801a      	strh	r2, [r3, #0]
 8001dfe:	e05b      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
 8001e00:	2000055e 	.word	0x2000055e
 8001e04:	2000055c 	.word	0x2000055c
 8001e08:	20000558 	.word	0x20000558
			}
		}
	}
	else if(symmetry_type_for_halfcycle == LENGTHEN){
 8001e0c:	1d3b      	adds	r3, r7, #4
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d150      	bne.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

		if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 8001e16:	1d7b      	adds	r3, r7, #5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d109      	bne.n	8001e34 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x6e4>

			TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001e20:	230c      	movs	r3, #12
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	2280      	movs	r2, #128	@ 0x80
 8001e28:	0052      	lsls	r2, r2, #1
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	4b28      	ldr	r3, [pc, #160]	@ (8001ed0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 8001e30:	801a      	strh	r2, [r3, #0]
 8001e32:	e041      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8001e34:	1d7b      	adds	r3, r7, #5
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d11b      	bne.n	8001e76 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x726>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001e3e:	4b25      	ldr	r3, [pc, #148]	@ (8001ed4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x784>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2101      	movs	r1, #1
 8001e46:	0018      	movs	r0, r3
 8001e48:	f000 f848 	bl	8001edc <unsigned_bitwise_modulo>
 8001e4c:	1e03      	subs	r3, r0, #0
 8001e4e:	d109      	bne.n	8001e64 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x714>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001e50:	230c      	movs	r3, #12
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2280      	movs	r2, #128	@ 0x80
 8001e58:	0052      	lsls	r2, r2, #1
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	e029      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen - 1;
 8001e64:	230c      	movs	r3, #12
 8001e66:	18fb      	adds	r3, r7, r3
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	22ff      	movs	r2, #255	@ 0xff
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	e020      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
		}
		else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 8001e76:	1d7b      	adds	r3, r7, #5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d11b      	bne.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>

			if(unsigned_bitwise_modulo(current_index, 1) == 0){ //if current index is even
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x784>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2101      	movs	r1, #1
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f000 f827 	bl	8001edc <unsigned_bitwise_modulo>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d109      	bne.n	8001ea6 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x756>

				TIM16_final_start_value = 256 - manipulated_period_lengthen;
 8001e92:	230c      	movs	r3, #12
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	2280      	movs	r2, #128	@ 0x80
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 8001ea2:	801a      	strh	r2, [r3, #0]
 8001ea4:	e008      	b.n	8001eb8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x768>
			}
			else{ //if current index is odd

				TIM16_final_start_value = 256 - manipulated_period_lengthen + 1;
 8001ea6:	230c      	movs	r3, #12
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	2202      	movs	r2, #2
 8001eae:	32ff      	adds	r2, #255	@ 0xff
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x780>)
 8001eb6:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
 8001eb8:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <Process_TIM16_Final_Start_Value_and_Prescaler_Adjust+0x788>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff fc22 	bl	8001708 <Adjust_TIM16_Prescaler>
        TIM16_final_start_value = TIM16_raw_start_value;
        TIM16_prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(TIM16_prescaler_adjust);
    #endif

    return 1;
 8001ec4:	2301      	movs	r3, #1
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b004      	add	sp, #16
 8001ecc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ece:	46c0      	nop			@ (mov r8, r8)
 8001ed0:	2000055c 	.word	0x2000055c
 8001ed4:	20000558 	.word	0x20000558
 8001ed8:	2000055e 	.word	0x2000055e

08001edc <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	000a      	movs	r2, r1
 8001ee6:	1cfb      	adds	r3, r7, #3
 8001ee8:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 8001eea:	1cfb      	adds	r3, r7, #3
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4013      	ands	r3, r2
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	46c0      	nop			@ (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f10:	480d      	ldr	r0, [pc, #52]	@ (8001f48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f12:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f14:	f7ff fff6 	bl	8001f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480c      	ldr	r0, [pc, #48]	@ (8001f4c <LoopForever+0x6>)
  ldr r1, =_edata
 8001f1a:	490d      	ldr	r1, [pc, #52]	@ (8001f50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f54 <LoopForever+0xe>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f30:	4c0a      	ldr	r4, [pc, #40]	@ (8001f5c <LoopForever+0x16>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f3e:	f005 f831 	bl	8006fa4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f42:	f7ff f92d 	bl	80011a0 <main>

08001f46 <LoopForever>:

LoopForever:
  b LoopForever
 8001f46:	e7fe      	b.n	8001f46 <LoopForever>
  ldr   r0, =_estack
 8001f48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f54:	08007a18 	.word	0x08007a18
  ldr r2, =_sbss
 8001f58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f5c:	2000057c 	.word	0x2000057c

08001f60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f60:	e7fe      	b.n	8001f60 <ADC1_IRQHandler>
	...

08001f64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f6a:	1dfb      	adds	r3, r7, #7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_Init+0x3c>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <HAL_Init+0x3c>)
 8001f76:	2180      	movs	r1, #128	@ 0x80
 8001f78:	0049      	lsls	r1, r1, #1
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f810 	bl	8001fa4 <HAL_InitTick>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d003      	beq.n	8001f90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f88:	1dfb      	adds	r3, r7, #7
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e001      	b.n	8001f94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff f92c 	bl	80011ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f94:	1dfb      	adds	r3, r7, #7
 8001f96:	781b      	ldrb	r3, [r3, #0]
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <HAL_InitTick+0x88>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02b      	beq.n	8002014 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002030 <HAL_InitTick+0x8c>)
 8001fbe:	681c      	ldr	r4, [r3, #0]
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <HAL_InitTick+0x88>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	0019      	movs	r1, r3
 8001fc6:	23fa      	movs	r3, #250	@ 0xfa
 8001fc8:	0098      	lsls	r0, r3, #2
 8001fca:	f7fe f89b 	bl	8000104 <__udivsi3>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	0020      	movs	r0, r4
 8001fd4:	f7fe f896 	bl	8000104 <__udivsi3>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f001 f9af 	bl	800333e <HAL_SYSTICK_Config>
 8001fe0:	1e03      	subs	r3, r0, #0
 8001fe2:	d112      	bne.n	800200a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d80a      	bhi.n	8002000 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	2301      	movs	r3, #1
 8001fee:	425b      	negs	r3, r3
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f001 f97e 	bl	80032f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8002034 <HAL_InitTick+0x90>)
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	601a      	str	r2, [r3, #0]
 8001ffe:	e00d      	b.n	800201c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002000:	230f      	movs	r3, #15
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e008      	b.n	800201c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800200a:	230f      	movs	r3, #15
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	e003      	b.n	800201c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002014:	230f      	movs	r3, #15
 8002016:	18fb      	adds	r3, r7, r3
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800201c:	230f      	movs	r3, #15
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	781b      	ldrb	r3, [r3, #0]
}
 8002022:	0018      	movs	r0, r3
 8002024:	46bd      	mov	sp, r7
 8002026:	b005      	add	sp, #20
 8002028:	bd90      	pop	{r4, r7, pc}
 800202a:	46c0      	nop			@ (mov r8, r8)
 800202c:	20000008 	.word	0x20000008
 8002030:	20000000 	.word	0x20000000
 8002034:	20000004 	.word	0x20000004

08002038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_IncTick+0x1c>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	001a      	movs	r2, r3
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_IncTick+0x20>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	18d2      	adds	r2, r2, r3
 8002048:	4b03      	ldr	r3, [pc, #12]	@ (8002058 <HAL_IncTick+0x20>)
 800204a:	601a      	str	r2, [r3, #0]
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	46c0      	nop			@ (mov r8, r8)
 8002054:	20000008 	.word	0x20000008
 8002058:	20000578 	.word	0x20000578

0800205c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b02      	ldr	r3, [pc, #8]	@ (800206c <HAL_GetTick+0x10>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	0018      	movs	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	20000578 	.word	0x20000578

08002070 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002080:	401a      	ands	r2, r3
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	601a      	str	r2, [r3, #0]
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			@ (mov r8, r8)
 8002094:	fe3fffff 	.word	0xfe3fffff

08002098 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	23e0      	movs	r3, #224	@ 0xe0
 80020a6:	045b      	lsls	r3, r3, #17
 80020a8:	4013      	ands	r3, r2
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b002      	add	sp, #8
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b084      	sub	sp, #16
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	2104      	movs	r1, #4
 80020c6:	400a      	ands	r2, r1
 80020c8:	2107      	movs	r1, #7
 80020ca:	4091      	lsls	r1, r2
 80020cc:	000a      	movs	r2, r1
 80020ce:	43d2      	mvns	r2, r2
 80020d0:	401a      	ands	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	2104      	movs	r1, #4
 80020d6:	400b      	ands	r3, r1
 80020d8:	6879      	ldr	r1, [r7, #4]
 80020da:	4099      	lsls	r1, r3
 80020dc:	000b      	movs	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80020e4:	46c0      	nop			@ (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b004      	add	sp, #16
 80020ea:	bd80      	pop	{r7, pc}

080020ec <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	2104      	movs	r1, #4
 80020fe:	400a      	ands	r2, r1
 8002100:	2107      	movs	r1, #7
 8002102:	4091      	lsls	r1, r2
 8002104:	000a      	movs	r2, r1
 8002106:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	2104      	movs	r1, #4
 800210c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800210e:	40da      	lsrs	r2, r3
 8002110:	0013      	movs	r3, r2
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b002      	add	sp, #8
 8002118:	bd80      	pop	{r7, pc}

0800211a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	23c0      	movs	r3, #192	@ 0xc0
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4013      	ands	r3, r2
 800212c:	d101      	bne.n	8002132 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	68ba      	ldr	r2, [r7, #8]
 800214e:	211f      	movs	r1, #31
 8002150:	400a      	ands	r2, r1
 8002152:	210f      	movs	r1, #15
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	43d2      	mvns	r2, r2
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	210f      	movs	r1, #15
 8002162:	4019      	ands	r1, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	201f      	movs	r0, #31
 8002168:	4003      	ands	r3, r0
 800216a:	4099      	lsls	r1, r3
 800216c:	000b      	movs	r3, r1
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b004      	add	sp, #16
 800217a:	bd80      	pop	{r7, pc}

0800217c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	035b      	lsls	r3, r3, #13
 800218e:	0b5b      	lsrs	r3, r3, #13
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002196:	46c0      	nop			@ (mov r8, r8)
 8002198:	46bd      	mov	sp, r7
 800219a:	b002      	add	sp, #8
 800219c:	bd80      	pop	{r7, pc}

0800219e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	0352      	lsls	r2, r2, #13
 80021b0:	0b52      	lsrs	r2, r2, #13
 80021b2:	43d2      	mvns	r2, r2
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b002      	add	sp, #8
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	0212      	lsls	r2, r2, #8
 80021d8:	43d2      	mvns	r2, r2
 80021da:	401a      	ands	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	400b      	ands	r3, r1
 80021e4:	4904      	ldr	r1, [pc, #16]	@ (80021f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80021e6:	400b      	ands	r3, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80021ee:	46c0      	nop			@ (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	46c0      	nop			@ (mov r8, r8)
 80021f8:	07ffff00 	.word	0x07ffff00

080021fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	4a05      	ldr	r2, [pc, #20]	@ (8002220 <LL_ADC_EnableInternalRegulator+0x24>)
 800220a:	4013      	ands	r3, r2
 800220c:	2280      	movs	r2, #128	@ 0x80
 800220e:	0552      	lsls	r2, r2, #21
 8002210:	431a      	orrs	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	46bd      	mov	sp, r7
 800221a:	b002      	add	sp, #8
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	6fffffe8 	.word	0x6fffffe8

08002224 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	2380      	movs	r3, #128	@ 0x80
 8002232:	055b      	lsls	r3, r3, #21
 8002234:	401a      	ands	r2, r3
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	429a      	cmp	r2, r3
 800223c:	d101      	bne.n	8002242 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b002      	add	sp, #8
 800224a:	bd80      	pop	{r7, pc}

0800224c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <LL_ADC_Enable+0x20>)
 800225a:	4013      	ands	r3, r2
 800225c:	2201      	movs	r2, #1
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002264:	46c0      	nop			@ (mov r8, r8)
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	7fffffe8 	.word	0x7fffffe8

08002270 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	4a04      	ldr	r2, [pc, #16]	@ (8002290 <LL_ADC_Disable+0x20>)
 800227e:	4013      	ands	r3, r2
 8002280:	2202      	movs	r2, #2
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}
 8002290:	7fffffe8 	.word	0x7fffffe8

08002294 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d101      	bne.n	80022ac <LL_ADC_IsEnabled+0x18>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <LL_ADC_IsEnabled+0x1a>
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b002      	add	sp, #8
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d101      	bne.n	80022ce <LL_ADC_IsDisableOngoing+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_IsDisableOngoing+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b002      	add	sp, #8
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <LL_ADC_REG_StartConversion+0x20>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	2204      	movs	r2, #4
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80022f0:	46c0      	nop			@ (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b002      	add	sp, #8
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	7fffffe8 	.word	0x7fffffe8

080022fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	4a04      	ldr	r2, [pc, #16]	@ (800231c <LL_ADC_REG_StopConversion+0x20>)
 800230a:	4013      	ands	r3, r2
 800230c:	2210      	movs	r2, #16
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	46bd      	mov	sp, r7
 8002318:	b002      	add	sp, #8
 800231a:	bd80      	pop	{r7, pc}
 800231c:	7fffffe8 	.word	0x7fffffe8

08002320 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2204      	movs	r2, #4
 800232e:	4013      	ands	r3, r2
 8002330:	2b04      	cmp	r3, #4
 8002332:	d101      	bne.n	8002338 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800234c:	231f      	movs	r3, #31
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002354:	2300      	movs	r3, #0
 8002356:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e19f      	b.n	80026aa <HAL_ADC_Init+0x366>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12a      	bne.n	80023c8 <HAL_ADC_Init+0x84>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4acf      	ldr	r2, [pc, #828]	@ (80026b4 <HAL_ADC_Init+0x370>)
 8002376:	665a      	str	r2, [r3, #100]	@ 0x64
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4acf      	ldr	r2, [pc, #828]	@ (80026b8 <HAL_ADC_Init+0x374>)
 800237c:	669a      	str	r2, [r3, #104]	@ 0x68
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4ace      	ldr	r2, [pc, #824]	@ (80026bc <HAL_ADC_Init+0x378>)
 8002382:	66da      	str	r2, [r3, #108]	@ 0x6c
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4ace      	ldr	r2, [pc, #824]	@ (80026c0 <HAL_ADC_Init+0x37c>)
 8002388:	671a      	str	r2, [r3, #112]	@ 0x70
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4acd      	ldr	r2, [pc, #820]	@ (80026c4 <HAL_ADC_Init+0x380>)
 800238e:	675a      	str	r2, [r3, #116]	@ 0x74
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4acd      	ldr	r2, [pc, #820]	@ (80026c8 <HAL_ADC_Init+0x384>)
 8002394:	679a      	str	r2, [r3, #120]	@ 0x78
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4acc      	ldr	r2, [pc, #816]	@ (80026cc <HAL_ADC_Init+0x388>)
 800239a:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (hadc->MspInitCallback == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2280      	movs	r2, #128	@ 0x80
 80023a0:	589b      	ldr	r3, [r3, r2]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <HAL_ADC_Init+0x6a>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2180      	movs	r1, #128	@ 0x80
 80023aa:	4ac9      	ldr	r2, [pc, #804]	@ (80026d0 <HAL_ADC_Init+0x38c>)
 80023ac:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2280      	movs	r2, #128	@ 0x80
 80023b2:	589b      	ldr	r3, [r3, r2]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	0010      	movs	r0, r2
 80023b8:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2254      	movs	r2, #84	@ 0x54
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f7ff ff29 	bl	8002224 <LL_ADC_IsInternalRegulatorEnabled>
 80023d2:	1e03      	subs	r3, r0, #0
 80023d4:	d115      	bne.n	8002402 <HAL_ADC_Init+0xbe>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f7ff ff0e 	bl	80021fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e0:	4bbc      	ldr	r3, [pc, #752]	@ (80026d4 <HAL_ADC_Init+0x390>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	49bc      	ldr	r1, [pc, #752]	@ (80026d8 <HAL_ADC_Init+0x394>)
 80023e6:	0018      	movs	r0, r3
 80023e8:	f7fd fe8c 	bl	8000104 <__udivsi3>
 80023ec:	0003      	movs	r3, r0
 80023ee:	3301      	adds	r3, #1
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f4:	e002      	b.n	80023fc <HAL_ADC_Init+0xb8>
    {
      wait_loop_index--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f9      	bne.n	80023f6 <HAL_ADC_Init+0xb2>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	0018      	movs	r0, r3
 8002408:	f7ff ff0c 	bl	8002224 <LL_ADC_IsInternalRegulatorEnabled>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d10f      	bne.n	8002430 <HAL_ADC_Init+0xec>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002414:	2210      	movs	r2, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002420:	2201      	movs	r2, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002428:	231f      	movs	r3, #31
 800242a:	18fb      	adds	r3, r7, r3
 800242c:	2201      	movs	r2, #1
 800242e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff ff73 	bl	8002320 <LL_ADC_REG_IsConversionOngoing>
 800243a:	0003      	movs	r3, r0
 800243c:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002442:	2210      	movs	r2, #16
 8002444:	4013      	ands	r3, r2
 8002446:	d000      	beq.n	800244a <HAL_ADC_Init+0x106>
 8002448:	e122      	b.n	8002690 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d000      	beq.n	8002452 <HAL_ADC_Init+0x10e>
 8002450:	e11e      	b.n	8002690 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	4aa1      	ldr	r2, [pc, #644]	@ (80026dc <HAL_ADC_Init+0x398>)
 8002458:	4013      	ands	r3, r2
 800245a:	2202      	movs	r2, #2
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ff14 	bl	8002294 <LL_ADC_IsEnabled>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d000      	beq.n	8002472 <HAL_ADC_Init+0x12e>
 8002470:	e0ad      	b.n	80025ce <HAL_ADC_Init+0x28a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7e1b      	ldrb	r3, [r3, #24]
 800247a:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800247c:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	7e5b      	ldrb	r3, [r3, #25]
 8002482:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002484:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	7e9b      	ldrb	r3, [r3, #26]
 800248a:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800248c:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_ADC_Init+0x158>
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	015b      	lsls	r3, r3, #5
 800249a:	e000      	b.n	800249e <HAL_ADC_Init+0x15a>
 800249c:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800249e:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80024a4:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da04      	bge.n	80024b8 <HAL_ADC_Init+0x174>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	e001      	b.n	80024bc <HAL_ADC_Init+0x178>
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80024bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	212c      	movs	r1, #44	@ 0x2c
 80024c2:	5c5b      	ldrb	r3, [r3, r1]
 80024c4:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80024c6:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d115      	bne.n	8002504 <HAL_ADC_Init+0x1c0>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7e9b      	ldrb	r3, [r3, #26]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d105      	bne.n	80024ec <HAL_ADC_Init+0x1a8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	0252      	lsls	r2, r2, #9
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e00b      	b.n	8002504 <HAL_ADC_Init+0x1c0>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f0:	2220      	movs	r2, #32
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fc:	2201      	movs	r2, #1
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_ADC_Init+0x1de>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002510:	23e0      	movs	r3, #224	@ 0xe0
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800251a:	4313      	orrs	r3, r2
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	4a6d      	ldr	r2, [pc, #436]	@ (80026e0 <HAL_ADC_Init+0x39c>)
 800252a:	4013      	ands	r3, r2
 800252c:	0019      	movs	r1, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	0f9b      	lsrs	r3, r3, #30
 800253e:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002544:	4313      	orrs	r3, r2
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	223c      	movs	r2, #60	@ 0x3c
 8002550:	5c9b      	ldrb	r3, [r3, r2]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d111      	bne.n	800257a <HAL_ADC_Init+0x236>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	0f9b      	lsrs	r3, r3, #30
 800255c:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002562:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002568:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800256e:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	2201      	movs	r2, #1
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_ADC_Init+0x3a0>)
 8002582:	4013      	ands	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	430a      	orrs	r2, r1
 800258e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	23c0      	movs	r3, #192	@ 0xc0
 8002596:	061b      	lsls	r3, r3, #24
 8002598:	429a      	cmp	r2, r3
 800259a:	d018      	beq.n	80025ce <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	05db      	lsls	r3, r3, #23
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d012      	beq.n	80025ce <HAL_ADC_Init+0x28a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80025ac:	2380      	movs	r3, #128	@ 0x80
 80025ae:	061b      	lsls	r3, r3, #24
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d00c      	beq.n	80025ce <HAL_ADC_Init+0x28a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80025b4:	4b4c      	ldr	r3, [pc, #304]	@ (80026e8 <HAL_ADC_Init+0x3a4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <HAL_ADC_Init+0x3a8>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	0019      	movs	r1, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	23f0      	movs	r3, #240	@ 0xf0
 80025c4:	039b      	lsls	r3, r3, #14
 80025c6:	401a      	ands	r2, r3
 80025c8:	4b47      	ldr	r3, [pc, #284]	@ (80026e8 <HAL_ADC_Init+0x3a4>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d6:	001a      	movs	r2, r3
 80025d8:	2100      	movs	r1, #0
 80025da:	f7ff fd6a 	bl	80020b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e6:	4942      	ldr	r1, [pc, #264]	@ (80026f0 <HAL_ADC_Init+0x3ac>)
 80025e8:	001a      	movs	r2, r3
 80025ea:	f7ff fd62 	bl	80020b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d109      	bne.n	800260a <HAL_ADC_Init+0x2c6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2110      	movs	r1, #16
 8002602:	4249      	negs	r1, r1
 8002604:	430a      	orrs	r2, r1
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28
 8002608:	e018      	b.n	800263c <HAL_ADC_Init+0x2f8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691a      	ldr	r2, [r3, #16]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	039b      	lsls	r3, r3, #14
 8002612:	429a      	cmp	r2, r3
 8002614:	d112      	bne.n	800263c <HAL_ADC_Init+0x2f8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	3b01      	subs	r3, #1
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	221c      	movs	r2, #28
 8002626:	4013      	ands	r3, r2
 8002628:	2210      	movs	r2, #16
 800262a:	4252      	negs	r2, r2
 800262c:	409a      	lsls	r2, r3
 800262e:	0011      	movs	r1, r2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	430a      	orrs	r2, r1
 800263a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2100      	movs	r1, #0
 8002642:	0018      	movs	r0, r3
 8002644:	f7ff fd52 	bl	80020ec <LL_ADC_GetSamplingTimeCommonChannels>
 8002648:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800264e:	429a      	cmp	r2, r3
 8002650:	d10b      	bne.n	800266a <HAL_ADC_Init+0x326>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	2203      	movs	r2, #3
 800265e:	4393      	bics	r3, r2
 8002660:	2201      	movs	r2, #1
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002668:	e01c      	b.n	80026a4 <HAL_ADC_Init+0x360>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266e:	2212      	movs	r2, #18
 8002670:	4393      	bics	r3, r2
 8002672:	2210      	movs	r2, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	2201      	movs	r2, #1
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002686:	231f      	movs	r3, #31
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800268e:	e009      	b.n	80026a4 <HAL_ADC_Init+0x360>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	2210      	movs	r2, #16
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800269c:	231f      	movs	r3, #31
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026a4:	231f      	movs	r3, #31
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b008      	add	sp, #32
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	08002a0d 	.word	0x08002a0d
 80026b8:	08002a1d 	.word	0x08002a1d
 80026bc:	08002a2d 	.word	0x08002a2d
 80026c0:	08002a3d 	.word	0x08002a3d
 80026c4:	0800316d 	.word	0x0800316d
 80026c8:	0800317d 	.word	0x0800317d
 80026cc:	0800318d 	.word	0x0800318d
 80026d0:	08001235 	.word	0x08001235
 80026d4:	20000000 	.word	0x20000000
 80026d8:	00030d40 	.word	0x00030d40
 80026dc:	fffffefd 	.word	0xfffffefd
 80026e0:	ffde0201 	.word	0xffde0201
 80026e4:	1ffffc02 	.word	0x1ffffc02
 80026e8:	40012708 	.word	0x40012708
 80026ec:	ffc3ffff 	.word	0xffc3ffff
 80026f0:	07ffff04 	.word	0x07ffff04

080026f4 <HAL_ADC_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef CallbackID,
                                           pADC_CallbackTypeDef pCallback)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	230b      	movs	r3, #11
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	1c0a      	adds	r2, r1, #0
 8002704:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2317      	movs	r3, #23
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d107      	bne.n	8002724 <HAL_ADC_RegisterCallback+0x30>
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	2210      	movs	r2, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	65da      	str	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e06d      	b.n	8002800 <HAL_ADC_RegisterCallback+0x10c>
  }

  if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d03a      	beq.n	80027a4 <HAL_ADC_RegisterCallback+0xb0>
  {
    switch (CallbackID)
 800272e:	230b      	movs	r3, #11
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b0a      	cmp	r3, #10
 8002736:	d82a      	bhi.n	800278e <HAL_ADC_RegisterCallback+0x9a>
 8002738:	009a      	lsls	r2, r3, #2
 800273a:	4b33      	ldr	r3, [pc, #204]	@ (8002808 <HAL_ADC_RegisterCallback+0x114>)
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	469f      	mov	pc, r3
    {
      case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
        hadc->ConvCpltCallback = pCallback;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8002748:	e057      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_CONVERSION_HALF_CB_ID :
        hadc->ConvHalfCpltCallback = pCallback;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8002750:	e053      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
        hadc->LevelOutOfWindowCallback = pCallback;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8002758:	e04f      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_ERROR_CB_ID :
        hadc->ErrorCallback = pCallback;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8002760:	e04b      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
        hadc->LevelOutOfWindow2Callback = pCallback;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8002768:	e047      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
        hadc->LevelOutOfWindow3Callback = pCallback;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8002770:	e043      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_END_OF_SAMPLING_CB_ID :
        hadc->EndOfSamplingCallback = pCallback;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8002778:	e03f      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2180      	movs	r1, #128	@ 0x80
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	505a      	str	r2, [r3, r1]
        break;
 8002782:	e03a      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2184      	movs	r1, #132	@ 0x84
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	505a      	str	r2, [r3, r1]
        break;
 800278c:	e035      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002792:	2210      	movs	r2, #16
 8002794:	431a      	orrs	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 800279a:	2317      	movs	r3, #23
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
        break;
 80027a2:	e02a      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else if (HAL_ADC_STATE_RESET == hadc->State)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d11c      	bne.n	80027e6 <HAL_ADC_RegisterCallback+0xf2>
  {
    switch (CallbackID)
 80027ac:	230b      	movs	r3, #11
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	d002      	beq.n	80027bc <HAL_ADC_RegisterCallback+0xc8>
 80027b6:	2b0a      	cmp	r3, #10
 80027b8:	d005      	beq.n	80027c6 <HAL_ADC_RegisterCallback+0xd2>
 80027ba:	e009      	b.n	80027d0 <HAL_ADC_RegisterCallback+0xdc>
    {
      case HAL_ADC_MSPINIT_CB_ID :
        hadc->MspInitCallback = pCallback;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2180      	movs	r1, #128	@ 0x80
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	505a      	str	r2, [r3, r1]
        break;
 80027c4:	e019      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      case HAL_ADC_MSPDEINIT_CB_ID :
        hadc->MspDeInitCallback = pCallback;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2184      	movs	r1, #132	@ 0x84
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	505a      	str	r2, [r3, r1]
        break;
 80027ce:	e014      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>

      default :
        /* Update the error code */
        hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d4:	2210      	movs	r2, #16
 80027d6:	431a      	orrs	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	65da      	str	r2, [r3, #92]	@ 0x5c

        /* Return error status */
        status = HAL_ERROR;
 80027dc:	2317      	movs	r3, #23
 80027de:	18fb      	adds	r3, r7, r3
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
        break;
 80027e4:	e009      	b.n	80027fa <HAL_ADC_RegisterCallback+0x106>
    }
  }
  else
  {
    /* Update the error code */
    hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ea:	2210      	movs	r2, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Return error status */
    status =  HAL_ERROR;
 80027f2:	2317      	movs	r3, #23
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	2201      	movs	r2, #1
 80027f8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80027fa:	2317      	movs	r3, #23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	781b      	ldrb	r3, [r3, #0]
}
 8002800:	0018      	movs	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	b006      	add	sp, #24
 8002806:	bd80      	pop	{r7, pc}
 8002808:	08007874 	.word	0x08007874

0800280c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800280c:	b5b0      	push	{r4, r5, r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0018      	movs	r0, r3
 800281e:	f7ff fd7f 	bl	8002320 <LL_ADC_REG_IsConversionOngoing>
 8002822:	1e03      	subs	r3, r0, #0
 8002824:	d16c      	bne.n	8002900 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2254      	movs	r2, #84	@ 0x54
 800282a:	5c9b      	ldrb	r3, [r3, r2]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_ADC_Start_DMA+0x28>
 8002830:	2302      	movs	r3, #2
 8002832:	e06c      	b.n	800290e <HAL_ADC_Start_DMA+0x102>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2254      	movs	r2, #84	@ 0x54
 8002838:	2101      	movs	r1, #1
 800283a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	4013      	ands	r3, r2
 8002846:	d113      	bne.n	8002870 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff fd21 	bl	8002294 <LL_ADC_IsEnabled>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d004      	beq.n	8002860 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff fd08 	bl	8002270 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2101      	movs	r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002870:	2517      	movs	r5, #23
 8002872:	197c      	adds	r4, r7, r5
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	0018      	movs	r0, r3
 8002878:	f000 fb02 	bl	8002e80 <ADC_Enable>
 800287c:	0003      	movs	r3, r0
 800287e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002880:	002c      	movs	r4, r5
 8002882:	193b      	adds	r3, r7, r4
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d13e      	bne.n	8002908 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	4a22      	ldr	r2, [pc, #136]	@ (8002918 <HAL_ADC_Start_DMA+0x10c>)
 8002890:	4013      	ands	r3, r2
 8002892:	2280      	movs	r2, #128	@ 0x80
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	431a      	orrs	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2200      	movs	r2, #0
 80028a0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a6:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_ADC_Start_DMA+0x110>)
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002920 <HAL_ADC_Start_DMA+0x114>)
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002924 <HAL_ADC_Start_DMA+0x118>)
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	221c      	movs	r2, #28
 80028c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2254      	movs	r2, #84	@ 0x54
 80028c6:	2100      	movs	r1, #0
 80028c8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2110      	movs	r1, #16
 80028d6:	430a      	orrs	r2, r1
 80028d8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3340      	adds	r3, #64	@ 0x40
 80028e4:	0019      	movs	r1, r3
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	193c      	adds	r4, r7, r4
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f000 fdbe 	bl	800346c <HAL_DMA_Start_IT>
 80028f0:	0003      	movs	r3, r0
 80028f2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff fced 	bl	80022d8 <LL_ADC_REG_StartConversion>
 80028fe:	e003      	b.n	8002908 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002900:	2317      	movs	r3, #23
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	2202      	movs	r2, #2
 8002906:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002908:	2317      	movs	r3, #23
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	781b      	ldrb	r3, [r3, #0]
}
 800290e:	0018      	movs	r0, r3
 8002910:	46bd      	mov	sp, r7
 8002912:	b006      	add	sp, #24
 8002914:	bdb0      	pop	{r4, r5, r7, pc}
 8002916:	46c0      	nop			@ (mov r8, r8)
 8002918:	fffff0fe 	.word	0xfffff0fe
 800291c:	08003049 	.word	0x08003049
 8002920:	08003115 	.word	0x08003115
 8002924:	08003135 	.word	0x08003135

08002928 <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2254      	movs	r2, #84	@ 0x54
 8002934:	5c9b      	ldrb	r3, [r3, r2]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_ADC_Stop_DMA+0x16>
 800293a:	2302      	movs	r3, #2
 800293c:	e05f      	b.n	80029fe <HAL_ADC_Stop_DMA+0xd6>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2254      	movs	r2, #84	@ 0x54
 8002942:	2101      	movs	r1, #1
 8002944:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002946:	250f      	movs	r5, #15
 8002948:	197c      	adds	r4, r7, r5
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	0018      	movs	r0, r3
 800294e:	f000 fa55 	bl	8002dfc <ADC_ConversionStop>
 8002952:	0003      	movs	r3, r0
 8002954:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002956:	0029      	movs	r1, r5
 8002958:	187b      	adds	r3, r7, r1
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d147      	bne.n	80029f0 <HAL_ADC_Stop_DMA+0xc8>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002964:	2225      	movs	r2, #37	@ 0x25
 8002966:	5c9b      	ldrb	r3, [r3, r2]
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d112      	bne.n	8002994 <HAL_ADC_Stop_DMA+0x6c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002972:	000d      	movs	r5, r1
 8002974:	187c      	adds	r4, r7, r1
 8002976:	0018      	movs	r0, r3
 8002978:	f000 fdfe 	bl	8003578 <HAL_DMA_Abort>
 800297c:	0003      	movs	r3, r0
 800297e:	7023      	strb	r3, [r4, #0]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002980:	197b      	adds	r3, r7, r5
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_ADC_Stop_DMA+0x6c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	@ 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2110      	movs	r1, #16
 80029a0:	438a      	bics	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80029a4:	220f      	movs	r2, #15
 80029a6:	18bb      	adds	r3, r7, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d107      	bne.n	80029be <HAL_ADC_Stop_DMA+0x96>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80029ae:	18bc      	adds	r4, r7, r2
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	0018      	movs	r0, r3
 80029b4:	f000 faea 	bl	8002f8c <ADC_Disable>
 80029b8:	0003      	movs	r3, r0
 80029ba:	7023      	strb	r3, [r4, #0]
 80029bc:	e003      	b.n	80029c6 <HAL_ADC_Stop_DMA+0x9e>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 fae3 	bl	8002f8c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80029c6:	230f      	movs	r3, #15
 80029c8:	18fb      	adds	r3, r7, r3
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_ADC_Stop_DMA+0xb8>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002a08 <HAL_ADC_Stop_DMA+0xe0>)
 80029d6:	4013      	ands	r3, r2
 80029d8:	2201      	movs	r2, #1
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2101      	movs	r1, #1
 80029ec:	438a      	bics	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2254      	movs	r2, #84	@ 0x54
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80029f8:	230f      	movs	r3, #15
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	781b      	ldrb	r3, [r3, #0]
}
 80029fe:	0018      	movs	r0, r3
 8002a00:	46bd      	mov	sp, r7
 8002a02:	b004      	add	sp, #16
 8002a04:	bdb0      	pop	{r4, r5, r7, pc}
 8002a06:	46c0      	nop			@ (mov r8, r8)
 8002a08:	fffffefe 	.word	0xfffffefe

08002a0c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a14:	46c0      	nop			@ (mov r8, r8)
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b002      	add	sp, #8
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a44:	46c0      	nop			@ (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a56:	2317      	movs	r3, #23
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2254      	movs	r2, #84	@ 0x54
 8002a66:	5c9b      	ldrb	r3, [r3, r2]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x24>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e1c0      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x3a6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2254      	movs	r2, #84	@ 0x54
 8002a74:	2101      	movs	r1, #1
 8002a76:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7ff fc4f 	bl	8002320 <LL_ADC_REG_IsConversionOngoing>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d000      	beq.n	8002a88 <HAL_ADC_ConfigChannel+0x3c>
 8002a86:	e1a3      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d100      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x46>
 8002a90:	e143      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002aa2:	4ac1      	ldr	r2, [pc, #772]	@ (8002da8 <HAL_ADC_ConfigChannel+0x35c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d108      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	0010      	movs	r0, r2
 8002ab4:	f7ff fb62 	bl	800217c <LL_ADC_REG_SetSequencerChAdd>
 8002ab8:	e0c9      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	211f      	movs	r1, #31
 8002ac4:	400b      	ands	r3, r1
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	4099      	lsls	r1, r3
 8002aca:	000b      	movs	r3, r1
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	035b      	lsls	r3, r3, #13
 8002ad8:	0b5b      	lsrs	r3, r3, #13
 8002ada:	d105      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x9c>
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0e9b      	lsrs	r3, r3, #26
 8002ae2:	221f      	movs	r2, #31
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	e098      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	4013      	ands	r3, r2
 8002af0:	d000      	beq.n	8002af4 <HAL_ADC_ConfigChannel+0xa8>
 8002af2:	e091      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1cc>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2202      	movs	r2, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	d000      	beq.n	8002b00 <HAL_ADC_ConfigChannel+0xb4>
 8002afe:	e089      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x1c8>
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2204      	movs	r2, #4
 8002b06:	4013      	ands	r3, r2
 8002b08:	d000      	beq.n	8002b0c <HAL_ADC_ConfigChannel+0xc0>
 8002b0a:	e081      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1c4>
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2208      	movs	r2, #8
 8002b12:	4013      	ands	r3, r2
 8002b14:	d000      	beq.n	8002b18 <HAL_ADC_ConfigChannel+0xcc>
 8002b16:	e079      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x1c0>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d000      	beq.n	8002b24 <HAL_ADC_ConfigChannel+0xd8>
 8002b22:	e071      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x1bc>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d000      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0xe4>
 8002b2e:	e069      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x1b8>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2240      	movs	r2, #64	@ 0x40
 8002b36:	4013      	ands	r3, r2
 8002b38:	d000      	beq.n	8002b3c <HAL_ADC_ConfigChannel+0xf0>
 8002b3a:	e061      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x1b4>
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	4013      	ands	r3, r2
 8002b44:	d000      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0xfc>
 8002b46:	e059      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x1b0>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	d151      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x1ac>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	2380      	movs	r3, #128	@ 0x80
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d149      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x1a8>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	2380      	movs	r3, #128	@ 0x80
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d141      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1a4>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	4013      	ands	r3, r2
 8002b76:	d139      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x1a0>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	015b      	lsls	r3, r3, #5
 8002b80:	4013      	ands	r3, r2
 8002b82:	d131      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x19c>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	019b      	lsls	r3, r3, #6
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d129      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x198>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	01db      	lsls	r3, r3, #7
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d121      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x194>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	2380      	movs	r3, #128	@ 0x80
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d119      	bne.n	8002bdc <HAL_ADC_ConfigChannel+0x190>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	025b      	lsls	r3, r3, #9
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d111      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x18c>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d109      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x188>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	02db      	lsls	r3, r3, #11
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d001      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x184>
 8002bcc:	2312      	movs	r3, #18
 8002bce:	e024      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	e022      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bd4:	2311      	movs	r3, #17
 8002bd6:	e020      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bd8:	2310      	movs	r3, #16
 8002bda:	e01e      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bdc:	230f      	movs	r3, #15
 8002bde:	e01c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002be0:	230e      	movs	r3, #14
 8002be2:	e01a      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002be4:	230d      	movs	r3, #13
 8002be6:	e018      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002be8:	230c      	movs	r3, #12
 8002bea:	e016      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bec:	230b      	movs	r3, #11
 8002bee:	e014      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	e012      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bf4:	2309      	movs	r3, #9
 8002bf6:	e010      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bf8:	2308      	movs	r3, #8
 8002bfa:	e00e      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002bfc:	2307      	movs	r3, #7
 8002bfe:	e00c      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c00:	2306      	movs	r3, #6
 8002c02:	e00a      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c04:	2305      	movs	r3, #5
 8002c06:	e008      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	e006      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e004      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e002      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x1ce>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	6852      	ldr	r2, [r2, #4]
 8002c1e:	201f      	movs	r0, #31
 8002c20:	4002      	ands	r2, r0
 8002c22:	4093      	lsls	r3, r2
 8002c24:	000a      	movs	r2, r1
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d808      	bhi.n	8002c4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	001a      	movs	r2, r3
 8002c4a:	f7ff fa77 	bl	800213c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	f7ff fab2 	bl	80021c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db00      	blt.n	8002c6a <HAL_ADC_ConfigChannel+0x21e>
 8002c68:	e0bc      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c6a:	4b50      	ldr	r3, [pc, #320]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7ff fa13 	bl	8002098 <LL_ADC_GetCommonPathInternalCh>
 8002c72:	0003      	movs	r3, r0
 8002c74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a4d      	ldr	r2, [pc, #308]	@ (8002db0 <HAL_ADC_ConfigChannel+0x364>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d122      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	041b      	lsls	r3, r3, #16
 8002c86:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002c88:	d11d      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	2280      	movs	r2, #128	@ 0x80
 8002c8e:	0412      	lsls	r2, r2, #16
 8002c90:	4313      	orrs	r3, r2
 8002c92:	4a46      	ldr	r2, [pc, #280]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002c94:	0019      	movs	r1, r3
 8002c96:	0010      	movs	r0, r2
 8002c98:	f7ff f9ea 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9c:	4b45      	ldr	r3, [pc, #276]	@ (8002db4 <HAL_ADC_ConfigChannel+0x368>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4945      	ldr	r1, [pc, #276]	@ (8002db8 <HAL_ADC_ConfigChannel+0x36c>)
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f7fd fa2e 	bl	8000104 <__udivsi3>
 8002ca8:	0003      	movs	r3, r0
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	0013      	movs	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	189b      	adds	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f9      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002cc4:	e08e      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a3c      	ldr	r2, [pc, #240]	@ (8002dbc <HAL_ADC_ConfigChannel+0x370>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d10e      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	2380      	movs	r3, #128	@ 0x80
 8002cd4:	045b      	lsls	r3, r3, #17
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d109      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2280      	movs	r2, #128	@ 0x80
 8002cde:	0452      	lsls	r2, r2, #17
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	4a32      	ldr	r2, [pc, #200]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	0010      	movs	r0, r2
 8002ce8:	f7ff f9c2 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
 8002cec:	e07a      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a33      	ldr	r2, [pc, #204]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x374>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d000      	beq.n	8002cfa <HAL_ADC_ConfigChannel+0x2ae>
 8002cf8:	e074      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	2380      	movs	r3, #128	@ 0x80
 8002cfe:	03db      	lsls	r3, r3, #15
 8002d00:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002d02:	d000      	beq.n	8002d06 <HAL_ADC_ConfigChannel+0x2ba>
 8002d04:	e06e      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2280      	movs	r2, #128	@ 0x80
 8002d0a:	03d2      	lsls	r2, r2, #15
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	4a27      	ldr	r2, [pc, #156]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002d10:	0019      	movs	r1, r3
 8002d12:	0010      	movs	r0, r2
 8002d14:	f7ff f9ac 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
 8002d18:	e064      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691a      	ldr	r2, [r3, #16]
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	061b      	lsls	r3, r3, #24
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d004      	beq.n	8002d30 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002da8 <HAL_ADC_ConfigChannel+0x35c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d107      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0019      	movs	r1, r3
 8002d3a:	0010      	movs	r0, r2
 8002d3c:	f7ff fa2f 	bl	800219e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da4d      	bge.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d48:	4b18      	ldr	r3, [pc, #96]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f7ff f9a4 	bl	8002098 <LL_ADC_GetCommonPathInternalCh>
 8002d50:	0003      	movs	r3, r0
 8002d52:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <HAL_ADC_ConfigChannel+0x364>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4a18      	ldr	r2, [pc, #96]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x378>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	4a11      	ldr	r2, [pc, #68]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002d66:	0019      	movs	r1, r3
 8002d68:	0010      	movs	r0, r2
 8002d6a:	f7ff f981 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
 8002d6e:	e039      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <HAL_ADC_ConfigChannel+0x370>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d108      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x37c>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	4a0a      	ldr	r2, [pc, #40]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7ff f973 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
 8002d8a:	e02b      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a0b      	ldr	r2, [pc, #44]	@ (8002dc0 <HAL_ADC_ConfigChannel+0x374>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d126      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4a0c      	ldr	r2, [pc, #48]	@ (8002dcc <HAL_ADC_ConfigChannel+0x380>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	4a03      	ldr	r2, [pc, #12]	@ (8002dac <HAL_ADC_ConfigChannel+0x360>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f7ff f965 	bl	8002070 <LL_ADC_SetCommonPathInternalCh>
 8002da6:	e01d      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x398>
 8002da8:	80000004 	.word	0x80000004
 8002dac:	40012708 	.word	0x40012708
 8002db0:	b0001000 	.word	0xb0001000
 8002db4:	20000000 	.word	0x20000000
 8002db8:	00030d40 	.word	0x00030d40
 8002dbc:	b8004000 	.word	0xb8004000
 8002dc0:	b4002000 	.word	0xb4002000
 8002dc4:	ff7fffff 	.word	0xff7fffff
 8002dc8:	feffffff 	.word	0xfeffffff
 8002dcc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ddc:	2317      	movs	r3, #23
 8002dde:	18fb      	adds	r3, r7, r3
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2254      	movs	r2, #84	@ 0x54
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002dec:	2317      	movs	r3, #23
 8002dee:	18fb      	adds	r3, r7, r3
 8002df0:	781b      	ldrb	r3, [r3, #0]
}
 8002df2:	0018      	movs	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b006      	add	sp, #24
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	46c0      	nop			@ (mov r8, r8)

08002dfc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f7ff fa89 	bl	8002320 <LL_ADC_REG_IsConversionOngoing>
 8002e0e:	1e03      	subs	r3, r0, #0
 8002e10:	d031      	beq.n	8002e76 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7ff fa4d 	bl	80022b6 <LL_ADC_IsDisableOngoing>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d104      	bne.n	8002e2a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0018      	movs	r0, r3
 8002e26:	f7ff fa69 	bl	80022fc <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e2a:	f7ff f917 	bl	800205c <HAL_GetTick>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e32:	e01a      	b.n	8002e6a <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e34:	f7ff f912 	bl	800205c <HAL_GetTick>
 8002e38:	0002      	movs	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d913      	bls.n	8002e6a <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2204      	movs	r2, #4
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d00d      	beq.n	8002e6a <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e52:	2210      	movs	r2, #16
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5e:	2201      	movs	r2, #1
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e006      	b.n	8002e78 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	2204      	movs	r2, #4
 8002e72:	4013      	ands	r3, r2
 8002e74:	d1de      	bne.n	8002e34 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	0018      	movs	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff f9ff 	bl	8002294 <LL_ADC_IsEnabled>
 8002e96:	1e03      	subs	r3, r0, #0
 8002e98:	d000      	beq.n	8002e9c <ADC_Enable+0x1c>
 8002e9a:	e069      	b.n	8002f70 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4a36      	ldr	r2, [pc, #216]	@ (8002f7c <ADC_Enable+0xfc>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d00d      	beq.n	8002ec4 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eac:	2210      	movs	r2, #16
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e056      	b.n	8002f72 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff f9bf 	bl	800224c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002ece:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <ADC_Enable+0x100>)
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7ff f8e1 	bl	8002098 <LL_ADC_GetCommonPathInternalCh>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	2380      	movs	r3, #128	@ 0x80
 8002eda:	041b      	lsls	r3, r3, #16
 8002edc:	4013      	ands	r3, r2
 8002ede:	d00f      	beq.n	8002f00 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ee0:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <ADC_Enable+0x104>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4928      	ldr	r1, [pc, #160]	@ (8002f88 <ADC_Enable+0x108>)
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f7fd f90c 	bl	8000104 <__udivsi3>
 8002eec:	0003      	movs	r3, r0
 8002eee:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002ef0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ef2:	e002      	b.n	8002efa <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1f9      	bne.n	8002ef4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7e5b      	ldrb	r3, [r3, #25]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d033      	beq.n	8002f70 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002f08:	f7ff f8a8 	bl	800205c <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f10:	e027      	b.n	8002f62 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0018      	movs	r0, r3
 8002f18:	f7ff f9bc 	bl	8002294 <LL_ADC_IsEnabled>
 8002f1c:	1e03      	subs	r3, r0, #0
 8002f1e:	d104      	bne.n	8002f2a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff f991 	bl	800224c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002f2a:	f7ff f897 	bl	800205c <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d914      	bls.n	8002f62 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d00d      	beq.n	8002f62 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f56:	2201      	movs	r2, #1
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e007      	b.n	8002f72 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d1d0      	bne.n	8002f12 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	80000017 	.word	0x80000017
 8002f80:	40012708 	.word	0x40012708
 8002f84:	20000000 	.word	0x20000000
 8002f88:	00030d40 	.word	0x00030d40

08002f8c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f7ff f98c 	bl	80022b6 <LL_ADC_IsDisableOngoing>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f7ff f974 	bl	8002294 <LL_ADC_IsEnabled>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d046      	beq.n	800303e <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d143      	bne.n	800303e <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d10d      	bne.n	8002fe0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff f951 	bl	8002270 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fd6:	f7ff f841 	bl	800205c <HAL_GetTick>
 8002fda:	0003      	movs	r3, r0
 8002fdc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002fde:	e028      	b.n	8003032 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e021      	b.n	8003040 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ffc:	f7ff f82e 	bl	800205c <HAL_GetTick>
 8003000:	0002      	movs	r2, r0
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b02      	cmp	r3, #2
 8003008:	d913      	bls.n	8003032 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2201      	movs	r2, #1
 8003012:	4013      	ands	r3, r2
 8003014:	d00d      	beq.n	8003032 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301a:	2210      	movs	r2, #16
 800301c:	431a      	orrs	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003026:	2201      	movs	r2, #1
 8003028:	431a      	orrs	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e006      	b.n	8003040 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2201      	movs	r2, #1
 800303a:	4013      	ands	r3, r2
 800303c:	d1de      	bne.n	8002ffc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	0018      	movs	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	b004      	add	sp, #16
 8003046:	bd80      	pop	{r7, pc}

08003048 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	2250      	movs	r2, #80	@ 0x50
 800305c:	4013      	ands	r3, r2
 800305e:	d142      	bne.n	80030e6 <ADC_DMAConvCplt+0x9e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	2280      	movs	r2, #128	@ 0x80
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	431a      	orrs	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0018      	movs	r0, r3
 8003074:	f7ff f851 	bl	800211a <LL_ADC_REG_IsTriggerSourceSWStart>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d02e      	beq.n	80030da <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	7e9b      	ldrb	r3, [r3, #26]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d12a      	bne.n	80030da <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2208      	movs	r2, #8
 800308c:	4013      	ands	r3, r2
 800308e:	2b08      	cmp	r3, #8
 8003090:	d123      	bne.n	80030da <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	0018      	movs	r0, r3
 8003098:	f7ff f942 	bl	8002320 <LL_ADC_REG_IsConversionOngoing>
 800309c:	1e03      	subs	r3, r0, #0
 800309e:	d110      	bne.n	80030c2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	210c      	movs	r1, #12
 80030ac:	438a      	bics	r2, r1
 80030ae:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b4:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <ADC_DMAConvCplt+0xc8>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	2201      	movs	r2, #1
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58
 80030c0:	e00b      	b.n	80030da <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	2220      	movs	r2, #32
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d2:	2201      	movs	r2, #1
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	0010      	movs	r0, r2
 80030e2:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030e4:	e010      	b.n	8003108 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	2210      	movs	r2, #16
 80030ec:	4013      	ands	r3, r2
 80030ee:	d005      	beq.n	80030fc <ADC_DMAConvCplt+0xb4>
      hadc->ErrorCallback(hadc);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	0010      	movs	r0, r2
 80030f8:	4798      	blx	r3
}
 80030fa:	e005      	b.n	8003108 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	0010      	movs	r0, r2
 8003106:	4798      	blx	r3
}
 8003108:	46c0      	nop			@ (mov r8, r8)
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}
 8003110:	fffffefe 	.word	0xfffffefe

08003114 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	0010      	movs	r0, r2
 800312a:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800312c:	46c0      	nop			@ (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}

08003134 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003146:	2240      	movs	r2, #64	@ 0x40
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003152:	2204      	movs	r2, #4
 8003154:	431a      	orrs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	0010      	movs	r0, r2
 8003162:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	46bd      	mov	sp, r7
 8003168:	b004      	add	sp, #16
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	46bd      	mov	sp, r7
 8003178:	b002      	add	sp, #8
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003184:	46c0      	nop			@ (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b002      	add	sp, #8
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003194:	46c0      	nop			@ (mov r8, r8)
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	0002      	movs	r2, r0
 80031a4:	1dfb      	adds	r3, r7, #7
 80031a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031a8:	1dfb      	adds	r3, r7, #7
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80031ae:	d809      	bhi.n	80031c4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	001a      	movs	r2, r3
 80031b6:	231f      	movs	r3, #31
 80031b8:	401a      	ands	r2, r3
 80031ba:	4b04      	ldr	r3, [pc, #16]	@ (80031cc <__NVIC_EnableIRQ+0x30>)
 80031bc:	2101      	movs	r1, #1
 80031be:	4091      	lsls	r1, r2
 80031c0:	000a      	movs	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	e000e100 	.word	0xe000e100

080031d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d0:	b590      	push	{r4, r7, lr}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	0002      	movs	r2, r0
 80031d8:	6039      	str	r1, [r7, #0]
 80031da:	1dfb      	adds	r3, r7, #7
 80031dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80031de:	1dfb      	adds	r3, r7, #7
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80031e4:	d828      	bhi.n	8003238 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e6:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <__NVIC_SetPriority+0xd4>)
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	b25b      	sxtb	r3, r3
 80031ee:	089b      	lsrs	r3, r3, #2
 80031f0:	33c0      	adds	r3, #192	@ 0xc0
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	589b      	ldr	r3, [r3, r2]
 80031f6:	1dfa      	adds	r2, r7, #7
 80031f8:	7812      	ldrb	r2, [r2, #0]
 80031fa:	0011      	movs	r1, r2
 80031fc:	2203      	movs	r2, #3
 80031fe:	400a      	ands	r2, r1
 8003200:	00d2      	lsls	r2, r2, #3
 8003202:	21ff      	movs	r1, #255	@ 0xff
 8003204:	4091      	lsls	r1, r2
 8003206:	000a      	movs	r2, r1
 8003208:	43d2      	mvns	r2, r2
 800320a:	401a      	ands	r2, r3
 800320c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	22ff      	movs	r2, #255	@ 0xff
 8003214:	401a      	ands	r2, r3
 8003216:	1dfb      	adds	r3, r7, #7
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	0018      	movs	r0, r3
 800321c:	2303      	movs	r3, #3
 800321e:	4003      	ands	r3, r0
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003224:	481f      	ldr	r0, [pc, #124]	@ (80032a4 <__NVIC_SetPriority+0xd4>)
 8003226:	1dfb      	adds	r3, r7, #7
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b25b      	sxtb	r3, r3
 800322c:	089b      	lsrs	r3, r3, #2
 800322e:	430a      	orrs	r2, r1
 8003230:	33c0      	adds	r3, #192	@ 0xc0
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003236:	e031      	b.n	800329c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003238:	4a1b      	ldr	r2, [pc, #108]	@ (80032a8 <__NVIC_SetPriority+0xd8>)
 800323a:	1dfb      	adds	r3, r7, #7
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	0019      	movs	r1, r3
 8003240:	230f      	movs	r3, #15
 8003242:	400b      	ands	r3, r1
 8003244:	3b08      	subs	r3, #8
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	3306      	adds	r3, #6
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	18d3      	adds	r3, r2, r3
 800324e:	3304      	adds	r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	1dfa      	adds	r2, r7, #7
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	0011      	movs	r1, r2
 8003258:	2203      	movs	r2, #3
 800325a:	400a      	ands	r2, r1
 800325c:	00d2      	lsls	r2, r2, #3
 800325e:	21ff      	movs	r1, #255	@ 0xff
 8003260:	4091      	lsls	r1, r2
 8003262:	000a      	movs	r2, r1
 8003264:	43d2      	mvns	r2, r2
 8003266:	401a      	ands	r2, r3
 8003268:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	019b      	lsls	r3, r3, #6
 800326e:	22ff      	movs	r2, #255	@ 0xff
 8003270:	401a      	ands	r2, r3
 8003272:	1dfb      	adds	r3, r7, #7
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	0018      	movs	r0, r3
 8003278:	2303      	movs	r3, #3
 800327a:	4003      	ands	r3, r0
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003280:	4809      	ldr	r0, [pc, #36]	@ (80032a8 <__NVIC_SetPriority+0xd8>)
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	001c      	movs	r4, r3
 8003288:	230f      	movs	r3, #15
 800328a:	4023      	ands	r3, r4
 800328c:	3b08      	subs	r3, #8
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	430a      	orrs	r2, r1
 8003292:	3306      	adds	r3, #6
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	18c3      	adds	r3, r0, r3
 8003298:	3304      	adds	r3, #4
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	46c0      	nop			@ (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b003      	add	sp, #12
 80032a2:	bd90      	pop	{r4, r7, pc}
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1e5a      	subs	r2, r3, #1
 80032b8:	2380      	movs	r3, #128	@ 0x80
 80032ba:	045b      	lsls	r3, r3, #17
 80032bc:	429a      	cmp	r2, r3
 80032be:	d301      	bcc.n	80032c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032c0:	2301      	movs	r3, #1
 80032c2:	e010      	b.n	80032e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <SysTick_Config+0x44>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	3a01      	subs	r2, #1
 80032ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032cc:	2301      	movs	r3, #1
 80032ce:	425b      	negs	r3, r3
 80032d0:	2103      	movs	r1, #3
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff ff7c 	bl	80031d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d8:	4b05      	ldr	r3, [pc, #20]	@ (80032f0 <SysTick_Config+0x44>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032de:	4b04      	ldr	r3, [pc, #16]	@ (80032f0 <SysTick_Config+0x44>)
 80032e0:	2207      	movs	r2, #7
 80032e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b002      	add	sp, #8
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	e000e010 	.word	0xe000e010

080032f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	210f      	movs	r1, #15
 8003300:	187b      	adds	r3, r7, r1
 8003302:	1c02      	adds	r2, r0, #0
 8003304:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b25b      	sxtb	r3, r3
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f7ff ff5d 	bl	80031d0 <__NVIC_SetPriority>
}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	0002      	movs	r2, r0
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332a:	1dfb      	adds	r3, r7, #7
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	b25b      	sxtb	r3, r3
 8003330:	0018      	movs	r0, r3
 8003332:	f7ff ff33 	bl	800319c <__NVIC_EnableIRQ>
}
 8003336:	46c0      	nop			@ (mov r8, r8)
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff ffaf 	bl	80032ac <SysTick_Config>
 800334e:	0003      	movs	r3, r0
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b002      	add	sp, #8
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e077      	b.n	800345a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a3d      	ldr	r2, [pc, #244]	@ (8003464 <HAL_DMA_Init+0x10c>)
 8003370:	4694      	mov	ip, r2
 8003372:	4463      	add	r3, ip
 8003374:	2114      	movs	r1, #20
 8003376:	0018      	movs	r0, r3
 8003378:	f7fc fec4 	bl	8000104 <__udivsi3>
 800337c:	0003      	movs	r3, r0
 800337e:	009a      	lsls	r2, r3, #2
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2225      	movs	r2, #37	@ 0x25
 8003388:	2102      	movs	r1, #2
 800338a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4934      	ldr	r1, [pc, #208]	@ (8003468 <HAL_DMA_Init+0x110>)
 8003398:	400a      	ands	r2, r1
 800339a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689a      	ldr	r2, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	0018      	movs	r0, r3
 80033d6:	f000 fa23 	bl	8003820 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	01db      	lsls	r3, r3, #7
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d102      	bne.n	80033ec <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	213f      	movs	r1, #63	@ 0x3f
 80033f6:	400a      	ands	r2, r1
 80033f8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003402:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d011      	beq.n	8003430 <HAL_DMA_Init+0xd8>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b04      	cmp	r3, #4
 8003412:	d80d      	bhi.n	8003430 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 fa2e 	bl	8003878 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e008      	b.n	8003442 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2225      	movs	r2, #37	@ 0x25
 800344c:	2101      	movs	r1, #1
 800344e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2224      	movs	r2, #36	@ 0x24
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	bffdfff8 	.word	0xbffdfff8
 8003468:	ffff800f 	.word	0xffff800f

0800346c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2317      	movs	r3, #23
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	2200      	movs	r2, #0
 8003480:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2224      	movs	r2, #36	@ 0x24
 8003486:	5c9b      	ldrb	r3, [r3, r2]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d101      	bne.n	8003490 <HAL_DMA_Start_IT+0x24>
 800348c:	2302      	movs	r3, #2
 800348e:	e06f      	b.n	8003570 <HAL_DMA_Start_IT+0x104>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2224      	movs	r2, #36	@ 0x24
 8003494:	2101      	movs	r1, #1
 8003496:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2225      	movs	r2, #37	@ 0x25
 800349c:	5c9b      	ldrb	r3, [r3, r2]
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d157      	bne.n	8003554 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2225      	movs	r2, #37	@ 0x25
 80034a8:	2102      	movs	r1, #2
 80034aa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2101      	movs	r1, #1
 80034be:	438a      	bics	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f969 	bl	80037a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	210e      	movs	r1, #14
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	e00f      	b.n	8003508 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2104      	movs	r1, #4
 80034f4:	438a      	bics	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	210a      	movs	r1, #10
 8003504:	430a      	orrs	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	2380      	movs	r3, #128	@ 0x80
 8003510:	025b      	lsls	r3, r3, #9
 8003512:	4013      	ands	r3, r2
 8003514:	d008      	beq.n	8003528 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	2180      	movs	r1, #128	@ 0x80
 8003522:	0049      	lsls	r1, r1, #1
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0049      	lsls	r1, r1, #1
 800353e:	430a      	orrs	r2, r1
 8003540:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2101      	movs	r1, #1
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	e00a      	b.n	800356a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2280      	movs	r2, #128	@ 0x80
 8003558:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2224      	movs	r2, #36	@ 0x24
 800355e:	2100      	movs	r1, #0
 8003560:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800356a:	2317      	movs	r3, #23
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
}
 8003570:	0018      	movs	r0, r3
 8003572:	46bd      	mov	sp, r7
 8003574:	b006      	add	sp, #24
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e050      	b.n	800362c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2225      	movs	r2, #37	@ 0x25
 800358e:	5c9b      	ldrb	r3, [r3, r2]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d008      	beq.n	80035a8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2204      	movs	r2, #4
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	@ 0x24
 80035a0:	2100      	movs	r1, #0
 80035a2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e041      	b.n	800362c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	210e      	movs	r1, #14
 80035b4:	438a      	bics	r2, r1
 80035b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c2:	491c      	ldr	r1, [pc, #112]	@ (8003634 <HAL_DMA_Abort+0xbc>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2101      	movs	r1, #1
 80035d4:	438a      	bics	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80035d8:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <HAL_DMA_Abort+0xc0>)
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	221c      	movs	r2, #28
 80035e2:	4013      	ands	r3, r2
 80035e4:	2201      	movs	r2, #1
 80035e6:	409a      	lsls	r2, r3
 80035e8:	4b13      	ldr	r3, [pc, #76]	@ (8003638 <HAL_DMA_Abort+0xc0>)
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00c      	beq.n	800361a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_DMA_Abort+0xbc>)
 800360c:	400a      	ands	r2, r1
 800360e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003618:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2225      	movs	r2, #37	@ 0x25
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2224      	movs	r2, #36	@ 0x24
 8003626:	2100      	movs	r1, #0
 8003628:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b002      	add	sp, #8
 8003632:	bd80      	pop	{r7, pc}
 8003634:	fffffeff 	.word	0xfffffeff
 8003638:	40020000 	.word	0x40020000

0800363c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003644:	4b55      	ldr	r3, [pc, #340]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003656:	221c      	movs	r2, #28
 8003658:	4013      	ands	r3, r2
 800365a:	2204      	movs	r2, #4
 800365c:	409a      	lsls	r2, r3
 800365e:	0013      	movs	r3, r2
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4013      	ands	r3, r2
 8003664:	d027      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x7a>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2204      	movs	r2, #4
 800366a:	4013      	ands	r3, r2
 800366c:	d023      	beq.n	80036b6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2220      	movs	r2, #32
 8003676:	4013      	ands	r3, r2
 8003678:	d107      	bne.n	800368a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2104      	movs	r1, #4
 8003686:	438a      	bics	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 800368c:	6859      	ldr	r1, [r3, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	221c      	movs	r2, #28
 8003694:	4013      	ands	r3, r2
 8003696:	2204      	movs	r2, #4
 8003698:	409a      	lsls	r2, r3
 800369a:	4b40      	ldr	r3, [pc, #256]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d100      	bne.n	80036aa <HAL_DMA_IRQHandler+0x6e>
 80036a8:	e073      	b.n	8003792 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	0010      	movs	r0, r2
 80036b2:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80036b4:	e06d      	b.n	8003792 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	221c      	movs	r2, #28
 80036bc:	4013      	ands	r3, r2
 80036be:	2202      	movs	r2, #2
 80036c0:	409a      	lsls	r2, r3
 80036c2:	0013      	movs	r3, r2
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4013      	ands	r3, r2
 80036c8:	d02e      	beq.n	8003728 <HAL_DMA_IRQHandler+0xec>
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2202      	movs	r2, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d02a      	beq.n	8003728 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2220      	movs	r2, #32
 80036da:	4013      	ands	r3, r2
 80036dc:	d10b      	bne.n	80036f6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	210a      	movs	r1, #10
 80036ea:	438a      	bics	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2225      	movs	r2, #37	@ 0x25
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80036f6:	4b29      	ldr	r3, [pc, #164]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 80036f8:	6859      	ldr	r1, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	221c      	movs	r2, #28
 8003700:	4013      	ands	r3, r2
 8003702:	2202      	movs	r2, #2
 8003704:	409a      	lsls	r2, r3
 8003706:	4b25      	ldr	r3, [pc, #148]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 8003708:	430a      	orrs	r2, r1
 800370a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2224      	movs	r2, #36	@ 0x24
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003718:	2b00      	cmp	r3, #0
 800371a:	d03a      	beq.n	8003792 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	0010      	movs	r0, r2
 8003724:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003726:	e034      	b.n	8003792 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	221c      	movs	r2, #28
 800372e:	4013      	ands	r3, r2
 8003730:	2208      	movs	r2, #8
 8003732:	409a      	lsls	r2, r3
 8003734:	0013      	movs	r3, r2
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4013      	ands	r3, r2
 800373a:	d02b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x158>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2208      	movs	r2, #8
 8003740:	4013      	ands	r3, r2
 8003742:	d027      	beq.n	8003794 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	210e      	movs	r1, #14
 8003750:	438a      	bics	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003754:	4b11      	ldr	r3, [pc, #68]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	221c      	movs	r2, #28
 800375e:	4013      	ands	r3, r2
 8003760:	2201      	movs	r2, #1
 8003762:	409a      	lsls	r2, r3
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <HAL_DMA_IRQHandler+0x160>)
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2225      	movs	r2, #37	@ 0x25
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	@ 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	0010      	movs	r0, r2
 8003790:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46c0      	nop			@ (mov r8, r8)
}
 8003796:	46bd      	mov	sp, r7
 8003798:	b004      	add	sp, #16
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40020000 	.word	0x40020000

080037a0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80037c8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <DMA_SetConfig+0x7c>)
 80037cc:	6859      	ldr	r1, [r3, #4]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	221c      	movs	r2, #28
 80037d4:	4013      	ands	r3, r2
 80037d6:	2201      	movs	r2, #1
 80037d8:	409a      	lsls	r2, r3
 80037da:	4b10      	ldr	r3, [pc, #64]	@ (800381c <DMA_SetConfig+0x7c>)
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d108      	bne.n	8003802 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003800:	e007      	b.n	8003812 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	60da      	str	r2, [r3, #12]
}
 8003812:	46c0      	nop			@ (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
 800381a:	46c0      	nop			@ (mov r8, r8)
 800381c:	40020000 	.word	0x40020000

08003820 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	089b      	lsrs	r3, r3, #2
 800382e:	4a10      	ldr	r2, [pc, #64]	@ (8003870 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003830:	4694      	mov	ip, r2
 8003832:	4463      	add	r3, ip
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	001a      	movs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	001a      	movs	r2, r3
 8003842:	23ff      	movs	r3, #255	@ 0xff
 8003844:	4013      	ands	r3, r2
 8003846:	3b08      	subs	r3, #8
 8003848:	2114      	movs	r1, #20
 800384a:	0018      	movs	r0, r3
 800384c:	f7fc fc5a 	bl	8000104 <__udivsi3>
 8003850:	0003      	movs	r3, r0
 8003852:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a07      	ldr	r2, [pc, #28]	@ (8003874 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003858:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	221f      	movs	r2, #31
 800385e:	4013      	ands	r3, r2
 8003860:	2201      	movs	r2, #1
 8003862:	409a      	lsls	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003868:	46c0      	nop			@ (mov r8, r8)
 800386a:	46bd      	mov	sp, r7
 800386c:	b004      	add	sp, #16
 800386e:	bd80      	pop	{r7, pc}
 8003870:	10008200 	.word	0x10008200
 8003874:	40020880 	.word	0x40020880

08003878 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	223f      	movs	r2, #63	@ 0x3f
 8003886:	4013      	ands	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a0a      	ldr	r2, [pc, #40]	@ (80038b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800388e:	4694      	mov	ip, r2
 8003890:	4463      	add	r3, ip
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	001a      	movs	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a07      	ldr	r2, [pc, #28]	@ (80038bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	2203      	movs	r2, #3
 80038a6:	4013      	ands	r3, r2
 80038a8:	2201      	movs	r2, #1
 80038aa:	409a      	lsls	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	659a      	str	r2, [r3, #88]	@ 0x58
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b004      	add	sp, #16
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	1000823f 	.word	0x1000823f
 80038bc:	40020940 	.word	0x40020940

080038c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038ca:	2300      	movs	r3, #0
 80038cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ce:	e147      	b.n	8003b60 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4091      	lsls	r1, r2
 80038da:	000a      	movs	r2, r1
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d100      	bne.n	80038e8 <HAL_GPIO_Init+0x28>
 80038e6:	e138      	b.n	8003b5a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2203      	movs	r2, #3
 80038ee:	4013      	ands	r3, r2
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d005      	beq.n	8003900 <HAL_GPIO_Init+0x40>
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d130      	bne.n	8003962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	43da      	mvns	r2, r3
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	4013      	ands	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	0013      	movs	r3, r2
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003936:	2201      	movs	r2, #1
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
 800393c:	0013      	movs	r3, r2
 800393e:	43da      	mvns	r2, r3
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4013      	ands	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	2201      	movs	r2, #1
 800394e:	401a      	ands	r2, r3
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	409a      	lsls	r2, r3
 8003954:	0013      	movs	r3, r2
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2203      	movs	r2, #3
 8003968:	4013      	ands	r3, r2
 800396a:	2b03      	cmp	r3, #3
 800396c:	d017      	beq.n	800399e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	2203      	movs	r2, #3
 800397a:	409a      	lsls	r2, r3
 800397c:	0013      	movs	r3, r2
 800397e:	43da      	mvns	r2, r3
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	409a      	lsls	r2, r3
 8003990:	0013      	movs	r3, r2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	4013      	ands	r3, r2
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d123      	bne.n	80039f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	08da      	lsrs	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3208      	adds	r2, #8
 80039b2:	0092      	lsls	r2, r2, #2
 80039b4:	58d3      	ldr	r3, [r2, r3]
 80039b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	2207      	movs	r2, #7
 80039bc:	4013      	ands	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	220f      	movs	r2, #15
 80039c2:	409a      	lsls	r2, r3
 80039c4:	0013      	movs	r3, r2
 80039c6:	43da      	mvns	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	691a      	ldr	r2, [r3, #16]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2107      	movs	r1, #7
 80039d6:	400b      	ands	r3, r1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	409a      	lsls	r2, r3
 80039dc:	0013      	movs	r3, r2
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	0092      	lsls	r2, r2, #2
 80039ee:	6939      	ldr	r1, [r7, #16]
 80039f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	005b      	lsls	r3, r3, #1
 80039fc:	2203      	movs	r2, #3
 80039fe:	409a      	lsls	r2, r3
 8003a00:	0013      	movs	r3, r2
 8003a02:	43da      	mvns	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	4013      	ands	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2203      	movs	r2, #3
 8003a10:	401a      	ands	r2, r3
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	409a      	lsls	r2, r3
 8003a18:	0013      	movs	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	23c0      	movs	r3, #192	@ 0xc0
 8003a2c:	029b      	lsls	r3, r3, #10
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d100      	bne.n	8003a34 <HAL_GPIO_Init+0x174>
 8003a32:	e092      	b.n	8003b5a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a34:	4a50      	ldr	r2, [pc, #320]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	3318      	adds	r3, #24
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	589b      	ldr	r3, [r3, r2]
 8003a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	220f      	movs	r2, #15
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	0013      	movs	r3, r2
 8003a50:	43da      	mvns	r2, r3
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4013      	ands	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	23a0      	movs	r3, #160	@ 0xa0
 8003a5c:	05db      	lsls	r3, r3, #23
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x1ca>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a45      	ldr	r2, [pc, #276]	@ (8003b7c <HAL_GPIO_Init+0x2bc>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x1c6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a44      	ldr	r2, [pc, #272]	@ (8003b80 <HAL_GPIO_Init+0x2c0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x1c2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a43      	ldr	r2, [pc, #268]	@ (8003b84 <HAL_GPIO_Init+0x2c4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x1be>
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e006      	b.n	8003a8c <HAL_GPIO_Init+0x1cc>
 8003a7e:	2305      	movs	r3, #5
 8003a80:	e004      	b.n	8003a8c <HAL_GPIO_Init+0x1cc>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e002      	b.n	8003a8c <HAL_GPIO_Init+0x1cc>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_GPIO_Init+0x1cc>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	2103      	movs	r1, #3
 8003a90:	400a      	ands	r2, r1
 8003a92:	00d2      	lsls	r2, r2, #3
 8003a94:	4093      	lsls	r3, r2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003a9c:	4936      	ldr	r1, [pc, #216]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	089b      	lsrs	r3, r3, #2
 8003aa2:	3318      	adds	r3, #24
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003aaa:	4b33      	ldr	r3, [pc, #204]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43da      	mvns	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	2380      	movs	r3, #128	@ 0x80
 8003ac0:	035b      	lsls	r3, r3, #13
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d003      	beq.n	8003ace <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ace:	4b2a      	ldr	r3, [pc, #168]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ad4:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43da      	mvns	r2, r3
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	2380      	movs	r3, #128	@ 0x80
 8003aea:	039b      	lsls	r3, r3, #14
 8003aec:	4013      	ands	r3, r2
 8003aee:	d003      	beq.n	8003af8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003af8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003afe:	4a1e      	ldr	r2, [pc, #120]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003b00:	2384      	movs	r3, #132	@ 0x84
 8003b02:	58d3      	ldr	r3, [r2, r3]
 8003b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	029b      	lsls	r3, r3, #10
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b24:	4914      	ldr	r1, [pc, #80]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003b26:	2284      	movs	r2, #132	@ 0x84
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b2c:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	58d3      	ldr	r3, [r2, r3]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43da      	mvns	r2, r3
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	2380      	movs	r3, #128	@ 0x80
 8003b44:	025b      	lsls	r3, r3, #9
 8003b46:	4013      	ands	r3, r2
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b52:	4909      	ldr	r1, [pc, #36]	@ (8003b78 <HAL_GPIO_Init+0x2b8>)
 8003b54:	2280      	movs	r2, #128	@ 0x80
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	40da      	lsrs	r2, r3
 8003b68:	1e13      	subs	r3, r2, #0
 8003b6a:	d000      	beq.n	8003b6e <HAL_GPIO_Init+0x2ae>
 8003b6c:	e6b0      	b.n	80038d0 <HAL_GPIO_Init+0x10>
  }
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	46c0      	nop			@ (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40021800 	.word	0x40021800
 8003b7c:	50000400 	.word	0x50000400
 8003b80:	50000800 	.word	0x50000800
 8003b84:	50000c00 	.word	0x50000c00

08003b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	0008      	movs	r0, r1
 8003b92:	0011      	movs	r1, r2
 8003b94:	1cbb      	adds	r3, r7, #2
 8003b96:	1c02      	adds	r2, r0, #0
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	1c7b      	adds	r3, r7, #1
 8003b9c:	1c0a      	adds	r2, r1, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba0:	1c7b      	adds	r3, r7, #1
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d004      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ba8:	1cbb      	adds	r3, r7, #2
 8003baa:	881a      	ldrh	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bb0:	e003      	b.n	8003bba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bb2:	1cbb      	adds	r3, r7, #2
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b002      	add	sp, #8
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003bcc:	4b19      	ldr	r3, [pc, #100]	@ (8003c34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a19      	ldr	r2, [pc, #100]	@ (8003c38 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d11f      	bne.n	8003c28 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003be8:	4b14      	ldr	r3, [pc, #80]	@ (8003c3c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	0013      	movs	r3, r2
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	189b      	adds	r3, r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4912      	ldr	r1, [pc, #72]	@ (8003c40 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7fc fa84 	bl	8000104 <__udivsi3>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c02:	e008      	b.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	e001      	b.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e009      	b.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c16:	4b07      	ldr	r3, [pc, #28]	@ (8003c34 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c18:	695a      	ldr	r2, [r3, #20]
 8003c1a:	2380      	movs	r3, #128	@ 0x80
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	401a      	ands	r2, r3
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d0ed      	beq.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b004      	add	sp, #16
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	40007000 	.word	0x40007000
 8003c38:	fffff9ff 	.word	0xfffff9ff
 8003c3c:	20000000 	.word	0x20000000
 8003c40:	000f4240 	.word	0x000f4240

08003c44 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	23e0      	movs	r3, #224	@ 0xe0
 8003c4e:	01db      	lsls	r3, r3, #7
 8003c50:	4013      	ands	r3, r2
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e2fe      	b.n	800426c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2201      	movs	r2, #1
 8003c74:	4013      	ands	r3, r2
 8003c76:	d100      	bne.n	8003c7a <HAL_RCC_OscConfig+0x1e>
 8003c78:	e07c      	b.n	8003d74 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c7a:	4bc3      	ldr	r3, [pc, #780]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	2238      	movs	r2, #56	@ 0x38
 8003c80:	4013      	ands	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c84:	4bc0      	ldr	r3, [pc, #768]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2203      	movs	r2, #3
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b10      	cmp	r3, #16
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0x3e>
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d002      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d10b      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca0:	4bb9      	ldr	r3, [pc, #740]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	@ 0x80
 8003ca6:	029b      	lsls	r3, r3, #10
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d062      	beq.n	8003d72 <HAL_RCC_OscConfig+0x116>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d15e      	bne.n	8003d72 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e2d9      	b.n	800426c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	2380      	movs	r3, #128	@ 0x80
 8003cbe:	025b      	lsls	r3, r3, #9
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d107      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x78>
 8003cc4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4baf      	ldr	r3, [pc, #700]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003cca:	2180      	movs	r1, #128	@ 0x80
 8003ccc:	0249      	lsls	r1, r1, #9
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e020      	b.n	8003d16 <HAL_RCC_OscConfig+0xba>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	23a0      	movs	r3, #160	@ 0xa0
 8003cda:	02db      	lsls	r3, r3, #11
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d10e      	bne.n	8003cfe <HAL_RCC_OscConfig+0xa2>
 8003ce0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4ba8      	ldr	r3, [pc, #672]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	2180      	movs	r1, #128	@ 0x80
 8003ce8:	02c9      	lsls	r1, r1, #11
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	4ba6      	ldr	r3, [pc, #664]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4ba5      	ldr	r3, [pc, #660]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	2180      	movs	r1, #128	@ 0x80
 8003cf6:	0249      	lsls	r1, r1, #9
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	e00b      	b.n	8003d16 <HAL_RCC_OscConfig+0xba>
 8003cfe:	4ba2      	ldr	r3, [pc, #648]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	4ba1      	ldr	r3, [pc, #644]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	49a1      	ldr	r1, [pc, #644]	@ (8003f8c <HAL_RCC_OscConfig+0x330>)
 8003d06:	400a      	ands	r2, r1
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	4b9f      	ldr	r3, [pc, #636]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b9e      	ldr	r3, [pc, #632]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d10:	499f      	ldr	r1, [pc, #636]	@ (8003f90 <HAL_RCC_OscConfig+0x334>)
 8003d12:	400a      	ands	r2, r1
 8003d14:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d014      	beq.n	8003d48 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1e:	f7fe f99d 	bl	800205c <HAL_GetTick>
 8003d22:	0003      	movs	r3, r0
 8003d24:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe f998 	bl	800205c <HAL_GetTick>
 8003d2c:	0002      	movs	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	@ 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e298      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	4b93      	ldr	r3, [pc, #588]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	029b      	lsls	r3, r3, #10
 8003d42:	4013      	ands	r3, r2
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0xcc>
 8003d46:	e015      	b.n	8003d74 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe f988 	bl	800205c <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d52:	f7fe f983 	bl	800205c <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b64      	cmp	r3, #100	@ 0x64
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e283      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d64:	4b88      	ldr	r3, [pc, #544]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d1f0      	bne.n	8003d52 <HAL_RCC_OscConfig+0xf6>
 8003d70:	e000      	b.n	8003d74 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d100      	bne.n	8003d80 <HAL_RCC_OscConfig+0x124>
 8003d7e:	e099      	b.n	8003eb4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d80:	4b81      	ldr	r3, [pc, #516]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2238      	movs	r2, #56	@ 0x38
 8003d86:	4013      	ands	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2203      	movs	r2, #3
 8003d90:	4013      	ands	r3, r2
 8003d92:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d102      	bne.n	8003da0 <HAL_RCC_OscConfig+0x144>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d002      	beq.n	8003da6 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d135      	bne.n	8003e12 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da6:	4b78      	ldr	r3, [pc, #480]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	@ 0x80
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4013      	ands	r3, r2
 8003db0:	d005      	beq.n	8003dbe <HAL_RCC_OscConfig+0x162>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e256      	b.n	800426c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dbe:	4b72      	ldr	r3, [pc, #456]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	4a74      	ldr	r2, [pc, #464]	@ (8003f94 <HAL_RCC_OscConfig+0x338>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	021a      	lsls	r2, r3, #8
 8003dce:	4b6e      	ldr	r3, [pc, #440]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dda:	4b6b      	ldr	r3, [pc, #428]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a6e      	ldr	r2, [pc, #440]	@ (8003f98 <HAL_RCC_OscConfig+0x33c>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	4b67      	ldr	r3, [pc, #412]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003dea:	430a      	orrs	r2, r1
 8003dec:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003dee:	4b66      	ldr	r3, [pc, #408]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0adb      	lsrs	r3, r3, #11
 8003df4:	2207      	movs	r2, #7
 8003df6:	4013      	ands	r3, r2
 8003df8:	4a68      	ldr	r2, [pc, #416]	@ (8003f9c <HAL_RCC_OscConfig+0x340>)
 8003dfa:	40da      	lsrs	r2, r3
 8003dfc:	4b68      	ldr	r3, [pc, #416]	@ (8003fa0 <HAL_RCC_OscConfig+0x344>)
 8003dfe:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e00:	4b68      	ldr	r3, [pc, #416]	@ (8003fa4 <HAL_RCC_OscConfig+0x348>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	0018      	movs	r0, r3
 8003e06:	f7fe f8cd 	bl	8001fa4 <HAL_InitTick>
 8003e0a:	1e03      	subs	r3, r0, #0
 8003e0c:	d051      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e22c      	b.n	800426c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d030      	beq.n	8003e7c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f98 <HAL_RCC_OscConfig+0x33c>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	4b57      	ldr	r3, [pc, #348]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003e2e:	4b56      	ldr	r3, [pc, #344]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4b55      	ldr	r3, [pc, #340]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	2180      	movs	r1, #128	@ 0x80
 8003e36:	0049      	lsls	r1, r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe f90e 	bl	800205c <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e46:	f7fe f909 	bl	800205c <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e209      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e58:	4b4b      	ldr	r3, [pc, #300]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	@ 0x80
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4013      	ands	r3, r2
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e64:	4b48      	ldr	r3, [pc, #288]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	4a4a      	ldr	r2, [pc, #296]	@ (8003f94 <HAL_RCC_OscConfig+0x338>)
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	021a      	lsls	r2, r3, #8
 8003e74:	4b44      	ldr	r3, [pc, #272]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e76:	430a      	orrs	r2, r1
 8003e78:	605a      	str	r2, [r3, #4]
 8003e7a:	e01b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e7c:	4b42      	ldr	r3, [pc, #264]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b41      	ldr	r3, [pc, #260]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003e82:	4949      	ldr	r1, [pc, #292]	@ (8003fa8 <HAL_RCC_OscConfig+0x34c>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e88:	f7fe f8e8 	bl	800205c <HAL_GetTick>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe f8e3 	bl	800205c <HAL_GetTick>
 8003e96:	0002      	movs	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e1e3      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ea4:	4b38      	ldr	r3, [pc, #224]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	@ 0x80
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4013      	ands	r3, r2
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x236>
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2208      	movs	r2, #8
 8003eba:	4013      	ands	r3, r2
 8003ebc:	d047      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003ebe:	4b32      	ldr	r3, [pc, #200]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2238      	movs	r2, #56	@ 0x38
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	2b18      	cmp	r3, #24
 8003ec8:	d10a      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003eca:	4b2f      	ldr	r3, [pc, #188]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d03c      	beq.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d138      	bne.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e1c5      	b.n	800426c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d019      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003ee8:	4b27      	ldr	r3, [pc, #156]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003eea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003eec:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003eee:	2101      	movs	r1, #1
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef4:	f7fe f8b2 	bl	800205c <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003efc:	e008      	b.n	8003f10 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003efe:	f7fe f8ad 	bl	800205c <HAL_GetTick>
 8003f02:	0002      	movs	r2, r0
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e1ad      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f10:	4b1d      	ldr	r3, [pc, #116]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f14:	2202      	movs	r2, #2
 8003f16:	4013      	ands	r3, r2
 8003f18:	d0f1      	beq.n	8003efe <HAL_RCC_OscConfig+0x2a2>
 8003f1a:	e018      	b.n	8003f4e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f1e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f20:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f22:	2101      	movs	r1, #1
 8003f24:	438a      	bics	r2, r1
 8003f26:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fe f898 	bl	800205c <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f32:	f7fe f893 	bl	800205c <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e193      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f44:	4b10      	ldr	r3, [pc, #64]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f48:	2202      	movs	r2, #2
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d1f1      	bne.n	8003f32 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2204      	movs	r2, #4
 8003f54:	4013      	ands	r3, r2
 8003f56:	d100      	bne.n	8003f5a <HAL_RCC_OscConfig+0x2fe>
 8003f58:	e0c6      	b.n	80040e8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	231f      	movs	r3, #31
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2200      	movs	r2, #0
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f62:	4b09      	ldr	r3, [pc, #36]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2238      	movs	r2, #56	@ 0x38
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	d11e      	bne.n	8003fac <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCC_OscConfig+0x32c>)
 8003f70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f72:	2202      	movs	r2, #2
 8003f74:	4013      	ands	r3, r2
 8003f76:	d100      	bne.n	8003f7a <HAL_RCC_OscConfig+0x31e>
 8003f78:	e0b6      	b.n	80040e8 <HAL_RCC_OscConfig+0x48c>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d000      	beq.n	8003f84 <HAL_RCC_OscConfig+0x328>
 8003f82:	e0b1      	b.n	80040e8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e171      	b.n	800426c <HAL_RCC_OscConfig+0x610>
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	fffeffff 	.word	0xfffeffff
 8003f90:	fffbffff 	.word	0xfffbffff
 8003f94:	ffff80ff 	.word	0xffff80ff
 8003f98:	ffffc7ff 	.word	0xffffc7ff
 8003f9c:	00f42400 	.word	0x00f42400
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	20000004 	.word	0x20000004
 8003fa8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fac:	4bb1      	ldr	r3, [pc, #708]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8003fae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fb0:	2380      	movs	r3, #128	@ 0x80
 8003fb2:	055b      	lsls	r3, r3, #21
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x360>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e000      	b.n	8003fbe <HAL_RCC_OscConfig+0x362>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003fc2:	4bac      	ldr	r3, [pc, #688]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8003fc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fc6:	4bab      	ldr	r3, [pc, #684]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	0549      	lsls	r1, r1, #21
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003fd0:	4ba8      	ldr	r3, [pc, #672]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8003fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd4:	2380      	movs	r3, #128	@ 0x80
 8003fd6:	055b      	lsls	r3, r3, #21
 8003fd8:	4013      	ands	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003fde:	231f      	movs	r3, #31
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe6:	4ba4      	ldr	r3, [pc, #656]	@ (8004278 <HAL_RCC_OscConfig+0x61c>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d11a      	bne.n	8004028 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ff2:	4ba1      	ldr	r3, [pc, #644]	@ (8004278 <HAL_RCC_OscConfig+0x61c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4ba0      	ldr	r3, [pc, #640]	@ (8004278 <HAL_RCC_OscConfig+0x61c>)
 8003ff8:	2180      	movs	r1, #128	@ 0x80
 8003ffa:	0049      	lsls	r1, r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004000:	f7fe f82c 	bl	800205c <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fe f827 	bl	800205c <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e127      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401c:	4b96      	ldr	r3, [pc, #600]	@ (8004278 <HAL_RCC_OscConfig+0x61c>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4013      	ands	r3, r2
 8004026:	d0f0      	beq.n	800400a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x3e2>
 8004030:	4b90      	ldr	r3, [pc, #576]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004032:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004034:	4b8f      	ldr	r3, [pc, #572]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004036:	2101      	movs	r1, #1
 8004038:	430a      	orrs	r2, r1
 800403a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800403c:	e01c      	b.n	8004078 <HAL_RCC_OscConfig+0x41c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b05      	cmp	r3, #5
 8004044:	d10c      	bne.n	8004060 <HAL_RCC_OscConfig+0x404>
 8004046:	4b8b      	ldr	r3, [pc, #556]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004048:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800404a:	4b8a      	ldr	r3, [pc, #552]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800404c:	2104      	movs	r1, #4
 800404e:	430a      	orrs	r2, r1
 8004050:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004052:	4b88      	ldr	r3, [pc, #544]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004054:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004056:	4b87      	ldr	r3, [pc, #540]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004058:	2101      	movs	r1, #1
 800405a:	430a      	orrs	r2, r1
 800405c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800405e:	e00b      	b.n	8004078 <HAL_RCC_OscConfig+0x41c>
 8004060:	4b84      	ldr	r3, [pc, #528]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004062:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004064:	4b83      	ldr	r3, [pc, #524]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004066:	2101      	movs	r1, #1
 8004068:	438a      	bics	r2, r1
 800406a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800406c:	4b81      	ldr	r3, [pc, #516]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800406e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004070:	4b80      	ldr	r3, [pc, #512]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004072:	2104      	movs	r1, #4
 8004074:	438a      	bics	r2, r1
 8004076:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d014      	beq.n	80040aa <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7fd ffec 	bl	800205c <HAL_GetTick>
 8004084:	0003      	movs	r3, r0
 8004086:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004088:	e009      	b.n	800409e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408a:	f7fd ffe7 	bl	800205c <HAL_GetTick>
 800408e:	0002      	movs	r2, r0
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	4a79      	ldr	r2, [pc, #484]	@ (800427c <HAL_RCC_OscConfig+0x620>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0e6      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800409e:	4b75      	ldr	r3, [pc, #468]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80040a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a2:	2202      	movs	r2, #2
 80040a4:	4013      	ands	r3, r2
 80040a6:	d0f0      	beq.n	800408a <HAL_RCC_OscConfig+0x42e>
 80040a8:	e013      	b.n	80040d2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd ffd7 	bl	800205c <HAL_GetTick>
 80040ae:	0003      	movs	r3, r0
 80040b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b2:	e009      	b.n	80040c8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b4:	f7fd ffd2 	bl	800205c <HAL_GetTick>
 80040b8:	0002      	movs	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	4a6f      	ldr	r2, [pc, #444]	@ (800427c <HAL_RCC_OscConfig+0x620>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e0d1      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80040ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040cc:	2202      	movs	r2, #2
 80040ce:	4013      	ands	r3, r2
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80040d2:	231f      	movs	r3, #31
 80040d4:	18fb      	adds	r3, r7, r3
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d105      	bne.n	80040e8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80040dc:	4b65      	ldr	r3, [pc, #404]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80040de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040e0:	4b64      	ldr	r3, [pc, #400]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80040e2:	4967      	ldr	r1, [pc, #412]	@ (8004280 <HAL_RCC_OscConfig+0x624>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d100      	bne.n	80040f2 <HAL_RCC_OscConfig+0x496>
 80040f0:	e0bb      	b.n	800426a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f2:	4b60      	ldr	r3, [pc, #384]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2238      	movs	r2, #56	@ 0x38
 80040f8:	4013      	ands	r3, r2
 80040fa:	2b10      	cmp	r3, #16
 80040fc:	d100      	bne.n	8004100 <HAL_RCC_OscConfig+0x4a4>
 80040fe:	e07b      	b.n	80041f8 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d156      	bne.n	80041b6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004108:	4b5a      	ldr	r3, [pc, #360]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800410e:	495d      	ldr	r1, [pc, #372]	@ (8004284 <HAL_RCC_OscConfig+0x628>)
 8004110:	400a      	ands	r2, r1
 8004112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004114:	f7fd ffa2 	bl	800205c <HAL_GetTick>
 8004118:	0003      	movs	r3, r0
 800411a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411e:	f7fd ff9d 	bl	800205c <HAL_GetTick>
 8004122:	0002      	movs	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e09d      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004130:	4b50      	ldr	r3, [pc, #320]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2380      	movs	r3, #128	@ 0x80
 8004136:	049b      	lsls	r3, r3, #18
 8004138:	4013      	ands	r3, r2
 800413a:	d1f0      	bne.n	800411e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800413c:	4b4d      	ldr	r3, [pc, #308]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a51      	ldr	r2, [pc, #324]	@ (8004288 <HAL_RCC_OscConfig+0x62c>)
 8004142:	4013      	ands	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004154:	021b      	lsls	r3, r3, #8
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004168:	431a      	orrs	r2, r3
 800416a:	4b42      	ldr	r3, [pc, #264]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 800416c:	430a      	orrs	r2, r1
 800416e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004170:	4b40      	ldr	r3, [pc, #256]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b3f      	ldr	r3, [pc, #252]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004176:	2180      	movs	r1, #128	@ 0x80
 8004178:	0449      	lsls	r1, r1, #17
 800417a:	430a      	orrs	r2, r1
 800417c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800417e:	4b3d      	ldr	r3, [pc, #244]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	4b3c      	ldr	r3, [pc, #240]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004184:	2180      	movs	r1, #128	@ 0x80
 8004186:	0549      	lsls	r1, r1, #21
 8004188:	430a      	orrs	r2, r1
 800418a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418c:	f7fd ff66 	bl	800205c <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004196:	f7fd ff61 	bl	800205c <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e061      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a8:	4b32      	ldr	r3, [pc, #200]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	049b      	lsls	r3, r3, #18
 80041b0:	4013      	ands	r3, r2
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x53a>
 80041b4:	e059      	b.n	800426a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041bc:	4931      	ldr	r1, [pc, #196]	@ (8004284 <HAL_RCC_OscConfig+0x628>)
 80041be:	400a      	ands	r2, r1
 80041c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd ff4b 	bl	800205c <HAL_GetTick>
 80041c6:	0003      	movs	r3, r0
 80041c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd ff46 	bl	800205c <HAL_GetTick>
 80041d0:	0002      	movs	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e046      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041de:	4b25      	ldr	r3, [pc, #148]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	2380      	movs	r3, #128	@ 0x80
 80041e4:	049b      	lsls	r3, r3, #18
 80041e6:	4013      	ands	r3, r2
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80041ea:	4b22      	ldr	r3, [pc, #136]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4b21      	ldr	r3, [pc, #132]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 80041f0:	4926      	ldr	r1, [pc, #152]	@ (800428c <HAL_RCC_OscConfig+0x630>)
 80041f2:	400a      	ands	r2, r1
 80041f4:	60da      	str	r2, [r3, #12]
 80041f6:	e038      	b.n	800426a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e033      	b.n	800426c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004204:	4b1b      	ldr	r3, [pc, #108]	@ (8004274 <HAL_RCC_OscConfig+0x618>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2203      	movs	r2, #3
 800420e:	401a      	ands	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	429a      	cmp	r2, r3
 8004216:	d126      	bne.n	8004266 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2270      	movs	r2, #112	@ 0x70
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d11f      	bne.n	8004266 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	23fe      	movs	r3, #254	@ 0xfe
 800422a:	01db      	lsls	r3, r3, #7
 800422c:	401a      	ands	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004232:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d116      	bne.n	8004266 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	23f8      	movs	r3, #248	@ 0xf8
 800423c:	039b      	lsls	r3, r3, #14
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004244:	429a      	cmp	r2, r3
 8004246:	d10e      	bne.n	8004266 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	23e0      	movs	r3, #224	@ 0xe0
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	401a      	ands	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d106      	bne.n	8004266 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	0f5b      	lsrs	r3, r3, #29
 800425c:	075a      	lsls	r2, r3, #29
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b008      	add	sp, #32
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	40007000 	.word	0x40007000
 800427c:	00001388 	.word	0x00001388
 8004280:	efffffff 	.word	0xefffffff
 8004284:	feffffff 	.word	0xfeffffff
 8004288:	11c1808c 	.word	0x11c1808c
 800428c:	eefefffc 	.word	0xeefefffc

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0e9      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b76      	ldr	r3, [pc, #472]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2207      	movs	r2, #7
 80042aa:	4013      	ands	r3, r2
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d91e      	bls.n	80042f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b73      	ldr	r3, [pc, #460]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2207      	movs	r2, #7
 80042b8:	4393      	bics	r3, r2
 80042ba:	0019      	movs	r1, r3
 80042bc:	4b70      	ldr	r3, [pc, #448]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80042c4:	f7fd feca 	bl	800205c <HAL_GetTick>
 80042c8:	0003      	movs	r3, r0
 80042ca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042cc:	e009      	b.n	80042e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ce:	f7fd fec5 	bl	800205c <HAL_GetTick>
 80042d2:	0002      	movs	r2, r0
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	4a6a      	ldr	r2, [pc, #424]	@ (8004484 <HAL_RCC_ClockConfig+0x1f4>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e0ca      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80042e2:	4b67      	ldr	r3, [pc, #412]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2207      	movs	r2, #7
 80042e8:	4013      	ands	r3, r2
 80042ea:	683a      	ldr	r2, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d1ee      	bne.n	80042ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2202      	movs	r2, #2
 80042f6:	4013      	ands	r3, r2
 80042f8:	d015      	beq.n	8004326 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2204      	movs	r2, #4
 8004300:	4013      	ands	r3, r2
 8004302:	d006      	beq.n	8004312 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004304:	4b60      	ldr	r3, [pc, #384]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b5f      	ldr	r3, [pc, #380]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 800430a:	21e0      	movs	r1, #224	@ 0xe0
 800430c:	01c9      	lsls	r1, r1, #7
 800430e:	430a      	orrs	r2, r1
 8004310:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004312:	4b5d      	ldr	r3, [pc, #372]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	4a5d      	ldr	r2, [pc, #372]	@ (800448c <HAL_RCC_ClockConfig+0x1fc>)
 8004318:	4013      	ands	r3, r2
 800431a:	0019      	movs	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	4b59      	ldr	r3, [pc, #356]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004322:	430a      	orrs	r2, r1
 8004324:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2201      	movs	r2, #1
 800432c:	4013      	ands	r3, r2
 800432e:	d057      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d107      	bne.n	8004348 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004338:	4b53      	ldr	r3, [pc, #332]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2380      	movs	r3, #128	@ 0x80
 800433e:	029b      	lsls	r3, r3, #10
 8004340:	4013      	ands	r3, r2
 8004342:	d12b      	bne.n	800439c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e097      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b02      	cmp	r3, #2
 800434e:	d107      	bne.n	8004360 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004350:	4b4d      	ldr	r3, [pc, #308]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	@ 0x80
 8004356:	049b      	lsls	r3, r3, #18
 8004358:	4013      	ands	r3, r2
 800435a:	d11f      	bne.n	800439c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e08b      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d107      	bne.n	8004378 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004368:	4b47      	ldr	r3, [pc, #284]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	2380      	movs	r3, #128	@ 0x80
 800436e:	00db      	lsls	r3, r3, #3
 8004370:	4013      	ands	r3, r2
 8004372:	d113      	bne.n	800439c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e07f      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	2b03      	cmp	r3, #3
 800437e:	d106      	bne.n	800438e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004380:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004382:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004384:	2202      	movs	r2, #2
 8004386:	4013      	ands	r3, r2
 8004388:	d108      	bne.n	800439c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e074      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438e:	4b3e      	ldr	r3, [pc, #248]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004392:	2202      	movs	r2, #2
 8004394:	4013      	ands	r3, r2
 8004396:	d101      	bne.n	800439c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e06d      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800439c:	4b3a      	ldr	r3, [pc, #232]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2207      	movs	r2, #7
 80043a2:	4393      	bics	r3, r2
 80043a4:	0019      	movs	r1, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	4b37      	ldr	r3, [pc, #220]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 80043ac:	430a      	orrs	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043b0:	f7fd fe54 	bl	800205c <HAL_GetTick>
 80043b4:	0003      	movs	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043b8:	e009      	b.n	80043ce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ba:	f7fd fe4f 	bl	800205c <HAL_GetTick>
 80043be:	0002      	movs	r2, r0
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	4a2f      	ldr	r2, [pc, #188]	@ (8004484 <HAL_RCC_ClockConfig+0x1f4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e054      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2238      	movs	r2, #56	@ 0x38
 80043d4:	401a      	ands	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	429a      	cmp	r2, r3
 80043de:	d1ec      	bne.n	80043ba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043e0:	4b27      	ldr	r3, [pc, #156]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2207      	movs	r2, #7
 80043e6:	4013      	ands	r3, r2
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d21e      	bcs.n	800442c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b24      	ldr	r3, [pc, #144]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2207      	movs	r2, #7
 80043f4:	4393      	bics	r3, r2
 80043f6:	0019      	movs	r1, r3
 80043f8:	4b21      	ldr	r3, [pc, #132]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	430a      	orrs	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004400:	f7fd fe2c 	bl	800205c <HAL_GetTick>
 8004404:	0003      	movs	r3, r0
 8004406:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004408:	e009      	b.n	800441e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800440a:	f7fd fe27 	bl	800205c <HAL_GetTick>
 800440e:	0002      	movs	r2, r0
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	4a1b      	ldr	r2, [pc, #108]	@ (8004484 <HAL_RCC_ClockConfig+0x1f4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e02c      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800441e:	4b18      	ldr	r3, [pc, #96]	@ (8004480 <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2207      	movs	r2, #7
 8004424:	4013      	ands	r3, r2
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	429a      	cmp	r2, r3
 800442a:	d1ee      	bne.n	800440a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2204      	movs	r2, #4
 8004432:	4013      	ands	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004436:	4b14      	ldr	r3, [pc, #80]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	4a15      	ldr	r2, [pc, #84]	@ (8004490 <HAL_RCC_ClockConfig+0x200>)
 800443c:	4013      	ands	r3, r2
 800443e:	0019      	movs	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68da      	ldr	r2, [r3, #12]
 8004444:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004446:	430a      	orrs	r2, r1
 8004448:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800444a:	f000 f829 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800444e:	0001      	movs	r1, r0
 8004450:	4b0d      	ldr	r3, [pc, #52]	@ (8004488 <HAL_RCC_ClockConfig+0x1f8>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	0a1b      	lsrs	r3, r3, #8
 8004456:	220f      	movs	r2, #15
 8004458:	401a      	ands	r2, r3
 800445a:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <HAL_RCC_ClockConfig+0x204>)
 800445c:	0092      	lsls	r2, r2, #2
 800445e:	58d3      	ldr	r3, [r2, r3]
 8004460:	221f      	movs	r2, #31
 8004462:	4013      	ands	r3, r2
 8004464:	000a      	movs	r2, r1
 8004466:	40da      	lsrs	r2, r3
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_RCC_ClockConfig+0x208>)
 800446a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800446c:	4b0b      	ldr	r3, [pc, #44]	@ (800449c <HAL_RCC_ClockConfig+0x20c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0018      	movs	r0, r3
 8004472:	f7fd fd97 	bl	8001fa4 <HAL_InitTick>
 8004476:	0003      	movs	r3, r0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b004      	add	sp, #16
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40022000 	.word	0x40022000
 8004484:	00001388 	.word	0x00001388
 8004488:	40021000 	.word	0x40021000
 800448c:	fffff0ff 	.word	0xfffff0ff
 8004490:	ffff8fff 	.word	0xffff8fff
 8004494:	08007814 	.word	0x08007814
 8004498:	20000000 	.word	0x20000000
 800449c:	20000004 	.word	0x20000004

080044a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2238      	movs	r2, #56	@ 0x38
 80044ac:	4013      	ands	r3, r2
 80044ae:	d10f      	bne.n	80044d0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80044b0:	4b39      	ldr	r3, [pc, #228]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	0adb      	lsrs	r3, r3, #11
 80044b6:	2207      	movs	r2, #7
 80044b8:	4013      	ands	r3, r2
 80044ba:	2201      	movs	r2, #1
 80044bc:	409a      	lsls	r2, r3
 80044be:	0013      	movs	r3, r2
 80044c0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80044c2:	6839      	ldr	r1, [r7, #0]
 80044c4:	4835      	ldr	r0, [pc, #212]	@ (800459c <HAL_RCC_GetSysClockFreq+0xfc>)
 80044c6:	f7fb fe1d 	bl	8000104 <__udivsi3>
 80044ca:	0003      	movs	r3, r0
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	e05d      	b.n	800458c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b31      	ldr	r3, [pc, #196]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2238      	movs	r2, #56	@ 0x38
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b08      	cmp	r3, #8
 80044da:	d102      	bne.n	80044e2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044dc:	4b30      	ldr	r3, [pc, #192]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x100>)
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	e054      	b.n	800458c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2238      	movs	r2, #56	@ 0x38
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d138      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80044ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2203      	movs	r2, #3
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f8:	4b27      	ldr	r3, [pc, #156]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	091b      	lsrs	r3, r3, #4
 80044fe:	2207      	movs	r2, #7
 8004500:	4013      	ands	r3, r2
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2b03      	cmp	r3, #3
 800450a:	d10d      	bne.n	8004528 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4824      	ldr	r0, [pc, #144]	@ (80045a0 <HAL_RCC_GetSysClockFreq+0x100>)
 8004510:	f7fb fdf8 	bl	8000104 <__udivsi3>
 8004514:	0003      	movs	r3, r0
 8004516:	0019      	movs	r1, r3
 8004518:	4b1f      	ldr	r3, [pc, #124]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	0a1b      	lsrs	r3, r3, #8
 800451e:	227f      	movs	r2, #127	@ 0x7f
 8004520:	4013      	ands	r3, r2
 8004522:	434b      	muls	r3, r1
 8004524:	617b      	str	r3, [r7, #20]
        break;
 8004526:	e00d      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004528:	68b9      	ldr	r1, [r7, #8]
 800452a:	481c      	ldr	r0, [pc, #112]	@ (800459c <HAL_RCC_GetSysClockFreq+0xfc>)
 800452c:	f7fb fdea 	bl	8000104 <__udivsi3>
 8004530:	0003      	movs	r3, r0
 8004532:	0019      	movs	r1, r3
 8004534:	4b18      	ldr	r3, [pc, #96]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	0a1b      	lsrs	r3, r3, #8
 800453a:	227f      	movs	r2, #127	@ 0x7f
 800453c:	4013      	ands	r3, r2
 800453e:	434b      	muls	r3, r1
 8004540:	617b      	str	r3, [r7, #20]
        break;
 8004542:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004544:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	0f5b      	lsrs	r3, r3, #29
 800454a:	2207      	movs	r2, #7
 800454c:	4013      	ands	r3, r2
 800454e:	3301      	adds	r3, #1
 8004550:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004552:	6879      	ldr	r1, [r7, #4]
 8004554:	6978      	ldr	r0, [r7, #20]
 8004556:	f7fb fdd5 	bl	8000104 <__udivsi3>
 800455a:	0003      	movs	r3, r0
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e015      	b.n	800458c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004560:	4b0d      	ldr	r3, [pc, #52]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2238      	movs	r2, #56	@ 0x38
 8004566:	4013      	ands	r3, r2
 8004568:	2b20      	cmp	r3, #32
 800456a:	d103      	bne.n	8004574 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800456c:	2380      	movs	r3, #128	@ 0x80
 800456e:	021b      	lsls	r3, r3, #8
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	e00b      	b.n	800458c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2238      	movs	r2, #56	@ 0x38
 800457a:	4013      	ands	r3, r2
 800457c:	2b18      	cmp	r3, #24
 800457e:	d103      	bne.n	8004588 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004580:	23fa      	movs	r3, #250	@ 0xfa
 8004582:	01db      	lsls	r3, r3, #7
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	e001      	b.n	800458c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800458c:	693b      	ldr	r3, [r7, #16]
}
 800458e:	0018      	movs	r0, r3
 8004590:	46bd      	mov	sp, r7
 8004592:	b006      	add	sp, #24
 8004594:	bd80      	pop	{r7, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	40021000 	.word	0x40021000
 800459c:	00f42400 	.word	0x00f42400
 80045a0:	007a1200 	.word	0x007a1200

080045a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a8:	4b02      	ldr	r3, [pc, #8]	@ (80045b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80045aa:	681b      	ldr	r3, [r3, #0]
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	46c0      	nop			@ (mov r8, r8)
 80045b4:	20000000 	.word	0x20000000

080045b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b8:	b5b0      	push	{r4, r5, r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80045bc:	f7ff fff2 	bl	80045a4 <HAL_RCC_GetHCLKFreq>
 80045c0:	0004      	movs	r4, r0
 80045c2:	f7ff fb3f 	bl	8003c44 <LL_RCC_GetAPB1Prescaler>
 80045c6:	0003      	movs	r3, r0
 80045c8:	0b1a      	lsrs	r2, r3, #12
 80045ca:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045cc:	0092      	lsls	r2, r2, #2
 80045ce:	58d3      	ldr	r3, [r2, r3]
 80045d0:	221f      	movs	r2, #31
 80045d2:	4013      	ands	r3, r2
 80045d4:	40dc      	lsrs	r4, r3
 80045d6:	0023      	movs	r3, r4
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	bdb0      	pop	{r4, r5, r7, pc}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	08007854 	.word	0x08007854

080045e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e056      	b.n	80046a4 <HAL_TIM_Base_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	223d      	movs	r2, #61	@ 0x3d
 80045fa:	5c9b      	ldrb	r3, [r3, r2]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223c      	movs	r2, #60	@ 0x3c
 8004606:	2100      	movs	r1, #0
 8004608:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0018      	movs	r0, r3
 800460e:	f001 fe3f 	bl	8006290 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <HAL_TIM_Base_Init+0xc8>)
 800461e:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	0010      	movs	r0, r2
 8004628:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	223d      	movs	r2, #61	@ 0x3d
 800462e:	2102      	movs	r1, #2
 8004630:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3304      	adds	r3, #4
 800463a:	0019      	movs	r1, r3
 800463c:	0010      	movs	r0, r2
 800463e:	f001 f929 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2248      	movs	r2, #72	@ 0x48
 8004646:	2101      	movs	r1, #1
 8004648:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	223e      	movs	r2, #62	@ 0x3e
 800464e:	2101      	movs	r1, #1
 8004650:	5499      	strb	r1, [r3, r2]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	223f      	movs	r2, #63	@ 0x3f
 8004656:	2101      	movs	r1, #1
 8004658:	5499      	strb	r1, [r3, r2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2240      	movs	r2, #64	@ 0x40
 800465e:	2101      	movs	r1, #1
 8004660:	5499      	strb	r1, [r3, r2]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2241      	movs	r2, #65	@ 0x41
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2242      	movs	r2, #66	@ 0x42
 800466e:	2101      	movs	r1, #1
 8004670:	5499      	strb	r1, [r3, r2]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2243      	movs	r2, #67	@ 0x43
 8004676:	2101      	movs	r1, #1
 8004678:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2244      	movs	r2, #68	@ 0x44
 800467e:	2101      	movs	r1, #1
 8004680:	5499      	strb	r1, [r3, r2]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2245      	movs	r2, #69	@ 0x45
 8004686:	2101      	movs	r1, #1
 8004688:	5499      	strb	r1, [r3, r2]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2246      	movs	r2, #70	@ 0x46
 800468e:	2101      	movs	r1, #1
 8004690:	5499      	strb	r1, [r3, r2]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2247      	movs	r2, #71	@ 0x47
 8004696:	2101      	movs	r1, #1
 8004698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	223d      	movs	r2, #61	@ 0x3d
 800469e:	2101      	movs	r1, #1
 80046a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	0018      	movs	r0, r3
 80046a6:	46bd      	mov	sp, r7
 80046a8:	b002      	add	sp, #8
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	08001319 	.word	0x08001319

080046b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	223d      	movs	r2, #61	@ 0x3d
 80046bc:	5c9b      	ldrb	r3, [r3, r2]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e035      	b.n	8004734 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	223d      	movs	r2, #61	@ 0x3d
 80046cc:	2102      	movs	r1, #2
 80046ce:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a19      	ldr	r2, [pc, #100]	@ (800473c <HAL_TIM_Base_Start+0x8c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00a      	beq.n	80046f0 <HAL_TIM_Base_Start+0x40>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	2380      	movs	r3, #128	@ 0x80
 80046e0:	05db      	lsls	r3, r3, #23
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d004      	beq.n	80046f0 <HAL_TIM_Base_Start+0x40>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a15      	ldr	r2, [pc, #84]	@ (8004740 <HAL_TIM_Base_Start+0x90>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d116      	bne.n	800471e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	4a13      	ldr	r2, [pc, #76]	@ (8004744 <HAL_TIM_Base_Start+0x94>)
 80046f8:	4013      	ands	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2b06      	cmp	r3, #6
 8004700:	d016      	beq.n	8004730 <HAL_TIM_Base_Start+0x80>
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	025b      	lsls	r3, r3, #9
 8004708:	429a      	cmp	r2, r3
 800470a:	d011      	beq.n	8004730 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2101      	movs	r1, #1
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800471c:	e008      	b.n	8004730 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	430a      	orrs	r2, r1
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	e000      	b.n	8004732 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40000400 	.word	0x40000400
 8004744:	00010007 	.word	0x00010007

08004748 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e056      	b.n	8004808 <HAL_TIM_OC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	223d      	movs	r2, #61	@ 0x3d
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d113      	bne.n	800478e <HAL_TIM_OC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	223c      	movs	r2, #60	@ 0x3c
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	0018      	movs	r0, r3
 8004772:	f001 fd8d 	bl	8006290 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <HAL_TIM_OC_Init+0x3c>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a23      	ldr	r2, [pc, #140]	@ (8004810 <HAL_TIM_OC_Init+0xc8>)
 8004782:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	0010      	movs	r0, r2
 800478c:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	223d      	movs	r2, #61	@ 0x3d
 8004792:	2102      	movs	r1, #2
 8004794:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3304      	adds	r3, #4
 800479e:	0019      	movs	r1, r3
 80047a0:	0010      	movs	r0, r2
 80047a2:	f001 f877 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2248      	movs	r2, #72	@ 0x48
 80047aa:	2101      	movs	r1, #1
 80047ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	223e      	movs	r2, #62	@ 0x3e
 80047b2:	2101      	movs	r1, #1
 80047b4:	5499      	strb	r1, [r3, r2]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	223f      	movs	r2, #63	@ 0x3f
 80047ba:	2101      	movs	r1, #1
 80047bc:	5499      	strb	r1, [r3, r2]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2240      	movs	r2, #64	@ 0x40
 80047c2:	2101      	movs	r1, #1
 80047c4:	5499      	strb	r1, [r3, r2]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2241      	movs	r2, #65	@ 0x41
 80047ca:	2101      	movs	r1, #1
 80047cc:	5499      	strb	r1, [r3, r2]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2242      	movs	r2, #66	@ 0x42
 80047d2:	2101      	movs	r1, #1
 80047d4:	5499      	strb	r1, [r3, r2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2243      	movs	r2, #67	@ 0x43
 80047da:	2101      	movs	r1, #1
 80047dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2244      	movs	r2, #68	@ 0x44
 80047e2:	2101      	movs	r1, #1
 80047e4:	5499      	strb	r1, [r3, r2]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2245      	movs	r2, #69	@ 0x45
 80047ea:	2101      	movs	r1, #1
 80047ec:	5499      	strb	r1, [r3, r2]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2246      	movs	r2, #70	@ 0x46
 80047f2:	2101      	movs	r1, #1
 80047f4:	5499      	strb	r1, [r3, r2]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2247      	movs	r2, #71	@ 0x47
 80047fa:	2101      	movs	r1, #1
 80047fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	223d      	movs	r2, #61	@ 0x3d
 8004802:	2101      	movs	r1, #1
 8004804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	0018      	movs	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}
 8004810:	08004815 	.word	0x08004815

08004814 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800482e:	230f      	movs	r3, #15
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d108      	bne.n	800484e <HAL_TIM_OC_Start_IT+0x2a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	223e      	movs	r2, #62	@ 0x3e
 8004840:	5c9b      	ldrb	r3, [r3, r2]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	1e5a      	subs	r2, r3, #1
 8004848:	4193      	sbcs	r3, r2
 800484a:	b2db      	uxtb	r3, r3
 800484c:	e037      	b.n	80048be <HAL_TIM_OC_Start_IT+0x9a>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d108      	bne.n	8004866 <HAL_TIM_OC_Start_IT+0x42>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	223f      	movs	r2, #63	@ 0x3f
 8004858:	5c9b      	ldrb	r3, [r3, r2]
 800485a:	b2db      	uxtb	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	1e5a      	subs	r2, r3, #1
 8004860:	4193      	sbcs	r3, r2
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e02b      	b.n	80048be <HAL_TIM_OC_Start_IT+0x9a>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d108      	bne.n	800487e <HAL_TIM_OC_Start_IT+0x5a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2240      	movs	r2, #64	@ 0x40
 8004870:	5c9b      	ldrb	r3, [r3, r2]
 8004872:	b2db      	uxtb	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	1e5a      	subs	r2, r3, #1
 8004878:	4193      	sbcs	r3, r2
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e01f      	b.n	80048be <HAL_TIM_OC_Start_IT+0x9a>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d108      	bne.n	8004896 <HAL_TIM_OC_Start_IT+0x72>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2241      	movs	r2, #65	@ 0x41
 8004888:	5c9b      	ldrb	r3, [r3, r2]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3b01      	subs	r3, #1
 800488e:	1e5a      	subs	r2, r3, #1
 8004890:	4193      	sbcs	r3, r2
 8004892:	b2db      	uxtb	r3, r3
 8004894:	e013      	b.n	80048be <HAL_TIM_OC_Start_IT+0x9a>
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b10      	cmp	r3, #16
 800489a:	d108      	bne.n	80048ae <HAL_TIM_OC_Start_IT+0x8a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2242      	movs	r2, #66	@ 0x42
 80048a0:	5c9b      	ldrb	r3, [r3, r2]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	1e5a      	subs	r2, r3, #1
 80048a8:	4193      	sbcs	r3, r2
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	e007      	b.n	80048be <HAL_TIM_OC_Start_IT+0x9a>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2243      	movs	r2, #67	@ 0x43
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	4193      	sbcs	r3, r2
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_OC_Start_IT+0xa2>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0c4      	b.n	8004a50 <HAL_TIM_OC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_TIM_OC_Start_IT+0xb2>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	223e      	movs	r2, #62	@ 0x3e
 80048d0:	2102      	movs	r1, #2
 80048d2:	5499      	strb	r1, [r3, r2]
 80048d4:	e023      	b.n	800491e <HAL_TIM_OC_Start_IT+0xfa>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_OC_Start_IT+0xc2>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	223f      	movs	r2, #63	@ 0x3f
 80048e0:	2102      	movs	r1, #2
 80048e2:	5499      	strb	r1, [r3, r2]
 80048e4:	e01b      	b.n	800491e <HAL_TIM_OC_Start_IT+0xfa>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_OC_Start_IT+0xd2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2240      	movs	r2, #64	@ 0x40
 80048f0:	2102      	movs	r1, #2
 80048f2:	5499      	strb	r1, [r3, r2]
 80048f4:	e013      	b.n	800491e <HAL_TIM_OC_Start_IT+0xfa>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_OC_Start_IT+0xe2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2241      	movs	r2, #65	@ 0x41
 8004900:	2102      	movs	r1, #2
 8004902:	5499      	strb	r1, [r3, r2]
 8004904:	e00b      	b.n	800491e <HAL_TIM_OC_Start_IT+0xfa>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b10      	cmp	r3, #16
 800490a:	d104      	bne.n	8004916 <HAL_TIM_OC_Start_IT+0xf2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2242      	movs	r2, #66	@ 0x42
 8004910:	2102      	movs	r1, #2
 8004912:	5499      	strb	r1, [r3, r2]
 8004914:	e003      	b.n	800491e <HAL_TIM_OC_Start_IT+0xfa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2243      	movs	r2, #67	@ 0x43
 800491a:	2102      	movs	r1, #2
 800491c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b0c      	cmp	r3, #12
 8004922:	d02a      	beq.n	800497a <HAL_TIM_OC_Start_IT+0x156>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	2b0c      	cmp	r3, #12
 8004928:	d830      	bhi.n	800498c <HAL_TIM_OC_Start_IT+0x168>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_OC_Start_IT+0x144>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d82a      	bhi.n	800498c <HAL_TIM_OC_Start_IT+0x168>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_TIM_OC_Start_IT+0x120>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d009      	beq.n	8004956 <HAL_TIM_OC_Start_IT+0x132>
 8004942:	e023      	b.n	800498c <HAL_TIM_OC_Start_IT+0x168>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2102      	movs	r1, #2
 8004950:	430a      	orrs	r2, r1
 8004952:	60da      	str	r2, [r3, #12]
      break;
 8004954:	e01f      	b.n	8004996 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2104      	movs	r1, #4
 8004962:	430a      	orrs	r2, r1
 8004964:	60da      	str	r2, [r3, #12]
      break;
 8004966:	e016      	b.n	8004996 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2108      	movs	r1, #8
 8004974:	430a      	orrs	r2, r1
 8004976:	60da      	str	r2, [r3, #12]
      break;
 8004978:	e00d      	b.n	8004996 <HAL_TIM_OC_Start_IT+0x172>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2110      	movs	r1, #16
 8004986:	430a      	orrs	r2, r1
 8004988:	60da      	str	r2, [r3, #12]
      break;
 800498a:	e004      	b.n	8004996 <HAL_TIM_OC_Start_IT+0x172>
    }

    default:
      status = HAL_ERROR;
 800498c:	230f      	movs	r3, #15
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	2201      	movs	r2, #1
 8004992:	701a      	strb	r2, [r3, #0]
      break;
 8004994:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8004996:	230f      	movs	r3, #15
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d154      	bne.n	8004a4a <HAL_TIM_OC_Start_IT+0x226>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6839      	ldr	r1, [r7, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	0018      	movs	r0, r3
 80049aa:	f001 fc4d 	bl	8006248 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a29      	ldr	r2, [pc, #164]	@ (8004a58 <HAL_TIM_OC_Start_IT+0x234>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d009      	beq.n	80049cc <HAL_TIM_OC_Start_IT+0x1a8>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a27      	ldr	r2, [pc, #156]	@ (8004a5c <HAL_TIM_OC_Start_IT+0x238>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d004      	beq.n	80049cc <HAL_TIM_OC_Start_IT+0x1a8>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a26      	ldr	r2, [pc, #152]	@ (8004a60 <HAL_TIM_OC_Start_IT+0x23c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d101      	bne.n	80049d0 <HAL_TIM_OC_Start_IT+0x1ac>
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_TIM_OC_Start_IT+0x1ae>
 80049d0:	2300      	movs	r3, #0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_TIM_OC_Start_IT+0x1c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2180      	movs	r1, #128	@ 0x80
 80049e2:	0209      	lsls	r1, r1, #8
 80049e4:	430a      	orrs	r2, r1
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1a      	ldr	r2, [pc, #104]	@ (8004a58 <HAL_TIM_OC_Start_IT+0x234>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00a      	beq.n	8004a08 <HAL_TIM_OC_Start_IT+0x1e4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	05db      	lsls	r3, r3, #23
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d004      	beq.n	8004a08 <HAL_TIM_OC_Start_IT+0x1e4>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <HAL_TIM_OC_Start_IT+0x240>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d116      	bne.n	8004a36 <HAL_TIM_OC_Start_IT+0x212>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_TIM_OC_Start_IT+0x244>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b06      	cmp	r3, #6
 8004a18:	d016      	beq.n	8004a48 <HAL_TIM_OC_Start_IT+0x224>
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	2380      	movs	r3, #128	@ 0x80
 8004a1e:	025b      	lsls	r3, r3, #9
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d011      	beq.n	8004a48 <HAL_TIM_OC_Start_IT+0x224>
      {
        __HAL_TIM_ENABLE(htim);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	e008      	b.n	8004a48 <HAL_TIM_OC_Start_IT+0x224>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	e000      	b.n	8004a4a <HAL_TIM_OC_Start_IT+0x226>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a48:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 8004a4a:	230f      	movs	r3, #15
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	781b      	ldrb	r3, [r3, #0]
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b004      	add	sp, #16
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	40012c00 	.word	0x40012c00
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40000400 	.word	0x40000400
 8004a68:	00010007 	.word	0x00010007

08004a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e056      	b.n	8004b2c <HAL_TIM_PWM_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	223d      	movs	r2, #61	@ 0x3d
 8004a82:	5c9b      	ldrb	r3, [r3, r2]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d113      	bne.n	8004ab2 <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	223c      	movs	r2, #60	@ 0x3c
 8004a8e:	2100      	movs	r1, #0
 8004a90:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0018      	movs	r0, r3
 8004a96:	f001 fbfb 	bl	8006290 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d102      	bne.n	8004aa8 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a23      	ldr	r2, [pc, #140]	@ (8004b34 <HAL_TIM_PWM_Init+0xc8>)
 8004aa6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	0010      	movs	r0, r2
 8004ab0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	223d      	movs	r2, #61	@ 0x3d
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3304      	adds	r3, #4
 8004ac2:	0019      	movs	r1, r3
 8004ac4:	0010      	movs	r0, r2
 8004ac6:	f000 fee5 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2248      	movs	r2, #72	@ 0x48
 8004ace:	2101      	movs	r1, #1
 8004ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	223e      	movs	r2, #62	@ 0x3e
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	5499      	strb	r1, [r3, r2]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	223f      	movs	r2, #63	@ 0x3f
 8004ade:	2101      	movs	r1, #1
 8004ae0:	5499      	strb	r1, [r3, r2]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2240      	movs	r2, #64	@ 0x40
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	5499      	strb	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2241      	movs	r2, #65	@ 0x41
 8004aee:	2101      	movs	r1, #1
 8004af0:	5499      	strb	r1, [r3, r2]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2242      	movs	r2, #66	@ 0x42
 8004af6:	2101      	movs	r1, #1
 8004af8:	5499      	strb	r1, [r3, r2]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2243      	movs	r2, #67	@ 0x43
 8004afe:	2101      	movs	r1, #1
 8004b00:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2244      	movs	r2, #68	@ 0x44
 8004b06:	2101      	movs	r1, #1
 8004b08:	5499      	strb	r1, [r3, r2]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2245      	movs	r2, #69	@ 0x45
 8004b0e:	2101      	movs	r1, #1
 8004b10:	5499      	strb	r1, [r3, r2]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2246      	movs	r2, #70	@ 0x46
 8004b16:	2101      	movs	r1, #1
 8004b18:	5499      	strb	r1, [r3, r2]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2247      	movs	r2, #71	@ 0x47
 8004b1e:	2101      	movs	r1, #1
 8004b20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	223d      	movs	r2, #61	@ 0x3d
 8004b26:	2101      	movs	r1, #1
 8004b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	08004b39 	.word	0x08004b39

08004b38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d108      	bne.n	8004b6a <HAL_TIM_PWM_Start+0x22>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	223e      	movs	r2, #62	@ 0x3e
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	3b01      	subs	r3, #1
 8004b62:	1e5a      	subs	r2, r3, #1
 8004b64:	4193      	sbcs	r3, r2
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	e037      	b.n	8004bda <HAL_TIM_PWM_Start+0x92>
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d108      	bne.n	8004b82 <HAL_TIM_PWM_Start+0x3a>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	223f      	movs	r2, #63	@ 0x3f
 8004b74:	5c9b      	ldrb	r3, [r3, r2]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	4193      	sbcs	r3, r2
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	e02b      	b.n	8004bda <HAL_TIM_PWM_Start+0x92>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d108      	bne.n	8004b9a <HAL_TIM_PWM_Start+0x52>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2240      	movs	r2, #64	@ 0x40
 8004b8c:	5c9b      	ldrb	r3, [r3, r2]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	1e5a      	subs	r2, r3, #1
 8004b94:	4193      	sbcs	r3, r2
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	e01f      	b.n	8004bda <HAL_TIM_PWM_Start+0x92>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	d108      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x6a>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2241      	movs	r2, #65	@ 0x41
 8004ba4:	5c9b      	ldrb	r3, [r3, r2]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	4193      	sbcs	r3, r2
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e013      	b.n	8004bda <HAL_TIM_PWM_Start+0x92>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d108      	bne.n	8004bca <HAL_TIM_PWM_Start+0x82>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2242      	movs	r2, #66	@ 0x42
 8004bbc:	5c9b      	ldrb	r3, [r3, r2]
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	4193      	sbcs	r3, r2
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	e007      	b.n	8004bda <HAL_TIM_PWM_Start+0x92>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2243      	movs	r2, #67	@ 0x43
 8004bce:	5c9b      	ldrb	r3, [r3, r2]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	1e5a      	subs	r2, r3, #1
 8004bd6:	4193      	sbcs	r3, r2
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e081      	b.n	8004ce6 <HAL_TIM_PWM_Start+0x19e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_PWM_Start+0xaa>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	223e      	movs	r2, #62	@ 0x3e
 8004bec:	2102      	movs	r1, #2
 8004bee:	5499      	strb	r1, [r3, r2]
 8004bf0:	e023      	b.n	8004c3a <HAL_TIM_PWM_Start+0xf2>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_PWM_Start+0xba>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	223f      	movs	r2, #63	@ 0x3f
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	5499      	strb	r1, [r3, r2]
 8004c00:	e01b      	b.n	8004c3a <HAL_TIM_PWM_Start+0xf2>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_PWM_Start+0xca>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2240      	movs	r2, #64	@ 0x40
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	5499      	strb	r1, [r3, r2]
 8004c10:	e013      	b.n	8004c3a <HAL_TIM_PWM_Start+0xf2>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b0c      	cmp	r3, #12
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_PWM_Start+0xda>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2241      	movs	r2, #65	@ 0x41
 8004c1c:	2102      	movs	r1, #2
 8004c1e:	5499      	strb	r1, [r3, r2]
 8004c20:	e00b      	b.n	8004c3a <HAL_TIM_PWM_Start+0xf2>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_PWM_Start+0xea>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2242      	movs	r2, #66	@ 0x42
 8004c2c:	2102      	movs	r1, #2
 8004c2e:	5499      	strb	r1, [r3, r2]
 8004c30:	e003      	b.n	8004c3a <HAL_TIM_PWM_Start+0xf2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2243      	movs	r2, #67	@ 0x43
 8004c36:	2102      	movs	r1, #2
 8004c38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6839      	ldr	r1, [r7, #0]
 8004c40:	2201      	movs	r2, #1
 8004c42:	0018      	movs	r0, r3
 8004c44:	f001 fb00 	bl	8006248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a28      	ldr	r2, [pc, #160]	@ (8004cf0 <HAL_TIM_PWM_Start+0x1a8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d009      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x11e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a27      	ldr	r2, [pc, #156]	@ (8004cf4 <HAL_TIM_PWM_Start+0x1ac>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d004      	beq.n	8004c66 <HAL_TIM_PWM_Start+0x11e>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a25      	ldr	r2, [pc, #148]	@ (8004cf8 <HAL_TIM_PWM_Start+0x1b0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d101      	bne.n	8004c6a <HAL_TIM_PWM_Start+0x122>
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <HAL_TIM_PWM_Start+0x124>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	0209      	lsls	r1, r1, #8
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf0 <HAL_TIM_PWM_Start+0x1a8>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d00a      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x15a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	2380      	movs	r3, #128	@ 0x80
 8004c92:	05db      	lsls	r3, r3, #23
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d004      	beq.n	8004ca2 <HAL_TIM_PWM_Start+0x15a>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_TIM_PWM_Start+0x1b4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d116      	bne.n	8004cd0 <HAL_TIM_PWM_Start+0x188>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a15      	ldr	r2, [pc, #84]	@ (8004d00 <HAL_TIM_PWM_Start+0x1b8>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d016      	beq.n	8004ce2 <HAL_TIM_PWM_Start+0x19a>
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	2380      	movs	r3, #128	@ 0x80
 8004cb8:	025b      	lsls	r3, r3, #9
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d011      	beq.n	8004ce2 <HAL_TIM_PWM_Start+0x19a>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	e008      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x19a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2101      	movs	r1, #1
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e000      	b.n	8004ce4 <HAL_TIM_PWM_Start+0x19c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce2:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	0018      	movs	r0, r3
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	b004      	add	sp, #16
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	40012c00 	.word	0x40012c00
 8004cf4:	40014400 	.word	0x40014400
 8004cf8:	40014800 	.word	0x40014800
 8004cfc:	40000400 	.word	0x40000400
 8004d00:	00010007 	.word	0x00010007

08004d04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e056      	b.n	8004dc4 <HAL_TIM_IC_Init+0xc0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	223d      	movs	r2, #61	@ 0x3d
 8004d1a:	5c9b      	ldrb	r3, [r3, r2]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d113      	bne.n	8004d4a <HAL_TIM_IC_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	223c      	movs	r2, #60	@ 0x3c
 8004d26:	2100      	movs	r1, #0
 8004d28:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	0018      	movs	r0, r3
 8004d2e:	f001 faaf 	bl	8006290 <TIM_ResetCallback>

    if (htim->IC_MspInitCallback == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <HAL_TIM_IC_Init+0x3c>
    {
      htim->IC_MspInitCallback = HAL_TIM_IC_MspInit;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a23      	ldr	r2, [pc, #140]	@ (8004dcc <HAL_TIM_IC_Init+0xc8>)
 8004d3e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	0010      	movs	r0, r2
 8004d48:	4798      	blx	r3
    HAL_TIM_IC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	223d      	movs	r2, #61	@ 0x3d
 8004d4e:	2102      	movs	r1, #2
 8004d50:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	0010      	movs	r0, r2
 8004d5e:	f000 fd99 	bl	8005894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2248      	movs	r2, #72	@ 0x48
 8004d66:	2101      	movs	r1, #1
 8004d68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	223e      	movs	r2, #62	@ 0x3e
 8004d6e:	2101      	movs	r1, #1
 8004d70:	5499      	strb	r1, [r3, r2]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	223f      	movs	r2, #63	@ 0x3f
 8004d76:	2101      	movs	r1, #1
 8004d78:	5499      	strb	r1, [r3, r2]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2240      	movs	r2, #64	@ 0x40
 8004d7e:	2101      	movs	r1, #1
 8004d80:	5499      	strb	r1, [r3, r2]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2241      	movs	r2, #65	@ 0x41
 8004d86:	2101      	movs	r1, #1
 8004d88:	5499      	strb	r1, [r3, r2]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2242      	movs	r2, #66	@ 0x42
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2243      	movs	r2, #67	@ 0x43
 8004d96:	2101      	movs	r1, #1
 8004d98:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2244      	movs	r2, #68	@ 0x44
 8004d9e:	2101      	movs	r1, #1
 8004da0:	5499      	strb	r1, [r3, r2]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2245      	movs	r2, #69	@ 0x45
 8004da6:	2101      	movs	r1, #1
 8004da8:	5499      	strb	r1, [r3, r2]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2246      	movs	r2, #70	@ 0x46
 8004dae:	2101      	movs	r1, #1
 8004db0:	5499      	strb	r1, [r3, r2]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2247      	movs	r2, #71	@ 0x47
 8004db6:	2101      	movs	r1, #1
 8004db8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	223d      	movs	r2, #61	@ 0x3d
 8004dbe:	2101      	movs	r1, #1
 8004dc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b002      	add	sp, #8
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08004dd1 	.word	0x08004dd1

08004dd0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004dd8:	46c0      	nop			@ (mov r8, r8)
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b002      	add	sp, #8
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2202      	movs	r2, #2
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d027      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2202      	movs	r2, #2
 8004e04:	4013      	ands	r3, r2
 8004e06:	d023      	beq.n	8004e50 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	4252      	negs	r2, r2
 8004e10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2201      	movs	r2, #1
 8004e16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	4013      	ands	r3, r2
 8004e22:	d006      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2294      	movs	r2, #148	@ 0x94
 8004e28:	589b      	ldr	r3, [r3, r2]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	0010      	movs	r0, r2
 8004e2e:	4798      	blx	r3
 8004e30:	e00b      	b.n	8004e4a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	229c      	movs	r2, #156	@ 0x9c
 8004e36:	589b      	ldr	r3, [r3, r2]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	0010      	movs	r0, r2
 8004e3c:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	22a0      	movs	r2, #160	@ 0xa0
 8004e42:	589b      	ldr	r3, [r3, r2]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	0010      	movs	r0, r2
 8004e48:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2204      	movs	r2, #4
 8004e54:	4013      	ands	r3, r2
 8004e56:	d028      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xca>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d024      	beq.n	8004eaa <HAL_TIM_IRQHandler+0xca>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2205      	movs	r2, #5
 8004e66:	4252      	negs	r2, r2
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699a      	ldr	r2, [r3, #24]
 8004e76:	23c0      	movs	r3, #192	@ 0xc0
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d006      	beq.n	8004e8c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2294      	movs	r2, #148	@ 0x94
 8004e82:	589b      	ldr	r3, [r3, r2]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	0010      	movs	r0, r2
 8004e88:	4798      	blx	r3
 8004e8a:	e00b      	b.n	8004ea4 <HAL_TIM_IRQHandler+0xc4>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	229c      	movs	r2, #156	@ 0x9c
 8004e90:	589b      	ldr	r3, [r3, r2]
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	0010      	movs	r0, r2
 8004e96:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	22a0      	movs	r2, #160	@ 0xa0
 8004e9c:	589b      	ldr	r3, [r3, r2]
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	0010      	movs	r0, r2
 8004ea2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2208      	movs	r2, #8
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d027      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x122>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2208      	movs	r2, #8
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <HAL_TIM_IRQHandler+0x122>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2209      	movs	r2, #9
 8004ec0:	4252      	negs	r2, r2
 8004ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	d006      	beq.n	8004ee4 <HAL_TIM_IRQHandler+0x104>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2294      	movs	r2, #148	@ 0x94
 8004eda:	589b      	ldr	r3, [r3, r2]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	0010      	movs	r0, r2
 8004ee0:	4798      	blx	r3
 8004ee2:	e00b      	b.n	8004efc <HAL_TIM_IRQHandler+0x11c>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	229c      	movs	r2, #156	@ 0x9c
 8004ee8:	589b      	ldr	r3, [r3, r2]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	0010      	movs	r0, r2
 8004eee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	22a0      	movs	r2, #160	@ 0xa0
 8004ef4:	589b      	ldr	r3, [r3, r2]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	0010      	movs	r0, r2
 8004efa:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2210      	movs	r2, #16
 8004f06:	4013      	ands	r3, r2
 8004f08:	d028      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x17c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2210      	movs	r2, #16
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d024      	beq.n	8004f5c <HAL_TIM_IRQHandler+0x17c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2211      	movs	r2, #17
 8004f18:	4252      	negs	r2, r2
 8004f1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2208      	movs	r2, #8
 8004f20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69da      	ldr	r2, [r3, #28]
 8004f28:	23c0      	movs	r3, #192	@ 0xc0
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	d006      	beq.n	8004f3e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2294      	movs	r2, #148	@ 0x94
 8004f34:	589b      	ldr	r3, [r3, r2]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	0010      	movs	r0, r2
 8004f3a:	4798      	blx	r3
 8004f3c:	e00b      	b.n	8004f56 <HAL_TIM_IRQHandler+0x176>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	229c      	movs	r2, #156	@ 0x9c
 8004f42:	589b      	ldr	r3, [r3, r2]
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	0010      	movs	r0, r2
 8004f48:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	22a0      	movs	r2, #160	@ 0xa0
 8004f4e:	589b      	ldr	r3, [r3, r2]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	0010      	movs	r0, r2
 8004f54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d00e      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x1a2>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d00a      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x1a2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2202      	movs	r2, #2
 8004f72:	4252      	negs	r2, r2
 8004f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2284      	movs	r2, #132	@ 0x84
 8004f7a:	589b      	ldr	r3, [r3, r2]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	0010      	movs	r0, r2
 8004f80:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2280      	movs	r2, #128	@ 0x80
 8004f86:	4013      	ands	r3, r2
 8004f88:	d104      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	019b      	lsls	r3, r3, #6
 8004f90:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004f92:	d00d      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d0>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2280      	movs	r2, #128	@ 0x80
 8004f98:	4013      	ands	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0x1d0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a22      	ldr	r2, [pc, #136]	@ (800502c <HAL_TIM_IRQHandler+0x24c>)
 8004fa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	22b4      	movs	r2, #180	@ 0xb4
 8004fa8:	589b      	ldr	r3, [r3, r2]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	0010      	movs	r0, r2
 8004fae:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	2380      	movs	r3, #128	@ 0x80
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d00d      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2280      	movs	r2, #128	@ 0x80
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	d009      	beq.n	8004fd6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1a      	ldr	r2, [pc, #104]	@ (8005030 <HAL_TIM_IRQHandler+0x250>)
 8004fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	22b8      	movs	r2, #184	@ 0xb8
 8004fce:	589b      	ldr	r3, [r3, r2]
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	0010      	movs	r0, r2
 8004fd4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2240      	movs	r2, #64	@ 0x40
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x21c>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2240      	movs	r2, #64	@ 0x40
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d00a      	beq.n	8004ffc <HAL_TIM_IRQHandler+0x21c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2241      	movs	r2, #65	@ 0x41
 8004fec:	4252      	negs	r2, r2
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	228c      	movs	r2, #140	@ 0x8c
 8004ff4:	589b      	ldr	r3, [r3, r2]
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	0010      	movs	r0, r2
 8004ffa:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2220      	movs	r2, #32
 8005000:	4013      	ands	r3, r2
 8005002:	d00e      	beq.n	8005022 <HAL_TIM_IRQHandler+0x242>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	4013      	ands	r3, r2
 800500a:	d00a      	beq.n	8005022 <HAL_TIM_IRQHandler+0x242>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2221      	movs	r2, #33	@ 0x21
 8005012:	4252      	negs	r2, r2
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	22ac      	movs	r2, #172	@ 0xac
 800501a:	589b      	ldr	r3, [r3, r2]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	0010      	movs	r0, r2
 8005020:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	46bd      	mov	sp, r7
 8005026:	b004      	add	sp, #16
 8005028:	bd80      	pop	{r7, pc}
 800502a:	46c0      	nop			@ (mov r8, r8)
 800502c:	ffffdf7f 	.word	0xffffdf7f
 8005030:	fffffeff 	.word	0xfffffeff

08005034 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005040:	2317      	movs	r3, #23
 8005042:	18fb      	adds	r3, r7, r3
 8005044:	2200      	movs	r2, #0
 8005046:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	223c      	movs	r2, #60	@ 0x3c
 800504c:	5c9b      	ldrb	r3, [r3, r2]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <HAL_TIM_OC_ConfigChannel+0x22>
 8005052:	2302      	movs	r3, #2
 8005054:	e048      	b.n	80050e8 <HAL_TIM_OC_ConfigChannel+0xb4>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	223c      	movs	r2, #60	@ 0x3c
 800505a:	2101      	movs	r1, #1
 800505c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2b14      	cmp	r3, #20
 8005062:	d835      	bhi.n	80050d0 <HAL_TIM_OC_ConfigChannel+0x9c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	009a      	lsls	r2, r3, #2
 8005068:	4b21      	ldr	r3, [pc, #132]	@ (80050f0 <HAL_TIM_OC_ConfigChannel+0xbc>)
 800506a:	18d3      	adds	r3, r2, r3
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	0011      	movs	r1, r2
 8005078:	0018      	movs	r0, r3
 800507a:	f000 fc8f 	bl	800599c <TIM_OC1_SetConfig>
      break;
 800507e:	e02c      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f000 fd07 	bl	8005a9c <TIM_OC2_SetConfig>
      break;
 800508e:	e024      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	0011      	movs	r1, r2
 8005098:	0018      	movs	r0, r3
 800509a:	f000 fd7d 	bl	8005b98 <TIM_OC3_SetConfig>
      break;
 800509e:	e01c      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	0011      	movs	r1, r2
 80050a8:	0018      	movs	r0, r3
 80050aa:	f000 fdf7 	bl	8005c9c <TIM_OC4_SetConfig>
      break;
 80050ae:	e014      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	0011      	movs	r1, r2
 80050b8:	0018      	movs	r0, r3
 80050ba:	f000 fe53 	bl	8005d64 <TIM_OC5_SetConfig>
      break;
 80050be:	e00c      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	0011      	movs	r1, r2
 80050c8:	0018      	movs	r0, r3
 80050ca:	f000 fea5 	bl	8005e18 <TIM_OC6_SetConfig>
      break;
 80050ce:	e004      	b.n	80050da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80050d0:	2317      	movs	r3, #23
 80050d2:	18fb      	adds	r3, r7, r3
 80050d4:	2201      	movs	r2, #1
 80050d6:	701a      	strb	r2, [r3, #0]
      break;
 80050d8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	223c      	movs	r2, #60	@ 0x3c
 80050de:	2100      	movs	r1, #0
 80050e0:	5499      	strb	r1, [r3, r2]

  return status;
 80050e2:	2317      	movs	r3, #23
 80050e4:	18fb      	adds	r3, r7, r3
 80050e6:	781b      	ldrb	r3, [r3, #0]
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b006      	add	sp, #24
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	080078a0 	.word	0x080078a0

080050f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005100:	2317      	movs	r3, #23
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	223c      	movs	r2, #60	@ 0x3c
 800510c:	5c9b      	ldrb	r3, [r3, r2]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_TIM_IC_ConfigChannel+0x22>
 8005112:	2302      	movs	r3, #2
 8005114:	e08c      	b.n	8005230 <HAL_TIM_IC_ConfigChannel+0x13c>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	223c      	movs	r2, #60	@ 0x3c
 800511a:	2101      	movs	r1, #1
 800511c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d11b      	bne.n	800515c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005134:	f000 fece 	bl	8005ed4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	699a      	ldr	r2, [r3, #24]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	210c      	movs	r1, #12
 8005144:	438a      	bics	r2, r1
 8005146:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6999      	ldr	r1, [r3, #24]
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]
 800515a:	e062      	b.n	8005222 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b04      	cmp	r3, #4
 8005160:	d11c      	bne.n	800519c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005172:	f000 ff33 	bl	8005fdc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	492d      	ldr	r1, [pc, #180]	@ (8005238 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005182:	400a      	ands	r2, r1
 8005184:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6999      	ldr	r1, [r3, #24]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	021a      	lsls	r2, r3, #8
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	430a      	orrs	r2, r1
 8005198:	619a      	str	r2, [r3, #24]
 800519a:	e042      	b.n	8005222 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d11b      	bne.n	80051da <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80051b2:	f000 ff87 	bl	80060c4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	210c      	movs	r1, #12
 80051c2:	438a      	bics	r2, r1
 80051c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	61da      	str	r2, [r3, #28]
 80051d8:	e023      	b.n	8005222 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b0c      	cmp	r3, #12
 80051de:	d11c      	bne.n	800521a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80051f0:	f000 ffa8 	bl	8006144 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	490e      	ldr	r1, [pc, #56]	@ (8005238 <HAL_TIM_IC_ConfigChannel+0x144>)
 8005200:	400a      	ands	r2, r1
 8005202:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69d9      	ldr	r1, [r3, #28]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	021a      	lsls	r2, r3, #8
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	61da      	str	r2, [r3, #28]
 8005218:	e003      	b.n	8005222 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800521a:	2317      	movs	r3, #23
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	2201      	movs	r2, #1
 8005220:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	223c      	movs	r2, #60	@ 0x3c
 8005226:	2100      	movs	r1, #0
 8005228:	5499      	strb	r1, [r3, r2]

  return status;
 800522a:	2317      	movs	r3, #23
 800522c:	18fb      	adds	r3, r7, r3
 800522e:	781b      	ldrb	r3, [r3, #0]
}
 8005230:	0018      	movs	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	b006      	add	sp, #24
 8005236:	bd80      	pop	{r7, pc}
 8005238:	fffff3ff 	.word	0xfffff3ff

0800523c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2317      	movs	r3, #23
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	223c      	movs	r2, #60	@ 0x3c
 8005254:	5c9b      	ldrb	r3, [r3, r2]
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_TIM_PWM_ConfigChannel+0x22>
 800525a:	2302      	movs	r3, #2
 800525c:	e0e5      	b.n	800542a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	223c      	movs	r2, #60	@ 0x3c
 8005262:	2101      	movs	r1, #1
 8005264:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b14      	cmp	r3, #20
 800526a:	d900      	bls.n	800526e <HAL_TIM_PWM_ConfigChannel+0x32>
 800526c:	e0d1      	b.n	8005412 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	009a      	lsls	r2, r3, #2
 8005272:	4b70      	ldr	r3, [pc, #448]	@ (8005434 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005274:	18d3      	adds	r3, r2, r3
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	0011      	movs	r1, r2
 8005282:	0018      	movs	r0, r3
 8005284:	f000 fb8a 	bl	800599c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2108      	movs	r1, #8
 8005294:	430a      	orrs	r2, r1
 8005296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2104      	movs	r1, #4
 80052a4:	438a      	bics	r2, r1
 80052a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6999      	ldr	r1, [r3, #24]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	691a      	ldr	r2, [r3, #16]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	619a      	str	r2, [r3, #24]
      break;
 80052ba:	e0af      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	0011      	movs	r1, r2
 80052c4:	0018      	movs	r0, r3
 80052c6:	f000 fbe9 	bl	8005a9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2180      	movs	r1, #128	@ 0x80
 80052d6:	0109      	lsls	r1, r1, #4
 80052d8:	430a      	orrs	r2, r1
 80052da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699a      	ldr	r2, [r3, #24]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4954      	ldr	r1, [pc, #336]	@ (8005438 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80052e8:	400a      	ands	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6999      	ldr	r1, [r3, #24]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	021a      	lsls	r2, r3, #8
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	430a      	orrs	r2, r1
 80052fe:	619a      	str	r2, [r3, #24]
      break;
 8005300:	e08c      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68ba      	ldr	r2, [r7, #8]
 8005308:	0011      	movs	r1, r2
 800530a:	0018      	movs	r0, r3
 800530c:	f000 fc44 	bl	8005b98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69da      	ldr	r2, [r3, #28]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2108      	movs	r1, #8
 800531c:	430a      	orrs	r2, r1
 800531e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69da      	ldr	r2, [r3, #28]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2104      	movs	r1, #4
 800532c:	438a      	bics	r2, r1
 800532e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	69d9      	ldr	r1, [r3, #28]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	61da      	str	r2, [r3, #28]
      break;
 8005342:	e06b      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	0011      	movs	r1, r2
 800534c:	0018      	movs	r0, r3
 800534e:	f000 fca5 	bl	8005c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2180      	movs	r1, #128	@ 0x80
 800535e:	0109      	lsls	r1, r1, #4
 8005360:	430a      	orrs	r2, r1
 8005362:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69da      	ldr	r2, [r3, #28]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4932      	ldr	r1, [pc, #200]	@ (8005438 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005370:	400a      	ands	r2, r1
 8005372:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69d9      	ldr	r1, [r3, #28]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	021a      	lsls	r2, r3, #8
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	430a      	orrs	r2, r1
 8005386:	61da      	str	r2, [r3, #28]
      break;
 8005388:	e048      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	0011      	movs	r1, r2
 8005392:	0018      	movs	r0, r3
 8005394:	f000 fce6 	bl	8005d64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2108      	movs	r1, #8
 80053a4:	430a      	orrs	r2, r1
 80053a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2104      	movs	r1, #4
 80053b4:	438a      	bics	r2, r1
 80053b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80053ca:	e027      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	0011      	movs	r1, r2
 80053d4:	0018      	movs	r0, r3
 80053d6:	f000 fd1f 	bl	8005e18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2180      	movs	r1, #128	@ 0x80
 80053e6:	0109      	lsls	r1, r1, #4
 80053e8:	430a      	orrs	r2, r1
 80053ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4910      	ldr	r1, [pc, #64]	@ (8005438 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80053f8:	400a      	ands	r2, r1
 80053fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005410:	e004      	b.n	800541c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005412:	2317      	movs	r3, #23
 8005414:	18fb      	adds	r3, r7, r3
 8005416:	2201      	movs	r2, #1
 8005418:	701a      	strb	r2, [r3, #0]
      break;
 800541a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	223c      	movs	r2, #60	@ 0x3c
 8005420:	2100      	movs	r1, #0
 8005422:	5499      	strb	r1, [r3, r2]

  return status;
 8005424:	2317      	movs	r3, #23
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	781b      	ldrb	r3, [r3, #0]
}
 800542a:	0018      	movs	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	b006      	add	sp, #24
 8005430:	bd80      	pop	{r7, pc}
 8005432:	46c0      	nop			@ (mov r8, r8)
 8005434:	080078f4 	.word	0x080078f4
 8005438:	fffffbff 	.word	0xfffffbff

0800543c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005446:	230f      	movs	r3, #15
 8005448:	18fb      	adds	r3, r7, r3
 800544a:	2200      	movs	r2, #0
 800544c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	223c      	movs	r2, #60	@ 0x3c
 8005452:	5c9b      	ldrb	r3, [r3, r2]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_TIM_ConfigClockSource+0x20>
 8005458:	2302      	movs	r3, #2
 800545a:	e0bc      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x19a>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	223c      	movs	r2, #60	@ 0x3c
 8005460:	2101      	movs	r1, #1
 8005462:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	223d      	movs	r2, #61	@ 0x3d
 8005468:	2102      	movs	r1, #2
 800546a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a5a      	ldr	r2, [pc, #360]	@ (80055e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005478:	4013      	ands	r3, r2
 800547a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	4a59      	ldr	r2, [pc, #356]	@ (80055e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005480:	4013      	ands	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2280      	movs	r2, #128	@ 0x80
 8005492:	0192      	lsls	r2, r2, #6
 8005494:	4293      	cmp	r3, r2
 8005496:	d040      	beq.n	800551a <HAL_TIM_ConfigClockSource+0xde>
 8005498:	2280      	movs	r2, #128	@ 0x80
 800549a:	0192      	lsls	r2, r2, #6
 800549c:	4293      	cmp	r3, r2
 800549e:	d900      	bls.n	80054a2 <HAL_TIM_ConfigClockSource+0x66>
 80054a0:	e088      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054a2:	2280      	movs	r2, #128	@ 0x80
 80054a4:	0152      	lsls	r2, r2, #5
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d100      	bne.n	80054ac <HAL_TIM_ConfigClockSource+0x70>
 80054aa:	e088      	b.n	80055be <HAL_TIM_ConfigClockSource+0x182>
 80054ac:	2280      	movs	r2, #128	@ 0x80
 80054ae:	0152      	lsls	r2, r2, #5
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d900      	bls.n	80054b6 <HAL_TIM_ConfigClockSource+0x7a>
 80054b4:	e07e      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054b6:	2b70      	cmp	r3, #112	@ 0x70
 80054b8:	d018      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0xb0>
 80054ba:	d900      	bls.n	80054be <HAL_TIM_ConfigClockSource+0x82>
 80054bc:	e07a      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054be:	2b60      	cmp	r3, #96	@ 0x60
 80054c0:	d04f      	beq.n	8005562 <HAL_TIM_ConfigClockSource+0x126>
 80054c2:	d900      	bls.n	80054c6 <HAL_TIM_ConfigClockSource+0x8a>
 80054c4:	e076      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054c6:	2b50      	cmp	r3, #80	@ 0x50
 80054c8:	d03b      	beq.n	8005542 <HAL_TIM_ConfigClockSource+0x106>
 80054ca:	d900      	bls.n	80054ce <HAL_TIM_ConfigClockSource+0x92>
 80054cc:	e072      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054ce:	2b40      	cmp	r3, #64	@ 0x40
 80054d0:	d057      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0x146>
 80054d2:	d900      	bls.n	80054d6 <HAL_TIM_ConfigClockSource+0x9a>
 80054d4:	e06e      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054d6:	2b30      	cmp	r3, #48	@ 0x30
 80054d8:	d063      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x166>
 80054da:	d86b      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d060      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x166>
 80054e0:	d868      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d05d      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x166>
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d05b      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x166>
 80054ea:	e063      	b.n	80055b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	f000 fe84 	bl	8006208 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2277      	movs	r2, #119	@ 0x77
 800550c:	4313      	orrs	r3, r2
 800550e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	609a      	str	r2, [r3, #8]
      break;
 8005518:	e052      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800552a:	f000 fe6d 	bl	8006208 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2180      	movs	r1, #128	@ 0x80
 800553a:	01c9      	lsls	r1, r1, #7
 800553c:	430a      	orrs	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
      break;
 8005540:	e03e      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	001a      	movs	r2, r3
 8005550:	f000 fd16 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2150      	movs	r1, #80	@ 0x50
 800555a:	0018      	movs	r0, r3
 800555c:	f000 fe38 	bl	80061d0 <TIM_ITRx_SetConfig>
      break;
 8005560:	e02e      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800556e:	001a      	movs	r2, r3
 8005570:	f000 fd76 	bl	8006060 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2160      	movs	r1, #96	@ 0x60
 800557a:	0018      	movs	r0, r3
 800557c:	f000 fe28 	bl	80061d0 <TIM_ITRx_SetConfig>
      break;
 8005580:	e01e      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	001a      	movs	r2, r3
 8005590:	f000 fcf6 	bl	8005f80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2140      	movs	r1, #64	@ 0x40
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fe18 	bl	80061d0 <TIM_ITRx_SetConfig>
      break;
 80055a0:	e00e      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	0019      	movs	r1, r3
 80055ac:	0010      	movs	r0, r2
 80055ae:	f000 fe0f 	bl	80061d0 <TIM_ITRx_SetConfig>
      break;
 80055b2:	e005      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80055b4:	230f      	movs	r3, #15
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2201      	movs	r2, #1
 80055ba:	701a      	strb	r2, [r3, #0]
      break;
 80055bc:	e000      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80055be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	223d      	movs	r2, #61	@ 0x3d
 80055c4:	2101      	movs	r1, #1
 80055c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	223c      	movs	r2, #60	@ 0x3c
 80055cc:	2100      	movs	r1, #0
 80055ce:	5499      	strb	r1, [r3, r2]

  return status;
 80055d0:	230f      	movs	r3, #15
 80055d2:	18fb      	adds	r3, r7, r3
 80055d4:	781b      	ldrb	r3, [r3, #0]
}
 80055d6:	0018      	movs	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	b004      	add	sp, #16
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	ffceff88 	.word	0xffceff88
 80055e4:	ffff00ff 	.word	0xffff00ff

080055e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80055f0:	46c0      	nop			@ (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8005600:	46c0      	nop			@ (mov r8, r8)
 8005602:	46bd      	mov	sp, r7
 8005604:	b002      	add	sp, #8
 8005606:	bd80      	pop	{r7, pc}

08005608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005610:	46c0      	nop			@ (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b002      	add	sp, #8
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005620:	46c0      	nop			@ (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	b002      	add	sp, #8
 8005626:	bd80      	pop	{r7, pc}

08005628 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8005630:	46c0      	nop			@ (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b002      	add	sp, #8
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005640:	46c0      	nop			@ (mov r8, r8)
 8005642:	46bd      	mov	sp, r7
 8005644:	b002      	add	sp, #8
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	46bd      	mov	sp, r7
 8005654:	b002      	add	sp, #8
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005660:	46c0      	nop			@ (mov r8, r8)
 8005662:	46bd      	mov	sp, r7
 8005664:	b002      	add	sp, #8
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	46bd      	mov	sp, r7
 8005674:	b002      	add	sp, #8
 8005676:	bd80      	pop	{r7, pc}

08005678 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005680:	46c0      	nop			@ (mov r8, r8)
 8005682:	46bd      	mov	sp, r7
 8005684:	b002      	add	sp, #8
 8005686:	bd80      	pop	{r7, pc}

08005688 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	607a      	str	r2, [r7, #4]
 8005692:	230b      	movs	r3, #11
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	1c0a      	adds	r2, r1, #0
 8005698:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800569a:	2317      	movs	r3, #23
 800569c:	18fb      	adds	r3, r7, r3
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0ea      	b.n	8005882 <HAL_TIM_RegisterCallback+0x1fa>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	223d      	movs	r2, #61	@ 0x3d
 80056b0:	5c9b      	ldrb	r3, [r3, r2]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d000      	beq.n	80056ba <HAL_TIM_RegisterCallback+0x32>
 80056b8:	e08e      	b.n	80057d8 <HAL_TIM_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80056ba:	230b      	movs	r3, #11
 80056bc:	18fb      	adds	r3, r7, r3
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b1b      	cmp	r3, #27
 80056c2:	d900      	bls.n	80056c6 <HAL_TIM_RegisterCallback+0x3e>
 80056c4:	e083      	b.n	80057ce <HAL_TIM_RegisterCallback+0x146>
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	4b70      	ldr	r3, [pc, #448]	@ (800588c <HAL_TIM_RegisterCallback+0x204>)
 80056ca:	18d3      	adds	r3, r2, r3
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80056d6:	e0d1      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80056de:	e0cd      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80056e6:	e0c9      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80056ee:	e0c5      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80056f6:	e0c1      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80056fe:	e0bd      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8005706:	e0b9      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800570e:	e0b5      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8005716:	e0b1      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800571e:	e0ad      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8005726:	e0a9      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800572e:	e0a5      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8005736:	e0a1      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2180      	movs	r1, #128	@ 0x80
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	505a      	str	r2, [r3, r1]
        break;
 8005740:	e09c      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2184      	movs	r1, #132	@ 0x84
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	505a      	str	r2, [r3, r1]
        break;
 800574a:	e097      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2188      	movs	r1, #136	@ 0x88
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	505a      	str	r2, [r3, r1]
        break;
 8005754:	e092      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	218c      	movs	r1, #140	@ 0x8c
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	505a      	str	r2, [r3, r1]
        break;
 800575e:	e08d      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2190      	movs	r1, #144	@ 0x90
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	505a      	str	r2, [r3, r1]
        break;
 8005768:	e088      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2194      	movs	r1, #148	@ 0x94
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	505a      	str	r2, [r3, r1]
        break;
 8005772:	e083      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2198      	movs	r1, #152	@ 0x98
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	505a      	str	r2, [r3, r1]
        break;
 800577c:	e07e      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	219c      	movs	r1, #156	@ 0x9c
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	505a      	str	r2, [r3, r1]
        break;
 8005786:	e079      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	21a0      	movs	r1, #160	@ 0xa0
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	505a      	str	r2, [r3, r1]
        break;
 8005790:	e074      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	21a4      	movs	r1, #164	@ 0xa4
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	505a      	str	r2, [r3, r1]
        break;
 800579a:	e06f      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	21a8      	movs	r1, #168	@ 0xa8
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	505a      	str	r2, [r3, r1]
        break;
 80057a4:	e06a      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	21ac      	movs	r1, #172	@ 0xac
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	505a      	str	r2, [r3, r1]
        break;
 80057ae:	e065      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	21b0      	movs	r1, #176	@ 0xb0
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	505a      	str	r2, [r3, r1]
        break;
 80057b8:	e060      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	21b4      	movs	r1, #180	@ 0xb4
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	505a      	str	r2, [r3, r1]
        break;
 80057c2:	e05b      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	21b8      	movs	r1, #184	@ 0xb8
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	505a      	str	r2, [r3, r1]
        break;
 80057cc:	e056      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80057ce:	2317      	movs	r3, #23
 80057d0:	18fb      	adds	r3, r7, r3
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
        break;
 80057d6:	e051      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	223d      	movs	r2, #61	@ 0x3d
 80057dc:	5c9b      	ldrb	r3, [r3, r2]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d147      	bne.n	8005874 <HAL_TIM_RegisterCallback+0x1ec>
  {
    switch (CallbackID)
 80057e4:	230b      	movs	r3, #11
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b0d      	cmp	r3, #13
 80057ec:	d83d      	bhi.n	800586a <HAL_TIM_RegisterCallback+0x1e2>
 80057ee:	009a      	lsls	r2, r3, #2
 80057f0:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <HAL_TIM_RegisterCallback+0x208>)
 80057f2:	18d3      	adds	r3, r2, r3
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80057fe:	e03d      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8005806:	e039      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800580e:	e035      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8005816:	e031      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800581e:	e02d      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8005826:	e029      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800582e:	e025      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8005836:	e021      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800583e:	e01d      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8005846:	e019      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800584e:	e015      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8005856:	e011      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800585e:	e00d      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2180      	movs	r1, #128	@ 0x80
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	505a      	str	r2, [r3, r1]
        break;
 8005868:	e008      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800586a:	2317      	movs	r3, #23
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
        break;
 8005872:	e003      	b.n	800587c <HAL_TIM_RegisterCallback+0x1f4>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8005874:	2317      	movs	r3, #23
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	2201      	movs	r2, #1
 800587a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800587c:	2317      	movs	r3, #23
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	781b      	ldrb	r3, [r3, #0]
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b006      	add	sp, #24
 8005888:	bd80      	pop	{r7, pc}
 800588a:	46c0      	nop			@ (mov r8, r8)
 800588c:	08007948 	.word	0x08007948
 8005890:	080079b8 	.word	0x080079b8

08005894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a37      	ldr	r2, [pc, #220]	@ (8005984 <TIM_Base_SetConfig+0xf0>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d008      	beq.n	80058be <TIM_Base_SetConfig+0x2a>
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	2380      	movs	r3, #128	@ 0x80
 80058b0:	05db      	lsls	r3, r3, #23
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d003      	beq.n	80058be <TIM_Base_SetConfig+0x2a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a33      	ldr	r2, [pc, #204]	@ (8005988 <TIM_Base_SetConfig+0xf4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d108      	bne.n	80058d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2270      	movs	r2, #112	@ 0x70
 80058c2:	4393      	bics	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005984 <TIM_Base_SetConfig+0xf0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d014      	beq.n	8005902 <TIM_Base_SetConfig+0x6e>
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	05db      	lsls	r3, r3, #23
 80058de:	429a      	cmp	r2, r3
 80058e0:	d00f      	beq.n	8005902 <TIM_Base_SetConfig+0x6e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a28      	ldr	r2, [pc, #160]	@ (8005988 <TIM_Base_SetConfig+0xf4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00b      	beq.n	8005902 <TIM_Base_SetConfig+0x6e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a27      	ldr	r2, [pc, #156]	@ (800598c <TIM_Base_SetConfig+0xf8>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <TIM_Base_SetConfig+0x6e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <TIM_Base_SetConfig+0xfc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d003      	beq.n	8005902 <TIM_Base_SetConfig+0x6e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a25      	ldr	r2, [pc, #148]	@ (8005994 <TIM_Base_SetConfig+0x100>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d108      	bne.n	8005914 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a24      	ldr	r2, [pc, #144]	@ (8005998 <TIM_Base_SetConfig+0x104>)
 8005906:	4013      	ands	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2280      	movs	r2, #128	@ 0x80
 8005918:	4393      	bics	r3, r2
 800591a:	001a      	movs	r2, r3
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	695b      	ldr	r3, [r3, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a11      	ldr	r2, [pc, #68]	@ (8005984 <TIM_Base_SetConfig+0xf0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d007      	beq.n	8005952 <TIM_Base_SetConfig+0xbe>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a12      	ldr	r2, [pc, #72]	@ (8005990 <TIM_Base_SetConfig+0xfc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d003      	beq.n	8005952 <TIM_Base_SetConfig+0xbe>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a11      	ldr	r2, [pc, #68]	@ (8005994 <TIM_Base_SetConfig+0x100>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d103      	bne.n	800595a <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	2201      	movs	r2, #1
 8005966:	4013      	ands	r3, r2
 8005968:	2b01      	cmp	r3, #1
 800596a:	d106      	bne.n	800597a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	2201      	movs	r2, #1
 8005972:	4393      	bics	r3, r2
 8005974:	001a      	movs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	611a      	str	r2, [r3, #16]
  }
}
 800597a:	46c0      	nop			@ (mov r8, r8)
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bd80      	pop	{r7, pc}
 8005982:	46c0      	nop			@ (mov r8, r8)
 8005984:	40012c00 	.word	0x40012c00
 8005988:	40000400 	.word	0x40000400
 800598c:	40002000 	.word	0x40002000
 8005990:	40014400 	.word	0x40014400
 8005994:	40014800 	.word	0x40014800
 8005998:	fffffcff 	.word	0xfffffcff

0800599c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4393      	bics	r3, r2
 80059b4:	001a      	movs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	4a2e      	ldr	r2, [pc, #184]	@ (8005a84 <TIM_OC1_SetConfig+0xe8>)
 80059ca:	4013      	ands	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2203      	movs	r2, #3
 80059d2:	4393      	bics	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2202      	movs	r2, #2
 80059e4:	4393      	bics	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a24      	ldr	r2, [pc, #144]	@ (8005a88 <TIM_OC1_SetConfig+0xec>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_OC1_SetConfig+0x6e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a23      	ldr	r2, [pc, #140]	@ (8005a8c <TIM_OC1_SetConfig+0xf0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC1_SetConfig+0x6e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a22      	ldr	r2, [pc, #136]	@ (8005a90 <TIM_OC1_SetConfig+0xf4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d10c      	bne.n	8005a24 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	4393      	bics	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2204      	movs	r2, #4
 8005a20:	4393      	bics	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a18      	ldr	r2, [pc, #96]	@ (8005a88 <TIM_OC1_SetConfig+0xec>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_OC1_SetConfig+0xa0>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a17      	ldr	r2, [pc, #92]	@ (8005a8c <TIM_OC1_SetConfig+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_OC1_SetConfig+0xa0>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a16      	ldr	r2, [pc, #88]	@ (8005a90 <TIM_OC1_SetConfig+0xf4>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d111      	bne.n	8005a60 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	@ (8005a94 <TIM_OC1_SetConfig+0xf8>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4a14      	ldr	r2, [pc, #80]	@ (8005a98 <TIM_OC1_SetConfig+0xfc>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	693a      	ldr	r2, [r7, #16]
 8005a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	621a      	str	r2, [r3, #32]
}
 8005a7a:	46c0      	nop			@ (mov r8, r8)
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	b006      	add	sp, #24
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	46c0      	nop			@ (mov r8, r8)
 8005a84:	fffeff8f 	.word	0xfffeff8f
 8005a88:	40012c00 	.word	0x40012c00
 8005a8c:	40014400 	.word	0x40014400
 8005a90:	40014800 	.word	0x40014800
 8005a94:	fffffeff 	.word	0xfffffeff
 8005a98:	fffffdff 	.word	0xfffffdff

08005a9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6a1b      	ldr	r3, [r3, #32]
 8005ab0:	2210      	movs	r2, #16
 8005ab2:	4393      	bics	r3, r2
 8005ab4:	001a      	movs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	699b      	ldr	r3, [r3, #24]
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b7c <TIM_OC2_SetConfig+0xe0>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8005b80 <TIM_OC2_SetConfig+0xe4>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	021b      	lsls	r3, r3, #8
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2220      	movs	r2, #32
 8005ae6:	4393      	bics	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	011b      	lsls	r3, r3, #4
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a22      	ldr	r2, [pc, #136]	@ (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10d      	bne.n	8005b1a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2280      	movs	r2, #128	@ 0x80
 8005b02:	4393      	bics	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	011b      	lsls	r3, r3, #4
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2240      	movs	r2, #64	@ 0x40
 8005b16:	4393      	bics	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a19      	ldr	r2, [pc, #100]	@ (8005b84 <TIM_OC2_SetConfig+0xe8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d007      	beq.n	8005b32 <TIM_OC2_SetConfig+0x96>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a18      	ldr	r2, [pc, #96]	@ (8005b88 <TIM_OC2_SetConfig+0xec>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d003      	beq.n	8005b32 <TIM_OC2_SetConfig+0x96>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a17      	ldr	r2, [pc, #92]	@ (8005b8c <TIM_OC2_SetConfig+0xf0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d113      	bne.n	8005b5a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	4a16      	ldr	r2, [pc, #88]	@ (8005b90 <TIM_OC2_SetConfig+0xf4>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	4a15      	ldr	r2, [pc, #84]	@ (8005b94 <TIM_OC2_SetConfig+0xf8>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	621a      	str	r2, [r3, #32]
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b006      	add	sp, #24
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	feff8fff 	.word	0xfeff8fff
 8005b80:	fffffcff 	.word	0xfffffcff
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800
 8005b90:	fffffbff 	.word	0xfffffbff
 8005b94:	fffff7ff 	.word	0xfffff7ff

08005b98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	4a31      	ldr	r2, [pc, #196]	@ (8005c74 <TIM_OC3_SetConfig+0xdc>)
 8005bae:	401a      	ands	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a2d      	ldr	r2, [pc, #180]	@ (8005c78 <TIM_OC3_SetConfig+0xe0>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	4393      	bics	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	4a27      	ldr	r2, [pc, #156]	@ (8005c7c <TIM_OC3_SetConfig+0xe4>)
 8005bde:	4013      	ands	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	021b      	lsls	r3, r3, #8
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a23      	ldr	r2, [pc, #140]	@ (8005c80 <TIM_OC3_SetConfig+0xe8>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d10d      	bne.n	8005c12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	4a22      	ldr	r2, [pc, #136]	@ (8005c84 <TIM_OC3_SetConfig+0xec>)
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8005c88 <TIM_OC3_SetConfig+0xf0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1a      	ldr	r2, [pc, #104]	@ (8005c80 <TIM_OC3_SetConfig+0xe8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d007      	beq.n	8005c2a <TIM_OC3_SetConfig+0x92>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c8c <TIM_OC3_SetConfig+0xf4>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d003      	beq.n	8005c2a <TIM_OC3_SetConfig+0x92>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a1a      	ldr	r2, [pc, #104]	@ (8005c90 <TIM_OC3_SetConfig+0xf8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d113      	bne.n	8005c52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	4a19      	ldr	r2, [pc, #100]	@ (8005c94 <TIM_OC3_SetConfig+0xfc>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4a18      	ldr	r2, [pc, #96]	@ (8005c98 <TIM_OC3_SetConfig+0x100>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	695b      	ldr	r3, [r3, #20]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	693a      	ldr	r2, [r7, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	621a      	str	r2, [r3, #32]
}
 8005c6c:	46c0      	nop			@ (mov r8, r8)
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b006      	add	sp, #24
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	fffffeff 	.word	0xfffffeff
 8005c78:	fffeff8f 	.word	0xfffeff8f
 8005c7c:	fffffdff 	.word	0xfffffdff
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	fffff7ff 	.word	0xfffff7ff
 8005c88:	fffffbff 	.word	0xfffffbff
 8005c8c:	40014400 	.word	0x40014400
 8005c90:	40014800 	.word	0x40014800
 8005c94:	ffffefff 	.word	0xffffefff
 8005c98:	ffffdfff 	.word	0xffffdfff

08005c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6a1b      	ldr	r3, [r3, #32]
 8005cb0:	4a24      	ldr	r2, [pc, #144]	@ (8005d44 <TIM_OC4_SetConfig+0xa8>)
 8005cb2:	401a      	ands	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	69db      	ldr	r3, [r3, #28]
 8005cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4a20      	ldr	r2, [pc, #128]	@ (8005d48 <TIM_OC4_SetConfig+0xac>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a1f      	ldr	r2, [pc, #124]	@ (8005d4c <TIM_OC4_SetConfig+0xb0>)
 8005cd0:	4013      	ands	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	021b      	lsls	r3, r3, #8
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8005d50 <TIM_OC4_SetConfig+0xb4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	031b      	lsls	r3, r3, #12
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a17      	ldr	r2, [pc, #92]	@ (8005d54 <TIM_OC4_SetConfig+0xb8>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d007      	beq.n	8005d0c <TIM_OC4_SetConfig+0x70>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a16      	ldr	r2, [pc, #88]	@ (8005d58 <TIM_OC4_SetConfig+0xbc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_OC4_SetConfig+0x70>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <TIM_OC4_SetConfig+0xc0>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d109      	bne.n	8005d20 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	4a14      	ldr	r2, [pc, #80]	@ (8005d60 <TIM_OC4_SetConfig+0xc4>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	019b      	lsls	r3, r3, #6
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	697a      	ldr	r2, [r7, #20]
 8005d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	621a      	str	r2, [r3, #32]
}
 8005d3a:	46c0      	nop			@ (mov r8, r8)
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	b006      	add	sp, #24
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			@ (mov r8, r8)
 8005d44:	ffffefff 	.word	0xffffefff
 8005d48:	feff8fff 	.word	0xfeff8fff
 8005d4c:	fffffcff 	.word	0xfffffcff
 8005d50:	ffffdfff 	.word	0xffffdfff
 8005d54:	40012c00 	.word	0x40012c00
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	40014800 	.word	0x40014800
 8005d60:	ffffbfff 	.word	0xffffbfff

08005d64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6a1b      	ldr	r3, [r3, #32]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	4a21      	ldr	r2, [pc, #132]	@ (8005e00 <TIM_OC5_SetConfig+0x9c>)
 8005d7a:	401a      	ands	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <TIM_OC5_SetConfig+0xa0>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	4a19      	ldr	r2, [pc, #100]	@ (8005e08 <TIM_OC5_SetConfig+0xa4>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a15      	ldr	r2, [pc, #84]	@ (8005e0c <TIM_OC5_SetConfig+0xa8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_OC5_SetConfig+0x66>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a14      	ldr	r2, [pc, #80]	@ (8005e10 <TIM_OC5_SetConfig+0xac>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_OC5_SetConfig+0x66>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	@ (8005e14 <TIM_OC5_SetConfig+0xb0>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d109      	bne.n	8005dde <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e00 <TIM_OC5_SetConfig+0x9c>)
 8005dce:	4013      	ands	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	021b      	lsls	r3, r3, #8
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	693a      	ldr	r2, [r7, #16]
 8005df6:	621a      	str	r2, [r3, #32]
}
 8005df8:	46c0      	nop			@ (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	b006      	add	sp, #24
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	fffeffff 	.word	0xfffeffff
 8005e04:	fffeff8f 	.word	0xfffeff8f
 8005e08:	fffdffff 	.word	0xfffdffff
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40014400 	.word	0x40014400
 8005e14:	40014800 	.word	0x40014800

08005e18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	4a22      	ldr	r2, [pc, #136]	@ (8005eb8 <TIM_OC6_SetConfig+0xa0>)
 8005e2e:	401a      	ands	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a1e      	ldr	r2, [pc, #120]	@ (8005ebc <TIM_OC6_SetConfig+0xa4>)
 8005e44:	4013      	ands	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	021b      	lsls	r3, r3, #8
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec0 <TIM_OC6_SetConfig+0xa8>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	051b      	lsls	r3, r3, #20
 8005e62:	693a      	ldr	r2, [r7, #16]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a16      	ldr	r2, [pc, #88]	@ (8005ec4 <TIM_OC6_SetConfig+0xac>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d007      	beq.n	8005e80 <TIM_OC6_SetConfig+0x68>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a15      	ldr	r2, [pc, #84]	@ (8005ec8 <TIM_OC6_SetConfig+0xb0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d003      	beq.n	8005e80 <TIM_OC6_SetConfig+0x68>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a14      	ldr	r2, [pc, #80]	@ (8005ecc <TIM_OC6_SetConfig+0xb4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d109      	bne.n	8005e94 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4a13      	ldr	r2, [pc, #76]	@ (8005ed0 <TIM_OC6_SetConfig+0xb8>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	029b      	lsls	r3, r3, #10
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b006      	add	sp, #24
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			@ (mov r8, r8)
 8005eb8:	ffefffff 	.word	0xffefffff
 8005ebc:	feff8fff 	.word	0xfeff8fff
 8005ec0:	ffdfffff 	.word	0xffdfffff
 8005ec4:	40012c00 	.word	0x40012c00
 8005ec8:	40014400 	.word	0x40014400
 8005ecc:	40014800 	.word	0x40014800
 8005ed0:	fffbffff 	.word	0xfffbffff

08005ed4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a1b      	ldr	r3, [r3, #32]
 8005eec:	2201      	movs	r2, #1
 8005eee:	4393      	bics	r3, r2
 8005ef0:	001a      	movs	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <TIM_TI1_SetConfig+0xa4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d008      	beq.n	8005f16 <TIM_TI1_SetConfig+0x42>
 8005f04:	68fa      	ldr	r2, [r7, #12]
 8005f06:	2380      	movs	r3, #128	@ 0x80
 8005f08:	05db      	lsls	r3, r3, #23
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d003      	beq.n	8005f16 <TIM_TI1_SetConfig+0x42>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	4a1a      	ldr	r2, [pc, #104]	@ (8005f7c <TIM_TI1_SetConfig+0xa8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <TIM_TI1_SetConfig+0x46>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <TIM_TI1_SetConfig+0x48>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d008      	beq.n	8005f32 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2203      	movs	r2, #3
 8005f24:	4393      	bics	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	617b      	str	r3, [r7, #20]
 8005f30:	e003      	b.n	8005f3a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2201      	movs	r2, #1
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	22f0      	movs	r2, #240	@ 0xf0
 8005f3e:	4393      	bics	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	22ff      	movs	r2, #255	@ 0xff
 8005f48:	4013      	ands	r3, r2
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	220a      	movs	r2, #10
 8005f54:	4393      	bics	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	220a      	movs	r2, #10
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	621a      	str	r2, [r3, #32]
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b006      	add	sp, #24
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40012c00 	.word	0x40012c00
 8005f7c:	40000400 	.word	0x40000400

08005f80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b086      	sub	sp, #24
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	2201      	movs	r2, #1
 8005f98:	4393      	bics	r3, r2
 8005f9a:	001a      	movs	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	22f0      	movs	r2, #240	@ 0xf0
 8005faa:	4393      	bics	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	220a      	movs	r2, #10
 8005fbc:	4393      	bics	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	621a      	str	r2, [r3, #32]
}
 8005fd4:	46c0      	nop			@ (mov r8, r8)
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	b006      	add	sp, #24
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6a1b      	ldr	r3, [r3, #32]
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	001a      	movs	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	4a14      	ldr	r2, [pc, #80]	@ (8006058 <TIM_TI2_SetConfig+0x7c>)
 8006008:	4013      	ands	r3, r2
 800600a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4313      	orrs	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4a10      	ldr	r2, [pc, #64]	@ (800605c <TIM_TI2_SetConfig+0x80>)
 800601a:	4013      	ands	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	031b      	lsls	r3, r3, #12
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	0c1b      	lsrs	r3, r3, #16
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	22a0      	movs	r2, #160	@ 0xa0
 8006030:	4393      	bics	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	22a0      	movs	r2, #160	@ 0xa0
 800603a:	4013      	ands	r3, r2
 800603c:	697a      	ldr	r2, [r7, #20]
 800603e:	4313      	orrs	r3, r2
 8006040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	b006      	add	sp, #24
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	fffffcff 	.word	0xfffffcff
 800605c:	ffff0fff 	.word	0xffff0fff

08006060 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	2210      	movs	r2, #16
 8006078:	4393      	bics	r3, r2
 800607a:	001a      	movs	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <TIM_TI2_ConfigInputStage+0x60>)
 800608a:	4013      	ands	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	031b      	lsls	r3, r3, #12
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	22a0      	movs	r2, #160	@ 0xa0
 800609c:	4393      	bics	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	693a      	ldr	r2, [r7, #16]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	46c0      	nop			@ (mov r8, r8)
 80060b8:	46bd      	mov	sp, r7
 80060ba:	b006      	add	sp, #24
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	ffff0fff 	.word	0xffff0fff

080060c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
 80060d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	4a17      	ldr	r2, [pc, #92]	@ (800613c <TIM_TI3_SetConfig+0x78>)
 80060de:	401a      	ands	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	2203      	movs	r2, #3
 80060ee:	4393      	bics	r3, r2
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	22f0      	movs	r2, #240	@ 0xf0
 80060fe:	4393      	bics	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	22ff      	movs	r2, #255	@ 0xff
 8006108:	4013      	ands	r3, r2
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	4a0b      	ldr	r2, [pc, #44]	@ (8006140 <TIM_TI3_SetConfig+0x7c>)
 8006114:	4013      	ands	r3, r2
 8006116:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	021a      	lsls	r2, r3, #8
 800611c:	23a0      	movs	r3, #160	@ 0xa0
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	4013      	ands	r3, r2
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	4313      	orrs	r3, r2
 8006126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	46c0      	nop			@ (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b006      	add	sp, #24
 800613a:	bd80      	pop	{r7, pc}
 800613c:	fffffeff 	.word	0xfffffeff
 8006140:	fffff5ff 	.word	0xfffff5ff

08006144 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <TIM_TI4_SetConfig+0x7c>)
 800615e:	401a      	ands	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <TIM_TI4_SetConfig+0x80>)
 800616e:	4013      	ands	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	4a12      	ldr	r2, [pc, #72]	@ (80061c8 <TIM_TI4_SetConfig+0x84>)
 8006180:	4013      	ands	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	031b      	lsls	r3, r3, #12
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	0c1b      	lsrs	r3, r3, #16
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	4a0d      	ldr	r2, [pc, #52]	@ (80061cc <TIM_TI4_SetConfig+0x88>)
 8006196:	4013      	ands	r3, r2
 8006198:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	031a      	lsls	r2, r3, #12
 800619e:	23a0      	movs	r3, #160	@ 0xa0
 80061a0:	021b      	lsls	r3, r3, #8
 80061a2:	4013      	ands	r3, r2
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b006      	add	sp, #24
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			@ (mov r8, r8)
 80061c0:	ffffefff 	.word	0xffffefff
 80061c4:	fffffcff 	.word	0xfffffcff
 80061c8:	ffff0fff 	.word	0xffff0fff
 80061cc:	ffff5fff 	.word	0xffff5fff

080061d0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4a08      	ldr	r2, [pc, #32]	@ (8006204 <TIM_ITRx_SetConfig+0x34>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	2207      	movs	r2, #7
 80061f0:	4313      	orrs	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	609a      	str	r2, [r3, #8]
}
 80061fa:	46c0      	nop			@ (mov r8, r8)
 80061fc:	46bd      	mov	sp, r7
 80061fe:	b004      	add	sp, #16
 8006200:	bd80      	pop	{r7, pc}
 8006202:	46c0      	nop			@ (mov r8, r8)
 8006204:	ffcfff8f 	.word	0xffcfff8f

08006208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689b      	ldr	r3, [r3, #8]
 800621a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4a09      	ldr	r2, [pc, #36]	@ (8006244 <TIM_ETR_SetConfig+0x3c>)
 8006220:	4013      	ands	r3, r2
 8006222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	021a      	lsls	r2, r3, #8
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	431a      	orrs	r2, r3
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	4313      	orrs	r3, r2
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	46c0      	nop			@ (mov r8, r8)
 800623e:	46bd      	mov	sp, r7
 8006240:	b006      	add	sp, #24
 8006242:	bd80      	pop	{r7, pc}
 8006244:	ffff00ff 	.word	0xffff00ff

08006248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	221f      	movs	r2, #31
 8006258:	4013      	ands	r3, r2
 800625a:	2201      	movs	r2, #1
 800625c:	409a      	lsls	r2, r3
 800625e:	0013      	movs	r3, r2
 8006260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	43d2      	mvns	r2, r2
 800626a:	401a      	ands	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1a      	ldr	r2, [r3, #32]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	211f      	movs	r1, #31
 8006278:	400b      	ands	r3, r1
 800627a:	6879      	ldr	r1, [r7, #4]
 800627c:	4099      	lsls	r1, r3
 800627e:	000b      	movs	r3, r1
 8006280:	431a      	orrs	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b006      	add	sp, #24
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2184      	movs	r1, #132	@ 0x84
 800629c:	4a1c      	ldr	r2, [pc, #112]	@ (8006310 <TIM_ResetCallback+0x80>)
 800629e:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2188      	movs	r1, #136	@ 0x88
 80062a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006314 <TIM_ResetCallback+0x84>)
 80062a6:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	218c      	movs	r1, #140	@ 0x8c
 80062ac:	4a1a      	ldr	r2, [pc, #104]	@ (8006318 <TIM_ResetCallback+0x88>)
 80062ae:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2190      	movs	r1, #144	@ 0x90
 80062b4:	4a19      	ldr	r2, [pc, #100]	@ (800631c <TIM_ResetCallback+0x8c>)
 80062b6:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2194      	movs	r1, #148	@ 0x94
 80062bc:	4a18      	ldr	r2, [pc, #96]	@ (8006320 <TIM_ResetCallback+0x90>)
 80062be:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2198      	movs	r1, #152	@ 0x98
 80062c4:	4a17      	ldr	r2, [pc, #92]	@ (8006324 <TIM_ResetCallback+0x94>)
 80062c6:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	219c      	movs	r1, #156	@ 0x9c
 80062cc:	4a16      	ldr	r2, [pc, #88]	@ (8006328 <TIM_ResetCallback+0x98>)
 80062ce:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	21a0      	movs	r1, #160	@ 0xa0
 80062d4:	4a15      	ldr	r2, [pc, #84]	@ (800632c <TIM_ResetCallback+0x9c>)
 80062d6:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	21a4      	movs	r1, #164	@ 0xa4
 80062dc:	4a14      	ldr	r2, [pc, #80]	@ (8006330 <TIM_ResetCallback+0xa0>)
 80062de:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	21a8      	movs	r1, #168	@ 0xa8
 80062e4:	4a13      	ldr	r2, [pc, #76]	@ (8006334 <TIM_ResetCallback+0xa4>)
 80062e6:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	21ac      	movs	r1, #172	@ 0xac
 80062ec:	4a12      	ldr	r2, [pc, #72]	@ (8006338 <TIM_ResetCallback+0xa8>)
 80062ee:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	21b0      	movs	r1, #176	@ 0xb0
 80062f4:	4a11      	ldr	r2, [pc, #68]	@ (800633c <TIM_ResetCallback+0xac>)
 80062f6:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	21b4      	movs	r1, #180	@ 0xb4
 80062fc:	4a10      	ldr	r2, [pc, #64]	@ (8006340 <TIM_ResetCallback+0xb0>)
 80062fe:	505a      	str	r2, [r3, r1]
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	21b8      	movs	r1, #184	@ 0xb8
 8006304:	4a0f      	ldr	r2, [pc, #60]	@ (8006344 <TIM_ResetCallback+0xb4>)
 8006306:	505a      	str	r2, [r3, r1]
}
 8006308:	46c0      	nop			@ (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}
 8006310:	080055e9 	.word	0x080055e9
 8006314:	080055f9 	.word	0x080055f9
 8006318:	08005659 	.word	0x08005659
 800631c:	08005669 	.word	0x08005669
 8006320:	08005619 	.word	0x08005619
 8006324:	08005629 	.word	0x08005629
 8006328:	08005609 	.word	0x08005609
 800632c:	08005639 	.word	0x08005639
 8006330:	08005649 	.word	0x08005649
 8006334:	08005679 	.word	0x08005679
 8006338:	08006551 	.word	0x08006551
 800633c:	08006561 	.word	0x08006561
 8006340:	08006571 	.word	0x08006571
 8006344:	08006581 	.word	0x08006581

08006348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	223c      	movs	r2, #60	@ 0x3c
 8006356:	5c9b      	ldrb	r3, [r3, r2]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800635c:	2302      	movs	r3, #2
 800635e:	e050      	b.n	8006402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	223c      	movs	r2, #60	@ 0x3c
 8006364:	2101      	movs	r1, #1
 8006366:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	223d      	movs	r2, #61	@ 0x3d
 800636c:	2102      	movs	r1, #2
 800636e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a21      	ldr	r2, [pc, #132]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d108      	bne.n	800639c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4a20      	ldr	r2, [pc, #128]	@ (8006410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800638e:	4013      	ands	r3, r2
 8006390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	4313      	orrs	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2270      	movs	r2, #112	@ 0x70
 80063a0:	4393      	bics	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a14      	ldr	r2, [pc, #80]	@ (800640c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00a      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	2380      	movs	r3, #128	@ 0x80
 80063c6:	05db      	lsls	r3, r3, #23
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d004      	beq.n	80063d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a10      	ldr	r2, [pc, #64]	@ (8006414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d10c      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2280      	movs	r2, #128	@ 0x80
 80063da:	4393      	bics	r3, r2
 80063dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	223d      	movs	r2, #61	@ 0x3d
 80063f4:	2101      	movs	r1, #1
 80063f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	223c      	movs	r2, #60	@ 0x3c
 80063fc:	2100      	movs	r1, #0
 80063fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	0018      	movs	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	b004      	add	sp, #16
 8006408:	bd80      	pop	{r7, pc}
 800640a:	46c0      	nop			@ (mov r8, r8)
 800640c:	40012c00 	.word	0x40012c00
 8006410:	ff0fffff 	.word	0xff0fffff
 8006414:	40000400 	.word	0x40000400

08006418 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	223c      	movs	r2, #60	@ 0x3c
 800642a:	5c9b      	ldrb	r3, [r3, r2]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006430:	2302      	movs	r3, #2
 8006432:	e06f      	b.n	8006514 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	223c      	movs	r2, #60	@ 0x3c
 8006438:	2101      	movs	r1, #1
 800643a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	22ff      	movs	r2, #255	@ 0xff
 8006440:	4393      	bics	r3, r2
 8006442:	001a      	movs	r2, r3
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4a33      	ldr	r2, [pc, #204]	@ (800651c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006450:	401a      	ands	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4a30      	ldr	r2, [pc, #192]	@ (8006520 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800645e:	401a      	ands	r2, r3
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4a2e      	ldr	r2, [pc, #184]	@ (8006524 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800646c:	401a      	ands	r2, r3
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4a2b      	ldr	r2, [pc, #172]	@ (8006528 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800647a:	401a      	ands	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	4313      	orrs	r3, r2
 8006482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4a29      	ldr	r2, [pc, #164]	@ (800652c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006488:	401a      	ands	r2, r3
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006496:	401a      	ands	r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649c:	4313      	orrs	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4a24      	ldr	r2, [pc, #144]	@ (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80064a4:	401a      	ands	r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	041b      	lsls	r3, r3, #16
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	4a21      	ldr	r2, [pc, #132]	@ (8006538 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80064b4:	401a      	ands	r2, r3
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	69db      	ldr	r3, [r3, #28]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a1e      	ldr	r2, [pc, #120]	@ (800653c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d11c      	bne.n	8006502 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006540 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80064cc:	401a      	ands	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	051b      	lsls	r3, r3, #20
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4a1a      	ldr	r2, [pc, #104]	@ (8006544 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80064dc:	401a      	ands	r2, r3
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a17      	ldr	r2, [pc, #92]	@ (8006548 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80064ea:	401a      	ands	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f0:	4313      	orrs	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4a15      	ldr	r2, [pc, #84]	@ (800654c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80064f8:	401a      	ands	r2, r3
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	223c      	movs	r2, #60	@ 0x3c
 800650e:	2100      	movs	r1, #0
 8006510:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	0018      	movs	r0, r3
 8006516:	46bd      	mov	sp, r7
 8006518:	b004      	add	sp, #16
 800651a:	bd80      	pop	{r7, pc}
 800651c:	fffffcff 	.word	0xfffffcff
 8006520:	fffffbff 	.word	0xfffffbff
 8006524:	fffff7ff 	.word	0xfffff7ff
 8006528:	ffffefff 	.word	0xffffefff
 800652c:	ffffdfff 	.word	0xffffdfff
 8006530:	ffffbfff 	.word	0xffffbfff
 8006534:	fff0ffff 	.word	0xfff0ffff
 8006538:	efffffff 	.word	0xefffffff
 800653c:	40012c00 	.word	0x40012c00
 8006540:	ff0fffff 	.word	0xff0fffff
 8006544:	feffffff 	.word	0xfeffffff
 8006548:	fdffffff 	.word	0xfdffffff
 800654c:	dfffffff 	.word	0xdfffffff

08006550 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006558:	46c0      	nop			@ (mov r8, r8)
 800655a:	46bd      	mov	sp, r7
 800655c:	b002      	add	sp, #8
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8006568:	46c0      	nop			@ (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b002      	add	sp, #8
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006578:	46c0      	nop			@ (mov r8, r8)
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006588:	46c0      	nop			@ (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b002      	add	sp, #8
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e046      	b.n	8006630 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2288      	movs	r2, #136	@ 0x88
 80065a6:	589b      	ldr	r3, [r3, r2]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d107      	bne.n	80065bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2284      	movs	r2, #132	@ 0x84
 80065b0:	2100      	movs	r1, #0
 80065b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	0018      	movs	r0, r3
 80065b8:	f7fa ff46 	bl	8001448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2288      	movs	r2, #136	@ 0x88
 80065c0:	2124      	movs	r1, #36	@ 0x24
 80065c2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2101      	movs	r1, #1
 80065d0:	438a      	bics	r2, r1
 80065d2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	0018      	movs	r0, r3
 80065e0:	f000 faa4 	bl	8006b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f000 f828 	bl	800663c <UART_SetConfig>
 80065ec:	0003      	movs	r3, r0
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d101      	bne.n	80065f6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e01c      	b.n	8006630 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	490d      	ldr	r1, [pc, #52]	@ (8006638 <HAL_UART_Init+0xa8>)
 8006602:	400a      	ands	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	212a      	movs	r1, #42	@ 0x2a
 8006612:	438a      	bics	r2, r1
 8006614:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2101      	movs	r1, #1
 8006622:	430a      	orrs	r2, r1
 8006624:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	0018      	movs	r0, r3
 800662a:	f000 fb33 	bl	8006c94 <UART_CheckIdleState>
 800662e:	0003      	movs	r3, r0
}
 8006630:	0018      	movs	r0, r3
 8006632:	46bd      	mov	sp, r7
 8006634:	b002      	add	sp, #8
 8006636:	bd80      	pop	{r7, pc}
 8006638:	ffffb7ff 	.word	0xffffb7ff

0800663c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	b5b0      	push	{r4, r5, r7, lr}
 800663e:	b090      	sub	sp, #64	@ 0x40
 8006640:	af00      	add	r7, sp, #0
 8006642:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006644:	231a      	movs	r3, #26
 8006646:	2220      	movs	r2, #32
 8006648:	189b      	adds	r3, r3, r2
 800664a:	19db      	adds	r3, r3, r7
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	431a      	orrs	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	431a      	orrs	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	4313      	orrs	r3, r2
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4ac4      	ldr	r2, [pc, #784]	@ (8006980 <UART_SetConfig+0x344>)
 8006670:	4013      	ands	r3, r2
 8006672:	0019      	movs	r1, r3
 8006674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	430b      	orrs	r3, r1
 800667c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	4abf      	ldr	r2, [pc, #764]	@ (8006984 <UART_SetConfig+0x348>)
 8006686:	4013      	ands	r3, r2
 8006688:	0018      	movs	r0, r3
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	68d9      	ldr	r1, [r3, #12]
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	0003      	movs	r3, r0
 8006694:	430b      	orrs	r3, r1
 8006696:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4ab9      	ldr	r2, [pc, #740]	@ (8006988 <UART_SetConfig+0x34c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80066ae:	4313      	orrs	r3, r2
 80066b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4ab4      	ldr	r2, [pc, #720]	@ (800698c <UART_SetConfig+0x350>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	0019      	movs	r1, r3
 80066be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ce:	220f      	movs	r2, #15
 80066d0:	4393      	bics	r3, r2
 80066d2:	0018      	movs	r0, r3
 80066d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80066d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	0003      	movs	r3, r0
 80066de:	430b      	orrs	r3, r1
 80066e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4aaa      	ldr	r2, [pc, #680]	@ (8006990 <UART_SetConfig+0x354>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d131      	bne.n	8006750 <UART_SetConfig+0x114>
 80066ec:	4ba9      	ldr	r3, [pc, #676]	@ (8006994 <UART_SetConfig+0x358>)
 80066ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066f0:	2203      	movs	r2, #3
 80066f2:	4013      	ands	r3, r2
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d01d      	beq.n	8006734 <UART_SetConfig+0xf8>
 80066f8:	d823      	bhi.n	8006742 <UART_SetConfig+0x106>
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d00c      	beq.n	8006718 <UART_SetConfig+0xdc>
 80066fe:	d820      	bhi.n	8006742 <UART_SetConfig+0x106>
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <UART_SetConfig+0xce>
 8006704:	2b01      	cmp	r3, #1
 8006706:	d00e      	beq.n	8006726 <UART_SetConfig+0xea>
 8006708:	e01b      	b.n	8006742 <UART_SetConfig+0x106>
 800670a:	231b      	movs	r3, #27
 800670c:	2220      	movs	r2, #32
 800670e:	189b      	adds	r3, r3, r2
 8006710:	19db      	adds	r3, r3, r7
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e071      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006718:	231b      	movs	r3, #27
 800671a:	2220      	movs	r2, #32
 800671c:	189b      	adds	r3, r3, r2
 800671e:	19db      	adds	r3, r3, r7
 8006720:	2202      	movs	r2, #2
 8006722:	701a      	strb	r2, [r3, #0]
 8006724:	e06a      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006726:	231b      	movs	r3, #27
 8006728:	2220      	movs	r2, #32
 800672a:	189b      	adds	r3, r3, r2
 800672c:	19db      	adds	r3, r3, r7
 800672e:	2204      	movs	r2, #4
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	e063      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006734:	231b      	movs	r3, #27
 8006736:	2220      	movs	r2, #32
 8006738:	189b      	adds	r3, r3, r2
 800673a:	19db      	adds	r3, r3, r7
 800673c:	2208      	movs	r2, #8
 800673e:	701a      	strb	r2, [r3, #0]
 8006740:	e05c      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006742:	231b      	movs	r3, #27
 8006744:	2220      	movs	r2, #32
 8006746:	189b      	adds	r3, r3, r2
 8006748:	19db      	adds	r3, r3, r7
 800674a:	2210      	movs	r2, #16
 800674c:	701a      	strb	r2, [r3, #0]
 800674e:	e055      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a90      	ldr	r2, [pc, #576]	@ (8006998 <UART_SetConfig+0x35c>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d106      	bne.n	8006768 <UART_SetConfig+0x12c>
 800675a:	231b      	movs	r3, #27
 800675c:	2220      	movs	r2, #32
 800675e:	189b      	adds	r3, r3, r2
 8006760:	19db      	adds	r3, r3, r7
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	e049      	b.n	80067fc <UART_SetConfig+0x1c0>
 8006768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a86      	ldr	r2, [pc, #536]	@ (8006988 <UART_SetConfig+0x34c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d13e      	bne.n	80067f0 <UART_SetConfig+0x1b4>
 8006772:	4b88      	ldr	r3, [pc, #544]	@ (8006994 <UART_SetConfig+0x358>)
 8006774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006776:	23c0      	movs	r3, #192	@ 0xc0
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	4013      	ands	r3, r2
 800677c:	22c0      	movs	r2, #192	@ 0xc0
 800677e:	0112      	lsls	r2, r2, #4
 8006780:	4293      	cmp	r3, r2
 8006782:	d027      	beq.n	80067d4 <UART_SetConfig+0x198>
 8006784:	22c0      	movs	r2, #192	@ 0xc0
 8006786:	0112      	lsls	r2, r2, #4
 8006788:	4293      	cmp	r3, r2
 800678a:	d82a      	bhi.n	80067e2 <UART_SetConfig+0x1a6>
 800678c:	2280      	movs	r2, #128	@ 0x80
 800678e:	0112      	lsls	r2, r2, #4
 8006790:	4293      	cmp	r3, r2
 8006792:	d011      	beq.n	80067b8 <UART_SetConfig+0x17c>
 8006794:	2280      	movs	r2, #128	@ 0x80
 8006796:	0112      	lsls	r2, r2, #4
 8006798:	4293      	cmp	r3, r2
 800679a:	d822      	bhi.n	80067e2 <UART_SetConfig+0x1a6>
 800679c:	2b00      	cmp	r3, #0
 800679e:	d004      	beq.n	80067aa <UART_SetConfig+0x16e>
 80067a0:	2280      	movs	r2, #128	@ 0x80
 80067a2:	00d2      	lsls	r2, r2, #3
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00e      	beq.n	80067c6 <UART_SetConfig+0x18a>
 80067a8:	e01b      	b.n	80067e2 <UART_SetConfig+0x1a6>
 80067aa:	231b      	movs	r3, #27
 80067ac:	2220      	movs	r2, #32
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	19db      	adds	r3, r3, r7
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e021      	b.n	80067fc <UART_SetConfig+0x1c0>
 80067b8:	231b      	movs	r3, #27
 80067ba:	2220      	movs	r2, #32
 80067bc:	189b      	adds	r3, r3, r2
 80067be:	19db      	adds	r3, r3, r7
 80067c0:	2202      	movs	r2, #2
 80067c2:	701a      	strb	r2, [r3, #0]
 80067c4:	e01a      	b.n	80067fc <UART_SetConfig+0x1c0>
 80067c6:	231b      	movs	r3, #27
 80067c8:	2220      	movs	r2, #32
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	19db      	adds	r3, r3, r7
 80067ce:	2204      	movs	r2, #4
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	e013      	b.n	80067fc <UART_SetConfig+0x1c0>
 80067d4:	231b      	movs	r3, #27
 80067d6:	2220      	movs	r2, #32
 80067d8:	189b      	adds	r3, r3, r2
 80067da:	19db      	adds	r3, r3, r7
 80067dc:	2208      	movs	r2, #8
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e00c      	b.n	80067fc <UART_SetConfig+0x1c0>
 80067e2:	231b      	movs	r3, #27
 80067e4:	2220      	movs	r2, #32
 80067e6:	189b      	adds	r3, r3, r2
 80067e8:	19db      	adds	r3, r3, r7
 80067ea:	2210      	movs	r2, #16
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e005      	b.n	80067fc <UART_SetConfig+0x1c0>
 80067f0:	231b      	movs	r3, #27
 80067f2:	2220      	movs	r2, #32
 80067f4:	189b      	adds	r3, r3, r2
 80067f6:	19db      	adds	r3, r3, r7
 80067f8:	2210      	movs	r2, #16
 80067fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a61      	ldr	r2, [pc, #388]	@ (8006988 <UART_SetConfig+0x34c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d000      	beq.n	8006808 <UART_SetConfig+0x1cc>
 8006806:	e092      	b.n	800692e <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006808:	231b      	movs	r3, #27
 800680a:	2220      	movs	r2, #32
 800680c:	189b      	adds	r3, r3, r2
 800680e:	19db      	adds	r3, r3, r7
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	2b08      	cmp	r3, #8
 8006814:	d015      	beq.n	8006842 <UART_SetConfig+0x206>
 8006816:	dc18      	bgt.n	800684a <UART_SetConfig+0x20e>
 8006818:	2b04      	cmp	r3, #4
 800681a:	d00d      	beq.n	8006838 <UART_SetConfig+0x1fc>
 800681c:	dc15      	bgt.n	800684a <UART_SetConfig+0x20e>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <UART_SetConfig+0x1ec>
 8006822:	2b02      	cmp	r3, #2
 8006824:	d005      	beq.n	8006832 <UART_SetConfig+0x1f6>
 8006826:	e010      	b.n	800684a <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006828:	f7fd fec6 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 800682c:	0003      	movs	r3, r0
 800682e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006830:	e014      	b.n	800685c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006832:	4b5a      	ldr	r3, [pc, #360]	@ (800699c <UART_SetConfig+0x360>)
 8006834:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006836:	e011      	b.n	800685c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006838:	f7fd fe32 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 800683c:	0003      	movs	r3, r0
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006840:	e00c      	b.n	800685c <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	2380      	movs	r3, #128	@ 0x80
 8006844:	021b      	lsls	r3, r3, #8
 8006846:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006848:	e008      	b.n	800685c <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 800684e:	231a      	movs	r3, #26
 8006850:	2220      	movs	r2, #32
 8006852:	189b      	adds	r3, r3, r2
 8006854:	19db      	adds	r3, r3, r7
 8006856:	2201      	movs	r2, #1
 8006858:	701a      	strb	r2, [r3, #0]
        break;
 800685a:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685e:	2b00      	cmp	r3, #0
 8006860:	d100      	bne.n	8006864 <UART_SetConfig+0x228>
 8006862:	e147      	b.n	8006af4 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006868:	4b4d      	ldr	r3, [pc, #308]	@ (80069a0 <UART_SetConfig+0x364>)
 800686a:	0052      	lsls	r2, r2, #1
 800686c:	5ad3      	ldrh	r3, [r2, r3]
 800686e:	0019      	movs	r1, r3
 8006870:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006872:	f7f9 fc47 	bl	8000104 <__udivsi3>
 8006876:	0003      	movs	r3, r0
 8006878:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800687a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	0013      	movs	r3, r2
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	189b      	adds	r3, r3, r2
 8006884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006886:	429a      	cmp	r2, r3
 8006888:	d305      	bcc.n	8006896 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800688a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006892:	429a      	cmp	r2, r3
 8006894:	d906      	bls.n	80068a4 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8006896:	231a      	movs	r3, #26
 8006898:	2220      	movs	r2, #32
 800689a:	189b      	adds	r3, r3, r2
 800689c:	19db      	adds	r3, r3, r7
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	e127      	b.n	8006af4 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80068b0:	4b3b      	ldr	r3, [pc, #236]	@ (80069a0 <UART_SetConfig+0x364>)
 80068b2:	0052      	lsls	r2, r2, #1
 80068b4:	5ad3      	ldrh	r3, [r2, r3]
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	2300      	movs	r3, #0
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	69b8      	ldr	r0, [r7, #24]
 80068c2:	69f9      	ldr	r1, [r7, #28]
 80068c4:	f7f9 fcaa 	bl	800021c <__aeabi_uldivmod>
 80068c8:	0002      	movs	r2, r0
 80068ca:	000b      	movs	r3, r1
 80068cc:	0e11      	lsrs	r1, r2, #24
 80068ce:	021d      	lsls	r5, r3, #8
 80068d0:	430d      	orrs	r5, r1
 80068d2:	0214      	lsls	r4, r2, #8
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	085b      	lsrs	r3, r3, #1
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	68b8      	ldr	r0, [r7, #8]
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	1900      	adds	r0, r0, r4
 80068e6:	4169      	adcs	r1, r5
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f7f9 fc91 	bl	800021c <__aeabi_uldivmod>
 80068fa:	0002      	movs	r2, r0
 80068fc:	000b      	movs	r3, r1
 80068fe:	0013      	movs	r3, r2
 8006900:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006904:	23c0      	movs	r3, #192	@ 0xc0
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	429a      	cmp	r2, r3
 800690a:	d309      	bcc.n	8006920 <UART_SetConfig+0x2e4>
 800690c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800690e:	2380      	movs	r3, #128	@ 0x80
 8006910:	035b      	lsls	r3, r3, #13
 8006912:	429a      	cmp	r2, r3
 8006914:	d204      	bcs.n	8006920 <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e0e9      	b.n	8006af4 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8006920:	231a      	movs	r3, #26
 8006922:	2220      	movs	r2, #32
 8006924:	189b      	adds	r3, r3, r2
 8006926:	19db      	adds	r3, r3, r7
 8006928:	2201      	movs	r2, #1
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	e0e2      	b.n	8006af4 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800692e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006930:	69da      	ldr	r2, [r3, #28]
 8006932:	2380      	movs	r3, #128	@ 0x80
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	429a      	cmp	r2, r3
 8006938:	d000      	beq.n	800693c <UART_SetConfig+0x300>
 800693a:	e083      	b.n	8006a44 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800693c:	231b      	movs	r3, #27
 800693e:	2220      	movs	r2, #32
 8006940:	189b      	adds	r3, r3, r2
 8006942:	19db      	adds	r3, r3, r7
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	2b08      	cmp	r3, #8
 8006948:	d015      	beq.n	8006976 <UART_SetConfig+0x33a>
 800694a:	dc2b      	bgt.n	80069a4 <UART_SetConfig+0x368>
 800694c:	2b04      	cmp	r3, #4
 800694e:	d00d      	beq.n	800696c <UART_SetConfig+0x330>
 8006950:	dc28      	bgt.n	80069a4 <UART_SetConfig+0x368>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <UART_SetConfig+0x320>
 8006956:	2b02      	cmp	r3, #2
 8006958:	d005      	beq.n	8006966 <UART_SetConfig+0x32a>
 800695a:	e023      	b.n	80069a4 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fd fe2c 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 8006960:	0003      	movs	r3, r0
 8006962:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006964:	e027      	b.n	80069b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006966:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <UART_SetConfig+0x360>)
 8006968:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800696a:	e024      	b.n	80069b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800696c:	f7fd fd98 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006970:	0003      	movs	r3, r0
 8006972:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006974:	e01f      	b.n	80069b6 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006976:	2380      	movs	r3, #128	@ 0x80
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697c:	e01b      	b.n	80069b6 <UART_SetConfig+0x37a>
 800697e:	46c0      	nop			@ (mov r8, r8)
 8006980:	cfff69f3 	.word	0xcfff69f3
 8006984:	ffffcfff 	.word	0xffffcfff
 8006988:	40008000 	.word	0x40008000
 800698c:	11fff4ff 	.word	0x11fff4ff
 8006990:	40013800 	.word	0x40013800
 8006994:	40021000 	.word	0x40021000
 8006998:	40004400 	.word	0x40004400
 800699c:	00f42400 	.word	0x00f42400
 80069a0:	080079f0 	.word	0x080079f0
      default:
        pclk = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 80069a8:	231a      	movs	r3, #26
 80069aa:	2220      	movs	r2, #32
 80069ac:	189b      	adds	r3, r3, r2
 80069ae:	19db      	adds	r3, r3, r7
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
        break;
 80069b4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d100      	bne.n	80069be <UART_SetConfig+0x382>
 80069bc:	e09a      	b.n	8006af4 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c2:	4b58      	ldr	r3, [pc, #352]	@ (8006b24 <UART_SetConfig+0x4e8>)
 80069c4:	0052      	lsls	r2, r2, #1
 80069c6:	5ad3      	ldrh	r3, [r2, r3]
 80069c8:	0019      	movs	r1, r3
 80069ca:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80069cc:	f7f9 fb9a 	bl	8000104 <__udivsi3>
 80069d0:	0003      	movs	r3, r0
 80069d2:	005a      	lsls	r2, r3, #1
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	18d2      	adds	r2, r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	0019      	movs	r1, r3
 80069e2:	0010      	movs	r0, r2
 80069e4:	f7f9 fb8e 	bl	8000104 <__udivsi3>
 80069e8:	0003      	movs	r3, r0
 80069ea:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ee:	2b0f      	cmp	r3, #15
 80069f0:	d921      	bls.n	8006a36 <UART_SetConfig+0x3fa>
 80069f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f4:	2380      	movs	r3, #128	@ 0x80
 80069f6:	025b      	lsls	r3, r3, #9
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d21c      	bcs.n	8006a36 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	200e      	movs	r0, #14
 8006a02:	2420      	movs	r4, #32
 8006a04:	1903      	adds	r3, r0, r4
 8006a06:	19db      	adds	r3, r3, r7
 8006a08:	210f      	movs	r1, #15
 8006a0a:	438a      	bics	r2, r1
 8006a0c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2207      	movs	r2, #7
 8006a16:	4013      	ands	r3, r2
 8006a18:	b299      	uxth	r1, r3
 8006a1a:	1903      	adds	r3, r0, r4
 8006a1c:	19db      	adds	r3, r3, r7
 8006a1e:	1902      	adds	r2, r0, r4
 8006a20:	19d2      	adds	r2, r2, r7
 8006a22:	8812      	ldrh	r2, [r2, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	1902      	adds	r2, r0, r4
 8006a2e:	19d2      	adds	r2, r2, r7
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	60da      	str	r2, [r3, #12]
 8006a34:	e05e      	b.n	8006af4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006a36:	231a      	movs	r3, #26
 8006a38:	2220      	movs	r2, #32
 8006a3a:	189b      	adds	r3, r3, r2
 8006a3c:	19db      	adds	r3, r3, r7
 8006a3e:	2201      	movs	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]
 8006a42:	e057      	b.n	8006af4 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a44:	231b      	movs	r3, #27
 8006a46:	2220      	movs	r2, #32
 8006a48:	189b      	adds	r3, r3, r2
 8006a4a:	19db      	adds	r3, r3, r7
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d015      	beq.n	8006a7e <UART_SetConfig+0x442>
 8006a52:	dc18      	bgt.n	8006a86 <UART_SetConfig+0x44a>
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d00d      	beq.n	8006a74 <UART_SetConfig+0x438>
 8006a58:	dc15      	bgt.n	8006a86 <UART_SetConfig+0x44a>
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <UART_SetConfig+0x428>
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d005      	beq.n	8006a6e <UART_SetConfig+0x432>
 8006a62:	e010      	b.n	8006a86 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7fd fda8 	bl	80045b8 <HAL_RCC_GetPCLK1Freq>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a6c:	e014      	b.n	8006a98 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8006b28 <UART_SetConfig+0x4ec>)
 8006a70:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a72:	e011      	b.n	8006a98 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a74:	f7fd fd14 	bl	80044a0 <HAL_RCC_GetSysClockFreq>
 8006a78:	0003      	movs	r3, r0
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a7c:	e00c      	b.n	8006a98 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a7e:	2380      	movs	r3, #128	@ 0x80
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a84:	e008      	b.n	8006a98 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8006a8a:	231a      	movs	r3, #26
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	189b      	adds	r3, r3, r2
 8006a90:	19db      	adds	r3, r3, r7
 8006a92:	2201      	movs	r2, #1
 8006a94:	701a      	strb	r2, [r3, #0]
        break;
 8006a96:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d02a      	beq.n	8006af4 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aa2:	4b20      	ldr	r3, [pc, #128]	@ (8006b24 <UART_SetConfig+0x4e8>)
 8006aa4:	0052      	lsls	r2, r2, #1
 8006aa6:	5ad3      	ldrh	r3, [r2, r3]
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006aac:	f7f9 fb2a 	bl	8000104 <__udivsi3>
 8006ab0:	0003      	movs	r3, r0
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	085b      	lsrs	r3, r3, #1
 8006aba:	18d2      	adds	r2, r2, r3
 8006abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	0019      	movs	r1, r3
 8006ac2:	0010      	movs	r0, r2
 8006ac4:	f7f9 fb1e 	bl	8000104 <__udivsi3>
 8006ac8:	0003      	movs	r3, r0
 8006aca:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ace:	2b0f      	cmp	r3, #15
 8006ad0:	d90a      	bls.n	8006ae8 <UART_SetConfig+0x4ac>
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad4:	2380      	movs	r3, #128	@ 0x80
 8006ad6:	025b      	lsls	r3, r3, #9
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d205      	bcs.n	8006ae8 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	e005      	b.n	8006af4 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae8:	231a      	movs	r3, #26
 8006aea:	2220      	movs	r2, #32
 8006aec:	189b      	adds	r3, r3, r2
 8006aee:	19db      	adds	r3, r3, r7
 8006af0:	2201      	movs	r2, #1
 8006af2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af6:	226a      	movs	r2, #106	@ 0x6a
 8006af8:	2101      	movs	r1, #1
 8006afa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afe:	2268      	movs	r2, #104	@ 0x68
 8006b00:	2101      	movs	r1, #1
 8006b02:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b06:	2200      	movs	r2, #0
 8006b08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006b10:	231a      	movs	r3, #26
 8006b12:	2220      	movs	r2, #32
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	19db      	adds	r3, r3, r7
 8006b18:	781b      	ldrb	r3, [r3, #0]
}
 8006b1a:	0018      	movs	r0, r3
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	b010      	add	sp, #64	@ 0x40
 8006b20:	bdb0      	pop	{r4, r5, r7, pc}
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	080079f0 	.word	0x080079f0
 8006b28:	00f42400 	.word	0x00f42400

08006b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b38:	2208      	movs	r2, #8
 8006b3a:	4013      	ands	r3, r2
 8006b3c:	d00b      	beq.n	8006b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4a4a      	ldr	r2, [pc, #296]	@ (8006c70 <UART_AdvFeatureConfig+0x144>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	0019      	movs	r1, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	d00b      	beq.n	8006b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	4a43      	ldr	r2, [pc, #268]	@ (8006c74 <UART_AdvFeatureConfig+0x148>)
 8006b68:	4013      	ands	r3, r2
 8006b6a:	0019      	movs	r1, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d00b      	beq.n	8006b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	4a3b      	ldr	r2, [pc, #236]	@ (8006c78 <UART_AdvFeatureConfig+0x14c>)
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	d00b      	beq.n	8006bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	4a34      	ldr	r2, [pc, #208]	@ (8006c7c <UART_AdvFeatureConfig+0x150>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	0019      	movs	r1, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc0:	2210      	movs	r2, #16
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d00b      	beq.n	8006bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8006c80 <UART_AdvFeatureConfig+0x154>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	2220      	movs	r2, #32
 8006be4:	4013      	ands	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	4a25      	ldr	r2, [pc, #148]	@ (8006c84 <UART_AdvFeatureConfig+0x158>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	2240      	movs	r2, #64	@ 0x40
 8006c06:	4013      	ands	r3, r2
 8006c08:	d01d      	beq.n	8006c46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <UART_AdvFeatureConfig+0x15c>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c26:	2380      	movs	r3, #128	@ 0x80
 8006c28:	035b      	lsls	r3, r3, #13
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d10b      	bne.n	8006c46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	4a15      	ldr	r2, [pc, #84]	@ (8006c8c <UART_AdvFeatureConfig+0x160>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	0019      	movs	r1, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	430a      	orrs	r2, r1
 8006c44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4a:	2280      	movs	r2, #128	@ 0x80
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d00b      	beq.n	8006c68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	4a0e      	ldr	r2, [pc, #56]	@ (8006c90 <UART_AdvFeatureConfig+0x164>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	0019      	movs	r1, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]
  }
}
 8006c68:	46c0      	nop			@ (mov r8, r8)
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b002      	add	sp, #8
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	ffff7fff 	.word	0xffff7fff
 8006c74:	fffdffff 	.word	0xfffdffff
 8006c78:	fffeffff 	.word	0xfffeffff
 8006c7c:	fffbffff 	.word	0xfffbffff
 8006c80:	ffffefff 	.word	0xffffefff
 8006c84:	ffffdfff 	.word	0xffffdfff
 8006c88:	ffefffff 	.word	0xffefffff
 8006c8c:	ff9fffff 	.word	0xff9fffff
 8006c90:	fff7ffff 	.word	0xfff7ffff

08006c94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b092      	sub	sp, #72	@ 0x48
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2290      	movs	r2, #144	@ 0x90
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ca4:	f7fb f9da 	bl	800205c <HAL_GetTick>
 8006ca8:	0003      	movs	r3, r0
 8006caa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2208      	movs	r2, #8
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	2b08      	cmp	r3, #8
 8006cb8:	d12d      	bne.n	8006d16 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cbc:	2280      	movs	r2, #128	@ 0x80
 8006cbe:	0391      	lsls	r1, r2, #14
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	4a47      	ldr	r2, [pc, #284]	@ (8006de0 <UART_CheckIdleState+0x14c>)
 8006cc4:	9200      	str	r2, [sp, #0]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f000 f88e 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006ccc:	1e03      	subs	r3, r0, #0
 8006cce:	d022      	beq.n	8006d16 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006cda:	2301      	movs	r3, #1
 8006cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	f383 8810 	msr	PRIMASK, r3
}
 8006ce4:	46c0      	nop			@ (mov r8, r8)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2180      	movs	r1, #128	@ 0x80
 8006cf2:	438a      	bics	r2, r1
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cfc:	f383 8810 	msr	PRIMASK, r3
}
 8006d00:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2288      	movs	r2, #136	@ 0x88
 8006d06:	2120      	movs	r1, #32
 8006d08:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2284      	movs	r2, #132	@ 0x84
 8006d0e:	2100      	movs	r1, #0
 8006d10:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e060      	b.n	8006dd8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	4013      	ands	r3, r2
 8006d20:	2b04      	cmp	r3, #4
 8006d22:	d146      	bne.n	8006db2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d26:	2280      	movs	r2, #128	@ 0x80
 8006d28:	03d1      	lsls	r1, r2, #15
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	4a2c      	ldr	r2, [pc, #176]	@ (8006de0 <UART_CheckIdleState+0x14c>)
 8006d2e:	9200      	str	r2, [sp, #0]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f000 f859 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d03b      	beq.n	8006db2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d3e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d40:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d44:	2301      	movs	r3, #1
 8006d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f383 8810 	msr	PRIMASK, r3
}
 8006d4e:	46c0      	nop			@ (mov r8, r8)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4922      	ldr	r1, [pc, #136]	@ (8006de4 <UART_CheckIdleState+0x150>)
 8006d5c:	400a      	ands	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f383 8810 	msr	PRIMASK, r3
}
 8006d6a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006d70:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d72:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d76:	2301      	movs	r3, #1
 8006d78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	f383 8810 	msr	PRIMASK, r3
}
 8006d80:	46c0      	nop			@ (mov r8, r8)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	438a      	bics	r2, r1
 8006d90:	609a      	str	r2, [r3, #8]
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f383 8810 	msr	PRIMASK, r3
}
 8006d9c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	228c      	movs	r2, #140	@ 0x8c
 8006da2:	2120      	movs	r1, #32
 8006da4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2284      	movs	r2, #132	@ 0x84
 8006daa:	2100      	movs	r1, #0
 8006dac:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e012      	b.n	8006dd8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2288      	movs	r2, #136	@ 0x88
 8006db6:	2120      	movs	r1, #32
 8006db8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	228c      	movs	r2, #140	@ 0x8c
 8006dbe:	2120      	movs	r1, #32
 8006dc0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2284      	movs	r2, #132	@ 0x84
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	0018      	movs	r0, r3
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	b010      	add	sp, #64	@ 0x40
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	01ffffff 	.word	0x01ffffff
 8006de4:	fffffedf 	.word	0xfffffedf

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	1dfb      	adds	r3, r7, #7
 8006df6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e051      	b.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	d04e      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e00:	f7fb f92c 	bl	800205c <HAL_GetTick>
 8006e04:	0002      	movs	r2, r0
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	69ba      	ldr	r2, [r7, #24]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d302      	bcc.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e051      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2204      	movs	r2, #4
 8006e22:	4013      	ands	r3, r2
 8006e24:	d03b      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b80      	cmp	r3, #128	@ 0x80
 8006e2a:	d038      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b40      	cmp	r3, #64	@ 0x40
 8006e30:	d035      	beq.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2208      	movs	r2, #8
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d111      	bne.n	8006e64 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2208      	movs	r2, #8
 8006e46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f000 f83c 	bl	8006ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2290      	movs	r2, #144	@ 0x90
 8006e54:	2108      	movs	r1, #8
 8006e56:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2284      	movs	r2, #132	@ 0x84
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e02c      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69da      	ldr	r2, [r3, #28]
 8006e6a:	2380      	movs	r3, #128	@ 0x80
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	401a      	ands	r2, r3
 8006e70:	2380      	movs	r3, #128	@ 0x80
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d112      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2280      	movs	r2, #128	@ 0x80
 8006e7e:	0112      	lsls	r2, r2, #4
 8006e80:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f000 f81f 	bl	8006ec8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2290      	movs	r2, #144	@ 0x90
 8006e8e:	2120      	movs	r1, #32
 8006e90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2284      	movs	r2, #132	@ 0x84
 8006e96:	2100      	movs	r1, #0
 8006e98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e00f      	b.n	8006ebe <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	425a      	negs	r2, r3
 8006eae:	4153      	adcs	r3, r2
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	001a      	movs	r2, r3
 8006eb4:	1dfb      	adds	r3, r7, #7
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d09e      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	0018      	movs	r0, r3
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	b004      	add	sp, #16
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b08e      	sub	sp, #56	@ 0x38
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8006ed6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eda:	2301      	movs	r3, #1
 8006edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	f383 8810 	msr	PRIMASK, r3
}
 8006ee4:	46c0      	nop			@ (mov r8, r8)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4926      	ldr	r1, [pc, #152]	@ (8006f8c <UART_EndRxTransfer+0xc4>)
 8006ef2:	400a      	ands	r2, r1
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	f383 8810 	msr	PRIMASK, r3
}
 8006f00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f02:	f3ef 8310 	mrs	r3, PRIMASK
 8006f06:	623b      	str	r3, [r7, #32]
  return(result);
 8006f08:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f12:	f383 8810 	msr	PRIMASK, r3
}
 8006f16:	46c0      	nop			@ (mov r8, r8)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689a      	ldr	r2, [r3, #8]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	491b      	ldr	r1, [pc, #108]	@ (8006f90 <UART_EndRxTransfer+0xc8>)
 8006f24:	400a      	ands	r2, r1
 8006f26:	609a      	str	r2, [r3, #8]
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d118      	bne.n	8006f6e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f42:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f46:	2301      	movs	r3, #1
 8006f48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f383 8810 	msr	PRIMASK, r3
}
 8006f50:	46c0      	nop			@ (mov r8, r8)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2110      	movs	r1, #16
 8006f5e:	438a      	bics	r2, r1
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	f383 8810 	msr	PRIMASK, r3
}
 8006f6c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	228c      	movs	r2, #140	@ 0x8c
 8006f72:	2120      	movs	r1, #32
 8006f74:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006f82:	46c0      	nop			@ (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b00e      	add	sp, #56	@ 0x38
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	46c0      	nop			@ (mov r8, r8)
 8006f8c:	fffffedf 	.word	0xfffffedf
 8006f90:	effffffe 	.word	0xeffffffe

08006f94 <memset>:
 8006f94:	0003      	movs	r3, r0
 8006f96:	1882      	adds	r2, r0, r2
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d100      	bne.n	8006f9e <memset+0xa>
 8006f9c:	4770      	bx	lr
 8006f9e:	7019      	strb	r1, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	e7f9      	b.n	8006f98 <memset+0x4>

08006fa4 <__libc_init_array>:
 8006fa4:	b570      	push	{r4, r5, r6, lr}
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	4c0c      	ldr	r4, [pc, #48]	@ (8006fdc <__libc_init_array+0x38>)
 8006faa:	4d0d      	ldr	r5, [pc, #52]	@ (8006fe0 <__libc_init_array+0x3c>)
 8006fac:	1b64      	subs	r4, r4, r5
 8006fae:	10a4      	asrs	r4, r4, #2
 8006fb0:	42a6      	cmp	r6, r4
 8006fb2:	d109      	bne.n	8006fc8 <__libc_init_array+0x24>
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	f000 f819 	bl	8006fec <_init>
 8006fba:	4c0a      	ldr	r4, [pc, #40]	@ (8006fe4 <__libc_init_array+0x40>)
 8006fbc:	4d0a      	ldr	r5, [pc, #40]	@ (8006fe8 <__libc_init_array+0x44>)
 8006fbe:	1b64      	subs	r4, r4, r5
 8006fc0:	10a4      	asrs	r4, r4, #2
 8006fc2:	42a6      	cmp	r6, r4
 8006fc4:	d105      	bne.n	8006fd2 <__libc_init_array+0x2e>
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	00b3      	lsls	r3, r6, #2
 8006fca:	58eb      	ldr	r3, [r5, r3]
 8006fcc:	4798      	blx	r3
 8006fce:	3601      	adds	r6, #1
 8006fd0:	e7ee      	b.n	8006fb0 <__libc_init_array+0xc>
 8006fd2:	00b3      	lsls	r3, r6, #2
 8006fd4:	58eb      	ldr	r3, [r5, r3]
 8006fd6:	4798      	blx	r3
 8006fd8:	3601      	adds	r6, #1
 8006fda:	e7f2      	b.n	8006fc2 <__libc_init_array+0x1e>
 8006fdc:	08007a10 	.word	0x08007a10
 8006fe0:	08007a10 	.word	0x08007a10
 8006fe4:	08007a14 	.word	0x08007a14
 8006fe8:	08007a10 	.word	0x08007a10

08006fec <_init>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	46c0      	nop			@ (mov r8, r8)
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr

08006ff8 <_fini>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	46c0      	nop			@ (mov r8, r8)
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr
