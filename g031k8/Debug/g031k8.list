
g031k8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e070  080000c0  080000c0  000010c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a80  0800e130  0800e130  0000f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebb0  0800ebb0  000104e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ebb0  0800ebb0  0000fbb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebb8  0800ebb8  000104e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebb8  0800ebb8  0000fbb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebbc  0800ebbc  0000fbbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004e0  20000000  0800ebc0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000008ec  200004e0  0800f0a0  000104e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800f0a0  00010dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000104e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000223f7  00000000  00000000  00010508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ce0  00000000  00000000  000328ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  000375e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001381  00000000  00000000  00038f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016fb5  00000000  00000000  0003a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00008a49  00000000  00000000  00051256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00059c9f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000059c4  00000000  00000000  00059ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  0005f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004e0 	.word	0x200004e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e104 	.word	0x0800e104

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004e4 	.word	0x200004e4
 8000104:	0800e104 	.word	0x0800e104

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	4657      	mov	r7, sl
 8000264:	464e      	mov	r6, r9
 8000266:	4645      	mov	r5, r8
 8000268:	46de      	mov	lr, fp
 800026a:	b5e0      	push	{r5, r6, r7, lr}
 800026c:	0004      	movs	r4, r0
 800026e:	000d      	movs	r5, r1
 8000270:	4692      	mov	sl, r2
 8000272:	4699      	mov	r9, r3
 8000274:	b083      	sub	sp, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d830      	bhi.n	80002dc <__udivmoddi4+0x7c>
 800027a:	d02d      	beq.n	80002d8 <__udivmoddi4+0x78>
 800027c:	4649      	mov	r1, r9
 800027e:	4650      	mov	r0, sl
 8000280:	f000 f8ba 	bl	80003f8 <__clzdi2>
 8000284:	0029      	movs	r1, r5
 8000286:	0006      	movs	r6, r0
 8000288:	0020      	movs	r0, r4
 800028a:	f000 f8b5 	bl	80003f8 <__clzdi2>
 800028e:	1a33      	subs	r3, r6, r0
 8000290:	4698      	mov	r8, r3
 8000292:	3b20      	subs	r3, #32
 8000294:	d434      	bmi.n	8000300 <__udivmoddi4+0xa0>
 8000296:	469b      	mov	fp, r3
 8000298:	4653      	mov	r3, sl
 800029a:	465a      	mov	r2, fp
 800029c:	4093      	lsls	r3, r2
 800029e:	4642      	mov	r2, r8
 80002a0:	001f      	movs	r7, r3
 80002a2:	4653      	mov	r3, sl
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d83b      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80002ac:	42af      	cmp	r7, r5
 80002ae:	d100      	bne.n	80002b2 <__udivmoddi4+0x52>
 80002b0:	e079      	b.n	80003a6 <__udivmoddi4+0x146>
 80002b2:	465b      	mov	r3, fp
 80002b4:	1ba4      	subs	r4, r4, r6
 80002b6:	41bd      	sbcs	r5, r7
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <__udivmoddi4+0x5e>
 80002bc:	e076      	b.n	80003ac <__udivmoddi4+0x14c>
 80002be:	2200      	movs	r2, #0
 80002c0:	2300      	movs	r3, #0
 80002c2:	9200      	str	r2, [sp, #0]
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	465a      	mov	r2, fp
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	2301      	movs	r3, #1
 80002d0:	4642      	mov	r2, r8
 80002d2:	4093      	lsls	r3, r2
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	e029      	b.n	800032c <__udivmoddi4+0xcc>
 80002d8:	4282      	cmp	r2, r0
 80002da:	d9cf      	bls.n	800027c <__udivmoddi4+0x1c>
 80002dc:	2200      	movs	r2, #0
 80002de:	2300      	movs	r3, #0
 80002e0:	9200      	str	r2, [sp, #0]
 80002e2:	9301      	str	r3, [sp, #4]
 80002e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <__udivmoddi4+0x8e>
 80002ea:	601c      	str	r4, [r3, #0]
 80002ec:	605d      	str	r5, [r3, #4]
 80002ee:	9800      	ldr	r0, [sp, #0]
 80002f0:	9901      	ldr	r1, [sp, #4]
 80002f2:	b003      	add	sp, #12
 80002f4:	bcf0      	pop	{r4, r5, r6, r7}
 80002f6:	46bb      	mov	fp, r7
 80002f8:	46b2      	mov	sl, r6
 80002fa:	46a9      	mov	r9, r5
 80002fc:	46a0      	mov	r8, r4
 80002fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000300:	4642      	mov	r2, r8
 8000302:	469b      	mov	fp, r3
 8000304:	2320      	movs	r3, #32
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	4652      	mov	r2, sl
 800030a:	40da      	lsrs	r2, r3
 800030c:	4641      	mov	r1, r8
 800030e:	0013      	movs	r3, r2
 8000310:	464a      	mov	r2, r9
 8000312:	408a      	lsls	r2, r1
 8000314:	0017      	movs	r7, r2
 8000316:	4642      	mov	r2, r8
 8000318:	431f      	orrs	r7, r3
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	001e      	movs	r6, r3
 8000320:	42af      	cmp	r7, r5
 8000322:	d9c3      	bls.n	80002ac <__udivmoddi4+0x4c>
 8000324:	2200      	movs	r2, #0
 8000326:	2300      	movs	r3, #0
 8000328:	9200      	str	r2, [sp, #0]
 800032a:	9301      	str	r3, [sp, #4]
 800032c:	4643      	mov	r3, r8
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0d8      	beq.n	80002e4 <__udivmoddi4+0x84>
 8000332:	07fb      	lsls	r3, r7, #31
 8000334:	0872      	lsrs	r2, r6, #1
 8000336:	431a      	orrs	r2, r3
 8000338:	4646      	mov	r6, r8
 800033a:	087b      	lsrs	r3, r7, #1
 800033c:	e00e      	b.n	800035c <__udivmoddi4+0xfc>
 800033e:	42ab      	cmp	r3, r5
 8000340:	d101      	bne.n	8000346 <__udivmoddi4+0xe6>
 8000342:	42a2      	cmp	r2, r4
 8000344:	d80c      	bhi.n	8000360 <__udivmoddi4+0x100>
 8000346:	1aa4      	subs	r4, r4, r2
 8000348:	419d      	sbcs	r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	1924      	adds	r4, r4, r4
 800034e:	416d      	adcs	r5, r5
 8000350:	2100      	movs	r1, #0
 8000352:	3e01      	subs	r6, #1
 8000354:	1824      	adds	r4, r4, r0
 8000356:	414d      	adcs	r5, r1
 8000358:	2e00      	cmp	r6, #0
 800035a:	d006      	beq.n	800036a <__udivmoddi4+0x10a>
 800035c:	42ab      	cmp	r3, r5
 800035e:	d9ee      	bls.n	800033e <__udivmoddi4+0xde>
 8000360:	3e01      	subs	r6, #1
 8000362:	1924      	adds	r4, r4, r4
 8000364:	416d      	adcs	r5, r5
 8000366:	2e00      	cmp	r6, #0
 8000368:	d1f8      	bne.n	800035c <__udivmoddi4+0xfc>
 800036a:	9800      	ldr	r0, [sp, #0]
 800036c:	9901      	ldr	r1, [sp, #4]
 800036e:	465b      	mov	r3, fp
 8000370:	1900      	adds	r0, r0, r4
 8000372:	4169      	adcs	r1, r5
 8000374:	2b00      	cmp	r3, #0
 8000376:	db24      	blt.n	80003c2 <__udivmoddi4+0x162>
 8000378:	002b      	movs	r3, r5
 800037a:	465a      	mov	r2, fp
 800037c:	4644      	mov	r4, r8
 800037e:	40d3      	lsrs	r3, r2
 8000380:	002a      	movs	r2, r5
 8000382:	40e2      	lsrs	r2, r4
 8000384:	001c      	movs	r4, r3
 8000386:	465b      	mov	r3, fp
 8000388:	0015      	movs	r5, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	db2a      	blt.n	80003e4 <__udivmoddi4+0x184>
 800038e:	0026      	movs	r6, r4
 8000390:	409e      	lsls	r6, r3
 8000392:	0033      	movs	r3, r6
 8000394:	0026      	movs	r6, r4
 8000396:	4647      	mov	r7, r8
 8000398:	40be      	lsls	r6, r7
 800039a:	0032      	movs	r2, r6
 800039c:	1a80      	subs	r0, r0, r2
 800039e:	4199      	sbcs	r1, r3
 80003a0:	9000      	str	r0, [sp, #0]
 80003a2:	9101      	str	r1, [sp, #4]
 80003a4:	e79e      	b.n	80002e4 <__udivmoddi4+0x84>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d8bc      	bhi.n	8000324 <__udivmoddi4+0xc4>
 80003aa:	e782      	b.n	80002b2 <__udivmoddi4+0x52>
 80003ac:	4642      	mov	r2, r8
 80003ae:	2320      	movs	r3, #32
 80003b0:	2100      	movs	r1, #0
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	2200      	movs	r2, #0
 80003b6:	9100      	str	r1, [sp, #0]
 80003b8:	9201      	str	r2, [sp, #4]
 80003ba:	2201      	movs	r2, #1
 80003bc:	40da      	lsrs	r2, r3
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	e785      	b.n	80002ce <__udivmoddi4+0x6e>
 80003c2:	4642      	mov	r2, r8
 80003c4:	2320      	movs	r3, #32
 80003c6:	1a9b      	subs	r3, r3, r2
 80003c8:	002a      	movs	r2, r5
 80003ca:	4646      	mov	r6, r8
 80003cc:	409a      	lsls	r2, r3
 80003ce:	0023      	movs	r3, r4
 80003d0:	40f3      	lsrs	r3, r6
 80003d2:	4644      	mov	r4, r8
 80003d4:	4313      	orrs	r3, r2
 80003d6:	002a      	movs	r2, r5
 80003d8:	40e2      	lsrs	r2, r4
 80003da:	001c      	movs	r4, r3
 80003dc:	465b      	mov	r3, fp
 80003de:	0015      	movs	r5, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	dad4      	bge.n	800038e <__udivmoddi4+0x12e>
 80003e4:	4642      	mov	r2, r8
 80003e6:	002f      	movs	r7, r5
 80003e8:	2320      	movs	r3, #32
 80003ea:	0026      	movs	r6, r4
 80003ec:	4097      	lsls	r7, r2
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	40de      	lsrs	r6, r3
 80003f2:	003b      	movs	r3, r7
 80003f4:	4333      	orrs	r3, r6
 80003f6:	e7cd      	b.n	8000394 <__udivmoddi4+0x134>

080003f8 <__clzdi2>:
 80003f8:	b510      	push	{r4, lr}
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d103      	bne.n	8000406 <__clzdi2+0xe>
 80003fe:	f000 f807 	bl	8000410 <__clzsi2>
 8000402:	3020      	adds	r0, #32
 8000404:	e002      	b.n	800040c <__clzdi2+0x14>
 8000406:	0008      	movs	r0, r1
 8000408:	f000 f802 	bl	8000410 <__clzsi2>
 800040c:	bd10      	pop	{r4, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)

08000410 <__clzsi2>:
 8000410:	211c      	movs	r1, #28
 8000412:	2301      	movs	r3, #1
 8000414:	041b      	lsls	r3, r3, #16
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0xe>
 800041a:	0c00      	lsrs	r0, r0, #16
 800041c:	3910      	subs	r1, #16
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	4298      	cmp	r0, r3
 8000422:	d301      	bcc.n	8000428 <__clzsi2+0x18>
 8000424:	0a00      	lsrs	r0, r0, #8
 8000426:	3908      	subs	r1, #8
 8000428:	091b      	lsrs	r3, r3, #4
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0x22>
 800042e:	0900      	lsrs	r0, r0, #4
 8000430:	3904      	subs	r1, #4
 8000432:	a202      	add	r2, pc, #8	@ (adr r2, 800043c <__clzsi2+0x2c>)
 8000434:	5c10      	ldrb	r0, [r2, r0]
 8000436:	1840      	adds	r0, r0, r1
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	02020304 	.word	0x02020304
 8000440:	01010101 	.word	0x01010101
	...

0800044c <Initialise_Preset_Arrays>:
volatile enum Validate user_presets_used_array[NUM_PRESETS] = {(enum Validate)NO};

volatile uint8_t CC_array[5] = {0};

//FUNCTION DEFINITIONS
uint8_t Initialise_Preset_Arrays(void){
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0

	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
 8000458:	e05f      	b.n	800051a <Initialise_Preset_Arrays+0xce>

		if(i == 0){
 800045a:	1dfb      	adds	r3, r7, #7
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d112      	bne.n	8000488 <Initialise_Preset_Arrays+0x3c>
			factory_presets_array[i] = &factory_preset_0;
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781a      	ldrb	r2, [r3, #0]
 8000466:	4b31      	ldr	r3, [pc, #196]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4931      	ldr	r1, [pc, #196]	@ (8000530 <Initialise_Preset_Arrays+0xe4>)
 800046c:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_0;
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781a      	ldrb	r2, [r3, #0]
 8000472:	4b30      	ldr	r3, [pc, #192]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	4930      	ldr	r1, [pc, #192]	@ (8000538 <Initialise_Preset_Arrays+0xec>)
 8000478:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_0;
 800047a:	1dfb      	adds	r3, r7, #7
 800047c:	781a      	ldrb	r2, [r3, #0]
 800047e:	4b2f      	ldr	r3, [pc, #188]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	492f      	ldr	r1, [pc, #188]	@ (8000540 <Initialise_Preset_Arrays+0xf4>)
 8000484:	50d1      	str	r1, [r2, r3]
 8000486:	e043      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 1){
 8000488:	1dfb      	adds	r3, r7, #7
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d112      	bne.n	80004b6 <Initialise_Preset_Arrays+0x6a>
			factory_presets_array[i] = &factory_preset_1;
 8000490:	1dfb      	adds	r3, r7, #7
 8000492:	781a      	ldrb	r2, [r3, #0]
 8000494:	4b25      	ldr	r3, [pc, #148]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 8000496:	0092      	lsls	r2, r2, #2
 8000498:	492a      	ldr	r1, [pc, #168]	@ (8000544 <Initialise_Preset_Arrays+0xf8>)
 800049a:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_1;
 800049c:	1dfb      	adds	r3, r7, #7
 800049e:	781a      	ldrb	r2, [r3, #0]
 80004a0:	4b24      	ldr	r3, [pc, #144]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	4928      	ldr	r1, [pc, #160]	@ (8000548 <Initialise_Preset_Arrays+0xfc>)
 80004a6:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_1;
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b23      	ldr	r3, [pc, #140]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	4926      	ldr	r1, [pc, #152]	@ (800054c <Initialise_Preset_Arrays+0x100>)
 80004b2:	50d1      	str	r1, [r2, r3]
 80004b4:	e02c      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 2){
 80004b6:	1dfb      	adds	r3, r7, #7
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b02      	cmp	r3, #2
 80004bc:	d112      	bne.n	80004e4 <Initialise_Preset_Arrays+0x98>
			factory_presets_array[i] = &factory_preset_2;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b1a      	ldr	r3, [pc, #104]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004c4:	0092      	lsls	r2, r2, #2
 80004c6:	4922      	ldr	r1, [pc, #136]	@ (8000550 <Initialise_Preset_Arrays+0x104>)
 80004c8:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_2;
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781a      	ldrb	r2, [r3, #0]
 80004ce:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004d0:	0092      	lsls	r2, r2, #2
 80004d2:	4920      	ldr	r1, [pc, #128]	@ (8000554 <Initialise_Preset_Arrays+0x108>)
 80004d4:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_2;
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	781a      	ldrb	r2, [r3, #0]
 80004da:	4b18      	ldr	r3, [pc, #96]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 80004dc:	0092      	lsls	r2, r2, #2
 80004de:	491e      	ldr	r1, [pc, #120]	@ (8000558 <Initialise_Preset_Arrays+0x10c>)
 80004e0:	50d1      	str	r1, [r2, r3]
 80004e2:	e015      	b.n	8000510 <Initialise_Preset_Arrays+0xc4>
		}
		else if(i == 3){
 80004e4:	1dfb      	adds	r3, r7, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b03      	cmp	r3, #3
 80004ea:	d111      	bne.n	8000510 <Initialise_Preset_Arrays+0xc4>
			factory_presets_array[i] = &factory_preset_3;
 80004ec:	1dfb      	adds	r3, r7, #7
 80004ee:	781a      	ldrb	r2, [r3, #0]
 80004f0:	4b0e      	ldr	r3, [pc, #56]	@ (800052c <Initialise_Preset_Arrays+0xe0>)
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	4919      	ldr	r1, [pc, #100]	@ (800055c <Initialise_Preset_Arrays+0x110>)
 80004f6:	50d1      	str	r1, [r2, r3]
			user_presets_array[i] = &user_preset_3;
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <Initialise_Preset_Arrays+0xe8>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	4917      	ldr	r1, [pc, #92]	@ (8000560 <Initialise_Preset_Arrays+0x114>)
 8000502:	50d1      	str	r1, [r2, r3]
			storage_user_presets_array[i] = &storage_user_preset_3;
 8000504:	1dfb      	adds	r3, r7, #7
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <Initialise_Preset_Arrays+0xf0>)
 800050a:	0092      	lsls	r2, r2, #2
 800050c:	4915      	ldr	r1, [pc, #84]	@ (8000564 <Initialise_Preset_Arrays+0x118>)
 800050e:	50d1      	str	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(factory_presets_array); i++){
 8000510:	1dfb      	adds	r3, r7, #7
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	1dfb      	adds	r3, r7, #7
 8000516:	3201      	adds	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	1dfb      	adds	r3, r7, #7
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d99b      	bls.n	800045a <Initialise_Preset_Arrays+0xe>
		}
	}

	return 1;
 8000522:	2301      	movs	r3, #1
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200004fc 	.word	0x200004fc
 8000530:	0800e140 	.word	0x0800e140
 8000534:	2000050c 	.word	0x2000050c
 8000538:	20000000 	.word	0x20000000
 800053c:	20000544 	.word	0x20000544
 8000540:	20000558 	.word	0x20000558
 8000544:	0800e148 	.word	0x0800e148
 8000548:	20000008 	.word	0x20000008
 800054c:	20000560 	.word	0x20000560
 8000550:	0800e150 	.word	0x0800e150
 8000554:	20000010 	.word	0x20000010
 8000558:	20000568 	.word	0x20000568
 800055c:	0800e158 	.word	0x0800e158
 8000560:	20000018 	.word	0x20000018
 8000564:	20000570 	.word	0x20000570

08000568 <Update_Params_Based_On_Mode_Selected>:

uint8_t Update_Params_Based_On_Mode_Selected(void){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	if(waveshape_fsm.current_state == MANUAL_MODE){
 800056c:	4b68      	ldr	r3, [pc, #416]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	2b01      	cmp	r3, #1
 8000574:	d104      	bne.n	8000580 <Update_Params_Based_On_Mode_Selected+0x18>
		params.waveshape = params_manual.waveshape;
 8000576:	4b67      	ldr	r3, [pc, #412]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 8000578:	799b      	ldrb	r3, [r3, #6]
 800057a:	b2da      	uxtb	r2, r3
 800057c:	4b66      	ldr	r3, [pc, #408]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 800057e:	719a      	strb	r2, [r3, #6]
	}
	if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8000580:	4b66      	ldr	r3, [pc, #408]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	2b01      	cmp	r3, #1
 8000588:	d104      	bne.n	8000594 <Update_Params_Based_On_Mode_Selected+0x2c>
		params.speed = params_manual.speed;
 800058a:	4b62      	ldr	r3, [pc, #392]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 800058c:	891b      	ldrh	r3, [r3, #8]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b61      	ldr	r3, [pc, #388]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000592:	811a      	strh	r2, [r3, #8]
	}
	if(depth_fsm.current_state == MANUAL_MODE){
 8000594:	4b62      	ldr	r3, [pc, #392]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b01      	cmp	r3, #1
 800059c:	d104      	bne.n	80005a8 <Update_Params_Based_On_Mode_Selected+0x40>
		params.depth = params_manual.depth;
 800059e:	4b5d      	ldr	r3, [pc, #372]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005a0:	7a9b      	ldrb	r3, [r3, #10]
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005a6:	729a      	strb	r2, [r3, #10]
	}
	if(symmetry_fsm.current_state == MANUAL_MODE){
 80005a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d104      	bne.n	80005bc <Update_Params_Based_On_Mode_Selected+0x54>
		params.symmetry = params_manual.symmetry;
 80005b2:	4b58      	ldr	r3, [pc, #352]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005b4:	899b      	ldrh	r3, [r3, #12]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	4b57      	ldr	r3, [pc, #348]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ba:	819a      	strh	r2, [r3, #12]
	}
	if(phase_fsm.current_state == MANUAL_MODE){
 80005bc:	4b5a      	ldr	r3, [pc, #360]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d104      	bne.n	80005d0 <Update_Params_Based_On_Mode_Selected+0x68>
		params.duty_delay_line_read_pointer_offset = params_manual.duty_delay_line_read_pointer_offset;
 80005c6:	4b53      	ldr	r3, [pc, #332]	@ (8000714 <Update_Params_Based_On_Mode_Selected+0x1ac>)
 80005c8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b52      	ldr	r3, [pc, #328]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	}

	if(waveshape_fsm.current_state == PC_MODE){
 80005d0:	4b4f      	ldr	r3, [pc, #316]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d10e      	bne.n	80005f8 <Update_Params_Based_On_Mode_Selected+0x90>
		Update_Waveshape_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 80005da:	4b54      	ldr	r3, [pc, #336]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	1e5a      	subs	r2, r3, #1
 80005e2:	0013      	movs	r3, r2
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	189b      	adds	r3, r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4a51      	ldr	r2, [pc, #324]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 80005ec:	189b      	adds	r3, r3, r2
 80005ee:	4a4a      	ldr	r2, [pc, #296]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f8fd 	bl	80007f2 <Update_Waveshape_with_Converted_Preset_Value>
	}
	if(speed_fsm.current_state.shared_state == PC_MODE){
 80005f8:	4b48      	ldr	r3, [pc, #288]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d10e      	bne.n	8000620 <Update_Params_Based_On_Mode_Selected+0xb8>
		Update_Speed_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000602:	4b4a      	ldr	r3, [pc, #296]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	1e5a      	subs	r2, r3, #1
 800060a:	0013      	movs	r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	189b      	adds	r3, r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4a47      	ldr	r2, [pc, #284]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000614:	189b      	adds	r3, r3, r2
 8000616:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f000 f8f8 	bl	8000810 <Update_Speed_with_Converted_Preset_Value>
	}
	if(depth_fsm.current_state == PC_MODE){
 8000620:	4b3f      	ldr	r3, [pc, #252]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	2b03      	cmp	r3, #3
 8000628:	d10e      	bne.n	8000648 <Update_Params_Based_On_Mode_Selected+0xe0>
		Update_Depth_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800062a:	4b40      	ldr	r3, [pc, #256]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	0013      	movs	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	189b      	adds	r3, r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4a3d      	ldr	r2, [pc, #244]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800063c:	189b      	adds	r3, r3, r2
 800063e:	4a36      	ldr	r2, [pc, #216]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f000 f8f3 	bl	800082e <Update_Depth_with_Converted_Preset_Value>
	}
	if(symmetry_fsm.current_state == PC_MODE){
 8000648:	4b36      	ldr	r3, [pc, #216]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b03      	cmp	r3, #3
 8000650:	d10e      	bne.n	8000670 <Update_Params_Based_On_Mode_Selected+0x108>
		Update_Symmetry_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 8000652:	4b36      	ldr	r3, [pc, #216]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	0013      	movs	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	189b      	adds	r3, r3, r2
 8000660:	005b      	lsls	r3, r3, #1
 8000662:	4a33      	ldr	r2, [pc, #204]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 8000664:	189b      	adds	r3, r3, r2
 8000666:	4a2c      	ldr	r2, [pc, #176]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f000 f8ee 	bl	800084c <Update_Symmetry_with_Converted_Preset_Value>
	}
	if(phase_fsm.current_state == PC_MODE){
 8000670:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	b2db      	uxtb	r3, r3
 8000676:	2b03      	cmp	r3, #3
 8000678:	d10e      	bne.n	8000698 <Update_Params_Based_On_Mode_Selected+0x130>
		Update_Phase_with_Converted_Preset_Value(&presets_converted_array[(uint8_t)preset_selected - 1], &params);
 800067a:	4b2c      	ldr	r3, [pc, #176]	@ (800072c <Update_Params_Based_On_Mode_Selected+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	b2db      	uxtb	r3, r3
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	0013      	movs	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	189b      	adds	r3, r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4a29      	ldr	r2, [pc, #164]	@ (8000730 <Update_Params_Based_On_Mode_Selected+0x1c8>)
 800068c:	189b      	adds	r3, r3, r2
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f000 f8e9 	bl	800086a <Update_Phase_with_Converted_Preset_Value>
	}


	if(waveshape_fsm.current_state == CC_MODE){
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <Update_Params_Based_On_Mode_Selected+0x1a8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d105      	bne.n	80006ae <Update_Params_Based_On_Mode_Selected+0x146>
		Update_Waveshape_with_CC_Value(&CC_array[WAVESHAPE_ARR], &params);
 80006a2:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006a4:	4b23      	ldr	r3, [pc, #140]	@ (8000734 <Update_Params_Based_On_Mode_Selected+0x1cc>)
 80006a6:	0011      	movs	r1, r2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 fd15 	bl	80010d8 <Update_Waveshape_with_CC_Value>
	}
	if(speed_fsm.current_state.shared_state == CC_MODE){
 80006ae:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <Update_Params_Based_On_Mode_Selected+0x1b4>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d105      	bne.n	80006c4 <Update_Params_Based_On_Mode_Selected+0x15c>
		Update_Speed_with_CC_Value(&CC_array[SPEED_ARR], &params);
 80006b8:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <Update_Params_Based_On_Mode_Selected+0x1d0>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fd2f 	bl	8001122 <Update_Speed_with_CC_Value>
	}
	if(depth_fsm.current_state == CC_MODE){
 80006c4:	4b16      	ldr	r3, [pc, #88]	@ (8000720 <Update_Params_Based_On_Mode_Selected+0x1b8>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b02      	cmp	r3, #2
 80006cc:	d105      	bne.n	80006da <Update_Params_Based_On_Mode_Selected+0x172>
		Update_Depth_with_CC_Value(&CC_array[DEPTH_ARR], &params);
 80006ce:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006d0:	4b1a      	ldr	r3, [pc, #104]	@ (800073c <Update_Params_Based_On_Mode_Selected+0x1d4>)
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fd3d 	bl	8001154 <Update_Depth_with_CC_Value>
	}
	if(symmetry_fsm.current_state == CC_MODE){
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <Update_Params_Based_On_Mode_Selected+0x1bc>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d105      	bne.n	80006f0 <Update_Params_Based_On_Mode_Selected+0x188>
		Update_Symmetry_with_CC_Value(&CC_array[SYMMETRY_ARR], &params);
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006e6:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <Update_Params_Based_On_Mode_Selected+0x1d8>)
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fd45 	bl	800117a <Update_Symmetry_with_CC_Value>
	}
	if(phase_fsm.current_state == CC_MODE){
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <Update_Params_Based_On_Mode_Selected+0x1c0>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d105      	bne.n	8000706 <Update_Params_Based_On_Mode_Selected+0x19e>
		Update_Phase_with_CC_Value(&CC_array[PHASE_ARR], &params);
 80006fa:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <Update_Params_Based_On_Mode_Selected+0x1b0>)
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <Update_Params_Based_On_Mode_Selected+0x1dc>)
 80006fe:	0011      	movs	r1, r2
 8000700:	0018      	movs	r0, r3
 8000702:	f000 fd53 	bl	80011ac <Update_Phase_with_CC_Value>
	}

	return 1;
 8000706:	2301      	movs	r3, #1
}
 8000708:	0018      	movs	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000438 	.word	0x20000438
 8000714:	20000d3c 	.word	0x20000d3c
 8000718:	20000d18 	.word	0x20000d18
 800071c:	20000430 	.word	0x20000430
 8000720:	20000434 	.word	0x20000434
 8000724:	2000043c 	.word	0x2000043c
 8000728:	20000440 	.word	0x20000440
 800072c:	20000554 	.word	0x20000554
 8000730:	2000051c 	.word	0x2000051c
 8000734:	2000057c 	.word	0x2000057c
 8000738:	2000057d 	.word	0x2000057d
 800073c:	2000057e 	.word	0x2000057e
 8000740:	2000057f 	.word	0x2000057f
 8000744:	20000580 	.word	0x20000580

08000748 <Convert_All_Preset_Values>:


uint8_t Convert_All_Preset_Values(volatile struct Preset* preset_ptr, volatile struct Preset_Converted* preset_converted_ptr){
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]

	preset_converted_ptr->waveshape = preset_ptr->waveshape; //7-bit copy
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	701a      	strb	r2, [r3, #0]
	preset_converted_ptr->speed = (preset_ptr->speed) << 3; //convert to 10-bit
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	00db      	lsls	r3, r3, #3
 8000764:	b29a      	uxth	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	805a      	strh	r2, [r3, #2]
	preset_converted_ptr->depth = preset_ptr->depth; //7-bit copy
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	711a      	strb	r2, [r3, #4]
	preset_converted_ptr->symmetry = (preset_ptr->symmetry) << 1; //convert to 8-bit
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	78db      	ldrb	r3, [r3, #3]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	18db      	adds	r3, r3, r3
 800077c:	b29a      	uxth	r2, r3
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	80da      	strh	r2, [r3, #6]
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	b2db      	uxtb	r3, r3
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	b29a      	uxth	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	811a      	strh	r2, [r3, #8]

	return 1;
 8000790:	2301      	movs	r3, #1
}
 8000792:	0018      	movs	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	b002      	add	sp, #8
 8000798:	bd80      	pop	{r7, pc}

0800079a <Convert_All_Params_Values_for_Preset>:

uint8_t Convert_All_Params_Values_for_Preset(volatile struct Params *params_ptr, volatile struct Preset* preset_ptr){
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	6039      	str	r1, [r7, #0]

	preset_ptr->waveshape = params_ptr->waveshape; //7-bit copy
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	701a      	strb	r2, [r3, #0]
	preset_ptr->speed = params_ptr->speed >> 3; //convert from 10-bit to 7-bit
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	891b      	ldrh	r3, [r3, #8]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	705a      	strb	r2, [r3, #1]
	preset_ptr->depth = params_ptr->depth; //7-bit copy
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a9b      	ldrb	r3, [r3, #10]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	709a      	strb	r2, [r3, #2]
	preset_ptr->symmetry = params_ptr->symmetry >> 1; //convert from 8-bit to 7-bit
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	70da      	strb	r2, [r3, #3]
	preset_ptr->phase = params_ptr->duty_delay_line_read_pointer_offset >> 2; //convert from 9-bit to 7-bit
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80007dc:	b29b      	uxth	r3, r3
 80007de:	089b      	lsrs	r3, r3, #2
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	711a      	strb	r2, [r3, #4]

	return 1;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	0018      	movs	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <Update_Waveshape_with_Converted_Preset_Value>:
	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;

	return 1;
}

uint8_t Update_Waveshape_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
 80007fa:	6039      	str	r1, [r7, #0]

	params_ptr->waveshape = preset_converted_ptr->waveshape;
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b2da      	uxtb	r2, r3
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	719a      	strb	r2, [r3, #6]

	return 1;
 8000806:	2301      	movs	r3, #1
}
 8000808:	0018      	movs	r0, r3
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <Update_Speed_with_Converted_Preset_Value>:

uint8_t Update_Speed_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]

	params_ptr->speed = preset_converted_ptr->speed;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	885b      	ldrh	r3, [r3, #2]
 800081e:	b29a      	uxth	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	811a      	strh	r2, [r3, #8]

	return 1;
 8000824:	2301      	movs	r3, #1
}
 8000826:	0018      	movs	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}

0800082e <Update_Depth_with_Converted_Preset_Value>:

uint8_t Update_Depth_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800082e:	b580      	push	{r7, lr}
 8000830:	b082      	sub	sp, #8
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
 8000836:	6039      	str	r1, [r7, #0]

	params_ptr->depth = preset_converted_ptr->depth;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	b2da      	uxtb	r2, r3
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	729a      	strb	r2, [r3, #10]

	return 1;
 8000842:	2301      	movs	r3, #1
}
 8000844:	0018      	movs	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	b002      	add	sp, #8
 800084a:	bd80      	pop	{r7, pc}

0800084c <Update_Symmetry_with_Converted_Preset_Value>:

uint8_t Update_Symmetry_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]

	params_ptr->symmetry = preset_converted_ptr->symmetry;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	88db      	ldrh	r3, [r3, #6]
 800085a:	b29a      	uxth	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	819a      	strh	r2, [r3, #12]

	return 1;
 8000860:	2301      	movs	r3, #1
}
 8000862:	0018      	movs	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}

0800086a <Update_Phase_with_Converted_Preset_Value>:

uint8_t Update_Phase_with_Converted_Preset_Value(volatile struct Preset_Converted* preset_converted_ptr, struct Params* params_ptr){
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	6039      	str	r1, [r7, #0]

	params_ptr->duty_delay_line_read_pointer_offset = preset_converted_ptr->phase;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	891b      	ldrh	r3, [r3, #8]
 8000878:	b29a      	uxth	r2, r3
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <Pack_Preset_Into_Doubleword>:
	preset_converted_ptr->phase = (preset_ptr->phase) << 2; //convert to 9-bit

	return 1;
}

uint8_t Pack_Preset_Into_Doubleword(volatile struct Preset* preset_ptr, uint64_t *Doubleword_ptr){
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	b089      	sub	sp, #36	@ 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]

	uint64_t packed = 0;
 8000892:	2000      	movs	r0, #0
 8000894:	2100      	movs	r1, #0
 8000896:	61b8      	str	r0, [r7, #24]
 8000898:	61f9      	str	r1, [r7, #28]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 800089a:	210f      	movs	r1, #15
 800089c:	2008      	movs	r0, #8
 800089e:	1809      	adds	r1, r1, r0
 80008a0:	19c9      	adds	r1, r1, r7
 80008a2:	2000      	movs	r0, #0
 80008a4:	7008      	strb	r0, [r1, #0]
 80008a6:	e037      	b.n	8000918 <Pack_Preset_Into_Doubleword+0x90>

		packed |= ((uint64_t)*(((uint8_t *)preset_ptr)+i) << (i << 3)); //<< (i*8)
 80008a8:	260f      	movs	r6, #15
 80008aa:	2108      	movs	r1, #8
 80008ac:	1870      	adds	r0, r6, r1
 80008ae:	19c1      	adds	r1, r0, r7
 80008b0:	7809      	ldrb	r1, [r1, #0]
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	1841      	adds	r1, r0, r1
 80008b6:	7809      	ldrb	r1, [r1, #0]
 80008b8:	000c      	movs	r4, r1
 80008ba:	2100      	movs	r1, #0
 80008bc:	000d      	movs	r5, r1
 80008be:	2108      	movs	r1, #8
 80008c0:	1871      	adds	r1, r6, r1
 80008c2:	19c9      	adds	r1, r1, r7
 80008c4:	7809      	ldrb	r1, [r1, #0]
 80008c6:	00c9      	lsls	r1, r1, #3
 80008c8:	0008      	movs	r0, r1
 80008ca:	3820      	subs	r0, #32
 80008cc:	2800      	cmp	r0, #0
 80008ce:	db03      	blt.n	80008d8 <Pack_Preset_Into_Doubleword+0x50>
 80008d0:	0026      	movs	r6, r4
 80008d2:	4086      	lsls	r6, r0
 80008d4:	0033      	movs	r3, r6
 80008d6:	e008      	b.n	80008ea <Pack_Preset_Into_Doubleword+0x62>
 80008d8:	2020      	movs	r0, #32
 80008da:	1a40      	subs	r0, r0, r1
 80008dc:	0026      	movs	r6, r4
 80008de:	40c6      	lsrs	r6, r0
 80008e0:	0030      	movs	r0, r6
 80008e2:	002e      	movs	r6, r5
 80008e4:	408e      	lsls	r6, r1
 80008e6:	0033      	movs	r3, r6
 80008e8:	4303      	orrs	r3, r0
 80008ea:	0020      	movs	r0, r4
 80008ec:	4088      	lsls	r0, r1
 80008ee:	0002      	movs	r2, r0
 80008f0:	69b9      	ldr	r1, [r7, #24]
 80008f2:	4311      	orrs	r1, r2
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	69f9      	ldr	r1, [r7, #28]
 80008f8:	4319      	orrs	r1, r3
 80008fa:	6079      	str	r1, [r7, #4]
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	61b8      	str	r0, [r7, #24]
 8000902:	61f9      	str	r1, [r7, #28]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){
 8000904:	260f      	movs	r6, #15
 8000906:	2108      	movs	r1, #8
 8000908:	1870      	adds	r0, r6, r1
 800090a:	19c1      	adds	r1, r0, r7
 800090c:	7808      	ldrb	r0, [r1, #0]
 800090e:	2108      	movs	r1, #8
 8000910:	1871      	adds	r1, r6, r1
 8000912:	19c9      	adds	r1, r1, r7
 8000914:	3001      	adds	r0, #1
 8000916:	7008      	strb	r0, [r1, #0]
 8000918:	210f      	movs	r1, #15
 800091a:	2008      	movs	r0, #8
 800091c:	1809      	adds	r1, r1, r0
 800091e:	19c9      	adds	r1, r1, r7
 8000920:	7809      	ldrb	r1, [r1, #0]
 8000922:	2904      	cmp	r1, #4
 8000924:	d9c0      	bls.n	80008a8 <Pack_Preset_Into_Doubleword+0x20>
	}

	*Doubleword_ptr = packed;
 8000926:	68b9      	ldr	r1, [r7, #8]
 8000928:	69ba      	ldr	r2, [r7, #24]
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	600a      	str	r2, [r1, #0]
 800092e:	604b      	str	r3, [r1, #4]

	return 1;
 8000930:	2301      	movs	r3, #1
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b009      	add	sp, #36	@ 0x24
 8000938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800093a <Read_and_Interpret_Preset_From_Flash>:

uint8_t Read_and_Interpret_Preset_From_Flash(uint32_t address_val, volatile struct Preset* preset_ptr){
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]

	uint8_t *flash = (uint8_t *)address_val;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	613b      	str	r3, [r7, #16]
	uint8_t *preset = (uint8_t *)preset_ptr;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	60fb      	str	r3, [r7, #12]

	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800094c:	2317      	movs	r3, #23
 800094e:	18fb      	adds	r3, r7, r3
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	e020      	b.n	8000998 <Read_and_Interpret_Preset_From_Flash+0x5e>

		if(*(flash + i) > 0x7F){ //127
 8000956:	2117      	movs	r1, #23
 8000958:	187b      	adds	r3, r7, r1
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	18d3      	adds	r3, r2, r3
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	b25b      	sxtb	r3, r3
 8000964:	2b00      	cmp	r3, #0
 8000966:	da06      	bge.n	8000976 <Read_and_Interpret_Preset_From_Flash+0x3c>
			*(preset + i) = 0x7F;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	18d3      	adds	r3, r2, r3
 8000970:	227f      	movs	r2, #127	@ 0x7f
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e00a      	b.n	800098c <Read_and_Interpret_Preset_From_Flash+0x52>
		}
		else{
			*(preset + i) = *(flash + i);
 8000976:	2117      	movs	r1, #23
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	18d2      	adds	r2, r2, r3
 8000980:	187b      	adds	r3, r7, r1
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	68f9      	ldr	r1, [r7, #12]
 8000986:	18cb      	adds	r3, r1, r3
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(*preset_ptr); i++){ //sizeof should work
 800098c:	2117      	movs	r1, #23
 800098e:	187b      	adds	r3, r7, r1
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	187b      	adds	r3, r7, r1
 8000994:	3201      	adds	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	2317      	movs	r3, #23
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b04      	cmp	r3, #4
 80009a0:	d9d9      	bls.n	8000956 <Read_and_Interpret_Preset_From_Flash+0x1c>
		}
	}

	return 1;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b006      	add	sp, #24
 80009aa:	bd80      	pop	{r7, pc}

080009ac <Pack_Misc_Into_Doubleword>:

uint8_t Pack_Misc_Into_Doubleword(volatile enum Validate *user_presets_used_array_ptr, volatile uint32_t *statuses_ptr, volatile enum MIDI_Channel *MIDI_basic_channel_ptr, uint64_t *Doubleword_ptr, uint8_t num_presets){
 80009ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6678      	str	r0, [r7, #100]	@ 0x64
 80009b4:	6639      	str	r1, [r7, #96]	@ 0x60
 80009b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80009b8:	65bb      	str	r3, [r7, #88]	@ 0x58

	//This function will break if presets are bigger than 5

	uint64_t packed = 0;
 80009ba:	2200      	movs	r2, #0
 80009bc:	2300      	movs	r3, #0
 80009be:	673a      	str	r2, [r7, #112]	@ 0x70
 80009c0:	677b      	str	r3, [r7, #116]	@ 0x74

	//USER PRESETS USED ARRAY
	for(uint8_t i = 0; i < num_presets; i++){
 80009c2:	2317      	movs	r3, #23
 80009c4:	2258      	movs	r2, #88	@ 0x58
 80009c6:	189b      	adds	r3, r3, r2
 80009c8:	19da      	adds	r2, r3, r7
 80009ca:	2300      	movs	r3, #0
 80009cc:	7013      	strb	r3, [r2, #0]
 80009ce:	e039      	b.n	8000a44 <Pack_Misc_Into_Doubleword+0x98>

		packed |= ((uint64_t)user_presets_used_array_ptr[i] << (i << 3)); //<< (i*8)
 80009d0:	2117      	movs	r1, #23
 80009d2:	2358      	movs	r3, #88	@ 0x58
 80009d4:	18cb      	adds	r3, r1, r3
 80009d6:	19db      	adds	r3, r3, r7
 80009d8:	781a      	ldrb	r2, [r3, #0]
 80009da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009e4:	2300      	movs	r3, #0
 80009e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009e8:	2358      	movs	r3, #88	@ 0x58
 80009ea:	18cb      	adds	r3, r1, r3
 80009ec:	19db      	adds	r3, r3, r7
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	00da      	lsls	r2, r3, #3
 80009f2:	0013      	movs	r3, r2
 80009f4:	3b20      	subs	r3, #32
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	db03      	blt.n	8000a02 <Pack_Misc_Into_Doubleword+0x56>
 80009fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80009fc:	4099      	lsls	r1, r3
 80009fe:	000d      	movs	r5, r1
 8000a00:	e009      	b.n	8000a16 <Pack_Misc_Into_Doubleword+0x6a>
 8000a02:	2320      	movs	r3, #32
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000a08:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000a0a:	0006      	movs	r6, r0
 8000a0c:	40de      	lsrs	r6, r3
 8000a0e:	0033      	movs	r3, r6
 8000a10:	4091      	lsls	r1, r2
 8000a12:	000d      	movs	r5, r1
 8000a14:	431d      	orrs	r5, r3
 8000a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	001c      	movs	r4, r3
 8000a1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a1e:	4323      	orrs	r3, r4
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a24:	432b      	orrs	r3, r5
 8000a26:	61fb      	str	r3, [r7, #28]
 8000a28:	69ba      	ldr	r2, [r7, #24]
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	673a      	str	r2, [r7, #112]	@ 0x70
 8000a2e:	677b      	str	r3, [r7, #116]	@ 0x74
	for(uint8_t i = 0; i < num_presets; i++){
 8000a30:	2217      	movs	r2, #23
 8000a32:	2358      	movs	r3, #88	@ 0x58
 8000a34:	18d3      	adds	r3, r2, r3
 8000a36:	19db      	adds	r3, r3, r7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2158      	movs	r1, #88	@ 0x58
 8000a3c:	1852      	adds	r2, r2, r1
 8000a3e:	19d2      	adds	r2, r2, r7
 8000a40:	3301      	adds	r3, #1
 8000a42:	7013      	strb	r3, [r2, #0]
 8000a44:	2317      	movs	r3, #23
 8000a46:	2258      	movs	r2, #88	@ 0x58
 8000a48:	189b      	adds	r3, r3, r2
 8000a4a:	19da      	adds	r2, r3, r7
 8000a4c:	2630      	movs	r6, #48	@ 0x30
 8000a4e:	2308      	movs	r3, #8
 8000a50:	18f1      	adds	r1, r6, r3
 8000a52:	2358      	movs	r3, #88	@ 0x58
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	18cb      	adds	r3, r1, r3
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d3b7      	bcc.n	80009d0 <Pack_Misc_Into_Doubleword+0x24>
	}

	//START REQUIRED BEFORE MIDI CLK
	enum Validate start_required_before_midi_clk_status_bit = Get_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000a60:	2516      	movs	r5, #22
 8000a62:	2358      	movs	r3, #88	@ 0x58
 8000a64:	18eb      	adds	r3, r5, r3
 8000a66:	19dc      	adds	r4, r3, r7
 8000a68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a6a:	2180      	movs	r1, #128	@ 0x80
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f005 ff35 	bl	80068dc <Get_Status_Bit>
 8000a72:	0003      	movs	r3, r0
 8000a74:	7023      	strb	r3, [r4, #0]

	uint8_t shift = num_presets << 3; //<< (4 * 8)
 8000a76:	2115      	movs	r1, #21
 8000a78:	2358      	movs	r3, #88	@ 0x58
 8000a7a:	18cb      	adds	r3, r1, r3
 8000a7c:	19da      	adds	r2, r3, r7
 8000a7e:	2308      	movs	r3, #8
 8000a80:	18f3      	adds	r3, r6, r3
 8000a82:	2058      	movs	r0, #88	@ 0x58
 8000a84:	4684      	mov	ip, r0
 8000a86:	44bc      	add	ip, r7
 8000a88:	4463      	add	r3, ip
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	7013      	strb	r3, [r2, #0]
	packed |= (uint64_t)start_required_before_midi_clk_status_bit << shift;
 8000a90:	2358      	movs	r3, #88	@ 0x58
 8000a92:	18eb      	adds	r3, r5, r3
 8000a94:	19db      	adds	r3, r3, r7
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8000aa0:	2358      	movs	r3, #88	@ 0x58
 8000aa2:	18cb      	adds	r3, r1, r3
 8000aa4:	19db      	adds	r3, r3, r7
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	0013      	movs	r3, r2
 8000aaa:	3b20      	subs	r3, #32
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	db03      	blt.n	8000ab8 <Pack_Misc_Into_Doubleword+0x10c>
 8000ab0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ab2:	4099      	lsls	r1, r3
 8000ab4:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ab6:	e00b      	b.n	8000ad0 <Pack_Misc_Into_Doubleword+0x124>
 8000ab8:	2320      	movs	r3, #32
 8000aba:	1a9b      	subs	r3, r3, r2
 8000abc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000abe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac0:	0004      	movs	r4, r0
 8000ac2:	40dc      	lsrs	r4, r3
 8000ac4:	0023      	movs	r3, r4
 8000ac6:	4091      	lsls	r1, r2
 8000ac8:	6579      	str	r1, [r7, #84]	@ 0x54
 8000aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000acc:	4319      	orrs	r1, r3
 8000ace:	6579      	str	r1, [r7, #84]	@ 0x54
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8000ad6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ad8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000ada:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000adc:	0008      	movs	r0, r1
 8000ade:	4318      	orrs	r0, r3
 8000ae0:	6138      	str	r0, [r7, #16]
 8000ae2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	617a      	str	r2, [r7, #20]
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	697c      	ldr	r4, [r7, #20]
 8000aec:	673b      	str	r3, [r7, #112]	@ 0x70
 8000aee:	677c      	str	r4, [r7, #116]	@ 0x74

	//OMNI ON/OFF (MIDI CHANNEL VOICE MODE)
	enum Validate MIDI_channel_voice_mode_status_bit = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8000af0:	2514      	movs	r5, #20
 8000af2:	2358      	movs	r3, #88	@ 0x58
 8000af4:	18eb      	adds	r3, r5, r3
 8000af6:	19dc      	adds	r4, r3, r7
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	00da      	lsls	r2, r3, #3
 8000afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f005 feeb 	bl	80068dc <Get_Status_Bit>
 8000b06:	0003      	movs	r3, r0
 8000b08:	7023      	strb	r3, [r4, #0]

	packed |= (uint64_t)MIDI_channel_voice_mode_status_bit << (shift + (1 << 3)); //(8 * 5)
 8000b0a:	2358      	movs	r3, #88	@ 0x58
 8000b0c:	18eb      	adds	r3, r5, r3
 8000b0e:	19db      	adds	r3, r3, r7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b1a:	2315      	movs	r3, #21
 8000b1c:	2258      	movs	r2, #88	@ 0x58
 8000b1e:	189b      	adds	r3, r3, r2
 8000b20:	19db      	adds	r3, r3, r7
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	3308      	adds	r3, #8
 8000b26:	001a      	movs	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	3b20      	subs	r3, #32
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db03      	blt.n	8000b38 <Pack_Misc_Into_Doubleword+0x18c>
 8000b30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000b32:	4099      	lsls	r1, r3
 8000b34:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b36:	e00b      	b.n	8000b50 <Pack_Misc_Into_Doubleword+0x1a4>
 8000b38:	2320      	movs	r3, #32
 8000b3a:	1a9b      	subs	r3, r3, r2
 8000b3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000b40:	0004      	movs	r4, r0
 8000b42:	40dc      	lsrs	r4, r3
 8000b44:	0023      	movs	r3, r4
 8000b46:	4091      	lsls	r1, r2
 8000b48:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b4a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000b4c:	4319      	orrs	r1, r3
 8000b4e:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8000b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b52:	4093      	lsls	r3, r2
 8000b54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b58:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000b5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4318      	orrs	r0, r3
 8000b60:	60b8      	str	r0, [r7, #8]
 8000b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000b64:	431a      	orrs	r2, r3
 8000b66:	60fa      	str	r2, [r7, #12]
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	68fc      	ldr	r4, [r7, #12]
 8000b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8000b6e:	677c      	str	r4, [r7, #116]	@ 0x74

	//MIDI BASIC CHANNEL
	packed |= (uint64_t) *MIDI_basic_channel_ptr << (shift + (2 << 3));
 8000b70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b7c:	2315      	movs	r3, #21
 8000b7e:	2258      	movs	r2, #88	@ 0x58
 8000b80:	189b      	adds	r3, r3, r2
 8000b82:	19db      	adds	r3, r3, r7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	3310      	adds	r3, #16
 8000b88:	001a      	movs	r2, r3
 8000b8a:	3a20      	subs	r2, #32
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	db03      	blt.n	8000b98 <Pack_Misc_Into_Doubleword+0x1ec>
 8000b90:	6a39      	ldr	r1, [r7, #32]
 8000b92:	4091      	lsls	r1, r2
 8000b94:	6479      	str	r1, [r7, #68]	@ 0x44
 8000b96:	e00b      	b.n	8000bb0 <Pack_Misc_Into_Doubleword+0x204>
 8000b98:	2220      	movs	r2, #32
 8000b9a:	1ad2      	subs	r2, r2, r3
 8000b9c:	6a38      	ldr	r0, [r7, #32]
 8000b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000ba0:	0004      	movs	r4, r0
 8000ba2:	40d4      	lsrs	r4, r2
 8000ba4:	0022      	movs	r2, r4
 8000ba6:	4099      	lsls	r1, r3
 8000ba8:	6479      	str	r1, [r7, #68]	@ 0x44
 8000baa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000bac:	4311      	orrs	r1, r2
 8000bae:	6479      	str	r1, [r7, #68]	@ 0x44
 8000bb0:	6a3a      	ldr	r2, [r7, #32]
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8000bb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000bb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8000bba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bbc:	0008      	movs	r0, r1
 8000bbe:	4318      	orrs	r0, r3
 8000bc0:	6038      	str	r0, [r7, #0]
 8000bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	687c      	ldr	r4, [r7, #4]
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bce:	677c      	str	r4, [r7, #116]	@ 0x74

	*Doubleword_ptr = packed;
 8000bd0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8000bd2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000bd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000bd6:	600a      	str	r2, [r1, #0]
 8000bd8:	604b      	str	r3, [r1, #4]

	return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	0018      	movs	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	b01f      	add	sp, #124	@ 0x7c
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000be4 <Store_Single_Preset_In_Flash>:

uint8_t Store_Single_Preset_In_Flash(volatile struct Preset *preset, uint8_t preset_num){
 8000be4:	b5b0      	push	{r4, r5, r7, lr}
 8000be6:	b08e      	sub	sp, #56	@ 0x38
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	000a      	movs	r2, r1
 8000bee:	1cfb      	adds	r3, r7, #3
 8000bf0:	701a      	strb	r2, [r3, #0]

	//whole page has to be erased, so first store state of all presets (including one to be overwritten for simplicity)
	//as well as miscellaneous data

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &storage_user_preset_0);
 8000bf2:	4b8f      	ldr	r3, [pc, #572]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000bf4:	4a8f      	ldr	r2, [pc, #572]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f7ff fe9e 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &storage_user_preset_1);
 8000bfe:	4b8e      	ldr	r3, [pc, #568]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c00:	4a8e      	ldr	r2, [pc, #568]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f7ff fe98 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &storage_user_preset_2);
 8000c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c0c:	4a8d      	ldr	r2, [pc, #564]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000c0e:	0019      	movs	r1, r3
 8000c10:	0010      	movs	r0, r2
 8000c12:	f7ff fe92 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &storage_user_preset_3);
 8000c16:	4b8c      	ldr	r3, [pc, #560]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000c18:	4a8c      	ldr	r2, [pc, #560]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	f7ff fe8c 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	uint64_t preset_packed = 0;
 8000c22:	2200      	movs	r2, #0
 8000c24:	2300      	movs	r3, #0
 8000c26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint64_t misc_packed = 0;
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623a      	str	r2, [r7, #32]
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t errors = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
	FLASH_EraseInitTypeDef erase_config = {.TypeErase = FLASH_CR_PER, .Banks = FLASH_CR_MER1, .Page = 31, .NbPages = 1};
 8000c36:	250c      	movs	r5, #12
 8000c38:	197b      	adds	r3, r7, r5
 8000c3a:	4a85      	ldr	r2, [pc, #532]	@ (8000e50 <Store_Single_Preset_In_Flash+0x26c>)
 8000c3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000c3e:	c313      	stmia	r3!, {r0, r1, r4}
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	601a      	str	r2, [r3, #0]
	HAL_FLASH_Unlock();
 8000c44:	f007 fdda 	bl	80087fc <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&erase_config, &errors); //all 0xF is no errors
 8000c48:	231c      	movs	r3, #28
 8000c4a:	18fa      	adds	r2, r7, r3
 8000c4c:	197b      	adds	r3, r7, r5
 8000c4e:	0011      	movs	r1, r2
 8000c50:	0018      	movs	r0, r3
 8000c52:	f007 fe87 	bl	8008964 <HAL_FLASHEx_Erase>

	if(preset_num == 0){
 8000c56:	1cfb      	adds	r3, r7, #3
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d131      	bne.n	8000cc2 <Store_Single_Preset_In_Flash+0xde>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000c5e:	2428      	movs	r4, #40	@ 0x28
 8000c60:	193a      	adds	r2, r7, r4
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	0011      	movs	r1, r2
 8000c66:	0018      	movs	r0, r3
 8000c68:	f7ff fe0e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c70:	4970      	ldr	r1, [pc, #448]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000c72:	2001      	movs	r0, #1
 8000c74:	f007 fd74 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000c78:	193a      	adds	r2, r7, r4
 8000c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fe02 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c88:	496c      	ldr	r1, [pc, #432]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	f007 fd68 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000c90:	193a      	adds	r2, r7, r4
 8000c92:	4b6b      	ldr	r3, [pc, #428]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000c94:	0011      	movs	r1, r2
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff fdf6 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ca0:	4968      	ldr	r1, [pc, #416]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f007 fd5c 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000ca8:	193a      	adds	r2, r7, r4
 8000caa:	4b67      	ldr	r3, [pc, #412]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fdea 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb8:	4964      	ldr	r1, [pc, #400]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f007 fd50 	bl	8008760 <HAL_FLASH_Program>
 8000cc0:	e0a0      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 1){
 8000cc2:	1cfb      	adds	r3, r7, #3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d131      	bne.n	8000d2e <Store_Single_Preset_In_Flash+0x14a>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000cca:	2428      	movs	r4, #40	@ 0x28
 8000ccc:	193a      	adds	r2, r7, r4
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0011      	movs	r1, r2
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f7ff fdd8 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cdc:	4957      	ldr	r1, [pc, #348]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f007 fd3e 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000ce4:	193a      	adds	r2, r7, r4
 8000ce6:	4b52      	ldr	r3, [pc, #328]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff fdcc 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000cf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cf4:	494f      	ldr	r1, [pc, #316]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f007 fd32 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000cfc:	193a      	adds	r2, r7, r4
 8000cfe:	4b50      	ldr	r3, [pc, #320]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fdc0 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d0c:	494d      	ldr	r1, [pc, #308]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f007 fd26 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	4b4c      	ldr	r3, [pc, #304]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fdb4 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d24:	4949      	ldr	r1, [pc, #292]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d26:	2001      	movs	r0, #1
 8000d28:	f007 fd1a 	bl	8008760 <HAL_FLASH_Program>
 8000d2c:	e06a      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 2){
 8000d2e:	1cfb      	adds	r3, r7, #3
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d131      	bne.n	8000d9a <Store_Single_Preset_In_Flash+0x1b6>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000d36:	2428      	movs	r4, #40	@ 0x28
 8000d38:	193a      	adds	r2, r7, r4
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f7ff fda2 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d44:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d48:	493e      	ldr	r1, [pc, #248]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f007 fd08 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000d50:	193a      	adds	r2, r7, r4
 8000d52:	4b37      	ldr	r3, [pc, #220]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000d54:	0011      	movs	r1, r2
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff fd96 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d60:	4934      	ldr	r1, [pc, #208]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000d62:	2001      	movs	r0, #1
 8000d64:	f007 fcfc 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	4b33      	ldr	r3, [pc, #204]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000d6c:	0011      	movs	r1, r2
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fd8a 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d78:	4930      	ldr	r1, [pc, #192]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f007 fcf0 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_3, &preset_packed);
 8000d80:	193a      	adds	r2, r7, r4
 8000d82:	4b31      	ldr	r3, [pc, #196]	@ (8000e48 <Store_Single_Preset_In_Flash+0x264>)
 8000d84:	0011      	movs	r1, r2
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fd7e 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000d8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d90:	492e      	ldr	r1, [pc, #184]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000d92:	2001      	movs	r0, #1
 8000d94:	f007 fce4 	bl	8008760 <HAL_FLASH_Program>
 8000d98:	e034      	b.n	8000e04 <Store_Single_Preset_In_Flash+0x220>
	}
	else if(preset_num == 3){
 8000d9a:	1cfb      	adds	r3, r7, #3
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d130      	bne.n	8000e04 <Store_Single_Preset_In_Flash+0x220>

		Pack_Preset_Into_Doubleword(preset, &preset_packed);
 8000da2:	2428      	movs	r4, #40	@ 0x28
 8000da4:	193a      	adds	r2, r7, r4
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff fd6c 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_3_FLASH_MEMORY_ADDRESS, preset_packed);
 8000db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000db4:	4925      	ldr	r1, [pc, #148]	@ (8000e4c <Store_Single_Preset_In_Flash+0x268>)
 8000db6:	2001      	movs	r0, #1
 8000db8:	f007 fcd2 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_0, &preset_packed);
 8000dbc:	193a      	adds	r2, r7, r4
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <Store_Single_Preset_In_Flash+0x24c>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f7ff fd60 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_0_FLASH_MEMORY_ADDRESS, preset_packed);
 8000dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dcc:	4919      	ldr	r1, [pc, #100]	@ (8000e34 <Store_Single_Preset_In_Flash+0x250>)
 8000dce:	2001      	movs	r0, #1
 8000dd0:	f007 fcc6 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_1, &preset_packed);
 8000dd4:	193a      	adds	r2, r7, r4
 8000dd6:	4b18      	ldr	r3, [pc, #96]	@ (8000e38 <Store_Single_Preset_In_Flash+0x254>)
 8000dd8:	0011      	movs	r1, r2
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f7ff fd54 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_1_FLASH_MEMORY_ADDRESS, preset_packed);
 8000de0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000de4:	4915      	ldr	r1, [pc, #84]	@ (8000e3c <Store_Single_Preset_In_Flash+0x258>)
 8000de6:	2001      	movs	r0, #1
 8000de8:	f007 fcba 	bl	8008760 <HAL_FLASH_Program>

		Pack_Preset_Into_Doubleword(&storage_user_preset_2, &preset_packed);
 8000dec:	193a      	adds	r2, r7, r4
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <Store_Single_Preset_In_Flash+0x25c>)
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff fd48 	bl	8000888 <Pack_Preset_Into_Doubleword>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, USER_PRESET_2_FLASH_MEMORY_ADDRESS, preset_packed);
 8000df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	4911      	ldr	r1, [pc, #68]	@ (8000e44 <Store_Single_Preset_In_Flash+0x260>)
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f007 fcae 	bl	8008760 <HAL_FLASH_Program>
	}

	Pack_Misc_Into_Doubleword(user_presets_used_array, &statuses, &MIDI_basic_channel, &misc_packed, NUM_PRESETS);
 8000e04:	2320      	movs	r3, #32
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <Store_Single_Preset_In_Flash+0x270>)
 8000e0a:	4913      	ldr	r1, [pc, #76]	@ (8000e58 <Store_Single_Preset_In_Flash+0x274>)
 8000e0c:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <Store_Single_Preset_In_Flash+0x278>)
 8000e0e:	2404      	movs	r4, #4
 8000e10:	9400      	str	r4, [sp, #0]
 8000e12:	f7ff fdcb 	bl	80009ac <Pack_Misc_Into_Doubleword>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, MISC_FLASH_MEMORY_ADDRESS, misc_packed);
 8000e16:	6a3a      	ldr	r2, [r7, #32]
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	4911      	ldr	r1, [pc, #68]	@ (8000e60 <Store_Single_Preset_In_Flash+0x27c>)
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 fc9f 	bl	8008760 <HAL_FLASH_Program>

	HAL_FLASH_Lock();
 8000e22:	f007 fd0f 	bl	8008844 <HAL_FLASH_Lock>

	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	0018      	movs	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b00c      	add	sp, #48	@ 0x30
 8000e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e30:	20000558 	.word	0x20000558
 8000e34:	0800f800 	.word	0x0800f800
 8000e38:	20000560 	.word	0x20000560
 8000e3c:	0800f808 	.word	0x0800f808
 8000e40:	20000568 	.word	0x20000568
 8000e44:	0800f810 	.word	0x0800f810
 8000e48:	20000570 	.word	0x20000570
 8000e4c:	0800f818 	.word	0x0800f818
 8000e50:	0800e130 	.word	0x0800e130
 8000e54:	20000582 	.word	0x20000582
 8000e58:	20000cfc 	.word	0x20000cfc
 8000e5c:	20000578 	.word	0x20000578
 8000e60:	0800f820 	.word	0x0800f820

08000e64 <Read_and_Interpret_Misc_From_Flash>:

uint8_t Read_and_Interpret_Misc_From_Flash(uint32_t address_val,
										   volatile enum Validate *user_presets_used_array_ptr,
										   volatile uint32_t *statuses_ptr,
										   volatile enum MIDI_Channel *MIDI_basic_channel_ptr,
										   uint8_t num_presets){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]

	uint8_t *address = (uint8_t *)address_val;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	61bb      	str	r3, [r7, #24]

	volatile uint8_t interpretted_value = 0;
 8000e76:	2316      	movs	r3, #22
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	701a      	strb	r2, [r3, #0]

	//PRESETS
	for(uint8_t i = 0; i < num_presets; i++){
 8000e7e:	231f      	movs	r3, #31
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e02c      	b.n	8000ee2 <Read_and_Interpret_Misc_From_Flash+0x7e>

		interpretted_value = *(address + i);
 8000e88:	211f      	movs	r1, #31
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	2016      	movs	r0, #22
 8000e96:	183b      	adds	r3, r7, r0
 8000e98:	701a      	strb	r2, [r3, #0]

		if(interpretted_value == (enum Validate)YES){
 8000e9a:	183b      	adds	r3, r7, r0
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d106      	bne.n	8000eb2 <Read_and_Interpret_Misc_From_Flash+0x4e>

			*(user_presets_used_array_ptr + i) = (enum Validate)YES;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	68ba      	ldr	r2, [r7, #8]
 8000eaa:	18d3      	adds	r3, r2, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e011      	b.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>
		}
		else if((interpretted_value == 0xFF) || (interpretted_value == (enum Validate)NO)){
 8000eb2:	2216      	movs	r2, #22
 8000eb4:	18bb      	adds	r3, r7, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2bff      	cmp	r3, #255	@ 0xff
 8000ebc:	d004      	beq.n	8000ec8 <Read_and_Interpret_Misc_From_Flash+0x64>
 8000ebe:	18bb      	adds	r3, r7, r2
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <Read_and_Interpret_Misc_From_Flash+0x72>

			*(user_presets_used_array_ptr + i) = (enum Validate)NO;
 8000ec8:	231f      	movs	r3, #31
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	18d3      	adds	r3, r2, r3
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < num_presets; i++){
 8000ed6:	211f      	movs	r1, #31
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	781a      	ldrb	r2, [r3, #0]
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	3201      	adds	r2, #1
 8000ee0:	701a      	strb	r2, [r3, #0]
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	18fa      	adds	r2, r7, r3
 8000ee6:	2128      	movs	r1, #40	@ 0x28
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3ca      	bcc.n	8000e88 <Read_and_Interpret_Misc_From_Flash+0x24>
		}
	}

	//START REQUIRED BEFORE SYNC MODE
	interpretted_value = *(address + num_presets);
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	2116      	movs	r1, #22
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)NO){
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d105      	bne.n	8000f18 <Read_and_Interpret_Misc_From_Flash+0xb4>
		Clear_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0018      	movs	r0, r3
 8000f12:	f005 fd09 	bl	8006928 <Clear_Status_Bit>
 8000f16:	e00f      	b.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
	}
	else if((interpretted_value == (enum Validate)YES) || (interpretted_value == 0xFF)){
 8000f18:	2216      	movs	r2, #22
 8000f1a:	18bb      	adds	r3, r7, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d004      	beq.n	8000f2e <Read_and_Interpret_Misc_From_Flash+0xca>
 8000f24:	18bb      	adds	r3, r7, r2
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2bff      	cmp	r3, #255	@ 0xff
 8000f2c:	d104      	bne.n	8000f38 <Read_and_Interpret_Misc_From_Flash+0xd4>
		Set_Status_Bit(statuses_ptr, Start_Required_Before_Sync_Mode);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2180      	movs	r1, #128	@ 0x80
 8000f32:	0018      	movs	r0, r3
 8000f34:	f005 fce6 	bl	8006904 <Set_Status_Bit>
	}

	//OMNI ON/OFF
	interpretted_value = *(address + num_presets + 1);
 8000f38:	2328      	movs	r3, #40	@ 0x28
 8000f3a:	18fb      	adds	r3, r7, r3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	18d3      	adds	r3, r2, r3
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	2116      	movs	r1, #22
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	701a      	strb	r2, [r3, #0]

	if(interpretted_value == (enum Validate)YES){
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d107      	bne.n	8000f66 <Read_and_Interpret_Misc_From_Flash+0x102>
		Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI ON
 8000f56:	2380      	movs	r3, #128	@ 0x80
 8000f58:	00da      	lsls	r2, r3, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	0011      	movs	r1, r2
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f005 fcd0 	bl	8006904 <Set_Status_Bit>
 8000f64:	e011      	b.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
	}
	else if((interpretted_value == (enum Validate)NO) || (interpretted_value == 0xFF)){
 8000f66:	2216      	movs	r2, #22
 8000f68:	18bb      	adds	r3, r7, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d004      	beq.n	8000f7c <Read_and_Interpret_Misc_From_Flash+0x118>
 8000f72:	18bb      	adds	r3, r7, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	2bff      	cmp	r3, #255	@ 0xff
 8000f7a:	d106      	bne.n	8000f8a <Read_and_Interpret_Misc_From_Flash+0x126>
		Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode); //OMNI OFF
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	00da      	lsls	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	0011      	movs	r1, r2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f005 fccf 	bl	8006928 <Clear_Status_Bit>
	}

	//BASIC CHANNEL
	interpretted_value = *(address + num_presets + 2);
 8000f8a:	2328      	movs	r3, #40	@ 0x28
 8000f8c:	18fb      	adds	r3, r7, r3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	3302      	adds	r3, #2
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781a      	ldrb	r2, [r3, #0]
 8000f98:	2116      	movs	r1, #22
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	701a      	strb	r2, [r3, #0]

	if(interpretted_value > (uint8_t)MIDI_CH_SIXTEEN){
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b0f      	cmp	r3, #15
 8000fa6:	d908      	bls.n	8000fba <Read_and_Interpret_Misc_From_Flash+0x156>

		uint8_t midi_channel_default = MIDI_BASIC_CHANNEL_DEFAULT;
 8000fa8:	2117      	movs	r1, #23
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)midi_channel_default;
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	701a      	strb	r2, [r3, #0]
 8000fb8:	e005      	b.n	8000fc6 <Read_and_Interpret_Misc_From_Flash+0x162>
	}
	else{

		*MIDI_basic_channel_ptr = (enum MIDI_Channel)interpretted_value;
 8000fba:	2316      	movs	r3, #22
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b008      	add	sp, #32
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>:

uint8_t Update_Converted_Preset_Array_with_User_or_Factory_Presets(volatile struct Preset_Converted* presets_converted_array_ptr,
																	volatile enum Validate *user_presets_used_array_ptr,
																	const struct Preset **factory_presets_array_ptr,
																	volatile struct Preset **user_presets_array_ptr,
																	uint8_t size_of_factory_and_user_arrays){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8000fde:	2317      	movs	r3, #23
 8000fe0:	18fb      	adds	r3, r7, r3
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
 8000fe6:	e03c      	b.n	8001062 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x92>

		if(*(user_presets_used_array_ptr + i) == (enum Validate)YES){
 8000fe8:	2117      	movs	r1, #23
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d112      	bne.n	8001020 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x50>
			Convert_All_Preset_Values(*(user_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	18d3      	adds	r3, r2, r3
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	187b      	adds	r3, r7, r1
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	0013      	movs	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	189b      	adds	r3, r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	001a      	movs	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	189b      	adds	r3, r3, r2
 8001018:	0019      	movs	r1, r3
 800101a:	f7ff fb95 	bl	8000748 <Convert_All_Preset_Values>
 800101e:	e01a      	b.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
		}
		else if(*(user_presets_used_array_ptr + i) == (enum Validate)NO){
 8001020:	2117      	movs	r1, #23
 8001022:	187b      	adds	r3, r7, r1
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d111      	bne.n	8001056 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x86>
			Convert_All_Preset_Values((struct Preset *) *(factory_presets_array_ptr + i), (presets_converted_array_ptr + i));
 8001032:	187b      	adds	r3, r7, r1
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	18d3      	adds	r3, r2, r3
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781a      	ldrb	r2, [r3, #0]
 8001042:	0013      	movs	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	189b      	adds	r3, r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	001a      	movs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	189b      	adds	r3, r3, r2
 8001050:	0019      	movs	r1, r3
 8001052:	f7ff fb79 	bl	8000748 <Convert_All_Preset_Values>
	for(uint8_t i = 0; i < size_of_factory_and_user_arrays; i++){
 8001056:	2117      	movs	r1, #23
 8001058:	187b      	adds	r3, r7, r1
 800105a:	781a      	ldrb	r2, [r3, #0]
 800105c:	187b      	adds	r3, r7, r1
 800105e:	3201      	adds	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	2317      	movs	r3, #23
 8001064:	18fa      	adds	r2, r7, r3
 8001066:	2320      	movs	r3, #32
 8001068:	18fb      	adds	r3, r7, r3
 800106a:	7812      	ldrb	r2, [r2, #0]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3ba      	bcc.n	8000fe8 <Update_Converted_Preset_Array_with_User_or_Factory_Presets+0x18>
		}
	}

	return 1;
 8001072:	2301      	movs	r3, #1
}
 8001074:	0018      	movs	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	b006      	add	sp, #24
 800107a:	bd80      	pop	{r7, pc}

0800107c <Read_and_Interpret_User_Presets_From_Flash>:

uint8_t Read_and_Interpret_User_Presets_From_Flash(void){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0

	Read_and_Interpret_Preset_From_Flash(USER_PRESET_0_FLASH_MEMORY_ADDRESS, &user_preset_0);
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <Read_and_Interpret_User_Presets_From_Flash+0x3c>)
 8001082:	4a0e      	ldr	r2, [pc, #56]	@ (80010bc <Read_and_Interpret_User_Presets_From_Flash+0x40>)
 8001084:	0019      	movs	r1, r3
 8001086:	0010      	movs	r0, r2
 8001088:	f7ff fc57 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_1_FLASH_MEMORY_ADDRESS, &user_preset_1);
 800108c:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <Read_and_Interpret_User_Presets_From_Flash+0x44>)
 800108e:	4a0d      	ldr	r2, [pc, #52]	@ (80010c4 <Read_and_Interpret_User_Presets_From_Flash+0x48>)
 8001090:	0019      	movs	r1, r3
 8001092:	0010      	movs	r0, r2
 8001094:	f7ff fc51 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_2_FLASH_MEMORY_ADDRESS, &user_preset_2);
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <Read_and_Interpret_User_Presets_From_Flash+0x4c>)
 800109a:	4a0c      	ldr	r2, [pc, #48]	@ (80010cc <Read_and_Interpret_User_Presets_From_Flash+0x50>)
 800109c:	0019      	movs	r1, r3
 800109e:	0010      	movs	r0, r2
 80010a0:	f7ff fc4b 	bl	800093a <Read_and_Interpret_Preset_From_Flash>
	Read_and_Interpret_Preset_From_Flash(USER_PRESET_3_FLASH_MEMORY_ADDRESS, &user_preset_3);
 80010a4:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <Read_and_Interpret_User_Presets_From_Flash+0x54>)
 80010a6:	4a0b      	ldr	r2, [pc, #44]	@ (80010d4 <Read_and_Interpret_User_Presets_From_Flash+0x58>)
 80010a8:	0019      	movs	r1, r3
 80010aa:	0010      	movs	r0, r2
 80010ac:	f7ff fc45 	bl	800093a <Read_and_Interpret_Preset_From_Flash>

	return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000000 	.word	0x20000000
 80010bc:	0800f800 	.word	0x0800f800
 80010c0:	20000008 	.word	0x20000008
 80010c4:	0800f808 	.word	0x0800f808
 80010c8:	20000010 	.word	0x20000010
 80010cc:	0800f810 	.word	0x0800f810
 80010d0:	20000018 	.word	0x20000018
 80010d4:	0800f818 	.word	0x0800f818

080010d8 <Update_Waveshape_with_CC_Value>:

uint8_t Update_Waveshape_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]

	if(*data <= TRIANGLE_MODE_ADC_THRESHOLD){
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80010ea:	d803      	bhi.n	80010f4 <Update_Waveshape_with_CC_Value+0x1c>
		params_ptr->waveshape = TRIANGLE_MODE;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	719a      	strb	r2, [r3, #6]
 80010f2:	e011      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SINE_MODE_ADC_THRESHOLD){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b55      	cmp	r3, #85	@ 0x55
 80010fc:	d803      	bhi.n	8001106 <Update_Waveshape_with_CC_Value+0x2e>
		params_ptr->waveshape = SINE_MODE;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	719a      	strb	r2, [r3, #6]
 8001104:	e008      	b.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
	}
	else if (*data <= SQUARE_MODE_ADC_THRESHOLD){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	b2db      	uxtb	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	db02      	blt.n	8001118 <Update_Waveshape_with_CC_Value+0x40>
		params_ptr->waveshape = SQUARE_MODE;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	2202      	movs	r2, #2
 8001116:	719a      	strb	r2, [r3, #6]
	}

	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}

08001122 <Update_Speed_with_CC_Value>:

uint8_t Update_Speed_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001122:	b580      	push	{r7, lr}
 8001124:	b084      	sub	sp, #16
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]

	uint16_t speed = (uint16_t)*data;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2da      	uxtb	r2, r3
 8001132:	210e      	movs	r1, #14
 8001134:	187b      	adds	r3, r7, r1
 8001136:	801a      	strh	r2, [r3, #0]

	speed <<= 3; //convert to 10-bit
 8001138:	187b      	adds	r3, r7, r1
 800113a:	187a      	adds	r2, r7, r1
 800113c:	8812      	ldrh	r2, [r2, #0]
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = speed;
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	187a      	adds	r2, r7, r1
 8001146:	8812      	ldrh	r2, [r2, #0]
 8001148:	811a      	strh	r2, [r3, #8]

	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b004      	add	sp, #16
 8001152:	bd80      	pop	{r7, pc}

08001154 <Update_Depth_with_CC_Value>:

uint8_t Update_Depth_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]

	uint8_t depth = (uint8_t)*data;
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	701a      	strb	r2, [r3, #0]
	params_ptr->depth = depth;
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	187a      	adds	r2, r7, r1
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	729a      	strb	r2, [r3, #10]

	return 1;
 8001170:	2301      	movs	r3, #1
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b004      	add	sp, #16
 8001178:	bd80      	pop	{r7, pc}

0800117a <Update_Symmetry_with_CC_Value>:

uint8_t Update_Symmetry_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	6039      	str	r1, [r7, #0]

	uint8_t symmetry = (uint8_t)*data;
 8001184:	210f      	movs	r1, #15
 8001186:	187b      	adds	r3, r7, r1
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	701a      	strb	r2, [r3, #0]

	symmetry <<= 1; //convert to 8-bit
 800118e:	187a      	adds	r2, r7, r1
 8001190:	187b      	adds	r3, r7, r1
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	18db      	adds	r3, r3, r3
 8001196:	7013      	strb	r3, [r2, #0]
	params_ptr->symmetry = symmetry;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b29a      	uxth	r2, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	819a      	strh	r2, [r3, #12]

	return 1;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	0018      	movs	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b004      	add	sp, #16
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Update_Phase_with_CC_Value>:

uint8_t Update_Phase_with_CC_Value(volatile uint8_t *data, struct Params* params_ptr){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]

	uint8_t phase = (uint8_t)*data;
 80011b6:	210f      	movs	r1, #15
 80011b8:	187b      	adds	r3, r7, r1
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	7812      	ldrb	r2, [r2, #0]
 80011be:	701a      	strb	r2, [r3, #0]

	phase <<= 2; //convert to 9-bit
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	187a      	adds	r2, r7, r1
 80011c4:	7812      	ldrb	r2, [r2, #0]
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	701a      	strb	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = phase;
 80011ca:	187b      	adds	r3, r7, r1
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <Set_Waveshape_to_CC_Mode_and_Value>:

uint8_t Set_Waveshape_to_CC_Mode_and_Value(uint8_t *data){
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80011e8:	4b08      	ldr	r3, [pc, #32]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	4b07      	ldr	r3, [pc, #28]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = CC_MODE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <Set_Waveshape_to_CC_Mode_and_Value+0x2c>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]

	CC_array[WAVESHAPE_ARR] = *data;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <Set_Waveshape_to_CC_Mode_and_Value+0x30>)
 80011fe:	701a      	strb	r2, [r3, #0]

	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	20000438 	.word	0x20000438
 8001210:	2000057c 	.word	0x2000057c

08001214 <Set_Speed_to_CC_Mode_and_Value>:

uint8_t Set_Speed_to_CC_Mode_and_Value(uint8_t *data){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001224:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <Set_Speed_to_CC_Mode_and_Value+0x2c>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]

	CC_array[SPEED_ARR] = *data;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	781a      	ldrb	r2, [r3, #0]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <Set_Speed_to_CC_Mode_and_Value+0x30>)
 8001232:	705a      	strb	r2, [r3, #1]

	return 1;
 8001234:	2301      	movs	r3, #1
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b002      	add	sp, #8
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			@ (mov r8, r8)
 8001240:	20000430 	.word	0x20000430
 8001244:	2000057c 	.word	0x2000057c

08001248 <Set_Depth_to_CC_Mode_and_Value>:

uint8_t Set_Depth_to_CC_Mode_and_Value(uint8_t *data){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b07      	ldr	r3, [pc, #28]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 8001258:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = CC_MODE;
 800125a:	4b06      	ldr	r3, [pc, #24]	@ (8001274 <Set_Depth_to_CC_Mode_and_Value+0x2c>)
 800125c:	2202      	movs	r2, #2
 800125e:	701a      	strb	r2, [r3, #0]

	CC_array[DEPTH_ARR] = *data;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	781a      	ldrb	r2, [r3, #0]
 8001264:	4b04      	ldr	r3, [pc, #16]	@ (8001278 <Set_Depth_to_CC_Mode_and_Value+0x30>)
 8001266:	709a      	strb	r2, [r3, #2]

	return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000434 	.word	0x20000434
 8001278:	2000057c 	.word	0x2000057c

0800127c <Set_Symmetry_to_CC_Mode_and_Value>:

uint8_t Set_Symmetry_to_CC_Mode_and_Value(uint8_t *data){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001284:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 800128c:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = CC_MODE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <Set_Symmetry_to_CC_Mode_and_Value+0x2c>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]

	CC_array[SYMMETRY_ARR] = *data;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <Set_Symmetry_to_CC_Mode_and_Value+0x30>)
 800129a:	70da      	strb	r2, [r3, #3]

	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	2000043c 	.word	0x2000043c
 80012ac:	2000057c 	.word	0x2000057c

080012b0 <Set_Phase_to_CC_Mode_and_Value>:

uint8_t Set_Phase_to_CC_Mode_and_Value(uint8_t *data){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]

	phase_fsm.prev_state = phase_fsm.current_state;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	b2da      	uxtb	r2, r3
 80012be:	4b07      	ldr	r3, [pc, #28]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c0:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = CC_MODE;
 80012c2:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <Set_Phase_to_CC_Mode_and_Value+0x2c>)
 80012c4:	2202      	movs	r2, #2
 80012c6:	701a      	strb	r2, [r3, #0]

	CC_array[PHASE_ARR] = *data;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <Set_Phase_to_CC_Mode_and_Value+0x30>)
 80012ce:	711a      	strb	r2, [r3, #4]

	return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	0018      	movs	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	b002      	add	sp, #8
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			@ (mov r8, r8)
 80012dc:	20000440 	.word	0x20000440
 80012e0:	2000057c 	.word	0x2000057c

080012e4 <Set_All_Pots_to_PC_Mode>:

uint8_t Set_All_Pots_to_PC_Mode(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 80012e8:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b14      	ldr	r3, [pc, #80]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f0:	705a      	strb	r2, [r3, #1]
	waveshape_fsm.current_state = PC_MODE;
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <Set_All_Pots_to_PC_Mode+0x5c>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	701a      	strb	r2, [r3, #0]

	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001300:	705a      	strb	r2, [r3, #1]
	speed_fsm.current_state.shared_state = PC_MODE;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <Set_All_Pots_to_PC_Mode+0x60>)
 8001304:	2203      	movs	r2, #3
 8001306:	701a      	strb	r2, [r3, #0]

	depth_fsm.prev_state = depth_fsm.current_state;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	b2da      	uxtb	r2, r3
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001310:	705a      	strb	r2, [r3, #1]
	depth_fsm.current_state = PC_MODE;
 8001312:	4b0d      	ldr	r3, [pc, #52]	@ (8001348 <Set_All_Pots_to_PC_Mode+0x64>)
 8001314:	2203      	movs	r2, #3
 8001316:	701a      	strb	r2, [r3, #0]

	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 8001318:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001320:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.current_state = PC_MODE;
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <Set_All_Pots_to_PC_Mode+0x68>)
 8001324:	2203      	movs	r2, #3
 8001326:	701a      	strb	r2, [r3, #0]

	phase_fsm.prev_state = phase_fsm.current_state;
 8001328:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001330:	705a      	strb	r2, [r3, #1]
	phase_fsm.current_state = PC_MODE;
 8001332:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <Set_All_Pots_to_PC_Mode+0x6c>)
 8001334:	2203      	movs	r2, #3
 8001336:	701a      	strb	r2, [r3, #0]

	return 1;
 8001338:	2301      	movs	r3, #1
}
 800133a:	0018      	movs	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000438 	.word	0x20000438
 8001344:	20000430 	.word	0x20000430
 8001348:	20000434 	.word	0x20000434
 800134c:	2000043c 	.word	0x2000043c
 8001350:	20000440 	.word	0x20000440

08001354 <Store_Params_as_User_Preset>:
uint8_t Store_Params_as_User_Preset(enum Preset_Selected preset,
									volatile struct Params *params_ptr,
									volatile enum Validate *user_presets_used_array_ptr,
									volatile struct Preset **user_presets_array_ptr,
									const struct Preset **factory_presets_array_ptr,
									volatile struct Preset_Converted *presets_converted_array_ptr){
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af02      	add	r7, sp, #8
 800135a:	60b9      	str	r1, [r7, #8]
 800135c:	607a      	str	r2, [r7, #4]
 800135e:	603b      	str	r3, [r7, #0]
 8001360:	240f      	movs	r4, #15
 8001362:	193b      	adds	r3, r7, r4
 8001364:	1c02      	adds	r2, r0, #0
 8001366:	701a      	strb	r2, [r3, #0]

	//this function takes whatever the params for the pots are currently set to, regardless of CC, PC, etc.
	//and stores them to a given preset

	uint8_t preset_index = (uint8_t)preset - 1;
 8001368:	2117      	movs	r1, #23
 800136a:	187b      	adds	r3, r7, r1
 800136c:	193a      	adds	r2, r7, r4
 800136e:	7812      	ldrb	r2, [r2, #0]
 8001370:	3a01      	subs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]

	*(user_presets_used_array_ptr + preset_index) = YES;
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	18d3      	adds	r3, r2, r3
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]

	Convert_All_Params_Values_for_Preset(params_ptr, *(user_presets_array_ptr + preset_index));
 8001380:	187b      	adds	r3, r7, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	18d3      	adds	r3, r2, r3
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0011      	movs	r1, r2
 8001390:	0018      	movs	r0, r3
 8001392:	f7ff fa02 	bl	800079a <Convert_All_Params_Values_for_Preset>
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array_ptr,
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800139e:	2404      	movs	r4, #4
 80013a0:	9400      	str	r4, [sp, #0]
 80013a2:	f7ff fe15 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
																user_presets_used_array_ptr,
																factory_presets_array_ptr,
																user_presets_array_ptr,
																NUM_PRESETS);

	return 1;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b007      	add	sp, #28
 80013ae:	bd90      	pop	{r4, r7, pc}

080013b0 <set_LED_to_state>:
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	000a      	movs	r2, r1
 80013ba:	1cfb      	adds	r3, r7, #3
 80013bc:	701a      	strb	r2, [r3, #0]
 80013be:	1cfb      	adds	r3, r7, #3
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b07      	cmp	r3, #7
 80013c4:	d114      	bne.n	80013f0 <set_LED_to_state+0x40>
 80013c6:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <set_LED_to_state+0x8c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d026      	beq.n	800141e <set_LED_to_state+0x6e>
 80013d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <set_LED_to_state+0x90>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <set_LED_to_state+0x94>)
 80013da:	2296      	movs	r2, #150	@ 0x96
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <set_LED_to_state+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
 80013e4:	4b16      	ldr	r3, [pc, #88]	@ (8001440 <set_LED_to_state+0x90>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a16      	ldr	r2, [pc, #88]	@ (8001444 <set_LED_to_state+0x94>)
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80013ee:	e016      	b.n	800141e <set_LED_to_state+0x6e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	1cfa      	adds	r2, r7, #3
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d00f      	beq.n	800141e <set_LED_to_state+0x6e>
 80013fe:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <set_LED_to_state+0x90>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	@ 0x24
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <set_LED_to_state+0x94>)
 8001408:	2296      	movs	r2, #150	@ 0x96
 800140a:	0052      	lsls	r2, r2, #1
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <set_LED_to_state+0x98>)
 8001410:	2200      	movs	r2, #0
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <set_LED_to_state+0x90>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <set_LED_to_state+0x94>)
 800141a:	6812      	ldr	r2, [r2, #0]
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	705a      	strb	r2, [r3, #1]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	1cfa      	adds	r2, r7, #3
 800142c:	7812      	ldrb	r2, [r2, #0]
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	2301      	movs	r3, #1
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	20000448 	.word	0x20000448
 8001440:	20000698 	.word	0x20000698
 8001444:	20000020 	.word	0x20000020
 8001448:	20000581 	.word	0x20000581

0800144c <Is_Status_Byte>:
volatile uint8_t active_status_byte;
volatile uint8_t running_status_byte;
volatile struct MIDI_Data MIDI_data = {.MIDI_data_buffer = 0};

//FUNCTION DEFINITIONS
enum Validate Is_Status_Byte(volatile uint8_t *data){
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8001454:	210f      	movs	r1, #15
 8001456:	187b      	adds	r3, r7, r1
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	7812      	ldrb	r2, [r2, #0]
 800145c:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	187a      	adds	r2, r7, r1
 8001462:	7812      	ldrb	r2, [r2, #0]
 8001464:	09d2      	lsrs	r2, r2, #7
 8001466:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 8001468:	187b      	adds	r3, r7, r1
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <Is_Status_Byte+0x28>

		return (enum Validate)YES;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <Is_Status_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)NO;
 8001474:	2300      	movs	r3, #0
	}
}
 8001476:	0018      	movs	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	b004      	add	sp, #16
 800147c:	bd80      	pop	{r7, pc}

0800147e <Is_Data_Byte>:

enum Validate Is_Data_Byte(volatile uint8_t *data){
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]

	uint8_t MSB = *data;
 8001486:	210f      	movs	r1, #15
 8001488:	187b      	adds	r3, r7, r1
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	701a      	strb	r2, [r3, #0]

	MSB >>= 7;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	187a      	adds	r2, r7, r1
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	09d2      	lsrs	r2, r2, #7
 8001498:	701a      	strb	r2, [r3, #0]

	if(MSB){ //status byte
 800149a:	187b      	adds	r3, r7, r1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <Is_Data_Byte+0x28>

		return (enum Validate)NO;
 80014a2:	2300      	movs	r3, #0
 80014a4:	e000      	b.n	80014a8 <Is_Data_Byte+0x2a>
	}
	else{ //data byte

		return (enum Validate)YES;
 80014a6:	2301      	movs	r3, #1
	}
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b004      	add	sp, #16
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Is_PC_Status_Byte>:

enum Validate Is_PC_Status_Byte(volatile uint8_t *data){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_PROGRAM_CHANGE >> 4;
 80014b8:	210f      	movs	r1, #15
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	220c      	movs	r2, #12
 80014be:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	200e      	movs	r0, #14
 80014c8:	183b      	adds	r3, r7, r0
 80014ca:	0912      	lsrs	r2, r2, #4
 80014cc:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 80014ce:	183a      	adds	r2, r7, r0
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d101      	bne.n	80014de <Is_PC_Status_Byte+0x2e>

		return (enum Validate)YES;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <Is_PC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 80014de:	2300      	movs	r3, #0
	}
}
 80014e0:	0018      	movs	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b004      	add	sp, #16
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <Is_CC_Status_Byte>:

enum Validate Is_CC_Status_Byte(volatile uint8_t *data){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	uint8_t source;
	uint8_t temp_data;

	source = (uint8_t)CHANNEL_VOICE_CONTROL_CHANGE >> 4;
 80014f0:	210f      	movs	r1, #15
 80014f2:	187b      	adds	r3, r7, r1
 80014f4:	220b      	movs	r2, #11
 80014f6:	701a      	strb	r2, [r3, #0]
	temp_data = *data >> 4;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	200e      	movs	r0, #14
 8001500:	183b      	adds	r3, r7, r0
 8001502:	0912      	lsrs	r2, r2, #4
 8001504:	701a      	strb	r2, [r3, #0]

	if(temp_data == source){
 8001506:	183a      	adds	r2, r7, r0
 8001508:	187b      	adds	r3, r7, r1
 800150a:	7812      	ldrb	r2, [r2, #0]
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	d101      	bne.n	8001516 <Is_CC_Status_Byte+0x2e>

		return (enum Validate)YES;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <Is_CC_Status_Byte+0x30>
	}
	else{

		return (enum Validate)NO;
 8001516:	2300      	movs	r3, #0
	}
}
 8001518:	0018      	movs	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	b004      	add	sp, #16
 800151e:	bd80      	pop	{r7, pc}

08001520 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>:

enum Validate Is_Utilised_Channel_Mode_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b77      	cmp	r3, #119	@ 0x77
 8001530:	d91d      	bls.n	800156e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4e>

		if(*first_data_byte == RESET_ALL_CONTROLLERS){ //put all pots into CC mode and set to 50%
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b79      	cmp	r3, #121	@ 0x79
 800153a:	d101      	bne.n	8001540 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x20>

			return (enum Validate)YES;
 800153c:	2301      	movs	r3, #1
 800153e:	e017      	b.n	8001570 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == LOCAL_CONTROL){
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b7a      	cmp	r3, #122	@ 0x7a
 8001548:	d101      	bne.n	800154e <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x2e>

			return (enum Validate)YES;
 800154a:	2301      	movs	r3, #1
 800154c:	e010      	b.n	8001570 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_ON){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b7d      	cmp	r3, #125	@ 0x7d
 8001556:	d101      	bne.n	800155c <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x3c>

			return (enum Validate)YES;
 8001558:	2301      	movs	r3, #1
 800155a:	e009      	b.n	8001570 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else if(*first_data_byte == OMNI_MODE_OFF){
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b7c      	cmp	r3, #124	@ 0x7c
 8001564:	d101      	bne.n	800156a <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x4a>

			return (enum Validate)YES;
 8001566:	2301      	movs	r3, #1
 8001568:	e002      	b.n	8001570 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
		else{

			return (enum Validate)NO;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <Is_Utilised_Channel_Mode_CC_First_Data_Byte+0x50>
		}
	}
	else{

		return (enum Validate)NO;
 800156e:	2300      	movs	r3, #0
	}
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <Is_Utilised_CC_First_Data_Byte>:

enum Validate Is_Utilised_CC_First_Data_Byte(volatile uint8_t *first_data_byte){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

	if(*first_data_byte >= CHANNEL_MODE_CC_THRESHOLD){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b77      	cmp	r3, #119	@ 0x77
 8001588:	d901      	bls.n	800158e <Is_Utilised_CC_First_Data_Byte+0x16>

		return (enum Validate)NO;
 800158a:	2300      	movs	r3, #0
 800158c:	e023      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
	}
	else{

		if(*first_data_byte == WAVESHAPE_CC){
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b14      	cmp	r3, #20
 8001596:	d101      	bne.n	800159c <Is_Utilised_CC_First_Data_Byte+0x24>

			return (enum Validate)YES;
 8001598:	2301      	movs	r3, #1
 800159a:	e01c      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SPEED_CC){
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b15      	cmp	r3, #21
 80015a4:	d101      	bne.n	80015aa <Is_Utilised_CC_First_Data_Byte+0x32>

			return (enum Validate)YES;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e015      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == DEPTH_CC){
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b16      	cmp	r3, #22
 80015b2:	d101      	bne.n	80015b8 <Is_Utilised_CC_First_Data_Byte+0x40>

			return (enum Validate)YES;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e00e      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == SYMMETRY_CC){
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b17      	cmp	r3, #23
 80015c0:	d101      	bne.n	80015c6 <Is_Utilised_CC_First_Data_Byte+0x4e>

			return (enum Validate)YES;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e007      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else if(*first_data_byte == PHASE_CC){
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b18      	cmp	r3, #24
 80015ce:	d101      	bne.n	80015d4 <Is_Utilised_CC_First_Data_Byte+0x5c>

			return (enum Validate)YES;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <Is_Utilised_CC_First_Data_Byte+0x5e>
		}
		else{

			return (enum Validate)NO;
 80015d4:	2300      	movs	r3, #0
		}
	}
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}

080015de <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>:

enum Validate Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(volatile uint8_t *first_data_byte, volatile uint8_t *second_data_byte){
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
 80015e6:	6039      	str	r1, [r7, #0]

	if(*first_data_byte == RESET_ALL_CONTROLLERS){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b79      	cmp	r3, #121	@ 0x79
 80015f0:	d108      	bne.n	8001604 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x26>

		if(*second_data_byte == 0){
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d101      	bne.n	8001600 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x22>

			return (enum Validate)YES;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e031      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001600:	2300      	movs	r3, #0
 8001602:	e02f      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == LOCAL_CONTROL){
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b7a      	cmp	r3, #122	@ 0x7a
 800160c:	d10d      	bne.n	800162a <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x4c>

		if((*second_data_byte == 0) || (*second_data_byte == 127)){
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d004      	beq.n	8001622 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x44>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001620:	d101      	bne.n	8001626 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x48>

			return (enum Validate)YES;
 8001622:	2301      	movs	r3, #1
 8001624:	e01e      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001626:	2300      	movs	r3, #0
 8001628:	e01c      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_OFF){
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b7c      	cmp	r3, #124	@ 0x7c
 8001632:	d108      	bne.n	8001646 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x68>

		if((*second_data_byte == 0)){
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x64>

			return (enum Validate)YES;
 800163e:	2301      	movs	r3, #1
 8001640:	e010      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 8001642:	2300      	movs	r3, #0
 8001644:	e00e      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else if(*first_data_byte == OMNI_MODE_ON){
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b7d      	cmp	r3, #125	@ 0x7d
 800164e:	d108      	bne.n	8001662 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x84>

		if((*second_data_byte == 0)){
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x80>

			return (enum Validate)YES;
 800165a:	2301      	movs	r3, #1
 800165c:	e002      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
		else{

			return (enum Validate)NO;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte+0x86>
		}
	}
	else{

		return (enum Validate)NO; //should not even be called if first data byte is always valid
 8001662:	2300      	movs	r3, #0
	}
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <Is_Sysex_Start_Status_Byte>:
	}

	return 1;
}

enum Validate Is_Sysex_Start_Status_Byte(volatile uint8_t *data){
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

	if(*data == (uint8_t)SYSTEM_EXCLUSIVE_START){
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2bf0      	cmp	r3, #240	@ 0xf0
 800167c:	d101      	bne.n	8001682 <Is_Sysex_Start_Status_Byte+0x16>

		return (enum Validate)YES;
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <Is_Sysex_Start_Status_Byte+0x18>
	}
	else{

		return (enum Validate)NO;
 8001682:	2300      	movs	r3, #0
	}
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <Is_Channelised_Status_Byte_On_Basic_Channel>:

		return (enum Validate)NO;
	}
}

enum Validate Is_Channelised_Status_Byte_On_Basic_Channel(volatile uint8_t *data, volatile enum MIDI_Channel MIDI_basic_channel){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	000a      	movs	r2, r1
 8001696:	1cfb      	adds	r3, r7, #3
 8001698:	701a      	strb	r2, [r3, #0]

	uint8_t ch = *data & 0x0F;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	200f      	movs	r0, #15
 80016a2:	183b      	adds	r3, r7, r0
 80016a4:	210f      	movs	r1, #15
 80016a6:	400a      	ands	r2, r1
 80016a8:	701a      	strb	r2, [r3, #0]
	uint8_t b_ch = (uint8_t)MIDI_basic_channel;
 80016aa:	210e      	movs	r1, #14
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	1cfa      	adds	r2, r7, #3
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	701a      	strb	r2, [r3, #0]

	if(ch == b_ch){
 80016b4:	183a      	adds	r2, r7, r0
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	7812      	ldrb	r2, [r2, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d101      	bne.n	80016c4 <Is_Channelised_Status_Byte_On_Basic_Channel+0x38>

		return (enum Validate)YES;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <Is_Channelised_Status_Byte_On_Basic_Channel+0x3a>
	}
	else{

		return (enum Validate)NO;
 80016c4:	2300      	movs	r3, #0
	}
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b004      	add	sp, #16
 80016cc:	bd80      	pop	{r7, pc}

080016ce <Is_Data_Buffer_Empty>:

enum Validate Is_Data_Buffer_Empty(volatile struct MIDI_Data *MIDI_data_struct){
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]

	uint16_t sum = 0;
 80016d6:	230e      	movs	r3, #14
 80016d8:	18fb      	adds	r3, r7, r3
 80016da:	2200      	movs	r2, #0
 80016dc:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 80016de:	230d      	movs	r3, #13
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
 80016e6:	e011      	b.n	800170c <Is_Data_Buffer_Empty+0x3e>

		sum += MIDI_data_struct->MIDI_data_buffer[i];
 80016e8:	200d      	movs	r0, #13
 80016ea:	183b      	adds	r3, r7, r0
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	0019      	movs	r1, r3
 80016f6:	220e      	movs	r2, #14
 80016f8:	18bb      	adds	r3, r7, r2
 80016fa:	18ba      	adds	r2, r7, r2
 80016fc:	8812      	ldrh	r2, [r2, #0]
 80016fe:	188a      	adds	r2, r1, r2
 8001700:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001702:	183b      	adds	r3, r7, r0
 8001704:	781a      	ldrb	r2, [r3, #0]
 8001706:	183b      	adds	r3, r7, r0
 8001708:	3201      	adds	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	230d      	movs	r3, #13
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b09      	cmp	r3, #9
 8001714:	d9e8      	bls.n	80016e8 <Is_Data_Buffer_Empty+0x1a>
	}

	if(sum == 0){
 8001716:	230e      	movs	r3, #14
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <Is_Data_Buffer_Empty+0x56>

		return (enum Validate)YES;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <Is_Data_Buffer_Empty+0x58>
	}
	else{

		return (enum Validate)NO;
 8001724:	2300      	movs	r3, #0
	}
}
 8001726:	0018      	movs	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}

0800172e <Clear_Data_Buffer>:
			return 1;
		}
	}
}

uint8_t Clear_Data_Buffer(volatile struct MIDI_Data *MIDI_data_struct){
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 8001736:	230f      	movs	r3, #15
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e00a      	b.n	8001756 <Clear_Data_Buffer+0x28>

		MIDI_data_struct->MIDI_data_buffer[i] = 0;
 8001740:	200f      	movs	r0, #15
 8001742:	183b      	adds	r3, r7, r0
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	2100      	movs	r1, #0
 800174a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < sizeof(MIDI_data_struct->MIDI_data_buffer); i++){
 800174c:	183b      	adds	r3, r7, r0
 800174e:	781a      	ldrb	r2, [r3, #0]
 8001750:	183b      	adds	r3, r7, r0
 8001752:	3201      	adds	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	230f      	movs	r3, #15
 8001758:	18fb      	adds	r3, r7, r3
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b09      	cmp	r3, #9
 800175e:	d9ef      	bls.n	8001740 <Clear_Data_Buffer+0x12>
	}

	return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b004      	add	sp, #16
 8001768:	bd80      	pop	{r7, pc}

0800176a <Is_Program_Change_Data_Byte_In_Range>:

enum Validate Is_Program_Change_Data_Byte_In_Range(volatile uint8_t *PC_data, uint8_t size_of_factory_or_user_array){
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	000a      	movs	r2, r1
 8001774:	1cfb      	adds	r3, r7, #3
 8001776:	701a      	strb	r2, [r3, #0]

	if(*PC_data < size_of_factory_or_user_array){
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	1cfa      	adds	r2, r7, #3
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d901      	bls.n	800178a <Is_Program_Change_Data_Byte_In_Range+0x20>

		return (enum Validate)YES;
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <Is_Program_Change_Data_Byte_In_Range+0x22>
	}
	else{

		return (enum Validate)NO;
 800178a:	2300      	movs	r3, #0
	}
}
 800178c:	0018      	movs	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	b002      	add	sp, #8
 8001792:	bd80      	pop	{r7, pc}

08001794 <Is_System_Real_Time_Status_Byte>:

enum Validate Is_System_Real_Time_Status_Byte(volatile uint8_t *data){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

	if(*data == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2bf8      	cmp	r3, #248	@ 0xf8
 80017a4:	d101      	bne.n	80017aa <Is_System_Real_Time_Status_Byte+0x16>
		return (enum Validate)YES;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e023      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_START){
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2bfa      	cmp	r3, #250	@ 0xfa
 80017b2:	d101      	bne.n	80017b8 <Is_System_Real_Time_Status_Byte+0x24>
		return (enum Validate)YES;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01c      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_CONTINUE){
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2bfb      	cmp	r3, #251	@ 0xfb
 80017c0:	d101      	bne.n	80017c6 <Is_System_Real_Time_Status_Byte+0x32>
		return (enum Validate)YES;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e015      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_STOP){
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2bfc      	cmp	r3, #252	@ 0xfc
 80017ce:	d101      	bne.n	80017d4 <Is_System_Real_Time_Status_Byte+0x40>
		return (enum Validate)YES;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e00e      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_ACTIVE_SENSING){
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2bfe      	cmp	r3, #254	@ 0xfe
 80017dc:	d101      	bne.n	80017e2 <Is_System_Real_Time_Status_Byte+0x4e>
		return (enum Validate)YES;
 80017de:	2301      	movs	r3, #1
 80017e0:	e007      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else if(*data == SYSTEM_REAL_TIME_RESET){
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2bff      	cmp	r3, #255	@ 0xff
 80017ea:	d101      	bne.n	80017f0 <Is_System_Real_Time_Status_Byte+0x5c>
		return (enum Validate)YES;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <Is_System_Real_Time_Status_Byte+0x5e>
	}
	else{
		return (enum Validate)NO;
 80017f0:	2300      	movs	r3, #0
	}
}
 80017f2:	0018      	movs	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <Is_OMNI_On>:

enum Validate Is_OMNI_On(volatile uint32_t *statuses_ptr){
 80017fa:	b5b0      	push	{r4, r5, r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]

	uint8_t omni_mode = Get_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001802:	250f      	movs	r5, #15
 8001804:	197c      	adds	r4, r7, r5
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0011      	movs	r1, r2
 800180e:	0018      	movs	r0, r3
 8001810:	f005 f864 	bl	80068dc <Get_Status_Bit>
 8001814:	0003      	movs	r3, r0
 8001816:	7023      	strb	r3, [r4, #0]

	if(omni_mode == 1){
 8001818:	197b      	adds	r3, r7, r5
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <Is_OMNI_On+0x2a>

		return (enum Validate)YES;
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <Is_OMNI_On+0x2c>
	}
	else{

		return (enum Validate)NO;
 8001824:	2300      	movs	r3, #0
	}
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b004      	add	sp, #16
 800182c:	bdb0      	pop	{r4, r5, r7, pc}

0800182e <Reset_and_Stop_MIDI_Software_Timer>:

uint8_t Reset_and_Stop_MIDI_Software_Timer(uint32_t *midi_counter_ptr, volatile uint32_t *statuses_ptr){
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
 8001836:	6039      	str	r1, [r7, #0]

	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Is_Running);
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	005a      	lsls	r2, r3, #1
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f005 f871 	bl	8006928 <Clear_Status_Bit>
	Clear_Status_Bit(statuses_ptr, Software_MIDI_Timer_Has_Timed_Out);
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	009a      	lsls	r2, r3, #2
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	0011      	movs	r1, r2
 800184e:	0018      	movs	r0, r3
 8001850:	f005 f86a 	bl	8006928 <Clear_Status_Bit>
	*midi_counter_ptr = 0;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]

	return 1;
 800185a:	2301      	movs	r3, #1
}
 800185c:	0018      	movs	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	b002      	add	sp, #8
 8001862:	bd80      	pop	{r7, pc}

08001864 <Reset_All_Controllers>:

uint8_t Reset_All_Controllers(struct Params *params_ptr, struct Delay_Line* delay_line_ptr){
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800186e:	4b24      	ldr	r3, [pc, #144]	@ (8001900 <Reset_All_Controllers+0x9c>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b22      	ldr	r3, [pc, #136]	@ (8001900 <Reset_All_Controllers+0x9c>)
 8001876:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001878:	4b22      	ldr	r3, [pc, #136]	@ (8001904 <Reset_All_Controllers+0xa0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2da      	uxtb	r2, r3
 800187e:	4b21      	ldr	r3, [pc, #132]	@ (8001904 <Reset_All_Controllers+0xa0>)
 8001880:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <Reset_All_Controllers+0xa4>)
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <Reset_All_Controllers+0xa4>)
 800188a:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800188c:	4b1f      	ldr	r3, [pc, #124]	@ (800190c <Reset_All_Controllers+0xa8>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <Reset_All_Controllers+0xa8>)
 8001894:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001896:	4b1e      	ldr	r3, [pc, #120]	@ (8001910 <Reset_All_Controllers+0xac>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <Reset_All_Controllers+0xac>)
 800189e:	705a      	strb	r2, [r3, #1]

	//Put all pots into CC mode
	waveshape_fsm.current_state = CC_MODE;
 80018a0:	4b17      	ldr	r3, [pc, #92]	@ (8001900 <Reset_All_Controllers+0x9c>)
 80018a2:	2202      	movs	r2, #2
 80018a4:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = CC_MODE;
 80018a6:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <Reset_All_Controllers+0xa0>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = CC_MODE;
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <Reset_All_Controllers+0xa4>)
 80018ae:	2202      	movs	r2, #2
 80018b0:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = CC_MODE;
 80018b2:	4b16      	ldr	r3, [pc, #88]	@ (800190c <Reset_All_Controllers+0xa8>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = CC_MODE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <Reset_All_Controllers+0xac>)
 80018ba:	2202      	movs	r2, #2
 80018bc:	701a      	strb	r2, [r3, #0]

	uint8_t data = 127 >> 1;
 80018be:	230e      	movs	r3, #14
 80018c0:	18fb      	adds	r3, r7, r3
 80018c2:	223f      	movs	r2, #63	@ 0x3f
 80018c4:	701a      	strb	r2, [r3, #0]

	for(uint8_t index = 0; index < NUM_POTS; index++){
 80018c6:	230f      	movs	r3, #15
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	2200      	movs	r2, #0
 80018cc:	701a      	strb	r2, [r3, #0]
 80018ce:	e00c      	b.n	80018ea <Reset_All_Controllers+0x86>

		CC_array[index] = data;
 80018d0:	200f      	movs	r0, #15
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001914 <Reset_All_Controllers+0xb0>)
 80018d8:	210e      	movs	r1, #14
 80018da:	1879      	adds	r1, r7, r1
 80018dc:	7809      	ldrb	r1, [r1, #0]
 80018de:	54d1      	strb	r1, [r2, r3]
	for(uint8_t index = 0; index < NUM_POTS; index++){
 80018e0:	183b      	adds	r3, r7, r0
 80018e2:	781a      	ldrb	r2, [r3, #0]
 80018e4:	183b      	adds	r3, r7, r0
 80018e6:	3201      	adds	r2, #1
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	230f      	movs	r3, #15
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d9ed      	bls.n	80018d0 <Reset_All_Controllers+0x6c>
	}

	return 1;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	0018      	movs	r0, r3
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b004      	add	sp, #16
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			@ (mov r8, r8)
 8001900:	20000438 	.word	0x20000438
 8001904:	20000430 	.word	0x20000430
 8001908:	20000434 	.word	0x20000434
 800190c:	2000043c 	.word	0x2000043c
 8001910:	20000440 	.word	0x20000440
 8001914:	2000057c 	.word	0x2000057c

08001918 <Set_Local_Control>:

uint8_t Set_Local_Control(){
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

	//Store previous states
	waveshape_fsm.prev_state = waveshape_fsm.current_state;
 800191c:	4b15      	ldr	r3, [pc, #84]	@ (8001974 <Set_Local_Control+0x5c>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b14      	ldr	r3, [pc, #80]	@ (8001974 <Set_Local_Control+0x5c>)
 8001924:	705a      	strb	r2, [r3, #1]
	speed_fsm.prev_state.speed_exclusive_state = speed_fsm.current_state.speed_exclusive_state;
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <Set_Local_Control+0x60>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b12      	ldr	r3, [pc, #72]	@ (8001978 <Set_Local_Control+0x60>)
 800192e:	705a      	strb	r2, [r3, #1]
	depth_fsm.prev_state = depth_fsm.current_state;
 8001930:	4b12      	ldr	r3, [pc, #72]	@ (800197c <Set_Local_Control+0x64>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b11      	ldr	r3, [pc, #68]	@ (800197c <Set_Local_Control+0x64>)
 8001938:	705a      	strb	r2, [r3, #1]
	symmetry_fsm.prev_state = symmetry_fsm.current_state;
 800193a:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <Set_Local_Control+0x68>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b0f      	ldr	r3, [pc, #60]	@ (8001980 <Set_Local_Control+0x68>)
 8001942:	705a      	strb	r2, [r3, #1]
	phase_fsm.prev_state = phase_fsm.current_state;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <Set_Local_Control+0x6c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <Set_Local_Control+0x6c>)
 800194c:	705a      	strb	r2, [r3, #1]

	//Put all pots into manual mode
	waveshape_fsm.current_state = MANUAL_MODE;
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <Set_Local_Control+0x5c>)
 8001950:	2201      	movs	r2, #1
 8001952:	701a      	strb	r2, [r3, #0]
	speed_fsm.current_state.speed_exclusive_state = MANUAL_MODE;
 8001954:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <Set_Local_Control+0x60>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
	depth_fsm.current_state = MANUAL_MODE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <Set_Local_Control+0x64>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
	symmetry_fsm.current_state = MANUAL_MODE;
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <Set_Local_Control+0x68>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
	phase_fsm.current_state = MANUAL_MODE;
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <Set_Local_Control+0x6c>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]

	return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000438 	.word	0x20000438
 8001978:	20000430 	.word	0x20000430
 800197c:	20000434 	.word	0x20000434
 8001980:	2000043c 	.word	0x2000043c
 8001984:	20000440 	.word	0x20000440

08001988 <Set_OMNI_Off>:

uint8_t Set_OMNI_Off(volatile uint32_t *statuses_ptr){
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

	//Clear status bit
	Clear_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	00da      	lsls	r2, r3, #3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	0011      	movs	r1, r2
 8001998:	0018      	movs	r0, r3
 800199a:	f004 ffc5 	bl	8006928 <Clear_Status_Bit>

	return 1;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <Set_OMNI_On>:

uint8_t Set_OMNI_On(volatile uint32_t *statuses_ptr){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

	//Set status bit
	Set_Status_Bit(statuses_ptr, MIDI_Channel_Voice_Mode);
 80019b0:	2380      	movs	r3, #128	@ 0x80
 80019b2:	00da      	lsls	r2, r3, #3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	0011      	movs	r1, r2
 80019b8:	0018      	movs	r0, r3
 80019ba:	f004 ffa3 	bl	8006904 <Set_Status_Bit>

	return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	0018      	movs	r0, r3
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b002      	add	sp, #8
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <Start_UART_Receive>:
//VARIABLE DEFINITIONS
volatile uint8_t rx_buffer[1] = {0};
volatile enum Validate UART_DMA_TX_is_complete = YES;

//FUNCTION DEFINITIONS
uint8_t Start_UART_Receive(void){
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

	//START UART RECEIVE
	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 80019cc:	4904      	ldr	r1, [pc, #16]	@ (80019e0 <Start_UART_Receive+0x18>)
 80019ce:	4b05      	ldr	r3, [pc, #20]	@ (80019e4 <Start_UART_Receive+0x1c>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	0018      	movs	r0, r3
 80019d4:	f00b f83e 	bl	800ca54 <HAL_UART_Receive_DMA>

	return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	0018      	movs	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000594 	.word	0x20000594
 80019e4:	20000b00 	.word	0x20000b00

080019e8 <Pot_Check>:
volatile uint8_t symmetry_pot_adc_measurement_num = 0;
volatile uint8_t phase_pot_adc_measurement_num = 0;
volatile uint8_t pots_counter = 0;

//FUNCTION DEFINITIONS
uint8_t Pot_Check(volatile uint16_t* ADCResults_arr, enum Pot_Type pot_type){
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	@ 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	000a      	movs	r2, r1
 80019f2:	1cfb      	adds	r3, r7, #3
 80019f4:	701a      	strb	r2, [r3, #0]
	static uint16_t second_symmetry_measurement;

	static uint16_t first_phase_measurement;
	static uint16_t second_phase_measurement;

	uint16_t *first_measurement_ptr = NULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *second_measurement_ptr = NULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	623b      	str	r3, [r7, #32]
	volatile uint8_t *measurement_num_ptr = NULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
	void *measurement_ptr = NULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
	uint8_t tolerance = 0;
 8001a06:	2117      	movs	r1, #23
 8001a08:	187b      	adds	r3, r7, r1
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
	volatile struct Normal_FSM* normal_fsm_ptr = NULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
	volatile struct Speed_FSM* speed_fsm_ptr = NULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]

	if(pot_type == WAVESHAPE_POT){
 8001a16:	1cfb      	adds	r3, r7, #3
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10d      	bne.n	8001a3a <Pot_Check+0x52>

		first_measurement_ptr = &first_waveshape_measurement;
 8001a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd4 <Pot_Check+0x1ec>)
 8001a20:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_waveshape_measurement;
 8001a22:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd8 <Pot_Check+0x1f0>)
 8001a24:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &waveshape_pot_adc_measurement_num;
 8001a26:	4b6d      	ldr	r3, [pc, #436]	@ (8001bdc <Pot_Check+0x1f4>)
 8001a28:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + WAVESHAPE_ADC_RESULT_INDEX);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	61bb      	str	r3, [r7, #24]
		tolerance = WAVESHAPE_TOLERANCE;
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2246      	movs	r2, #70	@ 0x46
 8001a32:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &waveshape_fsm;
 8001a34:	4b6a      	ldr	r3, [pc, #424]	@ (8001be0 <Pot_Check+0x1f8>)
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e04e      	b.n	8001ad8 <Pot_Check+0xf0>
	}
	else if(pot_type == SPEED_POT){
 8001a3a:	1cfb      	adds	r3, r7, #3
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d10f      	bne.n	8001a62 <Pot_Check+0x7a>

		first_measurement_ptr = &first_speed_measurement;
 8001a42:	4b68      	ldr	r3, [pc, #416]	@ (8001be4 <Pot_Check+0x1fc>)
 8001a44:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_speed_measurement;
 8001a46:	4b68      	ldr	r3, [pc, #416]	@ (8001be8 <Pot_Check+0x200>)
 8001a48:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &speed_pot_adc_measurement_num;
 8001a4a:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <Pot_Check+0x204>)
 8001a4c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SPEED_ADC_RESULT_INDEX);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	3302      	adds	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
		tolerance = SPEED_TOLERANCE;
 8001a54:	2317      	movs	r3, #23
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	2246      	movs	r2, #70	@ 0x46
 8001a5a:	701a      	strb	r2, [r3, #0]
		speed_fsm_ptr = &speed_fsm;
 8001a5c:	4b64      	ldr	r3, [pc, #400]	@ (8001bf0 <Pot_Check+0x208>)
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	e03a      	b.n	8001ad8 <Pot_Check+0xf0>
	}
	else if(pot_type == DEPTH_POT){
 8001a62:	1cfb      	adds	r3, r7, #3
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d10f      	bne.n	8001a8a <Pot_Check+0xa2>

		first_measurement_ptr = &first_depth_measurement;
 8001a6a:	4b62      	ldr	r3, [pc, #392]	@ (8001bf4 <Pot_Check+0x20c>)
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_depth_measurement;
 8001a6e:	4b62      	ldr	r3, [pc, #392]	@ (8001bf8 <Pot_Check+0x210>)
 8001a70:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &depth_pot_adc_measurement_num;
 8001a72:	4b62      	ldr	r3, [pc, #392]	@ (8001bfc <Pot_Check+0x214>)
 8001a74:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DEPTH_ADC_RESULT_INDEX);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	61bb      	str	r3, [r7, #24]
		tolerance = DEPTH_TOLERANCE;
 8001a7c:	2317      	movs	r3, #23
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	2246      	movs	r2, #70	@ 0x46
 8001a82:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &depth_fsm;
 8001a84:	4b5e      	ldr	r3, [pc, #376]	@ (8001c00 <Pot_Check+0x218>)
 8001a86:	613b      	str	r3, [r7, #16]
 8001a88:	e026      	b.n	8001ad8 <Pot_Check+0xf0>
	}
	else if(pot_type == SYMMETRY_POT){
 8001a8a:	1cfb      	adds	r3, r7, #3
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d10f      	bne.n	8001ab2 <Pot_Check+0xca>

		first_measurement_ptr = &first_symmetry_measurement;
 8001a92:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <Pot_Check+0x21c>)
 8001a94:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_symmetry_measurement;
 8001a96:	4b5c      	ldr	r3, [pc, #368]	@ (8001c08 <Pot_Check+0x220>)
 8001a98:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &symmetry_pot_adc_measurement_num;
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c0c <Pot_Check+0x224>)
 8001a9c:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + SYMMETRY_ADC_RESULT_INDEX);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3306      	adds	r3, #6
 8001aa2:	61bb      	str	r3, [r7, #24]
		tolerance = SYMMETRY_TOLERANCE;
 8001aa4:	2317      	movs	r3, #23
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2246      	movs	r2, #70	@ 0x46
 8001aaa:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &symmetry_fsm;
 8001aac:	4b58      	ldr	r3, [pc, #352]	@ (8001c10 <Pot_Check+0x228>)
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e012      	b.n	8001ad8 <Pot_Check+0xf0>
	}
	else if(pot_type == PHASE_POT){
 8001ab2:	1cfb      	adds	r3, r7, #3
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d10e      	bne.n	8001ad8 <Pot_Check+0xf0>

		first_measurement_ptr = &first_phase_measurement;
 8001aba:	4b56      	ldr	r3, [pc, #344]	@ (8001c14 <Pot_Check+0x22c>)
 8001abc:	627b      	str	r3, [r7, #36]	@ 0x24
		second_measurement_ptr = &second_phase_measurement;
 8001abe:	4b56      	ldr	r3, [pc, #344]	@ (8001c18 <Pot_Check+0x230>)
 8001ac0:	623b      	str	r3, [r7, #32]
		measurement_num_ptr = &phase_pot_adc_measurement_num;
 8001ac2:	4b56      	ldr	r3, [pc, #344]	@ (8001c1c <Pot_Check+0x234>)
 8001ac4:	61fb      	str	r3, [r7, #28]
		measurement_ptr = (uint16_t*)(ADCResults_arr + DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3308      	adds	r3, #8
 8001aca:	61bb      	str	r3, [r7, #24]
		tolerance = PHASE_TOLERANCE;
 8001acc:	2317      	movs	r3, #23
 8001ace:	18fb      	adds	r3, r7, r3
 8001ad0:	2246      	movs	r2, #70	@ 0x46
 8001ad2:	701a      	strb	r2, [r3, #0]
		normal_fsm_ptr = &phase_fsm;
 8001ad4:	4b52      	ldr	r3, [pc, #328]	@ (8001c20 <Pot_Check+0x238>)
 8001ad6:	613b      	str	r3, [r7, #16]
	}

	if(*measurement_num_ptr == 0){
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10b      	bne.n	8001afa <Pot_Check+0x112>

		*first_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	881a      	ldrh	r2, [r3, #0]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	801a      	strh	r2, [r3, #0]

			(*measurement_num_ptr)++;
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	3301      	adds	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	701a      	strb	r2, [r3, #0]
 8001af8:	e066      	b.n	8001bc8 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 1){
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d10b      	bne.n	8001b1c <Pot_Check+0x134>

		*second_measurement_ptr = *((uint16_t*)measurement_ptr);
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	881a      	ldrh	r2, [r3, #0]
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	801a      	strh	r2, [r3, #0]

		(*measurement_num_ptr)++;
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	701a      	strb	r2, [r3, #0]
 8001b1a:	e055      	b.n	8001bc8 <Pot_Check+0x1e0>
	}
	else if(*measurement_num_ptr == 2){
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d150      	bne.n	8001bc8 <Pot_Check+0x1e0>

		*measurement_num_ptr = 0;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

		uint16_t diff = 0;
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	183b      	adds	r3, r7, r0
 8001b30:	2200      	movs	r2, #0
 8001b32:	801a      	strh	r2, [r3, #0]

		if(*first_measurement_ptr > *second_measurement_ptr){
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d907      	bls.n	8001b50 <Pot_Check+0x168>

			diff = *first_measurement_ptr - *second_measurement_ptr;
 8001b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b42:	8819      	ldrh	r1, [r3, #0]
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	881a      	ldrh	r2, [r3, #0]
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	1a8a      	subs	r2, r1, r2
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e00d      	b.n	8001b6c <Pot_Check+0x184>

		}
		else if(*second_measurement_ptr > *first_measurement_ptr){
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	881a      	ldrh	r2, [r3, #0]
 8001b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d907      	bls.n	8001b6c <Pot_Check+0x184>

			diff = *second_measurement_ptr - *first_measurement_ptr;
 8001b5c:	6a3b      	ldr	r3, [r7, #32]
 8001b5e:	8819      	ldrh	r1, [r3, #0]
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	881a      	ldrh	r2, [r3, #0]
 8001b64:	230a      	movs	r3, #10
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	1a8a      	subs	r2, r1, r2
 8001b6a:	801a      	strh	r2, [r3, #0]
		/*else{

			diff = 0
		}*/

		if(diff > tolerance){
 8001b6c:	2317      	movs	r3, #23
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	220a      	movs	r2, #10
 8001b76:	18ba      	adds	r2, r7, r2
 8001b78:	8812      	ldrh	r2, [r2, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d924      	bls.n	8001bc8 <Pot_Check+0x1e0>

			if(normal_fsm_ptr != NULL){
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <Pot_Check+0x1ae>

				normal_fsm_ptr->prev_state = normal_fsm_ptr->current_state;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	705a      	strb	r2, [r3, #1]
				normal_fsm_ptr->current_state = MANUAL_MODE;
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2201      	movs	r2, #1
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	e018      	b.n	8001bc8 <Pot_Check+0x1e0>

			}
			else if(speed_fsm_ptr != NULL){
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <Pot_Check+0x1e0>

				speed_fsm_ptr->prev_state = speed_fsm_ptr->current_state;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	705a      	strb	r2, [r3, #1]
				speed_fsm_ptr->current_state.shared_state = MANUAL_MODE;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	701a      	strb	r2, [r3, #0]
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8001baa:	4b1e      	ldr	r3, [pc, #120]	@ (8001c24 <Pot_Check+0x23c>)
 8001bac:	2120      	movs	r1, #32
 8001bae:	0018      	movs	r0, r3
 8001bb0:	f004 feba 	bl	8006928 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <Pot_Check+0x23c>)
 8001bb6:	2140      	movs	r1, #64	@ 0x40
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f004 feb5 	bl	8006928 <Clear_Status_Bit>
				Clear_Status_Bit(&statuses, First_Sync_Complete);
 8001bbe:	4b19      	ldr	r3, [pc, #100]	@ (8001c24 <Pot_Check+0x23c>)
 8001bc0:	2108      	movs	r1, #8
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f004 feb0 	bl	8006928 <Clear_Status_Bit>
			}
		}
	}

	return 1;
 8001bc8:	2301      	movs	r3, #1
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b00a      	add	sp, #40	@ 0x28
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			@ (mov r8, r8)
 8001bd4:	2000059c 	.word	0x2000059c
 8001bd8:	2000059e 	.word	0x2000059e
 8001bdc:	20000595 	.word	0x20000595
 8001be0:	20000438 	.word	0x20000438
 8001be4:	200005a0 	.word	0x200005a0
 8001be8:	200005a2 	.word	0x200005a2
 8001bec:	20000596 	.word	0x20000596
 8001bf0:	20000430 	.word	0x20000430
 8001bf4:	200005a4 	.word	0x200005a4
 8001bf8:	200005a6 	.word	0x200005a6
 8001bfc:	20000597 	.word	0x20000597
 8001c00:	20000434 	.word	0x20000434
 8001c04:	200005a8 	.word	0x200005a8
 8001c08:	200005aa 	.word	0x200005aa
 8001c0c:	20000598 	.word	0x20000598
 8001c10:	2000043c 	.word	0x2000043c
 8001c14:	200005ac 	.word	0x200005ac
 8001c18:	200005ae 	.word	0x200005ae
 8001c1c:	20000599 	.word	0x20000599
 8001c20:	20000440 	.word	0x20000440
 8001c24:	20000cfc 	.word	0x20000cfc

08001c28 <Check_Tap_Tempo_Switch_State>:

uint8_t Check_Tap_Tempo_Switch_State(volatile struct Tap_Tempo_Switch_States *tap_tempo_switch_states_ptr){
 8001c28:	b5b0      	push	{r4, r5, r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

	static uint8_t extend_rising_edge = 0;
	static uint8_t tap_tempo_switch_state_counter = TAP_TEMPO_SWITCH_CONFIDENCE_COUNT;

	uint8_t switch_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8001c30:	250f      	movs	r5, #15
 8001c32:	197c      	adds	r4, r7, r5
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	00da      	lsls	r2, r3, #3
 8001c38:	23a0      	movs	r3, #160	@ 0xa0
 8001c3a:	05db      	lsls	r3, r3, #23
 8001c3c:	0011      	movs	r1, r2
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f007 f898 	bl	8008d74 <HAL_GPIO_ReadPin>
 8001c44:	0003      	movs	r3, r0
 8001c46:	7023      	strb	r3, [r4, #0]

	if(switch_state == 0){
 8001c48:	197b      	adds	r3, r7, r5
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <Check_Tap_Tempo_Switch_State+0x3e>

		if(tap_tempo_switch_state_counter != 0){
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01e      	beq.n	8001c96 <Check_Tap_Tempo_Switch_State+0x6e>

			tap_tempo_switch_state_counter--;
 8001c58:	4b19      	ldr	r3, [pc, #100]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	e017      	b.n	8001c96 <Check_Tap_Tempo_Switch_State+0x6e>
		}
	}
	else{

		if(tap_tempo_switch_state_counter != TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b0e      	cmp	r3, #14
 8001c6c:	d013      	beq.n	8001c96 <Check_Tap_Tempo_Switch_State+0x6e>

			if(extend_rising_edge == COUNT_TO_DELAY_RISING_TAP_TEMPO_EDGE){
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d109      	bne.n	8001c8a <Check_Tap_Tempo_Switch_State+0x62>

				tap_tempo_switch_state_counter++;
 8001c76:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c80:	701a      	strb	r2, [r3, #0]
				extend_rising_edge = 0;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e005      	b.n	8001c96 <Check_Tap_Tempo_Switch_State+0x6e>
			}
			else{
				extend_rising_edge++;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <Check_Tap_Tempo_Switch_State+0x9c>)
 8001c94:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	if(tap_tempo_switch_state_counter == 0){
 8001c96:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d103      	bne.n	8001ca6 <Check_Tap_Tempo_Switch_State+0x7e>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = DEPRESSED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e006      	b.n	8001cb4 <Check_Tap_Tempo_Switch_State+0x8c>
	}
	else if(tap_tempo_switch_state_counter == TAP_TEMPO_SWITCH_CONFIDENCE_COUNT){
 8001ca6:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <Check_Tap_Tempo_Switch_State+0x98>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b0e      	cmp	r3, #14
 8001cac:	d102      	bne.n	8001cb4 <Check_Tap_Tempo_Switch_State+0x8c>

		tap_tempo_switch_states_ptr->tap_tempo_switch_state = NOT_DEPRESSED;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001cbe:	46c0      	nop			@ (mov r8, r8)
 8001cc0:	20000024 	.word	0x20000024
 8001cc4:	200005b0 	.word	0x200005b0

08001cc8 <SystemClock_Config>:

LPTIM_HandleTypeDef hlptim1;

//FUNCTIONS
void SystemClock_Config(void)
{
 8001cc8:	b590      	push	{r4, r7, lr}
 8001cca:	b093      	sub	sp, #76	@ 0x4c
 8001ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cce:	2410      	movs	r4, #16
 8001cd0:	193b      	adds	r3, r7, r4
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	2338      	movs	r3, #56	@ 0x38
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	2100      	movs	r1, #0
 8001cda:	f00c f9dd 	bl	800e098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cde:	003b      	movs	r3, r7
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2310      	movs	r3, #16
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f00c f9d6 	bl	800e098 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f007 fcb1 	bl	8009658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfc:	193b      	adds	r3, r7, r4
 8001cfe:	2280      	movs	r2, #128	@ 0x80
 8001d00:	0052      	lsls	r2, r2, #1
 8001d02:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001d04:	0021      	movs	r1, r4
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2240      	movs	r2, #64	@ 0x40
 8001d10:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d12:	187b      	adds	r3, r7, r1
 8001d14:	2202      	movs	r2, #2
 8001d16:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d18:	187b      	adds	r3, r7, r1
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	2200      	movs	r2, #0
 8001d22:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2208      	movs	r2, #8
 8001d28:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0292      	lsls	r2, r2, #10
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001d32:	187b      	adds	r3, r7, r1
 8001d34:	22c0      	movs	r2, #192	@ 0xc0
 8001d36:	04d2      	lsls	r2, r2, #19
 8001d38:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d3a:	187b      	adds	r3, r7, r1
 8001d3c:	2280      	movs	r2, #128	@ 0x80
 8001d3e:	0592      	lsls	r2, r2, #22
 8001d40:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	0018      	movs	r0, r3
 8001d46:	f007 fcd3 	bl	80096f0 <HAL_RCC_OscConfig>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001d4e:	f000 fdcb 	bl	80028e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d52:	003b      	movs	r3, r7
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d58:	003b      	movs	r3, r7
 8001d5a:	2202      	movs	r2, #2
 8001d5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d5e:	003b      	movs	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d64:	003b      	movs	r3, r7
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d6a:	003b      	movs	r3, r7
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f007 ffd8 	bl	8009d24 <HAL_RCC_ClockConfig>
 8001d74:	1e03      	subs	r3, r0, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001d78:	f000 fdb6 	bl	80028e8 <Error_Handler>
  }
}
 8001d7c:	46c0      	nop			@ (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b013      	add	sp, #76	@ 0x4c
 8001d82:	bd90      	pop	{r4, r7, pc}

08001d84 <MX_ADC1_Init>:

void MX_ADC1_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d8a:	1d3b      	adds	r3, r7, #4
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	230c      	movs	r3, #12
 8001d90:	001a      	movs	r2, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	f00c f980 	bl	800e098 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d98:	4b54      	ldr	r3, [pc, #336]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001d9a:	4a55      	ldr	r2, [pc, #340]	@ (8001ef0 <MX_ADC1_Init+0x16c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d9e:	4b53      	ldr	r3, [pc, #332]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001da0:	2280      	movs	r2, #128	@ 0x80
 8001da2:	05d2      	lsls	r2, r2, #23
 8001da4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001da6:	4b51      	ldr	r3, [pc, #324]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001dac:	4b4f      	ldr	r3, [pc, #316]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001db2:	4b4e      	ldr	r3, [pc, #312]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001db4:	2280      	movs	r2, #128	@ 0x80
 8001db6:	0392      	lsls	r2, r2, #14
 8001db8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001dba:	4b4c      	ldr	r3, [pc, #304]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001dc6:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001dcc:	4b47      	ldr	r3, [pc, #284]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 5;
 8001dd2:	4b46      	ldr	r3, [pc, #280]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001dd8:	4b44      	ldr	r3, [pc, #272]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dda:	2220      	movs	r2, #32
 8001ddc:	2100      	movs	r1, #0
 8001dde:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001de0:	4b42      	ldr	r3, [pc, #264]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001dec:	4b3f      	ldr	r3, [pc, #252]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dee:	222c      	movs	r2, #44	@ 0x2c
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001df4:	4b3d      	ldr	r3, [pc, #244]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001dfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001e00:	4b3a      	ldr	r3, [pc, #232]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001e06:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e08:	223c      	movs	r2, #60	@ 0x3c
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001e0e:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e14:	4b35      	ldr	r3, [pc, #212]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e16:	0018      	movs	r0, r3
 8001e18:	f004 ffb4 	bl	8006d84 <HAL_ADC_Init>
 8001e1c:	1e03      	subs	r3, r0, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001e20:	f000 fd62 	bl	80028e8 <Error_Handler>
  }

  /** Configure Channel 0
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e3a:	0011      	movs	r1, r2
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f005 fb25 	bl	800748c <HAL_ADC_ConfigChannel>
 8001e42:	1e03      	subs	r3, r0, #0
 8001e44:	d001      	beq.n	8001e4a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001e46:	f000 fd4f 	bl	80028e8 <Error_Handler>
  }

  /** Configure Channel 1
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4a29      	ldr	r2, [pc, #164]	@ (8001ef4 <MX_ADC1_Init+0x170>)
 8001e4e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2204      	movs	r2, #4
 8001e54:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e5c:	1d3a      	adds	r2, r7, #4
 8001e5e:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e60:	0011      	movs	r1, r2
 8001e62:	0018      	movs	r0, r3
 8001e64:	f005 fb12 	bl	800748c <HAL_ADC_ConfigChannel>
 8001e68:	1e03      	subs	r3, r0, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8001e6c:	f000 fd3c 	bl	80028e8 <Error_Handler>
  }

  /** Configure Channel 4
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <MX_ADC1_Init+0x174>)
 8001e74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2208      	movs	r2, #8
 8001e7a:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e82:	1d3a      	adds	r2, r7, #4
 8001e84:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001e86:	0011      	movs	r1, r2
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f005 faff 	bl	800748c <HAL_ADC_ConfigChannel>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 8001e92:	f000 fd29 	bl	80028e8 <Error_Handler>
  }

  /** Configure Channel 5
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <MX_ADC1_Init+0x178>)
 8001e9a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ea2:	1d3b      	adds	r3, r7, #4
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea8:	1d3a      	adds	r2, r7, #4
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001eac:	0011      	movs	r1, r2
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f005 faec 	bl	800748c <HAL_ADC_ConfigChannel>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001eb8:	f000 fd16 	bl	80028e8 <Error_Handler>
  }

  /** Configure Channel 6
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <MX_ADC1_Init+0x17c>)
 8001ec0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ece:	1d3a      	adds	r2, r7, #4
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_ADC1_Init+0x168>)
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f005 fad9 	bl	800748c <HAL_ADC_ConfigChannel>
 8001eda:	1e03      	subs	r3, r0, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 8001ede:	f000 fd03 	bl	80028e8 <Error_Handler>
  }
}
 8001ee2:	46c0      	nop			@ (mov r8, r8)
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	200005b4 	.word	0x200005b4
 8001ef0:	40012400 	.word	0x40012400
 8001ef4:	04000002 	.word	0x04000002
 8001ef8:	10000010 	.word	0x10000010
 8001efc:	14000020 	.word	0x14000020
 8001f00:	18000040 	.word	0x18000040

08001f04 <MX_TIM16_Init>:

void MX_TIM16_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b094      	sub	sp, #80	@ 0x50
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f0a:	2334      	movs	r3, #52	@ 0x34
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	0018      	movs	r0, r3
 8001f10:	231c      	movs	r3, #28
 8001f12:	001a      	movs	r2, r3
 8001f14:	2100      	movs	r1, #0
 8001f16:	f00c f8bf 	bl	800e098 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f1a:	003b      	movs	r3, r7
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	2334      	movs	r3, #52	@ 0x34
 8001f20:	001a      	movs	r2, r3
 8001f22:	2100      	movs	r1, #0
 8001f24:	f00c f8b8 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002018 <MX_TIM16_Init+0x114>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001f2e:	4b39      	ldr	r3, [pc, #228]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b37      	ldr	r3, [pc, #220]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8001f3a:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f3c:	22ff      	movs	r2, #255	@ 0xff
 8001f3e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f42:	2280      	movs	r2, #128	@ 0x80
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f4e:	4b31      	ldr	r3, [pc, #196]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f50:	2280      	movs	r2, #128	@ 0x80
 8001f52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f56:	0018      	movs	r0, r3
 8001f58:	f008 fa08 	bl	800a36c <HAL_TIM_Base_Init>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001f60:	f000 fcc2 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8001f64:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001f66:	0018      	movs	r0, r3
 8001f68:	f008 fb06 	bl	800a578 <HAL_TIM_OC_Init>
 8001f6c:	1e03      	subs	r3, r0, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8001f70:	f000 fcba 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f74:	2134      	movs	r1, #52	@ 0x34
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 255;
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	22ff      	movs	r2, #255	@ 0xff
 8001f80:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2200      	movs	r2, #0
 8001f86:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa0:	1879      	adds	r1, r7, r1
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f009 f95a 	bl	800b260 <HAL_TIM_OC_ConfigChannel>
 8001fac:	1e03      	subs	r3, r0, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM16_Init+0xb0>
  {
    Error_Handler();
 8001fb0:	f000 fc9a 	bl	80028e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim16, TIM_CHANNEL_1);
 8001fb4:	4b17      	ldr	r3, [pc, #92]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fc4:	003b      	movs	r3, r7
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fca:	003b      	movs	r3, r7
 8001fcc:	2200      	movs	r2, #0
 8001fce:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd0:	003b      	movs	r3, r7
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fd6:	003b      	movs	r3, r7
 8001fd8:	2200      	movs	r2, #0
 8001fda:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fdc:	003b      	movs	r3, r7
 8001fde:	2200      	movs	r2, #0
 8001fe0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe2:	003b      	movs	r3, r7
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	0192      	lsls	r2, r2, #6
 8001fe8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001fea:	003b      	movs	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ff0:	003b      	movs	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001ff6:	003a      	movs	r2, r7
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <MX_TIM16_Init+0x110>)
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f00a fb55 	bl	800c6ac <HAL_TIMEx_ConfigBreakDeadTime>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <MX_TIM16_Init+0x106>
  {
    Error_Handler();
 8002006:	f000 fc6f 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b014      	add	sp, #80	@ 0x50
 8002010:	bd80      	pop	{r7, pc}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	20000810 	.word	0x20000810
 8002018:	40014400 	.word	0x40014400

0800201c <MX_TIM2_Init>:

void MX_TIM2_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08c      	sub	sp, #48	@ 0x30
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002022:	2320      	movs	r3, #32
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	0018      	movs	r0, r3
 8002028:	2310      	movs	r3, #16
 800202a:	001a      	movs	r2, r3
 800202c:	2100      	movs	r1, #0
 800202e:	f00c f833 	bl	800e098 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002032:	2314      	movs	r3, #20
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	0018      	movs	r0, r3
 8002038:	230c      	movs	r3, #12
 800203a:	001a      	movs	r2, r3
 800203c:	2100      	movs	r1, #0
 800203e:	f00c f82b 	bl	800e098 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	0018      	movs	r0, r3
 8002046:	2310      	movs	r3, #16
 8002048:	001a      	movs	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	f00c f824 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002050:	4b2e      	ldr	r3, [pc, #184]	@ (800210c <MX_TIM2_Init+0xf0>)
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	05d2      	lsls	r2, r2, #23
 8002056:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64 - 1;
 8002058:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <MX_TIM2_Init+0xf0>)
 800205a:	223f      	movs	r2, #63	@ 0x3f
 800205c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b2b      	ldr	r3, [pc, #172]	@ (800210c <MX_TIM2_Init+0xf0>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2097152 - 1;
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <MX_TIM2_Init+0xf0>)
 8002066:	4a2a      	ldr	r2, [pc, #168]	@ (8002110 <MX_TIM2_Init+0xf4>)
 8002068:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800206a:	4b28      	ldr	r3, [pc, #160]	@ (800210c <MX_TIM2_Init+0xf0>)
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	0092      	lsls	r2, r2, #2
 8002070:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002072:	4b26      	ldr	r3, [pc, #152]	@ (800210c <MX_TIM2_Init+0xf0>)
 8002074:	2280      	movs	r2, #128	@ 0x80
 8002076:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002078:	4b24      	ldr	r3, [pc, #144]	@ (800210c <MX_TIM2_Init+0xf0>)
 800207a:	0018      	movs	r0, r3
 800207c:	f008 f976 	bl	800a36c <HAL_TIM_Base_Init>
 8002080:	1e03      	subs	r3, r0, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8002084:	f000 fc30 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002088:	2120      	movs	r1, #32
 800208a:	187b      	adds	r3, r7, r1
 800208c:	2280      	movs	r2, #128	@ 0x80
 800208e:	0152      	lsls	r2, r2, #5
 8002090:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002092:	187a      	adds	r2, r7, r1
 8002094:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <MX_TIM2_Init+0xf0>)
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f009 fae5 	bl	800b668 <HAL_TIM_ConfigClockSource>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80020a2:	f000 fc21 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <MX_TIM2_Init+0xf0>)
 80020a8:	0018      	movs	r0, r3
 80020aa:	f008 fe11 	bl	800acd0 <HAL_TIM_IC_Init>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020b2:	f000 fc19 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020b6:	2114      	movs	r1, #20
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c4:	187a      	adds	r2, r7, r1
 80020c6:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_TIM2_Init+0xf0>)
 80020c8:	0011      	movs	r1, r2
 80020ca:	0018      	movs	r0, r3
 80020cc:	f00a fa86 	bl	800c5dc <HAL_TIMEx_MasterConfigSynchronization>
 80020d0:	1e03      	subs	r3, r0, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80020d4:	f000 fc08 	bl	80028e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	2202      	movs	r2, #2
 80020dc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2201      	movs	r2, #1
 80020e2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 15;
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	220f      	movs	r2, #15
 80020ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80020f0:	1d39      	adds	r1, r7, #4
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <MX_TIM2_Init+0xf0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	0018      	movs	r0, r3
 80020f8:	f009 f912 	bl	800b320 <HAL_TIM_IC_ConfigChannel>
 80020fc:	1e03      	subs	r3, r0, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8002100:	f000 fbf2 	bl	80028e8 <Error_Handler>

  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002104:	46c0      	nop			@ (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b00c      	add	sp, #48	@ 0x30
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200008cc 	.word	0x200008cc
 8002110:	001fffff 	.word	0x001fffff

08002114 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08e      	sub	sp, #56	@ 0x38
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211a:	2328      	movs	r3, #40	@ 0x28
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	0018      	movs	r0, r3
 8002120:	2310      	movs	r3, #16
 8002122:	001a      	movs	r2, r3
 8002124:	2100      	movs	r1, #0
 8002126:	f00b ffb7 	bl	800e098 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212a:	231c      	movs	r3, #28
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	0018      	movs	r0, r3
 8002130:	230c      	movs	r3, #12
 8002132:	001a      	movs	r2, r3
 8002134:	2100      	movs	r1, #0
 8002136:	f00b ffaf 	bl	800e098 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	003b      	movs	r3, r7
 800213c:	0018      	movs	r0, r3
 800213e:	231c      	movs	r3, #28
 8002140:	001a      	movs	r2, r3
 8002142:	2100      	movs	r1, #0
 8002144:	f00b ffa8 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002148:	4b32      	ldr	r3, [pc, #200]	@ (8002214 <MX_TIM3_Init+0x100>)
 800214a:	4a33      	ldr	r2, [pc, #204]	@ (8002218 <MX_TIM3_Init+0x104>)
 800214c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = (64 * 512) - 1;
 800214e:	4b31      	ldr	r3, [pc, #196]	@ (8002214 <MX_TIM3_Init+0x100>)
 8002150:	4a32      	ldr	r2, [pc, #200]	@ (800221c <MX_TIM3_Init+0x108>)
 8002152:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002154:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <MX_TIM3_Init+0x100>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4096 - 1;
 800215a:	4b2e      	ldr	r3, [pc, #184]	@ (8002214 <MX_TIM3_Init+0x100>)
 800215c:	4a30      	ldr	r2, [pc, #192]	@ (8002220 <MX_TIM3_Init+0x10c>)
 800215e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <MX_TIM3_Init+0x100>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002168:	4b2a      	ldr	r3, [pc, #168]	@ (8002214 <MX_TIM3_Init+0x100>)
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800216e:	4b29      	ldr	r3, [pc, #164]	@ (8002214 <MX_TIM3_Init+0x100>)
 8002170:	0018      	movs	r0, r3
 8002172:	f008 f8fb 	bl	800a36c <HAL_TIM_Base_Init>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800217a:	f000 fbb5 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800217e:	2128      	movs	r1, #40	@ 0x28
 8002180:	187b      	adds	r3, r7, r1
 8002182:	2280      	movs	r2, #128	@ 0x80
 8002184:	0152      	lsls	r2, r2, #5
 8002186:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002188:	187a      	adds	r2, r7, r1
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <MX_TIM3_Init+0x100>)
 800218c:	0011      	movs	r1, r2
 800218e:	0018      	movs	r0, r3
 8002190:	f009 fa6a 	bl	800b668 <HAL_TIM_ConfigClockSource>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d001      	beq.n	800219c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002198:	f000 fba6 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800219c:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <MX_TIM3_Init+0x100>)
 800219e:	0018      	movs	r0, r3
 80021a0:	f008 f9ea 	bl	800a578 <HAL_TIM_OC_Init>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80021a8:	f000 fb9e 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ac:	211c      	movs	r1, #28
 80021ae:	187b      	adds	r3, r7, r1
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021ba:	187a      	adds	r2, r7, r1
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <MX_TIM3_Init+0x100>)
 80021be:	0011      	movs	r1, r2
 80021c0:	0018      	movs	r0, r3
 80021c2:	f00a fa0b 	bl	800c5dc <HAL_TIMEx_MasterConfigSynchronization>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80021ca:	f000 fb8d 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80021ce:	003b      	movs	r3, r7
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80021d4:	003b      	movs	r3, r7
 80021d6:	2200      	movs	r2, #0
 80021d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021da:	003b      	movs	r3, r7
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e0:	003b      	movs	r3, r7
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e6:	0039      	movs	r1, r7
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <MX_TIM3_Init+0x100>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	0018      	movs	r0, r3
 80021ee:	f009 f837 	bl	800b260 <HAL_TIM_OC_ConfigChannel>
 80021f2:	1e03      	subs	r3, r0, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80021f6:	f000 fb77 	bl	80028e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <MX_TIM3_Init+0x100>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <MX_TIM3_Init+0x100>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2108      	movs	r1, #8
 8002206:	438a      	bics	r2, r1
 8002208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	46bd      	mov	sp, r7
 800220e:	b00e      	add	sp, #56	@ 0x38
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	20000988 	.word	0x20000988
 8002218:	40000400 	.word	0x40000400
 800221c:	00007fff 	.word	0x00007fff
 8002220:	00000fff 	.word	0x00000fff

08002224 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b09c      	sub	sp, #112	@ 0x70
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800222a:	2360      	movs	r3, #96	@ 0x60
 800222c:	18fb      	adds	r3, r7, r3
 800222e:	0018      	movs	r0, r3
 8002230:	2310      	movs	r3, #16
 8002232:	001a      	movs	r2, r3
 8002234:	2100      	movs	r1, #0
 8002236:	f00b ff2f 	bl	800e098 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223a:	2354      	movs	r3, #84	@ 0x54
 800223c:	18fb      	adds	r3, r7, r3
 800223e:	0018      	movs	r0, r3
 8002240:	230c      	movs	r3, #12
 8002242:	001a      	movs	r2, r3
 8002244:	2100      	movs	r1, #0
 8002246:	f00b ff27 	bl	800e098 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800224a:	2338      	movs	r3, #56	@ 0x38
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	0018      	movs	r0, r3
 8002250:	231c      	movs	r3, #28
 8002252:	001a      	movs	r2, r3
 8002254:	2100      	movs	r1, #0
 8002256:	f00b ff1f 	bl	800e098 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	0018      	movs	r0, r3
 800225e:	2334      	movs	r3, #52	@ 0x34
 8002260:	001a      	movs	r2, r3
 8002262:	2100      	movs	r1, #0
 8002264:	f00b ff18 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002268:	4b5f      	ldr	r3, [pc, #380]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 800226a:	4a60      	ldr	r2, [pc, #384]	@ (80023ec <MX_TIM1_Init+0x1c8>)
 800226c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800226e:	4b5e      	ldr	r3, [pc, #376]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b5c      	ldr	r3, [pc, #368]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024 - 1;
 800227a:	4b5b      	ldr	r3, [pc, #364]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 800227c:	4a5c      	ldr	r2, [pc, #368]	@ (80023f0 <MX_TIM1_Init+0x1cc>)
 800227e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002280:	4b59      	ldr	r3, [pc, #356]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002288:	4b57      	ldr	r3, [pc, #348]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800228e:	4b56      	ldr	r3, [pc, #344]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002290:	2280      	movs	r2, #128	@ 0x80
 8002292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002294:	4b54      	ldr	r3, [pc, #336]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002296:	0018      	movs	r0, r3
 8002298:	f008 f868 	bl	800a36c <HAL_TIM_Base_Init>
 800229c:	1e03      	subs	r3, r0, #0
 800229e:	d001      	beq.n	80022a4 <MX_TIM1_Init+0x80>
  {
    Error_Handler();
 80022a0:	f000 fb22 	bl	80028e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022a4:	2160      	movs	r1, #96	@ 0x60
 80022a6:	187b      	adds	r3, r7, r1
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	0152      	lsls	r2, r2, #5
 80022ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022ae:	187a      	adds	r2, r7, r1
 80022b0:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f009 f9d7 	bl	800b668 <HAL_TIM_ConfigClockSource>
 80022ba:	1e03      	subs	r3, r0, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80022be:	f000 fb13 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022c2:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 80022c4:	0018      	movs	r0, r3
 80022c6:	f008 fbb7 	bl	800aa38 <HAL_TIM_PWM_Init>
 80022ca:	1e03      	subs	r3, r0, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM1_Init+0xae>
  {
    Error_Handler();
 80022ce:	f000 fb0b 	bl	80028e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d2:	2154      	movs	r1, #84	@ 0x54
 80022d4:	187b      	adds	r3, r7, r1
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022da:	187b      	adds	r3, r7, r1
 80022dc:	2200      	movs	r2, #0
 80022de:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e0:	187b      	adds	r3, r7, r1
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022e6:	187a      	adds	r2, r7, r1
 80022e8:	4b3f      	ldr	r3, [pc, #252]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f00a f975 	bl	800c5dc <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	1e03      	subs	r3, r0, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80022f6:	f000 faf7 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fa:	2138      	movs	r1, #56	@ 0x38
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	2260      	movs	r2, #96	@ 0x60
 8002300:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002302:	187b      	adds	r3, r7, r1
 8002304:	2200      	movs	r2, #0
 8002306:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002308:	187b      	adds	r3, r7, r1
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002314:	187b      	adds	r3, r7, r1
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800231a:	187b      	adds	r3, r7, r1
 800231c:	2200      	movs	r2, #0
 800231e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002326:	1879      	adds	r1, r7, r1
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 800232a:	2204      	movs	r2, #4
 800232c:	0018      	movs	r0, r3
 800232e:	f009 f89b 	bl	800b468 <HAL_TIM_PWM_ConfigChannel>
 8002332:	1e03      	subs	r3, r0, #0
 8002334:	d001      	beq.n	800233a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8002336:	f000 fad7 	bl	80028e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_2);
 800233a:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699a      	ldr	r2, [r3, #24]
 8002340:	4b29      	ldr	r3, [pc, #164]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	492b      	ldr	r1, [pc, #172]	@ (80023f4 <MX_TIM1_Init+0x1d0>)
 8002346:	400a      	ands	r2, r1
 8002348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234a:	2338      	movs	r3, #56	@ 0x38
 800234c:	18f9      	adds	r1, r7, r3
 800234e:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002350:	220c      	movs	r2, #12
 8002352:	0018      	movs	r0, r3
 8002354:	f009 f888 	bl	800b468 <HAL_TIM_PWM_ConfigChannel>
 8002358:	1e03      	subs	r3, r0, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 800235c:	f000 fac4 	bl	80028e8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_4);
 8002360:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4922      	ldr	r1, [pc, #136]	@ (80023f4 <MX_TIM1_Init+0x1d0>)
 800236c:	400a      	ands	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	2200      	movs	r2, #0
 800237a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	2200      	movs	r2, #0
 8002386:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002388:	1d3b      	adds	r3, r7, #4
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2280      	movs	r2, #128	@ 0x80
 8002392:	0192      	lsls	r2, r2, #6
 8002394:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800239c:	1d3b      	adds	r3, r7, #4
 800239e:	2200      	movs	r2, #0
 80023a0:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2280      	movs	r2, #128	@ 0x80
 80023ac:	0492      	lsls	r2, r2, #18
 80023ae:	625a      	str	r2, [r3, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	2200      	movs	r2, #0
 80023b4:	629a      	str	r2, [r3, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023c2:	1d3a      	adds	r2, r7, #4
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 80023c6:	0011      	movs	r1, r2
 80023c8:	0018      	movs	r0, r3
 80023ca:	f00a f96f 	bl	800c6ac <HAL_TIMEx_ConfigBreakDeadTime>
 80023ce:	1e03      	subs	r3, r0, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM1_Init+0x1b2>
  {
    Error_Handler();
 80023d2:	f000 fa89 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <MX_TIM1_Init+0x1c4>)
 80023d8:	0018      	movs	r0, r3
 80023da:	f003 fc2b 	bl	8005c34 <HAL_TIM_MspPostInit>

}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b01c      	add	sp, #112	@ 0x70
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	20000a44 	.word	0x20000a44
 80023ec:	40012c00 	.word	0x40012c00
 80023f0:	000003ff 	.word	0x000003ff
 80023f4:	fffff7ff 	.word	0xfffff7ff

080023f8 <MX_TIM17_Init>:

void MX_TIM17_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b094      	sub	sp, #80	@ 0x50
 80023fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023fe:	2334      	movs	r3, #52	@ 0x34
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	0018      	movs	r0, r3
 8002404:	231c      	movs	r3, #28
 8002406:	001a      	movs	r2, r3
 8002408:	2100      	movs	r1, #0
 800240a:	f00b fe45 	bl	800e098 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800240e:	003b      	movs	r3, r7
 8002410:	0018      	movs	r0, r3
 8002412:	2334      	movs	r3, #52	@ 0x34
 8002414:	001a      	movs	r2, r3
 8002416:	2100      	movs	r1, #0
 8002418:	f00b fe3e 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800241c:	4b3a      	ldr	r3, [pc, #232]	@ (8002508 <MX_TIM17_Init+0x110>)
 800241e:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <MX_TIM17_Init+0x114>)
 8002420:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = (512*64)- 1;
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <MX_TIM17_Init+0x110>)
 8002424:	4a3a      	ldr	r2, [pc, #232]	@ (8002510 <MX_TIM17_Init+0x118>)
 8002426:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002428:	4b37      	ldr	r3, [pc, #220]	@ (8002508 <MX_TIM17_Init+0x110>)
 800242a:	2200      	movs	r2, #0
 800242c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024 - 1;
 800242e:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <MX_TIM17_Init+0x110>)
 8002430:	4a38      	ldr	r2, [pc, #224]	@ (8002514 <MX_TIM17_Init+0x11c>)
 8002432:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8002434:	4b34      	ldr	r3, [pc, #208]	@ (8002508 <MX_TIM17_Init+0x110>)
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800243c:	4b32      	ldr	r3, [pc, #200]	@ (8002508 <MX_TIM17_Init+0x110>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002442:	4b31      	ldr	r3, [pc, #196]	@ (8002508 <MX_TIM17_Init+0x110>)
 8002444:	2280      	movs	r2, #128	@ 0x80
 8002446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002448:	4b2f      	ldr	r3, [pc, #188]	@ (8002508 <MX_TIM17_Init+0x110>)
 800244a:	0018      	movs	r0, r3
 800244c:	f007 ff8e 	bl	800a36c <HAL_TIM_Base_Init>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d001      	beq.n	8002458 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002454:	f000 fa48 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim17) != HAL_OK)
 8002458:	4b2b      	ldr	r3, [pc, #172]	@ (8002508 <MX_TIM17_Init+0x110>)
 800245a:	0018      	movs	r0, r3
 800245c:	f008 f88c 	bl	800a578 <HAL_TIM_OC_Init>
 8002460:	1e03      	subs	r3, r0, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002464:	f000 fa40 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002468:	2134      	movs	r1, #52	@ 0x34
 800246a:	187b      	adds	r3, r7, r1
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 512 - 1;
 8002470:	187b      	adds	r3, r7, r1
 8002472:	4a29      	ldr	r2, [pc, #164]	@ (8002518 <MX_TIM17_Init+0x120>)
 8002474:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002476:	187b      	adds	r3, r7, r1
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002488:	187b      	adds	r3, r7, r1
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800248e:	187b      	adds	r3, r7, r1
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002494:	1879      	adds	r1, r7, r1
 8002496:	4b1c      	ldr	r3, [pc, #112]	@ (8002508 <MX_TIM17_Init+0x110>)
 8002498:	2200      	movs	r2, #0
 800249a:	0018      	movs	r0, r3
 800249c:	f008 fee0 	bl	800b260 <HAL_TIM_OC_ConfigChannel>
 80024a0:	1e03      	subs	r3, r0, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM17_Init+0xb0>
  {
    Error_Handler();
 80024a4:	f000 fa20 	bl	80028e8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim17, TIM_CHANNEL_1);
 80024a8:	4b17      	ldr	r3, [pc, #92]	@ (8002508 <MX_TIM17_Init+0x110>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	699a      	ldr	r2, [r3, #24]
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <MX_TIM17_Init+0x110>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2108      	movs	r1, #8
 80024b4:	430a      	orrs	r2, r1
 80024b6:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024b8:	003b      	movs	r3, r7
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024be:	003b      	movs	r3, r7
 80024c0:	2200      	movs	r2, #0
 80024c2:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024c4:	003b      	movs	r3, r7
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024ca:	003b      	movs	r3, r7
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d0:	003b      	movs	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024d6:	003b      	movs	r3, r7
 80024d8:	2280      	movs	r2, #128	@ 0x80
 80024da:	0192      	lsls	r2, r2, #6
 80024dc:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024de:	003b      	movs	r3, r7
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024e4:	003b      	movs	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80024ea:	003a      	movs	r2, r7
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <MX_TIM17_Init+0x110>)
 80024ee:	0011      	movs	r1, r2
 80024f0:	0018      	movs	r0, r3
 80024f2:	f00a f8db 	bl	800c6ac <HAL_TIMEx_ConfigBreakDeadTime>
 80024f6:	1e03      	subs	r3, r0, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM17_Init+0x106>
  {
    Error_Handler();
 80024fa:	f000 f9f5 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b014      	add	sp, #80	@ 0x50
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	20000754 	.word	0x20000754
 800250c:	40014800 	.word	0x40014800
 8002510:	00007fff 	.word	0x00007fff
 8002514:	000003ff 	.word	0x000003ff
 8002518:	000001ff 	.word	0x000001ff

0800251c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPTIM1_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002520:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002522:	4a18      	ldr	r2, [pc, #96]	@ (8002584 <MX_LPTIM1_Init+0x68>)
 8002524:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002526:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002528:	2200      	movs	r2, #0
 800252a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 800252e:	22e0      	movs	r2, #224	@ 0xe0
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002534:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002536:	4a14      	ldr	r2, [pc, #80]	@ (8002588 <MX_LPTIM1_Init+0x6c>)
 8002538:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_ENDOFPERIOD;
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002542:	2280      	movs	r2, #128	@ 0x80
 8002544:	03d2      	lsls	r2, r2, #15
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002548:	4b0d      	ldr	r3, [pc, #52]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800254e:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002550:	2200      	movs	r2, #0
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002554:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800255a:	4b09      	ldr	r3, [pc, #36]	@ (8002580 <MX_LPTIM1_Init+0x64>)
 800255c:	0018      	movs	r0, r3
 800255e:	f006 fc6d 	bl	8008e3c <HAL_LPTIM_Init>
 8002562:	1e03      	subs	r3, r0, #0
 8002564:	d001      	beq.n	800256a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002566:	f000 f9bf 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

  HAL_NVIC_SetPriority(LPTIM1_IRQn, 2, 2);
 800256a:	2202      	movs	r2, #2
 800256c:	2102      	movs	r1, #2
 800256e:	2011      	movs	r0, #17
 8002570:	f005 fd96 	bl	80080a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002574:	2011      	movs	r0, #17
 8002576:	f005 fda8 	bl	80080ca <HAL_NVIC_EnableIRQ>
}
 800257a:	46c0      	nop			@ (mov r8, r8)
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000c84 	.word	0x20000c84
 8002584:	40007c00 	.word	0x40007c00
 8002588:	0000ffff 	.word	0x0000ffff

0800258c <MX_TIM14_Init>:

void MX_TIM14_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b088      	sub	sp, #32
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	0018      	movs	r0, r3
 8002596:	231c      	movs	r3, #28
 8002598:	001a      	movs	r2, r3
 800259a:	2100      	movs	r1, #0
 800259c:	f00b fd7c 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80025a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025a2:	4a20      	ldr	r2, [pc, #128]	@ (8002624 <MX_TIM14_Init+0x98>)
 80025a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = (512 * 64) - 1;
 80025a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002628 <MX_TIM14_Init+0x9c>)
 80025aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = led_blink_period;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <MX_TIM14_Init+0xa0>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025bc:	2280      	movs	r2, #128	@ 0x80
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80025c8:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025ca:	0018      	movs	r0, r3
 80025cc:	f007 fece 	bl	800a36c <HAL_TIM_Base_Init>
 80025d0:	1e03      	subs	r3, r0, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 80025d4:	f000 f988 	bl	80028e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80025d8:	4b11      	ldr	r3, [pc, #68]	@ (8002620 <MX_TIM14_Init+0x94>)
 80025da:	0018      	movs	r0, r3
 80025dc:	f007 ffcc 	bl	800a578 <HAL_TIM_OC_Init>
 80025e0:	1e03      	subs	r3, r0, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 80025e4:	f000 f980 	bl	80028e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = led_blink_period - 1;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	@ (800262c <MX_TIM14_Init+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1e5a      	subs	r2, r3, #1
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025f8:	1d3b      	adds	r3, r7, #4
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002604:	1d39      	adds	r1, r7, #4
 8002606:	4b06      	ldr	r3, [pc, #24]	@ (8002620 <MX_TIM14_Init+0x94>)
 8002608:	2200      	movs	r2, #0
 800260a:	0018      	movs	r0, r3
 800260c:	f008 fe28 	bl	800b260 <HAL_TIM_OC_ConfigChannel>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d001      	beq.n	8002618 <MX_TIM14_Init+0x8c>
  {
    Error_Handler();
 8002614:	f000 f968 	bl	80028e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b008      	add	sp, #32
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000698 	.word	0x20000698
 8002624:	40002000 	.word	0x40002000
 8002628:	00007fff 	.word	0x00007fff
 800262c:	20000020 	.word	0x20000020

08002630 <MX_USART2_UART_Init>:

void MX_USART2_UART_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 8002634:	4b15      	ldr	r3, [pc, #84]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002636:	4a16      	ldr	r2, [pc, #88]	@ (8002690 <MX_USART2_UART_Init+0x60>)
 8002638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 800263a:	4b14      	ldr	r3, [pc, #80]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 800263c:	4a15      	ldr	r2, [pc, #84]	@ (8002694 <MX_USART2_UART_Init+0x64>)
 800263e:	605a      	str	r2, [r3, #4]
  //huart2.Init.BaudRate = 57600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002646:	4b11      	ldr	r3, [pc, #68]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002648:	2200      	movs	r2, #0
 800264a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800264c:	4b0f      	ldr	r3, [pc, #60]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 800264e:	2200      	movs	r2, #0
 8002650:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002652:	4b0e      	ldr	r3, [pc, #56]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002654:	220c      	movs	r2, #12
 8002656:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002658:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800265e:	4b0b      	ldr	r3, [pc, #44]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002664:	4b09      	ldr	r3, [pc, #36]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002666:	2200      	movs	r2, #0
 8002668:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800266a:	4b08      	ldr	r3, [pc, #32]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 800266c:	2200      	movs	r2, #0
 800266e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002670:	4b06      	ldr	r3, [pc, #24]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002676:	4b05      	ldr	r3, [pc, #20]	@ (800268c <MX_USART2_UART_Init+0x5c>)
 8002678:	0018      	movs	r0, r3
 800267a:	f00a f8d3 	bl	800c824 <HAL_UART_Init>
 800267e:	1e03      	subs	r3, r0, #0
 8002680:	d001      	beq.n	8002686 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8002682:	f000 f931 	bl	80028e8 <Error_Handler>
  }
}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000b00 	.word	0x20000b00
 8002690:	40004400 	.word	0x40004400
 8002694:	00007a12 	.word	0x00007a12

08002698 <MX_DMA_Init>:
    Error_Handler();
  }
}

void MX_DMA_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <MX_DMA_Init+0x48>)
 80026a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026a2:	4b0f      	ldr	r3, [pc, #60]	@ (80026e0 <MX_DMA_Init+0x48>)
 80026a4:	2101      	movs	r1, #1
 80026a6:	430a      	orrs	r2, r1
 80026a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80026aa:	4b0d      	ldr	r3, [pc, #52]	@ (80026e0 <MX_DMA_Init+0x48>)
 80026ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	607b      	str	r3, [r7, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */ // - ADC
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026b6:	2200      	movs	r2, #0
 80026b8:	2100      	movs	r1, #0
 80026ba:	2009      	movs	r0, #9
 80026bc:	f005 fcf0 	bl	80080a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026c0:	2009      	movs	r0, #9
 80026c2:	f005 fd02 	bl	80080ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */ // - UART RX is ch2, TX is ch3
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 2, 2);
 80026c6:	2202      	movs	r2, #2
 80026c8:	2102      	movs	r1, #2
 80026ca:	200a      	movs	r0, #10
 80026cc:	f005 fce8 	bl	80080a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80026d0:	200a      	movs	r0, #10
 80026d2:	f005 fcfa 	bl	80080ca <HAL_NVIC_EnableIRQ>

}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	46bd      	mov	sp, r7
 80026da:	b002      	add	sp, #8
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	46c0      	nop			@ (mov r8, r8)
 80026e0:	40021000 	.word	0x40021000

080026e4 <MX_GPIO_Init>:


void MX_GPIO_Init(void)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b08b      	sub	sp, #44	@ 0x2c
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	2414      	movs	r4, #20
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	0018      	movs	r0, r3
 80026f0:	2314      	movs	r3, #20
 80026f2:	001a      	movs	r2, r3
 80026f4:	2100      	movs	r1, #0
 80026f6:	f00b fccf 	bl	800e098 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b77      	ldr	r3, [pc, #476]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 80026fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fe:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002700:	2104      	movs	r1, #4
 8002702:	430a      	orrs	r2, r1
 8002704:	635a      	str	r2, [r3, #52]	@ 0x34
 8002706:	4b74      	ldr	r3, [pc, #464]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800270a:	2204      	movs	r2, #4
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002712:	4b71      	ldr	r3, [pc, #452]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002716:	4b70      	ldr	r3, [pc, #448]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002718:	2120      	movs	r1, #32
 800271a:	430a      	orrs	r2, r1
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34
 800271e:	4b6e      	ldr	r3, [pc, #440]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002722:	2220      	movs	r2, #32
 8002724:	4013      	ands	r3, r2
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	4b6b      	ldr	r3, [pc, #428]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 800272c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800272e:	4b6a      	ldr	r3, [pc, #424]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002730:	2101      	movs	r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	635a      	str	r2, [r3, #52]	@ 0x34
 8002736:	4b68      	ldr	r3, [pc, #416]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273a:	2201      	movs	r2, #1
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4b65      	ldr	r3, [pc, #404]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002744:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002746:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002748:	2102      	movs	r1, #2
 800274a:	430a      	orrs	r2, r1
 800274c:	635a      	str	r2, [r3, #52]	@ 0x34
 800274e:	4b62      	ldr	r3, [pc, #392]	@ (80028d8 <MX_GPIO_Init+0x1f4>)
 8002750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002752:	2202      	movs	r2, #2
 8002754:	4013      	ands	r3, r2
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  /*HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, GPIO_PIN_RESET);*/

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800275a:	4b60      	ldr	r3, [pc, #384]	@ (80028dc <MX_GPIO_Init+0x1f8>)
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	@ 0x40
 8002760:	0018      	movs	r0, r3
 8002762:	f006 fb24 	bl	8008dae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : T_NRST_Pin */
  GPIO_InitStruct.Pin = T_NRST_Pin;
 8002766:	193b      	adds	r3, r7, r4
 8002768:	2204      	movs	r2, #4
 800276a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800276c:	193b      	adds	r3, r7, r4
 800276e:	2288      	movs	r2, #136	@ 0x88
 8002770:	0352      	lsls	r2, r2, #13
 8002772:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	193b      	adds	r3, r7, r4
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800277a:	193b      	adds	r3, r7, r4
 800277c:	4a58      	ldr	r2, [pc, #352]	@ (80028e0 <MX_GPIO_Init+0x1fc>)
 800277e:	0019      	movs	r1, r3
 8002780:	0010      	movs	r0, r2
 8002782:	f006 f993 	bl	8008aac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_OUT_Pin */
  GPIO_InitStruct.Pin = SW_OUT_Pin;
 8002786:	0021      	movs	r1, r4
 8002788:	193b      	adds	r3, r7, r4
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	000c      	movs	r4, r1
 8002792:	193b      	adds	r3, r7, r4
 8002794:	2201      	movs	r2, #1
 8002796:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	193b      	adds	r3, r7, r4
 800279a:	2200      	movs	r2, #0
 800279c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	193b      	adds	r3, r7, r4
 80027a0:	2200      	movs	r2, #0
 80027a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SW_OUT_GPIO_Port, &GPIO_InitStruct);
 80027a4:	193a      	adds	r2, r7, r4
 80027a6:	23a0      	movs	r3, #160	@ 0xa0
 80027a8:	05db      	lsls	r3, r3, #23
 80027aa:	0011      	movs	r1, r2
 80027ac:	0018      	movs	r0, r3
 80027ae:	f006 f97d 	bl	8008aac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80027b2:	193b      	adds	r3, r7, r4
 80027b4:	2240      	movs	r2, #64	@ 0x40
 80027b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b8:	193b      	adds	r3, r7, r4
 80027ba:	2201      	movs	r2, #1
 80027bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	193b      	adds	r3, r7, r4
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80027ca:	193b      	adds	r3, r7, r4
 80027cc:	4a43      	ldr	r2, [pc, #268]	@ (80028dc <MX_GPIO_Init+0x1f8>)
 80027ce:	0019      	movs	r1, r3
 80027d0:	0010      	movs	r0, r2
 80027d2:	f006 f96b 	bl	8008aac <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_IN_Pin */
  GPIO_InitStruct.Pin = SW_IN_Pin;
 80027d6:	193b      	adds	r3, r7, r4
 80027d8:	2280      	movs	r2, #128	@ 0x80
 80027da:	00d2      	lsls	r2, r2, #3
 80027dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	2200      	movs	r2, #0
 80027e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027e4:	193b      	adds	r3, r7, r4
 80027e6:	2201      	movs	r2, #1
 80027e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW_IN_GPIO_Port, &GPIO_InitStruct);
 80027ea:	193a      	adds	r2, r7, r4
 80027ec:	23a0      	movs	r3, #160	@ 0xa0
 80027ee:	05db      	lsls	r3, r3, #23
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f006 f95a 	bl	8008aac <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_Pin;
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	2240      	movs	r2, #64	@ 0x40
 80027fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fe:	193b      	adds	r3, r7, r4
 8002800:	2201      	movs	r2, #1
 8002802:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	193b      	adds	r3, r7, r4
 8002806:	2200      	movs	r2, #0
 8002808:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	193b      	adds	r3, r7, r4
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 8002810:	193b      	adds	r3, r7, r4
 8002812:	4a34      	ldr	r2, [pc, #208]	@ (80028e4 <MX_GPIO_Init+0x200>)
 8002814:	0019      	movs	r1, r3
 8002816:	0010      	movs	r0, r2
 8002818:	f006 f948 	bl	8008aac <HAL_GPIO_Init>

  //Configure general monitoring pin
  GPIO_InitStruct.Pin = MONITOR_2_Pin;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2210      	movs	r2, #16
 8002820:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	193b      	adds	r3, r7, r4
 8002824:	2201      	movs	r2, #1
 8002826:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	193b      	adds	r3, r7, r4
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282e:	193b      	adds	r3, r7, r4
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_2_GPIO_Port, &GPIO_InitStruct);
 8002834:	193b      	adds	r3, r7, r4
 8002836:	4a2b      	ldr	r2, [pc, #172]	@ (80028e4 <MX_GPIO_Init+0x200>)
 8002838:	0019      	movs	r1, r3
 800283a:	0010      	movs	r0, r2
 800283c:	f006 f936 	bl	8008aac <HAL_GPIO_Init>

  //Configure CLK IN Pin - i.e. dedicated clock inputs to use this pin rather than the Tap-tempo switch debouncing SW IN pin
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002840:	0021      	movs	r1, r4
 8002842:	187b      	adds	r3, r7, r1
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002848:	187b      	adds	r3, r7, r1
 800284a:	22c4      	movs	r2, #196	@ 0xc4
 800284c:	0392      	lsls	r2, r2, #14
 800284e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN; //seems to improve stuff for CLK IN??
 8002850:	000c      	movs	r4, r1
 8002852:	193b      	adds	r3, r7, r4
 8002854:	2202      	movs	r2, #2
 8002856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	193b      	adds	r3, r7, r4
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MONITOR_GPIO_Port, &GPIO_InitStruct);
 800285e:	193b      	adds	r3, r7, r4
 8002860:	4a20      	ldr	r2, [pc, #128]	@ (80028e4 <MX_GPIO_Init+0x200>)
 8002862:	0019      	movs	r1, r3
 8002864:	0010      	movs	r0, r2
 8002866:	f006 f921 	bl	8008aac <HAL_GPIO_Init>

  //Configure hacked on pot high leg -> i.e. it is to be set high
  GPIO_InitStruct.Pin = HACK_POT_HIGH_Pin;
 800286a:	0021      	movs	r1, r4
 800286c:	187b      	adds	r3, r7, r1
 800286e:	2280      	movs	r2, #128	@ 0x80
 8002870:	0152      	lsls	r2, r2, #5
 8002872:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002874:	000c      	movs	r4, r1
 8002876:	193b      	adds	r3, r7, r4
 8002878:	2201      	movs	r2, #1
 800287a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	193b      	adds	r3, r7, r4
 800287e:	2200      	movs	r2, #0
 8002880:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002882:	193b      	adds	r3, r7, r4
 8002884:	2200      	movs	r2, #0
 8002886:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_HIGH_GPIO_Port, &GPIO_InitStruct);
 8002888:	193a      	adds	r2, r7, r4
 800288a:	23a0      	movs	r3, #160	@ 0xa0
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	0011      	movs	r1, r2
 8002890:	0018      	movs	r0, r3
 8002892:	f006 f90b 	bl	8008aac <HAL_GPIO_Init>

  //Configure hacked on pot low leg -> i.e. it is to be set low
  GPIO_InitStruct.Pin = HACK_POT_LOW_Pin;
 8002896:	0021      	movs	r1, r4
 8002898:	187b      	adds	r3, r7, r1
 800289a:	2280      	movs	r2, #128	@ 0x80
 800289c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	2201      	movs	r2, #1
 80028a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	2200      	movs	r2, #0
 80028a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	187b      	adds	r3, r7, r1
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HACK_POT_LOW_GPIO_Port, &GPIO_InitStruct);
 80028b0:	187a      	adds	r2, r7, r1
 80028b2:	23a0      	movs	r3, #160	@ 0xa0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	0011      	movs	r1, r2
 80028b8:	0018      	movs	r0, r3
 80028ba:	f006 f8f7 	bl	8008aac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 2);
 80028be:	2202      	movs	r2, #2
 80028c0:	2102      	movs	r1, #2
 80028c2:	2007      	movs	r0, #7
 80028c4:	f005 fbec 	bl	80080a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80028c8:	2007      	movs	r0, #7
 80028ca:	f005 fbfe 	bl	80080ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028ce:	46c0      	nop			@ (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b00b      	add	sp, #44	@ 0x2c
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	40021000 	.word	0x40021000
 80028dc:	50000800 	.word	0x50000800
 80028e0:	50001400 	.word	0x50001400
 80028e4:	50000400 	.word	0x50000400

080028e8 <Error_Handler>:

void Error_Handler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028ec:	b672      	cpsid	i
}
 80028ee:	46c0      	nop			@ (mov r8, r8)
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028f0:	46c0      	nop			@ (mov r8, r8)
 80028f2:	e7fd      	b.n	80028f0 <Error_Handler+0x8>

080028f4 <System_Init>:
  {

  }
}

void System_Init(void){
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028f8:	f004 f854 	bl	80069a4 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 80028fc:	f7ff f9e4 	bl	8001cc8 <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002900:	f7ff fef0 	bl	80026e4 <MX_GPIO_Init>
	MX_DMA_Init();
 8002904:	f7ff fec8 	bl	8002698 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8002908:	f7ff fe92 	bl	8002630 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 800290c:	f7ff fa3a 	bl	8001d84 <MX_ADC1_Init>
	MX_TIM16_Init(); //Frequency Gen.
 8002910:	f7ff faf8 	bl	8001f04 <MX_TIM16_Init>
	MX_TIM2_Init(); //I/P Capture Measurement is TIM2_ch1
 8002914:	f7ff fb82 	bl	800201c <MX_TIM2_Init>
	MX_TIM3_Init(); //I/P Capture Measurement Re-Elapse is TIM3_ch1
 8002918:	f7ff fbfc 	bl	8002114 <MX_TIM3_Init>
	MX_TIM1_Init(); //PWM Gen. Main/Secondary Oscillator on ch2/ch4
 800291c:	f7ff fc82 	bl	8002224 <MX_TIM1_Init>
	MX_TIM17_Init();
 8002920:	f7ff fd6a 	bl	80023f8 <MX_TIM17_Init>
	MX_TIM14_Init();
 8002924:	f7ff fe32 	bl	800258c <MX_TIM14_Init>
	//MX_IWDG_Init(); fucks up stuff - to be config'd
	MX_LPTIM1_Init(); //Tap Tempo checking/debouncing timer
 8002928:	f7ff fdf8 	bl	800251c <MX_LPTIM1_Init>

	//Calibrate ADC - DO NOT MOVE TO BEFORE OTHER CONFIG ABOVE
	HAL_ADCEx_Calibration_Start(&hadc1);
 800292c:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <System_Init+0xc0>)
 800292e:	0018      	movs	r0, r3
 8002930:	f005 f9d4 	bl	8007cdc <HAL_ADCEx_Calibration_Start>

	//Set custom callback function for TIM16 (freq. gen.) to the callback function in TIMx_callback.c for TIM16.
	//I believe the correct CallbackID is HAL_TIM_OC_DELAY_ELAPSED_CB_ID, but if this doesn't work maybe
	//HAL_TIM_PERIOD_ELAPSED_CB_ID will work. This should be basically the same because we've set up TIM16
	//in Output Compare mode, where the ARR and CRR are the same.
	HAL_TIM_RegisterCallback(&htim16, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM16_callback);
 8002934:	4a20      	ldr	r2, [pc, #128]	@ (80029b8 <System_Init+0xc4>)
 8002936:	4b21      	ldr	r3, [pc, #132]	@ (80029bc <System_Init+0xc8>)
 8002938:	210e      	movs	r1, #14
 800293a:	0018      	movs	r0, r3
 800293c:	f008 ffee 	bl	800b91c <HAL_TIM_RegisterCallback>

	//Set custom callback function for ADC (DMA) conversion complete.
	HAL_ADC_RegisterCallback(&hadc1, HAL_ADC_CONVERSION_COMPLETE_CB_ID, &ADC_DMA_conversion_complete_callback);
 8002940:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <System_Init+0xcc>)
 8002942:	4b1c      	ldr	r3, [pc, #112]	@ (80029b4 <System_Init+0xc0>)
 8002944:	2100      	movs	r1, #0
 8002946:	0018      	movs	r0, r3
 8002948:	f004 fbf4 	bl	8007134 <HAL_ADC_RegisterCallback>

	//Set custom callback function for I/P capture input falling edge event
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_IC_CAPTURE_CB_ID, &TIM2_ch1_IP_capture_callback);
 800294c:	4a1d      	ldr	r2, [pc, #116]	@ (80029c4 <System_Init+0xd0>)
 800294e:	4b1e      	ldr	r3, [pc, #120]	@ (80029c8 <System_Init+0xd4>)
 8002950:	2112      	movs	r1, #18
 8002952:	0018      	movs	r0, r3
 8002954:	f008 ffe2 	bl	800b91c <HAL_TIM_RegisterCallback>

	//Set custom callback function for I/P capture timer overflow (Update event/overflow)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, &TIM2_ch1_overflow_callback);
 8002958:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <System_Init+0xd8>)
 800295a:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <System_Init+0xd4>)
 800295c:	210e      	movs	r1, #14
 800295e:	0018      	movs	r0, r3
 8002960:	f008 ffdc 	bl	800b91c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM3_ch1 (Measurement Re-Elapse) (CCR match)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM3_ch1_IP_capture_measurement_reelapse_callback);
 8002964:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <System_Init+0xdc>)
 8002966:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <System_Init+0xe0>)
 8002968:	2114      	movs	r1, #20
 800296a:	0018      	movs	r0, r3
 800296c:	f008 ffd6 	bl	800b91c <HAL_TIM_RegisterCallback>

	//Set custom callback function for DMA TX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_TX_COMPLETE_CB_ID, &UART2_TX_transfer_complete_callback);
 8002970:	4a19      	ldr	r2, [pc, #100]	@ (80029d8 <System_Init+0xe4>)
 8002972:	4b1a      	ldr	r3, [pc, #104]	@ (80029dc <System_Init+0xe8>)
 8002974:	2101      	movs	r1, #1
 8002976:	0018      	movs	r0, r3
 8002978:	f009 ffbc 	bl	800c8f4 <HAL_UART_RegisterCallback>

	//Set custom callback function for DMA RX Transfer Complete
	HAL_UART_RegisterCallback(&huart2, HAL_UART_RX_COMPLETE_CB_ID, &UART2_RX_transfer_complete_callback);
 800297c:	4a18      	ldr	r2, [pc, #96]	@ (80029e0 <System_Init+0xec>)
 800297e:	4b17      	ldr	r3, [pc, #92]	@ (80029dc <System_Init+0xe8>)
 8002980:	2103      	movs	r1, #3
 8002982:	0018      	movs	r0, r3
 8002984:	f009 ffb6 	bl	800c8f4 <HAL_UART_RegisterCallback>

	//Set custom callback for LPTIM1 (Tap Tempo SW state check)
	HAL_LPTIM_RegisterCallback(&hlptim1, HAL_LPTIM_COMPARE_MATCH_CB_ID, &LPTIM1_callback);
 8002988:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <System_Init+0xf0>)
 800298a:	4b17      	ldr	r3, [pc, #92]	@ (80029e8 <System_Init+0xf4>)
 800298c:	2102      	movs	r1, #2
 800298e:	0018      	movs	r0, r3
 8002990:	f006 fc7a 	bl	8009288 <HAL_LPTIM_RegisterCallback>

	//Set custom callback function for TIM17
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM17_callback);
 8002994:	4a15      	ldr	r2, [pc, #84]	@ (80029ec <System_Init+0xf8>)
 8002996:	4b16      	ldr	r3, [pc, #88]	@ (80029f0 <System_Init+0xfc>)
 8002998:	2114      	movs	r1, #20
 800299a:	0018      	movs	r0, r3
 800299c:	f008 ffbe 	bl	800b91c <HAL_TIM_RegisterCallback>

	//Set custom callback function for TIM14
	HAL_TIM_RegisterCallback(&htim14, HAL_TIM_OC_DELAY_ELAPSED_CB_ID, &TIM14_callback);
 80029a0:	4a14      	ldr	r2, [pc, #80]	@ (80029f4 <System_Init+0x100>)
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <System_Init+0x104>)
 80029a4:	2114      	movs	r1, #20
 80029a6:	0018      	movs	r0, r3
 80029a8:	f008 ffb8 	bl	800b91c <HAL_TIM_RegisterCallback>
}
 80029ac:	46c0      	nop			@ (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	200005b4 	.word	0x200005b4
 80029b8:	080029fd 	.word	0x080029fd
 80029bc:	20000810 	.word	0x20000810
 80029c0:	08002a51 	.word	0x08002a51
 80029c4:	08002ae5 	.word	0x08002ae5
 80029c8:	200008cc 	.word	0x200008cc
 80029cc:	08002c01 	.word	0x08002c01
 80029d0:	08002d0d 	.word	0x08002d0d
 80029d4:	20000988 	.word	0x20000988
 80029d8:	08002e49 	.word	0x08002e49
 80029dc:	20000b00 	.word	0x20000b00
 80029e0:	08002e59 	.word	0x08002e59
 80029e4:	08004239 	.word	0x08004239
 80029e8:	20000c84 	.word	0x20000c84
 80029ec:	08004935 	.word	0x08004935
 80029f0:	20000754 	.word	0x20000754
 80029f4:	08004945 	.word	0x08004945
 80029f8:	20000698 	.word	0x20000698

080029fc <TIM16_callback>:
uint64_t depressed_num = 0;
enum Validate latched = NO;
//debug

void TIM16_callback(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Set_Oscillator_Values(&params);
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <TIM16_callback+0x40>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f002 fbac 	bl	8005164 <Set_Oscillator_Values>
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a3c <TIM16_callback+0x40>)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	0018      	movs	r0, r3
 8002a12:	f002 fbd3 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002a16:	4a0a      	ldr	r2, [pc, #40]	@ (8002a40 <TIM16_callback+0x44>)
 8002a18:	4b08      	ldr	r3, [pc, #32]	@ (8002a3c <TIM16_callback+0x40>)
 8002a1a:	0011      	movs	r1, r2
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f002 fcc3 	bl	80053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002a22:	4b08      	ldr	r3, [pc, #32]	@ (8002a44 <TIM16_callback+0x48>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	001a      	movs	r2, r3
 8002a28:	4907      	ldr	r1, [pc, #28]	@ (8002a48 <TIM16_callback+0x4c>)
 8002a2a:	4b08      	ldr	r3, [pc, #32]	@ (8002a4c <TIM16_callback+0x50>)
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f004 fc0d 	bl	800724c <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002a32:	46c0      	nop			@ (mov r8, r8)
 8002a34:	46bd      	mov	sp, r7
 8002a36:	b002      	add	sp, #8
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	46c0      	nop			@ (mov r8, r8)
 8002a3c:	20000d18 	.word	0x20000d18
 8002a40:	20000028 	.word	0x20000028
 8002a44:	0800e960 	.word	0x0800e960
 8002a48:	20000d0c 	.word	0x20000d0c
 8002a4c:	200005b4 	.word	0x200005b4

08002a50 <ADC_DMA_conversion_complete_callback>:

void ADC_DMA_conversion_complete_callback(ADC_HandleTypeDef *hadc)
{
 8002a50:	b5b0      	push	{r4, r5, r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	HAL_ADC_Stop_DMA(hadc); //disable ADC DMA
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f004 fc84 	bl	8007368 <HAL_ADC_Stop_DMA>
	Process_ADC_Conversion_Values(&params_manual, ADCResultsDMA);
 8002a60:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad0 <ADC_DMA_conversion_complete_callback+0x80>)
 8002a62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad4 <ADC_DMA_conversion_complete_callback+0x84>)
 8002a64:	0011      	movs	r1, r2
 8002a66:	0018      	movs	r0, r3
 8002a68:	f002 fd34 	bl	80054d4 <Process_ADC_Conversion_Values>

	//copies into running params based on mode
	Update_Params_Based_On_Mode_Selected();
 8002a6c:	f7fd fd7c 	bl	8000568 <Update_Params_Based_On_Mode_Selected>

	enum Validate first_sync_complete = Get_Status_Bit(&statuses, First_Sync_Complete);
 8002a70:	250f      	movs	r5, #15
 8002a72:	197c      	adds	r4, r7, r5
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002a76:	2108      	movs	r1, #8
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f003 ff2f 	bl	80068dc <Get_Status_Bit>
 8002a7e:	0003      	movs	r3, r0
 8002a80:	7023      	strb	r3, [r4, #0]

	//overwrites raw speed values if a sync has completed
	if(first_sync_complete == YES){
 8002a82:	197b      	adds	r3, r7, r5
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10a      	bne.n	8002aa0 <ADC_DMA_conversion_complete_callback+0x50>

		params.raw_start_value = params_working.raw_start_value;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <ADC_DMA_conversion_complete_callback+0x8c>)
 8002a8c:	8a5b      	ldrh	r3, [r3, #18]
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	4b13      	ldr	r3, [pc, #76]	@ (8002ae0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002a92:	825a      	strh	r2, [r3, #18]
		params.raw_prescaler = params_working.raw_prescaler;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <ADC_DMA_conversion_complete_callback+0x8c>)
 8002a96:	8b5b      	ldrh	r3, [r3, #26]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002a9c:	835a      	strh	r2, [r3, #26]
 8002a9e:	e003      	b.n	8002aa8 <ADC_DMA_conversion_complete_callback+0x58>
	}
	else{

		Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(&params);
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ae0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f002 fb28 	bl	80050f8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>
	}

	Process_TIM16_Final_Start_Value_and_Final_Prescaler(&params);
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <ADC_DMA_conversion_complete_callback+0x90>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f003 fa88 	bl	8005fc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//after initial conversion is complete, set the conversion complete flag - leave this after raw/final value processing rather than actually when ADC values are converted for startup routine reasons.
	if(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){
 8002ab0:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002ab2:	2110      	movs	r1, #16
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f003 ff11 	bl	80068dc <Get_Status_Bit>
 8002aba:	1e03      	subs	r3, r0, #0
 8002abc:	d104      	bne.n	8002ac8 <ADC_DMA_conversion_complete_callback+0x78>
		Set_Status_Bit(&statuses, Initial_ADC_Conversion_Complete);
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <ADC_DMA_conversion_complete_callback+0x88>)
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	0018      	movs	r0, r3
 8002ac4:	f003 ff1e 	bl	8006904 <Set_Status_Bit>
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad0:	20000d0c 	.word	0x20000d0c
 8002ad4:	20000d3c 	.word	0x20000d3c
 8002ad8:	20000cfc 	.word	0x20000cfc
 8002adc:	20000d84 	.word	0x20000d84
 8002ae0:	20000d18 	.word	0x20000d18

08002ae4 <TIM2_ch1_IP_capture_callback>:

void TIM2_ch1_IP_capture_callback(TIM_HandleTypeDef *htim){
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

	TIM2_ch1_input_capture_value = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2100      	movs	r1, #0
 8002af0:	0018      	movs	r0, r3
 8002af2:	f008 fe8f 	bl	800b814 <HAL_TIM_ReadCapturedValue>
 8002af6:	0002      	movs	r2, r0
 8002af8:	4b3a      	ldr	r3, [pc, #232]	@ (8002be4 <TIM2_ch1_IP_capture_callback+0x100>)
 8002afa:	601a      	str	r2, [r3, #0]

	interrupt_period = TIM2_ch1_input_capture_value >> 9; //divided by 512
 8002afc:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <TIM2_ch1_IP_capture_callback+0x100>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0a5b      	lsrs	r3, r3, #9
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	4b38      	ldr	r3, [pc, #224]	@ (8002be8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002b06:	801a      	strh	r2, [r3, #0]

	//since the input capture measurement is z, and this is 512x the interrupt period, we just use the interrupt
	//period = z/512 as the 'elapse period value' if we also set the elapse timer prescaler to 512x less than the
	//input capture measurement timer

	if(IP_CAP_fsm.current_state == IDLE){
 8002b08:	4b38      	ldr	r3, [pc, #224]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d108      	bne.n	8002b24 <TIM2_ch1_IP_capture_callback+0x40>

		Begin_Input_Capture_Measurement();
 8002b12:	f002 f9db 	bl	8004ecc <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002b16:	4b35      	ldr	r3, [pc, #212]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = IDLE;
 8002b1c:	4b33      	ldr	r3, [pc, #204]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	705a      	strb	r2, [r3, #1]
		//BEGIN PROCESSING
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002b22:	e05b      	b.n	8002bdc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){ //second edge
 8002b24:	4b31      	ldr	r3, [pc, #196]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d124      	bne.n	8002b78 <TIM2_ch1_IP_capture_callback+0x94>
		if(interrupt_period >= HIGHEST_PRESCALER_TOP_SPEED_PERIOD){ //if the captured value/512 is >= than 129
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8002be8 <TIM2_ch1_IP_capture_callback+0x104>)
 8002b30:	881b      	ldrh	r3, [r3, #0]
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b80      	cmp	r3, #128	@ 0x80
 8002b36:	d951      	bls.n	8002bdc <TIM2_ch1_IP_capture_callback+0xf8>
				Start_Measurement_Reelapse_Timer();
 8002b38:	f002 f9aa 	bl	8004e90 <Start_Measurement_Reelapse_Timer>
			IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b3e:	2202      	movs	r2, #2
 8002b40:	701a      	strb	r2, [r3, #0]
			IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002b42:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	705a      	strb	r2, [r3, #1]
			Copy_Params_Structs(&params, &params_to_be_loaded);
 8002b48:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf4 <TIM2_ch1_IP_capture_callback+0x110>)
 8002b4c:	0011      	movs	r1, r2
 8002b4e:	0018      	movs	r0, r3
 8002b50:	f002 f98c 	bl	8004e6c <Copy_Params_Structs>
			if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002b54:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b05      	cmp	r3, #5
 8002b5c:	d004      	beq.n	8002b68 <TIM2_ch1_IP_capture_callback+0x84>
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b07      	cmp	r3, #7
 8002b66:	d101      	bne.n	8002b6c <TIM2_ch1_IP_capture_callback+0x88>
				Advance_Pending_States();
 8002b68:	f002 fe00 	bl	800576c <Advance_Pending_States>
			Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002b6c:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <TIM2_ch1_IP_capture_callback+0x118>)
 8002b6e:	2104      	movs	r1, #4
 8002b70:	0018      	movs	r0, r3
 8002b72:	f003 fec7 	bl	8006904 <Set_Status_Bit>
}
 8002b76:	e031      	b.n	8002bdc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){ //first edge
 8002b78:	4b1c      	ldr	r3, [pc, #112]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d108      	bne.n	8002b94 <TIM2_ch1_IP_capture_callback+0xb0>
		Begin_Input_Capture_Measurement();
 8002b82:	f002 f9a3 	bl	8004ecc <Begin_Input_Capture_Measurement>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b88:	2203      	movs	r2, #3
 8002b8a:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002b8c:	4b17      	ldr	r3, [pc, #92]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b8e:	2202      	movs	r2, #2
 8002b90:	705a      	strb	r2, [r3, #1]
}
 8002b92:	e023      	b.n	8002bdc <TIM2_ch1_IP_capture_callback+0xf8>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){ //second edge
 8002b94:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d11e      	bne.n	8002bdc <TIM2_ch1_IP_capture_callback+0xf8>
			Start_Measurement_Reelapse_Timer();
 8002b9e:	f002 f977 	bl	8004e90 <Start_Measurement_Reelapse_Timer>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002ba2:	4b12      	ldr	r3, [pc, #72]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002ba8:	4b10      	ldr	r3, [pc, #64]	@ (8002bec <TIM2_ch1_IP_capture_callback+0x108>)
 8002baa:	2203      	movs	r2, #3
 8002bac:	705a      	strb	r2, [r3, #1]
		Copy_Params_Structs(&params, &params_to_be_loaded);
 8002bae:	4a10      	ldr	r2, [pc, #64]	@ (8002bf0 <TIM2_ch1_IP_capture_callback+0x10c>)
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <TIM2_ch1_IP_capture_callback+0x110>)
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f002 f959 	bl	8004e6c <Copy_Params_Structs>
		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 8002bba:	4b0f      	ldr	r3, [pc, #60]	@ (8002bf8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	d004      	beq.n	8002bce <TIM2_ch1_IP_capture_callback+0xea>
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bf8 <TIM2_ch1_IP_capture_callback+0x114>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b07      	cmp	r3, #7
 8002bcc:	d101      	bne.n	8002bd2 <TIM2_ch1_IP_capture_callback+0xee>
			Advance_Pending_States();
 8002bce:	f002 fdcd 	bl	800576c <Advance_Pending_States>
		Set_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <TIM2_ch1_IP_capture_callback+0x118>)
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f003 fe94 	bl	8006904 <Set_Status_Bit>
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000cf4 	.word	0x20000cf4
 8002be8:	20000cf8 	.word	0x20000cf8
 8002bec:	20000444 	.word	0x20000444
 8002bf0:	20000d60 	.word	0x20000d60
 8002bf4:	20000d18 	.word	0x20000d18
 8002bf8:	20000430 	.word	0x20000430
 8002bfc:	20000cfc 	.word	0x20000cfc

08002c00 <TIM2_ch1_overflow_callback>:


void TIM2_ch1_overflow_callback(TIM_HandleTypeDef *htim){
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]

	union Speed_FSM_States previous = speed_fsm.prev_state;
 8002c08:	240c      	movs	r4, #12
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c0e:	7852      	ldrb	r2, [r2, #1]
 8002c10:	701a      	strb	r2, [r3, #0]

	if(IP_CAP_fsm.current_state == MEASUREMENT_PENDING){
 8002c12:	4b3a      	ldr	r3, [pc, #232]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d131      	bne.n	8002c80 <TIM2_ch1_overflow_callback+0x80>

		IP_CAP_fsm.current_state = IDLE;
 8002c1c:	4b37      	ldr	r3, [pc, #220]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_PENDING;
 8002c22:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	705a      	strb	r2, [r3, #1]

		MIDI_CLK_fsm = NOT_COMPILING;
 8002c28:	4b35      	ldr	r3, [pc, #212]	@ (8002d00 <TIM2_ch1_overflow_callback+0x100>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002c2e:	4b35      	ldr	r3, [pc, #212]	@ (8002d04 <TIM2_ch1_overflow_callback+0x104>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]

		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002c34:	2380      	movs	r3, #128	@ 0x80
 8002c36:	0099      	lsls	r1, r3, #2
 8002c38:	23a0      	movs	r3, #160	@ 0xa0
 8002c3a:	05db      	lsls	r3, r3, #23
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f006 f8b5 	bl	8008dae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002c44:	4b30      	ldr	r3, [pc, #192]	@ (8002d08 <TIM2_ch1_overflow_callback+0x108>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f006 f8af 	bl	8008dae <HAL_GPIO_WritePin>

		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002c50:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d049      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002c5a:	4b27      	ldr	r3, [pc, #156]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b06      	cmp	r3, #6
 8002c62:	d044      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>
 8002c64:	4b24      	ldr	r3, [pc, #144]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d03f      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>

			speed_fsm.prev_state = speed_fsm.current_state;
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c70:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002c76:	4b20      	ldr	r3, [pc, #128]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002c78:	193a      	adds	r2, r7, r4
 8002c7a:	7812      	ldrb	r2, [r2, #0]
 8002c7c:	701a      	strb	r2, [r3, #0]

			speed_fsm.prev_state = speed_fsm.current_state;
			speed_fsm.current_state = previous;
		}
	}
}
 8002c7e:	e036      	b.n	8002cee <TIM2_ch1_overflow_callback+0xee>
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002c80:	4b1e      	ldr	r3, [pc, #120]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d131      	bne.n	8002cee <TIM2_ch1_overflow_callback+0xee>
		IP_CAP_fsm.current_state = MEASUREMENT_REELAPSE;
 8002c8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002c90:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <TIM2_ch1_overflow_callback+0xfc>)
 8002c92:	2203      	movs	r2, #3
 8002c94:	705a      	strb	r2, [r3, #1]
		MIDI_CLK_fsm = NOT_COMPILING;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	@ (8002d00 <TIM2_ch1_overflow_callback+0x100>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
		MIDI_CLK_tag = 0;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	@ (8002d04 <TIM2_ch1_overflow_callback+0x104>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ca2:	2380      	movs	r3, #128	@ 0x80
 8002ca4:	0099      	lsls	r1, r3, #2
 8002ca6:	23a0      	movs	r3, #160	@ 0xa0
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	2201      	movs	r2, #1
 8002cac:	0018      	movs	r0, r3
 8002cae:	f006 f87e 	bl	8008dae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <TIM2_ch1_overflow_callback+0x108>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2140      	movs	r1, #64	@ 0x40
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f006 f878 	bl	8008dae <HAL_GPIO_WritePin>
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b04      	cmp	r3, #4
 8002cc6:	d012      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>
			|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE))){
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d00d      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b2db      	uxtb	r3, r3
		if(!((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d008      	beq.n	8002cee <TIM2_ch1_overflow_callback+0xee>
			speed_fsm.prev_state = speed_fsm.current_state;
 8002cdc:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002cde:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state = previous;
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <TIM2_ch1_overflow_callback+0xf8>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	18ba      	adds	r2, r7, r2
 8002cea:	7812      	ldrb	r2, [r2, #0]
 8002cec:	701a      	strb	r2, [r3, #0]
}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b005      	add	sp, #20
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	20000430 	.word	0x20000430
 8002cfc:	20000444 	.word	0x20000444
 8002d00:	20000da8 	.word	0x20000da8
 8002d04:	20000cfa 	.word	0x20000cfa
 8002d08:	50000800 	.word	0x50000800

08002d0c <TIM3_ch1_IP_capture_measurement_reelapse_callback>:

void TIM3_ch1_IP_capture_measurement_reelapse_callback(TIM_HandleTypeDef *htim){
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d14:	4b41      	ldr	r3, [pc, #260]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b0b      	cmp	r3, #11
 8002d1c:	d01c      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b0c      	cmp	r3, #12
 8002d26:	d017      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002d28:	4b3c      	ldr	r3, [pc, #240]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b0d      	cmp	r3, #13
 8002d30:	d012      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002d32:	4b3a      	ldr	r3, [pc, #232]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b10      	cmp	r3, #16
 8002d3a:	d00d      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002d3c:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b11      	cmp	r3, #17
 8002d44:	d008      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002d46:	4b35      	ldr	r3, [pc, #212]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d003      	beq.n	8002d58 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x4c>

		// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
		Set_Oscillator_Values(&params_to_be_loaded);
 8002d50:	4b33      	ldr	r3, [pc, #204]	@ (8002e20 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002d52:	0018      	movs	r0, r3
 8002d54:	f002 fa06 	bl	8005164 <Set_Oscillator_Values>
	}

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8002d58:	4b32      	ldr	r3, [pc, #200]	@ (8002e24 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x118>)
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f003 fd56 	bl	800680e <Stop_OC_TIM>

	if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE){
 8002d62:	4b31      	ldr	r3, [pc, #196]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d106      	bne.n	8002d7a <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x6e>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = IDLE;
 8002d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE;
 8002d72:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	705a      	strb	r2, [r3, #1]
 8002d78:	e00a      	b.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>
	}
	else if(IP_CAP_fsm.current_state == MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING){
 8002d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d105      	bne.n	8002d90 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x84>

		//UPDATE IP CAP FSM
		IP_CAP_fsm.current_state = MEASUREMENT_PENDING;
 8002d84:	4b28      	ldr	r3, [pc, #160]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
		IP_CAP_fsm.prev_state = MEASUREMENT_REELAPSE_AND_MEASUREMENT_PENDING;
 8002d8a:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x11c>)
 8002d8c:	2203      	movs	r2, #3
 8002d8e:	705a      	strb	r2, [r3, #1]
	}

	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002d90:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b0b      	cmp	r3, #11
 8002d98:	d03c      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE)
 8002d9a:	4b20      	ldr	r3, [pc, #128]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d037      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE)
 8002da4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b0d      	cmp	r3, #13
 8002dac:	d032      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE)
 8002dae:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d02d      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE)
 8002db8:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b11      	cmp	r3, #17
 8002dc0:	d028      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>
		|| (speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE))){
 8002dc2:	4b16      	ldr	r3, [pc, #88]	@ (8002e1c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x110>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	b2db      	uxtb	r3, r3
	if(!((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE)
 8002dc8:	2b12      	cmp	r3, #18
 8002dca:	d023      	beq.n	8002e14 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x108>

		Copy_Params_Structs(&params_to_be_loaded, &params_working);
 8002dcc:	4a17      	ldr	r2, [pc, #92]	@ (8002e2c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x120>)
 8002dce:	4b14      	ldr	r3, [pc, #80]	@ (8002e20 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002dd0:	0011      	movs	r1, r2
 8002dd2:	0018      	movs	r0, r3
 8002dd4:	f002 f84a 	bl	8004e6c <Copy_Params_Structs>
		Copy_Params_Structs(&params_to_be_loaded, &params);
 8002dd8:	4a15      	ldr	r2, [pc, #84]	@ (8002e30 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002dda:	4b11      	ldr	r3, [pc, #68]	@ (8002e20 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x114>)
 8002ddc:	0011      	movs	r1, r2
 8002dde:	0018      	movs	r0, r3
 8002de0:	f002 f844 	bl	8004e6c <Copy_Params_Structs>

		Set_Status_Bit(&statuses, First_Sync_Complete);
 8002de4:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x128>)
 8002de6:	2108      	movs	r1, #8
 8002de8:	0018      	movs	r0, r3
 8002dea:	f003 fd8b 	bl	8006904 <Set_Status_Bit>

		Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8002dee:	4b10      	ldr	r3, [pc, #64]	@ (8002e30 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002df0:	2100      	movs	r1, #0
 8002df2:	0018      	movs	r0, r3
 8002df4:	f002 f9e2 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
		Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8002df8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e38 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x12c>)
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002e30 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x124>)
 8002dfc:	0011      	movs	r1, r2
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f002 fad2 	bl	80053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8002e04:	4b0d      	ldr	r3, [pc, #52]	@ (8002e3c <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x130>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	001a      	movs	r2, r3
 8002e0a:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x134>)
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e44 <TIM3_ch1_IP_capture_measurement_reelapse_callback+0x138>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f004 fa1c 	bl	800724c <HAL_ADC_Start_DMA>

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8002e14:	46c0      	nop			@ (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b002      	add	sp, #8
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	20000430 	.word	0x20000430
 8002e20:	20000d60 	.word	0x20000d60
 8002e24:	20000988 	.word	0x20000988
 8002e28:	20000444 	.word	0x20000444
 8002e2c:	20000d84 	.word	0x20000d84
 8002e30:	20000d18 	.word	0x20000d18
 8002e34:	20000cfc 	.word	0x20000cfc
 8002e38:	20000028 	.word	0x20000028
 8002e3c:	0800e960 	.word	0x0800e960
 8002e40:	20000d0c 	.word	0x20000d0c
 8002e44:	200005b4 	.word	0x200005b4

08002e48 <UART2_TX_transfer_complete_callback>:

void UART2_TX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]

	//UART_DMA_TX_is_complete = YES;
}
 8002e50:	46c0      	nop			@ (mov r8, r8)
 8002e52:	46bd      	mov	sp, r7
 8002e54:	b002      	add	sp, #8
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <UART2_RX_transfer_complete_callback>:

void UART2_RX_transfer_complete_callback(UART_HandleTypeDef *huart){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

	if(Is_System_Real_Time_Status_Byte(rx_buffer) == YES){
 8002e60:	4bbe      	ldr	r3, [pc, #760]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7fe fc96 	bl	8001794 <Is_System_Real_Time_Status_Byte>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d001      	beq.n	8002e72 <UART2_RX_transfer_complete_callback+0x1a>
 8002e6e:	f000 fc0c 	bl	800368a <UART2_RX_transfer_complete_callback+0x832>

		if(Get_Status_Bit(&statuses, Start_Required_Before_Sync_Mode) == YES){
 8002e72:	4bbb      	ldr	r3, [pc, #748]	@ (8003160 <UART2_RX_transfer_complete_callback+0x308>)
 8002e74:	2180      	movs	r1, #128	@ 0x80
 8002e76:	0018      	movs	r0, r3
 8002e78:	f003 fd30 	bl	80068dc <Get_Status_Bit>
 8002e7c:	0003      	movs	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <UART2_RX_transfer_complete_callback+0x2e>
 8002e82:	f001 f895 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

			if((MIDI_CLK_fsm == NOT_COMPILING) && (IP_CAP_fsm.current_state == IDLE)
 8002e86:	4bb7      	ldr	r3, [pc, #732]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d159      	bne.n	8002f44 <UART2_RX_transfer_complete_callback+0xec>
 8002e90:	4bb5      	ldr	r3, [pc, #724]	@ (8003168 <UART2_RX_transfer_complete_callback+0x310>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d154      	bne.n	8002f44 <UART2_RX_transfer_complete_callback+0xec>
					&& ((speed_fsm.current_state.speed_exclusive_state == TAP_MODE)
 8002e9a:	4bb4      	ldr	r3, [pc, #720]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d013      	beq.n	8002ecc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == MANUAL_MODE)
 8002ea4:	4bb1      	ldr	r3, [pc, #708]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d00e      	beq.n	8002ecc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE)
 8002eae:	4baf      	ldr	r3, [pc, #700]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d009      	beq.n	8002ecc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == PC_MODE)
 8002eb8:	4bac      	ldr	r3, [pc, #688]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d004      	beq.n	8002ecc <UART2_RX_transfer_complete_callback+0x74>
					|| (speed_fsm.current_state.shared_state == CC_MODE))){
 8002ec2:	4baa      	ldr	r3, [pc, #680]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d13b      	bne.n	8002f44 <UART2_RX_transfer_complete_callback+0xec>

				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002ecc:	4ba3      	ldr	r3, [pc, #652]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2bfa      	cmp	r3, #250	@ 0xfa
 8002ed4:	d10b      	bne.n	8002eee <UART2_RX_transfer_complete_callback+0x96>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002ed6:	4ba5      	ldr	r3, [pc, #660]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002ed8:	4aa4      	ldr	r2, [pc, #656]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002eda:	7812      	ldrb	r2, [r2, #0]
 8002edc:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A0_MODE;
 8002ede:	4ba3      	ldr	r3, [pc, #652]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002ee0:	2209      	movs	r2, #9
 8002ee2:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002ee4:	4ba2      	ldr	r3, [pc, #648]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002eea:	f001 f85e 	bl	8003faa <UART2_RX_transfer_complete_callback+0x1152>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002eee:	4b9b      	ldr	r3, [pc, #620]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2bf8      	cmp	r3, #248	@ 0xf8
 8002ef6:	d001      	beq.n	8002efc <UART2_RX_transfer_complete_callback+0xa4>
 8002ef8:	f001 f857 	bl	8003faa <UART2_RX_transfer_complete_callback+0x1152>

					speed_fsm.prev_state = speed_fsm.current_state;
 8002efc:	4b9b      	ldr	r3, [pc, #620]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002efe:	4a9b      	ldr	r2, [pc, #620]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002f00:	7812      	ldrb	r2, [r2, #0]
 8002f02:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B0_MODE;
 8002f04:	4b99      	ldr	r3, [pc, #612]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002f06:	220b      	movs	r2, #11
 8002f08:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 0; //just in case
 8002f0a:	4b99      	ldr	r3, [pc, #612]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f10:	2380      	movs	r3, #128	@ 0x80
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	23a0      	movs	r3, #160	@ 0xa0
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	2200      	movs	r2, #0
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f005 ff47 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f20:	4b94      	ldr	r3, [pc, #592]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	2140      	movs	r1, #64	@ 0x40
 8002f26:	0018      	movs	r0, r3
 8002f28:	f005 ff41 	bl	8008dae <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002f2c:	4b8d      	ldr	r3, [pc, #564]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 8002f2e:	2201      	movs	r2, #1
 8002f30:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002f32:	4b8f      	ldr	r3, [pc, #572]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002f3e:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8002f40:	f001 f833 	bl	8003faa <UART2_RX_transfer_complete_callback+0x1152>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A0_MODE){
 8002f44:	4b89      	ldr	r3, [pc, #548]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d123      	bne.n	8002f96 <UART2_RX_transfer_complete_callback+0x13e>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002f4e:	4b83      	ldr	r3, [pc, #524]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2bf8      	cmp	r3, #248	@ 0xf8
 8002f56:	d001      	beq.n	8002f5c <UART2_RX_transfer_complete_callback+0x104>
 8002f58:	f001 f82a 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002f5c:	2380      	movs	r3, #128	@ 0x80
 8002f5e:	0099      	lsls	r1, r3, #2
 8002f60:	23a0      	movs	r3, #160	@ 0xa0
 8002f62:	05db      	lsls	r3, r3, #23
 8002f64:	2200      	movs	r2, #0
 8002f66:	0018      	movs	r0, r3
 8002f68:	f005 ff21 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002f6c:	4b81      	ldr	r3, [pc, #516]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2140      	movs	r1, #64	@ 0x40
 8002f72:	0018      	movs	r0, r3
 8002f74:	f005 ff1b 	bl	8008dae <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 8002f78:	4b7a      	ldr	r3, [pc, #488]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	3301      	adds	r3, #1
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	4b79      	ldr	r3, [pc, #484]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002f8a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8002f8c:	4b77      	ldr	r3, [pc, #476]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002f8e:	220a      	movs	r2, #10
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	f001 f80d 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_A1_MODE){
 8002f96:	4b75      	ldr	r3, [pc, #468]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b0a      	cmp	r3, #10
 8002f9e:	d145      	bne.n	800302c <UART2_RX_transfer_complete_callback+0x1d4>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8002fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2bf8      	cmp	r3, #248	@ 0xf8
 8002fa8:	d001      	beq.n	8002fae <UART2_RX_transfer_complete_callback+0x156>
 8002faa:	f001 f801 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8002fae:	4b6d      	ldr	r3, [pc, #436]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8002fb4:	4b6e      	ldr	r3, [pc, #440]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4b6c      	ldr	r3, [pc, #432]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002fc0:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8002fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b0b      	cmp	r3, #11
 8002fca:	d80f      	bhi.n	8002fec <UART2_RX_transfer_complete_callback+0x194>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8002fcc:	2380      	movs	r3, #128	@ 0x80
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	23a0      	movs	r3, #160	@ 0xa0
 8002fd2:	05db      	lsls	r3, r3, #23
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f005 fee9 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8002fdc:	4b65      	ldr	r3, [pc, #404]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8002fde:	2201      	movs	r2, #1
 8002fe0:	2140      	movs	r1, #64	@ 0x40
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f005 fee3 	bl	8008dae <HAL_GPIO_WritePin>
 8002fe8:	f000 ffe2 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8002fec:	4b60      	ldr	r3, [pc, #384]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b18      	cmp	r3, #24
 8002ff4:	d80f      	bhi.n	8003016 <UART2_RX_transfer_complete_callback+0x1be>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8002ff6:	2380      	movs	r3, #128	@ 0x80
 8002ff8:	0099      	lsls	r1, r3, #2
 8002ffa:	23a0      	movs	r3, #160	@ 0xa0
 8002ffc:	05db      	lsls	r3, r3, #23
 8002ffe:	2201      	movs	r2, #1
 8003000:	0018      	movs	r0, r3
 8003002:	f005 fed4 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003006:	4b5b      	ldr	r3, [pc, #364]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8003008:	2200      	movs	r2, #0
 800300a:	2140      	movs	r1, #64	@ 0x40
 800300c:	0018      	movs	r0, r3
 800300e:	f005 fece 	bl	8008dae <HAL_GPIO_WritePin>
 8003012:	f000 ffcd 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_A1_MODE;
 8003016:	4b55      	ldr	r3, [pc, #340]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8003018:	220a      	movs	r2, #10
 800301a:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 800301c:	4b53      	ldr	r3, [pc, #332]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 800301e:	2208      	movs	r2, #8
 8003020:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8003022:	4b53      	ldr	r3, [pc, #332]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8003024:	2201      	movs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	f000 ffc2 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B0_MODE){
 800302c:	4b4f      	ldr	r3, [pc, #316]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b0b      	cmp	r3, #11
 8003034:	d142      	bne.n	80030bc <UART2_RX_transfer_complete_callback+0x264>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003036:	4b49      	ldr	r3, [pc, #292]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2bf8      	cmp	r3, #248	@ 0xf8
 800303e:	d001      	beq.n	8003044 <UART2_RX_transfer_complete_callback+0x1ec>
 8003040:	f000 ffb6 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 8003044:	4b47      	ldr	r3, [pc, #284]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 800304a:	4b49      	ldr	r3, [pc, #292]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	b2da      	uxtb	r2, r3
 8003054:	4b46      	ldr	r3, [pc, #280]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8003056:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003058:	4b45      	ldr	r3, [pc, #276]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b0b      	cmp	r3, #11
 8003060:	d80f      	bhi.n	8003082 <UART2_RX_transfer_complete_callback+0x22a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	0099      	lsls	r1, r3, #2
 8003066:	23a0      	movs	r3, #160	@ 0xa0
 8003068:	05db      	lsls	r3, r3, #23
 800306a:	2200      	movs	r2, #0
 800306c:	0018      	movs	r0, r3
 800306e:	f005 fe9e 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003072:	4b40      	ldr	r3, [pc, #256]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8003074:	2201      	movs	r2, #1
 8003076:	2140      	movs	r1, #64	@ 0x40
 8003078:	0018      	movs	r0, r3
 800307a:	f005 fe98 	bl	8008dae <HAL_GPIO_WritePin>
 800307e:	f000 ff97 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003082:	4b3b      	ldr	r3, [pc, #236]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b18      	cmp	r3, #24
 800308a:	d80f      	bhi.n	80030ac <UART2_RX_transfer_complete_callback+0x254>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800308c:	2380      	movs	r3, #128	@ 0x80
 800308e:	0099      	lsls	r1, r3, #2
 8003090:	23a0      	movs	r3, #160	@ 0xa0
 8003092:	05db      	lsls	r3, r3, #23
 8003094:	2201      	movs	r2, #1
 8003096:	0018      	movs	r0, r3
 8003098:	f005 fe89 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800309c:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 800309e:	2200      	movs	r2, #0
 80030a0:	2140      	movs	r1, #64	@ 0x40
 80030a2:	0018      	movs	r0, r3
 80030a4:	f005 fe83 	bl	8008dae <HAL_GPIO_WritePin>
 80030a8:	f000 ff82 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B1_MODE;
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 80030b4:	220c      	movs	r2, #12
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	f000 ff7a 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B1_MODE){
 80030bc:	4b2b      	ldr	r3, [pc, #172]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b0c      	cmp	r3, #12
 80030c4:	d158      	bne.n	8003178 <UART2_RX_transfer_complete_callback+0x320>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80030c6:	4b25      	ldr	r3, [pc, #148]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2bf8      	cmp	r3, #248	@ 0xf8
 80030ce:	d138      	bne.n	8003142 <UART2_RX_transfer_complete_callback+0x2ea>

					MIDI_CLK_fsm = COMPILING; //just in case
 80030d0:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <UART2_RX_transfer_complete_callback+0x30c>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80030d6:	4b26      	ldr	r3, [pc, #152]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 80030e2:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80030e4:	4b22      	ldr	r3, [pc, #136]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b0b      	cmp	r3, #11
 80030ec:	d80f      	bhi.n	800310e <UART2_RX_transfer_complete_callback+0x2b6>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	0099      	lsls	r1, r3, #2
 80030f2:	23a0      	movs	r3, #160	@ 0xa0
 80030f4:	05db      	lsls	r3, r3, #23
 80030f6:	2200      	movs	r2, #0
 80030f8:	0018      	movs	r0, r3
 80030fa:	f005 fe58 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 8003100:	2201      	movs	r2, #1
 8003102:	2140      	movs	r1, #64	@ 0x40
 8003104:	0018      	movs	r0, r3
 8003106:	f005 fe52 	bl	8008dae <HAL_GPIO_WritePin>
 800310a:	f000 ff51 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 800310e:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b18      	cmp	r3, #24
 8003116:	d80f      	bhi.n	8003138 <UART2_RX_transfer_complete_callback+0x2e0>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	0099      	lsls	r1, r3, #2
 800311c:	23a0      	movs	r3, #160	@ 0xa0
 800311e:	05db      	lsls	r3, r3, #23
 8003120:	2201      	movs	r2, #1
 8003122:	0018      	movs	r0, r3
 8003124:	f005 fe43 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8003128:	4b12      	ldr	r3, [pc, #72]	@ (8003174 <UART2_RX_transfer_complete_callback+0x31c>)
 800312a:	2200      	movs	r2, #0
 800312c:	2140      	movs	r1, #64	@ 0x40
 800312e:	0018      	movs	r0, r3
 8003130:	f005 fe3d 	bl	8008dae <HAL_GPIO_WritePin>
 8003134:	f000 ff3c 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <UART2_RX_transfer_complete_callback+0x318>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	f000 ff37 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003142:	4b06      	ldr	r3, [pc, #24]	@ (800315c <UART2_RX_transfer_complete_callback+0x304>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2bfa      	cmp	r3, #250	@ 0xfa
 800314a:	d001      	beq.n	8003150 <UART2_RX_transfer_complete_callback+0x2f8>
 800314c:	f000 ff30 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 8003150:	4b06      	ldr	r3, [pc, #24]	@ (800316c <UART2_RX_transfer_complete_callback+0x314>)
 8003152:	220d      	movs	r2, #13
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	f000 ff2b 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	20000594 	.word	0x20000594
 8003160:	20000cfc 	.word	0x20000cfc
 8003164:	20000da8 	.word	0x20000da8
 8003168:	20000444 	.word	0x20000444
 800316c:	20000430 	.word	0x20000430
 8003170:	20000cfa 	.word	0x20000cfa
 8003174:	50000800 	.word	0x50000800
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_PENDING_B2_MODE){
 8003178:	4bdc      	ldr	r3, [pc, #880]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b0d      	cmp	r3, #13
 8003180:	d160      	bne.n	8003244 <UART2_RX_transfer_complete_callback+0x3ec>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003182:	4bdb      	ldr	r3, [pc, #876]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2bf8      	cmp	r3, #248	@ 0xf8
 800318a:	d001      	beq.n	8003190 <UART2_RX_transfer_complete_callback+0x338>
 800318c:	f000 ff10 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 8003190:	4bd8      	ldr	r3, [pc, #864]	@ (80034f4 <UART2_RX_transfer_complete_callback+0x69c>)
 8003192:	0018      	movs	r0, r3
 8003194:	f001 ffe6 	bl	8005164 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8003198:	2380      	movs	r3, #128	@ 0x80
 800319a:	0099      	lsls	r1, r3, #2
 800319c:	23a0      	movs	r3, #160	@ 0xa0
 800319e:	05db      	lsls	r3, r3, #23
 80031a0:	2201      	movs	r2, #1
 80031a2:	0018      	movs	r0, r3
 80031a4:	f005 fe03 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80031a8:	4bd3      	ldr	r3, [pc, #844]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	2140      	movs	r1, #64	@ 0x40
 80031ae:	0018      	movs	r0, r3
 80031b0:	f005 fdfd 	bl	8008dae <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80031b4:	2380      	movs	r3, #128	@ 0x80
 80031b6:	0099      	lsls	r1, r3, #2
 80031b8:	23a0      	movs	r3, #160	@ 0xa0
 80031ba:	05db      	lsls	r3, r3, #23
 80031bc:	2200      	movs	r2, #0
 80031be:	0018      	movs	r0, r3
 80031c0:	f005 fdf5 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80031c4:	4bcc      	ldr	r3, [pc, #816]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	2140      	movs	r1, #64	@ 0x40
 80031ca:	0018      	movs	r0, r3
 80031cc:	f005 fdef 	bl	8008dae <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING; //just in case
 80031d0:	4bca      	ldr	r3, [pc, #808]	@ (80034fc <UART2_RX_transfer_complete_callback+0x6a4>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 1;
 80031d6:	4bca      	ldr	r3, [pc, #808]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_PENDING_B2_MODE;
 80031dc:	4bc3      	ldr	r3, [pc, #780]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80031de:	220d      	movs	r2, #13
 80031e0:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 80031e2:	4bc2      	ldr	r3, [pc, #776]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80031e4:	2208      	movs	r2, #8
 80031e6:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 80031e8:	4bc6      	ldr	r3, [pc, #792]	@ (8003504 <UART2_RX_transfer_complete_callback+0x6ac>)
 80031ea:	2100      	movs	r1, #0
 80031ec:	0018      	movs	r0, r3
 80031ee:	f003 fb0e 	bl	800680e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 80031f2:	4bc5      	ldr	r3, [pc, #788]	@ (8003508 <UART2_RX_transfer_complete_callback+0x6b0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 80031f8:	4ac4      	ldr	r2, [pc, #784]	@ (800350c <UART2_RX_transfer_complete_callback+0x6b4>)
 80031fa:	4bbe      	ldr	r3, [pc, #760]	@ (80034f4 <UART2_RX_transfer_complete_callback+0x69c>)
 80031fc:	0011      	movs	r1, r2
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 fe34 	bl	8004e6c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 8003204:	4ac2      	ldr	r2, [pc, #776]	@ (8003510 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003206:	4bbb      	ldr	r3, [pc, #748]	@ (80034f4 <UART2_RX_transfer_complete_callback+0x69c>)
 8003208:	0011      	movs	r1, r2
 800320a:	0018      	movs	r0, r3
 800320c:	f001 fe2e 	bl	8004e6c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003210:	4bc0      	ldr	r3, [pc, #768]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003212:	2108      	movs	r1, #8
 8003214:	0018      	movs	r0, r3
 8003216:	f003 fb75 	bl	8006904 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 800321a:	4bbd      	ldr	r3, [pc, #756]	@ (8003510 <UART2_RX_transfer_complete_callback+0x6b8>)
 800321c:	2100      	movs	r1, #0
 800321e:	0018      	movs	r0, r3
 8003220:	f001 ffcc 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 8003224:	4abc      	ldr	r2, [pc, #752]	@ (8003518 <UART2_RX_transfer_complete_callback+0x6c0>)
 8003226:	4bba      	ldr	r3, [pc, #744]	@ (8003510 <UART2_RX_transfer_complete_callback+0x6b8>)
 8003228:	0011      	movs	r1, r2
 800322a:	0018      	movs	r0, r3
 800322c:	f002 f8bc 	bl	80053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003230:	4bba      	ldr	r3, [pc, #744]	@ (800351c <UART2_RX_transfer_complete_callback+0x6c4>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	001a      	movs	r2, r3
 8003236:	49ba      	ldr	r1, [pc, #744]	@ (8003520 <UART2_RX_transfer_complete_callback+0x6c8>)
 8003238:	4bba      	ldr	r3, [pc, #744]	@ (8003524 <UART2_RX_transfer_complete_callback+0x6cc>)
 800323a:	0018      	movs	r0, r3
 800323c:	f004 f806 	bl	800724c <HAL_ADC_Start_DMA>
 8003240:	f000 feb6 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == NO)){
 8003244:	4ba9      	ldr	r3, [pc, #676]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b08      	cmp	r3, #8
 800324c:	d146      	bne.n	80032dc <UART2_RX_transfer_complete_callback+0x484>
 800324e:	4bb1      	ldr	r3, [pc, #708]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003250:	2120      	movs	r1, #32
 8003252:	0018      	movs	r0, r3
 8003254:	f003 fb42 	bl	80068dc <Get_Status_Bit>
 8003258:	1e03      	subs	r3, r0, #0
 800325a:	d13f      	bne.n	80032dc <UART2_RX_transfer_complete_callback+0x484>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800325c:	4ba4      	ldr	r3, [pc, #656]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2bf8      	cmp	r3, #248	@ 0xf8
 8003264:	d001      	beq.n	800326a <UART2_RX_transfer_complete_callback+0x412>
 8003266:	f000 fea3 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_fsm = COMPILING; //just in case
 800326a:	4ba4      	ldr	r3, [pc, #656]	@ (80034fc <UART2_RX_transfer_complete_callback+0x6a4>)
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003270:	4ba3      	ldr	r3, [pc, #652]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	3301      	adds	r3, #1
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4ba1      	ldr	r3, [pc, #644]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800327c:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800327e:	4ba0      	ldr	r3, [pc, #640]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b0b      	cmp	r3, #11
 8003286:	d80f      	bhi.n	80032a8 <UART2_RX_transfer_complete_callback+0x450>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	0099      	lsls	r1, r3, #2
 800328c:	23a0      	movs	r3, #160	@ 0xa0
 800328e:	05db      	lsls	r3, r3, #23
 8003290:	2200      	movs	r2, #0
 8003292:	0018      	movs	r0, r3
 8003294:	f005 fd8b 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003298:	4b97      	ldr	r3, [pc, #604]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 800329a:	2201      	movs	r2, #1
 800329c:	2140      	movs	r1, #64	@ 0x40
 800329e:	0018      	movs	r0, r3
 80032a0:	f005 fd85 	bl	8008dae <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032a4:	f000 fe84 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80032a8:	4b95      	ldr	r3, [pc, #596]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b18      	cmp	r3, #24
 80032b0:	d80f      	bhi.n	80032d2 <UART2_RX_transfer_complete_callback+0x47a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80032b2:	2380      	movs	r3, #128	@ 0x80
 80032b4:	0099      	lsls	r1, r3, #2
 80032b6:	23a0      	movs	r3, #160	@ 0xa0
 80032b8:	05db      	lsls	r3, r3, #23
 80032ba:	2201      	movs	r2, #1
 80032bc:	0018      	movs	r0, r3
 80032be:	f005 fd76 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80032c2:	4b8d      	ldr	r3, [pc, #564]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	2140      	movs	r1, #64	@ 0x40
 80032c8:	0018      	movs	r0, r3
 80032ca:	f005 fd70 	bl	8008dae <HAL_GPIO_WritePin>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032ce:	f000 fe6f 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 80032d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80032d8:	f000 fe6a 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80032dc:	4b83      	ldr	r3, [pc, #524]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d14c      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0x528>
 80032e6:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <UART2_RX_transfer_complete_callback+0x6b0>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d147      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0x528>
 80032f0:	4b88      	ldr	r3, [pc, #544]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 80032f2:	2120      	movs	r1, #32
 80032f4:	0018      	movs	r0, r3
 80032f6:	f003 faf1 	bl	80068dc <Get_Status_Bit>
 80032fa:	0003      	movs	r3, r0
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d13f      	bne.n	8003380 <UART2_RX_transfer_complete_callback+0x528>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003300:	4b7b      	ldr	r3, [pc, #492]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2bf8      	cmp	r3, #248	@ 0xf8
 8003308:	d11e      	bne.n	8003348 <UART2_RX_transfer_complete_callback+0x4f0>

					MIDI_CLK_tag = 0; //just in case
 800330a:	4b7d      	ldr	r3, [pc, #500]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 8003310:	4b7b      	ldr	r3, [pc, #492]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4b79      	ldr	r3, [pc, #484]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800331c:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_fsm = COMPILING;
 800331e:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <UART2_RX_transfer_complete_callback+0x6a4>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B0_MODE;
 8003324:	4b71      	ldr	r3, [pc, #452]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003326:	2210      	movs	r2, #16
 8003328:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 800332a:	4b70      	ldr	r3, [pc, #448]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 800332c:	2208      	movs	r2, #8
 800332e:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003330:	4b78      	ldr	r3, [pc, #480]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003332:	2120      	movs	r1, #32
 8003334:	0018      	movs	r0, r3
 8003336:	f003 faf7 	bl	8006928 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800333a:	4b76      	ldr	r3, [pc, #472]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 800333c:	2140      	movs	r1, #64	@ 0x40
 800333e:	0018      	movs	r0, r3
 8003340:	f003 faf2 	bl	8006928 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003344:	f000 fe33 	bl	8003fae <UART2_RX_transfer_complete_callback+0x1156>
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003348:	4b69      	ldr	r3, [pc, #420]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2bfa      	cmp	r3, #250	@ 0xfa
 8003350:	d001      	beq.n	8003356 <UART2_RX_transfer_complete_callback+0x4fe>
 8003352:	f000 fe2c 	bl	8003fae <UART2_RX_transfer_complete_callback+0x1156>

					MIDI_CLK_tag = 0; //just in case
 8003356:	4b6a      	ldr	r3, [pc, #424]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A0_MODE;
 800335c:	4b63      	ldr	r3, [pc, #396]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 800335e:	220e      	movs	r2, #14
 8003360:	701a      	strb	r2, [r3, #0]
					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003362:	4b62      	ldr	r3, [pc, #392]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003364:	2208      	movs	r2, #8
 8003366:	705a      	strb	r2, [r3, #1]

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8003368:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 800336a:	2120      	movs	r1, #32
 800336c:	0018      	movs	r0, r3
 800336e:	f003 fadb 	bl	8006928 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8003372:	4b68      	ldr	r3, [pc, #416]	@ (8003514 <UART2_RX_transfer_complete_callback+0x6bc>)
 8003374:	2140      	movs	r1, #64	@ 0x40
 8003376:	0018      	movs	r0, r3
 8003378:	f003 fad6 	bl	8006928 <Clear_Status_Bit>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800337c:	f000 fe17 	bl	8003fae <UART2_RX_transfer_complete_callback+0x1156>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A0_MODE){
 8003380:	4b5a      	ldr	r3, [pc, #360]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b0e      	cmp	r3, #14
 8003388:	d123      	bne.n	80033d2 <UART2_RX_transfer_complete_callback+0x57a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800338a:	4b59      	ldr	r3, [pc, #356]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2bf8      	cmp	r3, #248	@ 0xf8
 8003392:	d001      	beq.n	8003398 <UART2_RX_transfer_complete_callback+0x540>
 8003394:	f000 fe0c 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003398:	2380      	movs	r3, #128	@ 0x80
 800339a:	0099      	lsls	r1, r3, #2
 800339c:	23a0      	movs	r3, #160	@ 0xa0
 800339e:	05db      	lsls	r3, r3, #23
 80033a0:	2200      	movs	r2, #0
 80033a2:	0018      	movs	r0, r3
 80033a4:	f005 fd03 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80033a8:	4b53      	ldr	r3, [pc, #332]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80033aa:	2201      	movs	r2, #1
 80033ac:	2140      	movs	r1, #64	@ 0x40
 80033ae:	0018      	movs	r0, r3
 80033b0:	f005 fcfd 	bl	8008dae <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = COMPILING;
 80033b4:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <UART2_RX_transfer_complete_callback+0x6a4>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag++;
 80033ba:	4b51      	ldr	r3, [pc, #324]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033c6:	701a      	strb	r2, [r3, #0]

					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 80033c8:	4b48      	ldr	r3, [pc, #288]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80033ca:	220f      	movs	r2, #15
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	f000 fdef 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_A1_MODE){
 80033d2:	4b46      	ldr	r3, [pc, #280]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b0f      	cmp	r3, #15
 80033da:	d142      	bne.n	8003462 <UART2_RX_transfer_complete_callback+0x60a>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80033dc:	4b44      	ldr	r3, [pc, #272]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2bf8      	cmp	r3, #248	@ 0xf8
 80033e4:	d001      	beq.n	80033ea <UART2_RX_transfer_complete_callback+0x592>
 80033e6:	f000 fde3 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					MIDI_CLK_tag++;
 80033ea:	4b45      	ldr	r3, [pc, #276]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	3301      	adds	r3, #1
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b42      	ldr	r3, [pc, #264]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033f6:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 80033f8:	4b41      	ldr	r3, [pc, #260]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b0b      	cmp	r3, #11
 8003400:	d80f      	bhi.n	8003422 <UART2_RX_transfer_complete_callback+0x5ca>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	0099      	lsls	r1, r3, #2
 8003406:	23a0      	movs	r3, #160	@ 0xa0
 8003408:	05db      	lsls	r3, r3, #23
 800340a:	2200      	movs	r2, #0
 800340c:	0018      	movs	r0, r3
 800340e:	f005 fcce 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003412:	4b39      	ldr	r3, [pc, #228]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 8003414:	2201      	movs	r2, #1
 8003416:	2140      	movs	r1, #64	@ 0x40
 8003418:	0018      	movs	r0, r3
 800341a:	f005 fcc8 	bl	8008dae <HAL_GPIO_WritePin>
 800341e:	f000 fdc7 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003422:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b18      	cmp	r3, #24
 800342a:	d80f      	bhi.n	800344c <UART2_RX_transfer_complete_callback+0x5f4>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800342c:	2380      	movs	r3, #128	@ 0x80
 800342e:	0099      	lsls	r1, r3, #2
 8003430:	23a0      	movs	r3, #160	@ 0xa0
 8003432:	05db      	lsls	r3, r3, #23
 8003434:	2201      	movs	r2, #1
 8003436:	0018      	movs	r0, r3
 8003438:	f005 fcb9 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800343c:	4b2e      	ldr	r3, [pc, #184]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 800343e:	2200      	movs	r2, #0
 8003440:	2140      	movs	r1, #64	@ 0x40
 8003442:	0018      	movs	r0, r3
 8003444:	f005 fcb3 	bl	8008dae <HAL_GPIO_WritePin>
 8003448:	f000 fdb2 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_A1_MODE;
 800344c:	4b27      	ldr	r3, [pc, #156]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 800344e:	220f      	movs	r2, #15
 8003450:	705a      	strb	r2, [r3, #1]
						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003452:	4b26      	ldr	r3, [pc, #152]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003454:	2208      	movs	r2, #8
 8003456:	701a      	strb	r2, [r3, #0]
						MIDI_CLK_tag = 1;
 8003458:	4b29      	ldr	r3, [pc, #164]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800345a:	2201      	movs	r2, #1
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	f000 fda7 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B0_MODE){
 8003462:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b10      	cmp	r3, #16
 800346a:	d15d      	bne.n	8003528 <UART2_RX_transfer_complete_callback+0x6d0>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 800346c:	4b20      	ldr	r3, [pc, #128]	@ (80034f0 <UART2_RX_transfer_complete_callback+0x698>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2bf8      	cmp	r3, #248	@ 0xf8
 8003474:	d001      	beq.n	800347a <UART2_RX_transfer_complete_callback+0x622>
 8003476:	f000 fd9b 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					//when sftwre timer times out the midi clk tag is reset to 0
					MIDI_CLK_tag++;
 800347a:	4b21      	ldr	r3, [pc, #132]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	b2db      	uxtb	r3, r3
 8003480:	3301      	adds	r3, #1
 8003482:	b2da      	uxtb	r2, r3
 8003484:	4b1e      	ldr	r3, [pc, #120]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 8003486:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b0b      	cmp	r3, #11
 8003490:	d80f      	bhi.n	80034b2 <UART2_RX_transfer_complete_callback+0x65a>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	0099      	lsls	r1, r3, #2
 8003496:	23a0      	movs	r3, #160	@ 0xa0
 8003498:	05db      	lsls	r3, r3, #23
 800349a:	2200      	movs	r2, #0
 800349c:	0018      	movs	r0, r3
 800349e:	f005 fc86 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80034a4:	2201      	movs	r2, #1
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	0018      	movs	r0, r3
 80034aa:	f005 fc80 	bl	8008dae <HAL_GPIO_WritePin>
 80034ae:	f000 fd7f 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 80034b2:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b18      	cmp	r3, #24
 80034ba:	d80f      	bhi.n	80034dc <UART2_RX_transfer_complete_callback+0x684>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80034bc:	2380      	movs	r3, #128	@ 0x80
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	23a0      	movs	r3, #160	@ 0xa0
 80034c2:	05db      	lsls	r3, r3, #23
 80034c4:	2201      	movs	r2, #1
 80034c6:	0018      	movs	r0, r3
 80034c8:	f005 fc71 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80034cc:	4b0a      	ldr	r3, [pc, #40]	@ (80034f8 <UART2_RX_transfer_complete_callback+0x6a0>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	2140      	movs	r1, #64	@ 0x40
 80034d2:	0018      	movs	r0, r3
 80034d4:	f005 fc6b 	bl	8008dae <HAL_GPIO_WritePin>
 80034d8:	f000 fd6a 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B1_MODE;
 80034dc:	4b03      	ldr	r3, [pc, #12]	@ (80034ec <UART2_RX_transfer_complete_callback+0x694>)
 80034de:	2211      	movs	r2, #17
 80034e0:	701a      	strb	r2, [r3, #0]
						//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
						MIDI_CLK_tag = 1;
 80034e2:	4b07      	ldr	r3, [pc, #28]	@ (8003500 <UART2_RX_transfer_complete_callback+0x6a8>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	f000 fd62 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
 80034ec:	20000430 	.word	0x20000430
 80034f0:	20000594 	.word	0x20000594
 80034f4:	20000d60 	.word	0x20000d60
 80034f8:	50000800 	.word	0x50000800
 80034fc:	20000da8 	.word	0x20000da8
 8003500:	20000cfa 	.word	0x20000cfa
 8003504:	20000988 	.word	0x20000988
 8003508:	20000444 	.word	0x20000444
 800350c:	20000d84 	.word	0x20000d84
 8003510:	20000d18 	.word	0x20000d18
 8003514:	20000cfc 	.word	0x20000cfc
 8003518:	20000028 	.word	0x20000028
 800351c:	0800e960 	.word	0x0800e960
 8003520:	20000d0c 	.word	0x20000d0c
 8003524:	200005b4 	.word	0x200005b4
					}
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B1_MODE){
 8003528:	4bed      	ldr	r3, [pc, #948]	@ (80038e0 <UART2_RX_transfer_complete_callback+0xa88>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b11      	cmp	r3, #17
 8003530:	d146      	bne.n	80035c0 <UART2_RX_transfer_complete_callback+0x768>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003532:	4bec      	ldr	r3, [pc, #944]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2bf8      	cmp	r3, #248	@ 0xf8
 800353a:	d135      	bne.n	80035a8 <UART2_RX_transfer_complete_callback+0x750>

					MIDI_CLK_tag++;
 800353c:	4bea      	ldr	r3, [pc, #936]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	b2db      	uxtb	r3, r3
 8003542:	3301      	adds	r3, #1
 8003544:	b2da      	uxtb	r2, r3
 8003546:	4be8      	ldr	r3, [pc, #928]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8003548:	701a      	strb	r2, [r3, #0]

					if(MIDI_CLK_tag < 12){
 800354a:	4be7      	ldr	r3, [pc, #924]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b0b      	cmp	r3, #11
 8003552:	d80f      	bhi.n	8003574 <UART2_RX_transfer_complete_callback+0x71c>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003554:	2380      	movs	r3, #128	@ 0x80
 8003556:	0099      	lsls	r1, r3, #2
 8003558:	23a0      	movs	r3, #160	@ 0xa0
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	2200      	movs	r2, #0
 800355e:	0018      	movs	r0, r3
 8003560:	f005 fc25 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003564:	4be1      	ldr	r3, [pc, #900]	@ (80038ec <UART2_RX_transfer_complete_callback+0xa94>)
 8003566:	2201      	movs	r2, #1
 8003568:	2140      	movs	r1, #64	@ 0x40
 800356a:	0018      	movs	r0, r3
 800356c:	f005 fc1f 	bl	8008dae <HAL_GPIO_WritePin>
 8003570:	f000 fd1e 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else if(MIDI_CLK_tag < 25){
 8003574:	4bdc      	ldr	r3, [pc, #880]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b18      	cmp	r3, #24
 800357c:	d80f      	bhi.n	800359e <UART2_RX_transfer_complete_callback+0x746>

						HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 800357e:	2380      	movs	r3, #128	@ 0x80
 8003580:	0099      	lsls	r1, r3, #2
 8003582:	23a0      	movs	r3, #160	@ 0xa0
 8003584:	05db      	lsls	r3, r3, #23
 8003586:	2201      	movs	r2, #1
 8003588:	0018      	movs	r0, r3
 800358a:	f005 fc10 	bl	8008dae <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800358e:	4bd7      	ldr	r3, [pc, #860]	@ (80038ec <UART2_RX_transfer_complete_callback+0xa94>)
 8003590:	2200      	movs	r2, #0
 8003592:	2140      	movs	r1, #64	@ 0x40
 8003594:	0018      	movs	r0, r3
 8003596:	f005 fc0a 	bl	8008dae <HAL_GPIO_WritePin>
 800359a:	f000 fd09 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					else{

						MIDI_CLK_tag = 1;
 800359e:	4bd2      	ldr	r3, [pc, #840]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	f000 fd04 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
				}
				else if(*rx_buffer == SYSTEM_REAL_TIME_START){
 80035a8:	4bce      	ldr	r3, [pc, #824]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2bfa      	cmp	r3, #250	@ 0xfa
 80035b0:	d001      	beq.n	80035b6 <UART2_RX_transfer_complete_callback+0x75e>
 80035b2:	f000 fcfd 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					//DO NOT UPDATE PREV STATE - we need to keep track of what the state was prior to any pending state
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 80035b6:	4bca      	ldr	r3, [pc, #808]	@ (80038e0 <UART2_RX_transfer_complete_callback+0xa88>)
 80035b8:	2212      	movs	r2, #18
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	f000 fcf8 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
				}
			}
			else if(speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_RESYNC_B2_MODE){
 80035c0:	4bc7      	ldr	r3, [pc, #796]	@ (80038e0 <UART2_RX_transfer_complete_callback+0xa88>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b12      	cmp	r3, #18
 80035c8:	d001      	beq.n	80035ce <UART2_RX_transfer_complete_callback+0x776>
 80035ca:	f000 fcf1 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 80035ce:	4bc5      	ldr	r3, [pc, #788]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2bf8      	cmp	r3, #248	@ 0xf8
 80035d6:	d001      	beq.n	80035dc <UART2_RX_transfer_complete_callback+0x784>
 80035d8:	f000 fcea 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					// @TODO //WRITE CODE TO LOAD CORRECT DUTY DELAYED VALUE TO SECONDARY OSCILLATOR
					Set_Oscillator_Values(&params_to_be_loaded);
 80035dc:	4bc4      	ldr	r3, [pc, #784]	@ (80038f0 <UART2_RX_transfer_complete_callback+0xa98>)
 80035de:	0018      	movs	r0, r3
 80035e0:	f001 fdc0 	bl	8005164 <Set_Oscillator_Values>

					//Give it another IP CAP edge upon sync
					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	0099      	lsls	r1, r3, #2
 80035e8:	23a0      	movs	r3, #160	@ 0xa0
 80035ea:	05db      	lsls	r3, r3, #23
 80035ec:	2201      	movs	r2, #1
 80035ee:	0018      	movs	r0, r3
 80035f0:	f005 fbdd 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80035f4:	4bbd      	ldr	r3, [pc, #756]	@ (80038ec <UART2_RX_transfer_complete_callback+0xa94>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	2140      	movs	r1, #64	@ 0x40
 80035fa:	0018      	movs	r0, r3
 80035fc:	f005 fbd7 	bl	8008dae <HAL_GPIO_WritePin>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	23a0      	movs	r3, #160	@ 0xa0
 8003606:	05db      	lsls	r3, r3, #23
 8003608:	2200      	movs	r2, #0
 800360a:	0018      	movs	r0, r3
 800360c:	f005 fbcf 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8003610:	4bb6      	ldr	r3, [pc, #728]	@ (80038ec <UART2_RX_transfer_complete_callback+0xa94>)
 8003612:	2201      	movs	r2, #1
 8003614:	2140      	movs	r1, #64	@ 0x40
 8003616:	0018      	movs	r0, r3
 8003618:	f005 fbc9 	bl	8008dae <HAL_GPIO_WritePin>

					speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_RESYNC_B2_MODE;
 800361c:	4bb0      	ldr	r3, [pc, #704]	@ (80038e0 <UART2_RX_transfer_complete_callback+0xa88>)
 800361e:	2212      	movs	r2, #18
 8003620:	705a      	strb	r2, [r3, #1]
					speed_fsm.current_state.speed_exclusive_state = MIDI_CLK_MODE;
 8003622:	4baf      	ldr	r3, [pc, #700]	@ (80038e0 <UART2_RX_transfer_complete_callback+0xa88>)
 8003624:	2208      	movs	r2, #8
 8003626:	701a      	strb	r2, [r3, #0]

					MIDI_CLK_tag = 1;
 8003628:	4baf      	ldr	r3, [pc, #700]	@ (80038e8 <UART2_RX_transfer_complete_callback+0xa90>)
 800362a:	2201      	movs	r2, #1
 800362c:	701a      	strb	r2, [r3, #0]

					Stop_OC_TIM(&htim3, TIM_CHANNEL_1); //do we need?
 800362e:	4bb1      	ldr	r3, [pc, #708]	@ (80038f4 <UART2_RX_transfer_complete_callback+0xa9c>)
 8003630:	2100      	movs	r1, #0
 8003632:	0018      	movs	r0, r3
 8003634:	f003 f8eb 	bl	800680e <Stop_OC_TIM>
					IP_CAP_fsm.current_state = IDLE; //force idle so next edge is forced to be computed as first edge
 8003638:	4baf      	ldr	r3, [pc, #700]	@ (80038f8 <UART2_RX_transfer_complete_callback+0xaa0>)
 800363a:	2200      	movs	r2, #0
 800363c:	701a      	strb	r2, [r3, #0]

					Copy_Params_Structs(&params_to_be_loaded, &params_working);
 800363e:	4aaf      	ldr	r2, [pc, #700]	@ (80038fc <UART2_RX_transfer_complete_callback+0xaa4>)
 8003640:	4bab      	ldr	r3, [pc, #684]	@ (80038f0 <UART2_RX_transfer_complete_callback+0xa98>)
 8003642:	0011      	movs	r1, r2
 8003644:	0018      	movs	r0, r3
 8003646:	f001 fc11 	bl	8004e6c <Copy_Params_Structs>
					Copy_Params_Structs(&params_to_be_loaded, &params);
 800364a:	4aad      	ldr	r2, [pc, #692]	@ (8003900 <UART2_RX_transfer_complete_callback+0xaa8>)
 800364c:	4ba8      	ldr	r3, [pc, #672]	@ (80038f0 <UART2_RX_transfer_complete_callback+0xa98>)
 800364e:	0011      	movs	r1, r2
 8003650:	0018      	movs	r0, r3
 8003652:	f001 fc0b 	bl	8004e6c <Copy_Params_Structs>

					Set_Status_Bit(&statuses, First_Sync_Complete);
 8003656:	4bab      	ldr	r3, [pc, #684]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 8003658:	2108      	movs	r1, #8
 800365a:	0018      	movs	r0, r3
 800365c:	f003 f952 	bl	8006904 <Set_Status_Bit>

					Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)REGULAR_MODE);
 8003660:	4ba7      	ldr	r3, [pc, #668]	@ (8003900 <UART2_RX_transfer_complete_callback+0xaa8>)
 8003662:	2100      	movs	r1, #0
 8003664:	0018      	movs	r0, r3
 8003666:	f001 fda9 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
					Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 800366a:	4aa7      	ldr	r2, [pc, #668]	@ (8003908 <UART2_RX_transfer_complete_callback+0xab0>)
 800366c:	4ba4      	ldr	r3, [pc, #656]	@ (8003900 <UART2_RX_transfer_complete_callback+0xaa8>)
 800366e:	0011      	movs	r1, r2
 8003670:	0018      	movs	r0, r3
 8003672:	f001 fe99 	bl	80053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
					HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions); //this function takes ages to execute!
 8003676:	4ba5      	ldr	r3, [pc, #660]	@ (800390c <UART2_RX_transfer_complete_callback+0xab4>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	001a      	movs	r2, r3
 800367c:	49a4      	ldr	r1, [pc, #656]	@ (8003910 <UART2_RX_transfer_complete_callback+0xab8>)
 800367e:	4ba5      	ldr	r3, [pc, #660]	@ (8003914 <UART2_RX_transfer_complete_callback+0xabc>)
 8003680:	0018      	movs	r0, r3
 8003682:	f003 fde3 	bl	800724c <HAL_ADC_Start_DMA>
 8003686:	f000 fc93 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
		}
	}
	//not a realtime status byte
	else{

		if(active_status_byte == 0){
 800368a:	4ba3      	ldr	r3, [pc, #652]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	d000      	beq.n	8003696 <UART2_RX_transfer_complete_callback+0x83e>
 8003694:	e29e      	b.n	8003bd4 <UART2_RX_transfer_complete_callback+0xd7c>

			if(running_status_byte == 0){
 8003696:	4ba1      	ldr	r3, [pc, #644]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d000      	beq.n	80036a2 <UART2_RX_transfer_complete_callback+0x84a>
 80036a0:	e0a3      	b.n	80037ea <UART2_RX_transfer_complete_callback+0x992>

				if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80036a2:	4b9f      	ldr	r3, [pc, #636]	@ (8003920 <UART2_RX_transfer_complete_callback+0xac8>)
 80036a4:	0018      	movs	r0, r3
 80036a6:	f7fe f812 	bl	80016ce <Is_Data_Buffer_Empty>
 80036aa:	0003      	movs	r3, r0
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d001      	beq.n	80036b4 <UART2_RX_transfer_complete_callback+0x85c>
 80036b0:	f000 fc7e 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					if(Is_Status_Byte(rx_buffer) == YES){
 80036b4:	4b8b      	ldr	r3, [pc, #556]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036b6:	0018      	movs	r0, r3
 80036b8:	f7fd fec8 	bl	800144c <Is_Status_Byte>
 80036bc:	0003      	movs	r3, r0
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d001      	beq.n	80036c6 <UART2_RX_transfer_complete_callback+0x86e>
 80036c2:	f000 fc75 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_PC_Status_Byte(rx_buffer) == YES){
 80036c6:	4b87      	ldr	r3, [pc, #540]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fd fef1 	bl	80014b0 <Is_PC_Status_Byte>
 80036ce:	0003      	movs	r3, r0
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d134      	bne.n	800373e <UART2_RX_transfer_complete_callback+0x8e6>

							running_status_byte = (uint8_t)*rx_buffer;
 80036d4:	4b83      	ldr	r3, [pc, #524]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b90      	ldr	r3, [pc, #576]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 80036dc:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 80036de:	4b91      	ldr	r3, [pc, #580]	@ (8003924 <UART2_RX_transfer_complete_callback+0xacc>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	4b7f      	ldr	r3, [pc, #508]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036e6:	0011      	movs	r1, r2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7fd ffcf 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 80036ee:	0003      	movs	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d10d      	bne.n	8003710 <UART2_RX_transfer_complete_callback+0x8b8>

								active_status_byte = (uint8_t)*rx_buffer;
 80036f4:	4b7b      	ldr	r3, [pc, #492]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	4b87      	ldr	r3, [pc, #540]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 80036fc:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80036fe:	2380      	movs	r3, #128	@ 0x80
 8003700:	005a      	lsls	r2, r3, #1
 8003702:	4b80      	ldr	r3, [pc, #512]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 8003704:	0011      	movs	r1, r2
 8003706:	0018      	movs	r0, r3
 8003708:	f003 f8fc 	bl	8006904 <Set_Status_Bit>
 800370c:	f000 fc50 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003710:	4b7c      	ldr	r3, [pc, #496]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 8003712:	0018      	movs	r0, r3
 8003714:	f7fe f871 	bl	80017fa <Is_OMNI_On>
 8003718:	0003      	movs	r3, r0
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <UART2_RX_transfer_complete_callback+0x8ca>
 800371e:	f000 fc47 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 8003722:	4b70      	ldr	r3, [pc, #448]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b7b      	ldr	r3, [pc, #492]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 800372a:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	005a      	lsls	r2, r3, #1
 8003730:	4b74      	ldr	r3, [pc, #464]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f003 f8e5 	bl	8006904 <Set_Status_Bit>
 800373a:	f000 fc39 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_CC_Status_Byte(rx_buffer) == YES){
 800373e:	4b69      	ldr	r3, [pc, #420]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003740:	0018      	movs	r0, r3
 8003742:	f7fd fed1 	bl	80014e8 <Is_CC_Status_Byte>
 8003746:	0003      	movs	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d134      	bne.n	80037b6 <UART2_RX_transfer_complete_callback+0x95e>

							running_status_byte = (uint8_t)*rx_buffer;
 800374c:	4b65      	ldr	r3, [pc, #404]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4b72      	ldr	r3, [pc, #456]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 8003754:	701a      	strb	r2, [r3, #0]

							if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003756:	4b73      	ldr	r3, [pc, #460]	@ (8003924 <UART2_RX_transfer_complete_callback+0xacc>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2da      	uxtb	r2, r3
 800375c:	4b61      	ldr	r3, [pc, #388]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800375e:	0011      	movs	r1, r2
 8003760:	0018      	movs	r0, r3
 8003762:	f7fd ff93 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003766:	0003      	movs	r3, r0
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10d      	bne.n	8003788 <UART2_RX_transfer_complete_callback+0x930>

								active_status_byte = (uint8_t)*rx_buffer;
 800376c:	4b5d      	ldr	r3, [pc, #372]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b69      	ldr	r3, [pc, #420]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 8003774:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003776:	2380      	movs	r3, #128	@ 0x80
 8003778:	005a      	lsls	r2, r3, #1
 800377a:	4b62      	ldr	r3, [pc, #392]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f003 f8c0 	bl	8006904 <Set_Status_Bit>
 8003784:	f000 fc14 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else{

								if(Is_OMNI_On(&statuses) == YES){
 8003788:	4b5e      	ldr	r3, [pc, #376]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 800378a:	0018      	movs	r0, r3
 800378c:	f7fe f835 	bl	80017fa <Is_OMNI_On>
 8003790:	0003      	movs	r3, r0
 8003792:	2b01      	cmp	r3, #1
 8003794:	d001      	beq.n	800379a <UART2_RX_transfer_complete_callback+0x942>
 8003796:	f000 fc0b 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

									active_status_byte = (uint8_t)*rx_buffer;
 800379a:	4b52      	ldr	r3, [pc, #328]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b5d      	ldr	r3, [pc, #372]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 80037a2:	701a      	strb	r2, [r3, #0]
									Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	005a      	lsls	r2, r3, #1
 80037a8:	4b56      	ldr	r3, [pc, #344]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f003 f8a9 	bl	8006904 <Set_Status_Bit>
 80037b2:	f000 fbfd 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								}
							}
						}
						else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 80037b6:	4b4b      	ldr	r3, [pc, #300]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037b8:	0018      	movs	r0, r3
 80037ba:	f7fd ff57 	bl	800166c <Is_Sysex_Start_Status_Byte>
 80037be:	0003      	movs	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d001      	beq.n	80037c8 <UART2_RX_transfer_complete_callback+0x970>
 80037c4:	f000 fbf4 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							active_status_byte = (uint8_t)*rx_buffer;
 80037c8:	4b46      	ldr	r3, [pc, #280]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	4b52      	ldr	r3, [pc, #328]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 80037d0:	701a      	strb	r2, [r3, #0]
							running_status_byte = 0;
 80037d2:	4b52      	ldr	r3, [pc, #328]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	005a      	lsls	r2, r3, #1
 80037dc:	4b49      	ldr	r3, [pc, #292]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 80037de:	0011      	movs	r1, r2
 80037e0:	0018      	movs	r0, r3
 80037e2:	f003 f88f 	bl	8006904 <Set_Status_Bit>
 80037e6:	f000 fbe3 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
					}
				}
			}
			else if(running_status_byte != 0){
 80037ea:	4b4c      	ldr	r3, [pc, #304]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <UART2_RX_transfer_complete_callback+0x9a0>
 80037f4:	f000 fbdc 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

				if(Is_Data_Byte(rx_buffer) == YES){
 80037f8:	4b3a      	ldr	r3, [pc, #232]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80037fa:	0018      	movs	r0, r3
 80037fc:	f7fd fe3f 	bl	800147e <Is_Data_Byte>
 8003800:	0003      	movs	r3, r0
 8003802:	2b01      	cmp	r3, #1
 8003804:	d000      	beq.n	8003808 <UART2_RX_transfer_complete_callback+0x9b0>
 8003806:	e151      	b.n	8003aac <UART2_RX_transfer_complete_callback+0xc54>

					Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003808:	2380      	movs	r3, #128	@ 0x80
 800380a:	005a      	lsls	r2, r3, #1
 800380c:	4b3d      	ldr	r3, [pc, #244]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 800380e:	0011      	movs	r1, r2
 8003810:	0018      	movs	r0, r3
 8003812:	f003 f877 	bl	8006904 <Set_Status_Bit>

					if(Is_PC_Status_Byte(&running_status_byte) == YES){
 8003816:	4b41      	ldr	r3, [pc, #260]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 8003818:	0018      	movs	r0, r3
 800381a:	f7fd fe49 	bl	80014b0 <Is_PC_Status_Byte>
 800381e:	0003      	movs	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d143      	bne.n	80038ac <UART2_RX_transfer_complete_callback+0xa54>

						if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 8003824:	4b3f      	ldr	r3, [pc, #252]	@ (8003924 <UART2_RX_transfer_complete_callback+0xacc>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4b3c      	ldr	r3, [pc, #240]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 800382c:	0011      	movs	r1, r2
 800382e:	0018      	movs	r0, r3
 8003830:	f7fd ff2c 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003834:	0003      	movs	r3, r0
 8003836:	2b01      	cmp	r3, #1
 8003838:	d008      	beq.n	800384c <UART2_RX_transfer_complete_callback+0x9f4>
																|| (Is_OMNI_On(&statuses) == YES)){
 800383a:	4b32      	ldr	r3, [pc, #200]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 800383c:	0018      	movs	r0, r3
 800383e:	f7fd ffdc 	bl	80017fa <Is_OMNI_On>
 8003842:	0003      	movs	r3, r0
 8003844:	2b01      	cmp	r3, #1
 8003846:	d001      	beq.n	800384c <UART2_RX_transfer_complete_callback+0x9f4>
 8003848:	f000 fbb2 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 800384c:	4b34      	ldr	r3, [pc, #208]	@ (8003920 <UART2_RX_transfer_complete_callback+0xac8>)
 800384e:	0018      	movs	r0, r3
 8003850:	f7fd ff3d 	bl	80016ce <Is_Data_Buffer_Empty>
 8003854:	0003      	movs	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <UART2_RX_transfer_complete_callback+0xa06>
 800385a:	f000 fba9 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								//first data byte received
								if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 800385e:	4b21      	ldr	r3, [pc, #132]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003860:	2104      	movs	r1, #4
 8003862:	0018      	movs	r0, r3
 8003864:	f7fd ff81 	bl	800176a <Is_Program_Change_Data_Byte_In_Range>
 8003868:	0003      	movs	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10f      	bne.n	800388e <UART2_RX_transfer_complete_callback+0xa36>

									Set_All_Pots_to_PC_Mode();
 800386e:	f7fd fd39 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
									preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003872:	4b1c      	ldr	r3, [pc, #112]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	b2db      	uxtb	r3, r3
 8003878:	3301      	adds	r3, #1
 800387a:	b2da      	uxtb	r2, r3
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <UART2_RX_transfer_complete_callback+0xad0>)
 800387e:	701a      	strb	r2, [r3, #0]
									Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003880:	f7fc fe72 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
									Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003884:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 8003886:	2108      	movs	r1, #8
 8003888:	0018      	movs	r0, r3
 800388a:	f003 f84d 	bl	8006928 <Clear_Status_Bit>
								}

								//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
								Clear_Data_Buffer(&MIDI_data);
 800388e:	4b24      	ldr	r3, [pc, #144]	@ (8003920 <UART2_RX_transfer_complete_callback+0xac8>)
 8003890:	0018      	movs	r0, r3
 8003892:	f7fd ff4c 	bl	800172e <Clear_Data_Buffer>
								active_status_byte = 0;
 8003896:	4b20      	ldr	r3, [pc, #128]	@ (8003918 <UART2_RX_transfer_complete_callback+0xac0>)
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]

								//not really required
								Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800389c:	4a19      	ldr	r2, [pc, #100]	@ (8003904 <UART2_RX_transfer_complete_callback+0xaac>)
 800389e:	4b23      	ldr	r3, [pc, #140]	@ (800392c <UART2_RX_transfer_complete_callback+0xad4>)
 80038a0:	0011      	movs	r1, r2
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7fd ffc3 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>
 80038a8:	f000 fb82 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(&running_status_byte) == YES){
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <UART2_RX_transfer_complete_callback+0xac4>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fd fe1a 	bl	80014e8 <Is_CC_Status_Byte>
 80038b4:	0003      	movs	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d001      	beq.n	80038be <UART2_RX_transfer_complete_callback+0xa66>
 80038ba:	f000 fb79 	bl	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 80038be:	4b18      	ldr	r3, [pc, #96]	@ (8003920 <UART2_RX_transfer_complete_callback+0xac8>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f7fd ff04 	bl	80016ce <Is_Data_Buffer_Empty>
 80038c6:	0003      	movs	r3, r0
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d131      	bne.n	8003930 <UART2_RX_transfer_complete_callback+0xad8>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <UART2_RX_transfer_complete_callback+0xa8c>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	4b13      	ldr	r3, [pc, #76]	@ (8003920 <UART2_RX_transfer_complete_callback+0xac8>)
 80038d4:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 80038d6:	4b15      	ldr	r3, [pc, #84]	@ (800392c <UART2_RX_transfer_complete_callback+0xad4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	e368      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	20000430 	.word	0x20000430
 80038e4:	20000594 	.word	0x20000594
 80038e8:	20000cfa 	.word	0x20000cfa
 80038ec:	50000800 	.word	0x50000800
 80038f0:	20000d60 	.word	0x20000d60
 80038f4:	20000988 	.word	0x20000988
 80038f8:	20000444 	.word	0x20000444
 80038fc:	20000d84 	.word	0x20000d84
 8003900:	20000d18 	.word	0x20000d18
 8003904:	20000cfc 	.word	0x20000cfc
 8003908:	20000028 	.word	0x20000028
 800390c:	0800e960 	.word	0x0800e960
 8003910:	20000d0c 	.word	0x20000d0c
 8003914:	200005b4 	.word	0x200005b4
 8003918:	20000583 	.word	0x20000583
 800391c:	20000584 	.word	0x20000584
 8003920:	20000588 	.word	0x20000588
 8003924:	20000582 	.word	0x20000582
 8003928:	20000554 	.word	0x20000554
 800392c:	20000d04 	.word	0x20000d04

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003930:	4bd6      	ldr	r3, [pc, #856]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	4bd6      	ldr	r3, [pc, #856]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003938:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 800393a:	4ad6      	ldr	r2, [pc, #856]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 800393c:	4bd6      	ldr	r3, [pc, #856]	@ (8003c98 <UART2_RX_transfer_complete_callback+0xe40>)
 800393e:	0011      	movs	r1, r2
 8003940:	0018      	movs	r0, r3
 8003942:	f7fd ff74 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003946:	4bd2      	ldr	r3, [pc, #840]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003948:	0018      	movs	r0, r3
 800394a:	f7fd fde9 	bl	8001520 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 800394e:	0003      	movs	r3, r0
 8003950:	2b01      	cmp	r3, #1
 8003952:	d14c      	bne.n	80039ee <UART2_RX_transfer_complete_callback+0xb96>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES){
 8003954:	4bd1      	ldr	r3, [pc, #836]	@ (8003c9c <UART2_RX_transfer_complete_callback+0xe44>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4bd1      	ldr	r3, [pc, #836]	@ (8003ca0 <UART2_RX_transfer_complete_callback+0xe48>)
 800395c:	0011      	movs	r1, r2
 800395e:	0018      	movs	r0, r3
 8003960:	f7fd fe94 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003964:	0003      	movs	r3, r0
 8003966:	2b01      	cmp	r3, #1
 8003968:	d139      	bne.n	80039de <UART2_RX_transfer_complete_callback+0xb86>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 800396a:	4ace      	ldr	r2, [pc, #824]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 800396c:	4bc8      	ldr	r3, [pc, #800]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 800396e:	0011      	movs	r1, r2
 8003970:	0018      	movs	r0, r3
 8003972:	f7fd fe34 	bl	80015de <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003976:	0003      	movs	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d130      	bne.n	80039de <UART2_RX_transfer_complete_callback+0xb86>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 800397c:	4bc4      	ldr	r3, [pc, #784]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b79      	cmp	r3, #121	@ 0x79
 8003984:	d10b      	bne.n	800399e <UART2_RX_transfer_complete_callback+0xb46>

											Reset_All_Controllers(&params, &delay_line);
 8003986:	4ac8      	ldr	r2, [pc, #800]	@ (8003ca8 <UART2_RX_transfer_complete_callback+0xe50>)
 8003988:	4bc8      	ldr	r3, [pc, #800]	@ (8003cac <UART2_RX_transfer_complete_callback+0xe54>)
 800398a:	0011      	movs	r1, r2
 800398c:	0018      	movs	r0, r3
 800398e:	f7fd ff69 	bl	8001864 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003992:	4bc0      	ldr	r3, [pc, #768]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003994:	2108      	movs	r1, #8
 8003996:	0018      	movs	r0, r3
 8003998:	f002 ffc6 	bl	8006928 <Clear_Status_Bit>
 800399c:	e01f      	b.n	80039de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 800399e:	4bbc      	ldr	r3, [pc, #752]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 80039a0:	785b      	ldrb	r3, [r3, #1]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b7a      	cmp	r3, #122	@ 0x7a
 80039a6:	d107      	bne.n	80039b8 <UART2_RX_transfer_complete_callback+0xb60>

											Set_Local_Control();
 80039a8:	f7fd ffb6 	bl	8001918 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 80039ac:	4bb9      	ldr	r3, [pc, #740]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039ae:	2108      	movs	r1, #8
 80039b0:	0018      	movs	r0, r3
 80039b2:	f002 ffb9 	bl	8006928 <Clear_Status_Bit>
 80039b6:	e012      	b.n	80039de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 80039b8:	4bb5      	ldr	r3, [pc, #724]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b7c      	cmp	r3, #124	@ 0x7c
 80039c0:	d104      	bne.n	80039cc <UART2_RX_transfer_complete_callback+0xb74>

											Set_OMNI_Off(&statuses);
 80039c2:	4bb4      	ldr	r3, [pc, #720]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f7fd ffdf 	bl	8001988 <Set_OMNI_Off>
 80039ca:	e008      	b.n	80039de <UART2_RX_transfer_complete_callback+0xb86>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 80039cc:	4bb0      	ldr	r3, [pc, #704]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 80039ce:	785b      	ldrb	r3, [r3, #1]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b7d      	cmp	r3, #125	@ 0x7d
 80039d4:	d103      	bne.n	80039de <UART2_RX_transfer_complete_callback+0xb86>

											Set_OMNI_On(&statuses);
 80039d6:	4baf      	ldr	r3, [pc, #700]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 80039d8:	0018      	movs	r0, r3
 80039da:	f7fd ffe5 	bl	80019a8 <Set_OMNI_On>
										}
									}
								}

								//not required
								active_status_byte = 0;
 80039de:	4bb4      	ldr	r3, [pc, #720]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 80039e4:	4baa      	ldr	r3, [pc, #680]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f7fd fea1 	bl	800172e <Clear_Data_Buffer>
 80039ec:	e2e0      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 80039ee:	4ba8      	ldr	r3, [pc, #672]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fd fdc1 	bl	8001578 <Is_Utilised_CC_First_Data_Byte>
 80039f6:	0003      	movs	r3, r0
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d14f      	bne.n	8003a9c <UART2_RX_transfer_complete_callback+0xc44>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&running_status_byte, MIDI_basic_channel) == YES)
 80039fc:	4ba7      	ldr	r3, [pc, #668]	@ (8003c9c <UART2_RX_transfer_complete_callback+0xe44>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	4ba7      	ldr	r3, [pc, #668]	@ (8003ca0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f7fd fe40 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003a0c:	0003      	movs	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d006      	beq.n	8003a20 <UART2_RX_transfer_complete_callback+0xbc8>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003a12:	4ba0      	ldr	r3, [pc, #640]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7fd fef0 	bl	80017fa <Is_OMNI_On>
 8003a1a:	0003      	movs	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d135      	bne.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003a20:	4b9b      	ldr	r3, [pc, #620]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b14      	cmp	r3, #20
 8003a28:	d104      	bne.n	8003a34 <UART2_RX_transfer_complete_callback+0xbdc>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fd fbd7 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003a32:	e02b      	b.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003a34:	4b96      	ldr	r3, [pc, #600]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b15      	cmp	r3, #21
 8003a3c:	d109      	bne.n	8003a52 <UART2_RX_transfer_complete_callback+0xbfa>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a3e:	4b99      	ldr	r3, [pc, #612]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a40:	0018      	movs	r0, r3
 8003a42:	f7fd fbe7 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003a46:	4b93      	ldr	r3, [pc, #588]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003a48:	2108      	movs	r1, #8
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f002 ff6c 	bl	8006928 <Clear_Status_Bit>
 8003a50:	e01c      	b.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003a52:	4b8f      	ldr	r3, [pc, #572]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b16      	cmp	r3, #22
 8003a5a:	d104      	bne.n	8003a66 <UART2_RX_transfer_complete_callback+0xc0e>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a5c:	4b91      	ldr	r3, [pc, #580]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f7fd fbf2 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003a64:	e012      	b.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003a66:	4b8a      	ldr	r3, [pc, #552]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b17      	cmp	r3, #23
 8003a6e:	d104      	bne.n	8003a7a <UART2_RX_transfer_complete_callback+0xc22>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a70:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7fd fc02 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003a78:	e008      	b.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003a7a:	4b85      	ldr	r3, [pc, #532]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b18      	cmp	r3, #24
 8003a82:	d103      	bne.n	8003a8c <UART2_RX_transfer_complete_callback+0xc34>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003a84:	4b87      	ldr	r3, [pc, #540]	@ (8003ca4 <UART2_RX_transfer_complete_callback+0xe4c>)
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fd fc12 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003a8c:	4b88      	ldr	r3, [pc, #544]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003a92:	4b7f      	ldr	r3, [pc, #508]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003a94:	0018      	movs	r0, r3
 8003a96:	f7fd fe4a 	bl	800172e <Clear_Data_Buffer>
 8003a9a:	e289      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003a9c:	4b84      	ldr	r3, [pc, #528]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7fd fe42 	bl	800172e <Clear_Data_Buffer>
 8003aaa:	e281      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
					}
					//don't need to check Sysex with running status, as not supported by MIDI
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003aac:	4b78      	ldr	r3, [pc, #480]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003aae:	0018      	movs	r0, r3
 8003ab0:	f7fd fe3d 	bl	800172e <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003ab4:	4a77      	ldr	r2, [pc, #476]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003ab6:	4b78      	ldr	r3, [pc, #480]	@ (8003c98 <UART2_RX_transfer_complete_callback+0xe40>)
 8003ab8:	0011      	movs	r1, r2
 8003aba:	0018      	movs	r0, r3
 8003abc:	f7fd feb7 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003ac0:	4b72      	ldr	r3, [pc, #456]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fd fcf4 	bl	80014b0 <Is_PC_Status_Byte>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d131      	bne.n	8003b32 <UART2_RX_transfer_complete_callback+0xcda>

						running_status_byte = (uint8_t)*rx_buffer;
 8003ace:	4b6f      	ldr	r3, [pc, #444]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	b2da      	uxtb	r2, r3
 8003ad4:	4b72      	ldr	r3, [pc, #456]	@ (8003ca0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003ad6:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003ad8:	4b70      	ldr	r3, [pc, #448]	@ (8003c9c <UART2_RX_transfer_complete_callback+0xe44>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4b6b      	ldr	r3, [pc, #428]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003ae0:	0011      	movs	r1, r2
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fd fdd2 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10c      	bne.n	8003b08 <UART2_RX_transfer_complete_callback+0xcb0>

							active_status_byte = (uint8_t)*rx_buffer;
 8003aee:	4b67      	ldr	r3, [pc, #412]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003af6:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003af8:	2380      	movs	r3, #128	@ 0x80
 8003afa:	005a      	lsls	r2, r3, #1
 8003afc:	4b65      	ldr	r3, [pc, #404]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003afe:	0011      	movs	r1, r2
 8003b00:	0018      	movs	r0, r3
 8003b02:	f002 feff 	bl	8006904 <Set_Status_Bit>
 8003b06:	e253      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003b08:	4b62      	ldr	r3, [pc, #392]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7fd fe75 	bl	80017fa <Is_OMNI_On>
 8003b10:	0003      	movs	r3, r0
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d000      	beq.n	8003b18 <UART2_RX_transfer_complete_callback+0xcc0>
 8003b16:	e24b      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003b18:	4b5c      	ldr	r3, [pc, #368]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b64      	ldr	r3, [pc, #400]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b20:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b22:	2380      	movs	r3, #128	@ 0x80
 8003b24:	005a      	lsls	r2, r3, #1
 8003b26:	4b5b      	ldr	r3, [pc, #364]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b28:	0011      	movs	r1, r2
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f002 feea 	bl	8006904 <Set_Status_Bit>
 8003b30:	e23e      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003b32:	4b56      	ldr	r3, [pc, #344]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b34:	0018      	movs	r0, r3
 8003b36:	f7fd fcd7 	bl	80014e8 <Is_CC_Status_Byte>
 8003b3a:	0003      	movs	r3, r0
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d131      	bne.n	8003ba4 <UART2_RX_transfer_complete_callback+0xd4c>

						running_status_byte = (uint8_t)*rx_buffer;
 8003b40:	4b52      	ldr	r3, [pc, #328]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b56      	ldr	r3, [pc, #344]	@ (8003ca0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003b48:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003b4a:	4b54      	ldr	r3, [pc, #336]	@ (8003c9c <UART2_RX_transfer_complete_callback+0xe44>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	4b4e      	ldr	r3, [pc, #312]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b52:	0011      	movs	r1, r2
 8003b54:	0018      	movs	r0, r3
 8003b56:	f7fd fd99 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003b5a:	0003      	movs	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10c      	bne.n	8003b7a <UART2_RX_transfer_complete_callback+0xd22>

							active_status_byte = (uint8_t)*rx_buffer;
 8003b60:	4b4a      	ldr	r3, [pc, #296]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4b52      	ldr	r3, [pc, #328]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b68:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b6a:	2380      	movs	r3, #128	@ 0x80
 8003b6c:	005a      	lsls	r2, r3, #1
 8003b6e:	4b49      	ldr	r3, [pc, #292]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f002 fec6 	bl	8006904 <Set_Status_Bit>
 8003b78:	e21a      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003b7a:	4b46      	ldr	r3, [pc, #280]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	f7fd fe3c 	bl	80017fa <Is_OMNI_On>
 8003b82:	0003      	movs	r3, r0
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d000      	beq.n	8003b8a <UART2_RX_transfer_complete_callback+0xd32>
 8003b88:	e212      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003b8a:	4b40      	ldr	r3, [pc, #256]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003b92:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003b94:	2380      	movs	r3, #128	@ 0x80
 8003b96:	005a      	lsls	r2, r3, #1
 8003b98:	4b3e      	ldr	r3, [pc, #248]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003b9a:	0011      	movs	r1, r2
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f002 feb1 	bl	8006904 <Set_Status_Bit>
 8003ba2:	e205      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003ba4:	4b39      	ldr	r3, [pc, #228]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fd fd60 	bl	800166c <Is_Sysex_Start_Status_Byte>
 8003bac:	0003      	movs	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d000      	beq.n	8003bb4 <UART2_RX_transfer_complete_callback+0xd5c>
 8003bb2:	e1fd      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003bb4:	4b35      	ldr	r3, [pc, #212]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bbc:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003bbe:	4b38      	ldr	r3, [pc, #224]	@ (8003ca0 <UART2_RX_transfer_complete_callback+0xe48>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003bc4:	2380      	movs	r3, #128	@ 0x80
 8003bc6:	005a      	lsls	r2, r3, #1
 8003bc8:	4b32      	ldr	r3, [pc, #200]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003bca:	0011      	movs	r1, r2
 8003bcc:	0018      	movs	r0, r3
 8003bce:	f002 fe99 	bl	8006904 <Set_Status_Bit>
 8003bd2:	e1ed      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
			}
		}
		else if(active_status_byte != 0){ //CC/PC only called if on basic channel or omni ON
 8003bd4:	4b36      	ldr	r3, [pc, #216]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d100      	bne.n	8003be0 <UART2_RX_transfer_complete_callback+0xd88>
 8003bde:	e1e7      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

			if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out) == YES){
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	009a      	lsls	r2, r3, #2
 8003be4:	4b2b      	ldr	r3, [pc, #172]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f002 fe77 	bl	80068dc <Get_Status_Bit>
 8003bee:	0003      	movs	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d10d      	bne.n	8003c10 <UART2_RX_transfer_complete_callback+0xdb8>

				active_status_byte = 0;
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8003bfa:	4b25      	ldr	r3, [pc, #148]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fd fd96 	bl	800172e <Clear_Data_Buffer>
				//running status is kept

				Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003c02:	4a24      	ldr	r2, [pc, #144]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c04:	4b24      	ldr	r3, [pc, #144]	@ (8003c98 <UART2_RX_transfer_complete_callback+0xe40>)
 8003c06:	0011      	movs	r1, r2
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f7fd fe10 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>
 8003c0e:	e1cf      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
				//In this condition, the data bytes haven't been received in enough time, so any subsequent data bytes
				//sent after this are simply ignored
			}
			else{ //not timed out

				if(Is_Data_Byte(rx_buffer) == YES){
 8003c10:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c12:	0018      	movs	r0, r3
 8003c14:	f7fd fc33 	bl	800147e <Is_Data_Byte>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d000      	beq.n	8003c20 <UART2_RX_transfer_complete_callback+0xdc8>
 8003c1e:	e133      	b.n	8003e88 <UART2_RX_transfer_complete_callback+0x1030>

					if(Is_PC_Status_Byte(&active_status_byte) == YES){
 8003c20:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c22:	0018      	movs	r0, r3
 8003c24:	f7fd fc44 	bl	80014b0 <Is_PC_Status_Byte>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d144      	bne.n	8003cb8 <UART2_RX_transfer_complete_callback+0xe60>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003c2e:	4b18      	ldr	r3, [pc, #96]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c30:	0018      	movs	r0, r3
 8003c32:	f7fd fd4c 	bl	80016ce <Is_Data_Buffer_Empty>
 8003c36:	0003      	movs	r3, r0
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d000      	beq.n	8003c3e <UART2_RX_transfer_complete_callback+0xde6>
 8003c3c:	e1b8      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							//first data byte received
							if(Is_Program_Change_Data_Byte_In_Range(rx_buffer, NUM_PRESETS) == YES){
 8003c3e:	4b13      	ldr	r3, [pc, #76]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c40:	2104      	movs	r1, #4
 8003c42:	0018      	movs	r0, r3
 8003c44:	f7fd fd91 	bl	800176a <Is_Program_Change_Data_Byte_In_Range>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d10f      	bne.n	8003c6e <UART2_RX_transfer_complete_callback+0xe16>

								Set_All_Pots_to_PC_Mode();
 8003c4e:	f7fd fb49 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
								preset_selected = (enum Preset_Selected)*rx_buffer + 1; //since 0 is no preset selected, we have to add 1
 8003c52:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <UART2_RX_transfer_complete_callback+0xe34>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	4b15      	ldr	r3, [pc, #84]	@ (8003cb4 <UART2_RX_transfer_complete_callback+0xe5c>)
 8003c5e:	701a      	strb	r2, [r3, #0]
								Update_Params_Based_On_Mode_Selected(); // Update parameters immediately with preset values
 8003c60:	f7fc fc82 	bl	8000568 <Update_Params_Based_On_Mode_Selected>
								Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003c64:	4b0b      	ldr	r3, [pc, #44]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c66:	2108      	movs	r1, #8
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f002 fe5d 	bl	8006928 <Clear_Status_Bit>
							}

							//whether the program change data byte is in range or not, clear the data buffer and active status byte, and reset timer
							Clear_Data_Buffer(&MIDI_data);
 8003c6e:	4b08      	ldr	r3, [pc, #32]	@ (8003c90 <UART2_RX_transfer_complete_callback+0xe38>)
 8003c70:	0018      	movs	r0, r3
 8003c72:	f7fd fd5c 	bl	800172e <Clear_Data_Buffer>
							active_status_byte = 0;
 8003c76:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb0 <UART2_RX_transfer_complete_callback+0xe58>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]

							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003c7c:	4a05      	ldr	r2, [pc, #20]	@ (8003c94 <UART2_RX_transfer_complete_callback+0xe3c>)
 8003c7e:	4b06      	ldr	r3, [pc, #24]	@ (8003c98 <UART2_RX_transfer_complete_callback+0xe40>)
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7fd fdd3 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>
 8003c88:	e192      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
 8003c8a:	46c0      	nop			@ (mov r8, r8)
 8003c8c:	20000594 	.word	0x20000594
 8003c90:	20000588 	.word	0x20000588
 8003c94:	20000cfc 	.word	0x20000cfc
 8003c98:	20000d04 	.word	0x20000d04
 8003c9c:	20000582 	.word	0x20000582
 8003ca0:	20000584 	.word	0x20000584
 8003ca4:	20000589 	.word	0x20000589
 8003ca8:	20000028 	.word	0x20000028
 8003cac:	20000d18 	.word	0x20000d18
 8003cb0:	20000583 	.word	0x20000583
 8003cb4:	20000554 	.word	0x20000554

						}
					}
					else if(Is_CC_Status_Byte(&active_status_byte) == YES){
 8003cb8:	4bc4      	ldr	r3, [pc, #784]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f7fd fc14 	bl	80014e8 <Is_CC_Status_Byte>
 8003cc0:	0003      	movs	r3, r0
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d000      	beq.n	8003cc8 <UART2_RX_transfer_complete_callback+0xe70>
 8003cc6:	e0d2      	b.n	8003e6e <UART2_RX_transfer_complete_callback+0x1016>

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003cc8:	4bc1      	ldr	r3, [pc, #772]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f7fd fcff 	bl	80016ce <Is_Data_Buffer_Empty>
 8003cd0:	0003      	movs	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d108      	bne.n	8003ce8 <UART2_RX_transfer_complete_callback+0xe90>

							//first data byte received
							MIDI_data.MIDI_data_buffer[0] = *rx_buffer;
 8003cd6:	4bbf      	ldr	r3, [pc, #764]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	4bbc      	ldr	r3, [pc, #752]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003cde:	701a      	strb	r2, [r3, #0]
							midi_counter = 0; //reset timer
 8003ce0:	4bbd      	ldr	r3, [pc, #756]	@ (8003fd8 <UART2_RX_transfer_complete_callback+0x1180>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	e163      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{ //not empty

							//second data byte received
							MIDI_data.MIDI_data_buffer[1] = *rx_buffer;
 8003ce8:	4bba      	ldr	r3, [pc, #744]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	4bb8      	ldr	r3, [pc, #736]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003cf0:	705a      	strb	r2, [r3, #1]
							Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003cf2:	4aba      	ldr	r2, [pc, #744]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003cf4:	4bb8      	ldr	r3, [pc, #736]	@ (8003fd8 <UART2_RX_transfer_complete_callback+0x1180>)
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fd fd98 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>
							Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003cfe:	4bb7      	ldr	r3, [pc, #732]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003d00:	2108      	movs	r1, #8
 8003d02:	0018      	movs	r0, r3
 8003d04:	f002 fe10 	bl	8006928 <Clear_Status_Bit>

							//if a CC byte is active, either it was received on the basic channel, or OMNI is on, so we can
							//simply just use it, although we will need to check that when a channel mode message is sent,
							//that it was received on the basic channel

							if(Is_Utilised_Channel_Mode_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003d08:	4bb1      	ldr	r3, [pc, #708]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7fd fc08 	bl	8001520 <Is_Utilised_Channel_Mode_CC_First_Data_Byte>
 8003d10:	0003      	movs	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d14c      	bne.n	8003db0 <UART2_RX_transfer_complete_callback+0xf58>

								//check on basic channel
								if(Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES){
 8003d16:	4bb2      	ldr	r3, [pc, #712]	@ (8003fe0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4bab      	ldr	r3, [pc, #684]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003d1e:	0011      	movs	r1, r2
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd fcb3 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003d26:	0003      	movs	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d139      	bne.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>

									if(Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0], &MIDI_data.MIDI_data_buffer[1]) == YES){
 8003d2c:	4aad      	ldr	r2, [pc, #692]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003d2e:	4ba8      	ldr	r3, [pc, #672]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d30:	0011      	movs	r1, r2
 8003d32:	0018      	movs	r0, r3
 8003d34:	f7fd fc53 	bl	80015de <Channel_Mode_CC_Second_Data_Byte_Is_Valid_Given_Utilised_First_Data_Byte>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d130      	bne.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>

										//Implement new channel mode
										if(MIDI_data.MIDI_data_buffer[1] == RESET_ALL_CONTROLLERS){
 8003d3e:	4ba4      	ldr	r3, [pc, #656]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d40:	785b      	ldrb	r3, [r3, #1]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b79      	cmp	r3, #121	@ 0x79
 8003d46:	d10b      	bne.n	8003d60 <UART2_RX_transfer_complete_callback+0xf08>

											Reset_All_Controllers(&params, &delay_line);
 8003d48:	4aa7      	ldr	r2, [pc, #668]	@ (8003fe8 <UART2_RX_transfer_complete_callback+0x1190>)
 8003d4a:	4ba8      	ldr	r3, [pc, #672]	@ (8003fec <UART2_RX_transfer_complete_callback+0x1194>)
 8003d4c:	0011      	movs	r1, r2
 8003d4e:	0018      	movs	r0, r3
 8003d50:	f7fd fd88 	bl	8001864 <Reset_All_Controllers>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d54:	4ba1      	ldr	r3, [pc, #644]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003d56:	2108      	movs	r1, #8
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f002 fde5 	bl	8006928 <Clear_Status_Bit>
 8003d5e:	e01f      	b.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == LOCAL_CONTROL){
 8003d60:	4b9b      	ldr	r3, [pc, #620]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d62:	785b      	ldrb	r3, [r3, #1]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b7a      	cmp	r3, #122	@ 0x7a
 8003d68:	d107      	bne.n	8003d7a <UART2_RX_transfer_complete_callback+0xf22>

											Set_Local_Control();
 8003d6a:	f7fd fdd5 	bl	8001918 <Set_Local_Control>
											Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003d6e:	4b9b      	ldr	r3, [pc, #620]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003d70:	2108      	movs	r1, #8
 8003d72:	0018      	movs	r0, r3
 8003d74:	f002 fdd8 	bl	8006928 <Clear_Status_Bit>
 8003d78:	e012      	b.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_OFF){
 8003d7a:	4b95      	ldr	r3, [pc, #596]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b7c      	cmp	r3, #124	@ 0x7c
 8003d82:	d104      	bne.n	8003d8e <UART2_RX_transfer_complete_callback+0xf36>

											Set_OMNI_Off(&statuses);
 8003d84:	4b95      	ldr	r3, [pc, #596]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7fd fdfe 	bl	8001988 <Set_OMNI_Off>
 8003d8c:	e008      	b.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>
										}
										else if(MIDI_data.MIDI_data_buffer[1] == OMNI_MODE_ON){
 8003d8e:	4b90      	ldr	r3, [pc, #576]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b7d      	cmp	r3, #125	@ 0x7d
 8003d96:	d103      	bne.n	8003da0 <UART2_RX_transfer_complete_callback+0xf48>

											Set_OMNI_On(&statuses);
 8003d98:	4b90      	ldr	r3, [pc, #576]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7fd fe04 	bl	80019a8 <Set_OMNI_On>
										}
									}
								}

								active_status_byte = 0;
 8003da0:	4b8a      	ldr	r3, [pc, #552]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003da6:	4b8a      	ldr	r3, [pc, #552]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fd fcc0 	bl	800172e <Clear_Data_Buffer>
 8003dae:	e0ff      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
							else if(Is_Utilised_CC_First_Data_Byte(&MIDI_data.MIDI_data_buffer[0]) == YES){
 8003db0:	4b87      	ldr	r3, [pc, #540]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7fd fbe0 	bl	8001578 <Is_Utilised_CC_First_Data_Byte>
 8003db8:	0003      	movs	r3, r0
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d14f      	bne.n	8003e5e <UART2_RX_transfer_complete_callback+0x1006>

								if((Is_Channelised_Status_Byte_On_Basic_Channel(&active_status_byte, MIDI_basic_channel) == YES)
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	4b81      	ldr	r3, [pc, #516]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f7fd fc5f 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003dce:	0003      	movs	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d006      	beq.n	8003de2 <UART2_RX_transfer_complete_callback+0xf8a>
										|| (Is_OMNI_On(&statuses) == YES)){
 8003dd4:	4b81      	ldr	r3, [pc, #516]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fd fd0f 	bl	80017fa <Is_OMNI_On>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d135      	bne.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>

									if(MIDI_data.MIDI_data_buffer[0] == WAVESHAPE_CC){
 8003de2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b14      	cmp	r3, #20
 8003dea:	d104      	bne.n	8003df6 <UART2_RX_transfer_complete_callback+0xf9e>

										Set_Waveshape_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003dec:	4b7d      	ldr	r3, [pc, #500]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7fd f9f6 	bl	80011e0 <Set_Waveshape_to_CC_Mode_and_Value>
 8003df4:	e02b      	b.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SPEED_CC){
 8003df6:	4b76      	ldr	r3, [pc, #472]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	2b15      	cmp	r3, #21
 8003dfe:	d109      	bne.n	8003e14 <UART2_RX_transfer_complete_callback+0xfbc>

										Set_Speed_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e00:	4b78      	ldr	r3, [pc, #480]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7fd fa06 	bl	8001214 <Set_Speed_to_CC_Mode_and_Value>
										Clear_Status_Bit(&statuses, First_Sync_Complete); //important for where a synced state (via MIDI CLK, CLK IN, or TAP) is the prior state
 8003e08:	4b74      	ldr	r3, [pc, #464]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003e0a:	2108      	movs	r1, #8
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f002 fd8b 	bl	8006928 <Clear_Status_Bit>
 8003e12:	e01c      	b.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == DEPTH_CC){
 8003e14:	4b6e      	ldr	r3, [pc, #440]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b16      	cmp	r3, #22
 8003e1c:	d104      	bne.n	8003e28 <UART2_RX_transfer_complete_callback+0xfd0>

										Set_Depth_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e1e:	4b71      	ldr	r3, [pc, #452]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e20:	0018      	movs	r0, r3
 8003e22:	f7fd fa11 	bl	8001248 <Set_Depth_to_CC_Mode_and_Value>
 8003e26:	e012      	b.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == SYMMETRY_CC){
 8003e28:	4b69      	ldr	r3, [pc, #420]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b17      	cmp	r3, #23
 8003e30:	d104      	bne.n	8003e3c <UART2_RX_transfer_complete_callback+0xfe4>

										Set_Symmetry_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e32:	4b6c      	ldr	r3, [pc, #432]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e34:	0018      	movs	r0, r3
 8003e36:	f7fd fa21 	bl	800127c <Set_Symmetry_to_CC_Mode_and_Value>
 8003e3a:	e008      	b.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>
									}
									else if(MIDI_data.MIDI_data_buffer[0] == PHASE_CC){
 8003e3c:	4b64      	ldr	r3, [pc, #400]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b18      	cmp	r3, #24
 8003e44:	d103      	bne.n	8003e4e <UART2_RX_transfer_complete_callback+0xff6>

										Set_Phase_to_CC_Mode_and_Value((uint8_t*)&MIDI_data.MIDI_data_buffer[1]);
 8003e46:	4b67      	ldr	r3, [pc, #412]	@ (8003fe4 <UART2_RX_transfer_complete_callback+0x118c>)
 8003e48:	0018      	movs	r0, r3
 8003e4a:	f7fd fa31 	bl	80012b0 <Set_Phase_to_CC_Mode_and_Value>
									}
								}

								active_status_byte = 0;
 8003e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e54:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e56:	0018      	movs	r0, r3
 8003e58:	f7fd fc69 	bl	800172e <Clear_Data_Buffer>
 8003e5c:	e0a8      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
							}
							else{

								//not a utilised Ch mode message on basic channel, or utilised CC message
								active_status_byte = 0;
 8003e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
								Clear_Data_Buffer(&MIDI_data);
 8003e64:	4b5a      	ldr	r3, [pc, #360]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7fd fc61 	bl	800172e <Clear_Data_Buffer>
 8003e6c:	e0a0      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(&active_status_byte) == YES){
 8003e6e:	4b57      	ldr	r3, [pc, #348]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7fd fbfb 	bl	800166c <Is_Sysex_Start_Status_Byte>
 8003e76:	0003      	movs	r3, r0
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d000      	beq.n	8003e7e <UART2_RX_transfer_complete_callback+0x1026>
 8003e7c:	e098      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						//@TODO

						if(Is_Data_Buffer_Empty(&MIDI_data) == YES){
 8003e7e:	4b54      	ldr	r3, [pc, #336]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fd fc24 	bl	80016ce <Is_Data_Buffer_Empty>
 8003e86:	e093      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

					}
				}
				else{ // is a status byte -> status byte interrupts an active status byte (when data bytes should be being received)

					Clear_Data_Buffer(&MIDI_data);
 8003e88:	4b51      	ldr	r3, [pc, #324]	@ (8003fd0 <UART2_RX_transfer_complete_callback+0x1178>)
 8003e8a:	0018      	movs	r0, r3
 8003e8c:	f7fd fc4f 	bl	800172e <Clear_Data_Buffer>
					Reset_and_Stop_MIDI_Software_Timer(&midi_counter, &statuses);
 8003e90:	4a52      	ldr	r2, [pc, #328]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003e92:	4b51      	ldr	r3, [pc, #324]	@ (8003fd8 <UART2_RX_transfer_complete_callback+0x1180>)
 8003e94:	0011      	movs	r1, r2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f7fd fcc9 	bl	800182e <Reset_and_Stop_MIDI_Software_Timer>

					if(Is_PC_Status_Byte(rx_buffer) == YES){
 8003e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fd fb06 	bl	80014b0 <Is_PC_Status_Byte>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d130      	bne.n	8003f0c <UART2_RX_transfer_complete_callback+0x10b4>

						running_status_byte = (uint8_t)*rx_buffer;
 8003eaa:	4b4a      	ldr	r3, [pc, #296]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff0 <UART2_RX_transfer_complete_callback+0x1198>)
 8003eb2:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4b46      	ldr	r3, [pc, #280]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7fd fbe4 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d10c      	bne.n	8003ee4 <UART2_RX_transfer_complete_callback+0x108c>

							active_status_byte = (uint8_t)*rx_buffer;
 8003eca:	4b42      	ldr	r3, [pc, #264]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003ed2:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003ed4:	2380      	movs	r3, #128	@ 0x80
 8003ed6:	005a      	lsls	r2, r3, #1
 8003ed8:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003eda:	0011      	movs	r1, r2
 8003edc:	0018      	movs	r0, r3
 8003ede:	f002 fd11 	bl	8006904 <Set_Status_Bit>
 8003ee2:	e065      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fd fc87 	bl	80017fa <Is_OMNI_On>
 8003eec:	0003      	movs	r3, r0
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d15e      	bne.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003ef2:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	4b34      	ldr	r3, [pc, #208]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003efa:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	005a      	lsls	r2, r3, #1
 8003f00:	4b36      	ldr	r3, [pc, #216]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003f02:	0011      	movs	r1, r2
 8003f04:	0018      	movs	r0, r3
 8003f06:	f002 fcfd 	bl	8006904 <Set_Status_Bit>
 8003f0a:	e051      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_CC_Status_Byte(rx_buffer) == YES){
 8003f0c:	4b31      	ldr	r3, [pc, #196]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7fd faea 	bl	80014e8 <Is_CC_Status_Byte>
 8003f14:	0003      	movs	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d130      	bne.n	8003f7c <UART2_RX_transfer_complete_callback+0x1124>

						running_status_byte = (uint8_t)*rx_buffer;
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <UART2_RX_transfer_complete_callback+0x1198>)
 8003f22:	701a      	strb	r2, [r3, #0]

						if(Is_Channelised_Status_Byte_On_Basic_Channel(rx_buffer, MIDI_basic_channel) == YES){
 8003f24:	4b2e      	ldr	r3, [pc, #184]	@ (8003fe0 <UART2_RX_transfer_complete_callback+0x1188>)
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f2c:	0011      	movs	r1, r2
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fd fbac 	bl	800168c <Is_Channelised_Status_Byte_On_Basic_Channel>
 8003f34:	0003      	movs	r3, r0
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d10c      	bne.n	8003f54 <UART2_RX_transfer_complete_callback+0x10fc>

							active_status_byte = (uint8_t)*rx_buffer;
 8003f3a:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003f42:	701a      	strb	r2, [r3, #0]
							Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f44:	2380      	movs	r3, #128	@ 0x80
 8003f46:	005a      	lsls	r2, r3, #1
 8003f48:	4b24      	ldr	r3, [pc, #144]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	0018      	movs	r0, r3
 8003f4e:	f002 fcd9 	bl	8006904 <Set_Status_Bit>
 8003f52:	e02d      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						}
						else{

							if(Is_OMNI_On(&statuses) == YES){
 8003f54:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003f56:	0018      	movs	r0, r3
 8003f58:	f7fd fc4f 	bl	80017fa <Is_OMNI_On>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d126      	bne.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

								active_status_byte = (uint8_t)*rx_buffer;
 8003f62:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	4b18      	ldr	r3, [pc, #96]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003f6a:	701a      	strb	r2, [r3, #0]
								Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f6c:	2380      	movs	r3, #128	@ 0x80
 8003f6e:	005a      	lsls	r2, r3, #1
 8003f70:	4b1a      	ldr	r3, [pc, #104]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003f72:	0011      	movs	r1, r2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f002 fcc5 	bl	8006904 <Set_Status_Bit>
 8003f7a:	e019      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

							}
						}
					}
					else if(Is_Sysex_Start_Status_Byte(rx_buffer) == YES){
 8003f7c:	4b15      	ldr	r3, [pc, #84]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7fd fb74 	bl	800166c <Is_Sysex_Start_Status_Byte>
 8003f84:	0003      	movs	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d112      	bne.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>

						active_status_byte = (uint8_t)*rx_buffer;
 8003f8a:	4b12      	ldr	r3, [pc, #72]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <UART2_RX_transfer_complete_callback+0x1174>)
 8003f92:	701a      	strb	r2, [r3, #0]
						running_status_byte = 0;
 8003f94:	4b16      	ldr	r3, [pc, #88]	@ (8003ff0 <UART2_RX_transfer_complete_callback+0x1198>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	701a      	strb	r2, [r3, #0]
						Set_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8003f9a:	2380      	movs	r3, #128	@ 0x80
 8003f9c:	005a      	lsls	r2, r3, #1
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fdc <UART2_RX_transfer_complete_callback+0x1184>)
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f002 fcae 	bl	8006904 <Set_Status_Bit>
 8003fa8:	e002      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_START){
 8003faa:	46c0      	nop			@ (mov r8, r8)
 8003fac:	e000      	b.n	8003fb0 <UART2_RX_transfer_complete_callback+0x1158>
				if(*rx_buffer == SYSTEM_REAL_TIME_MIDI_CLOCK){
 8003fae:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}

	*rx_buffer = 0;
 8003fb0:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_DMA(&huart2, (uint8_t*)rx_buffer, sizeof(rx_buffer));
 8003fb6:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <UART2_RX_transfer_complete_callback+0x117c>)
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <UART2_RX_transfer_complete_callback+0x119c>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f008 fd49 	bl	800ca54 <HAL_UART_Receive_DMA>
}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b002      	add	sp, #8
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			@ (mov r8, r8)
 8003fcc:	20000583 	.word	0x20000583
 8003fd0:	20000588 	.word	0x20000588
 8003fd4:	20000594 	.word	0x20000594
 8003fd8:	20000d04 	.word	0x20000d04
 8003fdc:	20000cfc 	.word	0x20000cfc
 8003fe0:	20000582 	.word	0x20000582
 8003fe4:	20000589 	.word	0x20000589
 8003fe8:	20000028 	.word	0x20000028
 8003fec:	20000d18 	.word	0x20000d18
 8003ff0:	20000584 	.word	0x20000584
 8003ff4:	20000b00 	.word	0x20000b00

08003ff8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin){
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	0002      	movs	r2, r0
 8004000:	1dbb      	adds	r3, r7, #6
 8004002:	801a      	strh	r2, [r3, #0]

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with falling interrupt
 8004004:	1dbb      	adds	r3, r7, #6
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	2b80      	cmp	r3, #128	@ 0x80
 800400a:	d117      	bne.n	800403c <HAL_GPIO_EXTI_Falling_Callback+0x44>

		if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) || (speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE)){
 800400c:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b06      	cmp	r3, #6
 8004014:	d004      	beq.n	8004020 <HAL_GPIO_EXTI_Falling_Callback+0x28>
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b07      	cmp	r3, #7
 800401e:	d10d      	bne.n	800403c <HAL_GPIO_EXTI_Falling_Callback+0x44>

			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1);
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	0099      	lsls	r1, r3, #2
 8004024:	23a0      	movs	r3, #160	@ 0xa0
 8004026:	05db      	lsls	r3, r3, #23
 8004028:	2201      	movs	r2, #1
 800402a:	0018      	movs	r0, r3
 800402c:	f004 febf 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8004032:	2200      	movs	r2, #0
 8004034:	2140      	movs	r1, #64	@ 0x40
 8004036:	0018      	movs	r0, r3
 8004038:	f004 feb9 	bl	8008dae <HAL_GPIO_WritePin>
		}
	}
}
 800403c:	46c0      	nop			@ (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}
 8004044:	20000430 	.word	0x20000430
 8004048:	50000800 	.word	0x50000800

0800404c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	0002      	movs	r2, r0
 8004054:	1dbb      	adds	r3, r7, #6
 8004056:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	if((GPIO_Pin == CLK_IN_Pin)){ //if specifically CLK IN pin with rising interrupt
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	2b80      	cmp	r3, #128	@ 0x80
 800405e:	d000      	beq.n	8004062 <HAL_GPIO_EXTI_Rising_Callback+0x16>
 8004060:	e0dd      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>

		if(speed_fsm.current_state.shared_state == MANUAL_MODE){
 8004062:	4b71      	ldr	r3, [pc, #452]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	d114      	bne.n	8004096 <HAL_GPIO_EXTI_Rising_Callback+0x4a>

			//Set SW OUT
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 800406c:	2380      	movs	r3, #128	@ 0x80
 800406e:	0099      	lsls	r1, r3, #2
 8004070:	23a0      	movs	r3, #160	@ 0xa0
 8004072:	05db      	lsls	r3, r3, #23
 8004074:	2200      	movs	r2, #0
 8004076:	0018      	movs	r0, r3
 8004078:	f004 fe99 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 800407c:	4b6b      	ldr	r3, [pc, #428]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 800407e:	2201      	movs	r2, #1
 8004080:	2140      	movs	r1, #64	@ 0x40
 8004082:	0018      	movs	r0, r3
 8004084:	f004 fe93 	bl	8008dae <HAL_GPIO_WritePin>

			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 8004088:	4b67      	ldr	r3, [pc, #412]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 800408a:	2201      	movs	r2, #1
 800408c:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 800408e:	4b66      	ldr	r3, [pc, #408]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004090:	2207      	movs	r2, #7
 8004092:	701a      	strb	r2, [r3, #0]
		}

	}

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
}
 8004094:	e0c3      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == PC_MODE){
 8004096:	4b64      	ldr	r3, [pc, #400]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b03      	cmp	r3, #3
 800409e:	d114      	bne.n	80040ca <HAL_GPIO_EXTI_Rising_Callback+0x7e>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040a0:	2380      	movs	r3, #128	@ 0x80
 80040a2:	0099      	lsls	r1, r3, #2
 80040a4:	23a0      	movs	r3, #160	@ 0xa0
 80040a6:	05db      	lsls	r3, r3, #23
 80040a8:	2200      	movs	r2, #0
 80040aa:	0018      	movs	r0, r3
 80040ac:	f004 fe7f 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040b0:	4b5e      	ldr	r3, [pc, #376]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	2140      	movs	r1, #64	@ 0x40
 80040b6:	0018      	movs	r0, r3
 80040b8:	f004 fe79 	bl	8008dae <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = PC_MODE;
 80040bc:	4b5a      	ldr	r3, [pc, #360]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040be:	2203      	movs	r2, #3
 80040c0:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040c2:	4b59      	ldr	r3, [pc, #356]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040c4:	2207      	movs	r2, #7
 80040c6:	701a      	strb	r2, [r3, #0]
}
 80040c8:	e0a9      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.shared_state == CC_MODE){
 80040ca:	4b57      	ldr	r3, [pc, #348]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d114      	bne.n	80040fe <HAL_GPIO_EXTI_Rising_Callback+0xb2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	0099      	lsls	r1, r3, #2
 80040d8:	23a0      	movs	r3, #160	@ 0xa0
 80040da:	05db      	lsls	r3, r3, #23
 80040dc:	2200      	movs	r2, #0
 80040de:	0018      	movs	r0, r3
 80040e0:	f004 fe65 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80040e4:	4b51      	ldr	r3, [pc, #324]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	2140      	movs	r1, #64	@ 0x40
 80040ea:	0018      	movs	r0, r3
 80040ec:	f004 fe5f 	bl	8008dae <HAL_GPIO_WritePin>
			speed_fsm.prev_state.shared_state = CC_MODE;
 80040f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040f2:	2202      	movs	r2, #2
 80040f4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80040f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80040f8:	2207      	movs	r2, #7
 80040fa:	701a      	strb	r2, [r3, #0]
}
 80040fc:	e08f      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80040fe:	4b4a      	ldr	r3, [pc, #296]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b04      	cmp	r3, #4
 8004106:	d12b      	bne.n	8004160 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004108:	4b49      	ldr	r3, [pc, #292]	@ (8004230 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d126      	bne.n	8004160 <HAL_GPIO_EXTI_Rising_Callback+0x114>
 8004112:	4b48      	ldr	r3, [pc, #288]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004114:	2120      	movs	r1, #32
 8004116:	0018      	movs	r0, r3
 8004118:	f002 fbe0 	bl	80068dc <Get_Status_Bit>
 800411c:	0003      	movs	r3, r0
 800411e:	2b01      	cmp	r3, #1
 8004120:	d11e      	bne.n	8004160 <HAL_GPIO_EXTI_Rising_Callback+0x114>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004122:	2380      	movs	r3, #128	@ 0x80
 8004124:	0099      	lsls	r1, r3, #2
 8004126:	23a0      	movs	r3, #160	@ 0xa0
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	2200      	movs	r2, #0
 800412c:	0018      	movs	r0, r3
 800412e:	f004 fe3e 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004132:	4b3e      	ldr	r3, [pc, #248]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004134:	2201      	movs	r2, #1
 8004136:	2140      	movs	r1, #64	@ 0x40
 8004138:	0018      	movs	r0, r3
 800413a:	f004 fe38 	bl	8008dae <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = TAP_MODE;
 800413e:	4b3a      	ldr	r3, [pc, #232]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004140:	2204      	movs	r2, #4
 8004142:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004146:	2207      	movs	r2, #7
 8004148:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 800414a:	4b3a      	ldr	r3, [pc, #232]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 800414c:	2120      	movs	r1, #32
 800414e:	0018      	movs	r0, r3
 8004150:	f002 fbea 	bl	8006928 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004154:	4b37      	ldr	r3, [pc, #220]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004156:	2140      	movs	r1, #64	@ 0x40
 8004158:	0018      	movs	r0, r3
 800415a:	f002 fbe5 	bl	8006928 <Clear_Status_Bit>
 800415e:	e05e      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004160:	4b31      	ldr	r3, [pc, #196]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b08      	cmp	r3, #8
 8004168:	d12b      	bne.n	80041c2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 800416a:	4b31      	ldr	r3, [pc, #196]	@ (8004230 <HAL_GPIO_EXTI_Rising_Callback+0x1e4>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d126      	bne.n	80041c2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
 8004174:	4b2f      	ldr	r3, [pc, #188]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 8004176:	2120      	movs	r1, #32
 8004178:	0018      	movs	r0, r3
 800417a:	f002 fbaf 	bl	80068dc <Get_Status_Bit>
 800417e:	0003      	movs	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	d11e      	bne.n	80041c2 <HAL_GPIO_EXTI_Rising_Callback+0x176>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004184:	2380      	movs	r3, #128	@ 0x80
 8004186:	0099      	lsls	r1, r3, #2
 8004188:	23a0      	movs	r3, #160	@ 0xa0
 800418a:	05db      	lsls	r3, r3, #23
 800418c:	2200      	movs	r2, #0
 800418e:	0018      	movs	r0, r3
 8004190:	f004 fe0d 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004194:	4b25      	ldr	r3, [pc, #148]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004196:	2201      	movs	r2, #1
 8004198:	2140      	movs	r1, #64	@ 0x40
 800419a:	0018      	movs	r0, r3
 800419c:	f004 fe07 	bl	8008dae <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 80041a0:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041a2:	2208      	movs	r2, #8
 80041a4:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80041a6:	4b20      	ldr	r3, [pc, #128]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041a8:	2207      	movs	r2, #7
 80041aa:	701a      	strb	r2, [r3, #0]
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 80041ac:	4b21      	ldr	r3, [pc, #132]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041ae:	2120      	movs	r1, #32
 80041b0:	0018      	movs	r0, r3
 80041b2:	f002 fbb9 	bl	8006928 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80041b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004234 <HAL_GPIO_EXTI_Rising_Callback+0x1e8>)
 80041b8:	2140      	movs	r1, #64	@ 0x40
 80041ba:	0018      	movs	r0, r3
 80041bc:	f002 fbb4 	bl	8006928 <Clear_Status_Bit>
 80041c0:	e02d      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_PENDING_MODE){ //second edge
 80041c2:	4b19      	ldr	r3, [pc, #100]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b07      	cmp	r3, #7
 80041ca:	d114      	bne.n	80041f6 <HAL_GPIO_EXTI_Rising_Callback+0x1aa>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 80041cc:	2380      	movs	r3, #128	@ 0x80
 80041ce:	0099      	lsls	r1, r3, #2
 80041d0:	23a0      	movs	r3, #160	@ 0xa0
 80041d2:	05db      	lsls	r3, r3, #23
 80041d4:	2200      	movs	r2, #0
 80041d6:	0018      	movs	r0, r3
 80041d8:	f004 fde9 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 80041de:	2201      	movs	r2, #1
 80041e0:	2140      	movs	r1, #64	@ 0x40
 80041e2:	0018      	movs	r0, r3
 80041e4:	f004 fde3 	bl	8008dae <HAL_GPIO_WritePin>
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_PENDING_MODE;
 80041e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041ea:	2207      	movs	r2, #7
 80041ec:	705a      	strb	r2, [r3, #1]
			speed_fsm.current_state.speed_exclusive_state = CLK_IN_MODE;
 80041ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041f0:	2206      	movs	r2, #6
 80041f2:	701a      	strb	r2, [r3, #0]
}
 80041f4:	e013      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
		else if(speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE){
 80041f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <HAL_GPIO_EXTI_Rising_Callback+0x1dc>)
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b06      	cmp	r3, #6
 80041fe:	d10e      	bne.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
			HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004200:	2380      	movs	r3, #128	@ 0x80
 8004202:	0099      	lsls	r1, r3, #2
 8004204:	23a0      	movs	r3, #160	@ 0xa0
 8004206:	05db      	lsls	r3, r3, #23
 8004208:	2200      	movs	r2, #0
 800420a:	0018      	movs	r0, r3
 800420c:	f004 fdcf 	bl	8008dae <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004210:	4b06      	ldr	r3, [pc, #24]	@ (800422c <HAL_GPIO_EXTI_Rising_Callback+0x1e0>)
 8004212:	2201      	movs	r2, #1
 8004214:	2140      	movs	r1, #64	@ 0x40
 8004216:	0018      	movs	r0, r3
 8004218:	f004 fdc9 	bl	8008dae <HAL_GPIO_WritePin>
}
 800421c:	e7ff      	b.n	800421e <HAL_GPIO_EXTI_Rising_Callback+0x1d2>
 800421e:	46c0      	nop			@ (mov r8, r8)
 8004220:	46bd      	mov	sp, r7
 8004222:	b002      	add	sp, #8
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			@ (mov r8, r8)
 8004228:	20000430 	.word	0x20000430
 800422c:	50000800 	.word	0x50000800
 8004230:	20000444 	.word	0x20000444
 8004234:	20000cfc 	.word	0x20000cfc

08004238 <LPTIM1_callback>:

void LPTIM1_callback(LPTIM_HandleTypeDef *hlptim){
 8004238:	b5b0      	push	{r4, r5, r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	6078      	str	r0, [r7, #4]
	static volatile struct Tap_Tempo_Switch_States tap_tempo_switch_states = {0};
	static volatile enum Validate preset_save_mode_is_inactive = YES;

	//CHECK IF NEED TAP_PENDING TRANSITION

	uint8_t pin_state = (uint8_t)HAL_GPIO_ReadPin(SW_IN_GPIO_Port, SW_IN_Pin);
 8004240:	2517      	movs	r5, #23
 8004242:	197c      	adds	r4, r7, r5
 8004244:	2380      	movs	r3, #128	@ 0x80
 8004246:	00da      	lsls	r2, r3, #3
 8004248:	23a0      	movs	r3, #160	@ 0xa0
 800424a:	05db      	lsls	r3, r3, #23
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f004 fd90 	bl	8008d74 <HAL_GPIO_ReadPin>
 8004254:	0003      	movs	r3, r0
 8004256:	7023      	strb	r3, [r4, #0]

	if(preset_save_mode_is_inactive == YES){
 8004258:	4bc2      	ldr	r3, [pc, #776]	@ (8004564 <LPTIM1_callback+0x32c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	d000      	beq.n	8004264 <LPTIM1_callback+0x2c>
 8004262:	e1a2      	b.n	80045aa <LPTIM1_callback+0x372>

		if((speed_fsm.current_state.shared_state == MANUAL_MODE) && (pin_state == 0)){
 8004264:	4bc0      	ldr	r3, [pc, #768]	@ (8004568 <LPTIM1_callback+0x330>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d10a      	bne.n	8004284 <LPTIM1_callback+0x4c>
 800426e:	197b      	adds	r3, r7, r5
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <LPTIM1_callback+0x4c>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8004276:	4bbc      	ldr	r3, [pc, #752]	@ (8004568 <LPTIM1_callback+0x330>)
 8004278:	2205      	movs	r2, #5
 800427a:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = MANUAL_MODE;
 800427c:	4bba      	ldr	r3, [pc, #744]	@ (8004568 <LPTIM1_callback+0x330>)
 800427e:	2201      	movs	r2, #1
 8004280:	705a      	strb	r2, [r3, #1]
 8004282:	e070      	b.n	8004366 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == CC_MODE) && (pin_state == 0)){
 8004284:	4bb8      	ldr	r3, [pc, #736]	@ (8004568 <LPTIM1_callback+0x330>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d10b      	bne.n	80042a6 <LPTIM1_callback+0x6e>
 800428e:	2317      	movs	r3, #23
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d106      	bne.n	80042a6 <LPTIM1_callback+0x6e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8004298:	4bb3      	ldr	r3, [pc, #716]	@ (8004568 <LPTIM1_callback+0x330>)
 800429a:	2205      	movs	r2, #5
 800429c:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = CC_MODE;
 800429e:	4bb2      	ldr	r3, [pc, #712]	@ (8004568 <LPTIM1_callback+0x330>)
 80042a0:	2202      	movs	r2, #2
 80042a2:	705a      	strb	r2, [r3, #1]
 80042a4:	e05f      	b.n	8004366 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.shared_state == PC_MODE) && (pin_state == 0)){
 80042a6:	4bb0      	ldr	r3, [pc, #704]	@ (8004568 <LPTIM1_callback+0x330>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b03      	cmp	r3, #3
 80042ae:	d10b      	bne.n	80042c8 <LPTIM1_callback+0x90>
 80042b0:	2317      	movs	r3, #23
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <LPTIM1_callback+0x90>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042ba:	4bab      	ldr	r3, [pc, #684]	@ (8004568 <LPTIM1_callback+0x330>)
 80042bc:	2205      	movs	r2, #5
 80042be:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.shared_state = PC_MODE;
 80042c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004568 <LPTIM1_callback+0x330>)
 80042c2:	2203      	movs	r2, #3
 80042c4:	705a      	strb	r2, [r3, #1]
 80042c6:	e04e      	b.n	8004366 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 80042c8:	4ba7      	ldr	r3, [pc, #668]	@ (8004568 <LPTIM1_callback+0x330>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b06      	cmp	r3, #6
 80042d0:	d122      	bne.n	8004318 <LPTIM1_callback+0xe0>
 80042d2:	2317      	movs	r3, #23
 80042d4:	18fb      	adds	r3, r7, r3
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d11d      	bne.n	8004318 <LPTIM1_callback+0xe0>
 80042dc:	4ba3      	ldr	r3, [pc, #652]	@ (800456c <LPTIM1_callback+0x334>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d118      	bne.n	8004318 <LPTIM1_callback+0xe0>
 80042e6:	4ba2      	ldr	r3, [pc, #648]	@ (8004570 <LPTIM1_callback+0x338>)
 80042e8:	2120      	movs	r1, #32
 80042ea:	0018      	movs	r0, r3
 80042ec:	f002 faf6 	bl	80068dc <Get_Status_Bit>
 80042f0:	0003      	movs	r3, r0
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d110      	bne.n	8004318 <LPTIM1_callback+0xe0>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 80042f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004568 <LPTIM1_callback+0x330>)
 80042f8:	2205      	movs	r2, #5
 80042fa:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = CLK_IN_MODE;
 80042fc:	4b9a      	ldr	r3, [pc, #616]	@ (8004568 <LPTIM1_callback+0x330>)
 80042fe:	2206      	movs	r2, #6
 8004300:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004302:	4b9b      	ldr	r3, [pc, #620]	@ (8004570 <LPTIM1_callback+0x338>)
 8004304:	2120      	movs	r1, #32
 8004306:	0018      	movs	r0, r3
 8004308:	f002 fb0e 	bl	8006928 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800430c:	4b98      	ldr	r3, [pc, #608]	@ (8004570 <LPTIM1_callback+0x338>)
 800430e:	2140      	movs	r1, #64	@ 0x40
 8004310:	0018      	movs	r0, r3
 8004312:	f002 fb09 	bl	8006928 <Clear_Status_Bit>
 8004316:	e026      	b.n	8004366 <LPTIM1_callback+0x12e>
		}
		else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (pin_state == 0) && (IP_CAP_fsm.current_state == IDLE) && (Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES)){
 8004318:	4b93      	ldr	r3, [pc, #588]	@ (8004568 <LPTIM1_callback+0x330>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b08      	cmp	r3, #8
 8004320:	d121      	bne.n	8004366 <LPTIM1_callback+0x12e>
 8004322:	2317      	movs	r3, #23
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11c      	bne.n	8004366 <LPTIM1_callback+0x12e>
 800432c:	4b8f      	ldr	r3, [pc, #572]	@ (800456c <LPTIM1_callback+0x334>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d117      	bne.n	8004366 <LPTIM1_callback+0x12e>
 8004336:	4b8e      	ldr	r3, [pc, #568]	@ (8004570 <LPTIM1_callback+0x338>)
 8004338:	2120      	movs	r1, #32
 800433a:	0018      	movs	r0, r3
 800433c:	f002 face 	bl	80068dc <Get_Status_Bit>
 8004340:	0003      	movs	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10f      	bne.n	8004366 <LPTIM1_callback+0x12e>

			speed_fsm.current_state.speed_exclusive_state = TAP_PENDING_MODE;
 8004346:	4b88      	ldr	r3, [pc, #544]	@ (8004568 <LPTIM1_callback+0x330>)
 8004348:	2205      	movs	r2, #5
 800434a:	701a      	strb	r2, [r3, #0]
			speed_fsm.prev_state.speed_exclusive_state = MIDI_CLK_MODE;
 800434c:	4b86      	ldr	r3, [pc, #536]	@ (8004568 <LPTIM1_callback+0x330>)
 800434e:	2208      	movs	r2, #8
 8004350:	705a      	strb	r2, [r3, #1]

			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004352:	4b87      	ldr	r3, [pc, #540]	@ (8004570 <LPTIM1_callback+0x338>)
 8004354:	2120      	movs	r1, #32
 8004356:	0018      	movs	r0, r3
 8004358:	f002 fae6 	bl	8006928 <Clear_Status_Bit>
			Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800435c:	4b84      	ldr	r3, [pc, #528]	@ (8004570 <LPTIM1_callback+0x338>)
 800435e:	2140      	movs	r1, #64	@ 0x40
 8004360:	0018      	movs	r0, r3
 8004362:	f002 fae1 	bl	8006928 <Clear_Status_Bit>
		}

		//CHECK TAP TEMPO STATE

		if((speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE) || (speed_fsm.current_state.speed_exclusive_state == TAP_MODE)){
 8004366:	4b80      	ldr	r3, [pc, #512]	@ (8004568 <LPTIM1_callback+0x330>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b05      	cmp	r3, #5
 800436e:	d004      	beq.n	800437a <LPTIM1_callback+0x142>
 8004370:	4b7d      	ldr	r3, [pc, #500]	@ (8004568 <LPTIM1_callback+0x330>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b04      	cmp	r3, #4
 8004378:	d11a      	bne.n	80043b0 <LPTIM1_callback+0x178>

			if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 800437a:	4b7e      	ldr	r3, [pc, #504]	@ (8004574 <LPTIM1_callback+0x33c>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d108      	bne.n	8004396 <LPTIM1_callback+0x15e>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 0);
 8004384:	2380      	movs	r3, #128	@ 0x80
 8004386:	0099      	lsls	r1, r3, #2
 8004388:	23a0      	movs	r3, #160	@ 0xa0
 800438a:	05db      	lsls	r3, r3, #23
 800438c:	2200      	movs	r2, #0
 800438e:	0018      	movs	r0, r3
 8004390:	f004 fd0d 	bl	8008dae <HAL_GPIO_WritePin>
 8004394:	e00c      	b.n	80043b0 <LPTIM1_callback+0x178>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);

			}
			else if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 8004396:	4b77      	ldr	r3, [pc, #476]	@ (8004574 <LPTIM1_callback+0x33c>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d107      	bne.n	80043b0 <LPTIM1_callback+0x178>

				//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);
				HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 80043a0:	2380      	movs	r3, #128	@ 0x80
 80043a2:	0099      	lsls	r1, r3, #2
 80043a4:	23a0      	movs	r3, #160	@ 0xa0
 80043a6:	05db      	lsls	r3, r3, #23
 80043a8:	2201      	movs	r2, #1
 80043aa:	0018      	movs	r0, r3
 80043ac:	f004 fcff 	bl	8008dae <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
			}
		}

		//CHECK FOR SPEED POT CHANGES
		if(Get_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out) == YES){
 80043b0:	2380      	movs	r3, #128	@ 0x80
 80043b2:	011a      	lsls	r2, r3, #4
 80043b4:	4b6e      	ldr	r3, [pc, #440]	@ (8004570 <LPTIM1_callback+0x338>)
 80043b6:	0011      	movs	r1, r2
 80043b8:	0018      	movs	r0, r3
 80043ba:	f002 fa8f 	bl	80068dc <Get_Status_Bit>
 80043be:	0003      	movs	r3, r0
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d000      	beq.n	80043c6 <LPTIM1_callback+0x18e>
 80043c4:	e0c0      	b.n	8004548 <LPTIM1_callback+0x310>

			Clear_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	011a      	lsls	r2, r3, #4
 80043ca:	4b69      	ldr	r3, [pc, #420]	@ (8004570 <LPTIM1_callback+0x338>)
 80043cc:	0011      	movs	r1, r2
 80043ce:	0018      	movs	r0, r3
 80043d0:	f002 faaa 	bl	8006928 <Clear_Status_Bit>

			pots_counter = 0;
 80043d4:	4b68      	ldr	r3, [pc, #416]	@ (8004578 <LPTIM1_callback+0x340>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]

			//PERFORM SPEED POT CHECKING
			if((speed_fsm.current_state.shared_state == PC_MODE) || (speed_fsm.current_state.shared_state == CC_MODE)){
 80043da:	4b63      	ldr	r3, [pc, #396]	@ (8004568 <LPTIM1_callback+0x330>)
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d004      	beq.n	80043ee <LPTIM1_callback+0x1b6>
 80043e4:	4b60      	ldr	r3, [pc, #384]	@ (8004568 <LPTIM1_callback+0x330>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d105      	bne.n	80043fa <LPTIM1_callback+0x1c2>

				Pot_Check(ADCResultsDMA, SPEED_POT);
 80043ee:	4b63      	ldr	r3, [pc, #396]	@ (800457c <LPTIM1_callback+0x344>)
 80043f0:	2101      	movs	r1, #1
 80043f2:	0018      	movs	r0, r3
 80043f4:	f7fd faf8 	bl	80019e8 <Pot_Check>
 80043f8:	e069      	b.n	80044ce <LPTIM1_callback+0x296>
			}
			else if((speed_fsm.current_state.speed_exclusive_state == CLK_IN_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 80043fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004568 <LPTIM1_callback+0x330>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b06      	cmp	r3, #6
 8004402:	d117      	bne.n	8004434 <LPTIM1_callback+0x1fc>
 8004404:	4b59      	ldr	r3, [pc, #356]	@ (800456c <LPTIM1_callback+0x334>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d112      	bne.n	8004434 <LPTIM1_callback+0x1fc>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 800440e:	4b58      	ldr	r3, [pc, #352]	@ (8004570 <LPTIM1_callback+0x338>)
 8004410:	2140      	movs	r1, #64	@ 0x40
 8004412:	0018      	movs	r0, r3
 8004414:	f002 fa76 	bl	8006904 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004418:	4b55      	ldr	r3, [pc, #340]	@ (8004570 <LPTIM1_callback+0x338>)
 800441a:	2120      	movs	r1, #32
 800441c:	0018      	movs	r0, r3
 800441e:	f002 fa5d 	bl	80068dc <Get_Status_Bit>
 8004422:	0003      	movs	r3, r0
 8004424:	2b01      	cmp	r3, #1
 8004426:	d152      	bne.n	80044ce <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 8004428:	4b54      	ldr	r3, [pc, #336]	@ (800457c <LPTIM1_callback+0x344>)
 800442a:	2101      	movs	r1, #1
 800442c:	0018      	movs	r0, r3
 800442e:	f7fd fadb 	bl	80019e8 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004432:	e04c      	b.n	80044ce <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == MIDI_CLK_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8004434:	4b4c      	ldr	r3, [pc, #304]	@ (8004568 <LPTIM1_callback+0x330>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b08      	cmp	r3, #8
 800443c:	d12b      	bne.n	8004496 <LPTIM1_callback+0x25e>
 800443e:	4b4b      	ldr	r3, [pc, #300]	@ (800456c <LPTIM1_callback+0x334>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d126      	bne.n	8004496 <LPTIM1_callback+0x25e>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004448:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <LPTIM1_callback+0x338>)
 800444a:	2140      	movs	r1, #64	@ 0x40
 800444c:	0018      	movs	r0, r3
 800444e:	f002 fa59 	bl	8006904 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004452:	4b47      	ldr	r3, [pc, #284]	@ (8004570 <LPTIM1_callback+0x338>)
 8004454:	2120      	movs	r1, #32
 8004456:	0018      	movs	r0, r3
 8004458:	f002 fa40 	bl	80068dc <Get_Status_Bit>
 800445c:	0003      	movs	r3, r0
 800445e:	2b01      	cmp	r3, #1
 8004460:	d135      	bne.n	80044ce <LPTIM1_callback+0x296>

					HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //reset
 8004462:	2380      	movs	r3, #128	@ 0x80
 8004464:	0099      	lsls	r1, r3, #2
 8004466:	23a0      	movs	r3, #160	@ 0xa0
 8004468:	05db      	lsls	r3, r3, #23
 800446a:	2201      	movs	r2, #1
 800446c:	0018      	movs	r0, r3
 800446e:	f004 fc9e 	bl	8008dae <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004472:	4b43      	ldr	r3, [pc, #268]	@ (8004580 <LPTIM1_callback+0x348>)
 8004474:	2200      	movs	r2, #0
 8004476:	2140      	movs	r1, #64	@ 0x40
 8004478:	0018      	movs	r0, r3
 800447a:	f004 fc98 	bl	8008dae <HAL_GPIO_WritePin>

					MIDI_CLK_fsm = NOT_COMPILING;
 800447e:	4b41      	ldr	r3, [pc, #260]	@ (8004584 <LPTIM1_callback+0x34c>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]
					MIDI_CLK_tag = 0;
 8004484:	4b40      	ldr	r3, [pc, #256]	@ (8004588 <LPTIM1_callback+0x350>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]

					Pot_Check(ADCResultsDMA, SPEED_POT);
 800448a:	4b3c      	ldr	r3, [pc, #240]	@ (800457c <LPTIM1_callback+0x344>)
 800448c:	2101      	movs	r1, #1
 800448e:	0018      	movs	r0, r3
 8004490:	f7fd faaa 	bl	80019e8 <Pot_Check>
				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 8004494:	e01b      	b.n	80044ce <LPTIM1_callback+0x296>
				}
			}
			else if((speed_fsm.current_state.speed_exclusive_state == TAP_MODE) && (IP_CAP_fsm.current_state == IDLE)){
 8004496:	4b34      	ldr	r3, [pc, #208]	@ (8004568 <LPTIM1_callback+0x330>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b04      	cmp	r3, #4
 800449e:	d116      	bne.n	80044ce <LPTIM1_callback+0x296>
 80044a0:	4b32      	ldr	r3, [pc, #200]	@ (800456c <LPTIM1_callback+0x334>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d111      	bne.n	80044ce <LPTIM1_callback+0x296>

				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 80044aa:	4b31      	ldr	r3, [pc, #196]	@ (8004570 <LPTIM1_callback+0x338>)
 80044ac:	2140      	movs	r1, #64	@ 0x40
 80044ae:	0018      	movs	r0, r3
 80044b0:	f002 fa28 	bl	8006904 <Set_Status_Bit>

				if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out) == YES){
 80044b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004570 <LPTIM1_callback+0x338>)
 80044b6:	2120      	movs	r1, #32
 80044b8:	0018      	movs	r0, r3
 80044ba:	f002 fa0f 	bl	80068dc <Get_Status_Bit>
 80044be:	0003      	movs	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d104      	bne.n	80044ce <LPTIM1_callback+0x296>

					Pot_Check(ADCResultsDMA, SPEED_POT);
 80044c4:	4b2d      	ldr	r3, [pc, #180]	@ (800457c <LPTIM1_callback+0x344>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	0018      	movs	r0, r3
 80044ca:	f7fd fa8d 	bl	80019e8 <Pot_Check>
				}
			}

			if((waveshape_fsm.current_state == PC_MODE) || (waveshape_fsm.current_state == CC_MODE)){
 80044ce:	4b2f      	ldr	r3, [pc, #188]	@ (800458c <LPTIM1_callback+0x354>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b03      	cmp	r3, #3
 80044d6:	d004      	beq.n	80044e2 <LPTIM1_callback+0x2aa>
 80044d8:	4b2c      	ldr	r3, [pc, #176]	@ (800458c <LPTIM1_callback+0x354>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d104      	bne.n	80044ec <LPTIM1_callback+0x2b4>
				Pot_Check(ADCResultsDMA, WAVESHAPE_POT);
 80044e2:	4b26      	ldr	r3, [pc, #152]	@ (800457c <LPTIM1_callback+0x344>)
 80044e4:	2100      	movs	r1, #0
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7fd fa7e 	bl	80019e8 <Pot_Check>
			}
			if((depth_fsm.current_state == PC_MODE) || (depth_fsm.current_state == CC_MODE)){
 80044ec:	4b28      	ldr	r3, [pc, #160]	@ (8004590 <LPTIM1_callback+0x358>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d004      	beq.n	8004500 <LPTIM1_callback+0x2c8>
 80044f6:	4b26      	ldr	r3, [pc, #152]	@ (8004590 <LPTIM1_callback+0x358>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d104      	bne.n	800450a <LPTIM1_callback+0x2d2>
				Pot_Check(ADCResultsDMA, DEPTH_POT);
 8004500:	4b1e      	ldr	r3, [pc, #120]	@ (800457c <LPTIM1_callback+0x344>)
 8004502:	2102      	movs	r1, #2
 8004504:	0018      	movs	r0, r3
 8004506:	f7fd fa6f 	bl	80019e8 <Pot_Check>
			}
			if((symmetry_fsm.current_state == PC_MODE) || (symmetry_fsm.current_state == CC_MODE)){
 800450a:	4b22      	ldr	r3, [pc, #136]	@ (8004594 <LPTIM1_callback+0x35c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b03      	cmp	r3, #3
 8004512:	d004      	beq.n	800451e <LPTIM1_callback+0x2e6>
 8004514:	4b1f      	ldr	r3, [pc, #124]	@ (8004594 <LPTIM1_callback+0x35c>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d104      	bne.n	8004528 <LPTIM1_callback+0x2f0>
				Pot_Check(ADCResultsDMA, SYMMETRY_POT);
 800451e:	4b17      	ldr	r3, [pc, #92]	@ (800457c <LPTIM1_callback+0x344>)
 8004520:	2103      	movs	r1, #3
 8004522:	0018      	movs	r0, r3
 8004524:	f7fd fa60 	bl	80019e8 <Pot_Check>
			}
			if((phase_fsm.current_state == PC_MODE) || (phase_fsm.current_state == CC_MODE)){
 8004528:	4b1b      	ldr	r3, [pc, #108]	@ (8004598 <LPTIM1_callback+0x360>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b03      	cmp	r3, #3
 8004530:	d004      	beq.n	800453c <LPTIM1_callback+0x304>
 8004532:	4b19      	ldr	r3, [pc, #100]	@ (8004598 <LPTIM1_callback+0x360>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d136      	bne.n	80045aa <LPTIM1_callback+0x372>
				Pot_Check(ADCResultsDMA, PHASE_POT);
 800453c:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <LPTIM1_callback+0x344>)
 800453e:	2104      	movs	r1, #4
 8004540:	0018      	movs	r0, r3
 8004542:	f7fd fa51 	bl	80019e8 <Pot_Check>
 8004546:	e030      	b.n	80045aa <LPTIM1_callback+0x372>
			}

		}
		else{

			if(pots_counter == POT_COUNTER_COUNT){
 8004548:	4b0b      	ldr	r3, [pc, #44]	@ (8004578 <LPTIM1_callback+0x340>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b40      	cmp	r3, #64	@ 0x40
 8004550:	d124      	bne.n	800459c <LPTIM1_callback+0x364>

				Set_Status_Bit(&statuses, Pots_Counter_Has_Timed_Out);
 8004552:	2380      	movs	r3, #128	@ 0x80
 8004554:	011a      	lsls	r2, r3, #4
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <LPTIM1_callback+0x338>)
 8004558:	0011      	movs	r1, r2
 800455a:	0018      	movs	r0, r3
 800455c:	f002 f9d2 	bl	8006904 <Set_Status_Bit>
 8004560:	e023      	b.n	80045aa <LPTIM1_callback+0x372>
 8004562:	46c0      	nop			@ (mov r8, r8)
 8004564:	20000025 	.word	0x20000025
 8004568:	20000430 	.word	0x20000430
 800456c:	20000444 	.word	0x20000444
 8004570:	20000cfc 	.word	0x20000cfc
 8004574:	20000ce0 	.word	0x20000ce0
 8004578:	2000059a 	.word	0x2000059a
 800457c:	20000d0c 	.word	0x20000d0c
 8004580:	50000800 	.word	0x50000800
 8004584:	20000da8 	.word	0x20000da8
 8004588:	20000cfa 	.word	0x20000cfa
 800458c:	20000438 	.word	0x20000438
 8004590:	20000434 	.word	0x20000434
 8004594:	2000043c 	.word	0x2000043c
 8004598:	20000440 	.word	0x20000440
			}
			else{

				pots_counter++;
 800459c:	4bba      	ldr	r3, [pc, #744]	@ (8004888 <LPTIM1_callback+0x650>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4bb8      	ldr	r3, [pc, #736]	@ (8004888 <LPTIM1_callback+0x650>)
 80045a8:	701a      	strb	r2, [r3, #0]
			}
		}
	}

	//check if tap tempo switch is depressed
	Check_Tap_Tempo_Switch_State(&tap_tempo_switch_states);
 80045aa:	4bb8      	ldr	r3, [pc, #736]	@ (800488c <LPTIM1_callback+0x654>)
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7fd fb3b 	bl	8001c28 <Check_Tap_Tempo_Switch_State>
	static enum Preset_Selected preset = PRESET_ONE;
	static enum Validate first_time = YES;
	enum LED_States led_state;
	static enum LED_States led_state_saved;

	led_state = LED_fsm.current_state;
 80045b2:	2316      	movs	r3, #22
 80045b4:	18fb      	adds	r3, r7, r3
 80045b6:	4ab6      	ldr	r2, [pc, #728]	@ (8004890 <LPTIM1_callback+0x658>)
 80045b8:	7812      	ldrb	r2, [r2, #0]
 80045ba:	701a      	strb	r2, [r3, #0]

	if(tap_tempo_switch_states.tap_tempo_switch_state == NOT_DEPRESSED){
 80045bc:	4bb3      	ldr	r3, [pc, #716]	@ (800488c <LPTIM1_callback+0x654>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d000      	beq.n	80045c8 <LPTIM1_callback+0x390>
 80045c6:	e0be      	b.n	8004746 <LPTIM1_callback+0x50e>

		if(preset_save_mode_is_inactive == NO){
 80045c8:	4bb2      	ldr	r3, [pc, #712]	@ (8004894 <LPTIM1_callback+0x65c>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d000      	beq.n	80045d4 <LPTIM1_callback+0x39c>
 80045d2:	e09d      	b.n	8004710 <LPTIM1_callback+0x4d8>

			//if preset save timer has timed out, come out of preset save mode
			if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out) == YES){
 80045d4:	2380      	movs	r3, #128	@ 0x80
 80045d6:	019a      	lsls	r2, r3, #6
 80045d8:	4baf      	ldr	r3, [pc, #700]	@ (8004898 <LPTIM1_callback+0x660>)
 80045da:	0011      	movs	r1, r2
 80045dc:	0018      	movs	r0, r3
 80045de:	f002 f97d 	bl	80068dc <Get_Status_Bit>
 80045e2:	0003      	movs	r3, r0
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d118      	bne.n	800461a <LPTIM1_callback+0x3e2>

				preset = PRESET_ONE;
 80045e8:	4bac      	ldr	r3, [pc, #688]	@ (800489c <LPTIM1_callback+0x664>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 80045ee:	4ba9      	ldr	r3, [pc, #676]	@ (8004894 <LPTIM1_callback+0x65c>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
				first_time = YES;
 80045f4:	4baa      	ldr	r3, [pc, #680]	@ (80048a0 <LPTIM1_callback+0x668>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
				LED_fsm.prev_state = LED_fsm.current_state;
 80045fa:	4ba5      	ldr	r3, [pc, #660]	@ (8004890 <LPTIM1_callback+0x658>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4ba3      	ldr	r3, [pc, #652]	@ (8004890 <LPTIM1_callback+0x658>)
 8004602:	705a      	strb	r2, [r3, #1]
				LED_fsm.current_state = led_state_saved;
 8004604:	4ba7      	ldr	r3, [pc, #668]	@ (80048a4 <LPTIM1_callback+0x66c>)
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	4ba1      	ldr	r3, [pc, #644]	@ (8004890 <LPTIM1_callback+0x658>)
 800460a:	701a      	strb	r2, [r3, #0]

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	019a      	lsls	r2, r3, #6
 8004610:	4ba1      	ldr	r3, [pc, #644]	@ (8004898 <LPTIM1_callback+0x660>)
 8004612:	0011      	movs	r1, r2
 8004614:	0018      	movs	r0, r3
 8004616:	f002 f987 	bl	8006928 <Clear_Status_Bit>
			}
			if((depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT)){
 800461a:	4ba3      	ldr	r3, [pc, #652]	@ (80048a8 <LPTIM1_callback+0x670>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d104      	bne.n	800462e <LPTIM1_callback+0x3f6>
 8004624:	d161      	bne.n	80046ea <LPTIM1_callback+0x4b2>
 8004626:	21c8      	movs	r1, #200	@ 0xc8
 8004628:	0049      	lsls	r1, r1, #1
 800462a:	428a      	cmp	r2, r1
 800462c:	d35d      	bcc.n	80046ea <LPTIM1_callback+0x4b2>
 800462e:	4b9e      	ldr	r3, [pc, #632]	@ (80048a8 <LPTIM1_callback+0x670>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d158      	bne.n	80046ea <LPTIM1_callback+0x4b2>
 8004638:	d102      	bne.n	8004640 <LPTIM1_callback+0x408>
 800463a:	499c      	ldr	r1, [pc, #624]	@ (80048ac <LPTIM1_callback+0x674>)
 800463c:	428a      	cmp	r2, r1
 800463e:	d854      	bhi.n	80046ea <LPTIM1_callback+0x4b2>

				//get correct preset, as it will be 'off by one'
				if(preset == PRESET_ONE){
 8004640:	4b96      	ldr	r3, [pc, #600]	@ (800489c <LPTIM1_callback+0x664>)
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d103      	bne.n	8004650 <LPTIM1_callback+0x418>

					preset = PRESET_FOUR;
 8004648:	4b94      	ldr	r3, [pc, #592]	@ (800489c <LPTIM1_callback+0x664>)
 800464a:	2204      	movs	r2, #4
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e016      	b.n	800467e <LPTIM1_callback+0x446>
				}
				else if(preset == PRESET_TWO){
 8004650:	4b92      	ldr	r3, [pc, #584]	@ (800489c <LPTIM1_callback+0x664>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b02      	cmp	r3, #2
 8004656:	d103      	bne.n	8004660 <LPTIM1_callback+0x428>

					preset = PRESET_ONE;
 8004658:	4b90      	ldr	r3, [pc, #576]	@ (800489c <LPTIM1_callback+0x664>)
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	e00e      	b.n	800467e <LPTIM1_callback+0x446>
				}
				else if(preset == PRESET_THREE){
 8004660:	4b8e      	ldr	r3, [pc, #568]	@ (800489c <LPTIM1_callback+0x664>)
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d103      	bne.n	8004670 <LPTIM1_callback+0x438>

					preset = PRESET_TWO;
 8004668:	4b8c      	ldr	r3, [pc, #560]	@ (800489c <LPTIM1_callback+0x664>)
 800466a:	2202      	movs	r2, #2
 800466c:	701a      	strb	r2, [r3, #0]
 800466e:	e006      	b.n	800467e <LPTIM1_callback+0x446>
				}
				else if(preset == PRESET_FOUR){
 8004670:	4b8a      	ldr	r3, [pc, #552]	@ (800489c <LPTIM1_callback+0x664>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b04      	cmp	r3, #4
 8004676:	d102      	bne.n	800467e <LPTIM1_callback+0x446>

					preset = PRESET_THREE;
 8004678:	4b88      	ldr	r3, [pc, #544]	@ (800489c <LPTIM1_callback+0x664>)
 800467a:	2203      	movs	r2, #3
 800467c:	701a      	strb	r2, [r3, #0]
				}

				//convert running params to preset, and update user preset and user preset used
				Store_Params_as_User_Preset(preset,
 800467e:	4b87      	ldr	r3, [pc, #540]	@ (800489c <LPTIM1_callback+0x664>)
 8004680:	7818      	ldrb	r0, [r3, #0]
 8004682:	4c8b      	ldr	r4, [pc, #556]	@ (80048b0 <LPTIM1_callback+0x678>)
 8004684:	4a8b      	ldr	r2, [pc, #556]	@ (80048b4 <LPTIM1_callback+0x67c>)
 8004686:	498c      	ldr	r1, [pc, #560]	@ (80048b8 <LPTIM1_callback+0x680>)
 8004688:	4b8c      	ldr	r3, [pc, #560]	@ (80048bc <LPTIM1_callback+0x684>)
 800468a:	9301      	str	r3, [sp, #4]
 800468c:	4b8c      	ldr	r3, [pc, #560]	@ (80048c0 <LPTIM1_callback+0x688>)
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	0023      	movs	r3, r4
 8004692:	f7fc fe5f 	bl	8001354 <Store_Params_as_User_Preset>
											user_presets_array,
											factory_presets_array,
											presets_converted_array);

				//set the current pot mode to PC_MODE and update current preset active
				Set_All_Pots_to_PC_Mode();
 8004696:	f7fc fe25 	bl	80012e4 <Set_All_Pots_to_PC_Mode>
				preset_selected = preset;
 800469a:	4b80      	ldr	r3, [pc, #512]	@ (800489c <LPTIM1_callback+0x664>)
 800469c:	781a      	ldrb	r2, [r3, #0]
 800469e:	4b89      	ldr	r3, [pc, #548]	@ (80048c4 <LPTIM1_callback+0x68c>)
 80046a0:	701a      	strb	r2, [r3, #0]

				//store presets in flash
				Store_Single_Preset_In_Flash(user_presets_array[(uint8_t)(preset_selected - 1)], (uint8_t)(preset_selected - 1));
 80046a2:	4b88      	ldr	r3, [pc, #544]	@ (80048c4 <LPTIM1_callback+0x68c>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	001a      	movs	r2, r3
 80046ae:	4b80      	ldr	r3, [pc, #512]	@ (80048b0 <LPTIM1_callback+0x678>)
 80046b0:	0092      	lsls	r2, r2, #2
 80046b2:	58d2      	ldr	r2, [r2, r3]
 80046b4:	4b83      	ldr	r3, [pc, #524]	@ (80048c4 <LPTIM1_callback+0x68c>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	0019      	movs	r1, r3
 80046c0:	0010      	movs	r0, r2
 80046c2:	f7fc fa8f 	bl	8000be4 <Store_Single_Preset_In_Flash>

				//led confirm - overwrite prev state with saved state
				set_LED_to_state(&LED_fsm, LED_CONFIRM);
 80046c6:	4b72      	ldr	r3, [pc, #456]	@ (8004890 <LPTIM1_callback+0x658>)
 80046c8:	2107      	movs	r1, #7
 80046ca:	0018      	movs	r0, r3
 80046cc:	f7fc fe70 	bl	80013b0 <set_LED_to_state>
				LED_fsm.prev_state = led_state_saved;
 80046d0:	4b74      	ldr	r3, [pc, #464]	@ (80048a4 <LPTIM1_callback+0x66c>)
 80046d2:	781a      	ldrb	r2, [r3, #0]
 80046d4:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <LPTIM1_callback+0x658>)
 80046d6:	705a      	strb	r2, [r3, #1]

				preset = PRESET_ONE;
 80046d8:	4b70      	ldr	r3, [pc, #448]	@ (800489c <LPTIM1_callback+0x664>)
 80046da:	2201      	movs	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
				preset_save_mode_is_inactive = YES;
 80046de:	4b6d      	ldr	r3, [pc, #436]	@ (8004894 <LPTIM1_callback+0x65c>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	701a      	strb	r2, [r3, #0]
				first_time = YES;
 80046e4:	4b6e      	ldr	r3, [pc, #440]	@ (80048a0 <LPTIM1_callback+0x668>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	701a      	strb	r2, [r3, #0]
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 80046ea:	4b77      	ldr	r3, [pc, #476]	@ (80048c8 <LPTIM1_callback+0x690>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	d11f      	bne.n	8004734 <LPTIM1_callback+0x4fc>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 80046f4:	2114      	movs	r1, #20
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	4a73      	ldr	r2, [pc, #460]	@ (80048c8 <LPTIM1_callback+0x690>)
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 80046fe:	4b72      	ldr	r3, [pc, #456]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004700:	4a71      	ldr	r2, [pc, #452]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004702:	7852      	ldrb	r2, [r2, #1]
 8004704:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8004706:	4b70      	ldr	r3, [pc, #448]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004708:	187a      	adds	r2, r7, r1
 800470a:	7812      	ldrb	r2, [r2, #0]
 800470c:	705a      	strb	r2, [r3, #1]
 800470e:	e011      	b.n	8004734 <LPTIM1_callback+0x4fc>
			}
		}
		else{

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 8004710:	4b6d      	ldr	r3, [pc, #436]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b05      	cmp	r3, #5
 8004718:	d10c      	bne.n	8004734 <LPTIM1_callback+0x4fc>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 800471a:	2110      	movs	r1, #16
 800471c:	187b      	adds	r3, r7, r1
 800471e:	4a6a      	ldr	r2, [pc, #424]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004724:	4b68      	ldr	r3, [pc, #416]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004726:	4a68      	ldr	r2, [pc, #416]	@ (80048c8 <LPTIM1_callback+0x690>)
 8004728:	7852      	ldrb	r2, [r2, #1]
 800472a:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 800472c:	4b66      	ldr	r3, [pc, #408]	@ (80048c8 <LPTIM1_callback+0x690>)
 800472e:	187a      	adds	r2, r7, r1
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	705a      	strb	r2, [r3, #1]
			}
		}

		depressed_num = 0;
 8004734:	495c      	ldr	r1, [pc, #368]	@ (80048a8 <LPTIM1_callback+0x670>)
 8004736:	2200      	movs	r2, #0
 8004738:	2300      	movs	r3, #0
 800473a:	600a      	str	r2, [r1, #0]
 800473c:	604b      	str	r3, [r1, #4]
		latched = NO;
 800473e:	4b63      	ldr	r3, [pc, #396]	@ (80048cc <LPTIM1_callback+0x694>)
 8004740:	2200      	movs	r2, #0
 8004742:	701a      	strb	r2, [r3, #0]
 8004744:	e0e4      	b.n	8004910 <LPTIM1_callback+0x6d8>
	}
	else if(tap_tempo_switch_states.tap_tempo_switch_state == DEPRESSED){
 8004746:	4b51      	ldr	r3, [pc, #324]	@ (800488c <LPTIM1_callback+0x654>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d000      	beq.n	8004752 <LPTIM1_callback+0x51a>
 8004750:	e0de      	b.n	8004910 <LPTIM1_callback+0x6d8>

		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004752:	2380      	movs	r3, #128	@ 0x80
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	4b50      	ldr	r3, [pc, #320]	@ (8004898 <LPTIM1_callback+0x660>)
 8004758:	0011      	movs	r1, r2
 800475a:	0018      	movs	r0, r3
 800475c:	f002 f8be 	bl	80068dc <Get_Status_Bit>
 8004760:	0003      	movs	r3, r0
 8004762:	2b01      	cmp	r3, #1
 8004764:	d102      	bne.n	800476c <LPTIM1_callback+0x534>

			preset_save_idle_counter = 0;
 8004766:	4b5a      	ldr	r3, [pc, #360]	@ (80048d0 <LPTIM1_callback+0x698>)
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
		}
		if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 800476c:	4b4e      	ldr	r3, [pc, #312]	@ (80048a8 <LPTIM1_callback+0x670>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d118      	bne.n	80047a8 <LPTIM1_callback+0x570>
 8004776:	d102      	bne.n	800477e <LPTIM1_callback+0x546>
 8004778:	494c      	ldr	r1, [pc, #304]	@ (80048ac <LPTIM1_callback+0x674>)
 800477a:	428a      	cmp	r2, r1
 800477c:	d814      	bhi.n	80047a8 <LPTIM1_callback+0x570>
 800477e:	4b4a      	ldr	r3, [pc, #296]	@ (80048a8 <LPTIM1_callback+0x670>)
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10f      	bne.n	80047a8 <LPTIM1_callback+0x570>
 8004788:	d103      	bne.n	8004792 <LPTIM1_callback+0x55a>
 800478a:	21c8      	movs	r1, #200	@ 0xc8
 800478c:	0049      	lsls	r1, r1, #1
 800478e:	428a      	cmp	r2, r1
 8004790:	d20a      	bcs.n	80047a8 <LPTIM1_callback+0x570>

			//save count will always be less than advance count
			depressed_num++;
 8004792:	4b45      	ldr	r3, [pc, #276]	@ (80048a8 <LPTIM1_callback+0x670>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	2001      	movs	r0, #1
 800479a:	2100      	movs	r1, #0
 800479c:	1812      	adds	r2, r2, r0
 800479e:	414b      	adcs	r3, r1
 80047a0:	4941      	ldr	r1, [pc, #260]	@ (80048a8 <LPTIM1_callback+0x670>)
 80047a2:	600a      	str	r2, [r1, #0]
 80047a4:	604b      	str	r3, [r1, #4]
 80047a6:	e0b3      	b.n	8004910 <LPTIM1_callback+0x6d8>
		}
		else if((depressed_num < TAP_TEMPO_SWITCH_PRESET_SAVE_MODE_ADVANCE_COUNT) && (depressed_num >= TAP_TEMPO_SWITCH_PRESET_SAVE_COUNT)){
 80047a8:	4b3f      	ldr	r3, [pc, #252]	@ (80048a8 <LPTIM1_callback+0x670>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <LPTIM1_callback+0x5ac>
 80047b2:	d102      	bne.n	80047ba <LPTIM1_callback+0x582>
 80047b4:	493d      	ldr	r1, [pc, #244]	@ (80048ac <LPTIM1_callback+0x674>)
 80047b6:	428a      	cmp	r2, r1
 80047b8:	d814      	bhi.n	80047e4 <LPTIM1_callback+0x5ac>
 80047ba:	4b3b      	ldr	r3, [pc, #236]	@ (80048a8 <LPTIM1_callback+0x670>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <LPTIM1_callback+0x596>
 80047c4:	d10e      	bne.n	80047e4 <LPTIM1_callback+0x5ac>
 80047c6:	21c8      	movs	r1, #200	@ 0xc8
 80047c8:	0049      	lsls	r1, r1, #1
 80047ca:	428a      	cmp	r2, r1
 80047cc:	d30a      	bcc.n	80047e4 <LPTIM1_callback+0x5ac>

			//Clear_Status_Bit(&statuses, Short_Press);
			depressed_num++;
 80047ce:	4b36      	ldr	r3, [pc, #216]	@ (80048a8 <LPTIM1_callback+0x670>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2001      	movs	r0, #1
 80047d6:	2100      	movs	r1, #0
 80047d8:	1812      	adds	r2, r2, r0
 80047da:	414b      	adcs	r3, r1
 80047dc:	4932      	ldr	r1, [pc, #200]	@ (80048a8 <LPTIM1_callback+0x670>)
 80047de:	600a      	str	r2, [r1, #0]
 80047e0:	604b      	str	r3, [r1, #4]
 80047e2:	e095      	b.n	8004910 <LPTIM1_callback+0x6d8>
		}
		else{

			preset_save_mode_is_inactive = NO;
 80047e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004894 <LPTIM1_callback+0x65c>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	701a      	strb	r2, [r3, #0]

			//start counter
			Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 80047ea:	2380      	movs	r3, #128	@ 0x80
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <LPTIM1_callback+0x660>)
 80047f0:	0011      	movs	r1, r2
 80047f2:	0018      	movs	r0, r3
 80047f4:	f002 f886 	bl	8006904 <Set_Status_Bit>
			//reset counter
			preset_save_idle_counter = 0;
 80047f8:	4b35      	ldr	r3, [pc, #212]	@ (80048d0 <LPTIM1_callback+0x698>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]

			depressed_num++; //may be an issue if overflow
 80047fe:	4b2a      	ldr	r3, [pc, #168]	@ (80048a8 <LPTIM1_callback+0x670>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2001      	movs	r0, #1
 8004806:	2100      	movs	r1, #0
 8004808:	1812      	adds	r2, r2, r0
 800480a:	414b      	adcs	r3, r1
 800480c:	4926      	ldr	r1, [pc, #152]	@ (80048a8 <LPTIM1_callback+0x670>)
 800480e:	600a      	str	r2, [r1, #0]
 8004810:	604b      	str	r3, [r1, #4]

			if(first_time == YES){
 8004812:	4b23      	ldr	r3, [pc, #140]	@ (80048a0 <LPTIM1_callback+0x668>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d107      	bne.n	800482a <LPTIM1_callback+0x5f2>

				first_time = NO;
 800481a:	4b21      	ldr	r3, [pc, #132]	@ (80048a0 <LPTIM1_callback+0x668>)
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
				led_state_saved = led_state;
 8004820:	4b20      	ldr	r3, [pc, #128]	@ (80048a4 <LPTIM1_callback+0x66c>)
 8004822:	2216      	movs	r2, #22
 8004824:	18ba      	adds	r2, r7, r2
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
			}

			if(latched == NO){
 800482a:	4b28      	ldr	r3, [pc, #160]	@ (80048cc <LPTIM1_callback+0x694>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d15c      	bne.n	80048ec <LPTIM1_callback+0x6b4>

				latched = YES;
 8004832:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <LPTIM1_callback+0x694>)
 8004834:	2201      	movs	r2, #1
 8004836:	701a      	strb	r2, [r3, #0]

				if(preset == PRESET_ONE){
 8004838:	4b18      	ldr	r3, [pc, #96]	@ (800489c <LPTIM1_callback+0x664>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b01      	cmp	r3, #1
 800483e:	d108      	bne.n	8004852 <LPTIM1_callback+0x61a>

					set_LED_to_state(&LED_fsm, LED_ONE_BLINK);
 8004840:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <LPTIM1_callback+0x658>)
 8004842:	2103      	movs	r1, #3
 8004844:	0018      	movs	r0, r3
 8004846:	f7fc fdb3 	bl	80013b0 <set_LED_to_state>
					preset = PRESET_TWO;
 800484a:	4b14      	ldr	r3, [pc, #80]	@ (800489c <LPTIM1_callback+0x664>)
 800484c:	2202      	movs	r2, #2
 800484e:	701a      	strb	r2, [r3, #0]
 8004850:	e04c      	b.n	80048ec <LPTIM1_callback+0x6b4>
				}
				else if(preset == PRESET_TWO){
 8004852:	4b12      	ldr	r3, [pc, #72]	@ (800489c <LPTIM1_callback+0x664>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d108      	bne.n	800486c <LPTIM1_callback+0x634>

					set_LED_to_state(&LED_fsm, LED_TWO_BLINK);
 800485a:	4b0d      	ldr	r3, [pc, #52]	@ (8004890 <LPTIM1_callback+0x658>)
 800485c:	2104      	movs	r1, #4
 800485e:	0018      	movs	r0, r3
 8004860:	f7fc fda6 	bl	80013b0 <set_LED_to_state>
					preset = PRESET_THREE;
 8004864:	4b0d      	ldr	r3, [pc, #52]	@ (800489c <LPTIM1_callback+0x664>)
 8004866:	2203      	movs	r2, #3
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e03f      	b.n	80048ec <LPTIM1_callback+0x6b4>
				}
				else if(preset == PRESET_THREE){
 800486c:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <LPTIM1_callback+0x664>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b03      	cmp	r3, #3
 8004872:	d12f      	bne.n	80048d4 <LPTIM1_callback+0x69c>

					set_LED_to_state(&LED_fsm, LED_THREE_BLINK);
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <LPTIM1_callback+0x658>)
 8004876:	2105      	movs	r1, #5
 8004878:	0018      	movs	r0, r3
 800487a:	f7fc fd99 	bl	80013b0 <set_LED_to_state>
					preset = PRESET_FOUR;
 800487e:	4b07      	ldr	r3, [pc, #28]	@ (800489c <LPTIM1_callback+0x664>)
 8004880:	2204      	movs	r2, #4
 8004882:	701a      	strb	r2, [r3, #0]
 8004884:	e032      	b.n	80048ec <LPTIM1_callback+0x6b4>
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	2000059a 	.word	0x2000059a
 800488c:	20000ce0 	.word	0x20000ce0
 8004890:	20000448 	.word	0x20000448
 8004894:	20000025 	.word	0x20000025
 8004898:	20000cfc 	.word	0x20000cfc
 800489c:	20000026 	.word	0x20000026
 80048a0:	20000027 	.word	0x20000027
 80048a4:	20000ce2 	.word	0x20000ce2
 80048a8:	20000ce8 	.word	0x20000ce8
 80048ac:	000009c3 	.word	0x000009c3
 80048b0:	2000050c 	.word	0x2000050c
 80048b4:	20000578 	.word	0x20000578
 80048b8:	20000d18 	.word	0x20000d18
 80048bc:	2000051c 	.word	0x2000051c
 80048c0:	200004fc 	.word	0x200004fc
 80048c4:	20000554 	.word	0x20000554
 80048c8:	20000430 	.word	0x20000430
 80048cc:	20000cf0 	.word	0x20000cf0
 80048d0:	20000d08 	.word	0x20000d08
				}
				else if(preset == PRESET_FOUR){
 80048d4:	4b13      	ldr	r3, [pc, #76]	@ (8004924 <LPTIM1_callback+0x6ec>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d107      	bne.n	80048ec <LPTIM1_callback+0x6b4>

					set_LED_to_state(&LED_fsm, LED_FOUR_BLINK);
 80048dc:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <LPTIM1_callback+0x6f0>)
 80048de:	2106      	movs	r1, #6
 80048e0:	0018      	movs	r0, r3
 80048e2:	f7fc fd65 	bl	80013b0 <set_LED_to_state>
					preset = PRESET_ONE;
 80048e6:	4b0f      	ldr	r3, [pc, #60]	@ (8004924 <LPTIM1_callback+0x6ec>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
				}
			}

			if(speed_fsm.current_state.speed_exclusive_state == TAP_PENDING_MODE){
 80048ec:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <LPTIM1_callback+0x6f4>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b05      	cmp	r3, #5
 80048f4:	d10c      	bne.n	8004910 <LPTIM1_callback+0x6d8>

				union Speed_FSM_States curr_state = speed_fsm.current_state;
 80048f6:	210c      	movs	r1, #12
 80048f8:	187b      	adds	r3, r7, r1
 80048fa:	4a0c      	ldr	r2, [pc, #48]	@ (800492c <LPTIM1_callback+0x6f4>)
 80048fc:	7812      	ldrb	r2, [r2, #0]
 80048fe:	701a      	strb	r2, [r3, #0]
				speed_fsm.current_state = speed_fsm.prev_state;
 8004900:	4b0a      	ldr	r3, [pc, #40]	@ (800492c <LPTIM1_callback+0x6f4>)
 8004902:	4a0a      	ldr	r2, [pc, #40]	@ (800492c <LPTIM1_callback+0x6f4>)
 8004904:	7852      	ldrb	r2, [r2, #1]
 8004906:	701a      	strb	r2, [r3, #0]
				speed_fsm.prev_state = curr_state;
 8004908:	4b08      	ldr	r3, [pc, #32]	@ (800492c <LPTIM1_callback+0x6f4>)
 800490a:	187a      	adds	r2, r7, r1
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	705a      	strb	r2, [r3, #1]
			}
		}
	}

	//SET TIMER TRIGGER
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 8004910:	4b07      	ldr	r3, [pc, #28]	@ (8004930 <LPTIM1_callback+0x6f8>)
 8004912:	22fa      	movs	r2, #250	@ 0xfa
 8004914:	21fa      	movs	r1, #250	@ 0xfa
 8004916:	0018      	movs	r0, r3
 8004918:	f004 fb40 	bl	8008f9c <HAL_LPTIM_SetOnce_Start_IT>

}
 800491c:	46c0      	nop			@ (mov r8, r8)
 800491e:	46bd      	mov	sp, r7
 8004920:	b006      	add	sp, #24
 8004922:	bdb0      	pop	{r4, r5, r7, pc}
 8004924:	20000026 	.word	0x20000026
 8004928:	20000448 	.word	0x20000448
 800492c:	20000430 	.word	0x20000430
 8004930:	20000c84 	.word	0x20000c84

08004934 <TIM17_callback>:

void TIM17_callback(TIM_HandleTypeDef *htim){
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]


}
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b002      	add	sp, #8
 8004942:	bd80      	pop	{r7, pc}

08004944 <TIM14_callback>:

void TIM14_callback(TIM_HandleTypeDef *htim){
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]

	if(LED_fsm.current_state == LED_ON){
 800494c:	4bd1      	ldr	r3, [pc, #836]	@ (8004c94 <TIM14_callback+0x350>)
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d106      	bne.n	8004964 <TIM14_callback+0x20>

		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004956:	4bd0      	ldr	r3, [pc, #832]	@ (8004c98 <TIM14_callback+0x354>)
 8004958:	2201      	movs	r2, #1
 800495a:	2140      	movs	r1, #64	@ 0x40
 800495c:	0018      	movs	r0, r3
 800495e:	f004 fa26 	bl	8008dae <HAL_GPIO_WritePin>

				set_LED_to_state(&LED_fsm, prev);
			}
		}
	}
}
 8004962:	e1c3      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_OFF){
 8004964:	4bcb      	ldr	r3, [pc, #812]	@ (8004c94 <TIM14_callback+0x350>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d106      	bne.n	800497c <TIM14_callback+0x38>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 800496e:	4bca      	ldr	r3, [pc, #808]	@ (8004c98 <TIM14_callback+0x354>)
 8004970:	2200      	movs	r2, #0
 8004972:	2140      	movs	r1, #64	@ 0x40
 8004974:	0018      	movs	r0, r3
 8004976:	f004 fa1a 	bl	8008dae <HAL_GPIO_WritePin>
}
 800497a:	e1b7      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_ONE_BLINK){
 800497c:	4bc5      	ldr	r3, [pc, #788]	@ (8004c94 <TIM14_callback+0x350>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b03      	cmp	r3, #3
 8004984:	d133      	bne.n	80049ee <TIM14_callback+0xaa>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004986:	4bc5      	ldr	r3, [pc, #788]	@ (8004c9c <TIM14_callback+0x358>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2200      	movs	r2, #0
 800498c:	625a      	str	r2, [r3, #36]	@ 0x24
		if(LED_counter == 0){
 800498e:	4bc4      	ldr	r3, [pc, #784]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10d      	bne.n	80049b4 <TIM14_callback+0x70>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004998:	4bbf      	ldr	r3, [pc, #764]	@ (8004c98 <TIM14_callback+0x354>)
 800499a:	2201      	movs	r2, #1
 800499c:	2140      	movs	r1, #64	@ 0x40
 800499e:	0018      	movs	r0, r3
 80049a0:	f004 fa05 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 80049a4:	4bbe      	ldr	r3, [pc, #760]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	3301      	adds	r3, #1
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	4bbc      	ldr	r3, [pc, #752]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049b0:	701a      	strb	r2, [r3, #0]
}
 80049b2:	e19b      	b.n	8004cec <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 1)){
 80049b4:	4bba      	ldr	r3, [pc, #744]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d900      	bls.n	80049c0 <TIM14_callback+0x7c>
 80049be:	e195      	b.n	8004cec <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 80049c0:	4bb5      	ldr	r3, [pc, #724]	@ (8004c98 <TIM14_callback+0x354>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	2140      	movs	r1, #64	@ 0x40
 80049c6:	0018      	movs	r0, r3
 80049c8:	f004 f9f1 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 80049cc:	4bb4      	ldr	r3, [pc, #720]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4bb2      	ldr	r3, [pc, #712]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049d8:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 1){
 80049da:	4bb1      	ldr	r3, [pc, #708]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d000      	beq.n	80049e6 <TIM14_callback+0xa2>
 80049e4:	e182      	b.n	8004cec <TIM14_callback+0x3a8>
				LED_counter = 0;
 80049e6:	4bae      	ldr	r3, [pc, #696]	@ (8004ca0 <TIM14_callback+0x35c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	701a      	strb	r2, [r3, #0]
}
 80049ec:	e17e      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_TWO_BLINK){
 80049ee:	4ba9      	ldr	r3, [pc, #676]	@ (8004c94 <TIM14_callback+0x350>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d156      	bne.n	8004aa6 <TIM14_callback+0x162>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 80049f8:	4ba8      	ldr	r3, [pc, #672]	@ (8004c9c <TIM14_callback+0x358>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2200      	movs	r2, #0
 80049fe:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 3) && (LED_counter % 2 == 0)){
 8004a00:	4ba7      	ldr	r3, [pc, #668]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d815      	bhi.n	8004a36 <TIM14_callback+0xf2>
 8004a0a:	4ba5      	ldr	r3, [pc, #660]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2201      	movs	r2, #1
 8004a12:	4013      	ands	r3, r2
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10d      	bne.n	8004a36 <TIM14_callback+0xf2>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8004c98 <TIM14_callback+0x354>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	2140      	movs	r1, #64	@ 0x40
 8004a20:	0018      	movs	r0, r3
 8004a22:	f004 f9c4 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004a26:	4b9e      	ldr	r3, [pc, #632]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	4b9b      	ldr	r3, [pc, #620]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	e15a      	b.n	8004cec <TIM14_callback+0x3a8>
		else if((LED_counter < 3) && (LED_counter % 2 == 1)){
 8004a36:	4b9a      	ldr	r3, [pc, #616]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d815      	bhi.n	8004a6c <TIM14_callback+0x128>
 8004a40:	4b97      	ldr	r3, [pc, #604]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	2201      	movs	r2, #1
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d10d      	bne.n	8004a6c <TIM14_callback+0x128>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a50:	4b91      	ldr	r3, [pc, #580]	@ (8004c98 <TIM14_callback+0x354>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	2140      	movs	r1, #64	@ 0x40
 8004a56:	0018      	movs	r0, r3
 8004a58:	f004 f9a9 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004a5c:	4b90      	ldr	r3, [pc, #576]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	3301      	adds	r3, #1
 8004a64:	b2da      	uxtb	r2, r3
 8004a66:	4b8e      	ldr	r3, [pc, #568]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e13f      	b.n	8004cec <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 3)){
 8004a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b06      	cmp	r3, #6
 8004a74:	d900      	bls.n	8004a78 <TIM14_callback+0x134>
 8004a76:	e139      	b.n	8004cec <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004a78:	4b87      	ldr	r3, [pc, #540]	@ (8004c98 <TIM14_callback+0x354>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	2140      	movs	r1, #64	@ 0x40
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f004 f995 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004a84:	4b86      	ldr	r3, [pc, #536]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	b2da      	uxtb	r2, r3
 8004a8e:	4b84      	ldr	r3, [pc, #528]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a90:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 3){
 8004a92:	4b83      	ldr	r3, [pc, #524]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b07      	cmp	r3, #7
 8004a9a:	d000      	beq.n	8004a9e <TIM14_callback+0x15a>
 8004a9c:	e126      	b.n	8004cec <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004a9e:	4b80      	ldr	r3, [pc, #512]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	701a      	strb	r2, [r3, #0]
}
 8004aa4:	e122      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_THREE_BLINK){
 8004aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8004c94 <TIM14_callback+0x350>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b05      	cmp	r3, #5
 8004aae:	d156      	bne.n	8004b5e <TIM14_callback+0x21a>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8004c9c <TIM14_callback+0x358>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 5) && (LED_counter % 2 == 0)){
 8004ab8:	4b79      	ldr	r3, [pc, #484]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d815      	bhi.n	8004aee <TIM14_callback+0x1aa>
 8004ac2:	4b77      	ldr	r3, [pc, #476]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2201      	movs	r2, #1
 8004aca:	4013      	ands	r3, r2
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <TIM14_callback+0x1aa>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004ad2:	4b71      	ldr	r3, [pc, #452]	@ (8004c98 <TIM14_callback+0x354>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	2140      	movs	r1, #64	@ 0x40
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f004 f968 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004ade:	4b70      	ldr	r3, [pc, #448]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e0fe      	b.n	8004cec <TIM14_callback+0x3a8>
		else if((LED_counter < 5) && (LED_counter % 2 == 1)){
 8004aee:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d815      	bhi.n	8004b24 <TIM14_callback+0x1e0>
 8004af8:	4b69      	ldr	r3, [pc, #420]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2201      	movs	r2, #1
 8004b00:	4013      	ands	r3, r2
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10d      	bne.n	8004b24 <TIM14_callback+0x1e0>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b08:	4b63      	ldr	r3, [pc, #396]	@ (8004c98 <TIM14_callback+0x354>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2140      	movs	r1, #64	@ 0x40
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f004 f94d 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004b14:	4b62      	ldr	r3, [pc, #392]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4b60      	ldr	r3, [pc, #384]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e0e3      	b.n	8004cec <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 5)){
 8004b24:	4b5e      	ldr	r3, [pc, #376]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b08      	cmp	r3, #8
 8004b2c:	d900      	bls.n	8004b30 <TIM14_callback+0x1ec>
 8004b2e:	e0dd      	b.n	8004cec <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004b30:	4b59      	ldr	r3, [pc, #356]	@ (8004c98 <TIM14_callback+0x354>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	2140      	movs	r1, #64	@ 0x40
 8004b36:	0018      	movs	r0, r3
 8004b38:	f004 f939 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004b3c:	4b58      	ldr	r3, [pc, #352]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	3301      	adds	r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	4b56      	ldr	r3, [pc, #344]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b48:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 5){
 8004b4a:	4b55      	ldr	r3, [pc, #340]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b09      	cmp	r3, #9
 8004b52:	d000      	beq.n	8004b56 <TIM14_callback+0x212>
 8004b54:	e0ca      	b.n	8004cec <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004b56:	4b52      	ldr	r3, [pc, #328]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
}
 8004b5c:	e0c6      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_FOUR_BLINK){
 8004b5e:	4b4d      	ldr	r3, [pc, #308]	@ (8004c94 <TIM14_callback+0x350>)
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b06      	cmp	r3, #6
 8004b66:	d156      	bne.n	8004c16 <TIM14_callback+0x2d2>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004b68:	4b4c      	ldr	r3, [pc, #304]	@ (8004c9c <TIM14_callback+0x358>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004b70:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d815      	bhi.n	8004ba6 <TIM14_callback+0x262>
 8004b7a:	4b49      	ldr	r3, [pc, #292]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10d      	bne.n	8004ba6 <TIM14_callback+0x262>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004b8a:	4b43      	ldr	r3, [pc, #268]	@ (8004c98 <TIM14_callback+0x354>)
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	2140      	movs	r1, #64	@ 0x40
 8004b90:	0018      	movs	r0, r3
 8004b92:	f004 f90c 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004b96:	4b42      	ldr	r3, [pc, #264]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004ba2:	701a      	strb	r2, [r3, #0]
 8004ba4:	e0a2      	b.n	8004cec <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d815      	bhi.n	8004bdc <TIM14_callback+0x298>
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4013      	ands	r3, r2
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10d      	bne.n	8004bdc <TIM14_callback+0x298>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004bc0:	4b35      	ldr	r3, [pc, #212]	@ (8004c98 <TIM14_callback+0x354>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	2140      	movs	r1, #64	@ 0x40
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f004 f8f1 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004bcc:	4b34      	ldr	r3, [pc, #208]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4b32      	ldr	r3, [pc, #200]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e087      	b.n	8004cec <TIM14_callback+0x3a8>
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004bdc:	4b30      	ldr	r3, [pc, #192]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b0a      	cmp	r3, #10
 8004be4:	d900      	bls.n	8004be8 <TIM14_callback+0x2a4>
 8004be6:	e081      	b.n	8004cec <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004be8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c98 <TIM14_callback+0x354>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	2140      	movs	r1, #64	@ 0x40
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f004 f8dd 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004bf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4b28      	ldr	r3, [pc, #160]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c00:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004c02:	4b27      	ldr	r3, [pc, #156]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b0b      	cmp	r3, #11
 8004c0a:	d000      	beq.n	8004c0e <TIM14_callback+0x2ca>
 8004c0c:	e06e      	b.n	8004cec <TIM14_callback+0x3a8>
				LED_counter = 0;
 8004c0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	701a      	strb	r2, [r3, #0]
}
 8004c14:	e06a      	b.n	8004cec <TIM14_callback+0x3a8>
	else if(LED_fsm.current_state == LED_CONFIRM){
 8004c16:	4b1f      	ldr	r3, [pc, #124]	@ (8004c94 <TIM14_callback+0x350>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b07      	cmp	r3, #7
 8004c1e:	d165      	bne.n	8004cec <TIM14_callback+0x3a8>
		__HAL_TIM_SET_COUNTER(&htim14, 0);
 8004c20:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <TIM14_callback+0x358>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2200      	movs	r2, #0
 8004c26:	625a      	str	r2, [r3, #36]	@ 0x24
		if((LED_counter < 7) && (LED_counter % 2 == 0)){
 8004c28:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d815      	bhi.n	8004c5e <TIM14_callback+0x31a>
 8004c32:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2201      	movs	r2, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10d      	bne.n	8004c5e <TIM14_callback+0x31a>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 1);
 8004c42:	4b15      	ldr	r3, [pc, #84]	@ (8004c98 <TIM14_callback+0x354>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	2140      	movs	r1, #64	@ 0x40
 8004c48:	0018      	movs	r0, r3
 8004c4a:	f004 f8b0 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	3301      	adds	r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	4b11      	ldr	r3, [pc, #68]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c5a:	701a      	strb	r2, [r3, #0]
 8004c5c:	e046      	b.n	8004cec <TIM14_callback+0x3a8>
		else if((LED_counter < 7) && (LED_counter % 2 == 1)){
 8004c5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d81d      	bhi.n	8004ca4 <TIM14_callback+0x360>
 8004c68:	4b0d      	ldr	r3, [pc, #52]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	2201      	movs	r2, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d115      	bne.n	8004ca4 <TIM14_callback+0x360>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004c78:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <TIM14_callback+0x354>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	@ 0x40
 8004c7e:	0018      	movs	r0, r3
 8004c80:	f004 f895 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <TIM14_callback+0x35c>)
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e02b      	b.n	8004cec <TIM14_callback+0x3a8>
 8004c94:	20000448 	.word	0x20000448
 8004c98:	50000800 	.word	0x50000800
 8004c9c:	20000698 	.word	0x20000698
 8004ca0:	20000581 	.word	0x20000581
		else if(LED_counter < (LED_COUNT_OFF_TIME + 7)){
 8004ca4:	4b13      	ldr	r3, [pc, #76]	@ (8004cf4 <TIM14_callback+0x3b0>)
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b0a      	cmp	r3, #10
 8004cac:	d81e      	bhi.n	8004cec <TIM14_callback+0x3a8>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, 0);
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <TIM14_callback+0x3b4>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2140      	movs	r1, #64	@ 0x40
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f004 f87a 	bl	8008dae <HAL_GPIO_WritePin>
			LED_counter++;
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <TIM14_callback+0x3b0>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <TIM14_callback+0x3b0>)
 8004cc6:	701a      	strb	r2, [r3, #0]
			if(LED_counter == LED_COUNT_OFF_TIME + 7){
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf4 <TIM14_callback+0x3b0>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b0b      	cmp	r3, #11
 8004cd0:	d10c      	bne.n	8004cec <TIM14_callback+0x3a8>
				enum LED_States prev = LED_fsm.prev_state;
 8004cd2:	210f      	movs	r1, #15
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <TIM14_callback+0x3b8>)
 8004cd8:	7852      	ldrb	r2, [r2, #1]
 8004cda:	701a      	strb	r2, [r3, #0]
				set_LED_to_state(&LED_fsm, prev);
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	781a      	ldrb	r2, [r3, #0]
 8004ce0:	4b06      	ldr	r3, [pc, #24]	@ (8004cfc <TIM14_callback+0x3b8>)
 8004ce2:	0011      	movs	r1, r2
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f7fc fb63 	bl	80013b0 <set_LED_to_state>
}
 8004cea:	e7ff      	b.n	8004cec <TIM14_callback+0x3a8>
 8004cec:	46c0      	nop			@ (mov r8, r8)
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	b004      	add	sp, #16
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000581 	.word	0x20000581
 8004cf8:	50000800 	.word	0x50000800
 8004cfc:	20000448 	.word	0x20000448

08004d00 <Input_Capture_Processing>:
volatile uint32_t TIM2_ch1_input_capture_value;
volatile uint16_t interrupt_period = 0;
volatile uint8_t MIDI_CLK_tag = 0;

//FUNCTION DEFINITIONS
uint8_t Input_Capture_Processing(volatile uint16_t interrupt_period_value, struct Params *params_ptr){
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	0002      	movs	r2, r0
 8004d08:	6039      	str	r1, [r7, #0]
 8004d0a:	1dbb      	adds	r3, r7, #6
 8004d0c:	801a      	strh	r2, [r3, #0]

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

	Clear_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started); //reset flag
 8004d0e:	4b34      	ldr	r3, [pc, #208]	@ (8004de0 <Input_Capture_Processing+0xe0>)
 8004d10:	2104      	movs	r1, #4
 8004d12:	0018      	movs	r0, r3
 8004d14:	f001 fe08 	bl	8006928 <Clear_Status_Bit>

	//DETERMINE WHAT TO SET THE RAW_START_VALUE AND BASE_PRESCALER TO BASED ON THE I/P CAPTURE VALUE
	//CHECK FOR PRIMALITY
	if(isPrime(interrupt_period_value) == YES){
 8004d18:	1dbb      	adds	r3, r7, #6
 8004d1a:	881b      	ldrh	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	0018      	movs	r0, r3
 8004d20:	f001 fd91 	bl	8006846 <isPrime>
 8004d24:	0003      	movs	r3, r0
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d106      	bne.n	8004d38 <Input_Capture_Processing+0x38>

		interrupt_period_value += 1;
 8004d2a:	1dbb      	adds	r3, r7, #6
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	1dbb      	adds	r3, r7, #6
 8004d36:	801a      	strh	r2, [r3, #0]
	}

	//START FINDING FACTORS
	uint32_t N = interrupt_period_value << 6; //calculate the N-value which is prescaler_meas * interrupt_period_meas. The measurement prescaler is used which is 64. (TIM2 has a prescaler of 64*512, but since we divide this value by 512, the prescaler is then just 64).
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	019b      	lsls	r3, r3, #6
 8004d40:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004d42:	2317      	movs	r3, #23
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e02d      	b.n	8004da8 <Input_Capture_Processing+0xa8>

		interrupt_period_value = 256 - i;
 8004d4c:	2317      	movs	r3, #23
 8004d4e:	18fb      	adds	r3, r7, r3
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2280      	movs	r2, #128	@ 0x80
 8004d56:	0052      	lsls	r2, r2, #1
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	1dbb      	adds	r3, r7, #6
 8004d5e:	801a      	strh	r2, [r3, #0]
		uint16_t remainder = N % interrupt_period_value;
 8004d60:	1dbb      	adds	r3, r7, #6
 8004d62:	881b      	ldrh	r3, [r3, #0]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	001a      	movs	r2, r3
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	0011      	movs	r1, r2
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	f7fb fa51 	bl	8000214 <__aeabi_uidivmod>
 8004d72:	000b      	movs	r3, r1
 8004d74:	001a      	movs	r2, r3
 8004d76:	210e      	movs	r1, #14
 8004d78:	187b      	adds	r3, r7, r1
 8004d7a:	801a      	strh	r2, [r3, #0]

		if(remainder == 0){ //check if no remainder -> integer
 8004d7c:	187b      	adds	r3, r7, r1
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <Input_Capture_Processing+0x9c>

			params_ptr->raw_prescaler = N / interrupt_period_value;
 8004d84:	1dbb      	adds	r3, r7, #6
 8004d86:	881b      	ldrh	r3, [r3, #0]
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	6938      	ldr	r0, [r7, #16]
 8004d8e:	f7fb f9bb 	bl	8000108 <__udivsi3>
 8004d92:	0003      	movs	r3, r0
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	835a      	strh	r2, [r3, #26]
			break;
 8004d9a:	e00a      	b.n	8004db2 <Input_Capture_Processing+0xb2>
	for(uint8_t i = 0; i < 129; i++){ //check from period = 264 to 128 - there will be a prescaler for every non-prime value of N
 8004d9c:	2117      	movs	r1, #23
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	187b      	adds	r3, r7, r1
 8004da4:	3201      	adds	r2, #1
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	2317      	movs	r3, #23
 8004daa:	18fb      	adds	r3, r7, r3
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b80      	cmp	r3, #128	@ 0x80
 8004db0:	d9cc      	bls.n	8004d4c <Input_Capture_Processing+0x4c>
		}
	}

	params_ptr->raw_start_value = 256 - interrupt_period_value;
 8004db2:	1dbb      	adds	r3, r7, #6
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2280      	movs	r2, #128	@ 0x80
 8004dba:	0052      	lsls	r2, r2, #1
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	825a      	strh	r2, [r3, #18]

	Calculate_Next_Main_Oscillator_Values(params_ptr, (enum Next_Values_Processing_Mode)IP_CAPTURE_MODE);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	0018      	movs	r0, r3
 8004dca:	f000 f9f7 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
	Process_TIM16_Final_Start_Value_and_Final_Prescaler(params_ptr);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	f001 f8f5 	bl	8005fc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>

	//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);

	return 1;
 8004dd6:	2301      	movs	r3, #1
}
 8004dd8:	0018      	movs	r0, r3
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	b006      	add	sp, #24
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000cfc 	.word	0x20000cfc

08004de4 <Start_Input_Capture_Timer>:

uint8_t Start_Input_Capture_Timer(void){
 8004de4:	b590      	push	{r4, r7, lr}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0

	uint8_t ok = Start_IC_TIM(&htim2, TIM_CHANNEL_1);
 8004dea:	1dfc      	adds	r4, r7, #7
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <Start_Input_Capture_Timer+0x30>)
 8004dee:	2100      	movs	r1, #0
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 f811 	bl	8004e18 <Start_IC_TIM>
 8004df6:	0003      	movs	r3, r0
 8004df8:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 8004dfa:	1dfb      	adds	r3, r7, #7
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <Start_Input_Capture_Timer+0x22>

		Error_Handler();
 8004e02:	f7fd fd71 	bl	80028e8 <Error_Handler>
	}

	return ok;
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
}
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	b003      	add	sp, #12
 8004e10:	bd90      	pop	{r4, r7, pc}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	200008cc 	.word	0x200008cc

08004e18 <Start_IC_TIM>:

uint8_t Start_IC_TIM(TIM_HandleTypeDef *TIM, uint32_t IC_TIM_channel){
 8004e18:	b5b0      	push	{r4, r5, r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]

	uint8_t ok_AND = HAL_TIM_Base_Start_IT(&htim2);
 8004e22:	250f      	movs	r5, #15
 8004e24:	197c      	adds	r4, r7, r5
 8004e26:	4b10      	ldr	r3, [pc, #64]	@ (8004e68 <Start_IC_TIM+0x50>)
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f005 fb51 	bl	800a4d0 <HAL_TIM_Base_Start_IT>
 8004e2e:	0003      	movs	r3, r0
 8004e30:	7023      	strb	r3, [r4, #0]
	ok_AND &= HAL_TIM_IC_Start_IT(&htim2, IC_TIM_channel);
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <Start_IC_TIM+0x50>)
 8004e36:	0011      	movs	r1, r2
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f005 ffb7 	bl	800adac <HAL_TIM_IC_Start_IT>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	0019      	movs	r1, r3
 8004e42:	197b      	adds	r3, r7, r5
 8004e44:	197a      	adds	r2, r7, r5
 8004e46:	7812      	ldrb	r2, [r2, #0]
 8004e48:	400a      	ands	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]

	if(ok_AND != HAL_OK){
 8004e4c:	197b      	adds	r3, r7, r5
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <Start_IC_TIM+0x40>

		Error_Handler();
 8004e54:	f7fd fd48 	bl	80028e8 <Error_Handler>
	}

	return ok_AND;
 8004e58:	230f      	movs	r3, #15
 8004e5a:	18fb      	adds	r3, r7, r3
 8004e5c:	781b      	ldrb	r3, [r3, #0]
}
 8004e5e:	0018      	movs	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	b004      	add	sp, #16
 8004e64:	bdb0      	pop	{r4, r5, r7, pc}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	200008cc 	.word	0x200008cc

08004e6c <Copy_Params_Structs>:

uint8_t Copy_Params_Structs(struct Params *src_ptr, struct Params *dst_ptr){
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]

	*dst_ptr = *src_ptr;
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	0010      	movs	r0, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	2324      	movs	r3, #36	@ 0x24
 8004e80:	001a      	movs	r2, r3
 8004e82:	f009 f935 	bl	800e0f0 <memcpy>

	return 1;
 8004e86:	2301      	movs	r3, #1
}
 8004e88:	0018      	movs	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <Start_Measurement_Reelapse_Timer>:

uint8_t Start_Measurement_Reelapse_Timer(void){
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0

	Stop_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004e96:	2100      	movs	r1, #0
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f001 fcb8 	bl	800680e <Stop_OC_TIM>
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, interrupt_period);
 8004ea6:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <Start_Measurement_Reelapse_Timer+0x38>)
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	4b05      	ldr	r3, [pc, #20]	@ (8004ec4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	635a      	str	r2, [r3, #52]	@ 0x34
	Start_OC_TIM(&htim3, TIM_CHANNEL_1);
 8004eb2:	4b04      	ldr	r3, [pc, #16]	@ (8004ec4 <Start_Measurement_Reelapse_Timer+0x34>)
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	0018      	movs	r0, r3
 8004eb8:	f001 fc8d 	bl	80067d6 <Start_OC_TIM>

	return 1;
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000988 	.word	0x20000988
 8004ec8:	20000cf8 	.word	0x20000cf8

08004ecc <Begin_Input_Capture_Measurement>:

uint8_t Begin_Input_Capture_Measurement(void){
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0

	__HAL_TIM_SET_COUNTER(&htim2, 0); //begin measurement
 8004ed0:	4b03      	ldr	r3, [pc, #12]	@ (8004ee0 <Begin_Input_Capture_Measurement+0x14>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

	return 1;
 8004ed8:	2301      	movs	r3, #1
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	200008cc 	.word	0x200008cc

08004ee4 <main>:
//INCLUDES
#include "main.h"
#include "main_vars.h"

int main(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
	//SYSTEM INIT
	System_Init();
 8004ee8:	f7fd fd04 	bl	80028f4 <System_Init>

	//STARTUP
	Startup();
 8004eec:	f000 fb5c 	bl	80055a8 <Startup>

	while (1)
	{
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 8004ef0:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <main+0x13c>)
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f001 fcf1 	bl	80068dc <Get_Status_Bit>
 8004efa:	0003      	movs	r3, r0
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <main+0x2c>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 1);

			Input_Capture_Processing(interrupt_period, &params_to_be_loaded);
 8004f00:	4b48      	ldr	r3, [pc, #288]	@ (8005024 <main+0x140>)
 8004f02:	881b      	ldrh	r3, [r3, #0]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	4a48      	ldr	r2, [pc, #288]	@ (8005028 <main+0x144>)
 8004f08:	0011      	movs	r1, r2
 8004f0a:	0018      	movs	r0, r3
 8004f0c:	f7ff fef8 	bl	8004d00 <Input_Capture_Processing>

			//HAL_GPIO_WritePin(MONITOR_GPIO_Port, MONITOR_Pin, 0);
		}

		if(Get_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running) == YES){
 8004f10:	4b43      	ldr	r3, [pc, #268]	@ (8005020 <main+0x13c>)
 8004f12:	2140      	movs	r1, #64	@ 0x40
 8004f14:	0018      	movs	r0, r3
 8004f16:	f001 fce1 	bl	80068dc <Get_Status_Bit>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d12b      	bne.n	8004f78 <main+0x94>

			if(idle_counter < IDLE_COUNT){
 8004f20:	4b42      	ldr	r3, [pc, #264]	@ (800502c <main+0x148>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	23fa      	movs	r3, #250	@ 0xfa
 8004f26:	01db      	lsls	r3, r3, #7
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d218      	bcs.n	8004f5e <main+0x7a>

				if(IP_CAP_fsm.current_state != IDLE){
 8004f2c:	4b40      	ldr	r3, [pc, #256]	@ (8005030 <main+0x14c>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00d      	beq.n	8004f52 <main+0x6e>

					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004f36:	4b3a      	ldr	r3, [pc, #232]	@ (8005020 <main+0x13c>)
 8004f38:	2140      	movs	r1, #64	@ 0x40
 8004f3a:	0018      	movs	r0, r3
 8004f3c:	f001 fcf4 	bl	8006928 <Clear_Status_Bit>
					Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004f40:	4b37      	ldr	r3, [pc, #220]	@ (8005020 <main+0x13c>)
 8004f42:	2120      	movs	r1, #32
 8004f44:	0018      	movs	r0, r3
 8004f46:	f001 fcef 	bl	8006928 <Clear_Status_Bit>
					idle_counter = 0;
 8004f4a:	4b38      	ldr	r3, [pc, #224]	@ (800502c <main+0x148>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e012      	b.n	8004f78 <main+0x94>
				}
				else{

					idle_counter++;
 8004f52:	4b36      	ldr	r3, [pc, #216]	@ (800502c <main+0x148>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <main+0x148>)
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	e00c      	b.n	8004f78 <main+0x94>
				}
			}
			else{

				Clear_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Is_Running);
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <main+0x13c>)
 8004f60:	2140      	movs	r1, #64	@ 0x40
 8004f62:	0018      	movs	r0, r3
 8004f64:	f001 fce0 	bl	8006928 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_IP_CAP_Idle_Timer_Has_Timed_Out);
 8004f68:	4b2d      	ldr	r3, [pc, #180]	@ (8005020 <main+0x13c>)
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	f001 fcc9 	bl	8006904 <Set_Status_Bit>
				idle_counter = 0;
 8004f72:	4b2e      	ldr	r3, [pc, #184]	@ (800502c <main+0x148>)
 8004f74:	2200      	movs	r2, #0
 8004f76:	601a      	str	r2, [r3, #0]
			}
		}

		if(Get_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running) == YES){
 8004f78:	2380      	movs	r3, #128	@ 0x80
 8004f7a:	005a      	lsls	r2, r3, #1
 8004f7c:	4b28      	ldr	r3, [pc, #160]	@ (8005020 <main+0x13c>)
 8004f7e:	0011      	movs	r1, r2
 8004f80:	0018      	movs	r0, r3
 8004f82:	f001 fcab 	bl	80068dc <Get_Status_Bit>
 8004f86:	0003      	movs	r3, r0
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d122      	bne.n	8004fd2 <main+0xee>

			if(midi_counter < MIDI_COUNT){
 8004f8c:	4b29      	ldr	r3, [pc, #164]	@ (8005034 <main+0x150>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a29      	ldr	r2, [pc, #164]	@ (8005038 <main+0x154>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d805      	bhi.n	8004fa2 <main+0xbe>

				midi_counter++;
 8004f96:	4b27      	ldr	r3, [pc, #156]	@ (8005034 <main+0x150>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	4b25      	ldr	r3, [pc, #148]	@ (8005034 <main+0x150>)
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e017      	b.n	8004fd2 <main+0xee>
			}
			else{

				Clear_Status_Bit(&statuses, Software_MIDI_Timer_Is_Running);
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	005a      	lsls	r2, r3, #1
 8004fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8005020 <main+0x13c>)
 8004fa8:	0011      	movs	r1, r2
 8004faa:	0018      	movs	r0, r3
 8004fac:	f001 fcbc 	bl	8006928 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Software_MIDI_Timer_Has_Timed_Out);
 8004fb0:	2380      	movs	r3, #128	@ 0x80
 8004fb2:	009a      	lsls	r2, r3, #2
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <main+0x13c>)
 8004fb6:	0011      	movs	r1, r2
 8004fb8:	0018      	movs	r0, r3
 8004fba:	f001 fca3 	bl	8006904 <Set_Status_Bit>
				active_status_byte = 0;
 8004fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800503c <main+0x158>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
				Clear_Data_Buffer(&MIDI_data);
 8004fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8005040 <main+0x15c>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f7fc fbb1 	bl	800172e <Clear_Data_Buffer>
				midi_counter = 0;
 8004fcc:	4b19      	ldr	r3, [pc, #100]	@ (8005034 <main+0x150>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]
			}
		}
		if(Get_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running) == YES){
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <main+0x13c>)
 8004fd8:	0011      	movs	r1, r2
 8004fda:	0018      	movs	r0, r3
 8004fdc:	f001 fc7e 	bl	80068dc <Get_Status_Bit>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d184      	bne.n	8004ef0 <main+0xc>

			if(preset_save_idle_counter < PRESET_SAVE_IDLE_COUNT){
 8004fe6:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <main+0x160>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a17      	ldr	r2, [pc, #92]	@ (8005048 <main+0x164>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d805      	bhi.n	8004ffc <main+0x118>

				preset_save_idle_counter++;
 8004ff0:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <main+0x160>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	4b13      	ldr	r3, [pc, #76]	@ (8005044 <main+0x160>)
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e779      	b.n	8004ef0 <main+0xc>
			}
			else{

				Clear_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Is_Running);
 8004ffc:	2380      	movs	r3, #128	@ 0x80
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	4b07      	ldr	r3, [pc, #28]	@ (8005020 <main+0x13c>)
 8005002:	0011      	movs	r1, r2
 8005004:	0018      	movs	r0, r3
 8005006:	f001 fc8f 	bl	8006928 <Clear_Status_Bit>
				Set_Status_Bit(&statuses, Tap_Tempo_Preset_Save_Timer_Has_Timed_Out);
 800500a:	2380      	movs	r3, #128	@ 0x80
 800500c:	019a      	lsls	r2, r3, #6
 800500e:	4b04      	ldr	r3, [pc, #16]	@ (8005020 <main+0x13c>)
 8005010:	0011      	movs	r1, r2
 8005012:	0018      	movs	r0, r3
 8005014:	f001 fc76 	bl	8006904 <Set_Status_Bit>
				preset_save_idle_counter = 0;
 8005018:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <main+0x160>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]
		if(Get_Status_Bit(&statuses, Input_Capture_Processing_Can_Be_Started) == YES){
 800501e:	e767      	b.n	8004ef0 <main+0xc>
 8005020:	20000cfc 	.word	0x20000cfc
 8005024:	20000cf8 	.word	0x20000cf8
 8005028:	20000d60 	.word	0x20000d60
 800502c:	20000d00 	.word	0x20000d00
 8005030:	20000444 	.word	0x20000444
 8005034:	20000d04 	.word	0x20000d04
 8005038:	00030d3f 	.word	0x00030d3f
 800503c:	20000583 	.word	0x20000583
 8005040:	20000588 	.word	0x20000588
 8005044:	20000d08 	.word	0x20000d08
 8005048:	001c3a8f 	.word	0x001c3a8f

0800504c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>:
								.duty_delay_line_start_offset = 1,  //initial value is 1st index - to give us space to fill index 0
								.duty_delay_line_finish_offset = FINAL_INDEX + 1}; //initial value is 512th index, one larger than the index of the final sample

//FUNCTION DEFINITIONS
uint8_t Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(TIM_HandleTypeDef *TIM, uint32_t PWM_TIM_channel_1, uint32_t PWM_TIM_channel_2)
{
 800504c:	b590      	push	{r4, r7, lr}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
	uint8_t ok_OR = 0;
 8005058:	2417      	movs	r4, #23
 800505a:	193b      	adds	r3, r7, r4
 800505c:	2200      	movs	r2, #0
 800505e:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_Base_Start(TIM);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	0018      	movs	r0, r3
 8005064:	f005 f9e8 	bl	800a438 <HAL_TIM_Base_Start>
 8005068:	0003      	movs	r3, r0
 800506a:	0019      	movs	r1, r3
 800506c:	193b      	adds	r3, r7, r4
 800506e:	193a      	adds	r2, r7, r4
 8005070:	7812      	ldrb	r2, [r2, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_1); //start PWM
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	0011      	movs	r1, r2
 800507c:	0018      	movs	r0, r3
 800507e:	f005 fd49 	bl	800ab14 <HAL_TIM_PWM_Start>
 8005082:	0003      	movs	r3, r0
 8005084:	0019      	movs	r1, r3
 8005086:	193b      	adds	r3, r7, r4
 8005088:	193a      	adds	r2, r7, r4
 800508a:	7812      	ldrb	r2, [r2, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	701a      	strb	r2, [r3, #0]
	ok_OR |= HAL_TIM_PWM_Start(TIM, PWM_TIM_channel_2); //start PWM
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	0011      	movs	r1, r2
 8005096:	0018      	movs	r0, r3
 8005098:	f005 fd3c 	bl	800ab14 <HAL_TIM_PWM_Start>
 800509c:	0003      	movs	r3, r0
 800509e:	0019      	movs	r1, r3
 80050a0:	193b      	adds	r3, r7, r4
 80050a2:	193a      	adds	r2, r7, r4
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	430a      	orrs	r2, r1
 80050a8:	701a      	strb	r2, [r3, #0]

	if(ok_OR != HAL_OK){
 80050aa:	193b      	adds	r3, r7, r4
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators+0x6a>

		Error_Handler();
 80050b2:	f7fd fc19 	bl	80028e8 <Error_Handler>
	}

	return ok_OR;
 80050b6:	2317      	movs	r3, #23
 80050b8:	18fb      	adds	r3, r7, r3
 80050ba:	781b      	ldrb	r3, [r3, #0]
}
 80050bc:	0018      	movs	r0, r3
 80050be:	46bd      	mov	sp, r7
 80050c0:	b007      	add	sp, #28
 80050c2:	bd90      	pop	{r4, r7, pc}

080050c4 <Start_Freq_Gen_Timer>:

uint8_t Start_Freq_Gen_Timer(void)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
	uint8_t ok = Start_OC_TIM(&htim16, TIM_CHANNEL_1); //start freq. gen.
 80050ca:	1dfc      	adds	r4, r7, #7
 80050cc:	4b09      	ldr	r3, [pc, #36]	@ (80050f4 <Start_Freq_Gen_Timer+0x30>)
 80050ce:	2100      	movs	r1, #0
 80050d0:	0018      	movs	r0, r3
 80050d2:	f001 fb80 	bl	80067d6 <Start_OC_TIM>
 80050d6:	0003      	movs	r3, r0
 80050d8:	7023      	strb	r3, [r4, #0]

	if(ok != HAL_OK){
 80050da:	1dfb      	adds	r3, r7, #7
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <Start_Freq_Gen_Timer+0x22>

		Error_Handler();
 80050e2:	f7fd fc01 	bl	80028e8 <Error_Handler>
	}

	return ok;
 80050e6:	1dfb      	adds	r3, r7, #7
 80050e8:	781b      	ldrb	r3, [r3, #0]
}
 80050ea:	0018      	movs	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	b003      	add	sp, #12
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	46c0      	nop			@ (mov r8, r8)
 80050f4:	20000810 	.word	0x20000810

080050f8 <Process_TIM16_Raw_Start_Value_and_Raw_Prescaler>:

uint8_t Process_TIM16_Raw_Start_Value_and_Raw_Prescaler(struct Params* params_ptr){
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

	uint32_t speed_control = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
	uint8_t how_many_128 = 0;
 8005104:	210b      	movs	r1, #11
 8005106:	187b      	adds	r3, r7, r1
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]

    //speed_control = (speed_adc_10_bit/1024)*'range macro'
    speed_control = params_ptr->speed * NUMBER_OF_FREQUENCY_STEPS;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	891b      	ldrh	r3, [r3, #8]
 8005110:	b29b      	uxth	r3, r3
 8005112:	001a      	movs	r2, r3
 8005114:	0013      	movs	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	189b      	adds	r3, r3, r2
 800511a:	019b      	lsls	r3, r3, #6
 800511c:	189b      	adds	r3, r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	189b      	adds	r3, r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
    speed_control = speed_control >> SPEED_ADC_RESOLUTION;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	0a9b      	lsrs	r3, r3, #10
 8005128:	60fb      	str	r3, [r7, #12]

    how_many_128 = (uint8_t)(speed_control >> 7); //divide by 128, i.e. return how many 128s go into the speed_control
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	09da      	lsrs	r2, r3, #7
 800512e:	187b      	adds	r3, r7, r1
 8005130:	701a      	strb	r2, [r3, #0]
    params_ptr->raw_start_value = (uint16_t)(speed_control - (uint16_t)(how_many_128 << 7)); //how_many_128*128
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	b29a      	uxth	r2, r3
 8005136:	187b      	adds	r3, r7, r1
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b29b      	uxth	r3, r3
 800513c:	01db      	lsls	r3, r3, #7
 800513e:	b29b      	uxth	r3, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	b29a      	uxth	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	825a      	strh	r2, [r3, #18]
    params_ptr->raw_prescaler = SLOWEST_SPEED_PRESCALER >> how_many_128;
 8005148:	187b      	adds	r3, r7, r1
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2280      	movs	r2, #128	@ 0x80
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	411a      	asrs	r2, r3
 8005152:	0013      	movs	r3, r2
 8005154:	b29a      	uxth	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	835a      	strh	r2, [r3, #26]

    return 1;
 800515a:	2301      	movs	r3, #1
}
 800515c:	0018      	movs	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	b004      	add	sp, #16
 8005162:	bd80      	pop	{r7, pc}

08005164 <Set_Oscillator_Values>:

uint8_t Set_Oscillator_Values(struct Params* params_ptr){
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

	////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE MAIN OSCILLATOR//
	////////////////////////////////////////////////////////
	__HAL_TIM_SET_AUTORELOAD(&htim16, params_ptr->final_ARR);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8b1b      	ldrh	r3, [r3, #24]
 8005170:	b29a      	uxth	r2, r3
 8005172:	4b10      	ldr	r3, [pc, #64]	@ (80051b4 <Set_Oscillator_Values+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	8b1b      	ldrh	r3, [r3, #24]
 800517c:	b29b      	uxth	r3, r3
 800517e:	001a      	movs	r2, r3
 8005180:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <Set_Oscillator_Values+0x50>)
 8005182:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(&htim16, params_ptr->final_prescaler_minus_one); //have to take one off the divisor
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	8bdb      	ldrh	r3, [r3, #30]
 8005188:	b29a      	uxth	r2, r3
 800518a:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <Set_Oscillator_Values+0x50>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	629a      	str	r2, [r3, #40]	@ 0x28

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, params_ptr->prev_duty); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	885b      	ldrh	r3, [r3, #2]
 8005194:	b29a      	uxth	r2, r3
 8005196:	4b08      	ldr	r3, [pc, #32]	@ (80051b8 <Set_Oscillator_Values+0x54>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	639a      	str	r2, [r3, #56]	@ 0x38

	/////////////////////////////////////////////////////////////
	//SET THE CURRENT(prev) VALUES FOR THE SECONDARY OSCILLATOR//
	/////////////////////////////////////////////////////////////
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, params_ptr->duty_delayed); //updates the CCR register of TIM14, which sets duty, i.e. the ON time relative to the total period which is set by the ARR.
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	889b      	ldrh	r3, [r3, #4]
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	4b05      	ldr	r3, [pc, #20]	@ (80051b8 <Set_Oscillator_Values+0x54>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

	return 1;
 80051a8:	2301      	movs	r3, #1
}
 80051aa:	0018      	movs	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	b002      	add	sp, #8
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	46c0      	nop			@ (mov r8, r8)
 80051b4:	20000810 	.word	0x20000810
 80051b8:	20000a44 	.word	0x20000a44

080051bc <Calculate_Next_Main_Oscillator_Values>:

uint8_t Calculate_Next_Main_Oscillator_Values(struct Params* params_ptr, enum Next_Values_Processing_Mode mode){
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	000a      	movs	r2, r1
 80051c6:	1cfb      	adds	r3, r7, #3
 80051c8:	701a      	strb	r2, [r3, #0]

	if(mode == REGULAR_MODE){
 80051ca:	1cfb      	adds	r3, r7, #3
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d144      	bne.n	800525c <Calculate_Next_Main_Oscillator_Values+0xa0>

		params_ptr->index++;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	89db      	ldrh	r3, [r3, #14]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3301      	adds	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	81da      	strh	r2, [r3, #14]

		if(params_ptr->index == FINAL_INDEX + 1){
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	89db      	ldrh	r3, [r3, #14]
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	2380      	movs	r3, #128	@ 0x80
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d102      	bne.n	80051f4 <Calculate_Next_Main_Oscillator_Values+0x38>
			params_ptr->index = 0;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	81da      	strh	r2, [r3, #14]
		}

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	89db      	ldrh	r3, [r3, #14]
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d106      	bne.n	800520c <Calculate_Next_Main_Oscillator_Values+0x50>
			params_ptr->quadrant = FIRST_QUADRANT;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	741a      	strb	r2, [r3, #16]
 800520a:	e05a      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == SECOND_QUADRANT_START_INDEX){
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	89db      	ldrh	r3, [r3, #14]
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b80      	cmp	r3, #128	@ 0x80
 8005214:	d106      	bne.n	8005224 <Calculate_Next_Main_Oscillator_Values+0x68>
			params_ptr->quadrant = SECOND_QUADRANT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	741a      	strb	r2, [r3, #16]
 8005222:	e04e      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == THIRD_QUADRANT_START_INDEX){
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	89db      	ldrh	r3, [r3, #14]
 8005228:	b29a      	uxth	r2, r3
 800522a:	2380      	movs	r3, #128	@ 0x80
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	429a      	cmp	r2, r3
 8005230:	d106      	bne.n	8005240 <Calculate_Next_Main_Oscillator_Values+0x84>
			params_ptr->quadrant = FIRST_QUADRANT;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	741a      	strb	r2, [r3, #16]
 800523e:	e040      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else if(params_ptr->index == FOURTH_QUADRANT_START_INDEX){
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	89db      	ldrh	r3, [r3, #14]
 8005244:	b29a      	uxth	r2, r3
 8005246:	23c0      	movs	r3, #192	@ 0xc0
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	429a      	cmp	r2, r3
 800524c:	d139      	bne.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = SECOND_QUADRANT;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = SECOND_HALFCYCLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	741a      	strb	r2, [r3, #16]
 800525a:	e032      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == IP_CAPTURE_MODE){
 800525c:	1cfb      	adds	r3, r7, #3
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d11f      	bne.n	80052a4 <Calculate_Next_Main_Oscillator_Values+0xe8>

		if(params_ptr->waveshape == SINE_MODE || params_ptr->waveshape == TRIANGLE_MODE){
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	799b      	ldrb	r3, [r3, #6]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d004      	beq.n	8005278 <Calculate_Next_Main_Oscillator_Values+0xbc>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	799b      	ldrb	r3, [r3, #6]
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d10a      	bne.n	800528e <Calculate_Next_Main_Oscillator_Values+0xd2>

			params_ptr->index = SINE_OR_TRIANGLE_WAVE_TEMPO_PERCEIVED_APEX_INDEX;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	22a7      	movs	r2, #167	@ 0xa7
 800527c:	0052      	lsls	r2, r2, #1
 800527e:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SINE_OR_TRI_SYNCED;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SINE_OR_TRI_SYNCED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	741a      	strb	r2, [r3, #16]
 800528c:	e019      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
		else{

			params_ptr->index = SQUARE_WAVE_TEMPO_APEX_INDEX;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2280      	movs	r2, #128	@ 0x80
 8005292:	0052      	lsls	r2, r2, #1
 8005294:	81da      	strh	r2, [r3, #14]
			params_ptr->quadrant = CURRENT_QUADRANT_SQUARE_SYNCED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = CURRENT_HALFCYCLE_SQUARE_SYNCED;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	741a      	strb	r2, [r3, #16]
 80052a2:	e00e      	b.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
		}
	}
	else if(mode == STARTUP_MODE){
 80052a4:	1cfb      	adds	r3, r7, #3
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d10a      	bne.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>

		if(params_ptr->index == FIRST_QUADRANT_START_INDEX){
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	89db      	ldrh	r3, [r3, #14]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d105      	bne.n	80052c2 <Calculate_Next_Main_Oscillator_Values+0x106>
			params_ptr->quadrant = FIRST_QUADRANT;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	745a      	strb	r2, [r3, #17]
			params_ptr->halfcycle = FIRST_HALFCYCLE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	741a      	strb	r2, [r3, #16]
		}
	}

	//ONCE INDEX IS SET, FIND THE DUTY VALUE
	if(params_ptr->waveshape == TRIANGLE_MODE){
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	799b      	ldrb	r3, [r3, #6]
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <Calculate_Next_Main_Oscillator_Values+0x124>
		params_ptr->duty = tri_wavetable[params_ptr->index];
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	89db      	ldrh	r3, [r3, #14]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	001a      	movs	r2, r3
 80052d4:	4b31      	ldr	r3, [pc, #196]	@ (800539c <Calculate_Next_Main_Oscillator_Values+0x1e0>)
 80052d6:	0052      	lsls	r2, r2, #1
 80052d8:	5ad2      	ldrh	r2, [r2, r3]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	801a      	strh	r2, [r3, #0]
 80052de:	e029      	b.n	8005334 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if(params_ptr->waveshape == SINE_MODE){
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	799b      	ldrb	r3, [r3, #6]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d109      	bne.n	80052fe <Calculate_Next_Main_Oscillator_Values+0x142>
		params_ptr->duty = sine_wavetable[params_ptr->index];
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	89db      	ldrh	r3, [r3, #14]
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	001a      	movs	r2, r3
 80052f2:	4b2b      	ldr	r3, [pc, #172]	@ (80053a0 <Calculate_Next_Main_Oscillator_Values+0x1e4>)
 80052f4:	0052      	lsls	r2, r2, #1
 80052f6:	5ad2      	ldrh	r2, [r2, r3]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	801a      	strh	r2, [r3, #0]
 80052fc:	e01a      	b.n	8005334 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index < THIRD_QUADRANT_START_INDEX)){
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	799b      	ldrb	r3, [r3, #6]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d108      	bne.n	800531a <Calculate_Next_Main_Oscillator_Values+0x15e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	89db      	ldrh	r3, [r3, #14]
 800530c:	b29b      	uxth	r3, r3
 800530e:	2bff      	cmp	r3, #255	@ 0xff
 8005310:	d803      	bhi.n	800531a <Calculate_Next_Main_Oscillator_Values+0x15e>
		params_ptr->duty = PWM_DUTY_VALUE_MAX;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a23      	ldr	r2, [pc, #140]	@ (80053a4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e00c      	b.n	8005334 <Calculate_Next_Main_Oscillator_Values+0x178>
	}
	else if((params_ptr->waveshape == SQUARE_MODE) && (params_ptr->index >= THIRD_QUADRANT_START_INDEX)){
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	799b      	ldrb	r3, [r3, #6]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d107      	bne.n	8005334 <Calculate_Next_Main_Oscillator_Values+0x178>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	89db      	ldrh	r3, [r3, #14]
 8005328:	b29b      	uxth	r3, r3
 800532a:	2bff      	cmp	r3, #255	@ 0xff
 800532c:	d902      	bls.n	8005334 <Calculate_Next_Main_Oscillator_Values+0x178>
		params_ptr->duty = PWM_DUTY_VALUE_MIN;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	801a      	strh	r2, [r3, #0]

	//APPLY DEPTH
	#if DEPTH_ON_OR_OFF == 1

		//Apply Depth
		if(params_ptr->depth == ((1 << DEPTH_ADC_RESOLUTION) - 1)){ //255
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	7a9b      	ldrb	r3, [r3, #10]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b7f      	cmp	r3, #127	@ 0x7f
 800533c:	d108      	bne.n	8005350 <Calculate_Next_Main_Oscillator_Values+0x194>
			params_ptr->duty = PWM_DUTY_VALUE_MAX - params_ptr->duty;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	4a17      	ldr	r2, [pc, #92]	@ (80053a4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	b29a      	uxth	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	e01b      	b.n	8005388 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else if(params_ptr->depth != 0){
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7a9b      	ldrb	r3, [r3, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <Calculate_Next_Main_Oscillator_Values+0x1c6>

			//duty = 1023 - duty*(current_depth >> 8);
			uint32_t multiply_product = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]
			multiply_product = (params_ptr->duty) * (params_ptr->depth);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	001a      	movs	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	7a9b      	ldrb	r3, [r3, #10]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	4353      	muls	r3, r2
 800536e:	60fb      	str	r3, [r7, #12]
			params_ptr->duty = PWM_DUTY_VALUE_MAX - (multiply_product >> DEPTH_ADC_RESOLUTION);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	09db      	lsrs	r3, r3, #7
 8005374:	b29b      	uxth	r3, r3
 8005376:	4a0b      	ldr	r2, [pc, #44]	@ (80053a4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e002      	b.n	8005388 <Calculate_Next_Main_Oscillator_Values+0x1cc>
		}
		else{
			params_ptr->duty = PWM_DUTY_VALUE_MAX; //if depth is 0, just output 1023
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a07      	ldr	r2, [pc, #28]	@ (80053a4 <Calculate_Next_Main_Oscillator_Values+0x1e8>)
 8005386:	801a      	strh	r2, [r3, #0]
		}

	#endif

	//SET THE NEXT VALUE FOR THE MAIN OSCILLATOR
	params_ptr->prev_duty = params_ptr->duty;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29a      	uxth	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	805a      	strh	r2, [r3, #2]

	return 1;
 8005392:	2301      	movs	r3, #1
}
 8005394:	0018      	movs	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	b004      	add	sp, #16
 800539a:	bd80      	pop	{r7, pc}
 800539c:	0800e560 	.word	0x0800e560
 80053a0:	0800e160 	.word	0x0800e160
 80053a4:	000003ff 	.word	0x000003ff

080053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>:

uint8_t Write_Next_Main_Oscillator_Values_to_Delay_Line(struct Params* params_ptr, struct Delay_Line* delay_line_ptr){
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]

	//STORE THE VALUES IN THE APPROPRIATE '0TH - 1' INDEX RELATIVE TO THE START POINTER
		if(delay_line_ptr->duty_delay_line_start_offset != 0){
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	4a44      	ldr	r2, [pc, #272]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053b6:	5a9b      	ldrh	r3, [r3, r2]
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00b      	beq.n	80053d6 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x2e>
			delay_line_ptr->duty_delay_line_storage_array[delay_line_ptr->duty_delay_line_start_offset - 1] = params_ptr->duty;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	4a41      	ldr	r2, [pc, #260]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053c2:	5a9b      	ldrh	r3, [r3, r2]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	b299      	uxth	r1, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	0052      	lsls	r2, r2, #1
 80053d2:	52d1      	strh	r1, [r2, r3]
 80053d4:	e006      	b.n	80053e4 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x3c>
		}
		else{
			delay_line_ptr->duty_delay_line_storage_array[FINAL_INDEX + 1] = params_ptr->duty;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	b299      	uxth	r1, r3
 80053dc:	683a      	ldr	r2, [r7, #0]
 80053de:	2380      	movs	r3, #128	@ 0x80
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	52d1      	strh	r1, [r2, r3]
		}

		//DECREMENT THE START AND FINISH POINTERS
		if(delay_line_ptr->duty_delay_line_start_offset == 0){
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4a38      	ldr	r2, [pc, #224]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053e8:	5a9b      	ldrh	r3, [r3, r2]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10e      	bne.n	800540e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x66>
			delay_line_ptr->duty_delay_line_start_offset = FINAL_INDEX + 1;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80053f4:	2180      	movs	r1, #128	@ 0x80
 80053f6:	0089      	lsls	r1, r1, #2
 80053f8:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4a33      	ldr	r2, [pc, #204]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 80053fe:	5a9b      	ldrh	r3, [r3, r2]
 8005400:	b29b      	uxth	r3, r3
 8005402:	3b01      	subs	r3, #1
 8005404:	b299      	uxth	r1, r3
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	4a30      	ldr	r2, [pc, #192]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800540a:	5299      	strh	r1, [r3, r2]
 800540c:	e026      	b.n	800545c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else if(delay_line_ptr->duty_delay_line_finish_offset == 0){
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	4a2e      	ldr	r2, [pc, #184]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 8005412:	5a9b      	ldrh	r3, [r3, r2]
 8005414:	b29b      	uxth	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10e      	bne.n	8005438 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x90>
			delay_line_ptr->duty_delay_line_finish_offset = FINAL_INDEX + 1;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4a2b      	ldr	r2, [pc, #172]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800541e:	2180      	movs	r1, #128	@ 0x80
 8005420:	0089      	lsls	r1, r1, #2
 8005422:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	4a28      	ldr	r2, [pc, #160]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005428:	5a9b      	ldrh	r3, [r3, r2]
 800542a:	b29b      	uxth	r3, r3
 800542c:	3b01      	subs	r3, #1
 800542e:	b299      	uxth	r1, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	4a25      	ldr	r2, [pc, #148]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005434:	5299      	strh	r1, [r3, r2]
 8005436:	e011      	b.n	800545c <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xb4>
		}
		else{
			delay_line_ptr->duty_delay_line_start_offset = delay_line_ptr->duty_delay_line_start_offset - 1;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	4a23      	ldr	r2, [pc, #140]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800543c:	5a9b      	ldrh	r3, [r3, r2]
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b01      	subs	r3, #1
 8005442:	b299      	uxth	r1, r3
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	4a20      	ldr	r2, [pc, #128]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005448:	5299      	strh	r1, [r3, r2]
			delay_line_ptr->duty_delay_line_finish_offset = delay_line_ptr->duty_delay_line_finish_offset - 1;
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	4a1f      	ldr	r2, [pc, #124]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800544e:	5a9b      	ldrh	r3, [r3, r2]
 8005450:	b29b      	uxth	r3, r3
 8005452:	3b01      	subs	r3, #1
 8005454:	b299      	uxth	r1, r3
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	@ (80054cc <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x124>)
 800545a:	5299      	strh	r1, [r3, r2]
		}

		//DETERMINE THE DELAYED WAVE'S VALUES
		if(delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset > FINAL_INDEX + 1){ //if the desired starting index falls off the end of the array
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4a1a      	ldr	r2, [pc, #104]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 8005460:	5a9b      	ldrh	r3, [r3, r2]
 8005462:	b29b      	uxth	r3, r3
 8005464:	001a      	movs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800546a:	b29b      	uxth	r3, r3
 800546c:	18d2      	adds	r2, r2, r3
 800546e:	2380      	movs	r3, #128	@ 0x80
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	429a      	cmp	r2, r3
 8005474:	dd13      	ble.n	800549e <Write_Next_Main_Oscillator_Values_to_Delay_Line+0xf6>
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + (delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset - (FINAL_INDEX + 1)));
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	4913      	ldr	r1, [pc, #76]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 800547c:	5a5b      	ldrh	r3, [r3, r1]
 800547e:	b29b      	uxth	r3, r3
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005486:	b29b      	uxth	r3, r3
 8005488:	18cb      	adds	r3, r1, r3
 800548a:	4911      	ldr	r1, [pc, #68]	@ (80054d0 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x128>)
 800548c:	468c      	mov	ip, r1
 800548e:	4463      	add	r3, ip
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	18d3      	adds	r3, r2, r3
 8005494:	881b      	ldrh	r3, [r3, #0]
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	809a      	strh	r2, [r3, #4]
 800549c:	e00f      	b.n	80054be <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x116>
		}
		else{
			params_ptr->duty_delayed = *(delay_line_ptr->duty_delay_line_storage_array + delay_line_ptr->duty_delay_line_start_offset + params_ptr->duty_delay_line_read_pointer_offset);
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	4909      	ldr	r1, [pc, #36]	@ (80054c8 <Write_Next_Main_Oscillator_Values_to_Delay_Line+0x120>)
 80054a4:	5a5b      	ldrh	r3, [r3, r1]
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	0019      	movs	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	18cb      	adds	r3, r1, r3
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	881b      	ldrh	r3, [r3, #0]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	809a      	strh	r2, [r3, #4]
		}

	return 1;
 80054be:	2301      	movs	r3, #1
}
 80054c0:	0018      	movs	r0, r3
 80054c2:	46bd      	mov	sp, r7
 80054c4:	b002      	add	sp, #8
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	00000402 	.word	0x00000402
 80054cc:	00000404 	.word	0x00000404
 80054d0:	7ffffe00 	.word	0x7ffffe00

080054d4 <Process_ADC_Conversion_Values>:

uint8_t Process_ADC_Conversion_Values(struct Params* params_ptr, volatile uint16_t* ADCResultsDMA_ptr){
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]

	//GET WAVESHAPE
	uint16_t ADC_result = ADCResultsDMA_ptr[WAVESHAPE_ADC_RESULT_INDEX] >> 5; //set ADC_Result to waveshape index value, truncate to 7-bit
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	2116      	movs	r1, #22
 80054e6:	187b      	adds	r3, r7, r1
 80054e8:	0952      	lsrs	r2, r2, #5
 80054ea:	801a      	strh	r2, [r3, #0]

	if(ADC_result <= TRIANGLE_MODE_ADC_THRESHOLD){
 80054ec:	187b      	adds	r3, r7, r1
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f2:	d803      	bhi.n	80054fc <Process_ADC_Conversion_Values+0x28>
		params_ptr->waveshape = TRIANGLE_MODE; //triangle wave
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	719a      	strb	r2, [r3, #6]
 80054fa:	e010      	b.n	800551e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SINE_MODE_ADC_THRESHOLD){
 80054fc:	2316      	movs	r3, #22
 80054fe:	18fb      	adds	r3, r7, r3
 8005500:	881b      	ldrh	r3, [r3, #0]
 8005502:	2b55      	cmp	r3, #85	@ 0x55
 8005504:	d803      	bhi.n	800550e <Process_ADC_Conversion_Values+0x3a>
		params_ptr->waveshape = SINE_MODE; //sine wave
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	719a      	strb	r2, [r3, #6]
 800550c:	e007      	b.n	800551e <Process_ADC_Conversion_Values+0x4a>
	}
	else if (ADC_result <= SQUARE_MODE_ADC_THRESHOLD){
 800550e:	2316      	movs	r3, #22
 8005510:	18fb      	adds	r3, r7, r3
 8005512:	881b      	ldrh	r3, [r3, #0]
 8005514:	2b7f      	cmp	r3, #127	@ 0x7f
 8005516:	d802      	bhi.n	800551e <Process_ADC_Conversion_Values+0x4a>
		params_ptr->waveshape = SQUARE_MODE; //square wave
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	719a      	strb	r2, [r3, #6]
	}

	//GET SPEED
	uint16_t temp_speed = ADCResultsDMA_ptr[SPEED_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	3302      	adds	r3, #2
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29a      	uxth	r2, r3
 8005526:	2114      	movs	r1, #20
 8005528:	187b      	adds	r3, r7, r1
 800552a:	0952      	lsrs	r2, r2, #5
 800552c:	801a      	strh	r2, [r3, #0]
	temp_speed <<= 3; //convert to 10-bit
 800552e:	187b      	adds	r3, r7, r1
 8005530:	187a      	adds	r2, r7, r1
 8005532:	8812      	ldrh	r2, [r2, #0]
 8005534:	00d2      	lsls	r2, r2, #3
 8005536:	801a      	strh	r2, [r3, #0]
	params_ptr->speed = temp_speed;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	187a      	adds	r2, r7, r1
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	811a      	strh	r2, [r3, #8]

	//GET DEPTH
	#if DEPTH_ON_OR_OFF == ON

		uint8_t temp_depth = ADCResultsDMA_ptr[DEPTH_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	3304      	adds	r3, #4
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	095b      	lsrs	r3, r3, #5
 800554a:	b29a      	uxth	r2, r3
 800554c:	2113      	movs	r1, #19
 800554e:	187b      	adds	r3, r7, r1
 8005550:	701a      	strb	r2, [r3, #0]
		params_ptr->depth = temp_depth;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	187a      	adds	r2, r7, r1
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	729a      	strb	r2, [r3, #10]
	#endif

	//GET SYMMETRY
	#if SYMMETRY_ON_OR_OFF == ON

		uint16_t temp_symmetry = ADCResultsDMA_ptr[SYMMETRY_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	3306      	adds	r3, #6
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	b29a      	uxth	r2, r3
 8005562:	2110      	movs	r1, #16
 8005564:	187b      	adds	r3, r7, r1
 8005566:	0952      	lsrs	r2, r2, #5
 8005568:	801a      	strh	r2, [r3, #0]
		temp_symmetry <<= 1; //convert to 8-bit
 800556a:	187a      	adds	r2, r7, r1
 800556c:	187b      	adds	r3, r7, r1
 800556e:	881b      	ldrh	r3, [r3, #0]
 8005570:	18db      	adds	r3, r3, r3
 8005572:	8013      	strh	r3, [r2, #0]
		params_ptr->symmetry = temp_symmetry;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	187a      	adds	r2, r7, r1
 8005578:	8812      	ldrh	r2, [r2, #0]
 800557a:	819a      	strh	r2, [r3, #12]

	#endif

	//GET DELAY LINE READ POINTER OFFSET

	uint16_t temp_delay = ADCResultsDMA_ptr[DUTY_DELAY_LINE_READ_POINTER_OFFSET_ADC_RESULT_INDEX] >> 5; //truncate to 7-bit
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29a      	uxth	r2, r3
 8005584:	210e      	movs	r1, #14
 8005586:	187b      	adds	r3, r7, r1
 8005588:	0952      	lsrs	r2, r2, #5
 800558a:	801a      	strh	r2, [r3, #0]
	temp_delay <<= 2; //convert to 9-bit
 800558c:	187b      	adds	r3, r7, r1
 800558e:	187a      	adds	r2, r7, r1
 8005590:	8812      	ldrh	r2, [r2, #0]
 8005592:	0092      	lsls	r2, r2, #2
 8005594:	801a      	strh	r2, [r3, #0]
	params_ptr->duty_delay_line_read_pointer_offset = temp_delay;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	187a      	adds	r2, r7, r1
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	845a      	strh	r2, [r3, #34]	@ 0x22

	return 1;
 800559e:	2301      	movs	r3, #1
}
 80055a0:	0018      	movs	r0, r3
 80055a2:	46bd      	mov	sp, r7
 80055a4:	b006      	add	sp, #24
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <Startup>:
#include "stm32g0xx_ll_lptim.h"
#include "stm32g0xx_hal_flash.h"

#include "CC_and_PC.h" //for some reason compiler shits itself if this is included in startup.h

uint8_t __attribute__((optimize("O0")))Startup(void){
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af02      	add	r7, sp, #8

	//Shouldn't be required now we have a default state set below, even in case flash not programmed //Set_Status_Bit(&statuses, Start_Required_Before_Sync_Mode); //set default mode to requiring START MIDI message before beginning a sync

	HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80055ae:	2007      	movs	r0, #7
 80055b0:	f002 fd9b 	bl	80080ea <HAL_NVIC_DisableIRQ>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM2
 80055b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005720 <Startup+0x178>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	4b59      	ldr	r3, [pc, #356]	@ (8005720 <Startup+0x178>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2101      	movs	r1, #1
 80055c0:	430a      	orrs	r2, r1
 80055c2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim16, TIM_IT_UPDATE); //make sure the overflow (update) interrupt is enabled for TIM16
 80055c4:	4b57      	ldr	r3, [pc, #348]	@ (8005724 <Startup+0x17c>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	4b56      	ldr	r3, [pc, #344]	@ (8005724 <Startup+0x17c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2101      	movs	r1, #1
 80055d0:	430a      	orrs	r2, r1
 80055d2:	60da      	str	r2, [r3, #12]

	//SET DEFAULT PIN STATES
	HAL_GPIO_WritePin(SW_OUT_GPIO_Port, SW_OUT_Pin, 1); //latch high the debounced o/p
 80055d4:	2380      	movs	r3, #128	@ 0x80
 80055d6:	0099      	lsls	r1, r3, #2
 80055d8:	23a0      	movs	r3, #160	@ 0xa0
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	2201      	movs	r2, #1
 80055de:	0018      	movs	r0, r3
 80055e0:	f003 fbe5 	bl	8008dae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_HIGH_GPIO_Port, HACK_POT_HIGH_Pin, 1);
 80055e4:	2380      	movs	r3, #128	@ 0x80
 80055e6:	0159      	lsls	r1, r3, #5
 80055e8:	23a0      	movs	r3, #160	@ 0xa0
 80055ea:	05db      	lsls	r3, r3, #23
 80055ec:	2201      	movs	r2, #1
 80055ee:	0018      	movs	r0, r3
 80055f0:	f003 fbdd 	bl	8008dae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HACK_POT_LOW_GPIO_Port, HACK_POT_LOW_Pin, 0);
 80055f4:	23a0      	movs	r3, #160	@ 0xa0
 80055f6:	05db      	lsls	r3, r3, #23
 80055f8:	2200      	movs	r2, #0
 80055fa:	2180      	movs	r1, #128	@ 0x80
 80055fc:	0018      	movs	r0, r3
 80055fe:	f003 fbd6 	bl	8008dae <HAL_GPIO_WritePin>

	//Point Arrays to Presets
	Initialise_Preset_Arrays();
 8005602:	f7fa ff23 	bl	800044c <Initialise_Preset_Arrays>

	//Read User Presets From Flash, regardless of whether they have been written to before
	Read_and_Interpret_User_Presets_From_Flash();
 8005606:	f7fb fd39 	bl	800107c <Read_and_Interpret_User_Presets_From_Flash>

	//Read 'User Preset Used' Bytes, 'Start Required Before MIDI CLK' Byte, MIDI Omni On/Off Status Bit, and MIDI Basic Channel
	Read_and_Interpret_Misc_From_Flash(MISC_FLASH_MEMORY_ADDRESS, user_presets_used_array, &statuses, &MIDI_basic_channel, NUM_PRESETS);
 800560a:	4b47      	ldr	r3, [pc, #284]	@ (8005728 <Startup+0x180>)
 800560c:	4a47      	ldr	r2, [pc, #284]	@ (800572c <Startup+0x184>)
 800560e:	4948      	ldr	r1, [pc, #288]	@ (8005730 <Startup+0x188>)
 8005610:	4c48      	ldr	r4, [pc, #288]	@ (8005734 <Startup+0x18c>)
 8005612:	2004      	movs	r0, #4
 8005614:	9000      	str	r0, [sp, #0]
 8005616:	0020      	movs	r0, r4
 8005618:	f7fb fc24 	bl	8000e64 <Read_and_Interpret_Misc_From_Flash>

	//Set the Converted Preset Array to the Relevant Factory/User Preset depending upon the 'User Preset Used' Byte read from Flash
	Update_Converted_Preset_Array_with_User_or_Factory_Presets(presets_converted_array,
 800561c:	4b46      	ldr	r3, [pc, #280]	@ (8005738 <Startup+0x190>)
 800561e:	4a47      	ldr	r2, [pc, #284]	@ (800573c <Startup+0x194>)
 8005620:	4943      	ldr	r1, [pc, #268]	@ (8005730 <Startup+0x188>)
 8005622:	4847      	ldr	r0, [pc, #284]	@ (8005740 <Startup+0x198>)
 8005624:	2404      	movs	r4, #4
 8005626:	9400      	str	r4, [sp, #0]
 8005628:	f7fb fcd2 	bl	8000fd0 <Update_Converted_Preset_Array_with_User_or_Factory_Presets>
												  	  	  	  factory_presets_array,
															  user_presets_array,
															  NUM_PRESETS);

	//GET ADC VALUES
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADCResultsDMA, (uint32_t)num_ADC_conversions);
 800562c:	4b45      	ldr	r3, [pc, #276]	@ (8005744 <Startup+0x19c>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	001a      	movs	r2, r3
 8005632:	4945      	ldr	r1, [pc, #276]	@ (8005748 <Startup+0x1a0>)
 8005634:	4b45      	ldr	r3, [pc, #276]	@ (800574c <Startup+0x1a4>)
 8005636:	0018      	movs	r0, r3
 8005638:	f001 fe08 	bl	800724c <HAL_ADC_Start_DMA>

	//WAIT
	while(Get_Status_Bit(&statuses, Initial_ADC_Conversion_Complete) == NO){}; //wait while first ADC conversion is ongoing - raw and final values will be computed within this time
 800563c:	46c0      	nop			@ (mov r8, r8)
 800563e:	4b3b      	ldr	r3, [pc, #236]	@ (800572c <Startup+0x184>)
 8005640:	2110      	movs	r1, #16
 8005642:	0018      	movs	r0, r3
 8005644:	f001 f94a 	bl	80068dc <Get_Status_Bit>
 8005648:	1e03      	subs	r3, r0, #0
 800564a:	d0f8      	beq.n	800563e <Startup+0x96>

	// re-initialise all values in delay line storage array to middle value of wave (if sine/triangle mode) or bottom of wave if square mode, as they are initialised to 0 on startup
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 800564c:	1dbb      	adds	r3, r7, #6
 800564e:	2200      	movs	r2, #0
 8005650:	801a      	strh	r2, [r3, #0]
 8005652:	e02c      	b.n	80056ae <Startup+0x106>

		if(params.waveshape == SQUARE_MODE){
 8005654:	4b3e      	ldr	r3, [pc, #248]	@ (8005750 <Startup+0x1a8>)
 8005656:	799b      	ldrb	r3, [r3, #6]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d111      	bne.n	8005682 <Startup+0xda>

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - ((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION);
 800565e:	4b3c      	ldr	r3, [pc, #240]	@ (8005750 <Startup+0x1a8>)
 8005660:	7a9b      	ldrb	r3, [r3, #10]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	001a      	movs	r2, r3
 8005666:	0013      	movs	r3, r2
 8005668:	029b      	lsls	r3, r3, #10
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	11db      	asrs	r3, r3, #7
 800566e:	b29b      	uxth	r3, r3
 8005670:	1dba      	adds	r2, r7, #6
 8005672:	8812      	ldrh	r2, [r2, #0]
 8005674:	4937      	ldr	r1, [pc, #220]	@ (8005754 <Startup+0x1ac>)
 8005676:	1acb      	subs	r3, r1, r3
 8005678:	b299      	uxth	r1, r3
 800567a:	4b37      	ldr	r3, [pc, #220]	@ (8005758 <Startup+0x1b0>)
 800567c:	0052      	lsls	r2, r2, #1
 800567e:	52d1      	strh	r1, [r2, r3]
 8005680:	e010      	b.n	80056a4 <Startup+0xfc>
		}
		else{

			delay_line.duty_delay_line_storage_array[i] = PWM_DUTY_VALUE_MAX - (((params.depth * PWM_DUTY_VALUE_MAX) >> DEPTH_ADC_RESOLUTION) >> 1);
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <Startup+0x1a8>)
 8005684:	7a9b      	ldrb	r3, [r3, #10]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	001a      	movs	r2, r3
 800568a:	0013      	movs	r3, r2
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	121b      	asrs	r3, r3, #8
 8005692:	b29b      	uxth	r3, r3
 8005694:	1dba      	adds	r2, r7, #6
 8005696:	8812      	ldrh	r2, [r2, #0]
 8005698:	492e      	ldr	r1, [pc, #184]	@ (8005754 <Startup+0x1ac>)
 800569a:	1acb      	subs	r3, r1, r3
 800569c:	b299      	uxth	r1, r3
 800569e:	4b2e      	ldr	r3, [pc, #184]	@ (8005758 <Startup+0x1b0>)
 80056a0:	0052      	lsls	r2, r2, #1
 80056a2:	52d1      	strh	r1, [r2, r3]
	for(uint16_t i = 0; i < FINAL_INDEX + 2; i++){ //513
 80056a4:	1dbb      	adds	r3, r7, #6
 80056a6:	881a      	ldrh	r2, [r3, #0]
 80056a8:	1dbb      	adds	r3, r7, #6
 80056aa:	3201      	adds	r2, #1
 80056ac:	801a      	strh	r2, [r3, #0]
 80056ae:	1dbb      	adds	r3, r7, #6
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	2380      	movs	r3, #128	@ 0x80
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d9cc      	bls.n	8005654 <Startup+0xac>
		}
	}

	//PREPARE OSCILLATORS
	Calculate_Next_Main_Oscillator_Values(&params, (enum Next_Values_Processing_Mode)STARTUP_MODE);
 80056ba:	4b25      	ldr	r3, [pc, #148]	@ (8005750 <Startup+0x1a8>)
 80056bc:	2102      	movs	r1, #2
 80056be:	0018      	movs	r0, r3
 80056c0:	f7ff fd7c 	bl	80051bc <Calculate_Next_Main_Oscillator_Values>
	Write_Next_Main_Oscillator_Values_to_Delay_Line(&params, &delay_line);
 80056c4:	4a24      	ldr	r2, [pc, #144]	@ (8005758 <Startup+0x1b0>)
 80056c6:	4b22      	ldr	r3, [pc, #136]	@ (8005750 <Startup+0x1a8>)
 80056c8:	0011      	movs	r1, r2
 80056ca:	0018      	movs	r0, r3
 80056cc:	f7ff fe6c 	bl	80053a8 <Write_Next_Main_Oscillator_Values_to_Delay_Line>
	Set_Oscillator_Values(&params);
 80056d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005750 <Startup+0x1a8>)
 80056d2:	0018      	movs	r0, r3
 80056d4:	f7ff fd46 	bl	8005164 <Set_Oscillator_Values>

	//START FREQ. GEN and PWM GEN TIMERS and ENABLE PWM OUTPUT
	Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators(&htim1, TIM_CHANNEL_2, TIM_CHANNEL_4);
 80056d8:	4b20      	ldr	r3, [pc, #128]	@ (800575c <Startup+0x1b4>)
 80056da:	220c      	movs	r2, #12
 80056dc:	2104      	movs	r1, #4
 80056de:	0018      	movs	r0, r3
 80056e0:	f7ff fcb4 	bl	800504c <Start_PWM_Gen_Timer_Main_and_Secondary_Oscillators>
	Start_Freq_Gen_Timer();
 80056e4:	f7ff fcee 	bl	80050c4 <Start_Freq_Gen_Timer>

	//START UART RECEIVE
	Start_UART_Receive();
 80056e8:	f7fc f96e 	bl	80019c8 <Start_UART_Receive>

	//START IP CAP
	Start_Input_Capture_Timer();
 80056ec:	f7ff fb7a 	bl	8004de4 <Start_Input_Capture_Timer>

	//ENABLE INTERRUPTS
	Global_Interrupt_Enable();
 80056f0:	f001 f8ec 	bl	80068cc <Global_Interrupt_Enable>

	//ENABLE TAP-TEMPO SWITCH CHECKING
	HAL_LPTIM_SetOnce_Start_IT(&hlptim1, LPTIM1_CCR_CHECK, LPTIM1_CCR_CHECK);
 80056f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005760 <Startup+0x1b8>)
 80056f6:	22fa      	movs	r2, #250	@ 0xfa
 80056f8:	21fa      	movs	r1, #250	@ 0xfa
 80056fa:	0018      	movs	r0, r3
 80056fc:	f003 fc4e 	bl	8008f9c <HAL_LPTIM_SetOnce_Start_IT>

	//TURN LED OFF ON STARTUP
	LED_fsm.current_state = LED_OFF;
 8005700:	4b18      	ldr	r3, [pc, #96]	@ (8005764 <Startup+0x1bc>)
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]

	//ENABLE LED TIMER
	Start_OC_TIM(&htim14, TIM_CHANNEL_1);
 8005706:	4b18      	ldr	r3, [pc, #96]	@ (8005768 <Startup+0x1c0>)
 8005708:	2100      	movs	r1, #0
 800570a:	0018      	movs	r0, r3
 800570c:	f001 f863 	bl	80067d6 <Start_OC_TIM>

	//ENABLE EXTI
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8005710:	2007      	movs	r0, #7
 8005712:	f002 fcda 	bl	80080ca <HAL_NVIC_EnableIRQ>

	return 1;
 8005716:	2301      	movs	r3, #1
}
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b003      	add	sp, #12
 800571e:	bd90      	pop	{r4, r7, pc}
 8005720:	200008cc 	.word	0x200008cc
 8005724:	20000810 	.word	0x20000810
 8005728:	20000582 	.word	0x20000582
 800572c:	20000cfc 	.word	0x20000cfc
 8005730:	20000578 	.word	0x20000578
 8005734:	0800f820 	.word	0x0800f820
 8005738:	2000050c 	.word	0x2000050c
 800573c:	200004fc 	.word	0x200004fc
 8005740:	2000051c 	.word	0x2000051c
 8005744:	0800e960 	.word	0x0800e960
 8005748:	20000d0c 	.word	0x20000d0c
 800574c:	200005b4 	.word	0x200005b4
 8005750:	20000d18 	.word	0x20000d18
 8005754:	000003ff 	.word	0x000003ff
 8005758:	20000028 	.word	0x20000028
 800575c:	20000a44 	.word	0x20000a44
 8005760:	20000c84 	.word	0x20000c84
 8005764:	20000448 	.word	0x20000448
 8005768:	20000698 	.word	0x20000698

0800576c <Advance_Pending_States>:
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	1d3b      	adds	r3, r7, #4
 8005774:	4a12      	ldr	r2, [pc, #72]	@ (80057c0 <Advance_Pending_States+0x54>)
 8005776:	7812      	ldrb	r2, [r2, #0]
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	4b11      	ldr	r3, [pc, #68]	@ (80057c0 <Advance_Pending_States+0x54>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b05      	cmp	r3, #5
 8005782:	d103      	bne.n	800578c <Advance_Pending_States+0x20>
 8005784:	4b0e      	ldr	r3, [pc, #56]	@ (80057c0 <Advance_Pending_States+0x54>)
 8005786:	2204      	movs	r2, #4
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	e007      	b.n	800579c <Advance_Pending_States+0x30>
 800578c:	4b0c      	ldr	r3, [pc, #48]	@ (80057c0 <Advance_Pending_States+0x54>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b07      	cmp	r3, #7
 8005794:	d102      	bne.n	800579c <Advance_Pending_States+0x30>
 8005796:	4b0a      	ldr	r3, [pc, #40]	@ (80057c0 <Advance_Pending_States+0x54>)
 8005798:	2206      	movs	r2, #6
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	1d3b      	adds	r3, r7, #4
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b06      	cmp	r3, #6
 80057a2:	d007      	beq.n	80057b4 <Advance_Pending_States+0x48>
 80057a4:	1d3b      	adds	r3, r7, #4
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d003      	beq.n	80057b4 <Advance_Pending_States+0x48>
 80057ac:	4b04      	ldr	r3, [pc, #16]	@ (80057c0 <Advance_Pending_States+0x54>)
 80057ae:	1d3a      	adds	r2, r7, #4
 80057b0:	7812      	ldrb	r2, [r2, #0]
 80057b2:	705a      	strb	r2, [r3, #1]
 80057b4:	2301      	movs	r3, #1
 80057b6:	0018      	movs	r0, r3
 80057b8:	46bd      	mov	sp, r7
 80057ba:	b002      	add	sp, #8
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	46c0      	nop			@ (mov r8, r8)
 80057c0:	20000430 	.word	0x20000430

080057c4 <HAL_MspInit>:
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005808 <HAL_MspInit+0x44>)
 80057cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80057ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005808 <HAL_MspInit+0x44>)
 80057d0:	2101      	movs	r1, #1
 80057d2:	430a      	orrs	r2, r1
 80057d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80057d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005808 <HAL_MspInit+0x44>)
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	2201      	movs	r2, #1
 80057dc:	4013      	ands	r3, r2
 80057de:	607b      	str	r3, [r7, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4b09      	ldr	r3, [pc, #36]	@ (8005808 <HAL_MspInit+0x44>)
 80057e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_MspInit+0x44>)
 80057e8:	2180      	movs	r1, #128	@ 0x80
 80057ea:	0549      	lsls	r1, r1, #21
 80057ec:	430a      	orrs	r2, r1
 80057ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_MspInit+0x44>)
 80057f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	055b      	lsls	r3, r3, #21
 80057f8:	4013      	ands	r3, r2
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	46bd      	mov	sp, r7
 8005802:	b002      	add	sp, #8
 8005804:	bd80      	pop	{r7, pc}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	40021000 	.word	0x40021000

0800580c <HAL_ADC_MspInit>:
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b08b      	sub	sp, #44	@ 0x2c
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	2414      	movs	r4, #20
 8005816:	193b      	adds	r3, r7, r4
 8005818:	0018      	movs	r0, r3
 800581a:	2314      	movs	r3, #20
 800581c:	001a      	movs	r2, r3
 800581e:	2100      	movs	r1, #0
 8005820:	f008 fc3a 	bl	800e098 <memset>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a2e      	ldr	r2, [pc, #184]	@ (80058e4 <HAL_ADC_MspInit+0xd8>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d155      	bne.n	80058da <HAL_ADC_MspInit+0xce>
 800582e:	4b2e      	ldr	r3, [pc, #184]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 8005830:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005832:	4b2d      	ldr	r3, [pc, #180]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 8005834:	2180      	movs	r1, #128	@ 0x80
 8005836:	0349      	lsls	r1, r1, #13
 8005838:	430a      	orrs	r2, r1
 800583a:	641a      	str	r2, [r3, #64]	@ 0x40
 800583c:	4b2a      	ldr	r3, [pc, #168]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 800583e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	035b      	lsls	r3, r3, #13
 8005844:	4013      	ands	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4b27      	ldr	r3, [pc, #156]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 800584c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800584e:	4b26      	ldr	r3, [pc, #152]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 8005850:	2101      	movs	r1, #1
 8005852:	430a      	orrs	r2, r1
 8005854:	635a      	str	r2, [r3, #52]	@ 0x34
 8005856:	4b24      	ldr	r3, [pc, #144]	@ (80058e8 <HAL_ADC_MspInit+0xdc>)
 8005858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800585a:	2201      	movs	r2, #1
 800585c:	4013      	ands	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	193b      	adds	r3, r7, r4
 8005864:	2273      	movs	r2, #115	@ 0x73
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	193b      	adds	r3, r7, r4
 800586a:	2203      	movs	r2, #3
 800586c:	605a      	str	r2, [r3, #4]
 800586e:	193b      	adds	r3, r7, r4
 8005870:	2200      	movs	r2, #0
 8005872:	609a      	str	r2, [r3, #8]
 8005874:	193a      	adds	r2, r7, r4
 8005876:	23a0      	movs	r3, #160	@ 0xa0
 8005878:	05db      	lsls	r3, r3, #23
 800587a:	0011      	movs	r1, r2
 800587c:	0018      	movs	r0, r3
 800587e:	f003 f915 	bl	8008aac <HAL_GPIO_Init>
 8005882:	4b1a      	ldr	r3, [pc, #104]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 8005884:	4a1a      	ldr	r2, [pc, #104]	@ (80058f0 <HAL_ADC_MspInit+0xe4>)
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	4b18      	ldr	r3, [pc, #96]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 800588a:	2205      	movs	r2, #5
 800588c:	605a      	str	r2, [r3, #4]
 800588e:	4b17      	ldr	r3, [pc, #92]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 8005890:	2200      	movs	r2, #0
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 8005896:	2200      	movs	r2, #0
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	4b14      	ldr	r3, [pc, #80]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 800589c:	2280      	movs	r2, #128	@ 0x80
 800589e:	611a      	str	r2, [r3, #16]
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058a2:	2280      	movs	r2, #128	@ 0x80
 80058a4:	0052      	lsls	r2, r2, #1
 80058a6:	615a      	str	r2, [r3, #20]
 80058a8:	4b10      	ldr	r3, [pc, #64]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058aa:	2280      	movs	r2, #128	@ 0x80
 80058ac:	00d2      	lsls	r2, r2, #3
 80058ae:	619a      	str	r2, [r3, #24]
 80058b0:	4b0e      	ldr	r3, [pc, #56]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058b8:	2280      	movs	r2, #128	@ 0x80
 80058ba:	0192      	lsls	r2, r2, #6
 80058bc:	621a      	str	r2, [r3, #32]
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058c0:	0018      	movs	r0, r3
 80058c2:	f002 fc2f 	bl	8008124 <HAL_DMA_Init>
 80058c6:	1e03      	subs	r3, r0, #0
 80058c8:	d001      	beq.n	80058ce <HAL_ADC_MspInit+0xc2>
 80058ca:	f7fd f80d 	bl	80028e8 <Error_Handler>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a06      	ldr	r2, [pc, #24]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80058d4:	4b05      	ldr	r3, [pc, #20]	@ (80058ec <HAL_ADC_MspInit+0xe0>)
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	46bd      	mov	sp, r7
 80058de:	b00b      	add	sp, #44	@ 0x2c
 80058e0:	bd90      	pop	{r4, r7, pc}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	40012400 	.word	0x40012400
 80058e8:	40021000 	.word	0x40021000
 80058ec:	2000063c 	.word	0x2000063c
 80058f0:	40020008 	.word	0x40020008

080058f4 <HAL_LPTIM_MspInit>:
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b097      	sub	sp, #92	@ 0x5c
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	2344      	movs	r3, #68	@ 0x44
 80058fe:	18fb      	adds	r3, r7, r3
 8005900:	0018      	movs	r0, r3
 8005902:	2314      	movs	r3, #20
 8005904:	001a      	movs	r2, r3
 8005906:	2100      	movs	r1, #0
 8005908:	f008 fbc6 	bl	800e098 <memset>
 800590c:	241c      	movs	r4, #28
 800590e:	193b      	adds	r3, r7, r4
 8005910:	0018      	movs	r0, r3
 8005912:	2328      	movs	r3, #40	@ 0x28
 8005914:	001a      	movs	r2, r3
 8005916:	2100      	movs	r1, #0
 8005918:	f008 fbbe 	bl	800e098 <memset>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a46      	ldr	r2, [pc, #280]	@ (8005a3c <HAL_LPTIM_MspInit+0x148>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d13e      	bne.n	80059a4 <HAL_LPTIM_MspInit+0xb0>
 8005926:	193b      	adds	r3, r7, r4
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	193b      	adds	r3, r7, r4
 8005930:	2200      	movs	r2, #0
 8005932:	615a      	str	r2, [r3, #20]
 8005934:	193b      	adds	r3, r7, r4
 8005936:	0018      	movs	r0, r3
 8005938:	f004 fb9e 	bl	800a078 <HAL_RCCEx_PeriphCLKConfig>
 800593c:	1e03      	subs	r3, r0, #0
 800593e:	d001      	beq.n	8005944 <HAL_LPTIM_MspInit+0x50>
 8005940:	f7fc ffd2 	bl	80028e8 <Error_Handler>
 8005944:	4b3e      	ldr	r3, [pc, #248]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 8005946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005948:	4b3d      	ldr	r3, [pc, #244]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 800594a:	2180      	movs	r1, #128	@ 0x80
 800594c:	0609      	lsls	r1, r1, #24
 800594e:	430a      	orrs	r2, r1
 8005950:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005952:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	0fdb      	lsrs	r3, r3, #31
 8005958:	07db      	lsls	r3, r3, #31
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	4b38      	ldr	r3, [pc, #224]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 8005960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005962:	4b37      	ldr	r3, [pc, #220]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 8005964:	2102      	movs	r1, #2
 8005966:	430a      	orrs	r2, r1
 8005968:	635a      	str	r2, [r3, #52]	@ 0x34
 800596a:	4b35      	ldr	r3, [pc, #212]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 800596c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596e:	2202      	movs	r2, #2
 8005970:	4013      	ands	r3, r2
 8005972:	617b      	str	r3, [r7, #20]
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2144      	movs	r1, #68	@ 0x44
 8005978:	187b      	adds	r3, r7, r1
 800597a:	2201      	movs	r2, #1
 800597c:	601a      	str	r2, [r3, #0]
 800597e:	187b      	adds	r3, r7, r1
 8005980:	2202      	movs	r2, #2
 8005982:	605a      	str	r2, [r3, #4]
 8005984:	187b      	adds	r3, r7, r1
 8005986:	2200      	movs	r2, #0
 8005988:	609a      	str	r2, [r3, #8]
 800598a:	187b      	adds	r3, r7, r1
 800598c:	2200      	movs	r2, #0
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	187b      	adds	r3, r7, r1
 8005992:	2205      	movs	r2, #5
 8005994:	611a      	str	r2, [r3, #16]
 8005996:	187b      	adds	r3, r7, r1
 8005998:	4a2a      	ldr	r2, [pc, #168]	@ (8005a44 <HAL_LPTIM_MspInit+0x150>)
 800599a:	0019      	movs	r1, r3
 800599c:	0010      	movs	r0, r2
 800599e:	f003 f885 	bl	8008aac <HAL_GPIO_Init>
 80059a2:	e046      	b.n	8005a32 <HAL_LPTIM_MspInit+0x13e>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a27      	ldr	r2, [pc, #156]	@ (8005a48 <HAL_LPTIM_MspInit+0x154>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d141      	bne.n	8005a32 <HAL_LPTIM_MspInit+0x13e>
 80059ae:	211c      	movs	r1, #28
 80059b0:	187b      	adds	r3, r7, r1
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	00d2      	lsls	r2, r2, #3
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	187b      	adds	r3, r7, r1
 80059ba:	2200      	movs	r2, #0
 80059bc:	619a      	str	r2, [r3, #24]
 80059be:	187b      	adds	r3, r7, r1
 80059c0:	0018      	movs	r0, r3
 80059c2:	f004 fb59 	bl	800a078 <HAL_RCCEx_PeriphCLKConfig>
 80059c6:	1e03      	subs	r3, r0, #0
 80059c8:	d001      	beq.n	80059ce <HAL_LPTIM_MspInit+0xda>
 80059ca:	f7fc ff8d 	bl	80028e8 <Error_Handler>
 80059ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059d4:	2180      	movs	r1, #128	@ 0x80
 80059d6:	05c9      	lsls	r1, r1, #23
 80059d8:	430a      	orrs	r2, r1
 80059da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80059dc:	4b18      	ldr	r3, [pc, #96]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059e0:	2380      	movs	r3, #128	@ 0x80
 80059e2:	05db      	lsls	r3, r3, #23
 80059e4:	4013      	ands	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4b15      	ldr	r3, [pc, #84]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ee:	4b14      	ldr	r3, [pc, #80]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059f0:	2101      	movs	r1, #1
 80059f2:	430a      	orrs	r2, r1
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80059f6:	4b12      	ldr	r3, [pc, #72]	@ (8005a40 <HAL_LPTIM_MspInit+0x14c>)
 80059f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059fa:	2201      	movs	r2, #1
 80059fc:	4013      	ands	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2144      	movs	r1, #68	@ 0x44
 8005a04:	187b      	adds	r3, r7, r1
 8005a06:	2280      	movs	r2, #128	@ 0x80
 8005a08:	0052      	lsls	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	187b      	adds	r3, r7, r1
 8005a0e:	2202      	movs	r2, #2
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	2200      	movs	r2, #0
 8005a16:	609a      	str	r2, [r3, #8]
 8005a18:	187b      	adds	r3, r7, r1
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	60da      	str	r2, [r3, #12]
 8005a1e:	187b      	adds	r3, r7, r1
 8005a20:	2205      	movs	r2, #5
 8005a22:	611a      	str	r2, [r3, #16]
 8005a24:	187a      	adds	r2, r7, r1
 8005a26:	23a0      	movs	r3, #160	@ 0xa0
 8005a28:	05db      	lsls	r3, r3, #23
 8005a2a:	0011      	movs	r1, r2
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f003 f83d 	bl	8008aac <HAL_GPIO_Init>
 8005a32:	46c0      	nop			@ (mov r8, r8)
 8005a34:	46bd      	mov	sp, r7
 8005a36:	b017      	add	sp, #92	@ 0x5c
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	46c0      	nop			@ (mov r8, r8)
 8005a3c:	40007c00 	.word	0x40007c00
 8005a40:	40021000 	.word	0x40021000
 8005a44:	50000400 	.word	0x50000400
 8005a48:	40009400 	.word	0x40009400

08005a4c <HAL_TIM_Base_MspInit>:
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b099      	sub	sp, #100	@ 0x64
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	234c      	movs	r3, #76	@ 0x4c
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	0018      	movs	r0, r3
 8005a5a:	2314      	movs	r3, #20
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f008 fb1a 	bl	800e098 <memset>
 8005a64:	2424      	movs	r4, #36	@ 0x24
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	0018      	movs	r0, r3
 8005a6a:	2328      	movs	r3, #40	@ 0x28
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f008 fb12 	bl	800e098 <memset>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a68      	ldr	r2, [pc, #416]	@ (8005c1c <HAL_TIM_Base_MspInit+0x1d0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d11d      	bne.n	8005aba <HAL_TIM_Base_MspInit+0x6e>
 8005a7e:	193b      	adds	r3, r7, r4
 8005a80:	2280      	movs	r2, #128	@ 0x80
 8005a82:	0392      	lsls	r2, r2, #14
 8005a84:	601a      	str	r2, [r3, #0]
 8005a86:	193b      	adds	r3, r7, r4
 8005a88:	2200      	movs	r2, #0
 8005a8a:	621a      	str	r2, [r3, #32]
 8005a8c:	193b      	adds	r3, r7, r4
 8005a8e:	0018      	movs	r0, r3
 8005a90:	f004 faf2 	bl	800a078 <HAL_RCCEx_PeriphCLKConfig>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_TIM_Base_MspInit+0x50>
 8005a98:	f7fc ff26 	bl	80028e8 <Error_Handler>
 8005a9c:	4b60      	ldr	r3, [pc, #384]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aa0:	4b5f      	ldr	r3, [pc, #380]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005aa2:	2180      	movs	r1, #128	@ 0x80
 8005aa4:	0109      	lsls	r1, r1, #4
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8005aaa:	4b5d      	ldr	r3, [pc, #372]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aae:	2380      	movs	r3, #128	@ 0x80
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	6a3b      	ldr	r3, [r7, #32]
 8005ab8:	e0ab      	b.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	2380      	movs	r3, #128	@ 0x80
 8005ac0:	05db      	lsls	r3, r3, #23
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d138      	bne.n	8005b38 <HAL_TIM_Base_MspInit+0xec>
 8005ac6:	4b56      	ldr	r3, [pc, #344]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005aca:	4b55      	ldr	r3, [pc, #340]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005acc:	2101      	movs	r1, #1
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005ad2:	4b53      	ldr	r3, [pc, #332]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	4013      	ands	r3, r2
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	4b50      	ldr	r3, [pc, #320]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8005aea:	4b4d      	ldr	r3, [pc, #308]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005aec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aee:	2201      	movs	r2, #1
 8005af0:	4013      	ands	r3, r2
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	214c      	movs	r1, #76	@ 0x4c
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	2280      	movs	r2, #128	@ 0x80
 8005afc:	0212      	lsls	r2, r2, #8
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	2202      	movs	r2, #2
 8005b04:	605a      	str	r2, [r3, #4]
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	2201      	movs	r2, #1
 8005b0a:	609a      	str	r2, [r3, #8]
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	2200      	movs	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	2202      	movs	r2, #2
 8005b16:	611a      	str	r2, [r3, #16]
 8005b18:	187a      	adds	r2, r7, r1
 8005b1a:	23a0      	movs	r3, #160	@ 0xa0
 8005b1c:	05db      	lsls	r3, r3, #23
 8005b1e:	0011      	movs	r1, r2
 8005b20:	0018      	movs	r0, r3
 8005b22:	f002 ffc3 	bl	8008aac <HAL_GPIO_Init>
 8005b26:	2202      	movs	r2, #2
 8005b28:	2102      	movs	r1, #2
 8005b2a:	200f      	movs	r0, #15
 8005b2c:	f002 fab8 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005b30:	200f      	movs	r0, #15
 8005b32:	f002 faca 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005b36:	e06c      	b.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a39      	ldr	r2, [pc, #228]	@ (8005c24 <HAL_TIM_Base_MspInit+0x1d8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d114      	bne.n	8005b6c <HAL_TIM_Base_MspInit+0x120>
 8005b42:	4b37      	ldr	r3, [pc, #220]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b48:	2102      	movs	r1, #2
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b4e:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b52:	2202      	movs	r2, #2
 8005b54:	4013      	ands	r3, r2
 8005b56:	617b      	str	r3, [r7, #20]
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	2010      	movs	r0, #16
 8005b60:	f002 fa9e 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005b64:	2010      	movs	r0, #16
 8005b66:	f002 fab0 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005b6a:	e052      	b.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a2d      	ldr	r2, [pc, #180]	@ (8005c28 <HAL_TIM_Base_MspInit+0x1dc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d116      	bne.n	8005ba4 <HAL_TIM_Base_MspInit+0x158>
 8005b76:	4b2a      	ldr	r3, [pc, #168]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b7a:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b7c:	2180      	movs	r1, #128	@ 0x80
 8005b7e:	0289      	lsls	r1, r1, #10
 8005b80:	430a      	orrs	r2, r1
 8005b82:	641a      	str	r2, [r3, #64]	@ 0x40
 8005b84:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b88:	2380      	movs	r3, #128	@ 0x80
 8005b8a:	029b      	lsls	r3, r3, #10
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	613b      	str	r3, [r7, #16]
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2200      	movs	r2, #0
 8005b94:	2100      	movs	r1, #0
 8005b96:	2015      	movs	r0, #21
 8005b98:	f002 fa82 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005b9c:	2015      	movs	r0, #21
 8005b9e:	f002 fa94 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005ba2:	e036      	b.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	@ (8005c2c <HAL_TIM_Base_MspInit+0x1e0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d116      	bne.n	8005bdc <HAL_TIM_Base_MspInit+0x190>
 8005bae:	4b1c      	ldr	r3, [pc, #112]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bb4:	2180      	movs	r1, #128	@ 0x80
 8005bb6:	02c9      	lsls	r1, r1, #11
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bbc:	4b18      	ldr	r3, [pc, #96]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bc0:	2380      	movs	r3, #128	@ 0x80
 8005bc2:	02db      	lsls	r3, r3, #11
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	2103      	movs	r1, #3
 8005bce:	2016      	movs	r0, #22
 8005bd0:	f002 fa66 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005bd4:	2016      	movs	r0, #22
 8005bd6:	f002 fa78 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005bda:	e01a      	b.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a13      	ldr	r2, [pc, #76]	@ (8005c30 <HAL_TIM_Base_MspInit+0x1e4>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d115      	bne.n	8005c12 <HAL_TIM_Base_MspInit+0x1c6>
 8005be6:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bec:	2180      	movs	r1, #128	@ 0x80
 8005bee:	0209      	lsls	r1, r1, #8
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	641a      	str	r2, [r3, #64]	@ 0x40
 8005bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8005c20 <HAL_TIM_Base_MspInit+0x1d4>)
 8005bf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bf8:	2380      	movs	r3, #128	@ 0x80
 8005bfa:	021b      	lsls	r3, r3, #8
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	60bb      	str	r3, [r7, #8]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2203      	movs	r2, #3
 8005c04:	2103      	movs	r1, #3
 8005c06:	2013      	movs	r0, #19
 8005c08:	f002 fa4a 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005c0c:	2013      	movs	r0, #19
 8005c0e:	f002 fa5c 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	46bd      	mov	sp, r7
 8005c16:	b019      	add	sp, #100	@ 0x64
 8005c18:	bd90      	pop	{r4, r7, pc}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	40012c00 	.word	0x40012c00
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40014400 	.word	0x40014400
 8005c2c:	40014800 	.word	0x40014800
 8005c30:	40002000 	.word	0x40002000

08005c34 <HAL_TIM_MspPostInit>:
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b08b      	sub	sp, #44	@ 0x2c
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	2414      	movs	r4, #20
 8005c3e:	193b      	adds	r3, r7, r4
 8005c40:	0018      	movs	r0, r3
 8005c42:	2314      	movs	r3, #20
 8005c44:	001a      	movs	r2, r3
 8005c46:	2100      	movs	r1, #0
 8005c48:	f008 fa26 	bl	800e098 <memset>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a25      	ldr	r2, [pc, #148]	@ (8005ce8 <HAL_TIM_MspPostInit+0xb4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d144      	bne.n	8005ce0 <HAL_TIM_MspPostInit+0xac>
 8005c56:	4b25      	ldr	r3, [pc, #148]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c5a:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c62:	4b22      	ldr	r3, [pc, #136]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	2201      	movs	r2, #1
 8005c68:	4013      	ands	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c72:	4b1e      	ldr	r3, [pc, #120]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c74:	2102      	movs	r1, #2
 8005c76:	430a      	orrs	r2, r1
 8005c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005cec <HAL_TIM_MspPostInit+0xb8>)
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7e:	2202      	movs	r2, #2
 8005c80:	4013      	ands	r3, r2
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	193b      	adds	r3, r7, r4
 8005c88:	2280      	movs	r2, #128	@ 0x80
 8005c8a:	0112      	lsls	r2, r2, #4
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	193b      	adds	r3, r7, r4
 8005c90:	2202      	movs	r2, #2
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	193b      	adds	r3, r7, r4
 8005c96:	2200      	movs	r2, #0
 8005c98:	609a      	str	r2, [r3, #8]
 8005c9a:	193b      	adds	r3, r7, r4
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	60da      	str	r2, [r3, #12]
 8005ca0:	193b      	adds	r3, r7, r4
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	611a      	str	r2, [r3, #16]
 8005ca6:	193a      	adds	r2, r7, r4
 8005ca8:	23a0      	movs	r3, #160	@ 0xa0
 8005caa:	05db      	lsls	r3, r3, #23
 8005cac:	0011      	movs	r1, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f002 fefc 	bl	8008aac <HAL_GPIO_Init>
 8005cb4:	0021      	movs	r1, r4
 8005cb6:	187b      	adds	r3, r7, r1
 8005cb8:	2208      	movs	r2, #8
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	605a      	str	r2, [r3, #4]
 8005cc2:	187b      	adds	r3, r7, r1
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
 8005cc8:	187b      	adds	r3, r7, r1
 8005cca:	2200      	movs	r2, #0
 8005ccc:	60da      	str	r2, [r3, #12]
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	611a      	str	r2, [r3, #16]
 8005cd4:	187b      	adds	r3, r7, r1
 8005cd6:	4a06      	ldr	r2, [pc, #24]	@ (8005cf0 <HAL_TIM_MspPostInit+0xbc>)
 8005cd8:	0019      	movs	r1, r3
 8005cda:	0010      	movs	r0, r2
 8005cdc:	f002 fee6 	bl	8008aac <HAL_GPIO_Init>
 8005ce0:	46c0      	nop			@ (mov r8, r8)
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	b00b      	add	sp, #44	@ 0x2c
 8005ce6:	bd90      	pop	{r4, r7, pc}
 8005ce8:	40012c00 	.word	0x40012c00
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	50000400 	.word	0x50000400

08005cf4 <HAL_UART_MspInit>:
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b08b      	sub	sp, #44	@ 0x2c
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	2414      	movs	r4, #20
 8005cfe:	193b      	adds	r3, r7, r4
 8005d00:	0018      	movs	r0, r3
 8005d02:	2314      	movs	r3, #20
 8005d04:	001a      	movs	r2, r3
 8005d06:	2100      	movs	r1, #0
 8005d08:	f008 f9c6 	bl	800e098 <memset>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a4a      	ldr	r2, [pc, #296]	@ (8005e3c <HAL_UART_MspInit+0x148>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d000      	beq.n	8005d18 <HAL_UART_MspInit+0x24>
 8005d16:	e08d      	b.n	8005e34 <HAL_UART_MspInit+0x140>
 8005d18:	4b49      	ldr	r3, [pc, #292]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d1c:	4b48      	ldr	r3, [pc, #288]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d1e:	2180      	movs	r1, #128	@ 0x80
 8005d20:	0289      	lsls	r1, r1, #10
 8005d22:	430a      	orrs	r2, r1
 8005d24:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d26:	4b46      	ldr	r3, [pc, #280]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d28:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	029b      	lsls	r3, r3, #10
 8005d2e:	4013      	ands	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	4b42      	ldr	r3, [pc, #264]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d38:	4b41      	ldr	r3, [pc, #260]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	635a      	str	r2, [r3, #52]	@ 0x34
 8005d40:	4b3f      	ldr	r3, [pc, #252]	@ (8005e40 <HAL_UART_MspInit+0x14c>)
 8005d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d44:	2201      	movs	r2, #1
 8005d46:	4013      	ands	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	0021      	movs	r1, r4
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	220c      	movs	r2, #12
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	187b      	adds	r3, r7, r1
 8005d56:	2202      	movs	r2, #2
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	609a      	str	r2, [r3, #8]
 8005d60:	187b      	adds	r3, r7, r1
 8005d62:	2200      	movs	r2, #0
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	187b      	adds	r3, r7, r1
 8005d68:	2201      	movs	r2, #1
 8005d6a:	611a      	str	r2, [r3, #16]
 8005d6c:	187a      	adds	r2, r7, r1
 8005d6e:	23a0      	movs	r3, #160	@ 0xa0
 8005d70:	05db      	lsls	r3, r3, #23
 8005d72:	0011      	movs	r1, r2
 8005d74:	0018      	movs	r0, r3
 8005d76:	f002 fe99 	bl	8008aac <HAL_GPIO_Init>
 8005d7a:	4b32      	ldr	r3, [pc, #200]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d7c:	4a32      	ldr	r2, [pc, #200]	@ (8005e48 <HAL_UART_MspInit+0x154>)
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	4b30      	ldr	r3, [pc, #192]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d82:	2234      	movs	r2, #52	@ 0x34
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	4b2f      	ldr	r3, [pc, #188]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	609a      	str	r2, [r3, #8]
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	4b2c      	ldr	r3, [pc, #176]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	611a      	str	r2, [r3, #16]
 8005d98:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	615a      	str	r2, [r3, #20]
 8005d9e:	4b29      	ldr	r3, [pc, #164]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	619a      	str	r2, [r3, #24]
 8005da4:	4b27      	ldr	r3, [pc, #156]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	61da      	str	r2, [r3, #28]
 8005daa:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005dac:	2280      	movs	r2, #128	@ 0x80
 8005dae:	0152      	lsls	r2, r2, #5
 8005db0:	621a      	str	r2, [r3, #32]
 8005db2:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005db4:	0018      	movs	r0, r3
 8005db6:	f002 f9b5 	bl	8008124 <HAL_DMA_Init>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <HAL_UART_MspInit+0xce>
 8005dbe:	f7fc fd93 	bl	80028e8 <Error_Handler>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2180      	movs	r1, #128	@ 0x80
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005dc8:	505a      	str	r2, [r3, r1]
 8005dca:	4b1e      	ldr	r3, [pc, #120]	@ (8005e44 <HAL_UART_MspInit+0x150>)
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	629a      	str	r2, [r3, #40]	@ 0x28
 8005dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_UART_MspInit+0x15c>)
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005dd8:	2235      	movs	r2, #53	@ 0x35
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005dde:	2210      	movs	r2, #16
 8005de0:	609a      	str	r2, [r3, #8]
 8005de2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	4b18      	ldr	r3, [pc, #96]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	611a      	str	r2, [r3, #16]
 8005dee:	4b17      	ldr	r3, [pc, #92]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	615a      	str	r2, [r3, #20]
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	619a      	str	r2, [r3, #24]
 8005dfa:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	61da      	str	r2, [r3, #28]
 8005e00:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005e02:	2280      	movs	r2, #128	@ 0x80
 8005e04:	0152      	lsls	r2, r2, #5
 8005e06:	621a      	str	r2, [r3, #32]
 8005e08:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f002 f98a 	bl	8008124 <HAL_DMA_Init>
 8005e10:	1e03      	subs	r3, r0, #0
 8005e12:	d001      	beq.n	8005e18 <HAL_UART_MspInit+0x124>
 8005e14:	f7fc fd68 	bl	80028e8 <Error_Handler>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005e1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_UART_MspInit+0x158>)
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	629a      	str	r2, [r3, #40]	@ 0x28
 8005e24:	2201      	movs	r2, #1
 8005e26:	2101      	movs	r1, #1
 8005e28:	201c      	movs	r0, #28
 8005e2a:	f002 f939 	bl	80080a0 <HAL_NVIC_SetPriority>
 8005e2e:	201c      	movs	r0, #28
 8005e30:	f002 f94b 	bl	80080ca <HAL_NVIC_EnableIRQ>
 8005e34:	46c0      	nop			@ (mov r8, r8)
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b00b      	add	sp, #44	@ 0x2c
 8005e3a:	bd90      	pop	{r4, r7, pc}
 8005e3c:	40004400 	.word	0x40004400
 8005e40:	40021000 	.word	0x40021000
 8005e44:	20000bcc 	.word	0x20000bcc
 8005e48:	4002001c 	.word	0x4002001c
 8005e4c:	20000c28 	.word	0x20000c28
 8005e50:	40020030 	.word	0x40020030

08005e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e58:	46c0      	nop			@ (mov r8, r8)
 8005e5a:	e7fd      	b.n	8005e58 <NMI_Handler+0x4>

08005e5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e60:	46c0      	nop			@ (mov r8, r8)
 8005e62:	e7fd      	b.n	8005e60 <HardFault_Handler+0x4>

08005e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005e68:	46c0      	nop			@ (mov r8, r8)
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e72:	46c0      	nop			@ (mov r8, r8)
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e7c:	f000 fdfc 	bl	8006a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e80:	46c0      	nop			@ (mov r8, r8)
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */

	HAL_GPIO_EXTI_IRQHandler(CLK_IN_Pin);
 8005e8a:	2080      	movs	r0, #128	@ 0x80
 8005e8c:	f002 ffac 	bl	8008de8 <HAL_GPIO_EXTI_IRQHandler>
	//HAL_GPIO_EXTI_IRQHandler(SW_IN_Pin);

  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005e90:	46c0      	nop			@ (mov r8, r8)
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005e9c:	4b03      	ldr	r3, [pc, #12]	@ (8005eac <DMA1_Channel1_IRQHandler+0x14>)
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f002 fb1c 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8005ea4:	46c0      	nop			@ (mov r8, r8)
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	46c0      	nop			@ (mov r8, r8)
 8005eac:	2000063c 	.word	0x2000063c

08005eb0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	@ (8005ecc <DMA1_Channel2_3_IRQHandler+0x1c>)
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	f002 fb10 	bl	80084dc <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005ebc:	4b04      	ldr	r3, [pc, #16]	@ (8005ed0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f002 fb0c 	bl	80084dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8005ec4:	46c0      	nop			@ (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	20000bcc 	.word	0x20000bcc
 8005ed0:	20000c28 	.word	0x20000c28

08005ed4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ed8:	4b03      	ldr	r3, [pc, #12]	@ (8005ee8 <TIM2_IRQHandler+0x14>)
 8005eda:	0018      	movs	r0, r3
 8005edc:	f005 f896 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005ee0:	46c0      	nop			@ (mov r8, r8)
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	46c0      	nop			@ (mov r8, r8)
 8005ee8:	200008cc 	.word	0x200008cc

08005eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ef0:	4b03      	ldr	r3, [pc, #12]	@ (8005f00 <TIM3_IRQHandler+0x14>)
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	f005 f88a 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005ef8:	46c0      	nop			@ (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			@ (mov r8, r8)
 8005f00:	20000988 	.word	0x20000988

08005f04 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005f08:	4b03      	ldr	r3, [pc, #12]	@ (8005f18 <TIM16_IRQHandler+0x14>)
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f005 f87e 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005f10:	46c0      	nop			@ (mov r8, r8)
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	46c0      	nop			@ (mov r8, r8)
 8005f18:	20000810 	.word	0x20000810

08005f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005f20:	4b03      	ldr	r3, [pc, #12]	@ (8005f30 <USART2_IRQHandler+0x14>)
 8005f22:	0018      	movs	r0, r3
 8005f24:	f006 fdf4 	bl	800cb10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005f28:	46c0      	nop			@ (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	20000b00 	.word	0x20000b00

08005f34 <LPTIM1_IRQHandler>:
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */

void LPTIM1_IRQHandler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005f38:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <LPTIM1_IRQHandler+0x14>)
 8005f3a:	0018      	movs	r0, r3
 8005f3c:	f003 f8c2 	bl	80090c4 <HAL_LPTIM_IRQHandler>
}
 8005f40:	46c0      	nop			@ (mov r8, r8)
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	46c0      	nop			@ (mov r8, r8)
 8005f48:	20000c84 	.word	0x20000c84

08005f4c <TIM17_IRQHandler>:


void TIM17_IRQHandler(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005f50:	4b03      	ldr	r3, [pc, #12]	@ (8005f60 <TIM17_IRQHandler+0x14>)
 8005f52:	0018      	movs	r0, r3
 8005f54:	f005 f85a 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005f58:	46c0      	nop			@ (mov r8, r8)
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	20000754 	.word	0x20000754

08005f64 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005f68:	4b03      	ldr	r3, [pc, #12]	@ (8005f78 <TIM14_IRQHandler+0x14>)
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f005 f84e 	bl	800b00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	20000698 	.word	0x20000698

08005f7c <Adjust_TIM16_Prescaler>:
#include "symmetry_adjustment.h"


uint8_t Adjust_TIM16_Prescaler(struct Params* params_ptr){
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

    if(params_ptr->prescaler_adjust == MULTIPLY_BY_TWO){
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	5c9b      	ldrb	r3, [r3, r2]
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d107      	bne.n	8005fa0 <Adjust_TIM16_Prescaler+0x24>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler << 1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	8b5b      	ldrh	r3, [r3, #26]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	18db      	adds	r3, r3, r3
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	839a      	strh	r2, [r3, #28]
 8005f9e:	e00a      	b.n	8005fb6 <Adjust_TIM16_Prescaler+0x3a>
    }
    else if(params_ptr->prescaler_adjust == DO_NOTHING){
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	5c9b      	ldrb	r3, [r3, r2]
 8005fa6:	b2db      	uxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d104      	bne.n	8005fb6 <Adjust_TIM16_Prescaler+0x3a>
    	params_ptr->final_prescaler = params_ptr->raw_prescaler;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8b5b      	ldrh	r3, [r3, #26]
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	839a      	strh	r2, [r3, #28]
    }
    return 1;
 8005fb6:	2301      	movs	r3, #1
}
 8005fb8:	0018      	movs	r0, r3
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	b002      	add	sp, #8
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler>:

uint8_t Process_TIM16_Final_Start_Value_and_Final_Prescaler(struct Params* params_ptr){
 8005fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

    #if SYMMETRY_ON_OR_OFF == ON

	enum TIM16_final_start_value_Oscillation_Mode TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8005fc8:	2317      	movs	r3, #23
 8005fca:	18fb      	adds	r3, r7, r3
 8005fcc:	2200      	movs	r2, #0
 8005fce:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Type symmetry_type_for_halfcycle = SHORTEN;
 8005fd0:	2316      	movs	r3, #22
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]

			uint8_t pot_rotation_corrected = 0;
 8005fd8:	2315      	movs	r3, #21
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
			enum Symmetry_Status symmetry_status = CW;
 8005fe0:	2114      	movs	r1, #20
 8005fe2:	187b      	adds	r3, r7, r1
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]

			//DETERMINE IF CW OR CCW SYMMETRY POT ROTATION
			if(params_ptr->symmetry < SYMMETRY_ADC_HALF_SCALE){ //adc = 0-127
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	899b      	ldrh	r3, [r3, #12]
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ff0:	d803      	bhi.n	8005ffa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3a>
				symmetry_status = CW;
 8005ff2:	187b      	adds	r3, r7, r1
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	e003      	b.n	8006002 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x42>
			}
			else{ //adc is 128-255
				symmetry_status = CCW;
 8005ffa:	2314      	movs	r3, #20
 8005ffc:	18fb      	adds	r3, r7, r3
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
			}

			//DETERMINE WHETHER TO SHORTEN OR LENGTHEN BASED ON CURRENT INDEX AND SYMMETRY POT POSITION
			if((params_ptr->waveshape == SINE_MODE) || (params_ptr->waveshape == TRIANGLE_MODE)){
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	799b      	ldrb	r3, [r3, #6]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d004      	beq.n	8006016 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x56>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	799b      	ldrb	r3, [r3, #6]
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d146      	bne.n	80060a4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe4>

				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	7c1b      	ldrb	r3, [r3, #16]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6a>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	7c5b      	ldrb	r3, [r3, #17]
 8006024:	b2db      	uxtb	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7c1b      	ldrb	r3, [r3, #16]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	2b01      	cmp	r3, #1
 8006032:	d113      	bne.n	800605c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	7c5b      	ldrb	r3, [r3, #17]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	d10e      	bne.n	800605c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x9c>

					if(symmetry_status == CW){
 800603e:	2314      	movs	r3, #20
 8006040:	18fb      	adds	r3, r7, r3
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d104      	bne.n	8006052 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x92>

						symmetry_type_for_halfcycle = LENGTHEN;
 8006048:	2316      	movs	r3, #22
 800604a:	18fb      	adds	r3, r7, r3
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 8006050:	e027      	b.n	80060a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 8006052:	2316      	movs	r3, #22
 8006054:	18fb      	adds	r3, r7, r3
 8006056:	2200      	movs	r2, #0
 8006058:	701a      	strb	r2, [r3, #0]
					if(symmetry_status == CW){
 800605a:	e022      	b.n	80060a2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xe2>
					}
				}
				else if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT)){
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	7c1b      	ldrb	r3, [r3, #16]
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xb0>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7c5b      	ldrb	r3, [r3, #17]
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b01      	cmp	r3, #1
 800606e:	d009      	beq.n	8006084 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xc4>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	7c1b      	ldrb	r3, [r3, #16]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d13c      	bne.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	7c5b      	ldrb	r3, [r3, #17]
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b00      	cmp	r3, #0
 8006082:	d137      	bne.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>

					if(symmetry_status == CW){
 8006084:	2314      	movs	r3, #20
 8006086:	18fb      	adds	r3, r7, r3
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0xd8>

						symmetry_type_for_halfcycle = SHORTEN;
 800608e:	2316      	movs	r3, #22
 8006090:	18fb      	adds	r3, r7, r3
 8006092:	2200      	movs	r2, #0
 8006094:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 8006096:	e02d      	b.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 8006098:	2316      	movs	r3, #22
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	2201      	movs	r2, #1
 800609e:	701a      	strb	r2, [r3, #0]
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060a0:	e028      	b.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
 80060a2:	e027      	b.n	80060f4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x134>
					}
				}
			}
			else if(params_ptr->waveshape == SQUARE_MODE){
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	799b      	ldrb	r3, [r3, #6]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d123      	bne.n	80060f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>

				if(params_ptr->halfcycle == FIRST_HALFCYCLE){
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	7c1b      	ldrb	r3, [r3, #16]
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10e      	bne.n	80060d6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x116>

					if(symmetry_status == CW){
 80060b8:	2314      	movs	r3, #20
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x10c>

						symmetry_type_for_halfcycle = LENGTHEN;
 80060c2:	2316      	movs	r3, #22
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	2201      	movs	r2, #1
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e014      	b.n	80060f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = SHORTEN;
 80060cc:	2316      	movs	r3, #22
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	2200      	movs	r2, #0
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e00f      	b.n	80060f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
				}
				else{

					if(symmetry_status == CW){
 80060d6:	2314      	movs	r3, #20
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x12a>

						symmetry_type_for_halfcycle = SHORTEN;
 80060e0:	2316      	movs	r3, #22
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	2200      	movs	r2, #0
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e005      	b.n	80060f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
					}
					else{

						symmetry_type_for_halfcycle = LENGTHEN;
 80060ea:	2316      	movs	r3, #22
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e000      	b.n	80060f6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x136>
				if((params_ptr->halfcycle == FIRST_HALFCYCLE && params_ptr->quadrant == FIRST_QUADRANT) || (params_ptr->halfcycle == SECOND_HALFCYCLE && params_ptr->quadrant == SECOND_QUADRANT)){
 80060f4:	46c0      	nop			@ (mov r8, r8)
					}
				}
			}

			if(symmetry_status == CW){
 80060f6:	2314      	movs	r3, #20
 80060f8:	18fb      	adds	r3, r7, r3
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d109      	bne.n	8006114 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x154>

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - params_ptr->symmetry;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	899b      	ldrh	r3, [r3, #12]
 8006104:	b29b      	uxth	r3, r3
 8006106:	b2da      	uxtb	r2, r3
 8006108:	2315      	movs	r3, #21
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	217f      	movs	r1, #127	@ 0x7f
 800610e:	1a8a      	subs	r2, r1, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e007      	b.n	8006124 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x164>
			}
			else{ //CCW

				pot_rotation_corrected = SYMMETRY_ADC_HALF_SCALE - 1 - (SYMMETRY_ADC_FULL_SCALE - params_ptr->symmetry);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	899b      	ldrh	r3, [r3, #12]
 8006118:	b29b      	uxth	r3, r3
 800611a:	b2da      	uxtb	r2, r3
 800611c:	2315      	movs	r3, #21
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	3a80      	subs	r2, #128	@ 0x80
 8006122:	701a      	strb	r2, [r3, #0]
			}

			//HAVE TO BE uin16_t FOR 1ST AND 3RD VARIABLES HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t two_fifty_six_minus_TIM16_raw_start_value = 256 - params_ptr->raw_start_value;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8a5b      	ldrh	r3, [r3, #18]
 8006128:	b29a      	uxth	r2, r3
 800612a:	200e      	movs	r0, #14
 800612c:	183b      	adds	r3, r7, r0
 800612e:	2180      	movs	r1, #128	@ 0x80
 8006130:	0049      	lsls	r1, r1, #1
 8006132:	1a8a      	subs	r2, r1, r2
 8006134:	801a      	strh	r2, [r3, #0]

			//uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = (two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected);
			//COMMENT LINE BELOW IN AND LINE ABOVE OUT TO EXPERIMENT WITH MORE EXTREME SYMMETRY ADJUSTMENT
			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC = ((two_fifty_six_minus_TIM16_raw_start_value * pot_rotation_corrected) * 12) >> 3; //x(12/8) - 12/8 is the absolute maximum we can get away with
 8006136:	0001      	movs	r1, r0
 8006138:	187b      	adds	r3, r7, r1
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2215      	movs	r2, #21
 800613e:	18ba      	adds	r2, r7, r2
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	435a      	muls	r2, r3
 8006144:	0013      	movs	r3, r2
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	189b      	adds	r3, r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	10da      	asrs	r2, r3, #3
 800614e:	240c      	movs	r4, #12
 8006150:	193b      	adds	r3, r7, r4
 8006152:	801a      	strh	r2, [r3, #0]

			uint16_t two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits = (uint16_t)(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC >> SYMMETRY_ADC_NUM_BITS);
 8006154:	250a      	movs	r5, #10
 8006156:	197b      	adds	r3, r7, r5
 8006158:	193a      	adds	r2, r7, r4
 800615a:	8812      	ldrh	r2, [r2, #0]
 800615c:	0a12      	lsrs	r2, r2, #8
 800615e:	801a      	strh	r2, [r3, #0]


			//HAVE TO BE uin16_t HERE BECAUSE A uint8_t IS LIMITED TO 255!
			uint16_t manipulated_period_shorten = two_fifty_six_minus_TIM16_raw_start_value - two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated shorten will always be less than 256
 8006160:	2312      	movs	r3, #18
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	0008      	movs	r0, r1
 8006166:	1879      	adds	r1, r7, r1
 8006168:	197a      	adds	r2, r7, r5
 800616a:	8809      	ldrh	r1, [r1, #0]
 800616c:	8812      	ldrh	r2, [r2, #0]
 800616e:	1a8a      	subs	r2, r1, r2
 8006170:	801a      	strh	r2, [r3, #0]

			uint16_t manipulated_period_lengthen = two_fifty_six_minus_TIM16_raw_start_value + two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits; //manipulated lengthen can be greater than 256 up to 381
 8006172:	2610      	movs	r6, #16
 8006174:	19bb      	adds	r3, r7, r6
 8006176:	1839      	adds	r1, r7, r0
 8006178:	197a      	adds	r2, r7, r5
 800617a:	8809      	ldrh	r1, [r1, #0]
 800617c:	8812      	ldrh	r2, [r2, #0]
 800617e:	188a      	adds	r2, r1, r2
 8006180:	801a      	strh	r2, [r3, #0]


			if((manipulated_period_lengthen < 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0))){
 8006182:	19bb      	adds	r3, r7, r6
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	2bff      	cmp	r3, #255	@ 0xff
 8006188:	d90f      	bls.n	80061aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 800618a:	19bb      	adds	r3, r7, r6
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	2380      	movs	r3, #128	@ 0x80
 8006190:	005b      	lsls	r3, r3, #1
 8006192:	429a      	cmp	r2, r3
 8006194:	d000      	beq.n	8006198 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1d8>
 8006196:	e0b0      	b.n	80062fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>
 8006198:	193b      	adds	r3, r7, r4
 800619a:	881b      	ldrh	r3, [r3, #0]
 800619c:	2108      	movs	r1, #8
 800619e:	0018      	movs	r0, r3
 80061a0:	f000 fb80 	bl	80068a4 <unsigned_bitwise_modulo>
 80061a4:	1e03      	subs	r3, r0, #0
 80061a6:	d000      	beq.n	80061aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x1ea>
 80061a8:	e0a7      	b.n	80062fa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x33a>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80061aa:	230c      	movs	r3, #12
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	2108      	movs	r1, #8
 80061b2:	0018      	movs	r0, r3
 80061b4:	f000 fb76 	bl	80068a4 <unsigned_bitwise_modulo>
 80061b8:	0003      	movs	r3, r0
 80061ba:	2b80      	cmp	r3, #128	@ 0x80
 80061bc:	d117      	bne.n	80061ee <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x22e>
					//remainder is 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in 0.5

					//manipulated_period_shorten should oscillate over the halfperiod between manipulated_period_shorten and manipulated_period_shorten - 1; //DONE
					//manipulated_period_lengthen should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1; //DONE

					if(symmetry_type_for_halfcycle == SHORTEN){
 80061be:	2316      	movs	r3, #22
 80061c0:	18fb      	adds	r3, r7, r3
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d104      	bne.n	80061d2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x212>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_DOWNWARDS;
 80061c8:	2317      	movs	r3, #23
 80061ca:	18fb      	adds	r3, r7, r3
 80061cc:	2202      	movs	r2, #2
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e008      	b.n	80061e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80061d2:	2316      	movs	r3, #22
 80061d4:	18fb      	adds	r3, r7, r3
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d103      	bne.n	80061e4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x224>

						TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80061dc:	2317      	movs	r3, #23
 80061de:	18fb      	adds	r3, r7, r3
 80061e0:	2201      	movs	r2, #1
 80061e2:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	2100      	movs	r1, #0
 80061ea:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80061ec:	e21f      	b.n	800662e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80061ee:	230c      	movs	r3, #12
 80061f0:	18fb      	adds	r3, r7, r3
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	2108      	movs	r1, #8
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 fb54 	bl	80068a4 <unsigned_bitwise_modulo>
 80061fc:	1e03      	subs	r3, r0, #0
 80061fe:	d121      	bne.n	8006244 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x284>

					//remainder is zero, which means both shortened and lengthened manipulated periods have no no remainder

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8006200:	2212      	movs	r2, #18
 8006202:	18bb      	adds	r3, r7, r2
 8006204:	18ba      	adds	r2, r7, r2
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 800620a:	2210      	movs	r2, #16
 800620c:	18bb      	adds	r3, r7, r2
 800620e:	18ba      	adds	r2, r7, r2
 8006210:	8812      	ldrh	r2, [r2, #0]
 8006212:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 8006214:	2316      	movs	r3, #22
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d104      	bne.n	8006228 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x268>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800621e:	2317      	movs	r3, #23
 8006220:	18fb      	adds	r3, r7, r3
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e008      	b.n	800623a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006228:	2316      	movs	r3, #22
 800622a:	18fb      	adds	r3, r7, r3
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d103      	bne.n	800623a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x27a>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006232:	2317      	movs	r3, #23
 8006234:	18fb      	adds	r3, r7, r3
 8006236:	2200      	movs	r2, #0
 8006238:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 8006242:	e1f4      	b.n	800662e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 8006244:	230c      	movs	r3, #12
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	2108      	movs	r1, #8
 800624c:	0018      	movs	r0, r3
 800624e:	f000 fb29 	bl	80068a4 <unsigned_bitwise_modulo>
 8006252:	0003      	movs	r3, r0
 8006254:	2b7f      	cmp	r3, #127	@ 0x7f
 8006256:	d821      	bhi.n	800629c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2dc>

					//remainder is less than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in less than 0.5

					manipulated_period_shorten = manipulated_period_shorten; //do nothing //DONE
 8006258:	2212      	movs	r2, #18
 800625a:	18bb      	adds	r3, r7, r2
 800625c:	18ba      	adds	r2, r7, r2
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 8006262:	2210      	movs	r2, #16
 8006264:	18bb      	adds	r3, r7, r2
 8006266:	18ba      	adds	r2, r7, r2
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 800626c:	2316      	movs	r3, #22
 800626e:	18fb      	adds	r3, r7, r3
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2c0>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006276:	2317      	movs	r3, #23
 8006278:	18fb      	adds	r3, r7, r3
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e008      	b.n	8006292 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006280:	2316      	movs	r3, #22
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d103      	bne.n	8006292 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2d2>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800628a:	2317      	movs	r3, #23
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	2100      	movs	r1, #0
 8006298:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800629a:	e1c8      	b.n	800662e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800629c:	230c      	movs	r3, #12
 800629e:	18fb      	adds	r3, r7, r3
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	2108      	movs	r1, #8
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 fafd 	bl	80068a4 <unsigned_bitwise_modulo>
 80062aa:	0003      	movs	r3, r0
 80062ac:	2b80      	cmp	r3, #128	@ 0x80
 80062ae:	d800      	bhi.n	80062b2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x2f2>
 80062b0:	e1bd      	b.n	800662e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>

					//remainder is greater than 128, which means two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC_and_shifted_by_ADC_bits ends in more than 0.5

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 80062b2:	2212      	movs	r2, #18
 80062b4:	18bb      	adds	r3, r7, r2
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	8812      	ldrh	r2, [r2, #0]
 80062ba:	3a01      	subs	r2, #1
 80062bc:	801a      	strh	r2, [r3, #0]
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 80062be:	2210      	movs	r2, #16
 80062c0:	18bb      	adds	r3, r7, r2
 80062c2:	18ba      	adds	r2, r7, r2
 80062c4:	8812      	ldrh	r2, [r2, #0]
 80062c6:	3201      	adds	r2, #1
 80062c8:	801a      	strh	r2, [r3, #0]

					if(symmetry_type_for_halfcycle == SHORTEN){
 80062ca:	2316      	movs	r3, #22
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x31e>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062d4:	2317      	movs	r3, #23
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e008      	b.n	80062f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
					}
					else if(symmetry_type_for_halfcycle == LENGTHEN){
 80062de:	2316      	movs	r3, #22
 80062e0:	18fb      	adds	r3, r7, r3
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d103      	bne.n	80062f0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x330>
						TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80062e8:	2317      	movs	r3, #23
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	2200      	movs	r2, #0
 80062ee:	701a      	strb	r2, [r3, #0]
					}
					params_ptr->prescaler_adjust = DO_NOTHING;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2220      	movs	r2, #32
 80062f4:	2100      	movs	r1, #0
 80062f6:	5499      	strb	r1, [r3, r2]
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 80062f8:	e199      	b.n	800662e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x66e>
				}
			}

			else if((manipulated_period_lengthen > 256) || ((manipulated_period_lengthen == 256) && (unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 0))){
 80062fa:	2110      	movs	r1, #16
 80062fc:	187b      	adds	r3, r7, r1
 80062fe:	881a      	ldrh	r2, [r3, #0]
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	429a      	cmp	r2, r3
 8006306:	d810      	bhi.n	800632a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006308:	187b      	adds	r3, r7, r1
 800630a:	881a      	ldrh	r2, [r3, #0]
 800630c:	2380      	movs	r3, #128	@ 0x80
 800630e:	005b      	lsls	r3, r3, #1
 8006310:	429a      	cmp	r2, r3
 8006312:	d000      	beq.n	8006316 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x356>
 8006314:	e18c      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
 8006316:	230c      	movs	r3, #12
 8006318:	18fb      	adds	r3, r7, r3
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	2108      	movs	r1, #8
 800631e:	0018      	movs	r0, r3
 8006320:	f000 fac0 	bl	80068a4 <unsigned_bitwise_modulo>
 8006324:	1e03      	subs	r3, r0, #0
 8006326:	d100      	bne.n	800632a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x36a>
 8006328:	e182      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800632a:	230c      	movs	r3, #12
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	881b      	ldrh	r3, [r3, #0]
 8006330:	2108      	movs	r1, #8
 8006332:	0018      	movs	r0, r3
 8006334:	f000 fab6 	bl	80068a4 <unsigned_bitwise_modulo>
 8006338:	0003      	movs	r3, r0
 800633a:	2b80      	cmp	r3, #128	@ 0x80
 800633c:	d159      	bne.n	80063f2 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x432>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 800633e:	2212      	movs	r2, #18
 8006340:	18bb      	adds	r3, r7, r2
 8006342:	18ba      	adds	r2, r7, r2
 8006344:	8812      	ldrh	r2, [r2, #0]
 8006346:	3a01      	subs	r2, #1
 8006348:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800634a:	2110      	movs	r1, #16
 800634c:	187b      	adds	r3, r7, r1
 800634e:	187a      	adds	r2, r7, r1
 8006350:	8812      	ldrh	r2, [r2, #0]
 8006352:	3201      	adds	r2, #1
 8006354:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006356:	000c      	movs	r4, r1
 8006358:	187b      	adds	r3, r7, r1
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	2101      	movs	r1, #1
 800635e:	0018      	movs	r0, r3
 8006360:	f000 faa0 	bl	80068a4 <unsigned_bitwise_modulo>
 8006364:	1e03      	subs	r3, r0, #0
 8006366:	d121      	bne.n	80063ac <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ec>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006368:	193b      	adds	r3, r7, r4
 800636a:	193a      	adds	r2, r7, r4
 800636c:	8812      	ldrh	r2, [r2, #0]
 800636e:	0852      	lsrs	r2, r2, #1
 8006370:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006372:	2316      	movs	r3, #22
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d108      	bne.n	800638e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3ce>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800637c:	2317      	movs	r3, #23
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	2200      	movs	r2, #0
 8006382:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2220      	movs	r2, #32
 8006388:	2100      	movs	r1, #0
 800638a:	5499      	strb	r1, [r3, r2]
 800638c:	e150      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800638e:	2316      	movs	r3, #22
 8006390:	18fb      	adds	r3, r7, r3
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b01      	cmp	r3, #1
 8006396:	d000      	beq.n	800639a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x3da>
 8006398:	e14a      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800639a:	2317      	movs	r3, #23
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	2101      	movs	r1, #1
 80063a8:	5499      	strb	r1, [r3, r2]
 80063aa:	e141      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80063ac:	2210      	movs	r2, #16
 80063ae:	18bb      	adds	r3, r7, r2
 80063b0:	18ba      	adds	r2, r7, r2
 80063b2:	8812      	ldrh	r2, [r2, #0]
 80063b4:	0852      	lsrs	r2, r2, #1
 80063b6:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80063b8:	2316      	movs	r3, #22
 80063ba:	18fb      	adds	r3, r7, r3
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d108      	bne.n	80063d4 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x414>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80063c2:	2317      	movs	r3, #23
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2220      	movs	r2, #32
 80063ce:	2100      	movs	r1, #0
 80063d0:	5499      	strb	r1, [r3, r2]
 80063d2:	e12d      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80063d4:	2316      	movs	r3, #22
 80063d6:	18fb      	adds	r3, r7, r3
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d000      	beq.n	80063e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x420>
 80063de:	e127      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 80063e0:	2317      	movs	r3, #23
 80063e2:	18fb      	adds	r3, r7, r3
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	2101      	movs	r1, #1
 80063ee:	5499      	strb	r1, [r3, r2]
 80063f0:	e11e      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 0){
 80063f2:	230c      	movs	r3, #12
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	2108      	movs	r1, #8
 80063fa:	0018      	movs	r0, r3
 80063fc:	f000 fa52 	bl	80068a4 <unsigned_bitwise_modulo>
 8006400:	1e03      	subs	r3, r0, #0
 8006402:	d152      	bne.n	80064aa <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4ea>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 8006404:	2212      	movs	r2, #18
 8006406:	18bb      	adds	r3, r7, r2
 8006408:	18ba      	adds	r2, r7, r2
 800640a:	8812      	ldrh	r2, [r2, #0]
 800640c:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 800640e:	2410      	movs	r4, #16
 8006410:	193b      	adds	r3, r7, r4
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	2101      	movs	r1, #1
 8006416:	0018      	movs	r0, r3
 8006418:	f000 fa44 	bl	80068a4 <unsigned_bitwise_modulo>
 800641c:	1e03      	subs	r3, r0, #0
 800641e:	d121      	bne.n	8006464 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4a4>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006420:	193b      	adds	r3, r7, r4
 8006422:	193a      	adds	r2, r7, r4
 8006424:	8812      	ldrh	r2, [r2, #0]
 8006426:	0852      	lsrs	r2, r2, #1
 8006428:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 800642a:	2316      	movs	r3, #22
 800642c:	18fb      	adds	r3, r7, r3
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d108      	bne.n	8006446 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x486>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006434:	2317      	movs	r3, #23
 8006436:	18fb      	adds	r3, r7, r3
 8006438:	2200      	movs	r2, #0
 800643a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2220      	movs	r2, #32
 8006440:	2100      	movs	r1, #0
 8006442:	5499      	strb	r1, [r3, r2]
 8006444:	e0f4      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006446:	2316      	movs	r3, #22
 8006448:	18fb      	adds	r3, r7, r3
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d000      	beq.n	8006452 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x492>
 8006450:	e0ee      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006452:	2317      	movs	r3, #23
 8006454:	18fb      	adds	r3, r7, r3
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	2101      	movs	r1, #1
 8006460:	5499      	strb	r1, [r3, r2]
 8006462:	e0e5      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006464:	2210      	movs	r2, #16
 8006466:	18bb      	adds	r3, r7, r2
 8006468:	18ba      	adds	r2, r7, r2
 800646a:	8812      	ldrh	r2, [r2, #0]
 800646c:	0852      	lsrs	r2, r2, #1
 800646e:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006470:	2316      	movs	r3, #22
 8006472:	18fb      	adds	r3, r7, r3
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4cc>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800647a:	2317      	movs	r3, #23
 800647c:	18fb      	adds	r3, r7, r3
 800647e:	2200      	movs	r2, #0
 8006480:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2220      	movs	r2, #32
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
 800648a:	e0d1      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800648c:	2316      	movs	r3, #22
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d000      	beq.n	8006498 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x4d8>
 8006496:	e0cb      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 8006498:	2317      	movs	r3, #23
 800649a:	18fb      	adds	r3, r7, r3
 800649c:	2201      	movs	r2, #1
 800649e:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	2101      	movs	r1, #1
 80064a6:	5499      	strb	r1, [r3, r2]
 80064a8:	e0c2      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) < 128){
 80064aa:	230c      	movs	r3, #12
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	2108      	movs	r1, #8
 80064b2:	0018      	movs	r0, r3
 80064b4:	f000 f9f6 	bl	80068a4 <unsigned_bitwise_modulo>
 80064b8:	0003      	movs	r3, r0
 80064ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80064bc:	d856      	bhi.n	800656c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x5ac>

					manipulated_period_shorten = manipulated_period_shorten; //do nothing// //DONE
 80064be:	2212      	movs	r2, #18
 80064c0:	18bb      	adds	r3, r7, r2
 80064c2:	18ba      	adds	r2, r7, r2
 80064c4:	8812      	ldrh	r2, [r2, #0]
 80064c6:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen; //do nothing //DONE
 80064c8:	2410      	movs	r4, #16
 80064ca:	193b      	adds	r3, r7, r4
 80064cc:	193a      	adds	r2, r7, r4
 80064ce:	8812      	ldrh	r2, [r2, #0]
 80064d0:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 80064d2:	193b      	adds	r3, r7, r4
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	2101      	movs	r1, #1
 80064d8:	0018      	movs	r0, r3
 80064da:	f000 f9e3 	bl	80068a4 <unsigned_bitwise_modulo>
 80064de:	1e03      	subs	r3, r0, #0
 80064e0:	d121      	bne.n	8006526 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x566>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80064e2:	193b      	adds	r3, r7, r4
 80064e4:	193a      	adds	r2, r7, r4
 80064e6:	8812      	ldrh	r2, [r2, #0]
 80064e8:	0852      	lsrs	r2, r2, #1
 80064ea:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80064ec:	2316      	movs	r3, #22
 80064ee:	18fb      	adds	r3, r7, r3
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d108      	bne.n	8006508 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x548>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80064f6:	2317      	movs	r3, #23
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2220      	movs	r2, #32
 8006502:	2100      	movs	r1, #0
 8006504:	5499      	strb	r1, [r3, r2]
 8006506:	e093      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006508:	2316      	movs	r3, #22
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d000      	beq.n	8006514 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x554>
 8006512:	e08d      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006514:	2317      	movs	r3, #23
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2200      	movs	r2, #0
 800651a:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2220      	movs	r2, #32
 8006520:	2101      	movs	r1, #1
 8006522:	5499      	strb	r1, [r3, r2]
 8006524:	e084      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 8006526:	2210      	movs	r2, #16
 8006528:	18bb      	adds	r3, r7, r2
 800652a:	18ba      	adds	r2, r7, r2
 800652c:	8812      	ldrh	r2, [r2, #0]
 800652e:	0852      	lsrs	r2, r2, #1
 8006530:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 8006532:	2316      	movs	r3, #22
 8006534:	18fb      	adds	r3, r7, r3
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d108      	bne.n	800654e <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x58e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 800653c:	2317      	movs	r3, #23
 800653e:	18fb      	adds	r3, r7, r3
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2220      	movs	r2, #32
 8006548:	2100      	movs	r1, #0
 800654a:	5499      	strb	r1, [r3, r2]
 800654c:	e070      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 800654e:	2316      	movs	r3, #22
 8006550:	18fb      	adds	r3, r7, r3
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d000      	beq.n	800655a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x59a>
 8006558:	e06a      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800655a:	2317      	movs	r3, #23
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2201      	movs	r2, #1
 8006560:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2220      	movs	r2, #32
 8006566:	2101      	movs	r1, #1
 8006568:	5499      	strb	r1, [r3, r2]
 800656a:	e061      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
				}
				else if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) > 128){
 800656c:	230c      	movs	r3, #12
 800656e:	18fb      	adds	r3, r7, r3
 8006570:	881b      	ldrh	r3, [r3, #0]
 8006572:	2108      	movs	r1, #8
 8006574:	0018      	movs	r0, r3
 8006576:	f000 f995 	bl	80068a4 <unsigned_bitwise_modulo>
 800657a:	0003      	movs	r3, r0
 800657c:	2b80      	cmp	r3, #128	@ 0x80
 800657e:	d957      	bls.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>

					manipulated_period_shorten = manipulated_period_shorten - 1; //DONE
 8006580:	2212      	movs	r2, #18
 8006582:	18bb      	adds	r3, r7, r2
 8006584:	18ba      	adds	r2, r7, r2
 8006586:	8812      	ldrh	r2, [r2, #0]
 8006588:	3a01      	subs	r2, #1
 800658a:	801a      	strh	r2, [r3, #0]
					//NO NEED TO CHECK IF MANIPULATED_PERIOD_SHORTEN ENDS IN 0.5 AS IN THIS SPECIFIC CONDITION, WE HAVE ELIMINATED THAT POSSIBILITY
					manipulated_period_lengthen = manipulated_period_lengthen + 1; //DONE
 800658c:	2410      	movs	r4, #16
 800658e:	193b      	adds	r3, r7, r4
 8006590:	193a      	adds	r2, r7, r4
 8006592:	8812      	ldrh	r2, [r2, #0]
 8006594:	3201      	adds	r2, #1
 8006596:	801a      	strh	r2, [r3, #0]

					if(unsigned_bitwise_modulo(manipulated_period_lengthen, 1) == 0){
 8006598:	193b      	adds	r3, r7, r4
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	2101      	movs	r1, #1
 800659e:	0018      	movs	r0, r3
 80065a0:	f000 f980 	bl	80068a4 <unsigned_bitwise_modulo>
 80065a4:	1e03      	subs	r3, r0, #0
 80065a6:	d120      	bne.n	80065ea <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x62a>

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065a8:	193b      	adds	r3, r7, r4
 80065aa:	193a      	adds	r2, r7, r4
 80065ac:	8812      	ldrh	r2, [r2, #0]
 80065ae:	0852      	lsrs	r2, r2, #1
 80065b0:	801a      	strh	r2, [r3, #0]
						//DO NOT OSCILLATE BETWEEN VALUES //DONE
						//prescaler during lengthened halfperiod should be set to half //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80065b2:	2316      	movs	r3, #22
 80065b4:	18fb      	adds	r3, r7, r3
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d108      	bne.n	80065ce <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x60e>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065bc:	2317      	movs	r3, #23
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	2100      	movs	r1, #0
 80065ca:	5499      	strb	r1, [r3, r2]
 80065cc:	e030      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 80065ce:	2316      	movs	r3, #22
 80065d0:	18fb      	adds	r3, r7, r3
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d12b      	bne.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 80065d8:	2317      	movs	r3, #23
 80065da:	18fb      	adds	r3, r7, r3
 80065dc:	2200      	movs	r2, #0
 80065de:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2220      	movs	r2, #32
 80065e4:	2101      	movs	r1, #1
 80065e6:	5499      	strb	r1, [r3, r2]
 80065e8:	e022      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
					}
					else{

						manipulated_period_lengthen = manipulated_period_lengthen >> 1; //DONE
 80065ea:	2210      	movs	r2, #16
 80065ec:	18bb      	adds	r3, r7, r2
 80065ee:	18ba      	adds	r2, r7, r2
 80065f0:	8812      	ldrh	r2, [r2, #0]
 80065f2:	0852      	lsrs	r2, r2, #1
 80065f4:	801a      	strh	r2, [r3, #0]
						//prescaler during lengthened halfperiod should be set to half //DONE
						//manipulated period_lengthened should oscillate over the halfperiod between manipulated_period_lengthen and manipulated_period_lengthen + 1. //DONE

						if(symmetry_type_for_halfcycle == SHORTEN){
 80065f6:	2316      	movs	r3, #22
 80065f8:	18fb      	adds	r3, r7, r3
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x652>
							TIM16_final_start_value_oscillation_mode = DO_NOT_OSCILLATE;
 8006600:	2317      	movs	r3, #23
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	2200      	movs	r2, #0
 8006606:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = DO_NOTHING;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	2100      	movs	r1, #0
 800660e:	5499      	strb	r1, [r3, r2]
 8006610:	e00e      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
						}
						else if(symmetry_type_for_halfcycle == LENGTHEN){
 8006612:	2316      	movs	r3, #22
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d109      	bne.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
							TIM16_final_start_value_oscillation_mode = OSCILLATE_UPWARDS;
 800661c:	2317      	movs	r3, #23
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	2201      	movs	r2, #1
 8006622:	701a      	strb	r2, [r3, #0]
							params_ptr->prescaler_adjust = MULTIPLY_BY_TWO;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	2101      	movs	r1, #1
 800662a:	5499      	strb	r1, [r3, r2]
 800662c:	e000      	b.n	8006630 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x670>
				if(unsigned_bitwise_modulo(two_fifty_six_minus_TIM16_raw_start_value_multiplied_by_PRC, 8) == 128){
 800662e:	46c0      	nop			@ (mov r8, r8)
			}

	        //DETERMINE THE TIM16_FINAL_START_VALUE FROM MANIPULATED_PERIOD_LENGTHEN/SHORTEN CALCULATED
	        //NOTE INVERSE RELATIONSHIP BETWEEN TIM16_FINAL_START_VALUE AND MANIPULATED_PERIOD_LENGTHEN/SHORTEN BECAUSE 256-TIM16_FINAL_START_VALUE = MANIPULATED_PERIOD_LENGTHEN/SHORTEN
	        //ODD VALUES OF CURRENT_INDEX WILL FEATURE THE ADJUSTED(OSCILLATED) VALUE
	        if(symmetry_type_for_halfcycle == SHORTEN){
 8006630:	2316      	movs	r3, #22
 8006632:	18fb      	adds	r3, r7, r3
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d152      	bne.n	80066e0 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x720>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 800663a:	2317      	movs	r3, #23
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d109      	bne.n	8006658 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x698>

	                params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006644:	2312      	movs	r3, #18
 8006646:	18fb      	adds	r3, r7, r3
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	2280      	movs	r2, #128	@ 0x80
 800664c:	0052      	lsls	r2, r2, #1
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	829a      	strh	r2, [r3, #20]
 8006656:	e099      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006658:	2317      	movs	r3, #23
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d11b      	bne.n	800669a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6da>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	89db      	ldrh	r3, [r3, #14]
 8006666:	b29b      	uxth	r3, r3
 8006668:	2101      	movs	r1, #1
 800666a:	0018      	movs	r0, r3
 800666c:	f000 f91a 	bl	80068a4 <unsigned_bitwise_modulo>
 8006670:	1e03      	subs	r3, r0, #0
 8006672:	d109      	bne.n	8006688 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6c8>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 8006674:	2312      	movs	r3, #18
 8006676:	18fb      	adds	r3, r7, r3
 8006678:	881b      	ldrh	r3, [r3, #0]
 800667a:	2280      	movs	r2, #128	@ 0x80
 800667c:	0052      	lsls	r2, r2, #1
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	b29a      	uxth	r2, r3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	829a      	strh	r2, [r3, #20]
 8006686:	e081      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten - 1;
 8006688:	2312      	movs	r3, #18
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	881b      	ldrh	r3, [r3, #0]
 800668e:	22ff      	movs	r2, #255	@ 0xff
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	829a      	strh	r2, [r3, #20]
 8006698:	e078      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 800669a:	2317      	movs	r3, #23
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d000      	beq.n	80066a6 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x6e6>
 80066a4:	e072      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	89db      	ldrh	r3, [r3, #14]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	2101      	movs	r1, #1
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f8f8 	bl	80068a4 <unsigned_bitwise_modulo>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d109      	bne.n	80066cc <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x70c>

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten;
 80066b8:	2312      	movs	r3, #18
 80066ba:	18fb      	adds	r3, r7, r3
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	2280      	movs	r2, #128	@ 0x80
 80066c0:	0052      	lsls	r2, r2, #1
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	829a      	strh	r2, [r3, #20]
 80066ca:	e05f      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_shorten + 1;
 80066cc:	2312      	movs	r3, #18
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	2202      	movs	r2, #2
 80066d4:	32ff      	adds	r2, #255	@ 0xff
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	b29a      	uxth	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	829a      	strh	r2, [r3, #20]
 80066de:	e055      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	        }
	        else if(symmetry_type_for_halfcycle == LENGTHEN){
 80066e0:	2316      	movs	r3, #22
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d150      	bne.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	            if(TIM16_final_start_value_oscillation_mode == DO_NOT_OSCILLATE){
 80066ea:	2317      	movs	r3, #23
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x748>

	                params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 80066f4:	2310      	movs	r3, #16
 80066f6:	18fb      	adds	r3, r7, r3
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	2280      	movs	r2, #128	@ 0x80
 80066fc:	0052      	lsls	r2, r2, #1
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	b29a      	uxth	r2, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	829a      	strh	r2, [r3, #20]
 8006706:	e041      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_UPWARDS){
 8006708:	2317      	movs	r3, #23
 800670a:	18fb      	adds	r3, r7, r3
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11b      	bne.n	800674a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x78a>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	89db      	ldrh	r3, [r3, #14]
 8006716:	b29b      	uxth	r3, r3
 8006718:	2101      	movs	r1, #1
 800671a:	0018      	movs	r0, r3
 800671c:	f000 f8c2 	bl	80068a4 <unsigned_bitwise_modulo>
 8006720:	1e03      	subs	r3, r0, #0
 8006722:	d109      	bne.n	8006738 <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x778>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006724:	2310      	movs	r3, #16
 8006726:	18fb      	adds	r3, r7, r3
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	2280      	movs	r2, #128	@ 0x80
 800672c:	0052      	lsls	r2, r2, #1
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	b29a      	uxth	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	829a      	strh	r2, [r3, #20]
 8006736:	e029      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen - 1;
 8006738:	2310      	movs	r3, #16
 800673a:	18fb      	adds	r3, r7, r3
 800673c:	881b      	ldrh	r3, [r3, #0]
 800673e:	22ff      	movs	r2, #255	@ 0xff
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	829a      	strh	r2, [r3, #20]
 8006748:	e020      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	            }
	            else if(TIM16_final_start_value_oscillation_mode == OSCILLATE_DOWNWARDS){
 800674a:	2317      	movs	r3, #23
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d11b      	bne.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>

	                if(unsigned_bitwise_modulo(params_ptr->index, 1) == 0){ //if current index is even
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	89db      	ldrh	r3, [r3, #14]
 8006758:	b29b      	uxth	r3, r3
 800675a:	2101      	movs	r1, #1
 800675c:	0018      	movs	r0, r3
 800675e:	f000 f8a1 	bl	80068a4 <unsigned_bitwise_modulo>
 8006762:	1e03      	subs	r3, r0, #0
 8006764:	d109      	bne.n	800677a <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7ba>

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen;
 8006766:	2310      	movs	r3, #16
 8006768:	18fb      	adds	r3, r7, r3
 800676a:	881b      	ldrh	r3, [r3, #0]
 800676c:	2280      	movs	r2, #128	@ 0x80
 800676e:	0052      	lsls	r2, r2, #1
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	829a      	strh	r2, [r3, #20]
 8006778:	e008      	b.n	800678c <Process_TIM16_Final_Start_Value_and_Final_Prescaler+0x7cc>
	                }
	                else{ //if current index is odd

	                    params_ptr->final_start_value = 256 - manipulated_period_lengthen + 1;
 800677a:	2310      	movs	r3, #16
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	881b      	ldrh	r3, [r3, #0]
 8006780:	2202      	movs	r2, #2
 8006782:	32ff      	adds	r2, #255	@ 0xff
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	b29a      	uxth	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	829a      	strh	r2, [r3, #20]
	                }
	            }
	        }

	        Adjust_TIM16_Prescaler(params_ptr);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0018      	movs	r0, r3
 8006790:	f7ff fbf4 	bl	8005f7c <Adjust_TIM16_Prescaler>
		params_ptr->final_start_value = params_ptr->raw_start_value;
		params_ptr->prescaler_adjust = DO_NOTHING;
        Adjust_TIM16_Prescaler(params_ptr);
    #endif

    params_ptr->final_period = 256 - params_ptr->final_start_value;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8a9b      	ldrh	r3, [r3, #20]
 8006798:	b29b      	uxth	r3, r3
 800679a:	2280      	movs	r2, #128	@ 0x80
 800679c:	0052      	lsls	r2, r2, #1
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	82da      	strh	r2, [r3, #22]
    params_ptr->final_ARR = params_ptr->final_period - 1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	8adb      	ldrh	r3, [r3, #22]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	831a      	strh	r2, [r3, #24]
    params_ptr->final_prescaler_minus_one = params_ptr->final_prescaler - 1;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	8b9b      	ldrh	r3, [r3, #28]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	83da      	strh	r2, [r3, #30]

    return 1;
 80067c2:	2301      	movs	r3, #1
}
 80067c4:	0018      	movs	r0, r3
 80067c6:	46bd      	mov	sp, r7
 80067c8:	b007      	add	sp, #28
 80067ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067cc <SystemInit>:
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	46c0      	nop			@ (mov r8, r8)
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <Start_OC_TIM>:
 80067d6:	b5b0      	push	{r4, r5, r7, lr}
 80067d8:	b084      	sub	sp, #16
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	6039      	str	r1, [r7, #0]
 80067e0:	250f      	movs	r5, #15
 80067e2:	197c      	adds	r4, r7, r5
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	0011      	movs	r1, r2
 80067ea:	0018      	movs	r0, r3
 80067ec:	f003 ff32 	bl	800a654 <HAL_TIM_OC_Start_IT>
 80067f0:	0003      	movs	r3, r0
 80067f2:	7023      	strb	r3, [r4, #0]
 80067f4:	197b      	adds	r3, r7, r5
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <Start_OC_TIM+0x2a>
 80067fc:	f7fc f874 	bl	80028e8 <Error_Handler>
 8006800:	230f      	movs	r3, #15
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	0018      	movs	r0, r3
 8006808:	46bd      	mov	sp, r7
 800680a:	b004      	add	sp, #16
 800680c:	bdb0      	pop	{r4, r5, r7, pc}

0800680e <Stop_OC_TIM>:
 800680e:	b5b0      	push	{r4, r5, r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
 8006818:	250f      	movs	r5, #15
 800681a:	197c      	adds	r4, r7, r5
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	0011      	movs	r1, r2
 8006822:	0018      	movs	r0, r3
 8006824:	f004 f83a 	bl	800a89c <HAL_TIM_OC_Stop_IT>
 8006828:	0003      	movs	r3, r0
 800682a:	7023      	strb	r3, [r4, #0]
 800682c:	197b      	adds	r3, r7, r5
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <Stop_OC_TIM+0x2a>
 8006834:	f7fc f858 	bl	80028e8 <Error_Handler>
 8006838:	230f      	movs	r3, #15
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	0018      	movs	r0, r3
 8006840:	46bd      	mov	sp, r7
 8006842:	b004      	add	sp, #16
 8006844:	bdb0      	pop	{r4, r5, r7, pc}

08006846 <isPrime>:
#include "utility.h"

enum Validate isPrime(uint16_t x){
 8006846:	b580      	push	{r7, lr}
 8006848:	b084      	sub	sp, #16
 800684a:	af00      	add	r7, sp, #0
 800684c:	0002      	movs	r2, r0
 800684e:	1dbb      	adds	r3, r7, #6
 8006850:	801a      	strh	r2, [r3, #0]
    for (uint16_t d = 2; d * d <= x; d++) {
 8006852:	230e      	movs	r3, #14
 8006854:	18fb      	adds	r3, r7, r3
 8006856:	2202      	movs	r2, #2
 8006858:	801a      	strh	r2, [r3, #0]
 800685a:	e014      	b.n	8006886 <isPrime+0x40>
        if (x % d == 0)
 800685c:	1dba      	adds	r2, r7, #6
 800685e:	230e      	movs	r3, #14
 8006860:	18fb      	adds	r3, r7, r3
 8006862:	8812      	ldrh	r2, [r2, #0]
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	0019      	movs	r1, r3
 8006868:	0010      	movs	r0, r2
 800686a:	f7f9 fcd3 	bl	8000214 <__aeabi_uidivmod>
 800686e:	000b      	movs	r3, r1
 8006870:	b29b      	uxth	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <isPrime+0x34>
            return NO;
 8006876:	2300      	movs	r3, #0
 8006878:	e010      	b.n	800689c <isPrime+0x56>
    for (uint16_t d = 2; d * d <= x; d++) {
 800687a:	210e      	movs	r1, #14
 800687c:	187b      	adds	r3, r7, r1
 800687e:	881a      	ldrh	r2, [r3, #0]
 8006880:	187b      	adds	r3, r7, r1
 8006882:	3201      	adds	r2, #1
 8006884:	801a      	strh	r2, [r3, #0]
 8006886:	220e      	movs	r2, #14
 8006888:	18bb      	adds	r3, r7, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	18ba      	adds	r2, r7, r2
 800688e:	8812      	ldrh	r2, [r2, #0]
 8006890:	435a      	muls	r2, r3
 8006892:	1dbb      	adds	r3, r7, #6
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	dde0      	ble.n	800685c <isPrime+0x16>
    }
    return YES;
 800689a:	2301      	movs	r3, #1
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b004      	add	sp, #16
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <unsigned_bitwise_modulo>:

uint32_t unsigned_bitwise_modulo(uint32_t dividend, uint8_t base_2_exponent){
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	000a      	movs	r2, r1
 80068ae:	1cfb      	adds	r3, r7, #3
 80068b0:	701a      	strb	r2, [r3, #0]

    return dividend & ((1 << base_2_exponent) - 1);
 80068b2:	1cfb      	adds	r3, r7, #3
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2201      	movs	r2, #1
 80068b8:	409a      	lsls	r2, r3
 80068ba:	0013      	movs	r3, r2
 80068bc:	3b01      	subs	r3, #1
 80068be:	001a      	movs	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4013      	ands	r3, r2
}
 80068c4:	0018      	movs	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	b002      	add	sp, #8
 80068ca:	bd80      	pop	{r7, pc}

080068cc <Global_Interrupt_Enable>:

uint8_t Global_Interrupt_Enable(void){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80068d0:	b662      	cpsie	i
}
 80068d2:	46c0      	nop			@ (mov r8, r8)

	__enable_irq();
	return 1;
 80068d4:	2301      	movs	r3, #1
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <Get_Status_Bit>:

	__disable_irq();
	return 1;
}

enum Validate Get_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	000a      	movs	r2, r1
 80068e6:	1cbb      	adds	r3, r7, #2
 80068e8:	801a      	strh	r2, [r3, #0]

    if(*bits & bit){
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	1cba      	adds	r2, r7, #2
 80068f0:	8812      	ldrh	r2, [r2, #0]
 80068f2:	4013      	ands	r3, r2
 80068f4:	d001      	beq.n	80068fa <Get_Status_Bit+0x1e>

        return (enum Validate) YES;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <Get_Status_Bit+0x20>
    }

    else{

        return (enum Validate) NO;
 80068fa:	2300      	movs	r3, #0
    }
}
 80068fc:	0018      	movs	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	b002      	add	sp, #8
 8006902:	bd80      	pop	{r7, pc}

08006904 <Set_Status_Bit>:

void Set_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	000a      	movs	r2, r1
 800690e:	1cbb      	adds	r3, r7, #2
 8006910:	801a      	strh	r2, [r3, #0]

	*bits |= bit;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	1cbb      	adds	r3, r7, #2
 8006918:	881b      	ldrh	r3, [r3, #0]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	46c0      	nop			@ (mov r8, r8)
 8006922:	46bd      	mov	sp, r7
 8006924:	b002      	add	sp, #8
 8006926:	bd80      	pop	{r7, pc}

08006928 <Clear_Status_Bit>:

void Clear_Status_Bit(volatile uint32_t *bits, enum Status_Bit bit){
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	000a      	movs	r2, r1
 8006932:	1cbb      	adds	r3, r7, #2
 8006934:	801a      	strh	r2, [r3, #0]

	*bits &= ~bit;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	1cba      	adds	r2, r7, #2
 800693c:	8812      	ldrh	r2, [r2, #0]
 800693e:	43d2      	mvns	r2, r2
 8006940:	401a      	ands	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
}
 8006946:	46c0      	nop			@ (mov r8, r8)
 8006948:	46bd      	mov	sp, r7
 800694a:	b002      	add	sp, #8
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <Reset_Handler>:
 8006950:	480d      	ldr	r0, [pc, #52]	@ (8006988 <LoopForever+0x2>)
 8006952:	4685      	mov	sp, r0
 8006954:	f7ff ff3a 	bl	80067cc <SystemInit>
 8006958:	480c      	ldr	r0, [pc, #48]	@ (800698c <LoopForever+0x6>)
 800695a:	490d      	ldr	r1, [pc, #52]	@ (8006990 <LoopForever+0xa>)
 800695c:	4a0d      	ldr	r2, [pc, #52]	@ (8006994 <LoopForever+0xe>)
 800695e:	2300      	movs	r3, #0
 8006960:	e002      	b.n	8006968 <LoopCopyDataInit>

08006962 <CopyDataInit>:
 8006962:	58d4      	ldr	r4, [r2, r3]
 8006964:	50c4      	str	r4, [r0, r3]
 8006966:	3304      	adds	r3, #4

08006968 <LoopCopyDataInit>:
 8006968:	18c4      	adds	r4, r0, r3
 800696a:	428c      	cmp	r4, r1
 800696c:	d3f9      	bcc.n	8006962 <CopyDataInit>
 800696e:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <LoopForever+0x12>)
 8006970:	4c0a      	ldr	r4, [pc, #40]	@ (800699c <LoopForever+0x16>)
 8006972:	2300      	movs	r3, #0
 8006974:	e001      	b.n	800697a <LoopFillZerobss>

08006976 <FillZerobss>:
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	3204      	adds	r2, #4

0800697a <LoopFillZerobss>:
 800697a:	42a2      	cmp	r2, r4
 800697c:	d3fb      	bcc.n	8006976 <FillZerobss>
 800697e:	f007 fb93 	bl	800e0a8 <__libc_init_array>
 8006982:	f7fe faaf 	bl	8004ee4 <main>

08006986 <LoopForever>:
 8006986:	e7fe      	b.n	8006986 <LoopForever>
 8006988:	20002000 	.word	0x20002000
 800698c:	20000000 	.word	0x20000000
 8006990:	200004e0 	.word	0x200004e0
 8006994:	0800ebc0 	.word	0x0800ebc0
 8006998:	200004e0 	.word	0x200004e0
 800699c:	20000dcc 	.word	0x20000dcc

080069a0 <ADC1_IRQHandler>:
 80069a0:	e7fe      	b.n	80069a0 <ADC1_IRQHandler>
	...

080069a4 <HAL_Init>:
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b082      	sub	sp, #8
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	1dfb      	adds	r3, r7, #7
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
 80069b0:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <HAL_Init+0x3c>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <HAL_Init+0x3c>)
 80069b6:	2180      	movs	r1, #128	@ 0x80
 80069b8:	0049      	lsls	r1, r1, #1
 80069ba:	430a      	orrs	r2, r1
 80069bc:	601a      	str	r2, [r3, #0]
 80069be:	2000      	movs	r0, #0
 80069c0:	f000 f810 	bl	80069e4 <HAL_InitTick>
 80069c4:	1e03      	subs	r3, r0, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_Init+0x2c>
 80069c8:	1dfb      	adds	r3, r7, #7
 80069ca:	2201      	movs	r2, #1
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	e001      	b.n	80069d4 <HAL_Init+0x30>
 80069d0:	f7fe fef8 	bl	80057c4 <HAL_MspInit>
 80069d4:	1dfb      	adds	r3, r7, #7
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	0018      	movs	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	b002      	add	sp, #8
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	40022000 	.word	0x40022000

080069e4 <HAL_InitTick>:
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	230f      	movs	r3, #15
 80069ee:	18fb      	adds	r3, r7, r3
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
 80069f4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <HAL_InitTick+0x88>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d02b      	beq.n	8006a54 <HAL_InitTick+0x70>
 80069fc:	4b1c      	ldr	r3, [pc, #112]	@ (8006a70 <HAL_InitTick+0x8c>)
 80069fe:	681c      	ldr	r4, [r3, #0]
 8006a00:	4b1a      	ldr	r3, [pc, #104]	@ (8006a6c <HAL_InitTick+0x88>)
 8006a02:	781b      	ldrb	r3, [r3, #0]
 8006a04:	0019      	movs	r1, r3
 8006a06:	23fa      	movs	r3, #250	@ 0xfa
 8006a08:	0098      	lsls	r0, r3, #2
 8006a0a:	f7f9 fb7d 	bl	8000108 <__udivsi3>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	0019      	movs	r1, r3
 8006a12:	0020      	movs	r0, r4
 8006a14:	f7f9 fb78 	bl	8000108 <__udivsi3>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f001 fb75 	bl	800810a <HAL_SYSTICK_Config>
 8006a20:	1e03      	subs	r3, r0, #0
 8006a22:	d112      	bne.n	8006a4a <HAL_InitTick+0x66>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d80a      	bhi.n	8006a40 <HAL_InitTick+0x5c>
 8006a2a:	6879      	ldr	r1, [r7, #4]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	425b      	negs	r3, r3
 8006a30:	2200      	movs	r2, #0
 8006a32:	0018      	movs	r0, r3
 8006a34:	f001 fb34 	bl	80080a0 <HAL_NVIC_SetPriority>
 8006a38:	4b0e      	ldr	r3, [pc, #56]	@ (8006a74 <HAL_InitTick+0x90>)
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e00d      	b.n	8006a5c <HAL_InitTick+0x78>
 8006a40:	230f      	movs	r3, #15
 8006a42:	18fb      	adds	r3, r7, r3
 8006a44:	2201      	movs	r2, #1
 8006a46:	701a      	strb	r2, [r3, #0]
 8006a48:	e008      	b.n	8006a5c <HAL_InitTick+0x78>
 8006a4a:	230f      	movs	r3, #15
 8006a4c:	18fb      	adds	r3, r7, r3
 8006a4e:	2201      	movs	r2, #1
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	e003      	b.n	8006a5c <HAL_InitTick+0x78>
 8006a54:	230f      	movs	r3, #15
 8006a56:	18fb      	adds	r3, r7, r3
 8006a58:	2201      	movs	r2, #1
 8006a5a:	701a      	strb	r2, [r3, #0]
 8006a5c:	230f      	movs	r3, #15
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	0018      	movs	r0, r3
 8006a64:	46bd      	mov	sp, r7
 8006a66:	b005      	add	sp, #20
 8006a68:	bd90      	pop	{r4, r7, pc}
 8006a6a:	46c0      	nop			@ (mov r8, r8)
 8006a6c:	20000454 	.word	0x20000454
 8006a70:	2000044c 	.word	0x2000044c
 8006a74:	20000450 	.word	0x20000450

08006a78 <HAL_IncTick>:
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4b05      	ldr	r3, [pc, #20]	@ (8006a94 <HAL_IncTick+0x1c>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	001a      	movs	r2, r3
 8006a82:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <HAL_IncTick+0x20>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	18d2      	adds	r2, r2, r3
 8006a88:	4b03      	ldr	r3, [pc, #12]	@ (8006a98 <HAL_IncTick+0x20>)
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	46c0      	nop			@ (mov r8, r8)
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	20000454 	.word	0x20000454
 8006a98:	20000dac 	.word	0x20000dac

08006a9c <HAL_GetTick>:
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	4b02      	ldr	r3, [pc, #8]	@ (8006aac <HAL_GetTick+0x10>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	20000dac 	.word	0x20000dac

08006ab0 <LL_ADC_SetCommonPathInternalCh>:
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a05      	ldr	r2, [pc, #20]	@ (8006ad4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8006ac0:	401a      	ands	r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	46c0      	nop			@ (mov r8, r8)
 8006acc:	46bd      	mov	sp, r7
 8006ace:	b002      	add	sp, #8
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	fe3fffff 	.word	0xfe3fffff

08006ad8 <LL_ADC_GetCommonPathInternalCh>:
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	23e0      	movs	r3, #224	@ 0xe0
 8006ae6:	045b      	lsls	r3, r3, #17
 8006ae8:	4013      	ands	r3, r2
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b002      	add	sp, #8
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <LL_ADC_SetSamplingTimeCommonChannels>:
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	60f8      	str	r0, [r7, #12]
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	695b      	ldr	r3, [r3, #20]
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	2104      	movs	r1, #4
 8006b06:	400a      	ands	r2, r1
 8006b08:	2107      	movs	r1, #7
 8006b0a:	4091      	lsls	r1, r2
 8006b0c:	000a      	movs	r2, r1
 8006b0e:	43d2      	mvns	r2, r2
 8006b10:	401a      	ands	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	2104      	movs	r1, #4
 8006b16:	400b      	ands	r3, r1
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4099      	lsls	r1, r3
 8006b1c:	000b      	movs	r3, r1
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	615a      	str	r2, [r3, #20]
 8006b24:	46c0      	nop			@ (mov r8, r8)
 8006b26:	46bd      	mov	sp, r7
 8006b28:	b004      	add	sp, #16
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <LL_ADC_GetSamplingTimeCommonChannels>:
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	400a      	ands	r2, r1
 8006b40:	2107      	movs	r1, #7
 8006b42:	4091      	lsls	r1, r2
 8006b44:	000a      	movs	r2, r1
 8006b46:	401a      	ands	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	2104      	movs	r1, #4
 8006b4c:	400b      	ands	r3, r1
 8006b4e:	40da      	lsrs	r2, r3
 8006b50:	0013      	movs	r3, r2
 8006b52:	0018      	movs	r0, r3
 8006b54:	46bd      	mov	sp, r7
 8006b56:	b002      	add	sp, #8
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <LL_ADC_REG_IsTriggerSourceSWStart>:
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b082      	sub	sp, #8
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	23c0      	movs	r3, #192	@ 0xc0
 8006b68:	011b      	lsls	r3, r3, #4
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e000      	b.n	8006b74 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	0018      	movs	r0, r3
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <LL_ADC_REG_SetSequencerRanks>:
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	211f      	movs	r1, #31
 8006b90:	400a      	ands	r2, r1
 8006b92:	210f      	movs	r1, #15
 8006b94:	4091      	lsls	r1, r2
 8006b96:	000a      	movs	r2, r1
 8006b98:	43d2      	mvns	r2, r2
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	0e9b      	lsrs	r3, r3, #26
 8006ba0:	210f      	movs	r1, #15
 8006ba2:	4019      	ands	r1, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	201f      	movs	r0, #31
 8006ba8:	4003      	ands	r3, r0
 8006baa:	4099      	lsls	r1, r3
 8006bac:	000b      	movs	r3, r1
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bb4:	46c0      	nop			@ (mov r8, r8)
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b004      	add	sp, #16
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <LL_ADC_REG_SetSequencerChAdd>:
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	035b      	lsls	r3, r3, #13
 8006bce:	0b5b      	lsrs	r3, r3, #13
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bd6:	46c0      	nop			@ (mov r8, r8)
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	b002      	add	sp, #8
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <LL_ADC_REG_SetSequencerChRem>:
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	6039      	str	r1, [r7, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	0352      	lsls	r2, r2, #13
 8006bf0:	0b52      	lsrs	r2, r2, #13
 8006bf2:	43d2      	mvns	r2, r2
 8006bf4:	401a      	ands	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	629a      	str	r2, [r3, #40]	@ 0x28
 8006bfa:	46c0      	nop			@ (mov r8, r8)
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <LL_ADC_SetChannelSamplingTime>:
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	0212      	lsls	r2, r2, #8
 8006c18:	43d2      	mvns	r2, r2
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	6879      	ldr	r1, [r7, #4]
 8006c22:	400b      	ands	r3, r1
 8006c24:	4904      	ldr	r1, [pc, #16]	@ (8006c38 <LL_ADC_SetChannelSamplingTime+0x34>)
 8006c26:	400b      	ands	r3, r1
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	615a      	str	r2, [r3, #20]
 8006c2e:	46c0      	nop			@ (mov r8, r8)
 8006c30:	46bd      	mov	sp, r7
 8006c32:	b004      	add	sp, #16
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	46c0      	nop			@ (mov r8, r8)
 8006c38:	07ffff00 	.word	0x07ffff00

08006c3c <LL_ADC_EnableInternalRegulator>:
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	4a05      	ldr	r2, [pc, #20]	@ (8006c60 <LL_ADC_EnableInternalRegulator+0x24>)
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	2280      	movs	r2, #128	@ 0x80
 8006c4e:	0552      	lsls	r2, r2, #21
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	609a      	str	r2, [r3, #8]
 8006c56:	46c0      	nop			@ (mov r8, r8)
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	b002      	add	sp, #8
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	46c0      	nop			@ (mov r8, r8)
 8006c60:	6fffffe8 	.word	0x6fffffe8

08006c64 <LL_ADC_IsInternalRegulatorEnabled>:
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689a      	ldr	r2, [r3, #8]
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	055b      	lsls	r3, r3, #21
 8006c74:	401a      	ands	r2, r3
 8006c76:	2380      	movs	r3, #128	@ 0x80
 8006c78:	055b      	lsls	r3, r3, #21
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d101      	bne.n	8006c82 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e000      	b.n	8006c84 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8006c82:	2300      	movs	r3, #0
 8006c84:	0018      	movs	r0, r3
 8006c86:	46bd      	mov	sp, r7
 8006c88:	b002      	add	sp, #8
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <LL_ADC_Enable>:
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	4a04      	ldr	r2, [pc, #16]	@ (8006cac <LL_ADC_Enable+0x20>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	609a      	str	r2, [r3, #8]
 8006ca4:	46c0      	nop			@ (mov r8, r8)
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	b002      	add	sp, #8
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	7fffffe8 	.word	0x7fffffe8

08006cb0 <LL_ADC_Disable>:
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	4a04      	ldr	r2, [pc, #16]	@ (8006cd0 <LL_ADC_Disable+0x20>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	431a      	orrs	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	609a      	str	r2, [r3, #8]
 8006cc8:	46c0      	nop			@ (mov r8, r8)
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b002      	add	sp, #8
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	7fffffe8 	.word	0x7fffffe8

08006cd4 <LL_ADC_IsEnabled>:
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <LL_ADC_IsEnabled+0x18>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <LL_ADC_IsEnabled+0x1a>
 8006cec:	2300      	movs	r3, #0
 8006cee:	0018      	movs	r0, r3
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	b002      	add	sp, #8
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <LL_ADC_IsDisableOngoing>:
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2202      	movs	r2, #2
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d101      	bne.n	8006d0e <LL_ADC_IsDisableOngoing+0x18>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <LL_ADC_IsDisableOngoing+0x1a>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b002      	add	sp, #8
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <LL_ADC_REG_StartConversion>:
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <LL_ADC_REG_StartConversion+0x20>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	2204      	movs	r2, #4
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	609a      	str	r2, [r3, #8]
 8006d30:	46c0      	nop			@ (mov r8, r8)
 8006d32:	46bd      	mov	sp, r7
 8006d34:	b002      	add	sp, #8
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	7fffffe8 	.word	0x7fffffe8

08006d3c <LL_ADC_REG_StopConversion>:
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	4a04      	ldr	r2, [pc, #16]	@ (8006d5c <LL_ADC_REG_StopConversion+0x20>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	431a      	orrs	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	609a      	str	r2, [r3, #8]
 8006d54:	46c0      	nop			@ (mov r8, r8)
 8006d56:	46bd      	mov	sp, r7
 8006d58:	b002      	add	sp, #8
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	7fffffe8 	.word	0x7fffffe8

08006d60 <LL_ADC_REG_IsConversionOngoing>:
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	2204      	movs	r2, #4
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d101      	bne.n	8006d78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006d74:	2301      	movs	r3, #1
 8006d76:	e000      	b.n	8006d7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	b002      	add	sp, #8
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <HAL_ADC_Init>:
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	231f      	movs	r3, #31
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
 8006d94:	2300      	movs	r3, #0
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	60fb      	str	r3, [r7, #12]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_ADC_Init+0x26>
 8006da6:	2301      	movs	r3, #1
 8006da8:	e19f      	b.n	80070ea <HAL_ADC_Init+0x366>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d12a      	bne.n	8006e08 <HAL_ADC_Init+0x84>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4acf      	ldr	r2, [pc, #828]	@ (80070f4 <HAL_ADC_Init+0x370>)
 8006db6:	665a      	str	r2, [r3, #100]	@ 0x64
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4acf      	ldr	r2, [pc, #828]	@ (80070f8 <HAL_ADC_Init+0x374>)
 8006dbc:	669a      	str	r2, [r3, #104]	@ 0x68
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4ace      	ldr	r2, [pc, #824]	@ (80070fc <HAL_ADC_Init+0x378>)
 8006dc2:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	4ace      	ldr	r2, [pc, #824]	@ (8007100 <HAL_ADC_Init+0x37c>)
 8006dc8:	671a      	str	r2, [r3, #112]	@ 0x70
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4acd      	ldr	r2, [pc, #820]	@ (8007104 <HAL_ADC_Init+0x380>)
 8006dce:	675a      	str	r2, [r3, #116]	@ 0x74
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4acd      	ldr	r2, [pc, #820]	@ (8007108 <HAL_ADC_Init+0x384>)
 8006dd4:	679a      	str	r2, [r3, #120]	@ 0x78
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4acc      	ldr	r2, [pc, #816]	@ (800710c <HAL_ADC_Init+0x388>)
 8006dda:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2280      	movs	r2, #128	@ 0x80
 8006de0:	589b      	ldr	r3, [r3, r2]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <HAL_ADC_Init+0x6a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2180      	movs	r1, #128	@ 0x80
 8006dea:	4ac9      	ldr	r2, [pc, #804]	@ (8007110 <HAL_ADC_Init+0x38c>)
 8006dec:	505a      	str	r2, [r3, r1]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2280      	movs	r2, #128	@ 0x80
 8006df2:	589b      	ldr	r3, [r3, r2]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	0010      	movs	r0, r2
 8006df8:	4798      	blx	r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2254      	movs	r2, #84	@ 0x54
 8006e04:	2100      	movs	r1, #0
 8006e06:	5499      	strb	r1, [r3, r2]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff ff29 	bl	8006c64 <LL_ADC_IsInternalRegulatorEnabled>
 8006e12:	1e03      	subs	r3, r0, #0
 8006e14:	d115      	bne.n	8006e42 <HAL_ADC_Init+0xbe>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f7ff ff0e 	bl	8006c3c <LL_ADC_EnableInternalRegulator>
 8006e20:	4bbc      	ldr	r3, [pc, #752]	@ (8007114 <HAL_ADC_Init+0x390>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	49bc      	ldr	r1, [pc, #752]	@ (8007118 <HAL_ADC_Init+0x394>)
 8006e26:	0018      	movs	r0, r3
 8006e28:	f7f9 f96e 	bl	8000108 <__udivsi3>
 8006e2c:	0003      	movs	r3, r0
 8006e2e:	3301      	adds	r3, #1
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e002      	b.n	8006e3c <HAL_ADC_Init+0xb8>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f9      	bne.n	8006e36 <HAL_ADC_Init+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	0018      	movs	r0, r3
 8006e48:	f7ff ff0c 	bl	8006c64 <LL_ADC_IsInternalRegulatorEnabled>
 8006e4c:	1e03      	subs	r3, r0, #0
 8006e4e:	d10f      	bne.n	8006e70 <HAL_ADC_Init+0xec>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e54:	2210      	movs	r2, #16
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e60:	2201      	movs	r2, #1
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e68:	231f      	movs	r3, #31
 8006e6a:	18fb      	adds	r3, r7, r3
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f7ff ff73 	bl	8006d60 <LL_ADC_REG_IsConversionOngoing>
 8006e7a:	0003      	movs	r3, r0
 8006e7c:	613b      	str	r3, [r7, #16]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e82:	2210      	movs	r2, #16
 8006e84:	4013      	ands	r3, r2
 8006e86:	d000      	beq.n	8006e8a <HAL_ADC_Init+0x106>
 8006e88:	e122      	b.n	80070d0 <HAL_ADC_Init+0x34c>
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d000      	beq.n	8006e92 <HAL_ADC_Init+0x10e>
 8006e90:	e11e      	b.n	80070d0 <HAL_ADC_Init+0x34c>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e96:	4aa1      	ldr	r2, [pc, #644]	@ (800711c <HAL_ADC_Init+0x398>)
 8006e98:	4013      	ands	r3, r2
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	431a      	orrs	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	0018      	movs	r0, r3
 8006ea8:	f7ff ff14 	bl	8006cd4 <LL_ADC_IsEnabled>
 8006eac:	1e03      	subs	r3, r0, #0
 8006eae:	d000      	beq.n	8006eb2 <HAL_ADC_Init+0x12e>
 8006eb0:	e0ad      	b.n	800700e <HAL_ADC_Init+0x28a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7e1b      	ldrb	r3, [r3, #24]
 8006eba:	039b      	lsls	r3, r3, #14
 8006ebc:	431a      	orrs	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	7e5b      	ldrb	r3, [r3, #25]
 8006ec2:	03db      	lsls	r3, r3, #15
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7e9b      	ldrb	r3, [r3, #26]
 8006eca:	035b      	lsls	r3, r3, #13
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <HAL_ADC_Init+0x158>
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	015b      	lsls	r3, r3, #5
 8006eda:	e000      	b.n	8006ede <HAL_ADC_Init+0x15a>
 8006edc:	2300      	movs	r3, #0
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	da04      	bge.n	8006ef8 <HAL_ADC_Init+0x174>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	e001      	b.n	8006efc <HAL_ADC_Init+0x178>
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	039b      	lsls	r3, r3, #14
 8006efc:	431a      	orrs	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	212c      	movs	r1, #44	@ 0x2c
 8006f02:	5c5b      	ldrb	r3, [r3, r1]
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	4313      	orrs	r3, r2
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2220      	movs	r2, #32
 8006f12:	5c9b      	ldrb	r3, [r3, r2]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d115      	bne.n	8006f44 <HAL_ADC_Init+0x1c0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	7e9b      	ldrb	r3, [r3, #26]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d105      	bne.n	8006f2c <HAL_ADC_Init+0x1a8>
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	2280      	movs	r2, #128	@ 0x80
 8006f24:	0252      	lsls	r2, r2, #9
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
 8006f2a:	e00b      	b.n	8006f44 <HAL_ADC_Init+0x1c0>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f30:	2220      	movs	r2, #32
 8006f32:	431a      	orrs	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00a      	beq.n	8006f62 <HAL_ADC_Init+0x1de>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f50:	23e0      	movs	r3, #224	@ 0xe0
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	401a      	ands	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	4a6d      	ldr	r2, [pc, #436]	@ (8007120 <HAL_ADC_Init+0x39c>)
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	0019      	movs	r1, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69ba      	ldr	r2, [r7, #24]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	60da      	str	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	0f9b      	lsrs	r3, r3, #30
 8006f7e:	079a      	lsls	r2, r3, #30
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f84:	4313      	orrs	r3, r2
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	223c      	movs	r2, #60	@ 0x3c
 8006f90:	5c9b      	ldrb	r3, [r3, r2]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d111      	bne.n	8006fba <HAL_ADC_Init+0x236>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	0f9b      	lsrs	r3, r3, #30
 8006f9c:	079a      	lsls	r2, r3, #30
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa2:	431a      	orrs	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fa8:	431a      	orrs	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	617b      	str	r3, [r7, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	4a58      	ldr	r2, [pc, #352]	@ (8007124 <HAL_ADC_Init+0x3a0>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	0019      	movs	r1, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	430a      	orrs	r2, r1
 8006fce:	611a      	str	r2, [r3, #16]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	23c0      	movs	r3, #192	@ 0xc0
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d018      	beq.n	800700e <HAL_ADC_Init+0x28a>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	2380      	movs	r3, #128	@ 0x80
 8006fe2:	05db      	lsls	r3, r3, #23
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d012      	beq.n	800700e <HAL_ADC_Init+0x28a>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	2380      	movs	r3, #128	@ 0x80
 8006fee:	061b      	lsls	r3, r3, #24
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d00c      	beq.n	800700e <HAL_ADC_Init+0x28a>
 8006ff4:	4b4c      	ldr	r3, [pc, #304]	@ (8007128 <HAL_ADC_Init+0x3a4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a4c      	ldr	r2, [pc, #304]	@ (800712c <HAL_ADC_Init+0x3a8>)
 8006ffa:	4013      	ands	r3, r2
 8006ffc:	0019      	movs	r1, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	23f0      	movs	r3, #240	@ 0xf0
 8007004:	039b      	lsls	r3, r3, #14
 8007006:	401a      	ands	r2, r3
 8007008:	4b47      	ldr	r3, [pc, #284]	@ (8007128 <HAL_ADC_Init+0x3a4>)
 800700a:	430a      	orrs	r2, r1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6818      	ldr	r0, [r3, #0]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007016:	001a      	movs	r2, r3
 8007018:	2100      	movs	r1, #0
 800701a:	f7ff fd6a 	bl	8006af2 <LL_ADC_SetSamplingTimeCommonChannels>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	4942      	ldr	r1, [pc, #264]	@ (8007130 <HAL_ADC_Init+0x3ac>)
 8007028:	001a      	movs	r2, r3
 800702a:	f7ff fd62 	bl	8006af2 <LL_ADC_SetSamplingTimeCommonChannels>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d109      	bne.n	800704a <HAL_ADC_Init+0x2c6>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2110      	movs	r1, #16
 8007042:	4249      	negs	r1, r1
 8007044:	430a      	orrs	r2, r1
 8007046:	629a      	str	r2, [r3, #40]	@ 0x28
 8007048:	e018      	b.n	800707c <HAL_ADC_Init+0x2f8>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	691a      	ldr	r2, [r3, #16]
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	039b      	lsls	r3, r3, #14
 8007052:	429a      	cmp	r2, r3
 8007054:	d112      	bne.n	800707c <HAL_ADC_Init+0x2f8>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	3b01      	subs	r3, #1
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	221c      	movs	r2, #28
 8007066:	4013      	ands	r3, r2
 8007068:	2210      	movs	r2, #16
 800706a:	4252      	negs	r2, r2
 800706c:	409a      	lsls	r2, r3
 800706e:	0011      	movs	r1, r2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	629a      	str	r2, [r3, #40]	@ 0x28
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2100      	movs	r1, #0
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff fd52 	bl	8006b2c <LL_ADC_GetSamplingTimeCommonChannels>
 8007088:	0002      	movs	r2, r0
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800708e:	429a      	cmp	r2, r3
 8007090:	d10b      	bne.n	80070aa <HAL_ADC_Init+0x326>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800709c:	2203      	movs	r2, #3
 800709e:	4393      	bics	r3, r2
 80070a0:	2201      	movs	r2, #1
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80070a8:	e01c      	b.n	80070e4 <HAL_ADC_Init+0x360>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ae:	2212      	movs	r2, #18
 80070b0:	4393      	bics	r3, r2
 80070b2:	2210      	movs	r2, #16
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070be:	2201      	movs	r2, #1
 80070c0:	431a      	orrs	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070c6:	231f      	movs	r3, #31
 80070c8:	18fb      	adds	r3, r7, r3
 80070ca:	2201      	movs	r2, #1
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	e009      	b.n	80070e4 <HAL_ADC_Init+0x360>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070d4:	2210      	movs	r2, #16
 80070d6:	431a      	orrs	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	659a      	str	r2, [r3, #88]	@ 0x58
 80070dc:	231f      	movs	r3, #31
 80070de:	18fb      	adds	r3, r7, r3
 80070e0:	2201      	movs	r2, #1
 80070e2:	701a      	strb	r2, [r3, #0]
 80070e4:	231f      	movs	r3, #31
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b008      	add	sp, #32
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			@ (mov r8, r8)
 80070f4:	0800744d 	.word	0x0800744d
 80070f8:	0800745d 	.word	0x0800745d
 80070fc:	0800746d 	.word	0x0800746d
 8007100:	0800747d 	.word	0x0800747d
 8007104:	08007ed5 	.word	0x08007ed5
 8007108:	08007ee5 	.word	0x08007ee5
 800710c:	08007ef5 	.word	0x08007ef5
 8007110:	0800580d 	.word	0x0800580d
 8007114:	2000044c 	.word	0x2000044c
 8007118:	00030d40 	.word	0x00030d40
 800711c:	fffffefd 	.word	0xfffffefd
 8007120:	ffde0201 	.word	0xffde0201
 8007124:	1ffffc02 	.word	0x1ffffc02
 8007128:	40012708 	.word	0x40012708
 800712c:	ffc3ffff 	.word	0xffc3ffff
 8007130:	07ffff04 	.word	0x07ffff04

08007134 <HAL_ADC_RegisterCallback>:
 8007134:	b580      	push	{r7, lr}
 8007136:	b086      	sub	sp, #24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	230b      	movs	r3, #11
 8007140:	18fb      	adds	r3, r7, r3
 8007142:	1c0a      	adds	r2, r1, #0
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	2317      	movs	r3, #23
 8007148:	18fb      	adds	r3, r7, r3
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d107      	bne.n	8007164 <HAL_ADC_RegisterCallback+0x30>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007158:	2210      	movs	r2, #16
 800715a:	431a      	orrs	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007160:	2301      	movs	r3, #1
 8007162:	e06d      	b.n	8007240 <HAL_ADC_RegisterCallback+0x10c>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007168:	2201      	movs	r2, #1
 800716a:	4013      	ands	r3, r2
 800716c:	d03a      	beq.n	80071e4 <HAL_ADC_RegisterCallback+0xb0>
 800716e:	230b      	movs	r3, #11
 8007170:	18fb      	adds	r3, r7, r3
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b0a      	cmp	r3, #10
 8007176:	d82a      	bhi.n	80071ce <HAL_ADC_RegisterCallback+0x9a>
 8007178:	009a      	lsls	r2, r3, #2
 800717a:	4b33      	ldr	r3, [pc, #204]	@ (8007248 <HAL_ADC_RegisterCallback+0x114>)
 800717c:	18d3      	adds	r3, r2, r3
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	469f      	mov	pc, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	687a      	ldr	r2, [r7, #4]
 8007186:	665a      	str	r2, [r3, #100]	@ 0x64
 8007188:	e057      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	669a      	str	r2, [r3, #104]	@ 0x68
 8007190:	e053      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	66da      	str	r2, [r3, #108]	@ 0x6c
 8007198:	e04f      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	671a      	str	r2, [r3, #112]	@ 0x70
 80071a0:	e04b      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	675a      	str	r2, [r3, #116]	@ 0x74
 80071a8:	e047      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	679a      	str	r2, [r3, #120]	@ 0x78
 80071b0:	e043      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80071b8:	e03f      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2180      	movs	r1, #128	@ 0x80
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	505a      	str	r2, [r3, r1]
 80071c2:	e03a      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2184      	movs	r1, #132	@ 0x84
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	505a      	str	r2, [r3, r1]
 80071cc:	e035      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071d2:	2210      	movs	r2, #16
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071da:	2317      	movs	r3, #23
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	2201      	movs	r2, #1
 80071e0:	701a      	strb	r2, [r3, #0]
 80071e2:	e02a      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d11c      	bne.n	8007226 <HAL_ADC_RegisterCallback+0xf2>
 80071ec:	230b      	movs	r3, #11
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	2b09      	cmp	r3, #9
 80071f4:	d002      	beq.n	80071fc <HAL_ADC_RegisterCallback+0xc8>
 80071f6:	2b0a      	cmp	r3, #10
 80071f8:	d005      	beq.n	8007206 <HAL_ADC_RegisterCallback+0xd2>
 80071fa:	e009      	b.n	8007210 <HAL_ADC_RegisterCallback+0xdc>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2180      	movs	r1, #128	@ 0x80
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	505a      	str	r2, [r3, r1]
 8007204:	e019      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2184      	movs	r1, #132	@ 0x84
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	505a      	str	r2, [r3, r1]
 800720e:	e014      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007214:	2210      	movs	r2, #16
 8007216:	431a      	orrs	r2, r3
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800721c:	2317      	movs	r3, #23
 800721e:	18fb      	adds	r3, r7, r3
 8007220:	2201      	movs	r2, #1
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	e009      	b.n	800723a <HAL_ADC_RegisterCallback+0x106>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800722a:	2210      	movs	r2, #16
 800722c:	431a      	orrs	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007232:	2317      	movs	r3, #23
 8007234:	18fb      	adds	r3, r7, r3
 8007236:	2201      	movs	r2, #1
 8007238:	701a      	strb	r2, [r3, #0]
 800723a:	2317      	movs	r3, #23
 800723c:	18fb      	adds	r3, r7, r3
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	0018      	movs	r0, r3
 8007242:	46bd      	mov	sp, r7
 8007244:	b006      	add	sp, #24
 8007246:	bd80      	pop	{r7, pc}
 8007248:	0800e9c4 	.word	0x0800e9c4

0800724c <HAL_ADC_Start_DMA>:
 800724c:	b5b0      	push	{r4, r5, r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	0018      	movs	r0, r3
 800725e:	f7ff fd7f 	bl	8006d60 <LL_ADC_REG_IsConversionOngoing>
 8007262:	1e03      	subs	r3, r0, #0
 8007264:	d16c      	bne.n	8007340 <HAL_ADC_Start_DMA+0xf4>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2254      	movs	r2, #84	@ 0x54
 800726a:	5c9b      	ldrb	r3, [r3, r2]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_ADC_Start_DMA+0x28>
 8007270:	2302      	movs	r3, #2
 8007272:	e06c      	b.n	800734e <HAL_ADC_Start_DMA+0x102>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2254      	movs	r2, #84	@ 0x54
 8007278:	2101      	movs	r1, #1
 800727a:	5499      	strb	r1, [r3, r2]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	2201      	movs	r2, #1
 8007284:	4013      	ands	r3, r2
 8007286:	d113      	bne.n	80072b0 <HAL_ADC_Start_DMA+0x64>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	0018      	movs	r0, r3
 800728e:	f7ff fd21 	bl	8006cd4 <LL_ADC_IsEnabled>
 8007292:	1e03      	subs	r3, r0, #0
 8007294:	d004      	beq.n	80072a0 <HAL_ADC_Start_DMA+0x54>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	0018      	movs	r0, r3
 800729c:	f7ff fd08 	bl	8006cb0 <LL_ADC_Disable>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68da      	ldr	r2, [r3, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2101      	movs	r1, #1
 80072ac:	430a      	orrs	r2, r1
 80072ae:	60da      	str	r2, [r3, #12]
 80072b0:	2517      	movs	r5, #23
 80072b2:	197c      	adds	r4, r7, r5
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	0018      	movs	r0, r3
 80072b8:	f000 fb02 	bl	80078c0 <ADC_Enable>
 80072bc:	0003      	movs	r3, r0
 80072be:	7023      	strb	r3, [r4, #0]
 80072c0:	002c      	movs	r4, r5
 80072c2:	193b      	adds	r3, r7, r4
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d13e      	bne.n	8007348 <HAL_ADC_Start_DMA+0xfc>
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072ce:	4a22      	ldr	r2, [pc, #136]	@ (8007358 <HAL_ADC_Start_DMA+0x10c>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	2280      	movs	r2, #128	@ 0x80
 80072d4:	0052      	lsls	r2, r2, #1
 80072d6:	431a      	orrs	r2, r3
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	659a      	str	r2, [r3, #88]	@ 0x58
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	4a1d      	ldr	r2, [pc, #116]	@ (800735c <HAL_ADC_Start_DMA+0x110>)
 80072e8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ee:	4a1c      	ldr	r2, [pc, #112]	@ (8007360 <HAL_ADC_Start_DMA+0x114>)
 80072f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007364 <HAL_ADC_Start_DMA+0x118>)
 80072f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	221c      	movs	r2, #28
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2254      	movs	r2, #84	@ 0x54
 8007306:	2100      	movs	r1, #0
 8007308:	5499      	strb	r1, [r3, r2]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2110      	movs	r1, #16
 8007316:	430a      	orrs	r2, r1
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3340      	adds	r3, #64	@ 0x40
 8007324:	0019      	movs	r1, r3
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	193c      	adds	r4, r7, r4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f000 ff84 	bl	8008238 <HAL_DMA_Start_IT>
 8007330:	0003      	movs	r3, r0
 8007332:	7023      	strb	r3, [r4, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	0018      	movs	r0, r3
 800733a:	f7ff fced 	bl	8006d18 <LL_ADC_REG_StartConversion>
 800733e:	e003      	b.n	8007348 <HAL_ADC_Start_DMA+0xfc>
 8007340:	2317      	movs	r3, #23
 8007342:	18fb      	adds	r3, r7, r3
 8007344:	2202      	movs	r2, #2
 8007346:	701a      	strb	r2, [r3, #0]
 8007348:	2317      	movs	r3, #23
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	0018      	movs	r0, r3
 8007350:	46bd      	mov	sp, r7
 8007352:	b006      	add	sp, #24
 8007354:	bdb0      	pop	{r4, r5, r7, pc}
 8007356:	46c0      	nop			@ (mov r8, r8)
 8007358:	fffff0fe 	.word	0xfffff0fe
 800735c:	08007a89 	.word	0x08007a89
 8007360:	08007b55 	.word	0x08007b55
 8007364:	08007b75 	.word	0x08007b75

08007368 <HAL_ADC_Stop_DMA>:
 8007368:	b5b0      	push	{r4, r5, r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2254      	movs	r2, #84	@ 0x54
 8007374:	5c9b      	ldrb	r3, [r3, r2]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_ADC_Stop_DMA+0x16>
 800737a:	2302      	movs	r3, #2
 800737c:	e05f      	b.n	800743e <HAL_ADC_Stop_DMA+0xd6>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2254      	movs	r2, #84	@ 0x54
 8007382:	2101      	movs	r1, #1
 8007384:	5499      	strb	r1, [r3, r2]
 8007386:	250f      	movs	r5, #15
 8007388:	197c      	adds	r4, r7, r5
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	0018      	movs	r0, r3
 800738e:	f000 fa55 	bl	800783c <ADC_ConversionStop>
 8007392:	0003      	movs	r3, r0
 8007394:	7023      	strb	r3, [r4, #0]
 8007396:	0029      	movs	r1, r5
 8007398:	187b      	adds	r3, r7, r1
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d147      	bne.n	8007430 <HAL_ADC_Stop_DMA+0xc8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073a4:	2225      	movs	r2, #37	@ 0x25
 80073a6:	5c9b      	ldrb	r3, [r3, r2]
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d112      	bne.n	80073d4 <HAL_ADC_Stop_DMA+0x6c>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b2:	000d      	movs	r5, r1
 80073b4:	187c      	adds	r4, r7, r1
 80073b6:	0018      	movs	r0, r3
 80073b8:	f000 ffc4 	bl	8008344 <HAL_DMA_Abort>
 80073bc:	0003      	movs	r3, r0
 80073be:	7023      	strb	r3, [r4, #0]
 80073c0:	197b      	adds	r3, r7, r5
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_ADC_Stop_DMA+0x6c>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073cc:	2240      	movs	r2, #64	@ 0x40
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	659a      	str	r2, [r3, #88]	@ 0x58
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2110      	movs	r1, #16
 80073e0:	438a      	bics	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
 80073e4:	220f      	movs	r2, #15
 80073e6:	18bb      	adds	r3, r7, r2
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d107      	bne.n	80073fe <HAL_ADC_Stop_DMA+0x96>
 80073ee:	18bc      	adds	r4, r7, r2
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	0018      	movs	r0, r3
 80073f4:	f000 faea 	bl	80079cc <ADC_Disable>
 80073f8:	0003      	movs	r3, r0
 80073fa:	7023      	strb	r3, [r4, #0]
 80073fc:	e003      	b.n	8007406 <HAL_ADC_Stop_DMA+0x9e>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0018      	movs	r0, r3
 8007402:	f000 fae3 	bl	80079cc <ADC_Disable>
 8007406:	230f      	movs	r3, #15
 8007408:	18fb      	adds	r3, r7, r3
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d107      	bne.n	8007420 <HAL_ADC_Stop_DMA+0xb8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007414:	4a0c      	ldr	r2, [pc, #48]	@ (8007448 <HAL_ADC_Stop_DMA+0xe0>)
 8007416:	4013      	ands	r3, r2
 8007418:	2201      	movs	r2, #1
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	659a      	str	r2, [r3, #88]	@ 0x58
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2101      	movs	r1, #1
 800742c:	438a      	bics	r2, r1
 800742e:	60da      	str	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2254      	movs	r2, #84	@ 0x54
 8007434:	2100      	movs	r1, #0
 8007436:	5499      	strb	r1, [r3, r2]
 8007438:	230f      	movs	r3, #15
 800743a:	18fb      	adds	r3, r7, r3
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	0018      	movs	r0, r3
 8007440:	46bd      	mov	sp, r7
 8007442:	b004      	add	sp, #16
 8007444:	bdb0      	pop	{r4, r5, r7, pc}
 8007446:	46c0      	nop			@ (mov r8, r8)
 8007448:	fffffefe 	.word	0xfffffefe

0800744c <HAL_ADC_ConvCpltCallback>:
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	46c0      	nop			@ (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	b002      	add	sp, #8
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_ADC_ConvHalfCpltCallback>:
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	46c0      	nop			@ (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_ADC_LevelOutOfWindowCallback>:
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	46c0      	nop			@ (mov r8, r8)
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_ADC_ErrorCallback>:
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	46c0      	nop			@ (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_ADC_ConfigChannel>:
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
 8007496:	2317      	movs	r3, #23
 8007498:	18fb      	adds	r3, r7, r3
 800749a:	2200      	movs	r2, #0
 800749c:	701a      	strb	r2, [r3, #0]
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2254      	movs	r2, #84	@ 0x54
 80074a6:	5c9b      	ldrb	r3, [r3, r2]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d101      	bne.n	80074b0 <HAL_ADC_ConfigChannel+0x24>
 80074ac:	2302      	movs	r3, #2
 80074ae:	e1c0      	b.n	8007832 <HAL_ADC_ConfigChannel+0x3a6>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2254      	movs	r2, #84	@ 0x54
 80074b4:	2101      	movs	r1, #1
 80074b6:	5499      	strb	r1, [r3, r2]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	0018      	movs	r0, r3
 80074be:	f7ff fc4f 	bl	8006d60 <LL_ADC_REG_IsConversionOngoing>
 80074c2:	1e03      	subs	r3, r0, #0
 80074c4:	d000      	beq.n	80074c8 <HAL_ADC_ConfigChannel+0x3c>
 80074c6:	e1a3      	b.n	8007810 <HAL_ADC_ConfigChannel+0x384>
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d100      	bne.n	80074d2 <HAL_ADC_ConfigChannel+0x46>
 80074d0:	e143      	b.n	800775a <HAL_ADC_ConfigChannel+0x2ce>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691a      	ldr	r2, [r3, #16]
 80074d6:	2380      	movs	r3, #128	@ 0x80
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	429a      	cmp	r2, r3
 80074dc:	d004      	beq.n	80074e8 <HAL_ADC_ConfigChannel+0x5c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	4ac1      	ldr	r2, [pc, #772]	@ (80077e8 <HAL_ADC_ConfigChannel+0x35c>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_ADC_ConfigChannel+0x6e>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681a      	ldr	r2, [r3, #0]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	0019      	movs	r1, r3
 80074f2:	0010      	movs	r0, r2
 80074f4:	f7ff fb62 	bl	8006bbc <LL_ADC_REG_SetSequencerChAdd>
 80074f8:	e0c9      	b.n	800768e <HAL_ADC_ConfigChannel+0x202>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	211f      	movs	r1, #31
 8007504:	400b      	ands	r3, r1
 8007506:	210f      	movs	r1, #15
 8007508:	4099      	lsls	r1, r3
 800750a:	000b      	movs	r3, r1
 800750c:	43db      	mvns	r3, r3
 800750e:	4013      	ands	r3, r2
 8007510:	0019      	movs	r1, r3
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	035b      	lsls	r3, r3, #13
 8007518:	0b5b      	lsrs	r3, r3, #13
 800751a:	d105      	bne.n	8007528 <HAL_ADC_ConfigChannel+0x9c>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	0e9b      	lsrs	r3, r3, #26
 8007522:	221f      	movs	r2, #31
 8007524:	4013      	ands	r3, r2
 8007526:	e098      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2201      	movs	r2, #1
 800752e:	4013      	ands	r3, r2
 8007530:	d000      	beq.n	8007534 <HAL_ADC_ConfigChannel+0xa8>
 8007532:	e091      	b.n	8007658 <HAL_ADC_ConfigChannel+0x1cc>
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2202      	movs	r2, #2
 800753a:	4013      	ands	r3, r2
 800753c:	d000      	beq.n	8007540 <HAL_ADC_ConfigChannel+0xb4>
 800753e:	e089      	b.n	8007654 <HAL_ADC_ConfigChannel+0x1c8>
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2204      	movs	r2, #4
 8007546:	4013      	ands	r3, r2
 8007548:	d000      	beq.n	800754c <HAL_ADC_ConfigChannel+0xc0>
 800754a:	e081      	b.n	8007650 <HAL_ADC_ConfigChannel+0x1c4>
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2208      	movs	r2, #8
 8007552:	4013      	ands	r3, r2
 8007554:	d000      	beq.n	8007558 <HAL_ADC_ConfigChannel+0xcc>
 8007556:	e079      	b.n	800764c <HAL_ADC_ConfigChannel+0x1c0>
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2210      	movs	r2, #16
 800755e:	4013      	ands	r3, r2
 8007560:	d000      	beq.n	8007564 <HAL_ADC_ConfigChannel+0xd8>
 8007562:	e071      	b.n	8007648 <HAL_ADC_ConfigChannel+0x1bc>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2220      	movs	r2, #32
 800756a:	4013      	ands	r3, r2
 800756c:	d000      	beq.n	8007570 <HAL_ADC_ConfigChannel+0xe4>
 800756e:	e069      	b.n	8007644 <HAL_ADC_ConfigChannel+0x1b8>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2240      	movs	r2, #64	@ 0x40
 8007576:	4013      	ands	r3, r2
 8007578:	d000      	beq.n	800757c <HAL_ADC_ConfigChannel+0xf0>
 800757a:	e061      	b.n	8007640 <HAL_ADC_ConfigChannel+0x1b4>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2280      	movs	r2, #128	@ 0x80
 8007582:	4013      	ands	r3, r2
 8007584:	d000      	beq.n	8007588 <HAL_ADC_ConfigChannel+0xfc>
 8007586:	e059      	b.n	800763c <HAL_ADC_ConfigChannel+0x1b0>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	2380      	movs	r3, #128	@ 0x80
 800758e:	005b      	lsls	r3, r3, #1
 8007590:	4013      	ands	r3, r2
 8007592:	d151      	bne.n	8007638 <HAL_ADC_ConfigChannel+0x1ac>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	2380      	movs	r3, #128	@ 0x80
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	4013      	ands	r3, r2
 800759e:	d149      	bne.n	8007634 <HAL_ADC_ConfigChannel+0x1a8>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	2380      	movs	r3, #128	@ 0x80
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4013      	ands	r3, r2
 80075aa:	d141      	bne.n	8007630 <HAL_ADC_ConfigChannel+0x1a4>
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	2380      	movs	r3, #128	@ 0x80
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	4013      	ands	r3, r2
 80075b6:	d139      	bne.n	800762c <HAL_ADC_ConfigChannel+0x1a0>
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	015b      	lsls	r3, r3, #5
 80075c0:	4013      	ands	r3, r2
 80075c2:	d131      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x19c>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	2380      	movs	r3, #128	@ 0x80
 80075ca:	019b      	lsls	r3, r3, #6
 80075cc:	4013      	ands	r3, r2
 80075ce:	d129      	bne.n	8007624 <HAL_ADC_ConfigChannel+0x198>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	2380      	movs	r3, #128	@ 0x80
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	4013      	ands	r3, r2
 80075da:	d121      	bne.n	8007620 <HAL_ADC_ConfigChannel+0x194>
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	2380      	movs	r3, #128	@ 0x80
 80075e2:	021b      	lsls	r3, r3, #8
 80075e4:	4013      	ands	r3, r2
 80075e6:	d119      	bne.n	800761c <HAL_ADC_ConfigChannel+0x190>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	2380      	movs	r3, #128	@ 0x80
 80075ee:	025b      	lsls	r3, r3, #9
 80075f0:	4013      	ands	r3, r2
 80075f2:	d111      	bne.n	8007618 <HAL_ADC_ConfigChannel+0x18c>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	2380      	movs	r3, #128	@ 0x80
 80075fa:	029b      	lsls	r3, r3, #10
 80075fc:	4013      	ands	r3, r2
 80075fe:	d109      	bne.n	8007614 <HAL_ADC_ConfigChannel+0x188>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	02db      	lsls	r3, r3, #11
 8007608:	4013      	ands	r3, r2
 800760a:	d001      	beq.n	8007610 <HAL_ADC_ConfigChannel+0x184>
 800760c:	2312      	movs	r3, #18
 800760e:	e024      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007610:	2300      	movs	r3, #0
 8007612:	e022      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007614:	2311      	movs	r3, #17
 8007616:	e020      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007618:	2310      	movs	r3, #16
 800761a:	e01e      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 800761c:	230f      	movs	r3, #15
 800761e:	e01c      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007620:	230e      	movs	r3, #14
 8007622:	e01a      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007624:	230d      	movs	r3, #13
 8007626:	e018      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007628:	230c      	movs	r3, #12
 800762a:	e016      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 800762c:	230b      	movs	r3, #11
 800762e:	e014      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007630:	230a      	movs	r3, #10
 8007632:	e012      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007634:	2309      	movs	r3, #9
 8007636:	e010      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007638:	2308      	movs	r3, #8
 800763a:	e00e      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 800763c:	2307      	movs	r3, #7
 800763e:	e00c      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007640:	2306      	movs	r3, #6
 8007642:	e00a      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007644:	2305      	movs	r3, #5
 8007646:	e008      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007648:	2304      	movs	r3, #4
 800764a:	e006      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 800764c:	2303      	movs	r3, #3
 800764e:	e004      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007650:	2302      	movs	r3, #2
 8007652:	e002      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007654:	2301      	movs	r3, #1
 8007656:	e000      	b.n	800765a <HAL_ADC_ConfigChannel+0x1ce>
 8007658:	2300      	movs	r3, #0
 800765a:	683a      	ldr	r2, [r7, #0]
 800765c:	6852      	ldr	r2, [r2, #4]
 800765e:	201f      	movs	r0, #31
 8007660:	4002      	ands	r2, r0
 8007662:	4093      	lsls	r3, r2
 8007664:	000a      	movs	r2, r1
 8007666:	431a      	orrs	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	661a      	str	r2, [r3, #96]	@ 0x60
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	089b      	lsrs	r3, r3, #2
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	429a      	cmp	r2, r3
 800767a:	d808      	bhi.n	800768e <HAL_ADC_ConfigChannel+0x202>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6818      	ldr	r0, [r3, #0]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	6859      	ldr	r1, [r3, #4]
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	001a      	movs	r2, r3
 800768a:	f7ff fa77 	bl	8006b7c <LL_ADC_REG_SetSequencerRanks>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6818      	ldr	r0, [r3, #0]
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	6819      	ldr	r1, [r3, #0]
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	001a      	movs	r2, r3
 800769c:	f7ff fab2 	bl	8006c04 <LL_ADC_SetChannelSamplingTime>
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	db00      	blt.n	80076aa <HAL_ADC_ConfigChannel+0x21e>
 80076a8:	e0bc      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 80076aa:	4b50      	ldr	r3, [pc, #320]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 80076ac:	0018      	movs	r0, r3
 80076ae:	f7ff fa13 	bl	8006ad8 <LL_ADC_GetCommonPathInternalCh>
 80076b2:	0003      	movs	r3, r0
 80076b4:	613b      	str	r3, [r7, #16]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a4d      	ldr	r2, [pc, #308]	@ (80077f0 <HAL_ADC_ConfigChannel+0x364>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d122      	bne.n	8007706 <HAL_ADC_ConfigChannel+0x27a>
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	2380      	movs	r3, #128	@ 0x80
 80076c4:	041b      	lsls	r3, r3, #16
 80076c6:	4013      	ands	r3, r2
 80076c8:	d11d      	bne.n	8007706 <HAL_ADC_ConfigChannel+0x27a>
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2280      	movs	r2, #128	@ 0x80
 80076ce:	0412      	lsls	r2, r2, #16
 80076d0:	4313      	orrs	r3, r2
 80076d2:	4a46      	ldr	r2, [pc, #280]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 80076d4:	0019      	movs	r1, r3
 80076d6:	0010      	movs	r0, r2
 80076d8:	f7ff f9ea 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 80076dc:	4b45      	ldr	r3, [pc, #276]	@ (80077f4 <HAL_ADC_ConfigChannel+0x368>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4945      	ldr	r1, [pc, #276]	@ (80077f8 <HAL_ADC_ConfigChannel+0x36c>)
 80076e2:	0018      	movs	r0, r3
 80076e4:	f7f8 fd10 	bl	8000108 <__udivsi3>
 80076e8:	0003      	movs	r3, r0
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	0013      	movs	r3, r2
 80076ee:	005b      	lsls	r3, r3, #1
 80076f0:	189b      	adds	r3, r3, r2
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	60fb      	str	r3, [r7, #12]
 80076f6:	e002      	b.n	80076fe <HAL_ADC_ConfigChannel+0x272>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1f9      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x26c>
 8007704:	e08e      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a3c      	ldr	r2, [pc, #240]	@ (80077fc <HAL_ADC_ConfigChannel+0x370>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d10e      	bne.n	800772e <HAL_ADC_ConfigChannel+0x2a2>
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	2380      	movs	r3, #128	@ 0x80
 8007714:	045b      	lsls	r3, r3, #17
 8007716:	4013      	ands	r3, r2
 8007718:	d109      	bne.n	800772e <HAL_ADC_ConfigChannel+0x2a2>
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2280      	movs	r2, #128	@ 0x80
 800771e:	0452      	lsls	r2, r2, #17
 8007720:	4313      	orrs	r3, r2
 8007722:	4a32      	ldr	r2, [pc, #200]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 8007724:	0019      	movs	r1, r3
 8007726:	0010      	movs	r0, r2
 8007728:	f7ff f9c2 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 800772c:	e07a      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a33      	ldr	r2, [pc, #204]	@ (8007800 <HAL_ADC_ConfigChannel+0x374>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d000      	beq.n	800773a <HAL_ADC_ConfigChannel+0x2ae>
 8007738:	e074      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	2380      	movs	r3, #128	@ 0x80
 800773e:	03db      	lsls	r3, r3, #15
 8007740:	4013      	ands	r3, r2
 8007742:	d000      	beq.n	8007746 <HAL_ADC_ConfigChannel+0x2ba>
 8007744:	e06e      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2280      	movs	r2, #128	@ 0x80
 800774a:	03d2      	lsls	r2, r2, #15
 800774c:	4313      	orrs	r3, r2
 800774e:	4a27      	ldr	r2, [pc, #156]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 8007750:	0019      	movs	r1, r3
 8007752:	0010      	movs	r0, r2
 8007754:	f7ff f9ac 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 8007758:	e064      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	2380      	movs	r3, #128	@ 0x80
 8007760:	061b      	lsls	r3, r3, #24
 8007762:	429a      	cmp	r2, r3
 8007764:	d004      	beq.n	8007770 <HAL_ADC_ConfigChannel+0x2e4>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	4a1f      	ldr	r2, [pc, #124]	@ (80077e8 <HAL_ADC_ConfigChannel+0x35c>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d107      	bne.n	8007780 <HAL_ADC_ConfigChannel+0x2f4>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	0019      	movs	r1, r3
 800777a:	0010      	movs	r0, r2
 800777c:	f7ff fa2f 	bl	8006bde <LL_ADC_REG_SetSequencerChRem>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	da4d      	bge.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 8007788:	4b18      	ldr	r3, [pc, #96]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff f9a4 	bl	8006ad8 <LL_ADC_GetCommonPathInternalCh>
 8007790:	0003      	movs	r3, r0
 8007792:	613b      	str	r3, [r7, #16]
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a15      	ldr	r2, [pc, #84]	@ (80077f0 <HAL_ADC_ConfigChannel+0x364>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d108      	bne.n	80077b0 <HAL_ADC_ConfigChannel+0x324>
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4a18      	ldr	r2, [pc, #96]	@ (8007804 <HAL_ADC_ConfigChannel+0x378>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	4a11      	ldr	r2, [pc, #68]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 80077a6:	0019      	movs	r1, r3
 80077a8:	0010      	movs	r0, r2
 80077aa:	f7ff f981 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 80077ae:	e039      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a11      	ldr	r2, [pc, #68]	@ (80077fc <HAL_ADC_ConfigChannel+0x370>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d108      	bne.n	80077cc <HAL_ADC_ConfigChannel+0x340>
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4a12      	ldr	r2, [pc, #72]	@ (8007808 <HAL_ADC_ConfigChannel+0x37c>)
 80077be:	4013      	ands	r3, r2
 80077c0:	4a0a      	ldr	r2, [pc, #40]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 80077c2:	0019      	movs	r1, r3
 80077c4:	0010      	movs	r0, r2
 80077c6:	f7ff f973 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 80077ca:	e02b      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a0b      	ldr	r2, [pc, #44]	@ (8007800 <HAL_ADC_ConfigChannel+0x374>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d126      	bne.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	4a0c      	ldr	r2, [pc, #48]	@ (800780c <HAL_ADC_ConfigChannel+0x380>)
 80077da:	4013      	ands	r3, r2
 80077dc:	4a03      	ldr	r2, [pc, #12]	@ (80077ec <HAL_ADC_ConfigChannel+0x360>)
 80077de:	0019      	movs	r1, r3
 80077e0:	0010      	movs	r0, r2
 80077e2:	f7ff f965 	bl	8006ab0 <LL_ADC_SetCommonPathInternalCh>
 80077e6:	e01d      	b.n	8007824 <HAL_ADC_ConfigChannel+0x398>
 80077e8:	80000004 	.word	0x80000004
 80077ec:	40012708 	.word	0x40012708
 80077f0:	b0001000 	.word	0xb0001000
 80077f4:	2000044c 	.word	0x2000044c
 80077f8:	00030d40 	.word	0x00030d40
 80077fc:	b8004000 	.word	0xb8004000
 8007800:	b4002000 	.word	0xb4002000
 8007804:	ff7fffff 	.word	0xff7fffff
 8007808:	feffffff 	.word	0xfeffffff
 800780c:	ffbfffff 	.word	0xffbfffff
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007814:	2220      	movs	r2, #32
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	659a      	str	r2, [r3, #88]	@ 0x58
 800781c:	2317      	movs	r3, #23
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	2201      	movs	r2, #1
 8007822:	701a      	strb	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2254      	movs	r2, #84	@ 0x54
 8007828:	2100      	movs	r1, #0
 800782a:	5499      	strb	r1, [r3, r2]
 800782c:	2317      	movs	r3, #23
 800782e:	18fb      	adds	r3, r7, r3
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	0018      	movs	r0, r3
 8007834:	46bd      	mov	sp, r7
 8007836:	b006      	add	sp, #24
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			@ (mov r8, r8)

0800783c <ADC_ConversionStop>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0018      	movs	r0, r3
 800784a:	f7ff fa89 	bl	8006d60 <LL_ADC_REG_IsConversionOngoing>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d031      	beq.n	80078b6 <ADC_ConversionStop+0x7a>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	0018      	movs	r0, r3
 8007858:	f7ff fa4d 	bl	8006cf6 <LL_ADC_IsDisableOngoing>
 800785c:	1e03      	subs	r3, r0, #0
 800785e:	d104      	bne.n	800786a <ADC_ConversionStop+0x2e>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	0018      	movs	r0, r3
 8007866:	f7ff fa69 	bl	8006d3c <LL_ADC_REG_StopConversion>
 800786a:	f7ff f917 	bl	8006a9c <HAL_GetTick>
 800786e:	0003      	movs	r3, r0
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	e01a      	b.n	80078aa <ADC_ConversionStop+0x6e>
 8007874:	f7ff f912 	bl	8006a9c <HAL_GetTick>
 8007878:	0002      	movs	r2, r0
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d913      	bls.n	80078aa <ADC_ConversionStop+0x6e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	2204      	movs	r2, #4
 800788a:	4013      	ands	r3, r2
 800788c:	d00d      	beq.n	80078aa <ADC_ConversionStop+0x6e>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007892:	2210      	movs	r2, #16
 8007894:	431a      	orrs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	659a      	str	r2, [r3, #88]	@ 0x58
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800789e:	2201      	movs	r2, #1
 80078a0:	431a      	orrs	r2, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078a6:	2301      	movs	r3, #1
 80078a8:	e006      	b.n	80078b8 <ADC_ConversionStop+0x7c>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	2204      	movs	r2, #4
 80078b2:	4013      	ands	r3, r2
 80078b4:	d1de      	bne.n	8007874 <ADC_ConversionStop+0x38>
 80078b6:	2300      	movs	r3, #0
 80078b8:	0018      	movs	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	b004      	add	sp, #16
 80078be:	bd80      	pop	{r7, pc}

080078c0 <ADC_Enable>:
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b084      	sub	sp, #16
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	2300      	movs	r3, #0
 80078ca:	60bb      	str	r3, [r7, #8]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	0018      	movs	r0, r3
 80078d2:	f7ff f9ff 	bl	8006cd4 <LL_ADC_IsEnabled>
 80078d6:	1e03      	subs	r3, r0, #0
 80078d8:	d000      	beq.n	80078dc <ADC_Enable+0x1c>
 80078da:	e069      	b.n	80079b0 <ADC_Enable+0xf0>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	4a36      	ldr	r2, [pc, #216]	@ (80079bc <ADC_Enable+0xfc>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	d00d      	beq.n	8007904 <ADC_Enable+0x44>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078ec:	2210      	movs	r2, #16
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078f8:	2201      	movs	r2, #1
 80078fa:	431a      	orrs	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007900:	2301      	movs	r3, #1
 8007902:	e056      	b.n	80079b2 <ADC_Enable+0xf2>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff f9bf 	bl	8006c8c <LL_ADC_Enable>
 800790e:	4b2c      	ldr	r3, [pc, #176]	@ (80079c0 <ADC_Enable+0x100>)
 8007910:	0018      	movs	r0, r3
 8007912:	f7ff f8e1 	bl	8006ad8 <LL_ADC_GetCommonPathInternalCh>
 8007916:	0002      	movs	r2, r0
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	041b      	lsls	r3, r3, #16
 800791c:	4013      	ands	r3, r2
 800791e:	d00f      	beq.n	8007940 <ADC_Enable+0x80>
 8007920:	4b28      	ldr	r3, [pc, #160]	@ (80079c4 <ADC_Enable+0x104>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4928      	ldr	r1, [pc, #160]	@ (80079c8 <ADC_Enable+0x108>)
 8007926:	0018      	movs	r0, r3
 8007928:	f7f8 fbee 	bl	8000108 <__udivsi3>
 800792c:	0003      	movs	r3, r0
 800792e:	3301      	adds	r3, #1
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	e002      	b.n	800793a <ADC_Enable+0x7a>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f9      	bne.n	8007934 <ADC_Enable+0x74>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7e5b      	ldrb	r3, [r3, #25]
 8007944:	2b01      	cmp	r3, #1
 8007946:	d033      	beq.n	80079b0 <ADC_Enable+0xf0>
 8007948:	f7ff f8a8 	bl	8006a9c <HAL_GetTick>
 800794c:	0003      	movs	r3, r0
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	e027      	b.n	80079a2 <ADC_Enable+0xe2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	0018      	movs	r0, r3
 8007958:	f7ff f9bc 	bl	8006cd4 <LL_ADC_IsEnabled>
 800795c:	1e03      	subs	r3, r0, #0
 800795e:	d104      	bne.n	800796a <ADC_Enable+0xaa>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	0018      	movs	r0, r3
 8007966:	f7ff f991 	bl	8006c8c <LL_ADC_Enable>
 800796a:	f7ff f897 	bl	8006a9c <HAL_GetTick>
 800796e:	0002      	movs	r2, r0
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	2b02      	cmp	r3, #2
 8007976:	d914      	bls.n	80079a2 <ADC_Enable+0xe2>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2201      	movs	r2, #1
 8007980:	4013      	ands	r3, r2
 8007982:	2b01      	cmp	r3, #1
 8007984:	d00d      	beq.n	80079a2 <ADC_Enable+0xe2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800798a:	2210      	movs	r2, #16
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	659a      	str	r2, [r3, #88]	@ 0x58
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007996:	2201      	movs	r2, #1
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800799e:	2301      	movs	r3, #1
 80079a0:	e007      	b.n	80079b2 <ADC_Enable+0xf2>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2201      	movs	r2, #1
 80079aa:	4013      	ands	r3, r2
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d1d0      	bne.n	8007952 <ADC_Enable+0x92>
 80079b0:	2300      	movs	r3, #0
 80079b2:	0018      	movs	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b004      	add	sp, #16
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	46c0      	nop			@ (mov r8, r8)
 80079bc:	80000017 	.word	0x80000017
 80079c0:	40012708 	.word	0x40012708
 80079c4:	2000044c 	.word	0x2000044c
 80079c8:	00030d40 	.word	0x00030d40

080079cc <ADC_Disable>:
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	0018      	movs	r0, r3
 80079da:	f7ff f98c 	bl	8006cf6 <LL_ADC_IsDisableOngoing>
 80079de:	0003      	movs	r3, r0
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	0018      	movs	r0, r3
 80079e8:	f7ff f974 	bl	8006cd4 <LL_ADC_IsEnabled>
 80079ec:	1e03      	subs	r3, r0, #0
 80079ee:	d046      	beq.n	8007a7e <ADC_Disable+0xb2>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d143      	bne.n	8007a7e <ADC_Disable+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	2205      	movs	r2, #5
 80079fe:	4013      	ands	r3, r2
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d10d      	bne.n	8007a20 <ADC_Disable+0x54>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7ff f951 	bl	8006cb0 <LL_ADC_Disable>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	2203      	movs	r2, #3
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f7ff f841 	bl	8006a9c <HAL_GetTick>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	60bb      	str	r3, [r7, #8]
 8007a1e:	e028      	b.n	8007a72 <ADC_Disable+0xa6>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a24:	2210      	movs	r2, #16
 8007a26:	431a      	orrs	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a30:	2201      	movs	r2, #1
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e021      	b.n	8007a80 <ADC_Disable+0xb4>
 8007a3c:	f7ff f82e 	bl	8006a9c <HAL_GetTick>
 8007a40:	0002      	movs	r2, r0
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d913      	bls.n	8007a72 <ADC_Disable+0xa6>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	689b      	ldr	r3, [r3, #8]
 8007a50:	2201      	movs	r2, #1
 8007a52:	4013      	ands	r3, r2
 8007a54:	d00d      	beq.n	8007a72 <ADC_Disable+0xa6>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a5a:	2210      	movs	r2, #16
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	659a      	str	r2, [r3, #88]	@ 0x58
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a66:	2201      	movs	r2, #1
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e006      	b.n	8007a80 <ADC_Disable+0xb4>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	d1de      	bne.n	8007a3c <ADC_Disable+0x70>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	0018      	movs	r0, r3
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b004      	add	sp, #16
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <ADC_DMAConvCplt>:
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a9a:	2250      	movs	r2, #80	@ 0x50
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	d142      	bne.n	8007b26 <ADC_DMAConvCplt+0x9e>
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aa4:	2280      	movs	r2, #128	@ 0x80
 8007aa6:	0092      	lsls	r2, r2, #2
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	659a      	str	r2, [r3, #88]	@ 0x58
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	f7ff f851 	bl	8006b5a <LL_ADC_REG_IsTriggerSourceSWStart>
 8007ab8:	1e03      	subs	r3, r0, #0
 8007aba:	d02e      	beq.n	8007b1a <ADC_DMAConvCplt+0x92>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	7e9b      	ldrb	r3, [r3, #26]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d12a      	bne.n	8007b1a <ADC_DMAConvCplt+0x92>
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2208      	movs	r2, #8
 8007acc:	4013      	ands	r3, r2
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d123      	bne.n	8007b1a <ADC_DMAConvCplt+0x92>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	f7ff f942 	bl	8006d60 <LL_ADC_REG_IsConversionOngoing>
 8007adc:	1e03      	subs	r3, r0, #0
 8007ade:	d110      	bne.n	8007b02 <ADC_DMAConvCplt+0x7a>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	685a      	ldr	r2, [r3, #4]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	210c      	movs	r1, #12
 8007aec:	438a      	bics	r2, r1
 8007aee:	605a      	str	r2, [r3, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007af4:	4a16      	ldr	r2, [pc, #88]	@ (8007b50 <ADC_DMAConvCplt+0xc8>)
 8007af6:	4013      	ands	r3, r2
 8007af8:	2201      	movs	r2, #1
 8007afa:	431a      	orrs	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b00:	e00b      	b.n	8007b1a <ADC_DMAConvCplt+0x92>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b06:	2220      	movs	r2, #32
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b12:	2201      	movs	r2, #1
 8007b14:	431a      	orrs	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	0010      	movs	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	e010      	b.n	8007b48 <ADC_DMAConvCplt+0xc0>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2a:	2210      	movs	r2, #16
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d005      	beq.n	8007b3c <ADC_DMAConvCplt+0xb4>
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	0010      	movs	r0, r2
 8007b38:	4798      	blx	r3
 8007b3a:	e005      	b.n	8007b48 <ADC_DMAConvCplt+0xc0>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	0010      	movs	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	46c0      	nop			@ (mov r8, r8)
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b004      	add	sp, #16
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	fffffefe 	.word	0xfffffefe

08007b54 <ADC_DMAHalfConvCplt>:
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b60:	60fb      	str	r3, [r7, #12]
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	0010      	movs	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	46c0      	nop			@ (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b004      	add	sp, #16
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <ADC_DMAError>:
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b86:	2240      	movs	r2, #64	@ 0x40
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b92:	2204      	movs	r2, #4
 8007b94:	431a      	orrs	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	0010      	movs	r0, r2
 8007ba2:	4798      	blx	r3
 8007ba4:	46c0      	nop			@ (mov r8, r8)
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	b004      	add	sp, #16
 8007baa:	bd80      	pop	{r7, pc}

08007bac <LL_ADC_GetCommonClock>:
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	23f0      	movs	r3, #240	@ 0xf0
 8007bba:	039b      	lsls	r3, r3, #14
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	0018      	movs	r0, r3
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	b002      	add	sp, #8
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <LL_ADC_GetClock>:
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b082      	sub	sp, #8
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	0f9b      	lsrs	r3, r3, #30
 8007bd4:	079b      	lsls	r3, r3, #30
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b002      	add	sp, #8
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <LL_ADC_SetCalibrationFactor>:
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b082      	sub	sp, #8
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	22b4      	movs	r2, #180	@ 0xb4
 8007bec:	589b      	ldr	r3, [r3, r2]
 8007bee:	227f      	movs	r2, #127	@ 0x7f
 8007bf0:	4393      	bics	r3, r2
 8007bf2:	001a      	movs	r2, r3
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	21b4      	movs	r1, #180	@ 0xb4
 8007bfc:	505a      	str	r2, [r3, r1]
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <LL_ADC_GetCalibrationFactor>:
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	22b4      	movs	r2, #180	@ 0xb4
 8007c12:	589b      	ldr	r3, [r3, r2]
 8007c14:	227f      	movs	r2, #127	@ 0x7f
 8007c16:	4013      	ands	r3, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b002      	add	sp, #8
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <LL_ADC_Enable>:
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	4a04      	ldr	r2, [pc, #16]	@ (8007c40 <LL_ADC_Enable+0x20>)
 8007c2e:	4013      	ands	r3, r2
 8007c30:	2201      	movs	r2, #1
 8007c32:	431a      	orrs	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	46c0      	nop			@ (mov r8, r8)
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	b002      	add	sp, #8
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	7fffffe8 	.word	0x7fffffe8

08007c44 <LL_ADC_Disable>:
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4a04      	ldr	r2, [pc, #16]	@ (8007c64 <LL_ADC_Disable+0x20>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	2202      	movs	r2, #2
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	46c0      	nop			@ (mov r8, r8)
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	b002      	add	sp, #8
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	7fffffe8 	.word	0x7fffffe8

08007c68 <LL_ADC_IsEnabled>:
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2201      	movs	r2, #1
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d101      	bne.n	8007c80 <LL_ADC_IsEnabled+0x18>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <LL_ADC_IsEnabled+0x1a>
 8007c80:	2300      	movs	r3, #0
 8007c82:	0018      	movs	r0, r3
 8007c84:	46bd      	mov	sp, r7
 8007c86:	b002      	add	sp, #8
 8007c88:	bd80      	pop	{r7, pc}
	...

08007c8c <LL_ADC_StartCalibration>:
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	4a05      	ldr	r2, [pc, #20]	@ (8007cb0 <LL_ADC_StartCalibration+0x24>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2280      	movs	r2, #128	@ 0x80
 8007c9e:	0612      	lsls	r2, r2, #24
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	46c0      	nop			@ (mov r8, r8)
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b002      	add	sp, #8
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	46c0      	nop			@ (mov r8, r8)
 8007cb0:	7fffffe8 	.word	0x7fffffe8

08007cb4 <LL_ADC_IsCalibrationOnGoing>:
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	0fdb      	lsrs	r3, r3, #31
 8007cc2:	07da      	lsls	r2, r3, #31
 8007cc4:	2380      	movs	r3, #128	@ 0x80
 8007cc6:	061b      	lsls	r3, r3, #24
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d101      	bne.n	8007cd0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b002      	add	sp, #8
 8007cd8:	bd80      	pop	{r7, pc}
	...

08007cdc <HAL_ADCEx_Calibration_Start>:
 8007cdc:	b590      	push	{r4, r7, lr}
 8007cde:	b08b      	sub	sp, #44	@ 0x2c
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	2300      	movs	r3, #0
 8007cea:	623b      	str	r3, [r7, #32]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2254      	movs	r2, #84	@ 0x54
 8007cf0:	5c9b      	ldrb	r3, [r3, r2]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_ADCEx_Calibration_Start+0x1e>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e0dd      	b.n	8007eb6 <HAL_ADCEx_Calibration_Start+0x1da>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2254      	movs	r2, #84	@ 0x54
 8007cfe:	2101      	movs	r1, #1
 8007d00:	5499      	strb	r1, [r3, r2]
 8007d02:	231f      	movs	r3, #31
 8007d04:	18fc      	adds	r4, r7, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0018      	movs	r0, r3
 8007d0a:	f7ff fe5f 	bl	80079cc <ADC_Disable>
 8007d0e:	0003      	movs	r3, r0
 8007d10:	7023      	strb	r3, [r4, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	0018      	movs	r0, r3
 8007d18:	f7ff ffa6 	bl	8007c68 <LL_ADC_IsEnabled>
 8007d1c:	1e03      	subs	r3, r0, #0
 8007d1e:	d000      	beq.n	8007d22 <HAL_ADCEx_Calibration_Start+0x46>
 8007d20:	e0bc      	b.n	8007e9c <HAL_ADCEx_Calibration_Start+0x1c0>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d26:	4a66      	ldr	r2, [pc, #408]	@ (8007ec0 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a62      	ldr	r2, [pc, #392]	@ (8007ec4 <HAL_ADCEx_Calibration_Start+0x1e8>)
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68da      	ldr	r2, [r3, #12]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	495f      	ldr	r1, [pc, #380]	@ (8007ec8 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8007d4a:	400a      	ands	r2, r1
 8007d4c:	60da      	str	r2, [r3, #12]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d52:	e02d      	b.n	8007db0 <HAL_ADCEx_Calibration_Start+0xd4>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0018      	movs	r0, r3
 8007d5a:	f7ff ff97 	bl	8007c8c <LL_ADC_StartCalibration>
 8007d5e:	e014      	b.n	8007d8a <HAL_ADCEx_Calibration_Start+0xae>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	3301      	adds	r3, #1
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	4a58      	ldr	r2, [pc, #352]	@ (8007ecc <HAL_ADCEx_Calibration_Start+0x1f0>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d90d      	bls.n	8007d8a <HAL_ADCEx_Calibration_Start+0xae>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d72:	2212      	movs	r2, #18
 8007d74:	4393      	bics	r3, r2
 8007d76:	2210      	movs	r2, #16
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2254      	movs	r2, #84	@ 0x54
 8007d82:	2100      	movs	r1, #0
 8007d84:	5499      	strb	r1, [r3, r2]
 8007d86:	2301      	movs	r3, #1
 8007d88:	e095      	b.n	8007eb6 <HAL_ADCEx_Calibration_Start+0x1da>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	0018      	movs	r0, r3
 8007d90:	f7ff ff90 	bl	8007cb4 <LL_ADC_IsCalibrationOnGoing>
 8007d94:	1e03      	subs	r3, r0, #0
 8007d96:	d1e3      	bne.n	8007d60 <HAL_ADCEx_Calibration_Start+0x84>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	0018      	movs	r0, r3
 8007d9e:	f7ff ff32 	bl	8007c06 <LL_ADC_GetCalibrationFactor>
 8007da2:	0002      	movs	r2, r0
 8007da4:	6a3b      	ldr	r3, [r7, #32]
 8007da6:	189b      	adds	r3, r3, r2
 8007da8:	623b      	str	r3, [r7, #32]
 8007daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dac:	3301      	adds	r3, #1
 8007dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	d9ce      	bls.n	8007d54 <HAL_ADCEx_Calibration_Start+0x78>
 8007db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007db8:	6a38      	ldr	r0, [r7, #32]
 8007dba:	f7f8 f9a5 	bl	8000108 <__udivsi3>
 8007dbe:	0003      	movs	r3, r0
 8007dc0:	623b      	str	r3, [r7, #32]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	f7ff ff2a 	bl	8007c20 <LL_ADC_Enable>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7ff fef8 	bl	8007bc6 <LL_ADC_GetClock>
 8007dd6:	1e03      	subs	r3, r0, #0
 8007dd8:	d11b      	bne.n	8007e12 <HAL_ADCEx_Calibration_Start+0x136>
 8007dda:	4b3d      	ldr	r3, [pc, #244]	@ (8007ed0 <HAL_ADCEx_Calibration_Start+0x1f4>)
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f7ff fee5 	bl	8007bac <LL_ADC_GetCommonClock>
 8007de2:	0003      	movs	r3, r0
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	23e0      	movs	r3, #224	@ 0xe0
 8007dea:	035b      	lsls	r3, r3, #13
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d310      	bcc.n	8007e12 <HAL_ADCEx_Calibration_Start+0x136>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	0c9b      	lsrs	r3, r3, #18
 8007df4:	3b03      	subs	r3, #3
 8007df6:	2201      	movs	r2, #1
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	0013      	movs	r3, r2
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	085b      	lsrs	r3, r3, #1
 8007e02:	60bb      	str	r3, [r7, #8]
 8007e04:	e002      	b.n	8007e0c <HAL_ADCEx_Calibration_Start+0x130>
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	60bb      	str	r3, [r7, #8]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f9      	bne.n	8007e06 <HAL_ADCEx_Calibration_Start+0x12a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	0011      	movs	r1, r2
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f7ff fedf 	bl	8007bde <LL_ADC_SetCalibrationFactor>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	0018      	movs	r0, r3
 8007e26:	f7ff ff0d 	bl	8007c44 <LL_ADC_Disable>
 8007e2a:	f7fe fe37 	bl	8006a9c <HAL_GetTick>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	e01b      	b.n	8007e6c <HAL_ADCEx_Calibration_Start+0x190>
 8007e34:	f7fe fe32 	bl	8006a9c <HAL_GetTick>
 8007e38:	0002      	movs	r2, r0
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d914      	bls.n	8007e6c <HAL_ADCEx_Calibration_Start+0x190>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f7ff ff0e 	bl	8007c68 <LL_ADC_IsEnabled>
 8007e4c:	1e03      	subs	r3, r0, #0
 8007e4e:	d00d      	beq.n	8007e6c <HAL_ADCEx_Calibration_Start+0x190>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e54:	2210      	movs	r2, #16
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e60:	2201      	movs	r2, #1
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e024      	b.n	8007eb6 <HAL_ADCEx_Calibration_Start+0x1da>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7ff fef9 	bl	8007c68 <LL_ADC_IsEnabled>
 8007e76:	1e03      	subs	r3, r0, #0
 8007e78:	d1dc      	bne.n	8007e34 <HAL_ADCEx_Calibration_Start+0x158>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68d9      	ldr	r1, [r3, #12]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	60da      	str	r2, [r3, #12]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e8e:	2203      	movs	r2, #3
 8007e90:	4393      	bics	r3, r2
 8007e92:	2201      	movs	r2, #1
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8007e9a:	e005      	b.n	8007ea8 <HAL_ADCEx_Calibration_Start+0x1cc>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ea0:	2210      	movs	r2, #16
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2254      	movs	r2, #84	@ 0x54
 8007eac:	2100      	movs	r1, #0
 8007eae:	5499      	strb	r1, [r3, r2]
 8007eb0:	231f      	movs	r3, #31
 8007eb2:	18fb      	adds	r3, r7, r3
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	0018      	movs	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	b00b      	add	sp, #44	@ 0x2c
 8007ebc:	bd90      	pop	{r4, r7, pc}
 8007ebe:	46c0      	nop			@ (mov r8, r8)
 8007ec0:	fffffefd 	.word	0xfffffefd
 8007ec4:	00008003 	.word	0x00008003
 8007ec8:	ffff7ffc 	.word	0xffff7ffc
 8007ecc:	0002f1ff 	.word	0x0002f1ff
 8007ed0:	40012708 	.word	0x40012708

08007ed4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	46c0      	nop			@ (mov r8, r8)
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	b002      	add	sp, #8
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	46c0      	nop			@ (mov r8, r8)
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_ADCEx_EndOfSamplingCallback>:
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	46c0      	nop			@ (mov r8, r8)
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b002      	add	sp, #8
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <__NVIC_EnableIRQ>:
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	0002      	movs	r2, r0
 8007f0c:	1dfb      	adds	r3, r7, #7
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	1dfb      	adds	r3, r7, #7
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f16:	d809      	bhi.n	8007f2c <__NVIC_EnableIRQ+0x28>
 8007f18:	1dfb      	adds	r3, r7, #7
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	001a      	movs	r2, r3
 8007f1e:	231f      	movs	r3, #31
 8007f20:	401a      	ands	r2, r3
 8007f22:	4b04      	ldr	r3, [pc, #16]	@ (8007f34 <__NVIC_EnableIRQ+0x30>)
 8007f24:	2101      	movs	r1, #1
 8007f26:	4091      	lsls	r1, r2
 8007f28:	000a      	movs	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	46c0      	nop			@ (mov r8, r8)
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b002      	add	sp, #8
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	e000e100 	.word	0xe000e100

08007f38 <__NVIC_DisableIRQ>:
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	0002      	movs	r2, r0
 8007f40:	1dfb      	adds	r3, r7, #7
 8007f42:	701a      	strb	r2, [r3, #0]
 8007f44:	1dfb      	adds	r3, r7, #7
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f4a:	d810      	bhi.n	8007f6e <__NVIC_DisableIRQ+0x36>
 8007f4c:	1dfb      	adds	r3, r7, #7
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	001a      	movs	r2, r3
 8007f52:	231f      	movs	r3, #31
 8007f54:	4013      	ands	r3, r2
 8007f56:	4908      	ldr	r1, [pc, #32]	@ (8007f78 <__NVIC_DisableIRQ+0x40>)
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	0013      	movs	r3, r2
 8007f5e:	2280      	movs	r2, #128	@ 0x80
 8007f60:	508b      	str	r3, [r1, r2]
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	46c0      	nop			@ (mov r8, r8)
 8007f68:	f3bf 8f6f 	isb	sy
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 8007f6e:	46c0      	nop			@ (mov r8, r8)
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b002      	add	sp, #8
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			@ (mov r8, r8)
 8007f78:	e000e100 	.word	0xe000e100

08007f7c <__NVIC_SetPriority>:
 8007f7c:	b590      	push	{r4, r7, lr}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	0002      	movs	r2, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	1dfb      	adds	r3, r7, #7
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	1dfb      	adds	r3, r7, #7
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f90:	d828      	bhi.n	8007fe4 <__NVIC_SetPriority+0x68>
 8007f92:	4a2f      	ldr	r2, [pc, #188]	@ (8008050 <__NVIC_SetPriority+0xd4>)
 8007f94:	1dfb      	adds	r3, r7, #7
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	33c0      	adds	r3, #192	@ 0xc0
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	589b      	ldr	r3, [r3, r2]
 8007fa2:	1dfa      	adds	r2, r7, #7
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	0011      	movs	r1, r2
 8007fa8:	2203      	movs	r2, #3
 8007faa:	400a      	ands	r2, r1
 8007fac:	00d2      	lsls	r2, r2, #3
 8007fae:	21ff      	movs	r1, #255	@ 0xff
 8007fb0:	4091      	lsls	r1, r2
 8007fb2:	000a      	movs	r2, r1
 8007fb4:	43d2      	mvns	r2, r2
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	0011      	movs	r1, r2
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	019b      	lsls	r3, r3, #6
 8007fbe:	22ff      	movs	r2, #255	@ 0xff
 8007fc0:	401a      	ands	r2, r3
 8007fc2:	1dfb      	adds	r3, r7, #7
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	0018      	movs	r0, r3
 8007fc8:	2303      	movs	r3, #3
 8007fca:	4003      	ands	r3, r0
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	409a      	lsls	r2, r3
 8007fd0:	481f      	ldr	r0, [pc, #124]	@ (8008050 <__NVIC_SetPriority+0xd4>)
 8007fd2:	1dfb      	adds	r3, r7, #7
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	089b      	lsrs	r3, r3, #2
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	33c0      	adds	r3, #192	@ 0xc0
 8007fde:	009b      	lsls	r3, r3, #2
 8007fe0:	501a      	str	r2, [r3, r0]
 8007fe2:	e031      	b.n	8008048 <__NVIC_SetPriority+0xcc>
 8007fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8008054 <__NVIC_SetPriority+0xd8>)
 8007fe6:	1dfb      	adds	r3, r7, #7
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	0019      	movs	r1, r3
 8007fec:	230f      	movs	r3, #15
 8007fee:	400b      	ands	r3, r1
 8007ff0:	3b08      	subs	r3, #8
 8007ff2:	089b      	lsrs	r3, r3, #2
 8007ff4:	3306      	adds	r3, #6
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	18d3      	adds	r3, r2, r3
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	1dfa      	adds	r2, r7, #7
 8008000:	7812      	ldrb	r2, [r2, #0]
 8008002:	0011      	movs	r1, r2
 8008004:	2203      	movs	r2, #3
 8008006:	400a      	ands	r2, r1
 8008008:	00d2      	lsls	r2, r2, #3
 800800a:	21ff      	movs	r1, #255	@ 0xff
 800800c:	4091      	lsls	r1, r2
 800800e:	000a      	movs	r2, r1
 8008010:	43d2      	mvns	r2, r2
 8008012:	401a      	ands	r2, r3
 8008014:	0011      	movs	r1, r2
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	019b      	lsls	r3, r3, #6
 800801a:	22ff      	movs	r2, #255	@ 0xff
 800801c:	401a      	ands	r2, r3
 800801e:	1dfb      	adds	r3, r7, #7
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	0018      	movs	r0, r3
 8008024:	2303      	movs	r3, #3
 8008026:	4003      	ands	r3, r0
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	409a      	lsls	r2, r3
 800802c:	4809      	ldr	r0, [pc, #36]	@ (8008054 <__NVIC_SetPriority+0xd8>)
 800802e:	1dfb      	adds	r3, r7, #7
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	001c      	movs	r4, r3
 8008034:	230f      	movs	r3, #15
 8008036:	4023      	ands	r3, r4
 8008038:	3b08      	subs	r3, #8
 800803a:	089b      	lsrs	r3, r3, #2
 800803c:	430a      	orrs	r2, r1
 800803e:	3306      	adds	r3, #6
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	18c3      	adds	r3, r0, r3
 8008044:	3304      	adds	r3, #4
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	46c0      	nop			@ (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	b003      	add	sp, #12
 800804e:	bd90      	pop	{r4, r7, pc}
 8008050:	e000e100 	.word	0xe000e100
 8008054:	e000ed00 	.word	0xe000ed00

08008058 <SysTick_Config>:
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	1e5a      	subs	r2, r3, #1
 8008064:	2380      	movs	r3, #128	@ 0x80
 8008066:	045b      	lsls	r3, r3, #17
 8008068:	429a      	cmp	r2, r3
 800806a:	d301      	bcc.n	8008070 <SysTick_Config+0x18>
 800806c:	2301      	movs	r3, #1
 800806e:	e010      	b.n	8008092 <SysTick_Config+0x3a>
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <SysTick_Config+0x44>)
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	3a01      	subs	r2, #1
 8008076:	605a      	str	r2, [r3, #4]
 8008078:	2301      	movs	r3, #1
 800807a:	425b      	negs	r3, r3
 800807c:	2103      	movs	r1, #3
 800807e:	0018      	movs	r0, r3
 8008080:	f7ff ff7c 	bl	8007f7c <__NVIC_SetPriority>
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <SysTick_Config+0x44>)
 8008086:	2200      	movs	r2, #0
 8008088:	609a      	str	r2, [r3, #8]
 800808a:	4b04      	ldr	r3, [pc, #16]	@ (800809c <SysTick_Config+0x44>)
 800808c:	2207      	movs	r2, #7
 800808e:	601a      	str	r2, [r3, #0]
 8008090:	2300      	movs	r3, #0
 8008092:	0018      	movs	r0, r3
 8008094:	46bd      	mov	sp, r7
 8008096:	b002      	add	sp, #8
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			@ (mov r8, r8)
 800809c:	e000e010 	.word	0xe000e010

080080a0 <HAL_NVIC_SetPriority>:
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60b9      	str	r1, [r7, #8]
 80080a8:	607a      	str	r2, [r7, #4]
 80080aa:	210f      	movs	r1, #15
 80080ac:	187b      	adds	r3, r7, r1
 80080ae:	1c02      	adds	r2, r0, #0
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	68ba      	ldr	r2, [r7, #8]
 80080b4:	187b      	adds	r3, r7, r1
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b25b      	sxtb	r3, r3
 80080ba:	0011      	movs	r1, r2
 80080bc:	0018      	movs	r0, r3
 80080be:	f7ff ff5d 	bl	8007f7c <__NVIC_SetPriority>
 80080c2:	46c0      	nop			@ (mov r8, r8)
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b004      	add	sp, #16
 80080c8:	bd80      	pop	{r7, pc}

080080ca <HAL_NVIC_EnableIRQ>:
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b082      	sub	sp, #8
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	0002      	movs	r2, r0
 80080d2:	1dfb      	adds	r3, r7, #7
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	1dfb      	adds	r3, r7, #7
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	b25b      	sxtb	r3, r3
 80080dc:	0018      	movs	r0, r3
 80080de:	f7ff ff11 	bl	8007f04 <__NVIC_EnableIRQ>
 80080e2:	46c0      	nop			@ (mov r8, r8)
 80080e4:	46bd      	mov	sp, r7
 80080e6:	b002      	add	sp, #8
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_NVIC_DisableIRQ>:
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	0002      	movs	r2, r0
 80080f2:	1dfb      	adds	r3, r7, #7
 80080f4:	701a      	strb	r2, [r3, #0]
 80080f6:	1dfb      	adds	r3, r7, #7
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	b25b      	sxtb	r3, r3
 80080fc:	0018      	movs	r0, r3
 80080fe:	f7ff ff1b 	bl	8007f38 <__NVIC_DisableIRQ>
 8008102:	46c0      	nop			@ (mov r8, r8)
 8008104:	46bd      	mov	sp, r7
 8008106:	b002      	add	sp, #8
 8008108:	bd80      	pop	{r7, pc}

0800810a <HAL_SYSTICK_Config>:
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	0018      	movs	r0, r3
 8008116:	f7ff ff9f 	bl	8008058 <SysTick_Config>
 800811a:	0003      	movs	r3, r0
 800811c:	0018      	movs	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	b002      	add	sp, #8
 8008122:	bd80      	pop	{r7, pc}

08008124 <HAL_DMA_Init>:
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d101      	bne.n	8008136 <HAL_DMA_Init+0x12>
 8008132:	2301      	movs	r3, #1
 8008134:	e077      	b.n	8008226 <HAL_DMA_Init+0x102>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a3d      	ldr	r2, [pc, #244]	@ (8008230 <HAL_DMA_Init+0x10c>)
 800813c:	4694      	mov	ip, r2
 800813e:	4463      	add	r3, ip
 8008140:	2114      	movs	r1, #20
 8008142:	0018      	movs	r0, r3
 8008144:	f7f7 ffe0 	bl	8000108 <__udivsi3>
 8008148:	0003      	movs	r3, r0
 800814a:	009a      	lsls	r2, r3, #2
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2225      	movs	r2, #37	@ 0x25
 8008154:	2102      	movs	r1, #2
 8008156:	5499      	strb	r1, [r3, r2]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4934      	ldr	r1, [pc, #208]	@ (8008234 <HAL_DMA_Init+0x110>)
 8008164:	400a      	ands	r2, r1
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6819      	ldr	r1, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	431a      	orrs	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
 800817c:	431a      	orrs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	431a      	orrs	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	699b      	ldr	r3, [r3, #24]
 8008188:	431a      	orrs	r2, r3
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	431a      	orrs	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	431a      	orrs	r2, r3
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	430a      	orrs	r2, r1
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0018      	movs	r0, r3
 80081a2:	f000 fa8d 	bl	80086c0 <DMA_CalcDMAMUXChannelBaseAndMask>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	689a      	ldr	r2, [r3, #8]
 80081aa:	2380      	movs	r3, #128	@ 0x80
 80081ac:	01db      	lsls	r3, r3, #7
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d102      	bne.n	80081b8 <HAL_DMA_Init+0x94>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	605a      	str	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c0:	213f      	movs	r1, #63	@ 0x3f
 80081c2:	400a      	ands	r2, r1
 80081c4:	601a      	str	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d011      	beq.n	80081fc <HAL_DMA_Init+0xd8>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d80d      	bhi.n	80081fc <HAL_DMA_Init+0xd8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	0018      	movs	r0, r3
 80081e4:	f000 fa98 	bl	8008718 <DMA_CalcDMAMUXRequestGenBaseAndMask>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081ec:	2200      	movs	r2, #0
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	e008      	b.n	800820e <HAL_DMA_Init+0xea>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	651a      	str	r2, [r3, #80]	@ 0x50
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	655a      	str	r2, [r3, #84]	@ 0x54
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	659a      	str	r2, [r3, #88]	@ 0x58
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2225      	movs	r2, #37	@ 0x25
 8008218:	2101      	movs	r1, #1
 800821a:	5499      	strb	r1, [r3, r2]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2224      	movs	r2, #36	@ 0x24
 8008220:	2100      	movs	r1, #0
 8008222:	5499      	strb	r1, [r3, r2]
 8008224:	2300      	movs	r3, #0
 8008226:	0018      	movs	r0, r3
 8008228:	46bd      	mov	sp, r7
 800822a:	b002      	add	sp, #8
 800822c:	bd80      	pop	{r7, pc}
 800822e:	46c0      	nop			@ (mov r8, r8)
 8008230:	bffdfff8 	.word	0xbffdfff8
 8008234:	ffff800f 	.word	0xffff800f

08008238 <HAL_DMA_Start_IT>:
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	2317      	movs	r3, #23
 8008248:	18fb      	adds	r3, r7, r3
 800824a:	2200      	movs	r2, #0
 800824c:	701a      	strb	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2224      	movs	r2, #36	@ 0x24
 8008252:	5c9b      	ldrb	r3, [r3, r2]
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_DMA_Start_IT+0x24>
 8008258:	2302      	movs	r3, #2
 800825a:	e06f      	b.n	800833c <HAL_DMA_Start_IT+0x104>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2224      	movs	r2, #36	@ 0x24
 8008260:	2101      	movs	r1, #1
 8008262:	5499      	strb	r1, [r3, r2]
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2225      	movs	r2, #37	@ 0x25
 8008268:	5c9b      	ldrb	r3, [r3, r2]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d157      	bne.n	8008320 <HAL_DMA_Start_IT+0xe8>
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2225      	movs	r2, #37	@ 0x25
 8008274:	2102      	movs	r1, #2
 8008276:	5499      	strb	r1, [r3, r2]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2101      	movs	r1, #1
 800828a:	438a      	bics	r2, r1
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	68b9      	ldr	r1, [r7, #8]
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f9d3 	bl	8008640 <DMA_SetConfig>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d008      	beq.n	80082b4 <HAL_DMA_Start_IT+0x7c>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	210e      	movs	r1, #14
 80082ae:	430a      	orrs	r2, r1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e00f      	b.n	80082d4 <HAL_DMA_Start_IT+0x9c>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2104      	movs	r1, #4
 80082c0:	438a      	bics	r2, r1
 80082c2:	601a      	str	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	210a      	movs	r1, #10
 80082d0:	430a      	orrs	r2, r1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	2380      	movs	r3, #128	@ 0x80
 80082dc:	025b      	lsls	r3, r3, #9
 80082de:	4013      	ands	r3, r2
 80082e0:	d008      	beq.n	80082f4 <HAL_DMA_Start_IT+0xbc>
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082ec:	2180      	movs	r1, #128	@ 0x80
 80082ee:	0049      	lsls	r1, r1, #1
 80082f0:	430a      	orrs	r2, r1
 80082f2:	601a      	str	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d008      	beq.n	800830e <HAL_DMA_Start_IT+0xd6>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008306:	2180      	movs	r1, #128	@ 0x80
 8008308:	0049      	lsls	r1, r1, #1
 800830a:	430a      	orrs	r2, r1
 800830c:	601a      	str	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2101      	movs	r1, #1
 800831a:	430a      	orrs	r2, r1
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	e00a      	b.n	8008336 <HAL_DMA_Start_IT+0xfe>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2280      	movs	r2, #128	@ 0x80
 8008324:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2224      	movs	r2, #36	@ 0x24
 800832a:	2100      	movs	r1, #0
 800832c:	5499      	strb	r1, [r3, r2]
 800832e:	2317      	movs	r3, #23
 8008330:	18fb      	adds	r3, r7, r3
 8008332:	2201      	movs	r2, #1
 8008334:	701a      	strb	r2, [r3, #0]
 8008336:	2317      	movs	r3, #23
 8008338:	18fb      	adds	r3, r7, r3
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	0018      	movs	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	b006      	add	sp, #24
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_DMA_Abort>:
 8008344:	b580      	push	{r7, lr}
 8008346:	b082      	sub	sp, #8
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_DMA_Abort+0x12>
 8008352:	2301      	movs	r3, #1
 8008354:	e050      	b.n	80083f8 <HAL_DMA_Abort+0xb4>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2225      	movs	r2, #37	@ 0x25
 800835a:	5c9b      	ldrb	r3, [r3, r2]
 800835c:	b2db      	uxtb	r3, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d008      	beq.n	8008374 <HAL_DMA_Abort+0x30>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2204      	movs	r2, #4
 8008366:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2224      	movs	r2, #36	@ 0x24
 800836c:	2100      	movs	r1, #0
 800836e:	5499      	strb	r1, [r3, r2]
 8008370:	2301      	movs	r3, #1
 8008372:	e041      	b.n	80083f8 <HAL_DMA_Abort+0xb4>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	210e      	movs	r1, #14
 8008380:	438a      	bics	r2, r1
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838e:	491c      	ldr	r1, [pc, #112]	@ (8008400 <HAL_DMA_Abort+0xbc>)
 8008390:	400a      	ands	r2, r1
 8008392:	601a      	str	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2101      	movs	r1, #1
 80083a0:	438a      	bics	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]
 80083a4:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <HAL_DMA_Abort+0xc0>)
 80083a6:	6859      	ldr	r1, [r3, #4]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ac:	221c      	movs	r2, #28
 80083ae:	4013      	ands	r3, r2
 80083b0:	2201      	movs	r2, #1
 80083b2:	409a      	lsls	r2, r3
 80083b4:	4b13      	ldr	r3, [pc, #76]	@ (8008404 <HAL_DMA_Abort+0xc0>)
 80083b6:	430a      	orrs	r2, r1
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80083c2:	605a      	str	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00c      	beq.n	80083e6 <HAL_DMA_Abort+0xa2>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083d6:	490a      	ldr	r1, [pc, #40]	@ (8008400 <HAL_DMA_Abort+0xbc>)
 80083d8:	400a      	ands	r2, r1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80083e4:	605a      	str	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2225      	movs	r2, #37	@ 0x25
 80083ea:	2101      	movs	r1, #1
 80083ec:	5499      	strb	r1, [r3, r2]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2224      	movs	r2, #36	@ 0x24
 80083f2:	2100      	movs	r1, #0
 80083f4:	5499      	strb	r1, [r3, r2]
 80083f6:	2300      	movs	r3, #0
 80083f8:	0018      	movs	r0, r3
 80083fa:	46bd      	mov	sp, r7
 80083fc:	b002      	add	sp, #8
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	fffffeff 	.word	0xfffffeff
 8008404:	40020000 	.word	0x40020000

08008408 <HAL_DMA_Abort_IT>:
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	210f      	movs	r1, #15
 8008412:	187b      	adds	r3, r7, r1
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2225      	movs	r2, #37	@ 0x25
 800841c:	5c9b      	ldrb	r3, [r3, r2]
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d006      	beq.n	8008432 <HAL_DMA_Abort_IT+0x2a>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2204      	movs	r2, #4
 8008428:	63da      	str	r2, [r3, #60]	@ 0x3c
 800842a:	187b      	adds	r3, r7, r1
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e049      	b.n	80084c6 <HAL_DMA_Abort_IT+0xbe>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	210e      	movs	r1, #14
 800843e:	438a      	bics	r2, r1
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2101      	movs	r1, #1
 800844e:	438a      	bics	r2, r1
 8008450:	601a      	str	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800845c:	491d      	ldr	r1, [pc, #116]	@ (80084d4 <HAL_DMA_Abort_IT+0xcc>)
 800845e:	400a      	ands	r2, r1
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	4b1d      	ldr	r3, [pc, #116]	@ (80084d8 <HAL_DMA_Abort_IT+0xd0>)
 8008464:	6859      	ldr	r1, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846a:	221c      	movs	r2, #28
 800846c:	4013      	ands	r3, r2
 800846e:	2201      	movs	r2, #1
 8008470:	409a      	lsls	r2, r3
 8008472:	4b19      	ldr	r3, [pc, #100]	@ (80084d8 <HAL_DMA_Abort_IT+0xd0>)
 8008474:	430a      	orrs	r2, r1
 8008476:	605a      	str	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008480:	605a      	str	r2, [r3, #4]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00c      	beq.n	80084a4 <HAL_DMA_Abort_IT+0x9c>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008494:	490f      	ldr	r1, [pc, #60]	@ (80084d4 <HAL_DMA_Abort_IT+0xcc>)
 8008496:	400a      	ands	r2, r1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80084a2:	605a      	str	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2225      	movs	r2, #37	@ 0x25
 80084a8:	2101      	movs	r1, #1
 80084aa:	5499      	strb	r1, [r3, r2]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2224      	movs	r2, #36	@ 0x24
 80084b0:	2100      	movs	r1, #0
 80084b2:	5499      	strb	r1, [r3, r2]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <HAL_DMA_Abort_IT+0xbe>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	0010      	movs	r0, r2
 80084c4:	4798      	blx	r3
 80084c6:	230f      	movs	r3, #15
 80084c8:	18fb      	adds	r3, r7, r3
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	0018      	movs	r0, r3
 80084ce:	46bd      	mov	sp, r7
 80084d0:	b004      	add	sp, #16
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	fffffeff 	.word	0xfffffeff
 80084d8:	40020000 	.word	0x40020000

080084dc <HAL_DMA_IRQHandler>:
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	4b55      	ldr	r3, [pc, #340]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	60fb      	str	r3, [r7, #12]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	60bb      	str	r3, [r7, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084f6:	221c      	movs	r2, #28
 80084f8:	4013      	ands	r3, r2
 80084fa:	2204      	movs	r2, #4
 80084fc:	409a      	lsls	r2, r3
 80084fe:	0013      	movs	r3, r2
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	4013      	ands	r3, r2
 8008504:	d027      	beq.n	8008556 <HAL_DMA_IRQHandler+0x7a>
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	2204      	movs	r2, #4
 800850a:	4013      	ands	r3, r2
 800850c:	d023      	beq.n	8008556 <HAL_DMA_IRQHandler+0x7a>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2220      	movs	r2, #32
 8008516:	4013      	ands	r3, r2
 8008518:	d107      	bne.n	800852a <HAL_DMA_IRQHandler+0x4e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2104      	movs	r1, #4
 8008526:	438a      	bics	r2, r1
 8008528:	601a      	str	r2, [r3, #0]
 800852a:	4b44      	ldr	r3, [pc, #272]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 800852c:	6859      	ldr	r1, [r3, #4]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008532:	221c      	movs	r2, #28
 8008534:	4013      	ands	r3, r2
 8008536:	2204      	movs	r2, #4
 8008538:	409a      	lsls	r2, r3
 800853a:	4b40      	ldr	r3, [pc, #256]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 800853c:	430a      	orrs	r2, r1
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008544:	2b00      	cmp	r3, #0
 8008546:	d100      	bne.n	800854a <HAL_DMA_IRQHandler+0x6e>
 8008548:	e073      	b.n	8008632 <HAL_DMA_IRQHandler+0x156>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	0010      	movs	r0, r2
 8008552:	4798      	blx	r3
 8008554:	e06d      	b.n	8008632 <HAL_DMA_IRQHandler+0x156>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855a:	221c      	movs	r2, #28
 800855c:	4013      	ands	r3, r2
 800855e:	2202      	movs	r2, #2
 8008560:	409a      	lsls	r2, r3
 8008562:	0013      	movs	r3, r2
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	4013      	ands	r3, r2
 8008568:	d02e      	beq.n	80085c8 <HAL_DMA_IRQHandler+0xec>
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	2202      	movs	r2, #2
 800856e:	4013      	ands	r3, r2
 8008570:	d02a      	beq.n	80085c8 <HAL_DMA_IRQHandler+0xec>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2220      	movs	r2, #32
 800857a:	4013      	ands	r3, r2
 800857c:	d10b      	bne.n	8008596 <HAL_DMA_IRQHandler+0xba>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	210a      	movs	r1, #10
 800858a:	438a      	bics	r2, r1
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2225      	movs	r2, #37	@ 0x25
 8008592:	2101      	movs	r1, #1
 8008594:	5499      	strb	r1, [r3, r2]
 8008596:	4b29      	ldr	r3, [pc, #164]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 8008598:	6859      	ldr	r1, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800859e:	221c      	movs	r2, #28
 80085a0:	4013      	ands	r3, r2
 80085a2:	2202      	movs	r2, #2
 80085a4:	409a      	lsls	r2, r3
 80085a6:	4b25      	ldr	r3, [pc, #148]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 80085a8:	430a      	orrs	r2, r1
 80085aa:	605a      	str	r2, [r3, #4]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2224      	movs	r2, #36	@ 0x24
 80085b0:	2100      	movs	r1, #0
 80085b2:	5499      	strb	r1, [r3, r2]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d03a      	beq.n	8008632 <HAL_DMA_IRQHandler+0x156>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	0010      	movs	r0, r2
 80085c4:	4798      	blx	r3
 80085c6:	e034      	b.n	8008632 <HAL_DMA_IRQHandler+0x156>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085cc:	221c      	movs	r2, #28
 80085ce:	4013      	ands	r3, r2
 80085d0:	2208      	movs	r2, #8
 80085d2:	409a      	lsls	r2, r3
 80085d4:	0013      	movs	r3, r2
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4013      	ands	r3, r2
 80085da:	d02b      	beq.n	8008634 <HAL_DMA_IRQHandler+0x158>
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	2208      	movs	r2, #8
 80085e0:	4013      	ands	r3, r2
 80085e2:	d027      	beq.n	8008634 <HAL_DMA_IRQHandler+0x158>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	210e      	movs	r1, #14
 80085f0:	438a      	bics	r2, r1
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	4b11      	ldr	r3, [pc, #68]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 80085f6:	6859      	ldr	r1, [r3, #4]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fc:	221c      	movs	r2, #28
 80085fe:	4013      	ands	r3, r2
 8008600:	2201      	movs	r2, #1
 8008602:	409a      	lsls	r2, r3
 8008604:	4b0d      	ldr	r3, [pc, #52]	@ (800863c <HAL_DMA_IRQHandler+0x160>)
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2225      	movs	r2, #37	@ 0x25
 8008614:	2101      	movs	r1, #1
 8008616:	5499      	strb	r1, [r3, r2]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	@ 0x24
 800861c:	2100      	movs	r1, #0
 800861e:	5499      	strb	r1, [r3, r2]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008624:	2b00      	cmp	r3, #0
 8008626:	d005      	beq.n	8008634 <HAL_DMA_IRQHandler+0x158>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	0010      	movs	r0, r2
 8008630:	4798      	blx	r3
 8008632:	46c0      	nop			@ (mov r8, r8)
 8008634:	46c0      	nop			@ (mov r8, r8)
 8008636:	46bd      	mov	sp, r7
 8008638:	b004      	add	sp, #16
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40020000 	.word	0x40020000

08008640 <DMA_SetConfig>:
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008652:	68fa      	ldr	r2, [r7, #12]
 8008654:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8008656:	605a      	str	r2, [r3, #4]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800865c:	2b00      	cmp	r3, #0
 800865e:	d004      	beq.n	800866a <DMA_SetConfig+0x2a>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008668:	605a      	str	r2, [r3, #4]
 800866a:	4b14      	ldr	r3, [pc, #80]	@ (80086bc <DMA_SetConfig+0x7c>)
 800866c:	6859      	ldr	r1, [r3, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008672:	221c      	movs	r2, #28
 8008674:	4013      	ands	r3, r2
 8008676:	2201      	movs	r2, #1
 8008678:	409a      	lsls	r2, r3
 800867a:	4b10      	ldr	r3, [pc, #64]	@ (80086bc <DMA_SetConfig+0x7c>)
 800867c:	430a      	orrs	r2, r1
 800867e:	605a      	str	r2, [r3, #4]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	605a      	str	r2, [r3, #4]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689b      	ldr	r3, [r3, #8]
 800868c:	2b10      	cmp	r3, #16
 800868e:	d108      	bne.n	80086a2 <DMA_SetConfig+0x62>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68ba      	ldr	r2, [r7, #8]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	e007      	b.n	80086b2 <DMA_SetConfig+0x72>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	609a      	str	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	60da      	str	r2, [r3, #12]
 80086b2:	46c0      	nop			@ (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b004      	add	sp, #16
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	46c0      	nop			@ (mov r8, r8)
 80086bc:	40020000 	.word	0x40020000

080086c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	4a10      	ldr	r2, [pc, #64]	@ (8008710 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80086d0:	4694      	mov	ip, r2
 80086d2:	4463      	add	r3, ip
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	001a      	movs	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	645a      	str	r2, [r3, #68]	@ 0x44
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	001a      	movs	r2, r3
 80086e2:	23ff      	movs	r3, #255	@ 0xff
 80086e4:	4013      	ands	r3, r2
 80086e6:	3b08      	subs	r3, #8
 80086e8:	2114      	movs	r1, #20
 80086ea:	0018      	movs	r0, r3
 80086ec:	f7f7 fd0c 	bl	8000108 <__udivsi3>
 80086f0:	0003      	movs	r3, r0
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a07      	ldr	r2, [pc, #28]	@ (8008714 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80086f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	221f      	movs	r2, #31
 80086fe:	4013      	ands	r3, r2
 8008700:	2201      	movs	r2, #1
 8008702:	409a      	lsls	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008708:	46c0      	nop			@ (mov r8, r8)
 800870a:	46bd      	mov	sp, r7
 800870c:	b004      	add	sp, #16
 800870e:	bd80      	pop	{r7, pc}
 8008710:	10008200 	.word	0x10008200
 8008714:	40020880 	.word	0x40020880

08008718 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	223f      	movs	r2, #63	@ 0x3f
 8008726:	4013      	ands	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4a0a      	ldr	r2, [pc, #40]	@ (8008758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800872e:	4694      	mov	ip, r2
 8008730:	4463      	add	r3, ip
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	001a      	movs	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	651a      	str	r2, [r3, #80]	@ 0x50
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a07      	ldr	r2, [pc, #28]	@ (800875c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800873e:	655a      	str	r2, [r3, #84]	@ 0x54
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3b01      	subs	r3, #1
 8008744:	2203      	movs	r2, #3
 8008746:	4013      	ands	r3, r2
 8008748:	2201      	movs	r2, #1
 800874a:	409a      	lsls	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	659a      	str	r2, [r3, #88]	@ 0x58
 8008750:	46c0      	nop			@ (mov r8, r8)
 8008752:	46bd      	mov	sp, r7
 8008754:	b004      	add	sp, #16
 8008756:	bd80      	pop	{r7, pc}
 8008758:	1000823f 	.word	0x1000823f
 800875c:	40020940 	.word	0x40020940

08008760 <HAL_FLASH_Program>:
 8008760:	b5b0      	push	{r4, r5, r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	603a      	str	r2, [r7, #0]
 800876c:	607b      	str	r3, [r7, #4]
 800876e:	4b21      	ldr	r3, [pc, #132]	@ (80087f4 <HAL_FLASH_Program+0x94>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	2b01      	cmp	r3, #1
 8008774:	d101      	bne.n	800877a <HAL_FLASH_Program+0x1a>
 8008776:	2302      	movs	r3, #2
 8008778:	e038      	b.n	80087ec <HAL_FLASH_Program+0x8c>
 800877a:	4b1e      	ldr	r3, [pc, #120]	@ (80087f4 <HAL_FLASH_Program+0x94>)
 800877c:	2201      	movs	r2, #1
 800877e:	701a      	strb	r2, [r3, #0]
 8008780:	4b1c      	ldr	r3, [pc, #112]	@ (80087f4 <HAL_FLASH_Program+0x94>)
 8008782:	2200      	movs	r2, #0
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	2517      	movs	r5, #23
 8008788:	197c      	adds	r4, r7, r5
 800878a:	23fa      	movs	r3, #250	@ 0xfa
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	0018      	movs	r0, r3
 8008790:	f000 f87a 	bl	8008888 <FLASH_WaitForLastOperation>
 8008794:	0003      	movs	r3, r0
 8008796:	7023      	strb	r3, [r4, #0]
 8008798:	197b      	adds	r3, r7, r5
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d11f      	bne.n	80087e0 <HAL_FLASH_Program+0x80>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d106      	bne.n	80087b4 <HAL_FLASH_Program+0x54>
 80087a6:	683a      	ldr	r2, [r7, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68b9      	ldr	r1, [r7, #8]
 80087ac:	0008      	movs	r0, r1
 80087ae:	f000 f8b9 	bl	8008924 <FLASH_Program_DoubleWord>
 80087b2:	e005      	b.n	80087c0 <HAL_FLASH_Program+0x60>
 80087b4:	683a      	ldr	r2, [r7, #0]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	0011      	movs	r1, r2
 80087ba:	0018      	movs	r0, r3
 80087bc:	f005 fcb0 	bl	800e120 <__FLASH_Program_Fast_veneer>
 80087c0:	2317      	movs	r3, #23
 80087c2:	18fc      	adds	r4, r7, r3
 80087c4:	23fa      	movs	r3, #250	@ 0xfa
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	0018      	movs	r0, r3
 80087ca:	f000 f85d 	bl	8008888 <FLASH_WaitForLastOperation>
 80087ce:	0003      	movs	r3, r0
 80087d0:	7023      	strb	r3, [r4, #0]
 80087d2:	4b09      	ldr	r3, [pc, #36]	@ (80087f8 <HAL_FLASH_Program+0x98>)
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	43d9      	mvns	r1, r3
 80087da:	4b07      	ldr	r3, [pc, #28]	@ (80087f8 <HAL_FLASH_Program+0x98>)
 80087dc:	400a      	ands	r2, r1
 80087de:	615a      	str	r2, [r3, #20]
 80087e0:	4b04      	ldr	r3, [pc, #16]	@ (80087f4 <HAL_FLASH_Program+0x94>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	701a      	strb	r2, [r3, #0]
 80087e6:	2317      	movs	r3, #23
 80087e8:	18fb      	adds	r3, r7, r3
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	0018      	movs	r0, r3
 80087ee:	46bd      	mov	sp, r7
 80087f0:	b006      	add	sp, #24
 80087f2:	bdb0      	pop	{r4, r5, r7, pc}
 80087f4:	20000db0 	.word	0x20000db0
 80087f8:	40022000 	.word	0x40022000

080087fc <HAL_FLASH_Unlock>:
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	1dfb      	adds	r3, r7, #7
 8008804:	2200      	movs	r2, #0
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <HAL_FLASH_Unlock+0x3c>)
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	da0c      	bge.n	800882a <HAL_FLASH_Unlock+0x2e>
 8008810:	4b09      	ldr	r3, [pc, #36]	@ (8008838 <HAL_FLASH_Unlock+0x3c>)
 8008812:	4a0a      	ldr	r2, [pc, #40]	@ (800883c <HAL_FLASH_Unlock+0x40>)
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	4b08      	ldr	r3, [pc, #32]	@ (8008838 <HAL_FLASH_Unlock+0x3c>)
 8008818:	4a09      	ldr	r2, [pc, #36]	@ (8008840 <HAL_FLASH_Unlock+0x44>)
 800881a:	609a      	str	r2, [r3, #8]
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <HAL_FLASH_Unlock+0x3c>)
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	2b00      	cmp	r3, #0
 8008822:	da02      	bge.n	800882a <HAL_FLASH_Unlock+0x2e>
 8008824:	1dfb      	adds	r3, r7, #7
 8008826:	2201      	movs	r2, #1
 8008828:	701a      	strb	r2, [r3, #0]
 800882a:	1dfb      	adds	r3, r7, #7
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	0018      	movs	r0, r3
 8008830:	46bd      	mov	sp, r7
 8008832:	b002      	add	sp, #8
 8008834:	bd80      	pop	{r7, pc}
 8008836:	46c0      	nop			@ (mov r8, r8)
 8008838:	40022000 	.word	0x40022000
 800883c:	45670123 	.word	0x45670123
 8008840:	cdef89ab 	.word	0xcdef89ab

08008844 <HAL_FLASH_Lock>:
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	1dfb      	adds	r3, r7, #7
 800884c:	2201      	movs	r2, #1
 800884e:	701a      	strb	r2, [r3, #0]
 8008850:	23fa      	movs	r3, #250	@ 0xfa
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	0018      	movs	r0, r3
 8008856:	f000 f817 	bl	8008888 <FLASH_WaitForLastOperation>
 800885a:	4b0a      	ldr	r3, [pc, #40]	@ (8008884 <HAL_FLASH_Lock+0x40>)
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <HAL_FLASH_Lock+0x40>)
 8008860:	2180      	movs	r1, #128	@ 0x80
 8008862:	0609      	lsls	r1, r1, #24
 8008864:	430a      	orrs	r2, r1
 8008866:	615a      	str	r2, [r3, #20]
 8008868:	4b06      	ldr	r3, [pc, #24]	@ (8008884 <HAL_FLASH_Lock+0x40>)
 800886a:	695b      	ldr	r3, [r3, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	da02      	bge.n	8008876 <HAL_FLASH_Lock+0x32>
 8008870:	1dfb      	adds	r3, r7, #7
 8008872:	2200      	movs	r2, #0
 8008874:	701a      	strb	r2, [r3, #0]
 8008876:	1dfb      	adds	r3, r7, #7
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	0018      	movs	r0, r3
 800887c:	46bd      	mov	sp, r7
 800887e:	b002      	add	sp, #8
 8008880:	bd80      	pop	{r7, pc}
 8008882:	46c0      	nop			@ (mov r8, r8)
 8008884:	40022000 	.word	0x40022000

08008888 <FLASH_WaitForLastOperation>:
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	f7fe f904 	bl	8006a9c <HAL_GetTick>
 8008894:	0003      	movs	r3, r0
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	2380      	movs	r3, #128	@ 0x80
 800889a:	025b      	lsls	r3, r3, #9
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	e00c      	b.n	80088ba <FLASH_WaitForLastOperation+0x32>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3301      	adds	r3, #1
 80088a4:	d009      	beq.n	80088ba <FLASH_WaitForLastOperation+0x32>
 80088a6:	f7fe f8f9 	bl	8006a9c <HAL_GetTick>
 80088aa:	0002      	movs	r2, r0
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d801      	bhi.n	80088ba <FLASH_WaitForLastOperation+0x32>
 80088b6:	2303      	movs	r3, #3
 80088b8:	e028      	b.n	800890c <FLASH_WaitForLastOperation+0x84>
 80088ba:	4b16      	ldr	r3, [pc, #88]	@ (8008914 <FLASH_WaitForLastOperation+0x8c>)
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	4013      	ands	r3, r2
 80088c2:	d1ed      	bne.n	80088a0 <FLASH_WaitForLastOperation+0x18>
 80088c4:	4b13      	ldr	r3, [pc, #76]	@ (8008914 <FLASH_WaitForLastOperation+0x8c>)
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	4a13      	ldr	r2, [pc, #76]	@ (8008918 <FLASH_WaitForLastOperation+0x90>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	60bb      	str	r3, [r7, #8]
 80088ce:	4b11      	ldr	r3, [pc, #68]	@ (8008914 <FLASH_WaitForLastOperation+0x8c>)
 80088d0:	4a12      	ldr	r2, [pc, #72]	@ (800891c <FLASH_WaitForLastOperation+0x94>)
 80088d2:	611a      	str	r2, [r3, #16]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d011      	beq.n	80088fe <FLASH_WaitForLastOperation+0x76>
 80088da:	4b11      	ldr	r3, [pc, #68]	@ (8008920 <FLASH_WaitForLastOperation+0x98>)
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	2301      	movs	r3, #1
 80088e2:	e013      	b.n	800890c <FLASH_WaitForLastOperation+0x84>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3301      	adds	r3, #1
 80088e8:	d009      	beq.n	80088fe <FLASH_WaitForLastOperation+0x76>
 80088ea:	f7fe f8d7 	bl	8006a9c <HAL_GetTick>
 80088ee:	0002      	movs	r2, r0
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d801      	bhi.n	80088fe <FLASH_WaitForLastOperation+0x76>
 80088fa:	2303      	movs	r3, #3
 80088fc:	e006      	b.n	800890c <FLASH_WaitForLastOperation+0x84>
 80088fe:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <FLASH_WaitForLastOperation+0x8c>)
 8008900:	691a      	ldr	r2, [r3, #16]
 8008902:	2380      	movs	r3, #128	@ 0x80
 8008904:	02db      	lsls	r3, r3, #11
 8008906:	4013      	ands	r3, r2
 8008908:	d1ec      	bne.n	80088e4 <FLASH_WaitForLastOperation+0x5c>
 800890a:	2300      	movs	r3, #0
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b004      	add	sp, #16
 8008912:	bd80      	pop	{r7, pc}
 8008914:	40022000 	.word	0x40022000
 8008918:	0000c3fa 	.word	0x0000c3fa
 800891c:	0000c3fb 	.word	0x0000c3fb
 8008920:	20000db0 	.word	0x20000db0

08008924 <FLASH_Program_DoubleWord>:
 8008924:	b5b0      	push	{r4, r5, r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	603a      	str	r2, [r7, #0]
 800892e:	607b      	str	r3, [r7, #4]
 8008930:	4b0b      	ldr	r3, [pc, #44]	@ (8008960 <FLASH_Program_DoubleWord+0x3c>)
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <FLASH_Program_DoubleWord+0x3c>)
 8008936:	2101      	movs	r1, #1
 8008938:	430a      	orrs	r2, r1
 800893a:	615a      	str	r2, [r3, #20]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	001c      	movs	r4, r3
 800894c:	2300      	movs	r3, #0
 800894e:	001d      	movs	r5, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3304      	adds	r3, #4
 8008954:	0022      	movs	r2, r4
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	46c0      	nop			@ (mov r8, r8)
 800895a:	46bd      	mov	sp, r7
 800895c:	b004      	add	sp, #16
 800895e:	bdb0      	pop	{r4, r5, r7, pc}
 8008960:	40022000 	.word	0x40022000

08008964 <HAL_FLASHEx_Erase>:
 8008964:	b5b0      	push	{r4, r5, r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	4b35      	ldr	r3, [pc, #212]	@ (8008a44 <HAL_FLASHEx_Erase+0xe0>)
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <HAL_FLASHEx_Erase+0x16>
 8008976:	2302      	movs	r3, #2
 8008978:	e05f      	b.n	8008a3a <HAL_FLASHEx_Erase+0xd6>
 800897a:	4b32      	ldr	r3, [pc, #200]	@ (8008a44 <HAL_FLASHEx_Erase+0xe0>)
 800897c:	2201      	movs	r2, #1
 800897e:	701a      	strb	r2, [r3, #0]
 8008980:	4b30      	ldr	r3, [pc, #192]	@ (8008a44 <HAL_FLASHEx_Erase+0xe0>)
 8008982:	2200      	movs	r2, #0
 8008984:	605a      	str	r2, [r3, #4]
 8008986:	250f      	movs	r5, #15
 8008988:	197c      	adds	r4, r7, r5
 800898a:	23fa      	movs	r3, #250	@ 0xfa
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	0018      	movs	r0, r3
 8008990:	f7ff ff7a 	bl	8008888 <FLASH_WaitForLastOperation>
 8008994:	0003      	movs	r3, r0
 8008996:	7023      	strb	r3, [r4, #0]
 8008998:	002c      	movs	r4, r5
 800899a:	193b      	adds	r3, r7, r4
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d145      	bne.n	8008a2e <HAL_FLASHEx_Erase+0xca>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2204      	movs	r2, #4
 80089a6:	605a      	str	r2, [r3, #4]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b04      	cmp	r3, #4
 80089ae:	d10d      	bne.n	80089cc <HAL_FLASHEx_Erase+0x68>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	0018      	movs	r0, r3
 80089b6:	f000 f849 	bl	8008a4c <FLASH_MassErase>
 80089ba:	193c      	adds	r4, r7, r4
 80089bc:	23fa      	movs	r3, #250	@ 0xfa
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	0018      	movs	r0, r3
 80089c2:	f7ff ff61 	bl	8008888 <FLASH_WaitForLastOperation>
 80089c6:	0003      	movs	r3, r0
 80089c8:	7023      	strb	r3, [r4, #0]
 80089ca:	e030      	b.n	8008a2e <HAL_FLASHEx_Erase+0xca>
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2201      	movs	r2, #1
 80089d0:	4252      	negs	r2, r2
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	60bb      	str	r3, [r7, #8]
 80089da:	e01a      	b.n	8008a12 <HAL_FLASHEx_Erase+0xae>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	68ba      	ldr	r2, [r7, #8]
 80089e2:	0011      	movs	r1, r2
 80089e4:	0018      	movs	r0, r3
 80089e6:	f000 f845 	bl	8008a74 <FLASH_PageErase>
 80089ea:	250f      	movs	r5, #15
 80089ec:	197c      	adds	r4, r7, r5
 80089ee:	23fa      	movs	r3, #250	@ 0xfa
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	0018      	movs	r0, r3
 80089f4:	f7ff ff48 	bl	8008888 <FLASH_WaitForLastOperation>
 80089f8:	0003      	movs	r3, r0
 80089fa:	7023      	strb	r3, [r4, #0]
 80089fc:	197b      	adds	r3, r7, r5
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_FLASHEx_Erase+0xa8>
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e00a      	b.n	8008a22 <HAL_FLASHEx_Erase+0xbe>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	60bb      	str	r3, [r7, #8]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	18d3      	adds	r3, r2, r3
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d3dc      	bcc.n	80089dc <HAL_FLASHEx_Erase+0x78>
 8008a22:	4b09      	ldr	r3, [pc, #36]	@ (8008a48 <HAL_FLASHEx_Erase+0xe4>)
 8008a24:	695a      	ldr	r2, [r3, #20]
 8008a26:	4b08      	ldr	r3, [pc, #32]	@ (8008a48 <HAL_FLASHEx_Erase+0xe4>)
 8008a28:	2102      	movs	r1, #2
 8008a2a:	438a      	bics	r2, r1
 8008a2c:	615a      	str	r2, [r3, #20]
 8008a2e:	4b05      	ldr	r3, [pc, #20]	@ (8008a44 <HAL_FLASHEx_Erase+0xe0>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	230f      	movs	r3, #15
 8008a36:	18fb      	adds	r3, r7, r3
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	0018      	movs	r0, r3
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	b004      	add	sp, #16
 8008a40:	bdb0      	pop	{r4, r5, r7, pc}
 8008a42:	46c0      	nop			@ (mov r8, r8)
 8008a44:	20000db0 	.word	0x20000db0
 8008a48:	40022000 	.word	0x40022000

08008a4c <FLASH_MassErase>:
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <FLASH_MassErase+0x24>)
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	4b04      	ldr	r3, [pc, #16]	@ (8008a70 <FLASH_MassErase+0x24>)
 8008a5e:	2180      	movs	r1, #128	@ 0x80
 8008a60:	0249      	lsls	r1, r1, #9
 8008a62:	430a      	orrs	r2, r1
 8008a64:	615a      	str	r2, [r3, #20]
 8008a66:	46c0      	nop			@ (mov r8, r8)
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			@ (mov r8, r8)
 8008a70:	40022000 	.word	0x40022000

08008a74 <FLASH_PageErase>:
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
 8008a7e:	4b08      	ldr	r3, [pc, #32]	@ (8008aa0 <FLASH_PageErase+0x2c>)
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	4a08      	ldr	r2, [pc, #32]	@ (8008aa4 <FLASH_PageErase+0x30>)
 8008a84:	4013      	ands	r3, r2
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	00da      	lsls	r2, r3, #3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	4b03      	ldr	r3, [pc, #12]	@ (8008aa0 <FLASH_PageErase+0x2c>)
 8008a92:	4905      	ldr	r1, [pc, #20]	@ (8008aa8 <FLASH_PageErase+0x34>)
 8008a94:	430a      	orrs	r2, r1
 8008a96:	615a      	str	r2, [r3, #20]
 8008a98:	46c0      	nop			@ (mov r8, r8)
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	b004      	add	sp, #16
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	40022000 	.word	0x40022000
 8008aa4:	ffffe007 	.word	0xffffe007
 8008aa8:	00010002 	.word	0x00010002

08008aac <HAL_GPIO_Init>:
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	617b      	str	r3, [r7, #20]
 8008aba:	e147      	b.n	8008d4c <HAL_GPIO_Init+0x2a0>
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4091      	lsls	r1, r2
 8008ac6:	000a      	movs	r2, r1
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d100      	bne.n	8008ad4 <HAL_GPIO_Init+0x28>
 8008ad2:	e138      	b.n	8008d46 <HAL_GPIO_Init+0x29a>
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d005      	beq.n	8008aec <HAL_GPIO_Init+0x40>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d130      	bne.n	8008b4e <HAL_GPIO_Init+0xa2>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	2203      	movs	r2, #3
 8008af8:	409a      	lsls	r2, r3
 8008afa:	0013      	movs	r3, r2
 8008afc:	43da      	mvns	r2, r3
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4013      	ands	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	409a      	lsls	r2, r3
 8008b0e:	0013      	movs	r3, r2
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	609a      	str	r2, [r3, #8]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]
 8008b22:	2201      	movs	r2, #1
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	409a      	lsls	r2, r3
 8008b28:	0013      	movs	r3, r2
 8008b2a:	43da      	mvns	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	2201      	movs	r2, #1
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	0013      	movs	r3, r2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2203      	movs	r2, #3
 8008b54:	4013      	ands	r3, r2
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d017      	beq.n	8008b8a <HAL_GPIO_Init+0xde>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2203      	movs	r2, #3
 8008b66:	409a      	lsls	r2, r3
 8008b68:	0013      	movs	r3, r2
 8008b6a:	43da      	mvns	r2, r3
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	0013      	movs	r3, r2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d123      	bne.n	8008bde <HAL_GPIO_Init+0x132>
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	08da      	lsrs	r2, r3, #3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3208      	adds	r2, #8
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	58d3      	ldr	r3, [r2, r3]
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2207      	movs	r2, #7
 8008ba8:	4013      	ands	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	220f      	movs	r2, #15
 8008bae:	409a      	lsls	r2, r3
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	43da      	mvns	r2, r3
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2107      	movs	r1, #7
 8008bc2:	400b      	ands	r3, r1
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	0013      	movs	r3, r2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	08da      	lsrs	r2, r3, #3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3208      	adds	r2, #8
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	6939      	ldr	r1, [r7, #16]
 8008bdc:	50d1      	str	r1, [r2, r3]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	2203      	movs	r2, #3
 8008bea:	409a      	lsls	r2, r3
 8008bec:	0013      	movs	r3, r2
 8008bee:	43da      	mvns	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	401a      	ands	r2, r3
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	409a      	lsls	r2, r3
 8008c04:	0013      	movs	r3, r2
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	601a      	str	r2, [r3, #0]
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	23c0      	movs	r3, #192	@ 0xc0
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	d100      	bne.n	8008c20 <HAL_GPIO_Init+0x174>
 8008c1e:	e092      	b.n	8008d46 <HAL_GPIO_Init+0x29a>
 8008c20:	4a50      	ldr	r2, [pc, #320]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	089b      	lsrs	r3, r3, #2
 8008c26:	3318      	adds	r3, #24
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	589b      	ldr	r3, [r3, r2]
 8008c2c:	613b      	str	r3, [r7, #16]
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2203      	movs	r2, #3
 8008c32:	4013      	ands	r3, r2
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	220f      	movs	r2, #15
 8008c38:	409a      	lsls	r2, r3
 8008c3a:	0013      	movs	r3, r2
 8008c3c:	43da      	mvns	r2, r3
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	4013      	ands	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	23a0      	movs	r3, #160	@ 0xa0
 8008c48:	05db      	lsls	r3, r3, #23
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d013      	beq.n	8008c76 <HAL_GPIO_Init+0x1ca>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a45      	ldr	r2, [pc, #276]	@ (8008d68 <HAL_GPIO_Init+0x2bc>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d00d      	beq.n	8008c72 <HAL_GPIO_Init+0x1c6>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a44      	ldr	r2, [pc, #272]	@ (8008d6c <HAL_GPIO_Init+0x2c0>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d007      	beq.n	8008c6e <HAL_GPIO_Init+0x1c2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a43      	ldr	r2, [pc, #268]	@ (8008d70 <HAL_GPIO_Init+0x2c4>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d101      	bne.n	8008c6a <HAL_GPIO_Init+0x1be>
 8008c66:	2303      	movs	r3, #3
 8008c68:	e006      	b.n	8008c78 <HAL_GPIO_Init+0x1cc>
 8008c6a:	2305      	movs	r3, #5
 8008c6c:	e004      	b.n	8008c78 <HAL_GPIO_Init+0x1cc>
 8008c6e:	2302      	movs	r3, #2
 8008c70:	e002      	b.n	8008c78 <HAL_GPIO_Init+0x1cc>
 8008c72:	2301      	movs	r3, #1
 8008c74:	e000      	b.n	8008c78 <HAL_GPIO_Init+0x1cc>
 8008c76:	2300      	movs	r3, #0
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	2103      	movs	r1, #3
 8008c7c:	400a      	ands	r2, r1
 8008c7e:	00d2      	lsls	r2, r2, #3
 8008c80:	4093      	lsls	r3, r2
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	4936      	ldr	r1, [pc, #216]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	3318      	adds	r3, #24
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	505a      	str	r2, [r3, r1]
 8008c96:	4b33      	ldr	r3, [pc, #204]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	613b      	str	r3, [r7, #16]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	43da      	mvns	r2, r3
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	2380      	movs	r3, #128	@ 0x80
 8008cac:	035b      	lsls	r3, r3, #13
 8008cae:	4013      	ands	r3, r2
 8008cb0:	d003      	beq.n	8008cba <HAL_GPIO_Init+0x20e>
 8008cb2:	693a      	ldr	r2, [r7, #16]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	4b2a      	ldr	r3, [pc, #168]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	4b28      	ldr	r3, [pc, #160]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	43da      	mvns	r2, r3
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685a      	ldr	r2, [r3, #4]
 8008cd4:	2380      	movs	r3, #128	@ 0x80
 8008cd6:	039b      	lsls	r3, r3, #14
 8008cd8:	4013      	ands	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <HAL_GPIO_Init+0x238>
 8008cdc:	693a      	ldr	r2, [r7, #16]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
 8008ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008cec:	2384      	movs	r3, #132	@ 0x84
 8008cee:	58d3      	ldr	r3, [r2, r3]
 8008cf0:	613b      	str	r3, [r7, #16]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	43da      	mvns	r2, r3
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	613b      	str	r3, [r7, #16]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	2380      	movs	r3, #128	@ 0x80
 8008d02:	029b      	lsls	r3, r3, #10
 8008d04:	4013      	ands	r3, r2
 8008d06:	d003      	beq.n	8008d10 <HAL_GPIO_Init+0x264>
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]
 8008d10:	4914      	ldr	r1, [pc, #80]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008d12:	2284      	movs	r2, #132	@ 0x84
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	508b      	str	r3, [r1, r2]
 8008d18:	4a12      	ldr	r2, [pc, #72]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008d1a:	2380      	movs	r3, #128	@ 0x80
 8008d1c:	58d3      	ldr	r3, [r2, r3]
 8008d1e:	613b      	str	r3, [r7, #16]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	43da      	mvns	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4013      	ands	r3, r2
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685a      	ldr	r2, [r3, #4]
 8008d2e:	2380      	movs	r3, #128	@ 0x80
 8008d30:	025b      	lsls	r3, r3, #9
 8008d32:	4013      	ands	r3, r2
 8008d34:	d003      	beq.n	8008d3e <HAL_GPIO_Init+0x292>
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]
 8008d3e:	4909      	ldr	r1, [pc, #36]	@ (8008d64 <HAL_GPIO_Init+0x2b8>)
 8008d40:	2280      	movs	r2, #128	@ 0x80
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	508b      	str	r3, [r1, r2]
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	40da      	lsrs	r2, r3
 8008d54:	1e13      	subs	r3, r2, #0
 8008d56:	d000      	beq.n	8008d5a <HAL_GPIO_Init+0x2ae>
 8008d58:	e6b0      	b.n	8008abc <HAL_GPIO_Init+0x10>
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	46c0      	nop			@ (mov r8, r8)
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	b006      	add	sp, #24
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	40021800 	.word	0x40021800
 8008d68:	50000400 	.word	0x50000400
 8008d6c:	50000800 	.word	0x50000800
 8008d70:	50000c00 	.word	0x50000c00

08008d74 <HAL_GPIO_ReadPin>:
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b084      	sub	sp, #16
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	000a      	movs	r2, r1
 8008d7e:	1cbb      	adds	r3, r7, #2
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	1cba      	adds	r2, r7, #2
 8008d88:	8812      	ldrh	r2, [r2, #0]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	d004      	beq.n	8008d98 <HAL_GPIO_ReadPin+0x24>
 8008d8e:	230f      	movs	r3, #15
 8008d90:	18fb      	adds	r3, r7, r3
 8008d92:	2201      	movs	r2, #1
 8008d94:	701a      	strb	r2, [r3, #0]
 8008d96:	e003      	b.n	8008da0 <HAL_GPIO_ReadPin+0x2c>
 8008d98:	230f      	movs	r3, #15
 8008d9a:	18fb      	adds	r3, r7, r3
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	701a      	strb	r2, [r3, #0]
 8008da0:	230f      	movs	r3, #15
 8008da2:	18fb      	adds	r3, r7, r3
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	0018      	movs	r0, r3
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b004      	add	sp, #16
 8008dac:	bd80      	pop	{r7, pc}

08008dae <HAL_GPIO_WritePin>:
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b082      	sub	sp, #8
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	0008      	movs	r0, r1
 8008db8:	0011      	movs	r1, r2
 8008dba:	1cbb      	adds	r3, r7, #2
 8008dbc:	1c02      	adds	r2, r0, #0
 8008dbe:	801a      	strh	r2, [r3, #0]
 8008dc0:	1c7b      	adds	r3, r7, #1
 8008dc2:	1c0a      	adds	r2, r1, #0
 8008dc4:	701a      	strb	r2, [r3, #0]
 8008dc6:	1c7b      	adds	r3, r7, #1
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <HAL_GPIO_WritePin+0x2a>
 8008dce:	1cbb      	adds	r3, r7, #2
 8008dd0:	881a      	ldrh	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	619a      	str	r2, [r3, #24]
 8008dd6:	e003      	b.n	8008de0 <HAL_GPIO_WritePin+0x32>
 8008dd8:	1cbb      	adds	r3, r7, #2
 8008dda:	881a      	ldrh	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	629a      	str	r2, [r3, #40]	@ 0x28
 8008de0:	46c0      	nop			@ (mov r8, r8)
 8008de2:	46bd      	mov	sp, r7
 8008de4:	b002      	add	sp, #8
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <HAL_GPIO_EXTI_IRQHandler>:
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	0002      	movs	r2, r0
 8008df0:	1dbb      	adds	r3, r7, #6
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	4b10      	ldr	r3, [pc, #64]	@ (8008e38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	1dba      	adds	r2, r7, #6
 8008dfa:	8812      	ldrh	r2, [r2, #0]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	d008      	beq.n	8008e12 <HAL_GPIO_EXTI_IRQHandler+0x2a>
 8008e00:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e02:	1dba      	adds	r2, r7, #6
 8008e04:	8812      	ldrh	r2, [r2, #0]
 8008e06:	60da      	str	r2, [r3, #12]
 8008e08:	1dbb      	adds	r3, r7, #6
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f7fb f91d 	bl	800404c <HAL_GPIO_EXTI_Rising_Callback>
 8008e12:	4b09      	ldr	r3, [pc, #36]	@ (8008e38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	1dba      	adds	r2, r7, #6
 8008e18:	8812      	ldrh	r2, [r2, #0]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	d008      	beq.n	8008e30 <HAL_GPIO_EXTI_IRQHandler+0x48>
 8008e1e:	4b06      	ldr	r3, [pc, #24]	@ (8008e38 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8008e20:	1dba      	adds	r2, r7, #6
 8008e22:	8812      	ldrh	r2, [r2, #0]
 8008e24:	611a      	str	r2, [r3, #16]
 8008e26:	1dbb      	adds	r3, r7, #6
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7fb f8e4 	bl	8003ff8 <HAL_GPIO_EXTI_Falling_Callback>
 8008e30:	46c0      	nop			@ (mov r8, r8)
 8008e32:	46bd      	mov	sp, r7
 8008e34:	b002      	add	sp, #8
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	40021800 	.word	0x40021800

08008e3c <HAL_LPTIM_Init>:
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d101      	bne.n	8008e4e <HAL_LPTIM_Init+0x12>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e097      	b.n	8008f7e <HAL_LPTIM_Init+0x142>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2236      	movs	r2, #54	@ 0x36
 8008e52:	5c9b      	ldrb	r3, [r3, r2]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d113      	bne.n	8008e82 <HAL_LPTIM_Init+0x46>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2235      	movs	r2, #53	@ 0x35
 8008e5e:	2100      	movs	r1, #0
 8008e60:	5499      	strb	r1, [r3, r2]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	0018      	movs	r0, r3
 8008e66:	f000 fa8f 	bl	8009388 <LPTIM_ResetCallback>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d102      	bne.n	8008e78 <HAL_LPTIM_Init+0x3c>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a44      	ldr	r2, [pc, #272]	@ (8008f88 <HAL_LPTIM_Init+0x14c>)
 8008e76:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	0010      	movs	r0, r2
 8008e80:	4798      	blx	r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2236      	movs	r2, #54	@ 0x36
 8008e86:	2102      	movs	r1, #2
 8008e88:	5499      	strb	r1, [r3, r2]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	60fb      	str	r3, [r7, #12]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d005      	beq.n	8008ea6 <HAL_LPTIM_Init+0x6a>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e9e:	2380      	movs	r3, #128	@ 0x80
 8008ea0:	041b      	lsls	r3, r3, #16
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	d103      	bne.n	8008eae <HAL_LPTIM_Init+0x72>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	221e      	movs	r2, #30
 8008eaa:	4393      	bics	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	4a36      	ldr	r2, [pc, #216]	@ (8008f8c <HAL_LPTIM_Init+0x150>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <HAL_LPTIM_Init+0x84>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4a35      	ldr	r2, [pc, #212]	@ (8008f90 <HAL_LPTIM_Init+0x154>)
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	4a34      	ldr	r2, [pc, #208]	@ (8008f94 <HAL_LPTIM_Init+0x158>)
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	431a      	orrs	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a1b      	ldr	r3, [r3, #32]
 8008ed6:	431a      	orrs	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008edc:	431a      	orrs	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d107      	bne.n	8008f02 <HAL_LPTIM_Init+0xc6>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d005      	beq.n	8008f16 <HAL_LPTIM_Init+0xda>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f0e:	2380      	movs	r3, #128	@ 0x80
 8008f10:	041b      	lsls	r3, r3, #16
 8008f12:	429a      	cmp	r2, r3
 8008f14:	d107      	bne.n	8008f26 <HAL_LPTIM_Init+0xea>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	68da      	ldr	r2, [r3, #12]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691b      	ldr	r3, [r3, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4313      	orrs	r3, r2
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	4a18      	ldr	r2, [pc, #96]	@ (8008f8c <HAL_LPTIM_Init+0x150>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d00a      	beq.n	8008f46 <HAL_LPTIM_Init+0x10a>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	695a      	ldr	r2, [r3, #20]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	431a      	orrs	r2, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	60da      	str	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a11      	ldr	r2, [pc, #68]	@ (8008f98 <HAL_LPTIM_Init+0x15c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d108      	bne.n	8008f6a <HAL_LPTIM_Init+0x12e>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f68:	e004      	b.n	8008f74 <HAL_LPTIM_Init+0x138>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f72:	625a      	str	r2, [r3, #36]	@ 0x24
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2236      	movs	r2, #54	@ 0x36
 8008f78:	2101      	movs	r1, #1
 8008f7a:	5499      	strb	r1, [r3, r2]
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	0018      	movs	r0, r3
 8008f80:	46bd      	mov	sp, r7
 8008f82:	b004      	add	sp, #16
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	46c0      	nop			@ (mov r8, r8)
 8008f88:	080058f5 	.word	0x080058f5
 8008f8c:	0000ffff 	.word	0x0000ffff
 8008f90:	ffff1f3f 	.word	0xffff1f3f
 8008f94:	ff19f1fe 	.word	0xff19f1fe
 8008f98:	40007c00 	.word	0x40007c00

08008f9c <HAL_LPTIM_SetOnce_Start_IT>:
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2236      	movs	r2, #54	@ 0x36
 8008fac:	2102      	movs	r1, #2
 8008fae:	5499      	strb	r1, [r3, r2]
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68da      	ldr	r2, [r3, #12]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2180      	movs	r1, #128	@ 0x80
 8008fbc:	0349      	lsls	r1, r1, #13
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	60da      	str	r2, [r3, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	691a      	ldr	r2, [r3, #16]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2101      	movs	r1, #1
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	611a      	str	r2, [r3, #16]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2210      	movs	r2, #16
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	619a      	str	r2, [r3, #24]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2110      	movs	r1, #16
 8008fe6:	0018      	movs	r0, r3
 8008fe8:	f000 f9fa 	bl	80093e0 <LPTIM_WaitForFlag>
 8008fec:	0003      	movs	r3, r0
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d101      	bne.n	8008ff6 <HAL_LPTIM_SetOnce_Start_IT+0x5a>
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e060      	b.n	80090b8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	605a      	str	r2, [r3, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	615a      	str	r2, [r3, #20]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2108      	movs	r1, #8
 800900a:	0018      	movs	r0, r3
 800900c:	f000 f9e8 	bl	80093e0 <LPTIM_WaitForFlag>
 8009010:	0003      	movs	r3, r0
 8009012:	2b03      	cmp	r3, #3
 8009014:	d101      	bne.n	800901a <HAL_LPTIM_SetOnce_Start_IT+0x7e>
 8009016:	2303      	movs	r3, #3
 8009018:	e04e      	b.n	80090b8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	0018      	movs	r0, r3
 800901e:	f000 fa17 	bl	8009450 <LPTIM_Disable>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	0018      	movs	r0, r3
 8009026:	f000 f9a3 	bl	8009370 <HAL_LPTIM_GetState>
 800902a:	0003      	movs	r3, r0
 800902c:	2b03      	cmp	r3, #3
 800902e:	d101      	bne.n	8009034 <HAL_LPTIM_SetOnce_Start_IT+0x98>
 8009030:	2303      	movs	r3, #3
 8009032:	e041      	b.n	80090b8 <HAL_LPTIM_SetOnce_Start_IT+0x11c>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2110      	movs	r1, #16
 8009040:	430a      	orrs	r2, r1
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689a      	ldr	r2, [r3, #8]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	2108      	movs	r1, #8
 8009050:	430a      	orrs	r2, r1
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2102      	movs	r1, #2
 8009060:	430a      	orrs	r2, r1
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	689a      	ldr	r2, [r3, #8]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2101      	movs	r1, #1
 8009070:	430a      	orrs	r2, r1
 8009072:	609a      	str	r2, [r3, #8]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	4a11      	ldr	r2, [pc, #68]	@ (80090c0 <HAL_LPTIM_SetOnce_Start_IT+0x124>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <HAL_LPTIM_SetOnce_Start_IT+0xf2>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	689a      	ldr	r2, [r3, #8]
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2104      	movs	r1, #4
 800908a:	430a      	orrs	r2, r1
 800908c:	609a      	str	r2, [r3, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	691a      	ldr	r2, [r3, #16]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	2101      	movs	r1, #1
 800909a:	430a      	orrs	r2, r1
 800909c:	611a      	str	r2, [r3, #16]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2102      	movs	r1, #2
 80090aa:	430a      	orrs	r2, r1
 80090ac:	611a      	str	r2, [r3, #16]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2236      	movs	r2, #54	@ 0x36
 80090b2:	2101      	movs	r1, #1
 80090b4:	5499      	strb	r1, [r3, r2]
 80090b6:	2300      	movs	r3, #0
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b004      	add	sp, #16
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	0000ffff 	.word	0x0000ffff

080090c4 <HAL_LPTIM_IRQHandler>:
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2201      	movs	r2, #1
 80090d4:	4013      	ands	r3, r2
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d10f      	bne.n	80090fa <HAL_LPTIM_IRQHandler+0x36>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	2201      	movs	r2, #1
 80090e2:	4013      	ands	r3, r2
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d108      	bne.n	80090fa <HAL_LPTIM_IRQHandler+0x36>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2201      	movs	r2, #1
 80090ee:	605a      	str	r2, [r3, #4]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	0010      	movs	r0, r2
 80090f8:	4798      	blx	r3
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2202      	movs	r2, #2
 8009102:	4013      	ands	r3, r2
 8009104:	2b02      	cmp	r3, #2
 8009106:	d10f      	bne.n	8009128 <HAL_LPTIM_IRQHandler+0x64>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	2202      	movs	r2, #2
 8009110:	4013      	ands	r3, r2
 8009112:	2b02      	cmp	r3, #2
 8009114:	d108      	bne.n	8009128 <HAL_LPTIM_IRQHandler+0x64>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2202      	movs	r2, #2
 800911c:	605a      	str	r2, [r3, #4]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	0010      	movs	r0, r2
 8009126:	4798      	blx	r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2204      	movs	r2, #4
 8009130:	4013      	ands	r3, r2
 8009132:	2b04      	cmp	r3, #4
 8009134:	d10f      	bne.n	8009156 <HAL_LPTIM_IRQHandler+0x92>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	2204      	movs	r2, #4
 800913e:	4013      	ands	r3, r2
 8009140:	2b04      	cmp	r3, #4
 8009142:	d108      	bne.n	8009156 <HAL_LPTIM_IRQHandler+0x92>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2204      	movs	r2, #4
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	0010      	movs	r0, r2
 8009154:	4798      	blx	r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2208      	movs	r2, #8
 800915e:	4013      	ands	r3, r2
 8009160:	2b08      	cmp	r3, #8
 8009162:	d10f      	bne.n	8009184 <HAL_LPTIM_IRQHandler+0xc0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	2208      	movs	r2, #8
 800916c:	4013      	ands	r3, r2
 800916e:	2b08      	cmp	r3, #8
 8009170:	d108      	bne.n	8009184 <HAL_LPTIM_IRQHandler+0xc0>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2208      	movs	r2, #8
 8009178:	605a      	str	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	0010      	movs	r0, r2
 8009182:	4798      	blx	r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2210      	movs	r2, #16
 800918c:	4013      	ands	r3, r2
 800918e:	2b10      	cmp	r3, #16
 8009190:	d10f      	bne.n	80091b2 <HAL_LPTIM_IRQHandler+0xee>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	689b      	ldr	r3, [r3, #8]
 8009198:	2210      	movs	r2, #16
 800919a:	4013      	ands	r3, r2
 800919c:	2b10      	cmp	r3, #16
 800919e:	d108      	bne.n	80091b2 <HAL_LPTIM_IRQHandler+0xee>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2210      	movs	r2, #16
 80091a6:	605a      	str	r2, [r3, #4]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	0010      	movs	r0, r2
 80091b0:	4798      	blx	r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2220      	movs	r2, #32
 80091ba:	4013      	ands	r3, r2
 80091bc:	2b20      	cmp	r3, #32
 80091be:	d10f      	bne.n	80091e0 <HAL_LPTIM_IRQHandler+0x11c>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2220      	movs	r2, #32
 80091c8:	4013      	ands	r3, r2
 80091ca:	2b20      	cmp	r3, #32
 80091cc:	d108      	bne.n	80091e0 <HAL_LPTIM_IRQHandler+0x11c>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	2220      	movs	r2, #32
 80091d4:	605a      	str	r2, [r3, #4]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	0010      	movs	r0, r2
 80091de:	4798      	blx	r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2240      	movs	r2, #64	@ 0x40
 80091e8:	4013      	ands	r3, r2
 80091ea:	2b40      	cmp	r3, #64	@ 0x40
 80091ec:	d10f      	bne.n	800920e <HAL_LPTIM_IRQHandler+0x14a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2240      	movs	r2, #64	@ 0x40
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b40      	cmp	r3, #64	@ 0x40
 80091fa:	d108      	bne.n	800920e <HAL_LPTIM_IRQHandler+0x14a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2240      	movs	r2, #64	@ 0x40
 8009202:	605a      	str	r2, [r3, #4]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	0010      	movs	r0, r2
 800920c:	4798      	blx	r3
 800920e:	46c0      	nop			@ (mov r8, r8)
 8009210:	46bd      	mov	sp, r7
 8009212:	b002      	add	sp, #8
 8009214:	bd80      	pop	{r7, pc}

08009216 <HAL_LPTIM_CompareMatchCallback>:
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	46c0      	nop			@ (mov r8, r8)
 8009220:	46bd      	mov	sp, r7
 8009222:	b002      	add	sp, #8
 8009224:	bd80      	pop	{r7, pc}

08009226 <HAL_LPTIM_AutoReloadMatchCallback>:
 8009226:	b580      	push	{r7, lr}
 8009228:	b082      	sub	sp, #8
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	46c0      	nop			@ (mov r8, r8)
 8009230:	46bd      	mov	sp, r7
 8009232:	b002      	add	sp, #8
 8009234:	bd80      	pop	{r7, pc}

08009236 <HAL_LPTIM_TriggerCallback>:
 8009236:	b580      	push	{r7, lr}
 8009238:	b082      	sub	sp, #8
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	46c0      	nop			@ (mov r8, r8)
 8009240:	46bd      	mov	sp, r7
 8009242:	b002      	add	sp, #8
 8009244:	bd80      	pop	{r7, pc}

08009246 <HAL_LPTIM_CompareWriteCallback>:
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	46c0      	nop			@ (mov r8, r8)
 8009250:	46bd      	mov	sp, r7
 8009252:	b002      	add	sp, #8
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_LPTIM_AutoReloadWriteCallback>:
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	46bd      	mov	sp, r7
 8009262:	b002      	add	sp, #8
 8009264:	bd80      	pop	{r7, pc}

08009266 <HAL_LPTIM_DirectionUpCallback>:
 8009266:	b580      	push	{r7, lr}
 8009268:	b082      	sub	sp, #8
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	46bd      	mov	sp, r7
 8009272:	b002      	add	sp, #8
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_LPTIM_DirectionDownCallback>:
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
 800927e:	46c0      	nop			@ (mov r8, r8)
 8009280:	46bd      	mov	sp, r7
 8009282:	b002      	add	sp, #8
 8009284:	bd80      	pop	{r7, pc}
	...

08009288 <HAL_LPTIM_RegisterCallback>:
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	607a      	str	r2, [r7, #4]
 8009292:	230b      	movs	r3, #11
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	1c0a      	adds	r2, r1, #0
 8009298:	701a      	strb	r2, [r3, #0]
 800929a:	2317      	movs	r3, #23
 800929c:	18fb      	adds	r3, r7, r3
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d101      	bne.n	80092ac <HAL_LPTIM_RegisterCallback+0x24>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e05a      	b.n	8009362 <HAL_LPTIM_RegisterCallback+0xda>
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2236      	movs	r2, #54	@ 0x36
 80092b0:	5c9b      	ldrb	r3, [r3, r2]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d132      	bne.n	800931e <HAL_LPTIM_RegisterCallback+0x96>
 80092b8:	230b      	movs	r3, #11
 80092ba:	18fb      	adds	r3, r7, r3
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	2b08      	cmp	r3, #8
 80092c0:	d828      	bhi.n	8009314 <HAL_LPTIM_RegisterCallback+0x8c>
 80092c2:	009a      	lsls	r2, r3, #2
 80092c4:	4b29      	ldr	r3, [pc, #164]	@ (800936c <HAL_LPTIM_RegisterCallback+0xe4>)
 80092c6:	18d3      	adds	r3, r2, r3
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	469f      	mov	pc, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80092d2:	e043      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80092da:	e03f      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80092e2:	e03b      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80092ea:	e037      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	649a      	str	r2, [r3, #72]	@ 0x48
 80092f2:	e033      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80092fa:	e02f      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	651a      	str	r2, [r3, #80]	@ 0x50
 8009302:	e02b      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	655a      	str	r2, [r3, #84]	@ 0x54
 800930a:	e027      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	659a      	str	r2, [r3, #88]	@ 0x58
 8009312:	e023      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 8009314:	2317      	movs	r3, #23
 8009316:	18fb      	adds	r3, r7, r3
 8009318:	2201      	movs	r2, #1
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e01e      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2236      	movs	r2, #54	@ 0x36
 8009322:	5c9b      	ldrb	r3, [r3, r2]
 8009324:	b2db      	uxtb	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	d114      	bne.n	8009354 <HAL_LPTIM_RegisterCallback+0xcc>
 800932a:	230b      	movs	r3, #11
 800932c:	18fb      	adds	r3, r7, r3
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d002      	beq.n	800933a <HAL_LPTIM_RegisterCallback+0xb2>
 8009334:	2b01      	cmp	r3, #1
 8009336:	d004      	beq.n	8009342 <HAL_LPTIM_RegisterCallback+0xba>
 8009338:	e007      	b.n	800934a <HAL_LPTIM_RegisterCallback+0xc2>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	639a      	str	r2, [r3, #56]	@ 0x38
 8009340:	e00c      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009348:	e008      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 800934a:	2317      	movs	r3, #23
 800934c:	18fb      	adds	r3, r7, r3
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]
 8009352:	e003      	b.n	800935c <HAL_LPTIM_RegisterCallback+0xd4>
 8009354:	2317      	movs	r3, #23
 8009356:	18fb      	adds	r3, r7, r3
 8009358:	2201      	movs	r2, #1
 800935a:	701a      	strb	r2, [r3, #0]
 800935c:	2317      	movs	r3, #23
 800935e:	18fb      	adds	r3, r7, r3
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	0018      	movs	r0, r3
 8009364:	46bd      	mov	sp, r7
 8009366:	b006      	add	sp, #24
 8009368:	bd80      	pop	{r7, pc}
 800936a:	46c0      	nop			@ (mov r8, r8)
 800936c:	0800e9f0 	.word	0x0800e9f0

08009370 <HAL_LPTIM_GetState>:
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2236      	movs	r2, #54	@ 0x36
 800937c:	5c9b      	ldrb	r3, [r3, r2]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	0018      	movs	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	b002      	add	sp, #8
 8009386:	bd80      	pop	{r7, pc}

08009388 <LPTIM_ResetCallback>:
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4a0c      	ldr	r2, [pc, #48]	@ (80093c4 <LPTIM_ResetCallback+0x3c>)
 8009394:	641a      	str	r2, [r3, #64]	@ 0x40
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a0b      	ldr	r2, [pc, #44]	@ (80093c8 <LPTIM_ResetCallback+0x40>)
 800939a:	645a      	str	r2, [r3, #68]	@ 0x44
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <LPTIM_ResetCallback+0x44>)
 80093a0:	649a      	str	r2, [r3, #72]	@ 0x48
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a0a      	ldr	r2, [pc, #40]	@ (80093d0 <LPTIM_ResetCallback+0x48>)
 80093a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	4a0a      	ldr	r2, [pc, #40]	@ (80093d4 <LPTIM_ResetCallback+0x4c>)
 80093ac:	651a      	str	r2, [r3, #80]	@ 0x50
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a09      	ldr	r2, [pc, #36]	@ (80093d8 <LPTIM_ResetCallback+0x50>)
 80093b2:	655a      	str	r2, [r3, #84]	@ 0x54
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4a09      	ldr	r2, [pc, #36]	@ (80093dc <LPTIM_ResetCallback+0x54>)
 80093b8:	659a      	str	r2, [r3, #88]	@ 0x58
 80093ba:	46c0      	nop			@ (mov r8, r8)
 80093bc:	46bd      	mov	sp, r7
 80093be:	b002      	add	sp, #8
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	46c0      	nop			@ (mov r8, r8)
 80093c4:	08009217 	.word	0x08009217
 80093c8:	08009227 	.word	0x08009227
 80093cc:	08009237 	.word	0x08009237
 80093d0:	08009247 	.word	0x08009247
 80093d4:	08009257 	.word	0x08009257
 80093d8:	08009267 	.word	0x08009267
 80093dc:	08009277 	.word	0x08009277

080093e0 <LPTIM_WaitForFlag>:
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
 80093ea:	230f      	movs	r3, #15
 80093ec:	18fb      	adds	r3, r7, r3
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
 80093f2:	4b15      	ldr	r3, [pc, #84]	@ (8009448 <LPTIM_WaitForFlag+0x68>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4915      	ldr	r1, [pc, #84]	@ (800944c <LPTIM_WaitForFlag+0x6c>)
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7f6 fe85 	bl	8000108 <__udivsi3>
 80093fe:	0003      	movs	r3, r0
 8009400:	001a      	movs	r2, r3
 8009402:	0013      	movs	r3, r2
 8009404:	015b      	lsls	r3, r3, #5
 8009406:	1a9b      	subs	r3, r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	189b      	adds	r3, r3, r2
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	60bb      	str	r3, [r7, #8]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	3b01      	subs	r3, #1
 8009414:	60bb      	str	r3, [r7, #8]
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d103      	bne.n	8009424 <LPTIM_WaitForFlag+0x44>
 800941c:	230f      	movs	r3, #15
 800941e:	18fb      	adds	r3, r7, r3
 8009420:	2203      	movs	r2, #3
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4013      	ands	r3, r2
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d002      	beq.n	800943a <LPTIM_WaitForFlag+0x5a>
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1ea      	bne.n	8009410 <LPTIM_WaitForFlag+0x30>
 800943a:	230f      	movs	r3, #15
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	0018      	movs	r0, r3
 8009442:	46bd      	mov	sp, r7
 8009444:	b004      	add	sp, #16
 8009446:	bd80      	pop	{r7, pc}
 8009448:	2000044c 	.word	0x2000044c
 800944c:	00004e20 	.word	0x00004e20

08009450 <LPTIM_Disable>:
 8009450:	b580      	push	{r7, lr}
 8009452:	b08c      	sub	sp, #48	@ 0x30
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	2300      	movs	r3, #0
 800945a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800945c:	f3ef 8310 	mrs	r3, PRIMASK
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009466:	2301      	movs	r3, #1
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f383 8810 	msr	PRIMASK, r3
 8009470:	46c0      	nop			@ (mov r8, r8)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a72      	ldr	r2, [pc, #456]	@ (8009640 <LPTIM_Disable+0x1f0>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d003      	beq.n	8009484 <LPTIM_Disable+0x34>
 800947c:	4a71      	ldr	r2, [pc, #452]	@ (8009644 <LPTIM_Disable+0x1f4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d007      	beq.n	8009492 <LPTIM_Disable+0x42>
 8009482:	e00d      	b.n	80094a0 <LPTIM_Disable+0x50>
 8009484:	4b70      	ldr	r3, [pc, #448]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009486:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009488:	23c0      	movs	r3, #192	@ 0xc0
 800948a:	031b      	lsls	r3, r3, #12
 800948c:	4013      	ands	r3, r2
 800948e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009490:	e006      	b.n	80094a0 <LPTIM_Disable+0x50>
 8009492:	4b6d      	ldr	r3, [pc, #436]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009496:	23c0      	movs	r3, #192	@ 0xc0
 8009498:	039b      	lsls	r3, r3, #14
 800949a:	4013      	ands	r3, r2
 800949c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800949e:	46c0      	nop			@ (mov r8, r8)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	623b      	str	r3, [r7, #32]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	61fb      	str	r3, [r7, #28]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	699b      	ldr	r3, [r3, #24]
 80094be:	61bb      	str	r3, [r7, #24]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a5c      	ldr	r2, [pc, #368]	@ (8009640 <LPTIM_Disable+0x1f0>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d003      	beq.n	80094da <LPTIM_Disable+0x8a>
 80094d2:	4a5c      	ldr	r2, [pc, #368]	@ (8009644 <LPTIM_Disable+0x1f4>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d00e      	beq.n	80094f6 <LPTIM_Disable+0xa6>
 80094d8:	e01b      	b.n	8009512 <LPTIM_Disable+0xc2>
 80094da:	4b5b      	ldr	r3, [pc, #364]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094de:	4b5a      	ldr	r3, [pc, #360]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094e0:	2180      	movs	r1, #128	@ 0x80
 80094e2:	0609      	lsls	r1, r1, #24
 80094e4:	430a      	orrs	r2, r1
 80094e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094e8:	4b57      	ldr	r3, [pc, #348]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ec:	4b56      	ldr	r3, [pc, #344]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094ee:	0052      	lsls	r2, r2, #1
 80094f0:	0852      	lsrs	r2, r2, #1
 80094f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80094f4:	e00d      	b.n	8009512 <LPTIM_Disable+0xc2>
 80094f6:	4b54      	ldr	r3, [pc, #336]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094fa:	4b53      	ldr	r3, [pc, #332]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80094fc:	2180      	movs	r1, #128	@ 0x80
 80094fe:	05c9      	lsls	r1, r1, #23
 8009500:	430a      	orrs	r2, r1
 8009502:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009504:	4b50      	ldr	r3, [pc, #320]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009508:	4b4f      	ldr	r3, [pc, #316]	@ (8009648 <LPTIM_Disable+0x1f8>)
 800950a:	4950      	ldr	r1, [pc, #320]	@ (800964c <LPTIM_Disable+0x1fc>)
 800950c:	400a      	ands	r2, r1
 800950e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009510:	46c0      	nop			@ (mov r8, r8)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d103      	bne.n	8009520 <LPTIM_Disable+0xd0>
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d100      	bne.n	8009520 <LPTIM_Disable+0xd0>
 800951e:	e071      	b.n	8009604 <LPTIM_Disable+0x1b4>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a46      	ldr	r2, [pc, #280]	@ (8009640 <LPTIM_Disable+0x1f0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <LPTIM_Disable+0xe2>
 800952a:	4a46      	ldr	r2, [pc, #280]	@ (8009644 <LPTIM_Disable+0x1f4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d007      	beq.n	8009540 <LPTIM_Disable+0xf0>
 8009530:	e00d      	b.n	800954e <LPTIM_Disable+0xfe>
 8009532:	4b45      	ldr	r3, [pc, #276]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009534:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009536:	4b44      	ldr	r3, [pc, #272]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009538:	4945      	ldr	r1, [pc, #276]	@ (8009650 <LPTIM_Disable+0x200>)
 800953a:	400a      	ands	r2, r1
 800953c:	655a      	str	r2, [r3, #84]	@ 0x54
 800953e:	e006      	b.n	800954e <LPTIM_Disable+0xfe>
 8009540:	4b41      	ldr	r3, [pc, #260]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009542:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009544:	4b40      	ldr	r3, [pc, #256]	@ (8009648 <LPTIM_Disable+0x1f8>)
 8009546:	4943      	ldr	r1, [pc, #268]	@ (8009654 <LPTIM_Disable+0x204>)
 8009548:	400a      	ands	r2, r1
 800954a:	655a      	str	r2, [r3, #84]	@ 0x54
 800954c:	46c0      	nop			@ (mov r8, r8)
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01b      	beq.n	800958c <LPTIM_Disable+0x13c>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	691a      	ldr	r2, [r3, #16]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2101      	movs	r1, #1
 8009560:	430a      	orrs	r2, r1
 8009562:	611a      	str	r2, [r3, #16]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	69fa      	ldr	r2, [r7, #28]
 800956a:	615a      	str	r2, [r3, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2108      	movs	r1, #8
 8009570:	0018      	movs	r0, r3
 8009572:	f7ff ff35 	bl	80093e0 <LPTIM_WaitForFlag>
 8009576:	0003      	movs	r3, r0
 8009578:	2b03      	cmp	r3, #3
 800957a:	d103      	bne.n	8009584 <LPTIM_Disable+0x134>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2236      	movs	r2, #54	@ 0x36
 8009580:	2103      	movs	r1, #3
 8009582:	5499      	strb	r1, [r3, r2]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2208      	movs	r2, #8
 800958a:	605a      	str	r2, [r3, #4]
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01b      	beq.n	80095ca <LPTIM_Disable+0x17a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	691a      	ldr	r2, [r3, #16]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2101      	movs	r1, #1
 800959e:	430a      	orrs	r2, r1
 80095a0:	611a      	str	r2, [r3, #16]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	69ba      	ldr	r2, [r7, #24]
 80095a8:	619a      	str	r2, [r3, #24]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2110      	movs	r1, #16
 80095ae:	0018      	movs	r0, r3
 80095b0:	f7ff ff16 	bl	80093e0 <LPTIM_WaitForFlag>
 80095b4:	0003      	movs	r3, r0
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d103      	bne.n	80095c2 <LPTIM_Disable+0x172>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2236      	movs	r2, #54	@ 0x36
 80095be:	2103      	movs	r1, #3
 80095c0:	5499      	strb	r1, [r3, r2]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2210      	movs	r2, #16
 80095c8:	605a      	str	r2, [r3, #4]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009640 <LPTIM_Disable+0x1f0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d003      	beq.n	80095dc <LPTIM_Disable+0x18c>
 80095d4:	4a1b      	ldr	r2, [pc, #108]	@ (8009644 <LPTIM_Disable+0x1f4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00a      	beq.n	80095f0 <LPTIM_Disable+0x1a0>
 80095da:	e013      	b.n	8009604 <LPTIM_Disable+0x1b4>
 80095dc:	4b1a      	ldr	r3, [pc, #104]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80095de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009650 <LPTIM_Disable+0x200>)
 80095e2:	4013      	ands	r3, r2
 80095e4:	0019      	movs	r1, r3
 80095e6:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80095e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095ea:	430a      	orrs	r2, r1
 80095ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80095ee:	e009      	b.n	8009604 <LPTIM_Disable+0x1b4>
 80095f0:	4b15      	ldr	r3, [pc, #84]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80095f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095f4:	4a17      	ldr	r2, [pc, #92]	@ (8009654 <LPTIM_Disable+0x204>)
 80095f6:	4013      	ands	r3, r2
 80095f8:	0019      	movs	r1, r3
 80095fa:	4b13      	ldr	r3, [pc, #76]	@ (8009648 <LPTIM_Disable+0x1f8>)
 80095fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095fe:	430a      	orrs	r2, r1
 8009600:	655a      	str	r2, [r3, #84]	@ 0x54
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691a      	ldr	r2, [r3, #16]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2101      	movs	r1, #1
 8009610:	438a      	bics	r2, r1
 8009612:	611a      	str	r2, [r3, #16]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800961a:	609a      	str	r2, [r3, #8]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6a3a      	ldr	r2, [r7, #32]
 8009622:	60da      	str	r2, [r3, #12]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	625a      	str	r2, [r3, #36]	@ 0x24
 800962c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800962e:	60bb      	str	r3, [r7, #8]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	f383 8810 	msr	PRIMASK, r3
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	46c0      	nop			@ (mov r8, r8)
 800963a:	46bd      	mov	sp, r7
 800963c:	b00c      	add	sp, #48	@ 0x30
 800963e:	bd80      	pop	{r7, pc}
 8009640:	40007c00 	.word	0x40007c00
 8009644:	40009400 	.word	0x40009400
 8009648:	40021000 	.word	0x40021000
 800964c:	bfffffff 	.word	0xbfffffff
 8009650:	fff3ffff 	.word	0xfff3ffff
 8009654:	ffcfffff 	.word	0xffcfffff

08009658 <HAL_PWREx_ControlVoltageScaling>:
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	4b19      	ldr	r3, [pc, #100]	@ (80096c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a19      	ldr	r2, [pc, #100]	@ (80096cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009666:	4013      	ands	r3, r2
 8009668:	0019      	movs	r1, r3
 800966a:	4b17      	ldr	r3, [pc, #92]	@ (80096c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	430a      	orrs	r2, r1
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	2380      	movs	r3, #128	@ 0x80
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	429a      	cmp	r2, r3
 800967a:	d11f      	bne.n	80096bc <HAL_PWREx_ControlVoltageScaling+0x64>
 800967c:	4b14      	ldr	r3, [pc, #80]	@ (80096d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	0013      	movs	r3, r2
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	189b      	adds	r3, r3, r2
 8009686:	005b      	lsls	r3, r3, #1
 8009688:	4912      	ldr	r1, [pc, #72]	@ (80096d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800968a:	0018      	movs	r0, r3
 800968c:	f7f6 fd3c 	bl	8000108 <__udivsi3>
 8009690:	0003      	movs	r3, r0
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	e008      	b.n	80096aa <HAL_PWREx_ControlVoltageScaling+0x52>
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d003      	beq.n	80096a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3b01      	subs	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e001      	b.n	80096aa <HAL_PWREx_ControlVoltageScaling+0x52>
 80096a6:	2303      	movs	r3, #3
 80096a8:	e009      	b.n	80096be <HAL_PWREx_ControlVoltageScaling+0x66>
 80096aa:	4b07      	ldr	r3, [pc, #28]	@ (80096c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	2380      	movs	r3, #128	@ 0x80
 80096b0:	00db      	lsls	r3, r3, #3
 80096b2:	401a      	ands	r2, r3
 80096b4:	2380      	movs	r3, #128	@ 0x80
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d0ed      	beq.n	8009698 <HAL_PWREx_ControlVoltageScaling+0x40>
 80096bc:	2300      	movs	r3, #0
 80096be:	0018      	movs	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	b004      	add	sp, #16
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	46c0      	nop			@ (mov r8, r8)
 80096c8:	40007000 	.word	0x40007000
 80096cc:	fffff9ff 	.word	0xfffff9ff
 80096d0:	2000044c 	.word	0x2000044c
 80096d4:	000f4240 	.word	0x000f4240

080096d8 <LL_RCC_GetAPB1Prescaler>:
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
 80096dc:	4b03      	ldr	r3, [pc, #12]	@ (80096ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80096de:	689a      	ldr	r2, [r3, #8]
 80096e0:	23e0      	movs	r3, #224	@ 0xe0
 80096e2:	01db      	lsls	r3, r3, #7
 80096e4:	4013      	ands	r3, r2
 80096e6:	0018      	movs	r0, r3
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	40021000 	.word	0x40021000

080096f0 <HAL_RCC_OscConfig>:
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d101      	bne.n	8009702 <HAL_RCC_OscConfig+0x12>
 80096fe:	2301      	movs	r3, #1
 8009700:	e2fe      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	2201      	movs	r2, #1
 8009708:	4013      	ands	r3, r2
 800970a:	d100      	bne.n	800970e <HAL_RCC_OscConfig+0x1e>
 800970c:	e07c      	b.n	8009808 <HAL_RCC_OscConfig+0x118>
 800970e:	4bc3      	ldr	r3, [pc, #780]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	2238      	movs	r2, #56	@ 0x38
 8009714:	4013      	ands	r3, r2
 8009716:	61bb      	str	r3, [r7, #24]
 8009718:	4bc0      	ldr	r3, [pc, #768]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	2203      	movs	r2, #3
 800971e:	4013      	ands	r3, r2
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	2b10      	cmp	r3, #16
 8009726:	d102      	bne.n	800972e <HAL_RCC_OscConfig+0x3e>
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	2b03      	cmp	r3, #3
 800972c:	d002      	beq.n	8009734 <HAL_RCC_OscConfig+0x44>
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2b08      	cmp	r3, #8
 8009732:	d10b      	bne.n	800974c <HAL_RCC_OscConfig+0x5c>
 8009734:	4bb9      	ldr	r3, [pc, #740]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	2380      	movs	r3, #128	@ 0x80
 800973a:	029b      	lsls	r3, r3, #10
 800973c:	4013      	ands	r3, r2
 800973e:	d062      	beq.n	8009806 <HAL_RCC_OscConfig+0x116>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d15e      	bne.n	8009806 <HAL_RCC_OscConfig+0x116>
 8009748:	2301      	movs	r3, #1
 800974a:	e2d9      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	2380      	movs	r3, #128	@ 0x80
 8009752:	025b      	lsls	r3, r3, #9
 8009754:	429a      	cmp	r2, r3
 8009756:	d107      	bne.n	8009768 <HAL_RCC_OscConfig+0x78>
 8009758:	4bb0      	ldr	r3, [pc, #704]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	4baf      	ldr	r3, [pc, #700]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800975e:	2180      	movs	r1, #128	@ 0x80
 8009760:	0249      	lsls	r1, r1, #9
 8009762:	430a      	orrs	r2, r1
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	e020      	b.n	80097aa <HAL_RCC_OscConfig+0xba>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685a      	ldr	r2, [r3, #4]
 800976c:	23a0      	movs	r3, #160	@ 0xa0
 800976e:	02db      	lsls	r3, r3, #11
 8009770:	429a      	cmp	r2, r3
 8009772:	d10e      	bne.n	8009792 <HAL_RCC_OscConfig+0xa2>
 8009774:	4ba9      	ldr	r3, [pc, #676]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	4ba8      	ldr	r3, [pc, #672]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800977a:	2180      	movs	r1, #128	@ 0x80
 800977c:	02c9      	lsls	r1, r1, #11
 800977e:	430a      	orrs	r2, r1
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	4ba6      	ldr	r3, [pc, #664]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4ba5      	ldr	r3, [pc, #660]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009788:	2180      	movs	r1, #128	@ 0x80
 800978a:	0249      	lsls	r1, r1, #9
 800978c:	430a      	orrs	r2, r1
 800978e:	601a      	str	r2, [r3, #0]
 8009790:	e00b      	b.n	80097aa <HAL_RCC_OscConfig+0xba>
 8009792:	4ba2      	ldr	r3, [pc, #648]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	4ba1      	ldr	r3, [pc, #644]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009798:	49a1      	ldr	r1, [pc, #644]	@ (8009a20 <HAL_RCC_OscConfig+0x330>)
 800979a:	400a      	ands	r2, r1
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	4b9f      	ldr	r3, [pc, #636]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b9e      	ldr	r3, [pc, #632]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80097a4:	499f      	ldr	r1, [pc, #636]	@ (8009a24 <HAL_RCC_OscConfig+0x334>)
 80097a6:	400a      	ands	r2, r1
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d014      	beq.n	80097dc <HAL_RCC_OscConfig+0xec>
 80097b2:	f7fd f973 	bl	8006a9c <HAL_GetTick>
 80097b6:	0003      	movs	r3, r0
 80097b8:	613b      	str	r3, [r7, #16]
 80097ba:	e008      	b.n	80097ce <HAL_RCC_OscConfig+0xde>
 80097bc:	f7fd f96e 	bl	8006a9c <HAL_GetTick>
 80097c0:	0002      	movs	r2, r0
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	1ad3      	subs	r3, r2, r3
 80097c6:	2b64      	cmp	r3, #100	@ 0x64
 80097c8:	d901      	bls.n	80097ce <HAL_RCC_OscConfig+0xde>
 80097ca:	2303      	movs	r3, #3
 80097cc:	e298      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80097ce:	4b93      	ldr	r3, [pc, #588]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	2380      	movs	r3, #128	@ 0x80
 80097d4:	029b      	lsls	r3, r3, #10
 80097d6:	4013      	ands	r3, r2
 80097d8:	d0f0      	beq.n	80097bc <HAL_RCC_OscConfig+0xcc>
 80097da:	e015      	b.n	8009808 <HAL_RCC_OscConfig+0x118>
 80097dc:	f7fd f95e 	bl	8006a9c <HAL_GetTick>
 80097e0:	0003      	movs	r3, r0
 80097e2:	613b      	str	r3, [r7, #16]
 80097e4:	e008      	b.n	80097f8 <HAL_RCC_OscConfig+0x108>
 80097e6:	f7fd f959 	bl	8006a9c <HAL_GetTick>
 80097ea:	0002      	movs	r2, r0
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	2b64      	cmp	r3, #100	@ 0x64
 80097f2:	d901      	bls.n	80097f8 <HAL_RCC_OscConfig+0x108>
 80097f4:	2303      	movs	r3, #3
 80097f6:	e283      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80097f8:	4b88      	ldr	r3, [pc, #544]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	2380      	movs	r3, #128	@ 0x80
 80097fe:	029b      	lsls	r3, r3, #10
 8009800:	4013      	ands	r3, r2
 8009802:	d1f0      	bne.n	80097e6 <HAL_RCC_OscConfig+0xf6>
 8009804:	e000      	b.n	8009808 <HAL_RCC_OscConfig+0x118>
 8009806:	46c0      	nop			@ (mov r8, r8)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2202      	movs	r2, #2
 800980e:	4013      	ands	r3, r2
 8009810:	d100      	bne.n	8009814 <HAL_RCC_OscConfig+0x124>
 8009812:	e099      	b.n	8009948 <HAL_RCC_OscConfig+0x258>
 8009814:	4b81      	ldr	r3, [pc, #516]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2238      	movs	r2, #56	@ 0x38
 800981a:	4013      	ands	r3, r2
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	4b7f      	ldr	r3, [pc, #508]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	2203      	movs	r2, #3
 8009824:	4013      	ands	r3, r2
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	69bb      	ldr	r3, [r7, #24]
 800982a:	2b10      	cmp	r3, #16
 800982c:	d102      	bne.n	8009834 <HAL_RCC_OscConfig+0x144>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	2b02      	cmp	r3, #2
 8009832:	d002      	beq.n	800983a <HAL_RCC_OscConfig+0x14a>
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d135      	bne.n	80098a6 <HAL_RCC_OscConfig+0x1b6>
 800983a:	4b78      	ldr	r3, [pc, #480]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	2380      	movs	r3, #128	@ 0x80
 8009840:	00db      	lsls	r3, r3, #3
 8009842:	4013      	ands	r3, r2
 8009844:	d005      	beq.n	8009852 <HAL_RCC_OscConfig+0x162>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d101      	bne.n	8009852 <HAL_RCC_OscConfig+0x162>
 800984e:	2301      	movs	r3, #1
 8009850:	e256      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009852:	4b72      	ldr	r3, [pc, #456]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	4a74      	ldr	r2, [pc, #464]	@ (8009a28 <HAL_RCC_OscConfig+0x338>)
 8009858:	4013      	ands	r3, r2
 800985a:	0019      	movs	r1, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	021a      	lsls	r2, r3, #8
 8009862:	4b6e      	ldr	r3, [pc, #440]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009864:	430a      	orrs	r2, r1
 8009866:	605a      	str	r2, [r3, #4]
 8009868:	69bb      	ldr	r3, [r7, #24]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d112      	bne.n	8009894 <HAL_RCC_OscConfig+0x1a4>
 800986e:	4b6b      	ldr	r3, [pc, #428]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a6e      	ldr	r2, [pc, #440]	@ (8009a2c <HAL_RCC_OscConfig+0x33c>)
 8009874:	4013      	ands	r3, r2
 8009876:	0019      	movs	r1, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	4b67      	ldr	r3, [pc, #412]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800987e:	430a      	orrs	r2, r1
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	4b66      	ldr	r3, [pc, #408]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	0adb      	lsrs	r3, r3, #11
 8009888:	2207      	movs	r2, #7
 800988a:	4013      	ands	r3, r2
 800988c:	4a68      	ldr	r2, [pc, #416]	@ (8009a30 <HAL_RCC_OscConfig+0x340>)
 800988e:	40da      	lsrs	r2, r3
 8009890:	4b68      	ldr	r3, [pc, #416]	@ (8009a34 <HAL_RCC_OscConfig+0x344>)
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	4b68      	ldr	r3, [pc, #416]	@ (8009a38 <HAL_RCC_OscConfig+0x348>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	0018      	movs	r0, r3
 800989a:	f7fd f8a3 	bl	80069e4 <HAL_InitTick>
 800989e:	1e03      	subs	r3, r0, #0
 80098a0:	d051      	beq.n	8009946 <HAL_RCC_OscConfig+0x256>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e22c      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d030      	beq.n	8009910 <HAL_RCC_OscConfig+0x220>
 80098ae:	4b5b      	ldr	r3, [pc, #364]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a5e      	ldr	r2, [pc, #376]	@ (8009a2c <HAL_RCC_OscConfig+0x33c>)
 80098b4:	4013      	ands	r3, r2
 80098b6:	0019      	movs	r1, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	4b57      	ldr	r3, [pc, #348]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098be:	430a      	orrs	r2, r1
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	4b56      	ldr	r3, [pc, #344]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b55      	ldr	r3, [pc, #340]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098c8:	2180      	movs	r1, #128	@ 0x80
 80098ca:	0049      	lsls	r1, r1, #1
 80098cc:	430a      	orrs	r2, r1
 80098ce:	601a      	str	r2, [r3, #0]
 80098d0:	f7fd f8e4 	bl	8006a9c <HAL_GetTick>
 80098d4:	0003      	movs	r3, r0
 80098d6:	613b      	str	r3, [r7, #16]
 80098d8:	e008      	b.n	80098ec <HAL_RCC_OscConfig+0x1fc>
 80098da:	f7fd f8df 	bl	8006a9c <HAL_GetTick>
 80098de:	0002      	movs	r2, r0
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d901      	bls.n	80098ec <HAL_RCC_OscConfig+0x1fc>
 80098e8:	2303      	movs	r3, #3
 80098ea:	e209      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80098ec:	4b4b      	ldr	r3, [pc, #300]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	2380      	movs	r3, #128	@ 0x80
 80098f2:	00db      	lsls	r3, r3, #3
 80098f4:	4013      	ands	r3, r2
 80098f6:	d0f0      	beq.n	80098da <HAL_RCC_OscConfig+0x1ea>
 80098f8:	4b48      	ldr	r3, [pc, #288]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a4a      	ldr	r2, [pc, #296]	@ (8009a28 <HAL_RCC_OscConfig+0x338>)
 80098fe:	4013      	ands	r3, r2
 8009900:	0019      	movs	r1, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	021a      	lsls	r2, r3, #8
 8009908:	4b44      	ldr	r3, [pc, #272]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800990a:	430a      	orrs	r2, r1
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	e01b      	b.n	8009948 <HAL_RCC_OscConfig+0x258>
 8009910:	4b42      	ldr	r3, [pc, #264]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	4b41      	ldr	r3, [pc, #260]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009916:	4949      	ldr	r1, [pc, #292]	@ (8009a3c <HAL_RCC_OscConfig+0x34c>)
 8009918:	400a      	ands	r2, r1
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	f7fd f8be 	bl	8006a9c <HAL_GetTick>
 8009920:	0003      	movs	r3, r0
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	e008      	b.n	8009938 <HAL_RCC_OscConfig+0x248>
 8009926:	f7fd f8b9 	bl	8006a9c <HAL_GetTick>
 800992a:	0002      	movs	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d901      	bls.n	8009938 <HAL_RCC_OscConfig+0x248>
 8009934:	2303      	movs	r3, #3
 8009936:	e1e3      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009938:	4b38      	ldr	r3, [pc, #224]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	2380      	movs	r3, #128	@ 0x80
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	4013      	ands	r3, r2
 8009942:	d1f0      	bne.n	8009926 <HAL_RCC_OscConfig+0x236>
 8009944:	e000      	b.n	8009948 <HAL_RCC_OscConfig+0x258>
 8009946:	46c0      	nop			@ (mov r8, r8)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	2208      	movs	r2, #8
 800994e:	4013      	ands	r3, r2
 8009950:	d047      	beq.n	80099e2 <HAL_RCC_OscConfig+0x2f2>
 8009952:	4b32      	ldr	r3, [pc, #200]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	2238      	movs	r2, #56	@ 0x38
 8009958:	4013      	ands	r3, r2
 800995a:	2b18      	cmp	r3, #24
 800995c:	d10a      	bne.n	8009974 <HAL_RCC_OscConfig+0x284>
 800995e:	4b2f      	ldr	r3, [pc, #188]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009962:	2202      	movs	r2, #2
 8009964:	4013      	ands	r3, r2
 8009966:	d03c      	beq.n	80099e2 <HAL_RCC_OscConfig+0x2f2>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d138      	bne.n	80099e2 <HAL_RCC_OscConfig+0x2f2>
 8009970:	2301      	movs	r3, #1
 8009972:	e1c5      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d019      	beq.n	80099b0 <HAL_RCC_OscConfig+0x2c0>
 800997c:	4b27      	ldr	r3, [pc, #156]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 800997e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009980:	4b26      	ldr	r3, [pc, #152]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009982:	2101      	movs	r1, #1
 8009984:	430a      	orrs	r2, r1
 8009986:	661a      	str	r2, [r3, #96]	@ 0x60
 8009988:	f7fd f888 	bl	8006a9c <HAL_GetTick>
 800998c:	0003      	movs	r3, r0
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	e008      	b.n	80099a4 <HAL_RCC_OscConfig+0x2b4>
 8009992:	f7fd f883 	bl	8006a9c <HAL_GetTick>
 8009996:	0002      	movs	r2, r0
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	2b02      	cmp	r3, #2
 800999e:	d901      	bls.n	80099a4 <HAL_RCC_OscConfig+0x2b4>
 80099a0:	2303      	movs	r3, #3
 80099a2:	e1ad      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80099a4:	4b1d      	ldr	r3, [pc, #116]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80099a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099a8:	2202      	movs	r2, #2
 80099aa:	4013      	ands	r3, r2
 80099ac:	d0f1      	beq.n	8009992 <HAL_RCC_OscConfig+0x2a2>
 80099ae:	e018      	b.n	80099e2 <HAL_RCC_OscConfig+0x2f2>
 80099b0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80099b2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80099b4:	4b19      	ldr	r3, [pc, #100]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80099b6:	2101      	movs	r1, #1
 80099b8:	438a      	bics	r2, r1
 80099ba:	661a      	str	r2, [r3, #96]	@ 0x60
 80099bc:	f7fd f86e 	bl	8006a9c <HAL_GetTick>
 80099c0:	0003      	movs	r3, r0
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	e008      	b.n	80099d8 <HAL_RCC_OscConfig+0x2e8>
 80099c6:	f7fd f869 	bl	8006a9c <HAL_GetTick>
 80099ca:	0002      	movs	r2, r0
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d901      	bls.n	80099d8 <HAL_RCC_OscConfig+0x2e8>
 80099d4:	2303      	movs	r3, #3
 80099d6:	e193      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 80099d8:	4b10      	ldr	r3, [pc, #64]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80099da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099dc:	2202      	movs	r2, #2
 80099de:	4013      	ands	r3, r2
 80099e0:	d1f1      	bne.n	80099c6 <HAL_RCC_OscConfig+0x2d6>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2204      	movs	r2, #4
 80099e8:	4013      	ands	r3, r2
 80099ea:	d100      	bne.n	80099ee <HAL_RCC_OscConfig+0x2fe>
 80099ec:	e0c6      	b.n	8009b7c <HAL_RCC_OscConfig+0x48c>
 80099ee:	231f      	movs	r3, #31
 80099f0:	18fb      	adds	r3, r7, r3
 80099f2:	2200      	movs	r2, #0
 80099f4:	701a      	strb	r2, [r3, #0]
 80099f6:	4b09      	ldr	r3, [pc, #36]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	2238      	movs	r2, #56	@ 0x38
 80099fc:	4013      	ands	r3, r2
 80099fe:	2b20      	cmp	r3, #32
 8009a00:	d11e      	bne.n	8009a40 <HAL_RCC_OscConfig+0x350>
 8009a02:	4b06      	ldr	r3, [pc, #24]	@ (8009a1c <HAL_RCC_OscConfig+0x32c>)
 8009a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a06:	2202      	movs	r2, #2
 8009a08:	4013      	ands	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <HAL_RCC_OscConfig+0x31e>
 8009a0c:	e0b6      	b.n	8009b7c <HAL_RCC_OscConfig+0x48c>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d000      	beq.n	8009a18 <HAL_RCC_OscConfig+0x328>
 8009a16:	e0b1      	b.n	8009b7c <HAL_RCC_OscConfig+0x48c>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e171      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009a1c:	40021000 	.word	0x40021000
 8009a20:	fffeffff 	.word	0xfffeffff
 8009a24:	fffbffff 	.word	0xfffbffff
 8009a28:	ffff80ff 	.word	0xffff80ff
 8009a2c:	ffffc7ff 	.word	0xffffc7ff
 8009a30:	00f42400 	.word	0x00f42400
 8009a34:	2000044c 	.word	0x2000044c
 8009a38:	20000450 	.word	0x20000450
 8009a3c:	fffffeff 	.word	0xfffffeff
 8009a40:	4bb1      	ldr	r3, [pc, #708]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009a42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a44:	2380      	movs	r3, #128	@ 0x80
 8009a46:	055b      	lsls	r3, r3, #21
 8009a48:	4013      	ands	r3, r2
 8009a4a:	d101      	bne.n	8009a50 <HAL_RCC_OscConfig+0x360>
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	e000      	b.n	8009a52 <HAL_RCC_OscConfig+0x362>
 8009a50:	2300      	movs	r3, #0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d011      	beq.n	8009a7a <HAL_RCC_OscConfig+0x38a>
 8009a56:	4bac      	ldr	r3, [pc, #688]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009a58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a5a:	4bab      	ldr	r3, [pc, #684]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009a5c:	2180      	movs	r1, #128	@ 0x80
 8009a5e:	0549      	lsls	r1, r1, #21
 8009a60:	430a      	orrs	r2, r1
 8009a62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009a64:	4ba8      	ldr	r3, [pc, #672]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009a66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009a68:	2380      	movs	r3, #128	@ 0x80
 8009a6a:	055b      	lsls	r3, r3, #21
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	231f      	movs	r3, #31
 8009a74:	18fb      	adds	r3, r7, r3
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	4ba4      	ldr	r3, [pc, #656]	@ (8009d0c <HAL_RCC_OscConfig+0x61c>)
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	2380      	movs	r3, #128	@ 0x80
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	4013      	ands	r3, r2
 8009a84:	d11a      	bne.n	8009abc <HAL_RCC_OscConfig+0x3cc>
 8009a86:	4ba1      	ldr	r3, [pc, #644]	@ (8009d0c <HAL_RCC_OscConfig+0x61c>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	4ba0      	ldr	r3, [pc, #640]	@ (8009d0c <HAL_RCC_OscConfig+0x61c>)
 8009a8c:	2180      	movs	r1, #128	@ 0x80
 8009a8e:	0049      	lsls	r1, r1, #1
 8009a90:	430a      	orrs	r2, r1
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	f7fd f802 	bl	8006a9c <HAL_GetTick>
 8009a98:	0003      	movs	r3, r0
 8009a9a:	613b      	str	r3, [r7, #16]
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCC_OscConfig+0x3c0>
 8009a9e:	f7fc fffd 	bl	8006a9c <HAL_GetTick>
 8009aa2:	0002      	movs	r2, r0
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d901      	bls.n	8009ab0 <HAL_RCC_OscConfig+0x3c0>
 8009aac:	2303      	movs	r3, #3
 8009aae:	e127      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009ab0:	4b96      	ldr	r3, [pc, #600]	@ (8009d0c <HAL_RCC_OscConfig+0x61c>)
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	2380      	movs	r3, #128	@ 0x80
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	4013      	ands	r3, r2
 8009aba:	d0f0      	beq.n	8009a9e <HAL_RCC_OscConfig+0x3ae>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d106      	bne.n	8009ad2 <HAL_RCC_OscConfig+0x3e2>
 8009ac4:	4b90      	ldr	r3, [pc, #576]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009ac6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ac8:	4b8f      	ldr	r3, [pc, #572]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009aca:	2101      	movs	r1, #1
 8009acc:	430a      	orrs	r2, r1
 8009ace:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009ad0:	e01c      	b.n	8009b0c <HAL_RCC_OscConfig+0x41c>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	2b05      	cmp	r3, #5
 8009ad8:	d10c      	bne.n	8009af4 <HAL_RCC_OscConfig+0x404>
 8009ada:	4b8b      	ldr	r3, [pc, #556]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009adc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009ade:	4b8a      	ldr	r3, [pc, #552]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009ae0:	2104      	movs	r1, #4
 8009ae2:	430a      	orrs	r2, r1
 8009ae4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009ae6:	4b88      	ldr	r3, [pc, #544]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009ae8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009aea:	4b87      	ldr	r3, [pc, #540]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009aec:	2101      	movs	r1, #1
 8009aee:	430a      	orrs	r2, r1
 8009af0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009af2:	e00b      	b.n	8009b0c <HAL_RCC_OscConfig+0x41c>
 8009af4:	4b84      	ldr	r3, [pc, #528]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009af6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009af8:	4b83      	ldr	r3, [pc, #524]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009afa:	2101      	movs	r1, #1
 8009afc:	438a      	bics	r2, r1
 8009afe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b00:	4b81      	ldr	r3, [pc, #516]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b02:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009b04:	4b80      	ldr	r3, [pc, #512]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b06:	2104      	movs	r1, #4
 8009b08:	438a      	bics	r2, r1
 8009b0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d014      	beq.n	8009b3e <HAL_RCC_OscConfig+0x44e>
 8009b14:	f7fc ffc2 	bl	8006a9c <HAL_GetTick>
 8009b18:	0003      	movs	r3, r0
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	e009      	b.n	8009b32 <HAL_RCC_OscConfig+0x442>
 8009b1e:	f7fc ffbd 	bl	8006a9c <HAL_GetTick>
 8009b22:	0002      	movs	r2, r0
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	4a79      	ldr	r2, [pc, #484]	@ (8009d10 <HAL_RCC_OscConfig+0x620>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x442>
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e0e6      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009b32:	4b75      	ldr	r3, [pc, #468]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b36:	2202      	movs	r2, #2
 8009b38:	4013      	ands	r3, r2
 8009b3a:	d0f0      	beq.n	8009b1e <HAL_RCC_OscConfig+0x42e>
 8009b3c:	e013      	b.n	8009b66 <HAL_RCC_OscConfig+0x476>
 8009b3e:	f7fc ffad 	bl	8006a9c <HAL_GetTick>
 8009b42:	0003      	movs	r3, r0
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	e009      	b.n	8009b5c <HAL_RCC_OscConfig+0x46c>
 8009b48:	f7fc ffa8 	bl	8006a9c <HAL_GetTick>
 8009b4c:	0002      	movs	r2, r0
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	4a6f      	ldr	r2, [pc, #444]	@ (8009d10 <HAL_RCC_OscConfig+0x620>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d901      	bls.n	8009b5c <HAL_RCC_OscConfig+0x46c>
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e0d1      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b60:	2202      	movs	r2, #2
 8009b62:	4013      	ands	r3, r2
 8009b64:	d1f0      	bne.n	8009b48 <HAL_RCC_OscConfig+0x458>
 8009b66:	231f      	movs	r3, #31
 8009b68:	18fb      	adds	r3, r7, r3
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d105      	bne.n	8009b7c <HAL_RCC_OscConfig+0x48c>
 8009b70:	4b65      	ldr	r3, [pc, #404]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b74:	4b64      	ldr	r3, [pc, #400]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b76:	4967      	ldr	r1, [pc, #412]	@ (8009d14 <HAL_RCC_OscConfig+0x624>)
 8009b78:	400a      	ands	r2, r1
 8009b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d100      	bne.n	8009b86 <HAL_RCC_OscConfig+0x496>
 8009b84:	e0bb      	b.n	8009cfe <HAL_RCC_OscConfig+0x60e>
 8009b86:	4b60      	ldr	r3, [pc, #384]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	2238      	movs	r2, #56	@ 0x38
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	2b10      	cmp	r3, #16
 8009b90:	d100      	bne.n	8009b94 <HAL_RCC_OscConfig+0x4a4>
 8009b92:	e07b      	b.n	8009c8c <HAL_RCC_OscConfig+0x59c>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d156      	bne.n	8009c4a <HAL_RCC_OscConfig+0x55a>
 8009b9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	4b59      	ldr	r3, [pc, #356]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009ba2:	495d      	ldr	r1, [pc, #372]	@ (8009d18 <HAL_RCC_OscConfig+0x628>)
 8009ba4:	400a      	ands	r2, r1
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f7fc ff78 	bl	8006a9c <HAL_GetTick>
 8009bac:	0003      	movs	r3, r0
 8009bae:	613b      	str	r3, [r7, #16]
 8009bb0:	e008      	b.n	8009bc4 <HAL_RCC_OscConfig+0x4d4>
 8009bb2:	f7fc ff73 	bl	8006a9c <HAL_GetTick>
 8009bb6:	0002      	movs	r2, r0
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d901      	bls.n	8009bc4 <HAL_RCC_OscConfig+0x4d4>
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e09d      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009bc4:	4b50      	ldr	r3, [pc, #320]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	2380      	movs	r3, #128	@ 0x80
 8009bca:	049b      	lsls	r3, r3, #18
 8009bcc:	4013      	ands	r3, r2
 8009bce:	d1f0      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x4c2>
 8009bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	4a51      	ldr	r2, [pc, #324]	@ (8009d1c <HAL_RCC_OscConfig+0x62c>)
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	0019      	movs	r1, r3
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6a1a      	ldr	r2, [r3, #32]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009be2:	431a      	orrs	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be8:	021b      	lsls	r3, r3, #8
 8009bea:	431a      	orrs	r2, r3
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bf0:	431a      	orrs	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bfc:	431a      	orrs	r2, r3
 8009bfe:	4b42      	ldr	r3, [pc, #264]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c00:	430a      	orrs	r2, r1
 8009c02:	60da      	str	r2, [r3, #12]
 8009c04:	4b40      	ldr	r3, [pc, #256]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	4b3f      	ldr	r3, [pc, #252]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c0a:	2180      	movs	r1, #128	@ 0x80
 8009c0c:	0449      	lsls	r1, r1, #17
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	4b3d      	ldr	r3, [pc, #244]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	4b3c      	ldr	r3, [pc, #240]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c18:	2180      	movs	r1, #128	@ 0x80
 8009c1a:	0549      	lsls	r1, r1, #21
 8009c1c:	430a      	orrs	r2, r1
 8009c1e:	60da      	str	r2, [r3, #12]
 8009c20:	f7fc ff3c 	bl	8006a9c <HAL_GetTick>
 8009c24:	0003      	movs	r3, r0
 8009c26:	613b      	str	r3, [r7, #16]
 8009c28:	e008      	b.n	8009c3c <HAL_RCC_OscConfig+0x54c>
 8009c2a:	f7fc ff37 	bl	8006a9c <HAL_GetTick>
 8009c2e:	0002      	movs	r2, r0
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d901      	bls.n	8009c3c <HAL_RCC_OscConfig+0x54c>
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e061      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009c3c:	4b32      	ldr	r3, [pc, #200]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	2380      	movs	r3, #128	@ 0x80
 8009c42:	049b      	lsls	r3, r3, #18
 8009c44:	4013      	ands	r3, r2
 8009c46:	d0f0      	beq.n	8009c2a <HAL_RCC_OscConfig+0x53a>
 8009c48:	e059      	b.n	8009cfe <HAL_RCC_OscConfig+0x60e>
 8009c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c50:	4931      	ldr	r1, [pc, #196]	@ (8009d18 <HAL_RCC_OscConfig+0x628>)
 8009c52:	400a      	ands	r2, r1
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	f7fc ff21 	bl	8006a9c <HAL_GetTick>
 8009c5a:	0003      	movs	r3, r0
 8009c5c:	613b      	str	r3, [r7, #16]
 8009c5e:	e008      	b.n	8009c72 <HAL_RCC_OscConfig+0x582>
 8009c60:	f7fc ff1c 	bl	8006a9c <HAL_GetTick>
 8009c64:	0002      	movs	r2, r0
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_OscConfig+0x582>
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e046      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009c72:	4b25      	ldr	r3, [pc, #148]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	2380      	movs	r3, #128	@ 0x80
 8009c78:	049b      	lsls	r3, r3, #18
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	d1f0      	bne.n	8009c60 <HAL_RCC_OscConfig+0x570>
 8009c7e:	4b22      	ldr	r3, [pc, #136]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	4b21      	ldr	r3, [pc, #132]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c84:	4926      	ldr	r1, [pc, #152]	@ (8009d20 <HAL_RCC_OscConfig+0x630>)
 8009c86:	400a      	ands	r2, r1
 8009c88:	60da      	str	r2, [r3, #12]
 8009c8a:	e038      	b.n	8009cfe <HAL_RCC_OscConfig+0x60e>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	69db      	ldr	r3, [r3, #28]
 8009c90:	2b01      	cmp	r3, #1
 8009c92:	d101      	bne.n	8009c98 <HAL_RCC_OscConfig+0x5a8>
 8009c94:	2301      	movs	r3, #1
 8009c96:	e033      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009c98:	4b1b      	ldr	r3, [pc, #108]	@ (8009d08 <HAL_RCC_OscConfig+0x618>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	617b      	str	r3, [r7, #20]
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	2203      	movs	r2, #3
 8009ca2:	401a      	ands	r2, r3
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d126      	bne.n	8009cfa <HAL_RCC_OscConfig+0x60a>
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2270      	movs	r2, #112	@ 0x70
 8009cb0:	401a      	ands	r2, r3
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d11f      	bne.n	8009cfa <HAL_RCC_OscConfig+0x60a>
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	23fe      	movs	r3, #254	@ 0xfe
 8009cbe:	01db      	lsls	r3, r3, #7
 8009cc0:	401a      	ands	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc6:	021b      	lsls	r3, r3, #8
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d116      	bne.n	8009cfa <HAL_RCC_OscConfig+0x60a>
 8009ccc:	697a      	ldr	r2, [r7, #20]
 8009cce:	23f8      	movs	r3, #248	@ 0xf8
 8009cd0:	039b      	lsls	r3, r3, #14
 8009cd2:	401a      	ands	r2, r3
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d10e      	bne.n	8009cfa <HAL_RCC_OscConfig+0x60a>
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	23e0      	movs	r3, #224	@ 0xe0
 8009ce0:	051b      	lsls	r3, r3, #20
 8009ce2:	401a      	ands	r2, r3
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d106      	bne.n	8009cfa <HAL_RCC_OscConfig+0x60a>
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	0f5b      	lsrs	r3, r3, #29
 8009cf0:	075a      	lsls	r2, r3, #29
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d001      	beq.n	8009cfe <HAL_RCC_OscConfig+0x60e>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e000      	b.n	8009d00 <HAL_RCC_OscConfig+0x610>
 8009cfe:	2300      	movs	r3, #0
 8009d00:	0018      	movs	r0, r3
 8009d02:	46bd      	mov	sp, r7
 8009d04:	b008      	add	sp, #32
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	40021000 	.word	0x40021000
 8009d0c:	40007000 	.word	0x40007000
 8009d10:	00001388 	.word	0x00001388
 8009d14:	efffffff 	.word	0xefffffff
 8009d18:	feffffff 	.word	0xfeffffff
 8009d1c:	11c1808c 	.word	0x11c1808c
 8009d20:	eefefffc 	.word	0xeefefffc

08009d24 <HAL_RCC_ClockConfig>:
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <HAL_RCC_ClockConfig+0x14>
 8009d34:	2301      	movs	r3, #1
 8009d36:	e0e9      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009d38:	4b76      	ldr	r3, [pc, #472]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2207      	movs	r2, #7
 8009d3e:	4013      	ands	r3, r2
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d91e      	bls.n	8009d84 <HAL_RCC_ClockConfig+0x60>
 8009d46:	4b73      	ldr	r3, [pc, #460]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	2207      	movs	r2, #7
 8009d4c:	4393      	bics	r3, r2
 8009d4e:	0019      	movs	r1, r3
 8009d50:	4b70      	ldr	r3, [pc, #448]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d52:	683a      	ldr	r2, [r7, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	f7fc fea0 	bl	8006a9c <HAL_GetTick>
 8009d5c:	0003      	movs	r3, r0
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e009      	b.n	8009d76 <HAL_RCC_ClockConfig+0x52>
 8009d62:	f7fc fe9b 	bl	8006a9c <HAL_GetTick>
 8009d66:	0002      	movs	r2, r0
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	1ad3      	subs	r3, r2, r3
 8009d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8009f18 <HAL_RCC_ClockConfig+0x1f4>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_ClockConfig+0x52>
 8009d72:	2303      	movs	r3, #3
 8009d74:	e0ca      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009d76:	4b67      	ldr	r3, [pc, #412]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2207      	movs	r2, #7
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d1ee      	bne.n	8009d62 <HAL_RCC_ClockConfig+0x3e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	4013      	ands	r3, r2
 8009d8c:	d015      	beq.n	8009dba <HAL_RCC_ClockConfig+0x96>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2204      	movs	r2, #4
 8009d94:	4013      	ands	r3, r2
 8009d96:	d006      	beq.n	8009da6 <HAL_RCC_ClockConfig+0x82>
 8009d98:	4b60      	ldr	r3, [pc, #384]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d9a:	689a      	ldr	r2, [r3, #8]
 8009d9c:	4b5f      	ldr	r3, [pc, #380]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009d9e:	21e0      	movs	r1, #224	@ 0xe0
 8009da0:	01c9      	lsls	r1, r1, #7
 8009da2:	430a      	orrs	r2, r1
 8009da4:	609a      	str	r2, [r3, #8]
 8009da6:	4b5d      	ldr	r3, [pc, #372]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	4a5d      	ldr	r2, [pc, #372]	@ (8009f20 <HAL_RCC_ClockConfig+0x1fc>)
 8009dac:	4013      	ands	r3, r2
 8009dae:	0019      	movs	r1, r3
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	4b59      	ldr	r3, [pc, #356]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009db6:	430a      	orrs	r2, r1
 8009db8:	609a      	str	r2, [r3, #8]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	d057      	beq.n	8009e74 <HAL_RCC_ClockConfig+0x150>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d107      	bne.n	8009ddc <HAL_RCC_ClockConfig+0xb8>
 8009dcc:	4b53      	ldr	r3, [pc, #332]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	2380      	movs	r3, #128	@ 0x80
 8009dd2:	029b      	lsls	r3, r3, #10
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	d12b      	bne.n	8009e30 <HAL_RCC_ClockConfig+0x10c>
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e097      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d107      	bne.n	8009df4 <HAL_RCC_ClockConfig+0xd0>
 8009de4:	4b4d      	ldr	r3, [pc, #308]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	2380      	movs	r3, #128	@ 0x80
 8009dea:	049b      	lsls	r3, r3, #18
 8009dec:	4013      	ands	r3, r2
 8009dee:	d11f      	bne.n	8009e30 <HAL_RCC_ClockConfig+0x10c>
 8009df0:	2301      	movs	r3, #1
 8009df2:	e08b      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d107      	bne.n	8009e0c <HAL_RCC_ClockConfig+0xe8>
 8009dfc:	4b47      	ldr	r3, [pc, #284]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	2380      	movs	r3, #128	@ 0x80
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	4013      	ands	r3, r2
 8009e06:	d113      	bne.n	8009e30 <HAL_RCC_ClockConfig+0x10c>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e07f      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b03      	cmp	r3, #3
 8009e12:	d106      	bne.n	8009e22 <HAL_RCC_ClockConfig+0xfe>
 8009e14:	4b41      	ldr	r3, [pc, #260]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e18:	2202      	movs	r2, #2
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	d108      	bne.n	8009e30 <HAL_RCC_ClockConfig+0x10c>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e074      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009e22:	4b3e      	ldr	r3, [pc, #248]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e26:	2202      	movs	r2, #2
 8009e28:	4013      	ands	r3, r2
 8009e2a:	d101      	bne.n	8009e30 <HAL_RCC_ClockConfig+0x10c>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e06d      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009e30:	4b3a      	ldr	r3, [pc, #232]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	2207      	movs	r2, #7
 8009e36:	4393      	bics	r3, r2
 8009e38:	0019      	movs	r1, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685a      	ldr	r2, [r3, #4]
 8009e3e:	4b37      	ldr	r3, [pc, #220]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009e40:	430a      	orrs	r2, r1
 8009e42:	609a      	str	r2, [r3, #8]
 8009e44:	f7fc fe2a 	bl	8006a9c <HAL_GetTick>
 8009e48:	0003      	movs	r3, r0
 8009e4a:	60fb      	str	r3, [r7, #12]
 8009e4c:	e009      	b.n	8009e62 <HAL_RCC_ClockConfig+0x13e>
 8009e4e:	f7fc fe25 	bl	8006a9c <HAL_GetTick>
 8009e52:	0002      	movs	r2, r0
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	4a2f      	ldr	r2, [pc, #188]	@ (8009f18 <HAL_RCC_ClockConfig+0x1f4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d901      	bls.n	8009e62 <HAL_RCC_ClockConfig+0x13e>
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e054      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009e62:	4b2e      	ldr	r3, [pc, #184]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	2238      	movs	r2, #56	@ 0x38
 8009e68:	401a      	ands	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	00db      	lsls	r3, r3, #3
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d1ec      	bne.n	8009e4e <HAL_RCC_ClockConfig+0x12a>
 8009e74:	4b27      	ldr	r3, [pc, #156]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2207      	movs	r2, #7
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	683a      	ldr	r2, [r7, #0]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d21e      	bcs.n	8009ec0 <HAL_RCC_ClockConfig+0x19c>
 8009e82:	4b24      	ldr	r3, [pc, #144]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2207      	movs	r2, #7
 8009e88:	4393      	bics	r3, r2
 8009e8a:	0019      	movs	r1, r3
 8009e8c:	4b21      	ldr	r3, [pc, #132]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	430a      	orrs	r2, r1
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	f7fc fe02 	bl	8006a9c <HAL_GetTick>
 8009e98:	0003      	movs	r3, r0
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	e009      	b.n	8009eb2 <HAL_RCC_ClockConfig+0x18e>
 8009e9e:	f7fc fdfd 	bl	8006a9c <HAL_GetTick>
 8009ea2:	0002      	movs	r2, r0
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8009f18 <HAL_RCC_ClockConfig+0x1f4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d901      	bls.n	8009eb2 <HAL_RCC_ClockConfig+0x18e>
 8009eae:	2303      	movs	r3, #3
 8009eb0:	e02c      	b.n	8009f0c <HAL_RCC_ClockConfig+0x1e8>
 8009eb2:	4b18      	ldr	r3, [pc, #96]	@ (8009f14 <HAL_RCC_ClockConfig+0x1f0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2207      	movs	r2, #7
 8009eb8:	4013      	ands	r3, r2
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d1ee      	bne.n	8009e9e <HAL_RCC_ClockConfig+0x17a>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	d009      	beq.n	8009ede <HAL_RCC_ClockConfig+0x1ba>
 8009eca:	4b14      	ldr	r3, [pc, #80]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	4a15      	ldr	r2, [pc, #84]	@ (8009f24 <HAL_RCC_ClockConfig+0x200>)
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	0019      	movs	r1, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	68da      	ldr	r2, [r3, #12]
 8009ed8:	4b10      	ldr	r3, [pc, #64]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009eda:	430a      	orrs	r2, r1
 8009edc:	609a      	str	r2, [r3, #8]
 8009ede:	f000 f829 	bl	8009f34 <HAL_RCC_GetSysClockFreq>
 8009ee2:	0001      	movs	r1, r0
 8009ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8009f1c <HAL_RCC_ClockConfig+0x1f8>)
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	0a1b      	lsrs	r3, r3, #8
 8009eea:	220f      	movs	r2, #15
 8009eec:	401a      	ands	r2, r3
 8009eee:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <HAL_RCC_ClockConfig+0x204>)
 8009ef0:	0092      	lsls	r2, r2, #2
 8009ef2:	58d3      	ldr	r3, [r2, r3]
 8009ef4:	221f      	movs	r2, #31
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	000a      	movs	r2, r1
 8009efa:	40da      	lsrs	r2, r3
 8009efc:	4b0b      	ldr	r3, [pc, #44]	@ (8009f2c <HAL_RCC_ClockConfig+0x208>)
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <HAL_RCC_ClockConfig+0x20c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	0018      	movs	r0, r3
 8009f06:	f7fc fd6d 	bl	80069e4 <HAL_InitTick>
 8009f0a:	0003      	movs	r3, r0
 8009f0c:	0018      	movs	r0, r3
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	b004      	add	sp, #16
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	40022000 	.word	0x40022000
 8009f18:	00001388 	.word	0x00001388
 8009f1c:	40021000 	.word	0x40021000
 8009f20:	fffff0ff 	.word	0xfffff0ff
 8009f24:	ffff8fff 	.word	0xffff8fff
 8009f28:	0800e964 	.word	0x0800e964
 8009f2c:	2000044c 	.word	0x2000044c
 8009f30:	20000450 	.word	0x20000450

08009f34 <HAL_RCC_GetSysClockFreq>:
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b086      	sub	sp, #24
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	2238      	movs	r2, #56	@ 0x38
 8009f40:	4013      	ands	r3, r2
 8009f42:	d10f      	bne.n	8009f64 <HAL_RCC_GetSysClockFreq+0x30>
 8009f44:	4b39      	ldr	r3, [pc, #228]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	0adb      	lsrs	r3, r3, #11
 8009f4a:	2207      	movs	r2, #7
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	2201      	movs	r2, #1
 8009f50:	409a      	lsls	r2, r3
 8009f52:	0013      	movs	r3, r2
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	4835      	ldr	r0, [pc, #212]	@ (800a030 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009f5a:	f7f6 f8d5 	bl	8000108 <__udivsi3>
 8009f5e:	0003      	movs	r3, r0
 8009f60:	613b      	str	r3, [r7, #16]
 8009f62:	e05d      	b.n	800a020 <HAL_RCC_GetSysClockFreq+0xec>
 8009f64:	4b31      	ldr	r3, [pc, #196]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f66:	689b      	ldr	r3, [r3, #8]
 8009f68:	2238      	movs	r2, #56	@ 0x38
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d102      	bne.n	8009f76 <HAL_RCC_GetSysClockFreq+0x42>
 8009f70:	4b30      	ldr	r3, [pc, #192]	@ (800a034 <HAL_RCC_GetSysClockFreq+0x100>)
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	e054      	b.n	800a020 <HAL_RCC_GetSysClockFreq+0xec>
 8009f76:	4b2d      	ldr	r3, [pc, #180]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2238      	movs	r2, #56	@ 0x38
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	2b10      	cmp	r3, #16
 8009f80:	d138      	bne.n	8009ff4 <HAL_RCC_GetSysClockFreq+0xc0>
 8009f82:	4b2a      	ldr	r3, [pc, #168]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f84:	68db      	ldr	r3, [r3, #12]
 8009f86:	2203      	movs	r2, #3
 8009f88:	4013      	ands	r3, r2
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	4b27      	ldr	r3, [pc, #156]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	091b      	lsrs	r3, r3, #4
 8009f92:	2207      	movs	r2, #7
 8009f94:	4013      	ands	r3, r2
 8009f96:	3301      	adds	r3, #1
 8009f98:	60bb      	str	r3, [r7, #8]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d10d      	bne.n	8009fbc <HAL_RCC_GetSysClockFreq+0x88>
 8009fa0:	68b9      	ldr	r1, [r7, #8]
 8009fa2:	4824      	ldr	r0, [pc, #144]	@ (800a034 <HAL_RCC_GetSysClockFreq+0x100>)
 8009fa4:	f7f6 f8b0 	bl	8000108 <__udivsi3>
 8009fa8:	0003      	movs	r3, r0
 8009faa:	0019      	movs	r1, r3
 8009fac:	4b1f      	ldr	r3, [pc, #124]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	0a1b      	lsrs	r3, r3, #8
 8009fb2:	227f      	movs	r2, #127	@ 0x7f
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	434b      	muls	r3, r1
 8009fb8:	617b      	str	r3, [r7, #20]
 8009fba:	e00d      	b.n	8009fd8 <HAL_RCC_GetSysClockFreq+0xa4>
 8009fbc:	68b9      	ldr	r1, [r7, #8]
 8009fbe:	481c      	ldr	r0, [pc, #112]	@ (800a030 <HAL_RCC_GetSysClockFreq+0xfc>)
 8009fc0:	f7f6 f8a2 	bl	8000108 <__udivsi3>
 8009fc4:	0003      	movs	r3, r0
 8009fc6:	0019      	movs	r1, r3
 8009fc8:	4b18      	ldr	r3, [pc, #96]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	0a1b      	lsrs	r3, r3, #8
 8009fce:	227f      	movs	r2, #127	@ 0x7f
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	434b      	muls	r3, r1
 8009fd4:	617b      	str	r3, [r7, #20]
 8009fd6:	46c0      	nop			@ (mov r8, r8)
 8009fd8:	4b14      	ldr	r3, [pc, #80]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	0f5b      	lsrs	r3, r3, #29
 8009fde:	2207      	movs	r2, #7
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	607b      	str	r3, [r7, #4]
 8009fe6:	6879      	ldr	r1, [r7, #4]
 8009fe8:	6978      	ldr	r0, [r7, #20]
 8009fea:	f7f6 f88d 	bl	8000108 <__udivsi3>
 8009fee:	0003      	movs	r3, r0
 8009ff0:	613b      	str	r3, [r7, #16]
 8009ff2:	e015      	b.n	800a020 <HAL_RCC_GetSysClockFreq+0xec>
 8009ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	2238      	movs	r2, #56	@ 0x38
 8009ffa:	4013      	ands	r3, r2
 8009ffc:	2b20      	cmp	r3, #32
 8009ffe:	d103      	bne.n	800a008 <HAL_RCC_GetSysClockFreq+0xd4>
 800a000:	2380      	movs	r3, #128	@ 0x80
 800a002:	021b      	lsls	r3, r3, #8
 800a004:	613b      	str	r3, [r7, #16]
 800a006:	e00b      	b.n	800a020 <HAL_RCC_GetSysClockFreq+0xec>
 800a008:	4b08      	ldr	r3, [pc, #32]	@ (800a02c <HAL_RCC_GetSysClockFreq+0xf8>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	2238      	movs	r2, #56	@ 0x38
 800a00e:	4013      	ands	r3, r2
 800a010:	2b18      	cmp	r3, #24
 800a012:	d103      	bne.n	800a01c <HAL_RCC_GetSysClockFreq+0xe8>
 800a014:	23fa      	movs	r3, #250	@ 0xfa
 800a016:	01db      	lsls	r3, r3, #7
 800a018:	613b      	str	r3, [r7, #16]
 800a01a:	e001      	b.n	800a020 <HAL_RCC_GetSysClockFreq+0xec>
 800a01c:	2300      	movs	r3, #0
 800a01e:	613b      	str	r3, [r7, #16]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	0018      	movs	r0, r3
 800a024:	46bd      	mov	sp, r7
 800a026:	b006      	add	sp, #24
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	46c0      	nop			@ (mov r8, r8)
 800a02c:	40021000 	.word	0x40021000
 800a030:	00f42400 	.word	0x00f42400
 800a034:	007a1200 	.word	0x007a1200

0800a038 <HAL_RCC_GetHCLKFreq>:
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	4b02      	ldr	r3, [pc, #8]	@ (800a048 <HAL_RCC_GetHCLKFreq+0x10>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	0018      	movs	r0, r3
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	46c0      	nop			@ (mov r8, r8)
 800a048:	2000044c 	.word	0x2000044c

0800a04c <HAL_RCC_GetPCLK1Freq>:
 800a04c:	b5b0      	push	{r4, r5, r7, lr}
 800a04e:	af00      	add	r7, sp, #0
 800a050:	f7ff fff2 	bl	800a038 <HAL_RCC_GetHCLKFreq>
 800a054:	0004      	movs	r4, r0
 800a056:	f7ff fb3f 	bl	80096d8 <LL_RCC_GetAPB1Prescaler>
 800a05a:	0003      	movs	r3, r0
 800a05c:	0b1a      	lsrs	r2, r3, #12
 800a05e:	4b05      	ldr	r3, [pc, #20]	@ (800a074 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a060:	0092      	lsls	r2, r2, #2
 800a062:	58d3      	ldr	r3, [r2, r3]
 800a064:	221f      	movs	r2, #31
 800a066:	4013      	ands	r3, r2
 800a068:	40dc      	lsrs	r4, r3
 800a06a:	0023      	movs	r3, r4
 800a06c:	0018      	movs	r0, r3
 800a06e:	46bd      	mov	sp, r7
 800a070:	bdb0      	pop	{r4, r5, r7, pc}
 800a072:	46c0      	nop			@ (mov r8, r8)
 800a074:	0800e9a4 	.word	0x0800e9a4

0800a078 <HAL_RCCEx_PeriphCLKConfig>:
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	2313      	movs	r3, #19
 800a082:	18fb      	adds	r3, r7, r3
 800a084:	2200      	movs	r2, #0
 800a086:	701a      	strb	r2, [r3, #0]
 800a088:	2312      	movs	r3, #18
 800a08a:	18fb      	adds	r3, r7, r3
 800a08c:	2200      	movs	r2, #0
 800a08e:	701a      	strb	r2, [r3, #0]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	2380      	movs	r3, #128	@ 0x80
 800a096:	029b      	lsls	r3, r3, #10
 800a098:	4013      	ands	r3, r2
 800a09a:	d100      	bne.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a09c:	e0a3      	b.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a09e:	2011      	movs	r0, #17
 800a0a0:	183b      	adds	r3, r7, r0
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	4ba5      	ldr	r3, [pc, #660]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0aa:	2380      	movs	r3, #128	@ 0x80
 800a0ac:	055b      	lsls	r3, r3, #21
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	d110      	bne.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a0b2:	4ba2      	ldr	r3, [pc, #648]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0b6:	4ba1      	ldr	r3, [pc, #644]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0b8:	2180      	movs	r1, #128	@ 0x80
 800a0ba:	0549      	lsls	r1, r1, #21
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a0c0:	4b9e      	ldr	r3, [pc, #632]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a0c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a0c4:	2380      	movs	r3, #128	@ 0x80
 800a0c6:	055b      	lsls	r3, r3, #21
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	60bb      	str	r3, [r7, #8]
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	183b      	adds	r3, r7, r0
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	4b9a      	ldr	r3, [pc, #616]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	4b99      	ldr	r3, [pc, #612]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a0da:	2180      	movs	r1, #128	@ 0x80
 800a0dc:	0049      	lsls	r1, r1, #1
 800a0de:	430a      	orrs	r2, r1
 800a0e0:	601a      	str	r2, [r3, #0]
 800a0e2:	f7fc fcdb 	bl	8006a9c <HAL_GetTick>
 800a0e6:	0003      	movs	r3, r0
 800a0e8:	60fb      	str	r3, [r7, #12]
 800a0ea:	e00b      	b.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800a0ec:	f7fc fcd6 	bl	8006a9c <HAL_GetTick>
 800a0f0:	0002      	movs	r2, r0
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d904      	bls.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800a0fa:	2313      	movs	r3, #19
 800a0fc:	18fb      	adds	r3, r7, r3
 800a0fe:	2203      	movs	r2, #3
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	e005      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a104:	4b8e      	ldr	r3, [pc, #568]	@ (800a340 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	2380      	movs	r3, #128	@ 0x80
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	4013      	ands	r3, r2
 800a10e:	d0ed      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x74>
 800a110:	2313      	movs	r3, #19
 800a112:	18fb      	adds	r3, r7, r3
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d154      	bne.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800a11a:	4b88      	ldr	r3, [pc, #544]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a11c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a11e:	23c0      	movs	r3, #192	@ 0xc0
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	4013      	ands	r3, r2
 800a124:	617b      	str	r3, [r7, #20]
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d019      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a130:	697a      	ldr	r2, [r7, #20]
 800a132:	429a      	cmp	r2, r3
 800a134:	d014      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a136:	4b81      	ldr	r3, [pc, #516]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a138:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a13a:	4a82      	ldr	r2, [pc, #520]	@ (800a344 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a13c:	4013      	ands	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
 800a140:	4b7e      	ldr	r3, [pc, #504]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a142:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a144:	4b7d      	ldr	r3, [pc, #500]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a146:	2180      	movs	r1, #128	@ 0x80
 800a148:	0249      	lsls	r1, r1, #9
 800a14a:	430a      	orrs	r2, r1
 800a14c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a14e:	4b7b      	ldr	r3, [pc, #492]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a150:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a152:	4b7a      	ldr	r3, [pc, #488]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a154:	497c      	ldr	r1, [pc, #496]	@ (800a348 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800a156:	400a      	ands	r2, r1
 800a158:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a15a:	4b78      	ldr	r3, [pc, #480]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a15c:	697a      	ldr	r2, [r7, #20]
 800a15e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2201      	movs	r2, #1
 800a164:	4013      	ands	r3, r2
 800a166:	d016      	beq.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a168:	f7fc fc98 	bl	8006a9c <HAL_GetTick>
 800a16c:	0003      	movs	r3, r0
 800a16e:	60fb      	str	r3, [r7, #12]
 800a170:	e00c      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800a172:	f7fc fc93 	bl	8006a9c <HAL_GetTick>
 800a176:	0002      	movs	r2, r0
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	4a73      	ldr	r2, [pc, #460]	@ (800a34c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d904      	bls.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800a182:	2313      	movs	r3, #19
 800a184:	18fb      	adds	r3, r7, r3
 800a186:	2203      	movs	r2, #3
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	e004      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 800a18c:	4b6b      	ldr	r3, [pc, #428]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a18e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a190:	2202      	movs	r2, #2
 800a192:	4013      	ands	r3, r2
 800a194:	d0ed      	beq.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a196:	2313      	movs	r3, #19
 800a198:	18fb      	adds	r3, r7, r3
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d10a      	bne.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800a1a0:	4b66      	ldr	r3, [pc, #408]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1a4:	4a67      	ldr	r2, [pc, #412]	@ (800a344 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	0019      	movs	r1, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1ae:	4b63      	ldr	r3, [pc, #396]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1b0:	430a      	orrs	r2, r1
 800a1b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a1b4:	e00c      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800a1b6:	2312      	movs	r3, #18
 800a1b8:	18fb      	adds	r3, r7, r3
 800a1ba:	2213      	movs	r2, #19
 800a1bc:	18ba      	adds	r2, r7, r2
 800a1be:	7812      	ldrb	r2, [r2, #0]
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e005      	b.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800a1c4:	2312      	movs	r3, #18
 800a1c6:	18fb      	adds	r3, r7, r3
 800a1c8:	2213      	movs	r2, #19
 800a1ca:	18ba      	adds	r2, r7, r2
 800a1cc:	7812      	ldrb	r2, [r2, #0]
 800a1ce:	701a      	strb	r2, [r3, #0]
 800a1d0:	2311      	movs	r3, #17
 800a1d2:	18fb      	adds	r3, r7, r3
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d105      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a1da:	4b58      	ldr	r3, [pc, #352]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a1de:	4b57      	ldr	r3, [pc, #348]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1e0:	495b      	ldr	r1, [pc, #364]	@ (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800a1e2:	400a      	ands	r2, r1
 800a1e4:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	d009      	beq.n	800a204 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a1f0:	4b52      	ldr	r3, [pc, #328]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a1f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f4:	2203      	movs	r2, #3
 800a1f6:	4393      	bics	r3, r2
 800a1f8:	0019      	movs	r1, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a200:	430a      	orrs	r2, r1
 800a202:	655a      	str	r2, [r3, #84]	@ 0x54
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2210      	movs	r2, #16
 800a20a:	4013      	ands	r3, r2
 800a20c:	d009      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a20e:	4b4b      	ldr	r3, [pc, #300]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a212:	4a50      	ldr	r2, [pc, #320]	@ (800a354 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800a214:	4013      	ands	r3, r2
 800a216:	0019      	movs	r1, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	689a      	ldr	r2, [r3, #8]
 800a21c:	4b47      	ldr	r3, [pc, #284]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a21e:	430a      	orrs	r2, r1
 800a220:	655a      	str	r2, [r3, #84]	@ 0x54
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	2380      	movs	r3, #128	@ 0x80
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4013      	ands	r3, r2
 800a22c:	d009      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800a22e:	4b43      	ldr	r3, [pc, #268]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a232:	4a49      	ldr	r2, [pc, #292]	@ (800a358 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800a234:	4013      	ands	r3, r2
 800a236:	0019      	movs	r1, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	695a      	ldr	r2, [r3, #20]
 800a23c:	4b3f      	ldr	r3, [pc, #252]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a23e:	430a      	orrs	r2, r1
 800a240:	655a      	str	r2, [r3, #84]	@ 0x54
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	2380      	movs	r3, #128	@ 0x80
 800a248:	00db      	lsls	r3, r3, #3
 800a24a:	4013      	ands	r3, r2
 800a24c:	d009      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a24e:	4b3b      	ldr	r3, [pc, #236]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a252:	4a42      	ldr	r2, [pc, #264]	@ (800a35c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800a254:	4013      	ands	r3, r2
 800a256:	0019      	movs	r1, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	699a      	ldr	r2, [r3, #24]
 800a25c:	4b37      	ldr	r3, [pc, #220]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a25e:	430a      	orrs	r2, r1
 800a260:	655a      	str	r2, [r3, #84]	@ 0x54
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2220      	movs	r2, #32
 800a268:	4013      	ands	r3, r2
 800a26a:	d009      	beq.n	800a280 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800a26c:	4b33      	ldr	r3, [pc, #204]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a26e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a270:	4a3b      	ldr	r2, [pc, #236]	@ (800a360 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800a272:	4013      	ands	r3, r2
 800a274:	0019      	movs	r1, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	4b30      	ldr	r3, [pc, #192]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a27c:	430a      	orrs	r2, r1
 800a27e:	655a      	str	r2, [r3, #84]	@ 0x54
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	2380      	movs	r3, #128	@ 0x80
 800a286:	01db      	lsls	r3, r3, #7
 800a288:	4013      	ands	r3, r2
 800a28a:	d015      	beq.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a28c:	4b2b      	ldr	r3, [pc, #172]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a28e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	0899      	lsrs	r1, r3, #2
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	69da      	ldr	r2, [r3, #28]
 800a298:	4b28      	ldr	r3, [pc, #160]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a29a:	430a      	orrs	r2, r1
 800a29c:	655a      	str	r2, [r3, #84]	@ 0x54
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	2380      	movs	r3, #128	@ 0x80
 800a2a4:	05db      	lsls	r3, r3, #23
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d106      	bne.n	800a2b8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800a2aa:	4b24      	ldr	r3, [pc, #144]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ac:	68da      	ldr	r2, [r3, #12]
 800a2ae:	4b23      	ldr	r3, [pc, #140]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2b0:	2180      	movs	r1, #128	@ 0x80
 800a2b2:	0249      	lsls	r1, r1, #9
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	60da      	str	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	2380      	movs	r3, #128	@ 0x80
 800a2be:	039b      	lsls	r3, r3, #14
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	d016      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800a2c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c8:	4a26      	ldr	r2, [pc, #152]	@ (800a364 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800a2ca:	4013      	ands	r3, r2
 800a2cc:	0019      	movs	r1, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	4b1a      	ldr	r3, [pc, #104]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	655a      	str	r2, [r3, #84]	@ 0x54
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a1a      	ldr	r2, [r3, #32]
 800a2dc:	2380      	movs	r3, #128	@ 0x80
 800a2de:	03db      	lsls	r3, r3, #15
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d106      	bne.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 800a2e4:	4b15      	ldr	r3, [pc, #84]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2e6:	68da      	ldr	r2, [r3, #12]
 800a2e8:	4b14      	ldr	r3, [pc, #80]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a2ea:	2180      	movs	r1, #128	@ 0x80
 800a2ec:	0449      	lsls	r1, r1, #17
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	60da      	str	r2, [r3, #12]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681a      	ldr	r2, [r3, #0]
 800a2f6:	2380      	movs	r3, #128	@ 0x80
 800a2f8:	011b      	lsls	r3, r3, #4
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	d016      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a2fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a302:	4a19      	ldr	r2, [pc, #100]	@ (800a368 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800a304:	4013      	ands	r3, r2
 800a306:	0019      	movs	r1, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	691a      	ldr	r2, [r3, #16]
 800a30c:	4b0b      	ldr	r3, [pc, #44]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a30e:	430a      	orrs	r2, r1
 800a310:	655a      	str	r2, [r3, #84]	@ 0x54
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	691a      	ldr	r2, [r3, #16]
 800a316:	2380      	movs	r3, #128	@ 0x80
 800a318:	01db      	lsls	r3, r3, #7
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d106      	bne.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a31e:	4b07      	ldr	r3, [pc, #28]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a320:	68da      	ldr	r2, [r3, #12]
 800a322:	4b06      	ldr	r3, [pc, #24]	@ (800a33c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800a324:	2180      	movs	r1, #128	@ 0x80
 800a326:	0249      	lsls	r1, r1, #9
 800a328:	430a      	orrs	r2, r1
 800a32a:	60da      	str	r2, [r3, #12]
 800a32c:	2312      	movs	r3, #18
 800a32e:	18fb      	adds	r3, r7, r3
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	0018      	movs	r0, r3
 800a334:	46bd      	mov	sp, r7
 800a336:	b006      	add	sp, #24
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	46c0      	nop			@ (mov r8, r8)
 800a33c:	40021000 	.word	0x40021000
 800a340:	40007000 	.word	0x40007000
 800a344:	fffffcff 	.word	0xfffffcff
 800a348:	fffeffff 	.word	0xfffeffff
 800a34c:	00001388 	.word	0x00001388
 800a350:	efffffff 	.word	0xefffffff
 800a354:	fffff3ff 	.word	0xfffff3ff
 800a358:	fff3ffff 	.word	0xfff3ffff
 800a35c:	ffcfffff 	.word	0xffcfffff
 800a360:	ffffcfff 	.word	0xffffcfff
 800a364:	ffbfffff 	.word	0xffbfffff
 800a368:	ffff3fff 	.word	0xffff3fff

0800a36c <HAL_TIM_Base_Init>:
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <HAL_TIM_Base_Init+0x12>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e056      	b.n	800a42c <HAL_TIM_Base_Init+0xc0>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	223d      	movs	r2, #61	@ 0x3d
 800a382:	5c9b      	ldrb	r3, [r3, r2]
 800a384:	b2db      	uxtb	r3, r3
 800a386:	2b00      	cmp	r3, #0
 800a388:	d113      	bne.n	800a3b2 <HAL_TIM_Base_Init+0x46>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	223c      	movs	r2, #60	@ 0x3c
 800a38e:	2100      	movs	r1, #0
 800a390:	5499      	strb	r1, [r3, r2]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	0018      	movs	r0, r3
 800a396:	f002 f8c5 	bl	800c524 <TIM_ResetCallback>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d102      	bne.n	800a3a8 <HAL_TIM_Base_Init+0x3c>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	4a23      	ldr	r2, [pc, #140]	@ (800a434 <HAL_TIM_Base_Init+0xc8>)
 800a3a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	0010      	movs	r0, r2
 800a3b0:	4798      	blx	r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	223d      	movs	r2, #61	@ 0x3d
 800a3b6:	2102      	movs	r1, #2
 800a3b8:	5499      	strb	r1, [r3, r2]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3304      	adds	r3, #4
 800a3c2:	0019      	movs	r1, r3
 800a3c4:	0010      	movs	r0, r2
 800a3c6:	f001 fbaf 	bl	800bb28 <TIM_Base_SetConfig>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2248      	movs	r2, #72	@ 0x48
 800a3ce:	2101      	movs	r1, #1
 800a3d0:	5499      	strb	r1, [r3, r2]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	223e      	movs	r2, #62	@ 0x3e
 800a3d6:	2101      	movs	r1, #1
 800a3d8:	5499      	strb	r1, [r3, r2]
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	223f      	movs	r2, #63	@ 0x3f
 800a3de:	2101      	movs	r1, #1
 800a3e0:	5499      	strb	r1, [r3, r2]
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2240      	movs	r2, #64	@ 0x40
 800a3e6:	2101      	movs	r1, #1
 800a3e8:	5499      	strb	r1, [r3, r2]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2241      	movs	r2, #65	@ 0x41
 800a3ee:	2101      	movs	r1, #1
 800a3f0:	5499      	strb	r1, [r3, r2]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2242      	movs	r2, #66	@ 0x42
 800a3f6:	2101      	movs	r1, #1
 800a3f8:	5499      	strb	r1, [r3, r2]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2243      	movs	r2, #67	@ 0x43
 800a3fe:	2101      	movs	r1, #1
 800a400:	5499      	strb	r1, [r3, r2]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2244      	movs	r2, #68	@ 0x44
 800a406:	2101      	movs	r1, #1
 800a408:	5499      	strb	r1, [r3, r2]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2245      	movs	r2, #69	@ 0x45
 800a40e:	2101      	movs	r1, #1
 800a410:	5499      	strb	r1, [r3, r2]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2246      	movs	r2, #70	@ 0x46
 800a416:	2101      	movs	r1, #1
 800a418:	5499      	strb	r1, [r3, r2]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2247      	movs	r2, #71	@ 0x47
 800a41e:	2101      	movs	r1, #1
 800a420:	5499      	strb	r1, [r3, r2]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	223d      	movs	r2, #61	@ 0x3d
 800a426:	2101      	movs	r1, #1
 800a428:	5499      	strb	r1, [r3, r2]
 800a42a:	2300      	movs	r3, #0
 800a42c:	0018      	movs	r0, r3
 800a42e:	46bd      	mov	sp, r7
 800a430:	b002      	add	sp, #8
 800a432:	bd80      	pop	{r7, pc}
 800a434:	08005a4d 	.word	0x08005a4d

0800a438 <HAL_TIM_Base_Start>:
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	223d      	movs	r2, #61	@ 0x3d
 800a444:	5c9b      	ldrb	r3, [r3, r2]
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d001      	beq.n	800a450 <HAL_TIM_Base_Start+0x18>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e035      	b.n	800a4bc <HAL_TIM_Base_Start+0x84>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	223d      	movs	r2, #61	@ 0x3d
 800a454:	2102      	movs	r1, #2
 800a456:	5499      	strb	r1, [r3, r2]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a19      	ldr	r2, [pc, #100]	@ (800a4c4 <HAL_TIM_Base_Start+0x8c>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d00a      	beq.n	800a478 <HAL_TIM_Base_Start+0x40>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	2380      	movs	r3, #128	@ 0x80
 800a468:	05db      	lsls	r3, r3, #23
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d004      	beq.n	800a478 <HAL_TIM_Base_Start+0x40>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a15      	ldr	r2, [pc, #84]	@ (800a4c8 <HAL_TIM_Base_Start+0x90>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d116      	bne.n	800a4a6 <HAL_TIM_Base_Start+0x6e>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	4a13      	ldr	r2, [pc, #76]	@ (800a4cc <HAL_TIM_Base_Start+0x94>)
 800a480:	4013      	ands	r3, r2
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b06      	cmp	r3, #6
 800a488:	d016      	beq.n	800a4b8 <HAL_TIM_Base_Start+0x80>
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	2380      	movs	r3, #128	@ 0x80
 800a48e:	025b      	lsls	r3, r3, #9
 800a490:	429a      	cmp	r2, r3
 800a492:	d011      	beq.n	800a4b8 <HAL_TIM_Base_Start+0x80>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	681a      	ldr	r2, [r3, #0]
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2101      	movs	r1, #1
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	e008      	b.n	800a4b8 <HAL_TIM_Base_Start+0x80>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	601a      	str	r2, [r3, #0]
 800a4b6:	e000      	b.n	800a4ba <HAL_TIM_Base_Start+0x82>
 800a4b8:	46c0      	nop			@ (mov r8, r8)
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	0018      	movs	r0, r3
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	b004      	add	sp, #16
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40000400 	.word	0x40000400
 800a4cc:	00010007 	.word	0x00010007

0800a4d0 <HAL_TIM_Base_Start_IT>:
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	223d      	movs	r2, #61	@ 0x3d
 800a4dc:	5c9b      	ldrb	r3, [r3, r2]
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d001      	beq.n	800a4e8 <HAL_TIM_Base_Start_IT+0x18>
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e03d      	b.n	800a564 <HAL_TIM_Base_Start_IT+0x94>
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	223d      	movs	r2, #61	@ 0x3d
 800a4ec:	2102      	movs	r1, #2
 800a4ee:	5499      	strb	r1, [r3, r2]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68da      	ldr	r2, [r3, #12]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	430a      	orrs	r2, r1
 800a4fe:	60da      	str	r2, [r3, #12]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a19      	ldr	r2, [pc, #100]	@ (800a56c <HAL_TIM_Base_Start_IT+0x9c>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d00a      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x50>
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	2380      	movs	r3, #128	@ 0x80
 800a510:	05db      	lsls	r3, r3, #23
 800a512:	429a      	cmp	r2, r3
 800a514:	d004      	beq.n	800a520 <HAL_TIM_Base_Start_IT+0x50>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a15      	ldr	r2, [pc, #84]	@ (800a570 <HAL_TIM_Base_Start_IT+0xa0>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d116      	bne.n	800a54e <HAL_TIM_Base_Start_IT+0x7e>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	4a13      	ldr	r2, [pc, #76]	@ (800a574 <HAL_TIM_Base_Start_IT+0xa4>)
 800a528:	4013      	ands	r3, r2
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b06      	cmp	r3, #6
 800a530:	d016      	beq.n	800a560 <HAL_TIM_Base_Start_IT+0x90>
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	2380      	movs	r3, #128	@ 0x80
 800a536:	025b      	lsls	r3, r3, #9
 800a538:	429a      	cmp	r2, r3
 800a53a:	d011      	beq.n	800a560 <HAL_TIM_Base_Start_IT+0x90>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2101      	movs	r1, #1
 800a548:	430a      	orrs	r2, r1
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e008      	b.n	800a560 <HAL_TIM_Base_Start_IT+0x90>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2101      	movs	r1, #1
 800a55a:	430a      	orrs	r2, r1
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	e000      	b.n	800a562 <HAL_TIM_Base_Start_IT+0x92>
 800a560:	46c0      	nop			@ (mov r8, r8)
 800a562:	2300      	movs	r3, #0
 800a564:	0018      	movs	r0, r3
 800a566:	46bd      	mov	sp, r7
 800a568:	b004      	add	sp, #16
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	40012c00 	.word	0x40012c00
 800a570:	40000400 	.word	0x40000400
 800a574:	00010007 	.word	0x00010007

0800a578 <HAL_TIM_OC_Init>:
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d101      	bne.n	800a58a <HAL_TIM_OC_Init+0x12>
 800a586:	2301      	movs	r3, #1
 800a588:	e056      	b.n	800a638 <HAL_TIM_OC_Init+0xc0>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	223d      	movs	r2, #61	@ 0x3d
 800a58e:	5c9b      	ldrb	r3, [r3, r2]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	d113      	bne.n	800a5be <HAL_TIM_OC_Init+0x46>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	223c      	movs	r2, #60	@ 0x3c
 800a59a:	2100      	movs	r1, #0
 800a59c:	5499      	strb	r1, [r3, r2]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	0018      	movs	r0, r3
 800a5a2:	f001 ffbf 	bl	800c524 <TIM_ResetCallback>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <HAL_TIM_OC_Init+0x3c>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a23      	ldr	r2, [pc, #140]	@ (800a640 <HAL_TIM_OC_Init+0xc8>)
 800a5b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	0010      	movs	r0, r2
 800a5bc:	4798      	blx	r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	223d      	movs	r2, #61	@ 0x3d
 800a5c2:	2102      	movs	r1, #2
 800a5c4:	5499      	strb	r1, [r3, r2]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	0019      	movs	r1, r3
 800a5d0:	0010      	movs	r0, r2
 800a5d2:	f001 faa9 	bl	800bb28 <TIM_Base_SetConfig>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2248      	movs	r2, #72	@ 0x48
 800a5da:	2101      	movs	r1, #1
 800a5dc:	5499      	strb	r1, [r3, r2]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	223e      	movs	r2, #62	@ 0x3e
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	5499      	strb	r1, [r3, r2]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	223f      	movs	r2, #63	@ 0x3f
 800a5ea:	2101      	movs	r1, #1
 800a5ec:	5499      	strb	r1, [r3, r2]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2240      	movs	r2, #64	@ 0x40
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	5499      	strb	r1, [r3, r2]
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2241      	movs	r2, #65	@ 0x41
 800a5fa:	2101      	movs	r1, #1
 800a5fc:	5499      	strb	r1, [r3, r2]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2242      	movs	r2, #66	@ 0x42
 800a602:	2101      	movs	r1, #1
 800a604:	5499      	strb	r1, [r3, r2]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2243      	movs	r2, #67	@ 0x43
 800a60a:	2101      	movs	r1, #1
 800a60c:	5499      	strb	r1, [r3, r2]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2244      	movs	r2, #68	@ 0x44
 800a612:	2101      	movs	r1, #1
 800a614:	5499      	strb	r1, [r3, r2]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2245      	movs	r2, #69	@ 0x45
 800a61a:	2101      	movs	r1, #1
 800a61c:	5499      	strb	r1, [r3, r2]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2246      	movs	r2, #70	@ 0x46
 800a622:	2101      	movs	r1, #1
 800a624:	5499      	strb	r1, [r3, r2]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2247      	movs	r2, #71	@ 0x47
 800a62a:	2101      	movs	r1, #1
 800a62c:	5499      	strb	r1, [r3, r2]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	223d      	movs	r2, #61	@ 0x3d
 800a632:	2101      	movs	r1, #1
 800a634:	5499      	strb	r1, [r3, r2]
 800a636:	2300      	movs	r3, #0
 800a638:	0018      	movs	r0, r3
 800a63a:	46bd      	mov	sp, r7
 800a63c:	b002      	add	sp, #8
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	0800a645 	.word	0x0800a645

0800a644 <HAL_TIM_OC_MspInit>:
 800a644:	b580      	push	{r7, lr}
 800a646:	b082      	sub	sp, #8
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	46c0      	nop			@ (mov r8, r8)
 800a64e:	46bd      	mov	sp, r7
 800a650:	b002      	add	sp, #8
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_TIM_OC_Start_IT>:
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
 800a65e:	230f      	movs	r3, #15
 800a660:	18fb      	adds	r3, r7, r3
 800a662:	2200      	movs	r2, #0
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d108      	bne.n	800a67e <HAL_TIM_OC_Start_IT+0x2a>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	223e      	movs	r2, #62	@ 0x3e
 800a670:	5c9b      	ldrb	r3, [r3, r2]
 800a672:	b2db      	uxtb	r3, r3
 800a674:	3b01      	subs	r3, #1
 800a676:	1e5a      	subs	r2, r3, #1
 800a678:	4193      	sbcs	r3, r2
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	e037      	b.n	800a6ee <HAL_TIM_OC_Start_IT+0x9a>
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	2b04      	cmp	r3, #4
 800a682:	d108      	bne.n	800a696 <HAL_TIM_OC_Start_IT+0x42>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	223f      	movs	r2, #63	@ 0x3f
 800a688:	5c9b      	ldrb	r3, [r3, r2]
 800a68a:	b2db      	uxtb	r3, r3
 800a68c:	3b01      	subs	r3, #1
 800a68e:	1e5a      	subs	r2, r3, #1
 800a690:	4193      	sbcs	r3, r2
 800a692:	b2db      	uxtb	r3, r3
 800a694:	e02b      	b.n	800a6ee <HAL_TIM_OC_Start_IT+0x9a>
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	2b08      	cmp	r3, #8
 800a69a:	d108      	bne.n	800a6ae <HAL_TIM_OC_Start_IT+0x5a>
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2240      	movs	r2, #64	@ 0x40
 800a6a0:	5c9b      	ldrb	r3, [r3, r2]
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	1e5a      	subs	r2, r3, #1
 800a6a8:	4193      	sbcs	r3, r2
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	e01f      	b.n	800a6ee <HAL_TIM_OC_Start_IT+0x9a>
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	2b0c      	cmp	r3, #12
 800a6b2:	d108      	bne.n	800a6c6 <HAL_TIM_OC_Start_IT+0x72>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2241      	movs	r2, #65	@ 0x41
 800a6b8:	5c9b      	ldrb	r3, [r3, r2]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	1e5a      	subs	r2, r3, #1
 800a6c0:	4193      	sbcs	r3, r2
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	e013      	b.n	800a6ee <HAL_TIM_OC_Start_IT+0x9a>
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	2b10      	cmp	r3, #16
 800a6ca:	d108      	bne.n	800a6de <HAL_TIM_OC_Start_IT+0x8a>
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2242      	movs	r2, #66	@ 0x42
 800a6d0:	5c9b      	ldrb	r3, [r3, r2]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	1e5a      	subs	r2, r3, #1
 800a6d8:	4193      	sbcs	r3, r2
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	e007      	b.n	800a6ee <HAL_TIM_OC_Start_IT+0x9a>
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2243      	movs	r2, #67	@ 0x43
 800a6e2:	5c9b      	ldrb	r3, [r3, r2]
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	1e5a      	subs	r2, r3, #1
 800a6ea:	4193      	sbcs	r3, r2
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_TIM_OC_Start_IT+0xa2>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e0c4      	b.n	800a880 <HAL_TIM_OC_Start_IT+0x22c>
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d104      	bne.n	800a706 <HAL_TIM_OC_Start_IT+0xb2>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	223e      	movs	r2, #62	@ 0x3e
 800a700:	2102      	movs	r1, #2
 800a702:	5499      	strb	r1, [r3, r2]
 800a704:	e023      	b.n	800a74e <HAL_TIM_OC_Start_IT+0xfa>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b04      	cmp	r3, #4
 800a70a:	d104      	bne.n	800a716 <HAL_TIM_OC_Start_IT+0xc2>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	223f      	movs	r2, #63	@ 0x3f
 800a710:	2102      	movs	r1, #2
 800a712:	5499      	strb	r1, [r3, r2]
 800a714:	e01b      	b.n	800a74e <HAL_TIM_OC_Start_IT+0xfa>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d104      	bne.n	800a726 <HAL_TIM_OC_Start_IT+0xd2>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2240      	movs	r2, #64	@ 0x40
 800a720:	2102      	movs	r1, #2
 800a722:	5499      	strb	r1, [r3, r2]
 800a724:	e013      	b.n	800a74e <HAL_TIM_OC_Start_IT+0xfa>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b0c      	cmp	r3, #12
 800a72a:	d104      	bne.n	800a736 <HAL_TIM_OC_Start_IT+0xe2>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2241      	movs	r2, #65	@ 0x41
 800a730:	2102      	movs	r1, #2
 800a732:	5499      	strb	r1, [r3, r2]
 800a734:	e00b      	b.n	800a74e <HAL_TIM_OC_Start_IT+0xfa>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b10      	cmp	r3, #16
 800a73a:	d104      	bne.n	800a746 <HAL_TIM_OC_Start_IT+0xf2>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2242      	movs	r2, #66	@ 0x42
 800a740:	2102      	movs	r1, #2
 800a742:	5499      	strb	r1, [r3, r2]
 800a744:	e003      	b.n	800a74e <HAL_TIM_OC_Start_IT+0xfa>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2243      	movs	r2, #67	@ 0x43
 800a74a:	2102      	movs	r1, #2
 800a74c:	5499      	strb	r1, [r3, r2]
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	2b0c      	cmp	r3, #12
 800a752:	d02a      	beq.n	800a7aa <HAL_TIM_OC_Start_IT+0x156>
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	2b0c      	cmp	r3, #12
 800a758:	d830      	bhi.n	800a7bc <HAL_TIM_OC_Start_IT+0x168>
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2b08      	cmp	r3, #8
 800a75e:	d01b      	beq.n	800a798 <HAL_TIM_OC_Start_IT+0x144>
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	2b08      	cmp	r3, #8
 800a764:	d82a      	bhi.n	800a7bc <HAL_TIM_OC_Start_IT+0x168>
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d003      	beq.n	800a774 <HAL_TIM_OC_Start_IT+0x120>
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2b04      	cmp	r3, #4
 800a770:	d009      	beq.n	800a786 <HAL_TIM_OC_Start_IT+0x132>
 800a772:	e023      	b.n	800a7bc <HAL_TIM_OC_Start_IT+0x168>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68da      	ldr	r2, [r3, #12]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	2102      	movs	r1, #2
 800a780:	430a      	orrs	r2, r1
 800a782:	60da      	str	r2, [r3, #12]
 800a784:	e01f      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x172>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2104      	movs	r1, #4
 800a792:	430a      	orrs	r2, r1
 800a794:	60da      	str	r2, [r3, #12]
 800a796:	e016      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x172>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2108      	movs	r1, #8
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	60da      	str	r2, [r3, #12]
 800a7a8:	e00d      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x172>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	68da      	ldr	r2, [r3, #12]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2110      	movs	r1, #16
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	60da      	str	r2, [r3, #12]
 800a7ba:	e004      	b.n	800a7c6 <HAL_TIM_OC_Start_IT+0x172>
 800a7bc:	230f      	movs	r3, #15
 800a7be:	18fb      	adds	r3, r7, r3
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	701a      	strb	r2, [r3, #0]
 800a7c4:	46c0      	nop			@ (mov r8, r8)
 800a7c6:	230f      	movs	r3, #15
 800a7c8:	18fb      	adds	r3, r7, r3
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d154      	bne.n	800a87a <HAL_TIM_OC_Start_IT+0x226>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6839      	ldr	r1, [r7, #0]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	0018      	movs	r0, r3
 800a7da:	f001 fe7f 	bl	800c4dc <TIM_CCxChannelCmd>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a29      	ldr	r2, [pc, #164]	@ (800a888 <HAL_TIM_OC_Start_IT+0x234>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d009      	beq.n	800a7fc <HAL_TIM_OC_Start_IT+0x1a8>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a27      	ldr	r2, [pc, #156]	@ (800a88c <HAL_TIM_OC_Start_IT+0x238>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d004      	beq.n	800a7fc <HAL_TIM_OC_Start_IT+0x1a8>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a26      	ldr	r2, [pc, #152]	@ (800a890 <HAL_TIM_OC_Start_IT+0x23c>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d101      	bne.n	800a800 <HAL_TIM_OC_Start_IT+0x1ac>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e000      	b.n	800a802 <HAL_TIM_OC_Start_IT+0x1ae>
 800a800:	2300      	movs	r3, #0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d008      	beq.n	800a818 <HAL_TIM_OC_Start_IT+0x1c4>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2180      	movs	r1, #128	@ 0x80
 800a812:	0209      	lsls	r1, r1, #8
 800a814:	430a      	orrs	r2, r1
 800a816:	645a      	str	r2, [r3, #68]	@ 0x44
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a1a      	ldr	r2, [pc, #104]	@ (800a888 <HAL_TIM_OC_Start_IT+0x234>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00a      	beq.n	800a838 <HAL_TIM_OC_Start_IT+0x1e4>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	2380      	movs	r3, #128	@ 0x80
 800a828:	05db      	lsls	r3, r3, #23
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d004      	beq.n	800a838 <HAL_TIM_OC_Start_IT+0x1e4>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a18      	ldr	r2, [pc, #96]	@ (800a894 <HAL_TIM_OC_Start_IT+0x240>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d116      	bne.n	800a866 <HAL_TIM_OC_Start_IT+0x212>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	689b      	ldr	r3, [r3, #8]
 800a83e:	4a16      	ldr	r2, [pc, #88]	@ (800a898 <HAL_TIM_OC_Start_IT+0x244>)
 800a840:	4013      	ands	r3, r2
 800a842:	60bb      	str	r3, [r7, #8]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	2b06      	cmp	r3, #6
 800a848:	d016      	beq.n	800a878 <HAL_TIM_OC_Start_IT+0x224>
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	2380      	movs	r3, #128	@ 0x80
 800a84e:	025b      	lsls	r3, r3, #9
 800a850:	429a      	cmp	r2, r3
 800a852:	d011      	beq.n	800a878 <HAL_TIM_OC_Start_IT+0x224>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	2101      	movs	r1, #1
 800a860:	430a      	orrs	r2, r1
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	e008      	b.n	800a878 <HAL_TIM_OC_Start_IT+0x224>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2101      	movs	r1, #1
 800a872:	430a      	orrs	r2, r1
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	e000      	b.n	800a87a <HAL_TIM_OC_Start_IT+0x226>
 800a878:	46c0      	nop			@ (mov r8, r8)
 800a87a:	230f      	movs	r3, #15
 800a87c:	18fb      	adds	r3, r7, r3
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	0018      	movs	r0, r3
 800a882:	46bd      	mov	sp, r7
 800a884:	b004      	add	sp, #16
 800a886:	bd80      	pop	{r7, pc}
 800a888:	40012c00 	.word	0x40012c00
 800a88c:	40014400 	.word	0x40014400
 800a890:	40014800 	.word	0x40014800
 800a894:	40000400 	.word	0x40000400
 800a898:	00010007 	.word	0x00010007

0800a89c <HAL_TIM_OC_Stop_IT>:
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	230f      	movs	r3, #15
 800a8a8:	18fb      	adds	r3, r7, r3
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	701a      	strb	r2, [r3, #0]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	2b0c      	cmp	r3, #12
 800a8b2:	d02a      	beq.n	800a90a <HAL_TIM_OC_Stop_IT+0x6e>
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	2b0c      	cmp	r3, #12
 800a8b8:	d830      	bhi.n	800a91c <HAL_TIM_OC_Stop_IT+0x80>
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b08      	cmp	r3, #8
 800a8be:	d01b      	beq.n	800a8f8 <HAL_TIM_OC_Stop_IT+0x5c>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b08      	cmp	r3, #8
 800a8c4:	d82a      	bhi.n	800a91c <HAL_TIM_OC_Stop_IT+0x80>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d003      	beq.n	800a8d4 <HAL_TIM_OC_Stop_IT+0x38>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d009      	beq.n	800a8e6 <HAL_TIM_OC_Stop_IT+0x4a>
 800a8d2:	e023      	b.n	800a91c <HAL_TIM_OC_Stop_IT+0x80>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68da      	ldr	r2, [r3, #12]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2102      	movs	r1, #2
 800a8e0:	438a      	bics	r2, r1
 800a8e2:	60da      	str	r2, [r3, #12]
 800a8e4:	e01f      	b.n	800a926 <HAL_TIM_OC_Stop_IT+0x8a>
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	438a      	bics	r2, r1
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	e016      	b.n	800a926 <HAL_TIM_OC_Stop_IT+0x8a>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	68da      	ldr	r2, [r3, #12]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2108      	movs	r1, #8
 800a904:	438a      	bics	r2, r1
 800a906:	60da      	str	r2, [r3, #12]
 800a908:	e00d      	b.n	800a926 <HAL_TIM_OC_Stop_IT+0x8a>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68da      	ldr	r2, [r3, #12]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2110      	movs	r1, #16
 800a916:	438a      	bics	r2, r1
 800a918:	60da      	str	r2, [r3, #12]
 800a91a:	e004      	b.n	800a926 <HAL_TIM_OC_Stop_IT+0x8a>
 800a91c:	230f      	movs	r3, #15
 800a91e:	18fb      	adds	r3, r7, r3
 800a920:	2201      	movs	r2, #1
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	46c0      	nop			@ (mov r8, r8)
 800a926:	230f      	movs	r3, #15
 800a928:	18fb      	adds	r3, r7, r3
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d000      	beq.n	800a932 <HAL_TIM_OC_Stop_IT+0x96>
 800a930:	e06e      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	2200      	movs	r2, #0
 800a93a:	0018      	movs	r0, r3
 800a93c:	f001 fdce 	bl	800c4dc <TIM_CCxChannelCmd>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a36      	ldr	r2, [pc, #216]	@ (800aa20 <HAL_TIM_OC_Stop_IT+0x184>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d009      	beq.n	800a95e <HAL_TIM_OC_Stop_IT+0xc2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4a35      	ldr	r2, [pc, #212]	@ (800aa24 <HAL_TIM_OC_Stop_IT+0x188>)
 800a950:	4293      	cmp	r3, r2
 800a952:	d004      	beq.n	800a95e <HAL_TIM_OC_Stop_IT+0xc2>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a33      	ldr	r2, [pc, #204]	@ (800aa28 <HAL_TIM_OC_Stop_IT+0x18c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d101      	bne.n	800a962 <HAL_TIM_OC_Stop_IT+0xc6>
 800a95e:	2301      	movs	r3, #1
 800a960:	e000      	b.n	800a964 <HAL_TIM_OC_Stop_IT+0xc8>
 800a962:	2300      	movs	r3, #0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d013      	beq.n	800a990 <HAL_TIM_OC_Stop_IT+0xf4>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	4a2f      	ldr	r2, [pc, #188]	@ (800aa2c <HAL_TIM_OC_Stop_IT+0x190>)
 800a970:	4013      	ands	r3, r2
 800a972:	d10d      	bne.n	800a990 <HAL_TIM_OC_Stop_IT+0xf4>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6a1b      	ldr	r3, [r3, #32]
 800a97a:	4a2d      	ldr	r2, [pc, #180]	@ (800aa30 <HAL_TIM_OC_Stop_IT+0x194>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	d107      	bne.n	800a990 <HAL_TIM_OC_Stop_IT+0xf4>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	492a      	ldr	r1, [pc, #168]	@ (800aa34 <HAL_TIM_OC_Stop_IT+0x198>)
 800a98c:	400a      	ands	r2, r1
 800a98e:	645a      	str	r2, [r3, #68]	@ 0x44
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	4a25      	ldr	r2, [pc, #148]	@ (800aa2c <HAL_TIM_OC_Stop_IT+0x190>)
 800a998:	4013      	ands	r3, r2
 800a99a:	d10d      	bne.n	800a9b8 <HAL_TIM_OC_Stop_IT+0x11c>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6a1b      	ldr	r3, [r3, #32]
 800a9a2:	4a23      	ldr	r2, [pc, #140]	@ (800aa30 <HAL_TIM_OC_Stop_IT+0x194>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	d107      	bne.n	800a9b8 <HAL_TIM_OC_Stop_IT+0x11c>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	438a      	bics	r2, r1
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d104      	bne.n	800a9c8 <HAL_TIM_OC_Stop_IT+0x12c>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	223e      	movs	r2, #62	@ 0x3e
 800a9c2:	2101      	movs	r1, #1
 800a9c4:	5499      	strb	r1, [r3, r2]
 800a9c6:	e023      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b04      	cmp	r3, #4
 800a9cc:	d104      	bne.n	800a9d8 <HAL_TIM_OC_Stop_IT+0x13c>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	223f      	movs	r2, #63	@ 0x3f
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	5499      	strb	r1, [r3, r2]
 800a9d6:	e01b      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b08      	cmp	r3, #8
 800a9dc:	d104      	bne.n	800a9e8 <HAL_TIM_OC_Stop_IT+0x14c>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2240      	movs	r2, #64	@ 0x40
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	5499      	strb	r1, [r3, r2]
 800a9e6:	e013      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b0c      	cmp	r3, #12
 800a9ec:	d104      	bne.n	800a9f8 <HAL_TIM_OC_Stop_IT+0x15c>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2241      	movs	r2, #65	@ 0x41
 800a9f2:	2101      	movs	r1, #1
 800a9f4:	5499      	strb	r1, [r3, r2]
 800a9f6:	e00b      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	2b10      	cmp	r3, #16
 800a9fc:	d104      	bne.n	800aa08 <HAL_TIM_OC_Stop_IT+0x16c>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2242      	movs	r2, #66	@ 0x42
 800aa02:	2101      	movs	r1, #1
 800aa04:	5499      	strb	r1, [r3, r2]
 800aa06:	e003      	b.n	800aa10 <HAL_TIM_OC_Stop_IT+0x174>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2243      	movs	r2, #67	@ 0x43
 800aa0c:	2101      	movs	r1, #1
 800aa0e:	5499      	strb	r1, [r3, r2]
 800aa10:	230f      	movs	r3, #15
 800aa12:	18fb      	adds	r3, r7, r3
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	0018      	movs	r0, r3
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	b004      	add	sp, #16
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	46c0      	nop			@ (mov r8, r8)
 800aa20:	40012c00 	.word	0x40012c00
 800aa24:	40014400 	.word	0x40014400
 800aa28:	40014800 	.word	0x40014800
 800aa2c:	00001111 	.word	0x00001111
 800aa30:	00000444 	.word	0x00000444
 800aa34:	ffff7fff 	.word	0xffff7fff

0800aa38 <HAL_TIM_PWM_Init>:
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_TIM_PWM_Init+0x12>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e056      	b.n	800aaf8 <HAL_TIM_PWM_Init+0xc0>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	223d      	movs	r2, #61	@ 0x3d
 800aa4e:	5c9b      	ldrb	r3, [r3, r2]
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d113      	bne.n	800aa7e <HAL_TIM_PWM_Init+0x46>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	223c      	movs	r2, #60	@ 0x3c
 800aa5a:	2100      	movs	r1, #0
 800aa5c:	5499      	strb	r1, [r3, r2]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	0018      	movs	r0, r3
 800aa62:	f001 fd5f 	bl	800c524 <TIM_ResetCallback>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d102      	bne.n	800aa74 <HAL_TIM_PWM_Init+0x3c>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a23      	ldr	r2, [pc, #140]	@ (800ab00 <HAL_TIM_PWM_Init+0xc8>)
 800aa72:	665a      	str	r2, [r3, #100]	@ 0x64
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	0010      	movs	r0, r2
 800aa7c:	4798      	blx	r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	223d      	movs	r2, #61	@ 0x3d
 800aa82:	2102      	movs	r1, #2
 800aa84:	5499      	strb	r1, [r3, r2]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	0019      	movs	r1, r3
 800aa90:	0010      	movs	r0, r2
 800aa92:	f001 f849 	bl	800bb28 <TIM_Base_SetConfig>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	2248      	movs	r2, #72	@ 0x48
 800aa9a:	2101      	movs	r1, #1
 800aa9c:	5499      	strb	r1, [r3, r2]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	223e      	movs	r2, #62	@ 0x3e
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	5499      	strb	r1, [r3, r2]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	223f      	movs	r2, #63	@ 0x3f
 800aaaa:	2101      	movs	r1, #1
 800aaac:	5499      	strb	r1, [r3, r2]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2240      	movs	r2, #64	@ 0x40
 800aab2:	2101      	movs	r1, #1
 800aab4:	5499      	strb	r1, [r3, r2]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2241      	movs	r2, #65	@ 0x41
 800aaba:	2101      	movs	r1, #1
 800aabc:	5499      	strb	r1, [r3, r2]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2242      	movs	r2, #66	@ 0x42
 800aac2:	2101      	movs	r1, #1
 800aac4:	5499      	strb	r1, [r3, r2]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2243      	movs	r2, #67	@ 0x43
 800aaca:	2101      	movs	r1, #1
 800aacc:	5499      	strb	r1, [r3, r2]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2244      	movs	r2, #68	@ 0x44
 800aad2:	2101      	movs	r1, #1
 800aad4:	5499      	strb	r1, [r3, r2]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2245      	movs	r2, #69	@ 0x45
 800aada:	2101      	movs	r1, #1
 800aadc:	5499      	strb	r1, [r3, r2]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2246      	movs	r2, #70	@ 0x46
 800aae2:	2101      	movs	r1, #1
 800aae4:	5499      	strb	r1, [r3, r2]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2247      	movs	r2, #71	@ 0x47
 800aaea:	2101      	movs	r1, #1
 800aaec:	5499      	strb	r1, [r3, r2]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	223d      	movs	r2, #61	@ 0x3d
 800aaf2:	2101      	movs	r1, #1
 800aaf4:	5499      	strb	r1, [r3, r2]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	0018      	movs	r0, r3
 800aafa:	46bd      	mov	sp, r7
 800aafc:	b002      	add	sp, #8
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	0800ab05 	.word	0x0800ab05

0800ab04 <HAL_TIM_PWM_MspInit>:
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	46c0      	nop			@ (mov r8, r8)
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	b002      	add	sp, #8
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <HAL_TIM_PWM_Start>:
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d108      	bne.n	800ab36 <HAL_TIM_PWM_Start+0x22>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	223e      	movs	r2, #62	@ 0x3e
 800ab28:	5c9b      	ldrb	r3, [r3, r2]
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	3b01      	subs	r3, #1
 800ab2e:	1e5a      	subs	r2, r3, #1
 800ab30:	4193      	sbcs	r3, r2
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	e037      	b.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d108      	bne.n	800ab4e <HAL_TIM_PWM_Start+0x3a>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	223f      	movs	r2, #63	@ 0x3f
 800ab40:	5c9b      	ldrb	r3, [r3, r2]
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	3b01      	subs	r3, #1
 800ab46:	1e5a      	subs	r2, r3, #1
 800ab48:	4193      	sbcs	r3, r2
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	e02b      	b.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d108      	bne.n	800ab66 <HAL_TIM_PWM_Start+0x52>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2240      	movs	r2, #64	@ 0x40
 800ab58:	5c9b      	ldrb	r3, [r3, r2]
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	1e5a      	subs	r2, r3, #1
 800ab60:	4193      	sbcs	r3, r2
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	e01f      	b.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	2b0c      	cmp	r3, #12
 800ab6a:	d108      	bne.n	800ab7e <HAL_TIM_PWM_Start+0x6a>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2241      	movs	r2, #65	@ 0x41
 800ab70:	5c9b      	ldrb	r3, [r3, r2]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	3b01      	subs	r3, #1
 800ab76:	1e5a      	subs	r2, r3, #1
 800ab78:	4193      	sbcs	r3, r2
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	e013      	b.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d108      	bne.n	800ab96 <HAL_TIM_PWM_Start+0x82>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2242      	movs	r2, #66	@ 0x42
 800ab88:	5c9b      	ldrb	r3, [r3, r2]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	1e5a      	subs	r2, r3, #1
 800ab90:	4193      	sbcs	r3, r2
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	e007      	b.n	800aba6 <HAL_TIM_PWM_Start+0x92>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2243      	movs	r2, #67	@ 0x43
 800ab9a:	5c9b      	ldrb	r3, [r3, r2]
 800ab9c:	b2db      	uxtb	r3, r3
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	1e5a      	subs	r2, r3, #1
 800aba2:	4193      	sbcs	r3, r2
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d001      	beq.n	800abae <HAL_TIM_PWM_Start+0x9a>
 800abaa:	2301      	movs	r3, #1
 800abac:	e081      	b.n	800acb2 <HAL_TIM_PWM_Start+0x19e>
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d104      	bne.n	800abbe <HAL_TIM_PWM_Start+0xaa>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	223e      	movs	r2, #62	@ 0x3e
 800abb8:	2102      	movs	r1, #2
 800abba:	5499      	strb	r1, [r3, r2]
 800abbc:	e023      	b.n	800ac06 <HAL_TIM_PWM_Start+0xf2>
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d104      	bne.n	800abce <HAL_TIM_PWM_Start+0xba>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	223f      	movs	r2, #63	@ 0x3f
 800abc8:	2102      	movs	r1, #2
 800abca:	5499      	strb	r1, [r3, r2]
 800abcc:	e01b      	b.n	800ac06 <HAL_TIM_PWM_Start+0xf2>
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d104      	bne.n	800abde <HAL_TIM_PWM_Start+0xca>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2240      	movs	r2, #64	@ 0x40
 800abd8:	2102      	movs	r1, #2
 800abda:	5499      	strb	r1, [r3, r2]
 800abdc:	e013      	b.n	800ac06 <HAL_TIM_PWM_Start+0xf2>
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b0c      	cmp	r3, #12
 800abe2:	d104      	bne.n	800abee <HAL_TIM_PWM_Start+0xda>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2241      	movs	r2, #65	@ 0x41
 800abe8:	2102      	movs	r1, #2
 800abea:	5499      	strb	r1, [r3, r2]
 800abec:	e00b      	b.n	800ac06 <HAL_TIM_PWM_Start+0xf2>
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	2b10      	cmp	r3, #16
 800abf2:	d104      	bne.n	800abfe <HAL_TIM_PWM_Start+0xea>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2242      	movs	r2, #66	@ 0x42
 800abf8:	2102      	movs	r1, #2
 800abfa:	5499      	strb	r1, [r3, r2]
 800abfc:	e003      	b.n	800ac06 <HAL_TIM_PWM_Start+0xf2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2243      	movs	r2, #67	@ 0x43
 800ac02:	2102      	movs	r1, #2
 800ac04:	5499      	strb	r1, [r3, r2]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	0018      	movs	r0, r3
 800ac10:	f001 fc64 	bl	800c4dc <TIM_CCxChannelCmd>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a28      	ldr	r2, [pc, #160]	@ (800acbc <HAL_TIM_PWM_Start+0x1a8>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d009      	beq.n	800ac32 <HAL_TIM_PWM_Start+0x11e>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a27      	ldr	r2, [pc, #156]	@ (800acc0 <HAL_TIM_PWM_Start+0x1ac>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d004      	beq.n	800ac32 <HAL_TIM_PWM_Start+0x11e>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	4a25      	ldr	r2, [pc, #148]	@ (800acc4 <HAL_TIM_PWM_Start+0x1b0>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d101      	bne.n	800ac36 <HAL_TIM_PWM_Start+0x122>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <HAL_TIM_PWM_Start+0x124>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d008      	beq.n	800ac4e <HAL_TIM_PWM_Start+0x13a>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2180      	movs	r1, #128	@ 0x80
 800ac48:	0209      	lsls	r1, r1, #8
 800ac4a:	430a      	orrs	r2, r1
 800ac4c:	645a      	str	r2, [r3, #68]	@ 0x44
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a1a      	ldr	r2, [pc, #104]	@ (800acbc <HAL_TIM_PWM_Start+0x1a8>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d00a      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x15a>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	2380      	movs	r3, #128	@ 0x80
 800ac5e:	05db      	lsls	r3, r3, #23
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d004      	beq.n	800ac6e <HAL_TIM_PWM_Start+0x15a>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a17      	ldr	r2, [pc, #92]	@ (800acc8 <HAL_TIM_PWM_Start+0x1b4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d116      	bne.n	800ac9c <HAL_TIM_PWM_Start+0x188>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	4a15      	ldr	r2, [pc, #84]	@ (800accc <HAL_TIM_PWM_Start+0x1b8>)
 800ac76:	4013      	ands	r3, r2
 800ac78:	60fb      	str	r3, [r7, #12]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b06      	cmp	r3, #6
 800ac7e:	d016      	beq.n	800acae <HAL_TIM_PWM_Start+0x19a>
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	2380      	movs	r3, #128	@ 0x80
 800ac84:	025b      	lsls	r3, r3, #9
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d011      	beq.n	800acae <HAL_TIM_PWM_Start+0x19a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681a      	ldr	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2101      	movs	r1, #1
 800ac96:	430a      	orrs	r2, r1
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	e008      	b.n	800acae <HAL_TIM_PWM_Start+0x19a>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2101      	movs	r1, #1
 800aca8:	430a      	orrs	r2, r1
 800acaa:	601a      	str	r2, [r3, #0]
 800acac:	e000      	b.n	800acb0 <HAL_TIM_PWM_Start+0x19c>
 800acae:	46c0      	nop			@ (mov r8, r8)
 800acb0:	2300      	movs	r3, #0
 800acb2:	0018      	movs	r0, r3
 800acb4:	46bd      	mov	sp, r7
 800acb6:	b004      	add	sp, #16
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	46c0      	nop			@ (mov r8, r8)
 800acbc:	40012c00 	.word	0x40012c00
 800acc0:	40014400 	.word	0x40014400
 800acc4:	40014800 	.word	0x40014800
 800acc8:	40000400 	.word	0x40000400
 800accc:	00010007 	.word	0x00010007

0800acd0 <HAL_TIM_IC_Init>:
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d101      	bne.n	800ace2 <HAL_TIM_IC_Init+0x12>
 800acde:	2301      	movs	r3, #1
 800ace0:	e056      	b.n	800ad90 <HAL_TIM_IC_Init+0xc0>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	223d      	movs	r2, #61	@ 0x3d
 800ace6:	5c9b      	ldrb	r3, [r3, r2]
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b00      	cmp	r3, #0
 800acec:	d113      	bne.n	800ad16 <HAL_TIM_IC_Init+0x46>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	223c      	movs	r2, #60	@ 0x3c
 800acf2:	2100      	movs	r1, #0
 800acf4:	5499      	strb	r1, [r3, r2]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	0018      	movs	r0, r3
 800acfa:	f001 fc13 	bl	800c524 <TIM_ResetCallback>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <HAL_TIM_IC_Init+0x3c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4a23      	ldr	r2, [pc, #140]	@ (800ad98 <HAL_TIM_IC_Init+0xc8>)
 800ad0a:	655a      	str	r2, [r3, #84]	@ 0x54
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	0010      	movs	r0, r2
 800ad14:	4798      	blx	r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	223d      	movs	r2, #61	@ 0x3d
 800ad1a:	2102      	movs	r1, #2
 800ad1c:	5499      	strb	r1, [r3, r2]
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	3304      	adds	r3, #4
 800ad26:	0019      	movs	r1, r3
 800ad28:	0010      	movs	r0, r2
 800ad2a:	f000 fefd 	bl	800bb28 <TIM_Base_SetConfig>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2248      	movs	r2, #72	@ 0x48
 800ad32:	2101      	movs	r1, #1
 800ad34:	5499      	strb	r1, [r3, r2]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	223e      	movs	r2, #62	@ 0x3e
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	5499      	strb	r1, [r3, r2]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	223f      	movs	r2, #63	@ 0x3f
 800ad42:	2101      	movs	r1, #1
 800ad44:	5499      	strb	r1, [r3, r2]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2240      	movs	r2, #64	@ 0x40
 800ad4a:	2101      	movs	r1, #1
 800ad4c:	5499      	strb	r1, [r3, r2]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2241      	movs	r2, #65	@ 0x41
 800ad52:	2101      	movs	r1, #1
 800ad54:	5499      	strb	r1, [r3, r2]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2242      	movs	r2, #66	@ 0x42
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	5499      	strb	r1, [r3, r2]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2243      	movs	r2, #67	@ 0x43
 800ad62:	2101      	movs	r1, #1
 800ad64:	5499      	strb	r1, [r3, r2]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2244      	movs	r2, #68	@ 0x44
 800ad6a:	2101      	movs	r1, #1
 800ad6c:	5499      	strb	r1, [r3, r2]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2245      	movs	r2, #69	@ 0x45
 800ad72:	2101      	movs	r1, #1
 800ad74:	5499      	strb	r1, [r3, r2]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2246      	movs	r2, #70	@ 0x46
 800ad7a:	2101      	movs	r1, #1
 800ad7c:	5499      	strb	r1, [r3, r2]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2247      	movs	r2, #71	@ 0x47
 800ad82:	2101      	movs	r1, #1
 800ad84:	5499      	strb	r1, [r3, r2]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	223d      	movs	r2, #61	@ 0x3d
 800ad8a:	2101      	movs	r1, #1
 800ad8c:	5499      	strb	r1, [r3, r2]
 800ad8e:	2300      	movs	r3, #0
 800ad90:	0018      	movs	r0, r3
 800ad92:	46bd      	mov	sp, r7
 800ad94:	b002      	add	sp, #8
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	0800ad9d 	.word	0x0800ad9d

0800ad9c <HAL_TIM_IC_MspInit>:
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	46c0      	nop			@ (mov r8, r8)
 800ada6:	46bd      	mov	sp, r7
 800ada8:	b002      	add	sp, #8
 800adaa:	bd80      	pop	{r7, pc}

0800adac <HAL_TIM_IC_Start_IT>:
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
 800adb6:	230f      	movs	r3, #15
 800adb8:	18fb      	adds	r3, r7, r3
 800adba:	2200      	movs	r2, #0
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <HAL_TIM_IC_Start_IT+0x22>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	223e      	movs	r2, #62	@ 0x3e
 800adc8:	5c9b      	ldrb	r3, [r3, r2]
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	e023      	b.n	800ae16 <HAL_TIM_IC_Start_IT+0x6a>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	2b04      	cmp	r3, #4
 800add2:	d104      	bne.n	800adde <HAL_TIM_IC_Start_IT+0x32>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	223f      	movs	r2, #63	@ 0x3f
 800add8:	5c9b      	ldrb	r3, [r3, r2]
 800adda:	b2db      	uxtb	r3, r3
 800addc:	e01b      	b.n	800ae16 <HAL_TIM_IC_Start_IT+0x6a>
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	2b08      	cmp	r3, #8
 800ade2:	d104      	bne.n	800adee <HAL_TIM_IC_Start_IT+0x42>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2240      	movs	r2, #64	@ 0x40
 800ade8:	5c9b      	ldrb	r3, [r3, r2]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	e013      	b.n	800ae16 <HAL_TIM_IC_Start_IT+0x6a>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b0c      	cmp	r3, #12
 800adf2:	d104      	bne.n	800adfe <HAL_TIM_IC_Start_IT+0x52>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2241      	movs	r2, #65	@ 0x41
 800adf8:	5c9b      	ldrb	r3, [r3, r2]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	e00b      	b.n	800ae16 <HAL_TIM_IC_Start_IT+0x6a>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b10      	cmp	r3, #16
 800ae02:	d104      	bne.n	800ae0e <HAL_TIM_IC_Start_IT+0x62>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2242      	movs	r2, #66	@ 0x42
 800ae08:	5c9b      	ldrb	r3, [r3, r2]
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	e003      	b.n	800ae16 <HAL_TIM_IC_Start_IT+0x6a>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2243      	movs	r2, #67	@ 0x43
 800ae12:	5c9b      	ldrb	r3, [r3, r2]
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	220e      	movs	r2, #14
 800ae18:	18ba      	adds	r2, r7, r2
 800ae1a:	7013      	strb	r3, [r2, #0]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d104      	bne.n	800ae2c <HAL_TIM_IC_Start_IT+0x80>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2244      	movs	r2, #68	@ 0x44
 800ae26:	5c9b      	ldrb	r3, [r3, r2]
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	e013      	b.n	800ae54 <HAL_TIM_IC_Start_IT+0xa8>
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	2b04      	cmp	r3, #4
 800ae30:	d104      	bne.n	800ae3c <HAL_TIM_IC_Start_IT+0x90>
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2245      	movs	r2, #69	@ 0x45
 800ae36:	5c9b      	ldrb	r3, [r3, r2]
 800ae38:	b2db      	uxtb	r3, r3
 800ae3a:	e00b      	b.n	800ae54 <HAL_TIM_IC_Start_IT+0xa8>
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	2b08      	cmp	r3, #8
 800ae40:	d104      	bne.n	800ae4c <HAL_TIM_IC_Start_IT+0xa0>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2246      	movs	r2, #70	@ 0x46
 800ae46:	5c9b      	ldrb	r3, [r3, r2]
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	e003      	b.n	800ae54 <HAL_TIM_IC_Start_IT+0xa8>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2247      	movs	r2, #71	@ 0x47
 800ae50:	5c9b      	ldrb	r3, [r3, r2]
 800ae52:	b2db      	uxtb	r3, r3
 800ae54:	210d      	movs	r1, #13
 800ae56:	187a      	adds	r2, r7, r1
 800ae58:	7013      	strb	r3, [r2, #0]
 800ae5a:	230e      	movs	r3, #14
 800ae5c:	18fb      	adds	r3, r7, r3
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d103      	bne.n	800ae6c <HAL_TIM_IC_Start_IT+0xc0>
 800ae64:	187b      	adds	r3, r7, r1
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d001      	beq.n	800ae70 <HAL_TIM_IC_Start_IT+0xc4>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e0c3      	b.n	800aff8 <HAL_TIM_IC_Start_IT+0x24c>
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d104      	bne.n	800ae80 <HAL_TIM_IC_Start_IT+0xd4>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	223e      	movs	r2, #62	@ 0x3e
 800ae7a:	2102      	movs	r1, #2
 800ae7c:	5499      	strb	r1, [r3, r2]
 800ae7e:	e023      	b.n	800aec8 <HAL_TIM_IC_Start_IT+0x11c>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d104      	bne.n	800ae90 <HAL_TIM_IC_Start_IT+0xe4>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	223f      	movs	r2, #63	@ 0x3f
 800ae8a:	2102      	movs	r1, #2
 800ae8c:	5499      	strb	r1, [r3, r2]
 800ae8e:	e01b      	b.n	800aec8 <HAL_TIM_IC_Start_IT+0x11c>
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	2b08      	cmp	r3, #8
 800ae94:	d104      	bne.n	800aea0 <HAL_TIM_IC_Start_IT+0xf4>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2240      	movs	r2, #64	@ 0x40
 800ae9a:	2102      	movs	r1, #2
 800ae9c:	5499      	strb	r1, [r3, r2]
 800ae9e:	e013      	b.n	800aec8 <HAL_TIM_IC_Start_IT+0x11c>
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b0c      	cmp	r3, #12
 800aea4:	d104      	bne.n	800aeb0 <HAL_TIM_IC_Start_IT+0x104>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2241      	movs	r2, #65	@ 0x41
 800aeaa:	2102      	movs	r1, #2
 800aeac:	5499      	strb	r1, [r3, r2]
 800aeae:	e00b      	b.n	800aec8 <HAL_TIM_IC_Start_IT+0x11c>
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	2b10      	cmp	r3, #16
 800aeb4:	d104      	bne.n	800aec0 <HAL_TIM_IC_Start_IT+0x114>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2242      	movs	r2, #66	@ 0x42
 800aeba:	2102      	movs	r1, #2
 800aebc:	5499      	strb	r1, [r3, r2]
 800aebe:	e003      	b.n	800aec8 <HAL_TIM_IC_Start_IT+0x11c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2243      	movs	r2, #67	@ 0x43
 800aec4:	2102      	movs	r1, #2
 800aec6:	5499      	strb	r1, [r3, r2]
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d104      	bne.n	800aed8 <HAL_TIM_IC_Start_IT+0x12c>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2244      	movs	r2, #68	@ 0x44
 800aed2:	2102      	movs	r1, #2
 800aed4:	5499      	strb	r1, [r3, r2]
 800aed6:	e013      	b.n	800af00 <HAL_TIM_IC_Start_IT+0x154>
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	d104      	bne.n	800aee8 <HAL_TIM_IC_Start_IT+0x13c>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2245      	movs	r2, #69	@ 0x45
 800aee2:	2102      	movs	r1, #2
 800aee4:	5499      	strb	r1, [r3, r2]
 800aee6:	e00b      	b.n	800af00 <HAL_TIM_IC_Start_IT+0x154>
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	d104      	bne.n	800aef8 <HAL_TIM_IC_Start_IT+0x14c>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2246      	movs	r2, #70	@ 0x46
 800aef2:	2102      	movs	r1, #2
 800aef4:	5499      	strb	r1, [r3, r2]
 800aef6:	e003      	b.n	800af00 <HAL_TIM_IC_Start_IT+0x154>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2247      	movs	r2, #71	@ 0x47
 800aefc:	2102      	movs	r1, #2
 800aefe:	5499      	strb	r1, [r3, r2]
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	2b0c      	cmp	r3, #12
 800af04:	d02a      	beq.n	800af5c <HAL_TIM_IC_Start_IT+0x1b0>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b0c      	cmp	r3, #12
 800af0a:	d830      	bhi.n	800af6e <HAL_TIM_IC_Start_IT+0x1c2>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b08      	cmp	r3, #8
 800af10:	d01b      	beq.n	800af4a <HAL_TIM_IC_Start_IT+0x19e>
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	2b08      	cmp	r3, #8
 800af16:	d82a      	bhi.n	800af6e <HAL_TIM_IC_Start_IT+0x1c2>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_TIM_IC_Start_IT+0x17a>
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b04      	cmp	r3, #4
 800af22:	d009      	beq.n	800af38 <HAL_TIM_IC_Start_IT+0x18c>
 800af24:	e023      	b.n	800af6e <HAL_TIM_IC_Start_IT+0x1c2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68da      	ldr	r2, [r3, #12]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	2102      	movs	r1, #2
 800af32:	430a      	orrs	r2, r1
 800af34:	60da      	str	r2, [r3, #12]
 800af36:	e01f      	b.n	800af78 <HAL_TIM_IC_Start_IT+0x1cc>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68da      	ldr	r2, [r3, #12]
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2104      	movs	r1, #4
 800af44:	430a      	orrs	r2, r1
 800af46:	60da      	str	r2, [r3, #12]
 800af48:	e016      	b.n	800af78 <HAL_TIM_IC_Start_IT+0x1cc>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	68da      	ldr	r2, [r3, #12]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	2108      	movs	r1, #8
 800af56:	430a      	orrs	r2, r1
 800af58:	60da      	str	r2, [r3, #12]
 800af5a:	e00d      	b.n	800af78 <HAL_TIM_IC_Start_IT+0x1cc>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68da      	ldr	r2, [r3, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2110      	movs	r1, #16
 800af68:	430a      	orrs	r2, r1
 800af6a:	60da      	str	r2, [r3, #12]
 800af6c:	e004      	b.n	800af78 <HAL_TIM_IC_Start_IT+0x1cc>
 800af6e:	230f      	movs	r3, #15
 800af70:	18fb      	adds	r3, r7, r3
 800af72:	2201      	movs	r2, #1
 800af74:	701a      	strb	r2, [r3, #0]
 800af76:	46c0      	nop			@ (mov r8, r8)
 800af78:	230f      	movs	r3, #15
 800af7a:	18fb      	adds	r3, r7, r3
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d137      	bne.n	800aff2 <HAL_TIM_IC_Start_IT+0x246>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	2201      	movs	r2, #1
 800af8a:	0018      	movs	r0, r3
 800af8c:	f001 faa6 	bl	800c4dc <TIM_CCxChannelCmd>
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4a1a      	ldr	r2, [pc, #104]	@ (800b000 <HAL_TIM_IC_Start_IT+0x254>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d00a      	beq.n	800afb0 <HAL_TIM_IC_Start_IT+0x204>
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	2380      	movs	r3, #128	@ 0x80
 800afa0:	05db      	lsls	r3, r3, #23
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d004      	beq.n	800afb0 <HAL_TIM_IC_Start_IT+0x204>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	4a16      	ldr	r2, [pc, #88]	@ (800b004 <HAL_TIM_IC_Start_IT+0x258>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d116      	bne.n	800afde <HAL_TIM_IC_Start_IT+0x232>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	4a14      	ldr	r2, [pc, #80]	@ (800b008 <HAL_TIM_IC_Start_IT+0x25c>)
 800afb8:	4013      	ands	r3, r2
 800afba:	60bb      	str	r3, [r7, #8]
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d016      	beq.n	800aff0 <HAL_TIM_IC_Start_IT+0x244>
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	2380      	movs	r3, #128	@ 0x80
 800afc6:	025b      	lsls	r3, r3, #9
 800afc8:	429a      	cmp	r2, r3
 800afca:	d011      	beq.n	800aff0 <HAL_TIM_IC_Start_IT+0x244>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2101      	movs	r1, #1
 800afd8:	430a      	orrs	r2, r1
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	e008      	b.n	800aff0 <HAL_TIM_IC_Start_IT+0x244>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2101      	movs	r1, #1
 800afea:	430a      	orrs	r2, r1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e000      	b.n	800aff2 <HAL_TIM_IC_Start_IT+0x246>
 800aff0:	46c0      	nop			@ (mov r8, r8)
 800aff2:	230f      	movs	r3, #15
 800aff4:	18fb      	adds	r3, r7, r3
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	0018      	movs	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	b004      	add	sp, #16
 800affe:	bd80      	pop	{r7, pc}
 800b000:	40012c00 	.word	0x40012c00
 800b004:	40000400 	.word	0x40000400
 800b008:	00010007 	.word	0x00010007

0800b00c <HAL_TIM_IRQHandler>:
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	60fb      	str	r3, [r7, #12]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	60bb      	str	r3, [r7, #8]
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	2202      	movs	r2, #2
 800b028:	4013      	ands	r3, r2
 800b02a:	d027      	beq.n	800b07c <HAL_TIM_IRQHandler+0x70>
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2202      	movs	r2, #2
 800b030:	4013      	ands	r3, r2
 800b032:	d023      	beq.n	800b07c <HAL_TIM_IRQHandler+0x70>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2203      	movs	r2, #3
 800b03a:	4252      	negs	r2, r2
 800b03c:	611a      	str	r2, [r3, #16]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	771a      	strb	r2, [r3, #28]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	2203      	movs	r2, #3
 800b04c:	4013      	ands	r3, r2
 800b04e:	d006      	beq.n	800b05e <HAL_TIM_IRQHandler+0x52>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2294      	movs	r2, #148	@ 0x94
 800b054:	589b      	ldr	r3, [r3, r2]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	0010      	movs	r0, r2
 800b05a:	4798      	blx	r3
 800b05c:	e00b      	b.n	800b076 <HAL_TIM_IRQHandler+0x6a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	229c      	movs	r2, #156	@ 0x9c
 800b062:	589b      	ldr	r3, [r3, r2]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	0010      	movs	r0, r2
 800b068:	4798      	blx	r3
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	22a0      	movs	r2, #160	@ 0xa0
 800b06e:	589b      	ldr	r3, [r3, r2]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	0010      	movs	r0, r2
 800b074:	4798      	blx	r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	771a      	strb	r2, [r3, #28]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2204      	movs	r2, #4
 800b080:	4013      	ands	r3, r2
 800b082:	d028      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0xca>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2204      	movs	r2, #4
 800b088:	4013      	ands	r3, r2
 800b08a:	d024      	beq.n	800b0d6 <HAL_TIM_IRQHandler+0xca>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2205      	movs	r2, #5
 800b092:	4252      	negs	r2, r2
 800b094:	611a      	str	r2, [r3, #16]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2202      	movs	r2, #2
 800b09a:	771a      	strb	r2, [r3, #28]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	699a      	ldr	r2, [r3, #24]
 800b0a2:	23c0      	movs	r3, #192	@ 0xc0
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	d006      	beq.n	800b0b8 <HAL_TIM_IRQHandler+0xac>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2294      	movs	r2, #148	@ 0x94
 800b0ae:	589b      	ldr	r3, [r3, r2]
 800b0b0:	687a      	ldr	r2, [r7, #4]
 800b0b2:	0010      	movs	r0, r2
 800b0b4:	4798      	blx	r3
 800b0b6:	e00b      	b.n	800b0d0 <HAL_TIM_IRQHandler+0xc4>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	229c      	movs	r2, #156	@ 0x9c
 800b0bc:	589b      	ldr	r3, [r3, r2]
 800b0be:	687a      	ldr	r2, [r7, #4]
 800b0c0:	0010      	movs	r0, r2
 800b0c2:	4798      	blx	r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	22a0      	movs	r2, #160	@ 0xa0
 800b0c8:	589b      	ldr	r3, [r3, r2]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	0010      	movs	r0, r2
 800b0ce:	4798      	blx	r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	771a      	strb	r2, [r3, #28]
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2208      	movs	r2, #8
 800b0da:	4013      	ands	r3, r2
 800b0dc:	d027      	beq.n	800b12e <HAL_TIM_IRQHandler+0x122>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	d023      	beq.n	800b12e <HAL_TIM_IRQHandler+0x122>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2209      	movs	r2, #9
 800b0ec:	4252      	negs	r2, r2
 800b0ee:	611a      	str	r2, [r3, #16]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2204      	movs	r2, #4
 800b0f4:	771a      	strb	r2, [r3, #28]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	69db      	ldr	r3, [r3, #28]
 800b0fc:	2203      	movs	r2, #3
 800b0fe:	4013      	ands	r3, r2
 800b100:	d006      	beq.n	800b110 <HAL_TIM_IRQHandler+0x104>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2294      	movs	r2, #148	@ 0x94
 800b106:	589b      	ldr	r3, [r3, r2]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	0010      	movs	r0, r2
 800b10c:	4798      	blx	r3
 800b10e:	e00b      	b.n	800b128 <HAL_TIM_IRQHandler+0x11c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	229c      	movs	r2, #156	@ 0x9c
 800b114:	589b      	ldr	r3, [r3, r2]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	0010      	movs	r0, r2
 800b11a:	4798      	blx	r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	22a0      	movs	r2, #160	@ 0xa0
 800b120:	589b      	ldr	r3, [r3, r2]
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	0010      	movs	r0, r2
 800b126:	4798      	blx	r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	771a      	strb	r2, [r3, #28]
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2210      	movs	r2, #16
 800b132:	4013      	ands	r3, r2
 800b134:	d028      	beq.n	800b188 <HAL_TIM_IRQHandler+0x17c>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2210      	movs	r2, #16
 800b13a:	4013      	ands	r3, r2
 800b13c:	d024      	beq.n	800b188 <HAL_TIM_IRQHandler+0x17c>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2211      	movs	r2, #17
 800b144:	4252      	negs	r2, r2
 800b146:	611a      	str	r2, [r3, #16]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2208      	movs	r2, #8
 800b14c:	771a      	strb	r2, [r3, #28]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	69da      	ldr	r2, [r3, #28]
 800b154:	23c0      	movs	r3, #192	@ 0xc0
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	4013      	ands	r3, r2
 800b15a:	d006      	beq.n	800b16a <HAL_TIM_IRQHandler+0x15e>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2294      	movs	r2, #148	@ 0x94
 800b160:	589b      	ldr	r3, [r3, r2]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	0010      	movs	r0, r2
 800b166:	4798      	blx	r3
 800b168:	e00b      	b.n	800b182 <HAL_TIM_IRQHandler+0x176>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	229c      	movs	r2, #156	@ 0x9c
 800b16e:	589b      	ldr	r3, [r3, r2]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	0010      	movs	r0, r2
 800b174:	4798      	blx	r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	22a0      	movs	r2, #160	@ 0xa0
 800b17a:	589b      	ldr	r3, [r3, r2]
 800b17c:	687a      	ldr	r2, [r7, #4]
 800b17e:	0010      	movs	r0, r2
 800b180:	4798      	blx	r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	771a      	strb	r2, [r3, #28]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2201      	movs	r2, #1
 800b18c:	4013      	ands	r3, r2
 800b18e:	d00e      	beq.n	800b1ae <HAL_TIM_IRQHandler+0x1a2>
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	4013      	ands	r3, r2
 800b196:	d00a      	beq.n	800b1ae <HAL_TIM_IRQHandler+0x1a2>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2202      	movs	r2, #2
 800b19e:	4252      	negs	r2, r2
 800b1a0:	611a      	str	r2, [r3, #16]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2284      	movs	r2, #132	@ 0x84
 800b1a6:	589b      	ldr	r3, [r3, r2]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	0010      	movs	r0, r2
 800b1ac:	4798      	blx	r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2280      	movs	r2, #128	@ 0x80
 800b1b2:	4013      	ands	r3, r2
 800b1b4:	d104      	bne.n	800b1c0 <HAL_TIM_IRQHandler+0x1b4>
 800b1b6:	68ba      	ldr	r2, [r7, #8]
 800b1b8:	2380      	movs	r3, #128	@ 0x80
 800b1ba:	019b      	lsls	r3, r3, #6
 800b1bc:	4013      	ands	r3, r2
 800b1be:	d00d      	beq.n	800b1dc <HAL_TIM_IRQHandler+0x1d0>
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	2280      	movs	r2, #128	@ 0x80
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	d009      	beq.n	800b1dc <HAL_TIM_IRQHandler+0x1d0>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a22      	ldr	r2, [pc, #136]	@ (800b258 <HAL_TIM_IRQHandler+0x24c>)
 800b1ce:	611a      	str	r2, [r3, #16]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	22b4      	movs	r2, #180	@ 0xb4
 800b1d4:	589b      	ldr	r3, [r3, r2]
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	0010      	movs	r0, r2
 800b1da:	4798      	blx	r3
 800b1dc:	68ba      	ldr	r2, [r7, #8]
 800b1de:	2380      	movs	r3, #128	@ 0x80
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	d00d      	beq.n	800b202 <HAL_TIM_IRQHandler+0x1f6>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2280      	movs	r2, #128	@ 0x80
 800b1ea:	4013      	ands	r3, r2
 800b1ec:	d009      	beq.n	800b202 <HAL_TIM_IRQHandler+0x1f6>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a1a      	ldr	r2, [pc, #104]	@ (800b25c <HAL_TIM_IRQHandler+0x250>)
 800b1f4:	611a      	str	r2, [r3, #16]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	22b8      	movs	r2, #184	@ 0xb8
 800b1fa:	589b      	ldr	r3, [r3, r2]
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	0010      	movs	r0, r2
 800b200:	4798      	blx	r3
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	2240      	movs	r2, #64	@ 0x40
 800b206:	4013      	ands	r3, r2
 800b208:	d00e      	beq.n	800b228 <HAL_TIM_IRQHandler+0x21c>
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2240      	movs	r2, #64	@ 0x40
 800b20e:	4013      	ands	r3, r2
 800b210:	d00a      	beq.n	800b228 <HAL_TIM_IRQHandler+0x21c>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2241      	movs	r2, #65	@ 0x41
 800b218:	4252      	negs	r2, r2
 800b21a:	611a      	str	r2, [r3, #16]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	228c      	movs	r2, #140	@ 0x8c
 800b220:	589b      	ldr	r3, [r3, r2]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	0010      	movs	r0, r2
 800b226:	4798      	blx	r3
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	2220      	movs	r2, #32
 800b22c:	4013      	ands	r3, r2
 800b22e:	d00e      	beq.n	800b24e <HAL_TIM_IRQHandler+0x242>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2220      	movs	r2, #32
 800b234:	4013      	ands	r3, r2
 800b236:	d00a      	beq.n	800b24e <HAL_TIM_IRQHandler+0x242>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2221      	movs	r2, #33	@ 0x21
 800b23e:	4252      	negs	r2, r2
 800b240:	611a      	str	r2, [r3, #16]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	22ac      	movs	r2, #172	@ 0xac
 800b246:	589b      	ldr	r3, [r3, r2]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	0010      	movs	r0, r2
 800b24c:	4798      	blx	r3
 800b24e:	46c0      	nop			@ (mov r8, r8)
 800b250:	46bd      	mov	sp, r7
 800b252:	b004      	add	sp, #16
 800b254:	bd80      	pop	{r7, pc}
 800b256:	46c0      	nop			@ (mov r8, r8)
 800b258:	ffffdf7f 	.word	0xffffdf7f
 800b25c:	fffffeff 	.word	0xfffffeff

0800b260 <HAL_TIM_OC_ConfigChannel>:
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	2317      	movs	r3, #23
 800b26e:	18fb      	adds	r3, r7, r3
 800b270:	2200      	movs	r2, #0
 800b272:	701a      	strb	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	223c      	movs	r2, #60	@ 0x3c
 800b278:	5c9b      	ldrb	r3, [r3, r2]
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	d101      	bne.n	800b282 <HAL_TIM_OC_ConfigChannel+0x22>
 800b27e:	2302      	movs	r3, #2
 800b280:	e048      	b.n	800b314 <HAL_TIM_OC_ConfigChannel+0xb4>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	223c      	movs	r2, #60	@ 0x3c
 800b286:	2101      	movs	r1, #1
 800b288:	5499      	strb	r1, [r3, r2]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2b14      	cmp	r3, #20
 800b28e:	d835      	bhi.n	800b2fc <HAL_TIM_OC_ConfigChannel+0x9c>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	009a      	lsls	r2, r3, #2
 800b294:	4b21      	ldr	r3, [pc, #132]	@ (800b31c <HAL_TIM_OC_ConfigChannel+0xbc>)
 800b296:	18d3      	adds	r3, r2, r3
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	469f      	mov	pc, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	0011      	movs	r1, r2
 800b2a4:	0018      	movs	r0, r3
 800b2a6:	f000 fcc3 	bl	800bc30 <TIM_OC1_SetConfig>
 800b2aa:	e02c      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	0011      	movs	r1, r2
 800b2b4:	0018      	movs	r0, r3
 800b2b6:	f000 fd3b 	bl	800bd30 <TIM_OC2_SetConfig>
 800b2ba:	e024      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	0011      	movs	r1, r2
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	f000 fdb1 	bl	800be2c <TIM_OC3_SetConfig>
 800b2ca:	e01c      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68ba      	ldr	r2, [r7, #8]
 800b2d2:	0011      	movs	r1, r2
 800b2d4:	0018      	movs	r0, r3
 800b2d6:	f000 fe2b 	bl	800bf30 <TIM_OC4_SetConfig>
 800b2da:	e014      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	0011      	movs	r1, r2
 800b2e4:	0018      	movs	r0, r3
 800b2e6:	f000 fe87 	bl	800bff8 <TIM_OC5_SetConfig>
 800b2ea:	e00c      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	68ba      	ldr	r2, [r7, #8]
 800b2f2:	0011      	movs	r1, r2
 800b2f4:	0018      	movs	r0, r3
 800b2f6:	f000 fed9 	bl	800c0ac <TIM_OC6_SetConfig>
 800b2fa:	e004      	b.n	800b306 <HAL_TIM_OC_ConfigChannel+0xa6>
 800b2fc:	2317      	movs	r3, #23
 800b2fe:	18fb      	adds	r3, r7, r3
 800b300:	2201      	movs	r2, #1
 800b302:	701a      	strb	r2, [r3, #0]
 800b304:	46c0      	nop			@ (mov r8, r8)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	223c      	movs	r2, #60	@ 0x3c
 800b30a:	2100      	movs	r1, #0
 800b30c:	5499      	strb	r1, [r3, r2]
 800b30e:	2317      	movs	r3, #23
 800b310:	18fb      	adds	r3, r7, r3
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	0018      	movs	r0, r3
 800b316:	46bd      	mov	sp, r7
 800b318:	b006      	add	sp, #24
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	0800ea14 	.word	0x0800ea14

0800b320 <HAL_TIM_IC_ConfigChannel>:
 800b320:	b580      	push	{r7, lr}
 800b322:	b086      	sub	sp, #24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	2317      	movs	r3, #23
 800b32e:	18fb      	adds	r3, r7, r3
 800b330:	2200      	movs	r2, #0
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	223c      	movs	r2, #60	@ 0x3c
 800b338:	5c9b      	ldrb	r3, [r3, r2]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d101      	bne.n	800b342 <HAL_TIM_IC_ConfigChannel+0x22>
 800b33e:	2302      	movs	r3, #2
 800b340:	e08c      	b.n	800b45c <HAL_TIM_IC_ConfigChannel+0x13c>
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	223c      	movs	r2, #60	@ 0x3c
 800b346:	2101      	movs	r1, #1
 800b348:	5499      	strb	r1, [r3, r2]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d11b      	bne.n	800b388 <HAL_TIM_IC_ConfigChannel+0x68>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6818      	ldr	r0, [r3, #0]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	6819      	ldr	r1, [r3, #0]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	685a      	ldr	r2, [r3, #4]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	f000 ff02 	bl	800c168 <TIM_TI1_SetConfig>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699a      	ldr	r2, [r3, #24]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	210c      	movs	r1, #12
 800b370:	438a      	bics	r2, r1
 800b372:	619a      	str	r2, [r3, #24]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6999      	ldr	r1, [r3, #24]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	689a      	ldr	r2, [r3, #8]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	430a      	orrs	r2, r1
 800b384:	619a      	str	r2, [r3, #24]
 800b386:	e062      	b.n	800b44e <HAL_TIM_IC_ConfigChannel+0x12e>
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b04      	cmp	r3, #4
 800b38c:	d11c      	bne.n	800b3c8 <HAL_TIM_IC_ConfigChannel+0xa8>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	6819      	ldr	r1, [r3, #0]
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	68db      	ldr	r3, [r3, #12]
 800b39e:	f000 ff67 	bl	800c270 <TIM_TI2_SetConfig>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	699a      	ldr	r2, [r3, #24]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	492d      	ldr	r1, [pc, #180]	@ (800b464 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b3ae:	400a      	ands	r2, r1
 800b3b0:	619a      	str	r2, [r3, #24]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6999      	ldr	r1, [r3, #24]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	021a      	lsls	r2, r3, #8
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	619a      	str	r2, [r3, #24]
 800b3c6:	e042      	b.n	800b44e <HAL_TIM_IC_ConfigChannel+0x12e>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b08      	cmp	r3, #8
 800b3cc:	d11b      	bne.n	800b406 <HAL_TIM_IC_ConfigChannel+0xe6>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6818      	ldr	r0, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	6819      	ldr	r1, [r3, #0]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	f000 ffbb 	bl	800c358 <TIM_TI3_SetConfig>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	69da      	ldr	r2, [r3, #28]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	210c      	movs	r1, #12
 800b3ee:	438a      	bics	r2, r1
 800b3f0:	61da      	str	r2, [r3, #28]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	69d9      	ldr	r1, [r3, #28]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	430a      	orrs	r2, r1
 800b402:	61da      	str	r2, [r3, #28]
 800b404:	e023      	b.n	800b44e <HAL_TIM_IC_ConfigChannel+0x12e>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b0c      	cmp	r3, #12
 800b40a:	d11c      	bne.n	800b446 <HAL_TIM_IC_ConfigChannel+0x126>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	6818      	ldr	r0, [r3, #0]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6819      	ldr	r1, [r3, #0]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	f000 ffdc 	bl	800c3d8 <TIM_TI4_SetConfig>
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	69da      	ldr	r2, [r3, #28]
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	490e      	ldr	r1, [pc, #56]	@ (800b464 <HAL_TIM_IC_ConfigChannel+0x144>)
 800b42c:	400a      	ands	r2, r1
 800b42e:	61da      	str	r2, [r3, #28]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	69d9      	ldr	r1, [r3, #28]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	021a      	lsls	r2, r3, #8
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	61da      	str	r2, [r3, #28]
 800b444:	e003      	b.n	800b44e <HAL_TIM_IC_ConfigChannel+0x12e>
 800b446:	2317      	movs	r3, #23
 800b448:	18fb      	adds	r3, r7, r3
 800b44a:	2201      	movs	r2, #1
 800b44c:	701a      	strb	r2, [r3, #0]
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	223c      	movs	r2, #60	@ 0x3c
 800b452:	2100      	movs	r1, #0
 800b454:	5499      	strb	r1, [r3, r2]
 800b456:	2317      	movs	r3, #23
 800b458:	18fb      	adds	r3, r7, r3
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	0018      	movs	r0, r3
 800b45e:	46bd      	mov	sp, r7
 800b460:	b006      	add	sp, #24
 800b462:	bd80      	pop	{r7, pc}
 800b464:	fffff3ff 	.word	0xfffff3ff

0800b468 <HAL_TIM_PWM_ConfigChannel>:
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	2317      	movs	r3, #23
 800b476:	18fb      	adds	r3, r7, r3
 800b478:	2200      	movs	r2, #0
 800b47a:	701a      	strb	r2, [r3, #0]
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	223c      	movs	r2, #60	@ 0x3c
 800b480:	5c9b      	ldrb	r3, [r3, r2]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d101      	bne.n	800b48a <HAL_TIM_PWM_ConfigChannel+0x22>
 800b486:	2302      	movs	r3, #2
 800b488:	e0e5      	b.n	800b656 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	223c      	movs	r2, #60	@ 0x3c
 800b48e:	2101      	movs	r1, #1
 800b490:	5499      	strb	r1, [r3, r2]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b14      	cmp	r3, #20
 800b496:	d900      	bls.n	800b49a <HAL_TIM_PWM_ConfigChannel+0x32>
 800b498:	e0d1      	b.n	800b63e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	009a      	lsls	r2, r3, #2
 800b49e:	4b70      	ldr	r3, [pc, #448]	@ (800b660 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800b4a0:	18d3      	adds	r3, r2, r3
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	469f      	mov	pc, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68ba      	ldr	r2, [r7, #8]
 800b4ac:	0011      	movs	r1, r2
 800b4ae:	0018      	movs	r0, r3
 800b4b0:	f000 fbbe 	bl	800bc30 <TIM_OC1_SetConfig>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	699a      	ldr	r2, [r3, #24]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2108      	movs	r1, #8
 800b4c0:	430a      	orrs	r2, r1
 800b4c2:	619a      	str	r2, [r3, #24]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	699a      	ldr	r2, [r3, #24]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2104      	movs	r1, #4
 800b4d0:	438a      	bics	r2, r1
 800b4d2:	619a      	str	r2, [r3, #24]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	6999      	ldr	r1, [r3, #24]
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	691a      	ldr	r2, [r3, #16]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	430a      	orrs	r2, r1
 800b4e4:	619a      	str	r2, [r3, #24]
 800b4e6:	e0af      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	0011      	movs	r1, r2
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	f000 fc1d 	bl	800bd30 <TIM_OC2_SetConfig>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699a      	ldr	r2, [r3, #24]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2180      	movs	r1, #128	@ 0x80
 800b502:	0109      	lsls	r1, r1, #4
 800b504:	430a      	orrs	r2, r1
 800b506:	619a      	str	r2, [r3, #24]
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	699a      	ldr	r2, [r3, #24]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4954      	ldr	r1, [pc, #336]	@ (800b664 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b514:	400a      	ands	r2, r1
 800b516:	619a      	str	r2, [r3, #24]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6999      	ldr	r1, [r3, #24]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	691b      	ldr	r3, [r3, #16]
 800b522:	021a      	lsls	r2, r3, #8
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	430a      	orrs	r2, r1
 800b52a:	619a      	str	r2, [r3, #24]
 800b52c:	e08c      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	0011      	movs	r1, r2
 800b536:	0018      	movs	r0, r3
 800b538:	f000 fc78 	bl	800be2c <TIM_OC3_SetConfig>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69da      	ldr	r2, [r3, #28]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2108      	movs	r1, #8
 800b548:	430a      	orrs	r2, r1
 800b54a:	61da      	str	r2, [r3, #28]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	69da      	ldr	r2, [r3, #28]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	2104      	movs	r1, #4
 800b558:	438a      	bics	r2, r1
 800b55a:	61da      	str	r2, [r3, #28]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	69d9      	ldr	r1, [r3, #28]
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	691a      	ldr	r2, [r3, #16]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	430a      	orrs	r2, r1
 800b56c:	61da      	str	r2, [r3, #28]
 800b56e:	e06b      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	0011      	movs	r1, r2
 800b578:	0018      	movs	r0, r3
 800b57a:	f000 fcd9 	bl	800bf30 <TIM_OC4_SetConfig>
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	69da      	ldr	r2, [r3, #28]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	2180      	movs	r1, #128	@ 0x80
 800b58a:	0109      	lsls	r1, r1, #4
 800b58c:	430a      	orrs	r2, r1
 800b58e:	61da      	str	r2, [r3, #28]
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	69da      	ldr	r2, [r3, #28]
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4932      	ldr	r1, [pc, #200]	@ (800b664 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b59c:	400a      	ands	r2, r1
 800b59e:	61da      	str	r2, [r3, #28]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	69d9      	ldr	r1, [r3, #28]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	021a      	lsls	r2, r3, #8
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	430a      	orrs	r2, r1
 800b5b2:	61da      	str	r2, [r3, #28]
 800b5b4:	e048      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	68ba      	ldr	r2, [r7, #8]
 800b5bc:	0011      	movs	r1, r2
 800b5be:	0018      	movs	r0, r3
 800b5c0:	f000 fd1a 	bl	800bff8 <TIM_OC5_SetConfig>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2108      	movs	r1, #8
 800b5d0:	430a      	orrs	r2, r1
 800b5d2:	655a      	str	r2, [r3, #84]	@ 0x54
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2104      	movs	r1, #4
 800b5e0:	438a      	bics	r2, r1
 800b5e2:	655a      	str	r2, [r3, #84]	@ 0x54
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	691a      	ldr	r2, [r3, #16]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	655a      	str	r2, [r3, #84]	@ 0x54
 800b5f6:	e027      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	68ba      	ldr	r2, [r7, #8]
 800b5fe:	0011      	movs	r1, r2
 800b600:	0018      	movs	r0, r3
 800b602:	f000 fd53 	bl	800c0ac <TIM_OC6_SetConfig>
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2180      	movs	r1, #128	@ 0x80
 800b612:	0109      	lsls	r1, r1, #4
 800b614:	430a      	orrs	r2, r1
 800b616:	655a      	str	r2, [r3, #84]	@ 0x54
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4910      	ldr	r1, [pc, #64]	@ (800b664 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b624:	400a      	ands	r2, r1
 800b626:	655a      	str	r2, [r3, #84]	@ 0x54
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	021a      	lsls	r2, r3, #8
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	655a      	str	r2, [r3, #84]	@ 0x54
 800b63c:	e004      	b.n	800b648 <HAL_TIM_PWM_ConfigChannel+0x1e0>
 800b63e:	2317      	movs	r3, #23
 800b640:	18fb      	adds	r3, r7, r3
 800b642:	2201      	movs	r2, #1
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	46c0      	nop			@ (mov r8, r8)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	223c      	movs	r2, #60	@ 0x3c
 800b64c:	2100      	movs	r1, #0
 800b64e:	5499      	strb	r1, [r3, r2]
 800b650:	2317      	movs	r3, #23
 800b652:	18fb      	adds	r3, r7, r3
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	0018      	movs	r0, r3
 800b658:	46bd      	mov	sp, r7
 800b65a:	b006      	add	sp, #24
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	46c0      	nop			@ (mov r8, r8)
 800b660:	0800ea68 	.word	0x0800ea68
 800b664:	fffffbff 	.word	0xfffffbff

0800b668 <HAL_TIM_ConfigClockSource>:
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
 800b672:	230f      	movs	r3, #15
 800b674:	18fb      	adds	r3, r7, r3
 800b676:	2200      	movs	r2, #0
 800b678:	701a      	strb	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	223c      	movs	r2, #60	@ 0x3c
 800b67e:	5c9b      	ldrb	r3, [r3, r2]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d101      	bne.n	800b688 <HAL_TIM_ConfigClockSource+0x20>
 800b684:	2302      	movs	r3, #2
 800b686:	e0bc      	b.n	800b802 <HAL_TIM_ConfigClockSource+0x19a>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	223c      	movs	r2, #60	@ 0x3c
 800b68c:	2101      	movs	r1, #1
 800b68e:	5499      	strb	r1, [r3, r2]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	223d      	movs	r2, #61	@ 0x3d
 800b694:	2102      	movs	r1, #2
 800b696:	5499      	strb	r1, [r3, r2]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	60bb      	str	r3, [r7, #8]
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	4a5a      	ldr	r2, [pc, #360]	@ (800b80c <HAL_TIM_ConfigClockSource+0x1a4>)
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	60bb      	str	r3, [r7, #8]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	4a59      	ldr	r2, [pc, #356]	@ (800b810 <HAL_TIM_ConfigClockSource+0x1a8>)
 800b6ac:	4013      	ands	r3, r2
 800b6ae:	60bb      	str	r3, [r7, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	609a      	str	r2, [r3, #8]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2280      	movs	r2, #128	@ 0x80
 800b6be:	0192      	lsls	r2, r2, #6
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d040      	beq.n	800b746 <HAL_TIM_ConfigClockSource+0xde>
 800b6c4:	2280      	movs	r2, #128	@ 0x80
 800b6c6:	0192      	lsls	r2, r2, #6
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d900      	bls.n	800b6ce <HAL_TIM_ConfigClockSource+0x66>
 800b6cc:	e088      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b6ce:	2280      	movs	r2, #128	@ 0x80
 800b6d0:	0152      	lsls	r2, r2, #5
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d100      	bne.n	800b6d8 <HAL_TIM_ConfigClockSource+0x70>
 800b6d6:	e088      	b.n	800b7ea <HAL_TIM_ConfigClockSource+0x182>
 800b6d8:	2280      	movs	r2, #128	@ 0x80
 800b6da:	0152      	lsls	r2, r2, #5
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d900      	bls.n	800b6e2 <HAL_TIM_ConfigClockSource+0x7a>
 800b6e0:	e07e      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b6e2:	2b70      	cmp	r3, #112	@ 0x70
 800b6e4:	d018      	beq.n	800b718 <HAL_TIM_ConfigClockSource+0xb0>
 800b6e6:	d900      	bls.n	800b6ea <HAL_TIM_ConfigClockSource+0x82>
 800b6e8:	e07a      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b6ea:	2b60      	cmp	r3, #96	@ 0x60
 800b6ec:	d04f      	beq.n	800b78e <HAL_TIM_ConfigClockSource+0x126>
 800b6ee:	d900      	bls.n	800b6f2 <HAL_TIM_ConfigClockSource+0x8a>
 800b6f0:	e076      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b6f2:	2b50      	cmp	r3, #80	@ 0x50
 800b6f4:	d03b      	beq.n	800b76e <HAL_TIM_ConfigClockSource+0x106>
 800b6f6:	d900      	bls.n	800b6fa <HAL_TIM_ConfigClockSource+0x92>
 800b6f8:	e072      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b6fa:	2b40      	cmp	r3, #64	@ 0x40
 800b6fc:	d057      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x146>
 800b6fe:	d900      	bls.n	800b702 <HAL_TIM_ConfigClockSource+0x9a>
 800b700:	e06e      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b702:	2b30      	cmp	r3, #48	@ 0x30
 800b704:	d063      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x166>
 800b706:	d86b      	bhi.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b708:	2b20      	cmp	r3, #32
 800b70a:	d060      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x166>
 800b70c:	d868      	bhi.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d05d      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x166>
 800b712:	2b10      	cmp	r3, #16
 800b714:	d05b      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x166>
 800b716:	e063      	b.n	800b7e0 <HAL_TIM_ConfigClockSource+0x178>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6818      	ldr	r0, [r3, #0]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	6899      	ldr	r1, [r3, #8]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	685a      	ldr	r2, [r3, #4]
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f000 feb8 	bl	800c49c <TIM_ETR_SetConfig>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	60bb      	str	r3, [r7, #8]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	2277      	movs	r2, #119	@ 0x77
 800b738:	4313      	orrs	r3, r2
 800b73a:	60bb      	str	r3, [r7, #8]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	609a      	str	r2, [r3, #8]
 800b744:	e052      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6818      	ldr	r0, [r3, #0]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	6899      	ldr	r1, [r3, #8]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	f000 fea1 	bl	800c49c <TIM_ETR_SetConfig>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	2180      	movs	r1, #128	@ 0x80
 800b766:	01c9      	lsls	r1, r1, #7
 800b768:	430a      	orrs	r2, r1
 800b76a:	609a      	str	r2, [r3, #8]
 800b76c:	e03e      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6818      	ldr	r0, [r3, #0]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6859      	ldr	r1, [r3, #4]
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	001a      	movs	r2, r3
 800b77c:	f000 fd4a 	bl	800c214 <TIM_TI1_ConfigInputStage>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2150      	movs	r1, #80	@ 0x50
 800b786:	0018      	movs	r0, r3
 800b788:	f000 fe6c 	bl	800c464 <TIM_ITRx_SetConfig>
 800b78c:	e02e      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6818      	ldr	r0, [r3, #0]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	6859      	ldr	r1, [r3, #4]
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	001a      	movs	r2, r3
 800b79c:	f000 fdaa 	bl	800c2f4 <TIM_TI2_ConfigInputStage>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2160      	movs	r1, #96	@ 0x60
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	f000 fe5c 	bl	800c464 <TIM_ITRx_SetConfig>
 800b7ac:	e01e      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	6859      	ldr	r1, [r3, #4]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	001a      	movs	r2, r3
 800b7bc:	f000 fd2a 	bl	800c214 <TIM_TI1_ConfigInputStage>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2140      	movs	r1, #64	@ 0x40
 800b7c6:	0018      	movs	r0, r3
 800b7c8:	f000 fe4c 	bl	800c464 <TIM_ITRx_SetConfig>
 800b7cc:	e00e      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	0019      	movs	r1, r3
 800b7d8:	0010      	movs	r0, r2
 800b7da:	f000 fe43 	bl	800c464 <TIM_ITRx_SetConfig>
 800b7de:	e005      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b7e0:	230f      	movs	r3, #15
 800b7e2:	18fb      	adds	r3, r7, r3
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	701a      	strb	r2, [r3, #0]
 800b7e8:	e000      	b.n	800b7ec <HAL_TIM_ConfigClockSource+0x184>
 800b7ea:	46c0      	nop			@ (mov r8, r8)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	223d      	movs	r2, #61	@ 0x3d
 800b7f0:	2101      	movs	r1, #1
 800b7f2:	5499      	strb	r1, [r3, r2]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	223c      	movs	r2, #60	@ 0x3c
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	5499      	strb	r1, [r3, r2]
 800b7fc:	230f      	movs	r3, #15
 800b7fe:	18fb      	adds	r3, r7, r3
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	0018      	movs	r0, r3
 800b804:	46bd      	mov	sp, r7
 800b806:	b004      	add	sp, #16
 800b808:	bd80      	pop	{r7, pc}
 800b80a:	46c0      	nop			@ (mov r8, r8)
 800b80c:	ffceff88 	.word	0xffceff88
 800b810:	ffff00ff 	.word	0xffff00ff

0800b814 <HAL_TIM_ReadCapturedValue>:
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
 800b81e:	2300      	movs	r3, #0
 800b820:	60fb      	str	r3, [r7, #12]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	2b0c      	cmp	r3, #12
 800b826:	d01e      	beq.n	800b866 <HAL_TIM_ReadCapturedValue+0x52>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	2b0c      	cmp	r3, #12
 800b82c:	d820      	bhi.n	800b870 <HAL_TIM_ReadCapturedValue+0x5c>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b08      	cmp	r3, #8
 800b832:	d013      	beq.n	800b85c <HAL_TIM_ReadCapturedValue+0x48>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	2b08      	cmp	r3, #8
 800b838:	d81a      	bhi.n	800b870 <HAL_TIM_ReadCapturedValue+0x5c>
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <HAL_TIM_ReadCapturedValue+0x34>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2b04      	cmp	r3, #4
 800b844:	d005      	beq.n	800b852 <HAL_TIM_ReadCapturedValue+0x3e>
 800b846:	e013      	b.n	800b870 <HAL_TIM_ReadCapturedValue+0x5c>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b84e:	60fb      	str	r3, [r7, #12]
 800b850:	e00f      	b.n	800b872 <HAL_TIM_ReadCapturedValue+0x5e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b858:	60fb      	str	r3, [r7, #12]
 800b85a:	e00a      	b.n	800b872 <HAL_TIM_ReadCapturedValue+0x5e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b862:	60fb      	str	r3, [r7, #12]
 800b864:	e005      	b.n	800b872 <HAL_TIM_ReadCapturedValue+0x5e>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b86c:	60fb      	str	r3, [r7, #12]
 800b86e:	e000      	b.n	800b872 <HAL_TIM_ReadCapturedValue+0x5e>
 800b870:	46c0      	nop			@ (mov r8, r8)
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	0018      	movs	r0, r3
 800b876:	46bd      	mov	sp, r7
 800b878:	b004      	add	sp, #16
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <HAL_TIM_PeriodElapsedCallback>:
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	46c0      	nop			@ (mov r8, r8)
 800b886:	46bd      	mov	sp, r7
 800b888:	b002      	add	sp, #8
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	46c0      	nop			@ (mov r8, r8)
 800b896:	46bd      	mov	sp, r7
 800b898:	b002      	add	sp, #8
 800b89a:	bd80      	pop	{r7, pc}

0800b89c <HAL_TIM_OC_DelayElapsedCallback>:
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b082      	sub	sp, #8
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
 800b8a4:	46c0      	nop			@ (mov r8, r8)
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	b002      	add	sp, #8
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_TIM_IC_CaptureCallback>:
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	46c0      	nop			@ (mov r8, r8)
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	b002      	add	sp, #8
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	46c0      	nop			@ (mov r8, r8)
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	b002      	add	sp, #8
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_TIM_PWM_PulseFinishedCallback>:
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	46c0      	nop			@ (mov r8, r8)
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	b002      	add	sp, #8
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
 800b8e4:	46c0      	nop			@ (mov r8, r8)
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	b002      	add	sp, #8
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <HAL_TIM_TriggerCallback>:
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	46c0      	nop			@ (mov r8, r8)
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	b002      	add	sp, #8
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <HAL_TIM_TriggerHalfCpltCallback>:
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b082      	sub	sp, #8
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	46c0      	nop			@ (mov r8, r8)
 800b906:	46bd      	mov	sp, r7
 800b908:	b002      	add	sp, #8
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_TIM_ErrorCallback>:
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	46c0      	nop			@ (mov r8, r8)
 800b916:	46bd      	mov	sp, r7
 800b918:	b002      	add	sp, #8
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_TIM_RegisterCallback>:
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	607a      	str	r2, [r7, #4]
 800b926:	230b      	movs	r3, #11
 800b928:	18fb      	adds	r3, r7, r3
 800b92a:	1c0a      	adds	r2, r1, #0
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	2317      	movs	r3, #23
 800b930:	18fb      	adds	r3, r7, r3
 800b932:	2200      	movs	r2, #0
 800b934:	701a      	strb	r2, [r3, #0]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <HAL_TIM_RegisterCallback+0x24>
 800b93c:	2301      	movs	r3, #1
 800b93e:	e0ea      	b.n	800bb16 <HAL_TIM_RegisterCallback+0x1fa>
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	223d      	movs	r2, #61	@ 0x3d
 800b944:	5c9b      	ldrb	r3, [r3, r2]
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d000      	beq.n	800b94e <HAL_TIM_RegisterCallback+0x32>
 800b94c:	e08e      	b.n	800ba6c <HAL_TIM_RegisterCallback+0x150>
 800b94e:	230b      	movs	r3, #11
 800b950:	18fb      	adds	r3, r7, r3
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b1b      	cmp	r3, #27
 800b956:	d900      	bls.n	800b95a <HAL_TIM_RegisterCallback+0x3e>
 800b958:	e083      	b.n	800ba62 <HAL_TIM_RegisterCallback+0x146>
 800b95a:	009a      	lsls	r2, r3, #2
 800b95c:	4b70      	ldr	r3, [pc, #448]	@ (800bb20 <HAL_TIM_RegisterCallback+0x204>)
 800b95e:	18d3      	adds	r3, r2, r3
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	469f      	mov	pc, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	64da      	str	r2, [r3, #76]	@ 0x4c
 800b96a:	e0d1      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	651a      	str	r2, [r3, #80]	@ 0x50
 800b972:	e0cd      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	655a      	str	r2, [r3, #84]	@ 0x54
 800b97a:	e0c9      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	659a      	str	r2, [r3, #88]	@ 0x58
 800b982:	e0c5      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b98a:	e0c1      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	661a      	str	r2, [r3, #96]	@ 0x60
 800b992:	e0bd      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	687a      	ldr	r2, [r7, #4]
 800b998:	665a      	str	r2, [r3, #100]	@ 0x64
 800b99a:	e0b9      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	669a      	str	r2, [r3, #104]	@ 0x68
 800b9a2:	e0b5      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b9aa:	e0b1      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	671a      	str	r2, [r3, #112]	@ 0x70
 800b9b2:	e0ad      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	687a      	ldr	r2, [r7, #4]
 800b9b8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b9ba:	e0a9      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	679a      	str	r2, [r3, #120]	@ 0x78
 800b9c2:	e0a5      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 800b9ca:	e0a1      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2180      	movs	r1, #128	@ 0x80
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	505a      	str	r2, [r3, r1]
 800b9d4:	e09c      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2184      	movs	r1, #132	@ 0x84
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	505a      	str	r2, [r3, r1]
 800b9de:	e097      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2188      	movs	r1, #136	@ 0x88
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	505a      	str	r2, [r3, r1]
 800b9e8:	e092      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	218c      	movs	r1, #140	@ 0x8c
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	505a      	str	r2, [r3, r1]
 800b9f2:	e08d      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2190      	movs	r1, #144	@ 0x90
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	505a      	str	r2, [r3, r1]
 800b9fc:	e088      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2194      	movs	r1, #148	@ 0x94
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	505a      	str	r2, [r3, r1]
 800ba06:	e083      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2198      	movs	r1, #152	@ 0x98
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	505a      	str	r2, [r3, r1]
 800ba10:	e07e      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	219c      	movs	r1, #156	@ 0x9c
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	505a      	str	r2, [r3, r1]
 800ba1a:	e079      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	21a0      	movs	r1, #160	@ 0xa0
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	505a      	str	r2, [r3, r1]
 800ba24:	e074      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	21a4      	movs	r1, #164	@ 0xa4
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	505a      	str	r2, [r3, r1]
 800ba2e:	e06f      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	21a8      	movs	r1, #168	@ 0xa8
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	505a      	str	r2, [r3, r1]
 800ba38:	e06a      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	21ac      	movs	r1, #172	@ 0xac
 800ba3e:	687a      	ldr	r2, [r7, #4]
 800ba40:	505a      	str	r2, [r3, r1]
 800ba42:	e065      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	21b0      	movs	r1, #176	@ 0xb0
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	505a      	str	r2, [r3, r1]
 800ba4c:	e060      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	21b4      	movs	r1, #180	@ 0xb4
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	505a      	str	r2, [r3, r1]
 800ba56:	e05b      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	21b8      	movs	r1, #184	@ 0xb8
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	505a      	str	r2, [r3, r1]
 800ba60:	e056      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba62:	2317      	movs	r3, #23
 800ba64:	18fb      	adds	r3, r7, r3
 800ba66:	2201      	movs	r2, #1
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	e051      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	223d      	movs	r2, #61	@ 0x3d
 800ba70:	5c9b      	ldrb	r3, [r3, r2]
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d147      	bne.n	800bb08 <HAL_TIM_RegisterCallback+0x1ec>
 800ba78:	230b      	movs	r3, #11
 800ba7a:	18fb      	adds	r3, r7, r3
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2b0d      	cmp	r3, #13
 800ba80:	d83d      	bhi.n	800bafe <HAL_TIM_RegisterCallback+0x1e2>
 800ba82:	009a      	lsls	r2, r3, #2
 800ba84:	4b27      	ldr	r3, [pc, #156]	@ (800bb24 <HAL_TIM_RegisterCallback+0x208>)
 800ba86:	18d3      	adds	r3, r2, r3
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	469f      	mov	pc, r3
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ba92:	e03d      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	651a      	str	r2, [r3, #80]	@ 0x50
 800ba9a:	e039      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	655a      	str	r2, [r3, #84]	@ 0x54
 800baa2:	e035      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	659a      	str	r2, [r3, #88]	@ 0x58
 800baaa:	e031      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bab2:	e02d      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	661a      	str	r2, [r3, #96]	@ 0x60
 800baba:	e029      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	665a      	str	r2, [r3, #100]	@ 0x64
 800bac2:	e025      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	669a      	str	r2, [r3, #104]	@ 0x68
 800baca:	e021      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	66da      	str	r2, [r3, #108]	@ 0x6c
 800bad2:	e01d      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	671a      	str	r2, [r3, #112]	@ 0x70
 800bada:	e019      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	675a      	str	r2, [r3, #116]	@ 0x74
 800bae2:	e015      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	679a      	str	r2, [r3, #120]	@ 0x78
 800baea:	e011      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	67da      	str	r2, [r3, #124]	@ 0x7c
 800baf2:	e00d      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2180      	movs	r1, #128	@ 0x80
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	505a      	str	r2, [r3, r1]
 800bafc:	e008      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bafe:	2317      	movs	r3, #23
 800bb00:	18fb      	adds	r3, r7, r3
 800bb02:	2201      	movs	r2, #1
 800bb04:	701a      	strb	r2, [r3, #0]
 800bb06:	e003      	b.n	800bb10 <HAL_TIM_RegisterCallback+0x1f4>
 800bb08:	2317      	movs	r3, #23
 800bb0a:	18fb      	adds	r3, r7, r3
 800bb0c:	2201      	movs	r2, #1
 800bb0e:	701a      	strb	r2, [r3, #0]
 800bb10:	2317      	movs	r3, #23
 800bb12:	18fb      	adds	r3, r7, r3
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	0018      	movs	r0, r3
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	b006      	add	sp, #24
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	46c0      	nop			@ (mov r8, r8)
 800bb20:	0800eabc 	.word	0x0800eabc
 800bb24:	0800eb2c 	.word	0x0800eb2c

0800bb28 <TIM_Base_SetConfig>:
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	60fb      	str	r3, [r7, #12]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a37      	ldr	r2, [pc, #220]	@ (800bc18 <TIM_Base_SetConfig+0xf0>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d008      	beq.n	800bb52 <TIM_Base_SetConfig+0x2a>
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	2380      	movs	r3, #128	@ 0x80
 800bb44:	05db      	lsls	r3, r3, #23
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d003      	beq.n	800bb52 <TIM_Base_SetConfig+0x2a>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a33      	ldr	r2, [pc, #204]	@ (800bc1c <TIM_Base_SetConfig+0xf4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d108      	bne.n	800bb64 <TIM_Base_SetConfig+0x3c>
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2270      	movs	r2, #112	@ 0x70
 800bb56:	4393      	bics	r3, r2
 800bb58:	60fb      	str	r3, [r7, #12]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	4a2c      	ldr	r2, [pc, #176]	@ (800bc18 <TIM_Base_SetConfig+0xf0>)
 800bb68:	4293      	cmp	r3, r2
 800bb6a:	d014      	beq.n	800bb96 <TIM_Base_SetConfig+0x6e>
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	2380      	movs	r3, #128	@ 0x80
 800bb70:	05db      	lsls	r3, r3, #23
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d00f      	beq.n	800bb96 <TIM_Base_SetConfig+0x6e>
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a28      	ldr	r2, [pc, #160]	@ (800bc1c <TIM_Base_SetConfig+0xf4>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d00b      	beq.n	800bb96 <TIM_Base_SetConfig+0x6e>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4a27      	ldr	r2, [pc, #156]	@ (800bc20 <TIM_Base_SetConfig+0xf8>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d007      	beq.n	800bb96 <TIM_Base_SetConfig+0x6e>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	4a26      	ldr	r2, [pc, #152]	@ (800bc24 <TIM_Base_SetConfig+0xfc>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d003      	beq.n	800bb96 <TIM_Base_SetConfig+0x6e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	4a25      	ldr	r2, [pc, #148]	@ (800bc28 <TIM_Base_SetConfig+0x100>)
 800bb92:	4293      	cmp	r3, r2
 800bb94:	d108      	bne.n	800bba8 <TIM_Base_SetConfig+0x80>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4a24      	ldr	r2, [pc, #144]	@ (800bc2c <TIM_Base_SetConfig+0x104>)
 800bb9a:	4013      	ands	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	68db      	ldr	r3, [r3, #12]
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	2280      	movs	r2, #128	@ 0x80
 800bbac:	4393      	bics	r3, r2
 800bbae:	001a      	movs	r2, r3
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	689a      	ldr	r2, [r3, #8]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	681a      	ldr	r2, [r3, #0]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	629a      	str	r2, [r3, #40]	@ 0x28
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	4a11      	ldr	r2, [pc, #68]	@ (800bc18 <TIM_Base_SetConfig+0xf0>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d007      	beq.n	800bbe6 <TIM_Base_SetConfig+0xbe>
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	4a12      	ldr	r2, [pc, #72]	@ (800bc24 <TIM_Base_SetConfig+0xfc>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d003      	beq.n	800bbe6 <TIM_Base_SetConfig+0xbe>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	4a11      	ldr	r2, [pc, #68]	@ (800bc28 <TIM_Base_SetConfig+0x100>)
 800bbe2:	4293      	cmp	r3, r2
 800bbe4:	d103      	bne.n	800bbee <TIM_Base_SetConfig+0xc6>
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	631a      	str	r2, [r3, #48]	@ 0x30
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	615a      	str	r2, [r3, #20]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	2b01      	cmp	r3, #1
 800bbfe:	d106      	bne.n	800bc0e <TIM_Base_SetConfig+0xe6>
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	2201      	movs	r2, #1
 800bc06:	4393      	bics	r3, r2
 800bc08:	001a      	movs	r2, r3
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	611a      	str	r2, [r3, #16]
 800bc0e:	46c0      	nop			@ (mov r8, r8)
 800bc10:	46bd      	mov	sp, r7
 800bc12:	b004      	add	sp, #16
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	46c0      	nop			@ (mov r8, r8)
 800bc18:	40012c00 	.word	0x40012c00
 800bc1c:	40000400 	.word	0x40000400
 800bc20:	40002000 	.word	0x40002000
 800bc24:	40014400 	.word	0x40014400
 800bc28:	40014800 	.word	0x40014800
 800bc2c:	fffffcff 	.word	0xfffffcff

0800bc30 <TIM_OC1_SetConfig>:
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	6039      	str	r1, [r7, #0]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	6a1b      	ldr	r3, [r3, #32]
 800bc3e:	617b      	str	r3, [r7, #20]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6a1b      	ldr	r3, [r3, #32]
 800bc44:	2201      	movs	r2, #1
 800bc46:	4393      	bics	r3, r2
 800bc48:	001a      	movs	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	621a      	str	r2, [r3, #32]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	685b      	ldr	r3, [r3, #4]
 800bc52:	613b      	str	r3, [r7, #16]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	699b      	ldr	r3, [r3, #24]
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	4a2e      	ldr	r2, [pc, #184]	@ (800bd18 <TIM_OC1_SetConfig+0xe8>)
 800bc5e:	4013      	ands	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2203      	movs	r2, #3
 800bc66:	4393      	bics	r3, r2
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68fa      	ldr	r2, [r7, #12]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2202      	movs	r2, #2
 800bc78:	4393      	bics	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	689b      	ldr	r3, [r3, #8]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	4313      	orrs	r3, r2
 800bc84:	617b      	str	r3, [r7, #20]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a24      	ldr	r2, [pc, #144]	@ (800bd1c <TIM_OC1_SetConfig+0xec>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d007      	beq.n	800bc9e <TIM_OC1_SetConfig+0x6e>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a23      	ldr	r2, [pc, #140]	@ (800bd20 <TIM_OC1_SetConfig+0xf0>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d003      	beq.n	800bc9e <TIM_OC1_SetConfig+0x6e>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a22      	ldr	r2, [pc, #136]	@ (800bd24 <TIM_OC1_SetConfig+0xf4>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d10c      	bne.n	800bcb8 <TIM_OC1_SetConfig+0x88>
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	2208      	movs	r2, #8
 800bca2:	4393      	bics	r3, r2
 800bca4:	617b      	str	r3, [r7, #20]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	697a      	ldr	r2, [r7, #20]
 800bcac:	4313      	orrs	r3, r2
 800bcae:	617b      	str	r3, [r7, #20]
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2204      	movs	r2, #4
 800bcb4:	4393      	bics	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a18      	ldr	r2, [pc, #96]	@ (800bd1c <TIM_OC1_SetConfig+0xec>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d007      	beq.n	800bcd0 <TIM_OC1_SetConfig+0xa0>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a17      	ldr	r2, [pc, #92]	@ (800bd20 <TIM_OC1_SetConfig+0xf0>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d003      	beq.n	800bcd0 <TIM_OC1_SetConfig+0xa0>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a16      	ldr	r2, [pc, #88]	@ (800bd24 <TIM_OC1_SetConfig+0xf4>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d111      	bne.n	800bcf4 <TIM_OC1_SetConfig+0xc4>
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	4a15      	ldr	r2, [pc, #84]	@ (800bd28 <TIM_OC1_SetConfig+0xf8>)
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	613b      	str	r3, [r7, #16]
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	4a14      	ldr	r2, [pc, #80]	@ (800bd2c <TIM_OC1_SetConfig+0xfc>)
 800bcdc:	4013      	ands	r3, r2
 800bcde:	613b      	str	r3, [r7, #16]
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	695b      	ldr	r3, [r3, #20]
 800bce4:	693a      	ldr	r2, [r7, #16]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	613b      	str	r3, [r7, #16]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	693a      	ldr	r2, [r7, #16]
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	613b      	str	r3, [r7, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	605a      	str	r2, [r3, #4]
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	619a      	str	r2, [r3, #24]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	635a      	str	r2, [r3, #52]	@ 0x34
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	621a      	str	r2, [r3, #32]
 800bd0e:	46c0      	nop			@ (mov r8, r8)
 800bd10:	46bd      	mov	sp, r7
 800bd12:	b006      	add	sp, #24
 800bd14:	bd80      	pop	{r7, pc}
 800bd16:	46c0      	nop			@ (mov r8, r8)
 800bd18:	fffeff8f 	.word	0xfffeff8f
 800bd1c:	40012c00 	.word	0x40012c00
 800bd20:	40014400 	.word	0x40014400
 800bd24:	40014800 	.word	0x40014800
 800bd28:	fffffeff 	.word	0xfffffeff
 800bd2c:	fffffdff 	.word	0xfffffdff

0800bd30 <TIM_OC2_SetConfig>:
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6a1b      	ldr	r3, [r3, #32]
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6a1b      	ldr	r3, [r3, #32]
 800bd44:	2210      	movs	r2, #16
 800bd46:	4393      	bics	r3, r2
 800bd48:	001a      	movs	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	621a      	str	r2, [r3, #32]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	60fb      	str	r3, [r7, #12]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	4a2c      	ldr	r2, [pc, #176]	@ (800be10 <TIM_OC2_SetConfig+0xe0>)
 800bd5e:	4013      	ands	r3, r2
 800bd60:	60fb      	str	r3, [r7, #12]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4a2b      	ldr	r2, [pc, #172]	@ (800be14 <TIM_OC2_SetConfig+0xe4>)
 800bd66:	4013      	ands	r3, r2
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	021b      	lsls	r3, r3, #8
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	4313      	orrs	r3, r2
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2220      	movs	r2, #32
 800bd7a:	4393      	bics	r3, r2
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	689b      	ldr	r3, [r3, #8]
 800bd82:	011b      	lsls	r3, r3, #4
 800bd84:	697a      	ldr	r2, [r7, #20]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	4a22      	ldr	r2, [pc, #136]	@ (800be18 <TIM_OC2_SetConfig+0xe8>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d10d      	bne.n	800bdae <TIM_OC2_SetConfig+0x7e>
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	2280      	movs	r2, #128	@ 0x80
 800bd96:	4393      	bics	r3, r2
 800bd98:	617b      	str	r3, [r7, #20]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	011b      	lsls	r3, r3, #4
 800bda0:	697a      	ldr	r2, [r7, #20]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	617b      	str	r3, [r7, #20]
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	2240      	movs	r2, #64	@ 0x40
 800bdaa:	4393      	bics	r3, r2
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a19      	ldr	r2, [pc, #100]	@ (800be18 <TIM_OC2_SetConfig+0xe8>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d007      	beq.n	800bdc6 <TIM_OC2_SetConfig+0x96>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a18      	ldr	r2, [pc, #96]	@ (800be1c <TIM_OC2_SetConfig+0xec>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d003      	beq.n	800bdc6 <TIM_OC2_SetConfig+0x96>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a17      	ldr	r2, [pc, #92]	@ (800be20 <TIM_OC2_SetConfig+0xf0>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d113      	bne.n	800bdee <TIM_OC2_SetConfig+0xbe>
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	4a16      	ldr	r2, [pc, #88]	@ (800be24 <TIM_OC2_SetConfig+0xf4>)
 800bdca:	4013      	ands	r3, r2
 800bdcc:	613b      	str	r3, [r7, #16]
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	4a15      	ldr	r2, [pc, #84]	@ (800be28 <TIM_OC2_SetConfig+0xf8>)
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	613b      	str	r3, [r7, #16]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	695b      	ldr	r3, [r3, #20]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	693a      	ldr	r2, [r7, #16]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	613b      	str	r3, [r7, #16]
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	605a      	str	r2, [r3, #4]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	619a      	str	r2, [r3, #24]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	639a      	str	r2, [r3, #56]	@ 0x38
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	697a      	ldr	r2, [r7, #20]
 800be06:	621a      	str	r2, [r3, #32]
 800be08:	46c0      	nop			@ (mov r8, r8)
 800be0a:	46bd      	mov	sp, r7
 800be0c:	b006      	add	sp, #24
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	feff8fff 	.word	0xfeff8fff
 800be14:	fffffcff 	.word	0xfffffcff
 800be18:	40012c00 	.word	0x40012c00
 800be1c:	40014400 	.word	0x40014400
 800be20:	40014800 	.word	0x40014800
 800be24:	fffffbff 	.word	0xfffffbff
 800be28:	fffff7ff 	.word	0xfffff7ff

0800be2c <TIM_OC3_SetConfig>:
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a1b      	ldr	r3, [r3, #32]
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6a1b      	ldr	r3, [r3, #32]
 800be40:	4a31      	ldr	r2, [pc, #196]	@ (800bf08 <TIM_OC3_SetConfig+0xdc>)
 800be42:	401a      	ands	r2, r3
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	621a      	str	r2, [r3, #32]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	613b      	str	r3, [r7, #16]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	60fb      	str	r3, [r7, #12]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4a2d      	ldr	r2, [pc, #180]	@ (800bf0c <TIM_OC3_SetConfig+0xe0>)
 800be58:	4013      	ands	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2203      	movs	r2, #3
 800be60:	4393      	bics	r3, r2
 800be62:	60fb      	str	r3, [r7, #12]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	60fb      	str	r3, [r7, #12]
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	4a27      	ldr	r2, [pc, #156]	@ (800bf10 <TIM_OC3_SetConfig+0xe4>)
 800be72:	4013      	ands	r3, r2
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	689b      	ldr	r3, [r3, #8]
 800be7a:	021b      	lsls	r3, r3, #8
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	4313      	orrs	r3, r2
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a23      	ldr	r2, [pc, #140]	@ (800bf14 <TIM_OC3_SetConfig+0xe8>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d10d      	bne.n	800bea6 <TIM_OC3_SetConfig+0x7a>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	4a22      	ldr	r2, [pc, #136]	@ (800bf18 <TIM_OC3_SetConfig+0xec>)
 800be8e:	4013      	ands	r3, r2
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	021b      	lsls	r3, r3, #8
 800be98:	697a      	ldr	r2, [r7, #20]
 800be9a:	4313      	orrs	r3, r2
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	4a1e      	ldr	r2, [pc, #120]	@ (800bf1c <TIM_OC3_SetConfig+0xf0>)
 800bea2:	4013      	ands	r3, r2
 800bea4:	617b      	str	r3, [r7, #20]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf14 <TIM_OC3_SetConfig+0xe8>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d007      	beq.n	800bebe <TIM_OC3_SetConfig+0x92>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a1b      	ldr	r2, [pc, #108]	@ (800bf20 <TIM_OC3_SetConfig+0xf4>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d003      	beq.n	800bebe <TIM_OC3_SetConfig+0x92>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf24 <TIM_OC3_SetConfig+0xf8>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d113      	bne.n	800bee6 <TIM_OC3_SetConfig+0xba>
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	4a19      	ldr	r2, [pc, #100]	@ (800bf28 <TIM_OC3_SetConfig+0xfc>)
 800bec2:	4013      	ands	r3, r2
 800bec4:	613b      	str	r3, [r7, #16]
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	4a18      	ldr	r2, [pc, #96]	@ (800bf2c <TIM_OC3_SetConfig+0x100>)
 800beca:	4013      	ands	r3, r2
 800becc:	613b      	str	r3, [r7, #16]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	011b      	lsls	r3, r3, #4
 800bed4:	693a      	ldr	r2, [r7, #16]
 800bed6:	4313      	orrs	r3, r2
 800bed8:	613b      	str	r3, [r7, #16]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	011b      	lsls	r3, r3, #4
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	4313      	orrs	r3, r2
 800bee4:	613b      	str	r3, [r7, #16]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	605a      	str	r2, [r3, #4]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68fa      	ldr	r2, [r7, #12]
 800bef0:	61da      	str	r2, [r3, #28]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	685a      	ldr	r2, [r3, #4]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	63da      	str	r2, [r3, #60]	@ 0x3c
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	621a      	str	r2, [r3, #32]
 800bf00:	46c0      	nop			@ (mov r8, r8)
 800bf02:	46bd      	mov	sp, r7
 800bf04:	b006      	add	sp, #24
 800bf06:	bd80      	pop	{r7, pc}
 800bf08:	fffffeff 	.word	0xfffffeff
 800bf0c:	fffeff8f 	.word	0xfffeff8f
 800bf10:	fffffdff 	.word	0xfffffdff
 800bf14:	40012c00 	.word	0x40012c00
 800bf18:	fffff7ff 	.word	0xfffff7ff
 800bf1c:	fffffbff 	.word	0xfffffbff
 800bf20:	40014400 	.word	0x40014400
 800bf24:	40014800 	.word	0x40014800
 800bf28:	ffffefff 	.word	0xffffefff
 800bf2c:	ffffdfff 	.word	0xffffdfff

0800bf30 <TIM_OC4_SetConfig>:
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
 800bf38:	6039      	str	r1, [r7, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a1b      	ldr	r3, [r3, #32]
 800bf3e:	613b      	str	r3, [r7, #16]
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	6a1b      	ldr	r3, [r3, #32]
 800bf44:	4a24      	ldr	r2, [pc, #144]	@ (800bfd8 <TIM_OC4_SetConfig+0xa8>)
 800bf46:	401a      	ands	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	621a      	str	r2, [r3, #32]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	617b      	str	r3, [r7, #20]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	60fb      	str	r3, [r7, #12]
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4a20      	ldr	r2, [pc, #128]	@ (800bfdc <TIM_OC4_SetConfig+0xac>)
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	60fb      	str	r3, [r7, #12]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4a1f      	ldr	r2, [pc, #124]	@ (800bfe0 <TIM_OC4_SetConfig+0xb0>)
 800bf64:	4013      	ands	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	60fb      	str	r3, [r7, #12]
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	4a1b      	ldr	r2, [pc, #108]	@ (800bfe4 <TIM_OC4_SetConfig+0xb4>)
 800bf78:	4013      	ands	r3, r2
 800bf7a:	613b      	str	r3, [r7, #16]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	031b      	lsls	r3, r3, #12
 800bf82:	693a      	ldr	r2, [r7, #16]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	613b      	str	r3, [r7, #16]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a17      	ldr	r2, [pc, #92]	@ (800bfe8 <TIM_OC4_SetConfig+0xb8>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d007      	beq.n	800bfa0 <TIM_OC4_SetConfig+0x70>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a16      	ldr	r2, [pc, #88]	@ (800bfec <TIM_OC4_SetConfig+0xbc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_OC4_SetConfig+0x70>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a15      	ldr	r2, [pc, #84]	@ (800bff0 <TIM_OC4_SetConfig+0xc0>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d109      	bne.n	800bfb4 <TIM_OC4_SetConfig+0x84>
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	4a14      	ldr	r2, [pc, #80]	@ (800bff4 <TIM_OC4_SetConfig+0xc4>)
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	695b      	ldr	r3, [r3, #20]
 800bfac:	019b      	lsls	r3, r3, #6
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	4313      	orrs	r3, r2
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	605a      	str	r2, [r3, #4]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	61da      	str	r2, [r3, #28]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685a      	ldr	r2, [r3, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	641a      	str	r2, [r3, #64]	@ 0x40
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	621a      	str	r2, [r3, #32]
 800bfce:	46c0      	nop			@ (mov r8, r8)
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	b006      	add	sp, #24
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	46c0      	nop			@ (mov r8, r8)
 800bfd8:	ffffefff 	.word	0xffffefff
 800bfdc:	feff8fff 	.word	0xfeff8fff
 800bfe0:	fffffcff 	.word	0xfffffcff
 800bfe4:	ffffdfff 	.word	0xffffdfff
 800bfe8:	40012c00 	.word	0x40012c00
 800bfec:	40014400 	.word	0x40014400
 800bff0:	40014800 	.word	0x40014800
 800bff4:	ffffbfff 	.word	0xffffbfff

0800bff8 <TIM_OC5_SetConfig>:
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6a1b      	ldr	r3, [r3, #32]
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a1b      	ldr	r3, [r3, #32]
 800c00c:	4a21      	ldr	r2, [pc, #132]	@ (800c094 <TIM_OC5_SetConfig+0x9c>)
 800c00e:	401a      	ands	r2, r3
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	621a      	str	r2, [r3, #32]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	617b      	str	r3, [r7, #20]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c01e:	60fb      	str	r3, [r7, #12]
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	4a1d      	ldr	r2, [pc, #116]	@ (800c098 <TIM_OC5_SetConfig+0xa0>)
 800c024:	4013      	ands	r3, r2
 800c026:	60fb      	str	r3, [r7, #12]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	4313      	orrs	r3, r2
 800c030:	60fb      	str	r3, [r7, #12]
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	4a19      	ldr	r2, [pc, #100]	@ (800c09c <TIM_OC5_SetConfig+0xa4>)
 800c036:	4013      	ands	r3, r2
 800c038:	613b      	str	r3, [r7, #16]
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	041b      	lsls	r3, r3, #16
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4313      	orrs	r3, r2
 800c044:	613b      	str	r3, [r7, #16]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	4a15      	ldr	r2, [pc, #84]	@ (800c0a0 <TIM_OC5_SetConfig+0xa8>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d007      	beq.n	800c05e <TIM_OC5_SetConfig+0x66>
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	4a14      	ldr	r2, [pc, #80]	@ (800c0a4 <TIM_OC5_SetConfig+0xac>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d003      	beq.n	800c05e <TIM_OC5_SetConfig+0x66>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a13      	ldr	r2, [pc, #76]	@ (800c0a8 <TIM_OC5_SetConfig+0xb0>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d109      	bne.n	800c072 <TIM_OC5_SetConfig+0x7a>
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	4a0c      	ldr	r2, [pc, #48]	@ (800c094 <TIM_OC5_SetConfig+0x9c>)
 800c062:	4013      	ands	r3, r2
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	021b      	lsls	r3, r3, #8
 800c06c:	697a      	ldr	r2, [r7, #20]
 800c06e:	4313      	orrs	r3, r2
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	697a      	ldr	r2, [r7, #20]
 800c076:	605a      	str	r2, [r3, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	655a      	str	r2, [r3, #84]	@ 0x54
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	685a      	ldr	r2, [r3, #4]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	659a      	str	r2, [r3, #88]	@ 0x58
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	621a      	str	r2, [r3, #32]
 800c08c:	46c0      	nop			@ (mov r8, r8)
 800c08e:	46bd      	mov	sp, r7
 800c090:	b006      	add	sp, #24
 800c092:	bd80      	pop	{r7, pc}
 800c094:	fffeffff 	.word	0xfffeffff
 800c098:	fffeff8f 	.word	0xfffeff8f
 800c09c:	fffdffff 	.word	0xfffdffff
 800c0a0:	40012c00 	.word	0x40012c00
 800c0a4:	40014400 	.word	0x40014400
 800c0a8:	40014800 	.word	0x40014800

0800c0ac <TIM_OC6_SetConfig>:
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a1b      	ldr	r3, [r3, #32]
 800c0ba:	613b      	str	r3, [r7, #16]
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	4a22      	ldr	r2, [pc, #136]	@ (800c14c <TIM_OC6_SetConfig+0xa0>)
 800c0c2:	401a      	ands	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	621a      	str	r2, [r3, #32]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	685b      	ldr	r3, [r3, #4]
 800c0cc:	617b      	str	r3, [r7, #20]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0d2:	60fb      	str	r3, [r7, #12]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	4a1e      	ldr	r2, [pc, #120]	@ (800c150 <TIM_OC6_SetConfig+0xa4>)
 800c0d8:	4013      	ands	r3, r2
 800c0da:	60fb      	str	r3, [r7, #12]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	4a1a      	ldr	r2, [pc, #104]	@ (800c154 <TIM_OC6_SetConfig+0xa8>)
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	613b      	str	r3, [r7, #16]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	051b      	lsls	r3, r3, #20
 800c0f6:	693a      	ldr	r2, [r7, #16]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	613b      	str	r3, [r7, #16]
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	4a16      	ldr	r2, [pc, #88]	@ (800c158 <TIM_OC6_SetConfig+0xac>)
 800c100:	4293      	cmp	r3, r2
 800c102:	d007      	beq.n	800c114 <TIM_OC6_SetConfig+0x68>
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a15      	ldr	r2, [pc, #84]	@ (800c15c <TIM_OC6_SetConfig+0xb0>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d003      	beq.n	800c114 <TIM_OC6_SetConfig+0x68>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	4a14      	ldr	r2, [pc, #80]	@ (800c160 <TIM_OC6_SetConfig+0xb4>)
 800c110:	4293      	cmp	r3, r2
 800c112:	d109      	bne.n	800c128 <TIM_OC6_SetConfig+0x7c>
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	4a13      	ldr	r2, [pc, #76]	@ (800c164 <TIM_OC6_SetConfig+0xb8>)
 800c118:	4013      	ands	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	029b      	lsls	r3, r3, #10
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	4313      	orrs	r3, r2
 800c126:	617b      	str	r3, [r7, #20]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	697a      	ldr	r2, [r7, #20]
 800c12c:	605a      	str	r2, [r3, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	655a      	str	r2, [r3, #84]	@ 0x54
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685a      	ldr	r2, [r3, #4]
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	693a      	ldr	r2, [r7, #16]
 800c140:	621a      	str	r2, [r3, #32]
 800c142:	46c0      	nop			@ (mov r8, r8)
 800c144:	46bd      	mov	sp, r7
 800c146:	b006      	add	sp, #24
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	46c0      	nop			@ (mov r8, r8)
 800c14c:	ffefffff 	.word	0xffefffff
 800c150:	feff8fff 	.word	0xfeff8fff
 800c154:	ffdfffff 	.word	0xffdfffff
 800c158:	40012c00 	.word	0x40012c00
 800c15c:	40014400 	.word	0x40014400
 800c160:	40014800 	.word	0x40014800
 800c164:	fffbffff 	.word	0xfffbffff

0800c168 <TIM_TI1_SetConfig>:
 800c168:	b580      	push	{r7, lr}
 800c16a:	b086      	sub	sp, #24
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]
 800c174:	603b      	str	r3, [r7, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6a1b      	ldr	r3, [r3, #32]
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	6a1b      	ldr	r3, [r3, #32]
 800c180:	2201      	movs	r2, #1
 800c182:	4393      	bics	r3, r2
 800c184:	001a      	movs	r2, r3
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	621a      	str	r2, [r3, #32]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	617b      	str	r3, [r7, #20]
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	4a1e      	ldr	r2, [pc, #120]	@ (800c20c <TIM_TI1_SetConfig+0xa4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d008      	beq.n	800c1aa <TIM_TI1_SetConfig+0x42>
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	2380      	movs	r3, #128	@ 0x80
 800c19c:	05db      	lsls	r3, r3, #23
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d003      	beq.n	800c1aa <TIM_TI1_SetConfig+0x42>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	4a1a      	ldr	r2, [pc, #104]	@ (800c210 <TIM_TI1_SetConfig+0xa8>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d101      	bne.n	800c1ae <TIM_TI1_SetConfig+0x46>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <TIM_TI1_SetConfig+0x48>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d008      	beq.n	800c1c6 <TIM_TI1_SetConfig+0x5e>
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	4393      	bics	r3, r2
 800c1ba:	617b      	str	r3, [r7, #20]
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]
 800c1c4:	e003      	b.n	800c1ce <TIM_TI1_SetConfig+0x66>
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	2201      	movs	r2, #1
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	22f0      	movs	r2, #240	@ 0xf0
 800c1d2:	4393      	bics	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	011b      	lsls	r3, r3, #4
 800c1da:	22ff      	movs	r2, #255	@ 0xff
 800c1dc:	4013      	ands	r3, r2
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	220a      	movs	r2, #10
 800c1e8:	4393      	bics	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	220a      	movs	r2, #10
 800c1f0:	4013      	ands	r3, r2
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	619a      	str	r2, [r3, #24]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	693a      	ldr	r2, [r7, #16]
 800c202:	621a      	str	r2, [r3, #32]
 800c204:	46c0      	nop			@ (mov r8, r8)
 800c206:	46bd      	mov	sp, r7
 800c208:	b006      	add	sp, #24
 800c20a:	bd80      	pop	{r7, pc}
 800c20c:	40012c00 	.word	0x40012c00
 800c210:	40000400 	.word	0x40000400

0800c214 <TIM_TI1_ConfigInputStage>:
 800c214:	b580      	push	{r7, lr}
 800c216:	b086      	sub	sp, #24
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	617b      	str	r3, [r7, #20]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	2201      	movs	r2, #1
 800c22c:	4393      	bics	r3, r2
 800c22e:	001a      	movs	r2, r3
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	621a      	str	r2, [r3, #32]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	613b      	str	r3, [r7, #16]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	22f0      	movs	r2, #240	@ 0xf0
 800c23e:	4393      	bics	r3, r2
 800c240:	613b      	str	r3, [r7, #16]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	011b      	lsls	r3, r3, #4
 800c246:	693a      	ldr	r2, [r7, #16]
 800c248:	4313      	orrs	r3, r2
 800c24a:	613b      	str	r3, [r7, #16]
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	220a      	movs	r2, #10
 800c250:	4393      	bics	r3, r2
 800c252:	617b      	str	r3, [r7, #20]
 800c254:	697a      	ldr	r2, [r7, #20]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	4313      	orrs	r3, r2
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	619a      	str	r2, [r3, #24]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	697a      	ldr	r2, [r7, #20]
 800c266:	621a      	str	r2, [r3, #32]
 800c268:	46c0      	nop			@ (mov r8, r8)
 800c26a:	46bd      	mov	sp, r7
 800c26c:	b006      	add	sp, #24
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <TIM_TI2_SetConfig>:
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	603b      	str	r3, [r7, #0]
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	617b      	str	r3, [r7, #20]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	2210      	movs	r2, #16
 800c28a:	4393      	bics	r3, r2
 800c28c:	001a      	movs	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	621a      	str	r2, [r3, #32]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	613b      	str	r3, [r7, #16]
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	4a14      	ldr	r2, [pc, #80]	@ (800c2ec <TIM_TI2_SetConfig+0x7c>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	613b      	str	r3, [r7, #16]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	4a10      	ldr	r2, [pc, #64]	@ (800c2f0 <TIM_TI2_SetConfig+0x80>)
 800c2ae:	4013      	ands	r3, r2
 800c2b0:	613b      	str	r3, [r7, #16]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	031b      	lsls	r3, r3, #12
 800c2b6:	041b      	lsls	r3, r3, #16
 800c2b8:	0c1b      	lsrs	r3, r3, #16
 800c2ba:	693a      	ldr	r2, [r7, #16]
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	613b      	str	r3, [r7, #16]
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	22a0      	movs	r2, #160	@ 0xa0
 800c2c4:	4393      	bics	r3, r2
 800c2c6:	617b      	str	r3, [r7, #20]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	011b      	lsls	r3, r3, #4
 800c2cc:	22a0      	movs	r2, #160	@ 0xa0
 800c2ce:	4013      	ands	r3, r2
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	617b      	str	r3, [r7, #20]
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	619a      	str	r2, [r3, #24]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	621a      	str	r2, [r3, #32]
 800c2e2:	46c0      	nop			@ (mov r8, r8)
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	b006      	add	sp, #24
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	46c0      	nop			@ (mov r8, r8)
 800c2ec:	fffffcff 	.word	0xfffffcff
 800c2f0:	ffff0fff 	.word	0xffff0fff

0800c2f4 <TIM_TI2_ConfigInputStage>:
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	6a1b      	ldr	r3, [r3, #32]
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	6a1b      	ldr	r3, [r3, #32]
 800c30a:	2210      	movs	r2, #16
 800c30c:	4393      	bics	r3, r2
 800c30e:	001a      	movs	r2, r3
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	621a      	str	r2, [r3, #32]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	699b      	ldr	r3, [r3, #24]
 800c318:	613b      	str	r3, [r7, #16]
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	4a0d      	ldr	r2, [pc, #52]	@ (800c354 <TIM_TI2_ConfigInputStage+0x60>)
 800c31e:	4013      	ands	r3, r2
 800c320:	613b      	str	r3, [r7, #16]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	031b      	lsls	r3, r3, #12
 800c326:	693a      	ldr	r2, [r7, #16]
 800c328:	4313      	orrs	r3, r2
 800c32a:	613b      	str	r3, [r7, #16]
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	22a0      	movs	r2, #160	@ 0xa0
 800c330:	4393      	bics	r3, r2
 800c332:	617b      	str	r3, [r7, #20]
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	011b      	lsls	r3, r3, #4
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	4313      	orrs	r3, r2
 800c33c:	617b      	str	r3, [r7, #20]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	619a      	str	r2, [r3, #24]
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	697a      	ldr	r2, [r7, #20]
 800c348:	621a      	str	r2, [r3, #32]
 800c34a:	46c0      	nop			@ (mov r8, r8)
 800c34c:	46bd      	mov	sp, r7
 800c34e:	b006      	add	sp, #24
 800c350:	bd80      	pop	{r7, pc}
 800c352:	46c0      	nop			@ (mov r8, r8)
 800c354:	ffff0fff 	.word	0xffff0fff

0800c358 <TIM_TI3_SetConfig>:
 800c358:	b580      	push	{r7, lr}
 800c35a:	b086      	sub	sp, #24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	607a      	str	r2, [r7, #4]
 800c364:	603b      	str	r3, [r7, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	617b      	str	r3, [r7, #20]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	6a1b      	ldr	r3, [r3, #32]
 800c370:	4a17      	ldr	r2, [pc, #92]	@ (800c3d0 <TIM_TI3_SetConfig+0x78>)
 800c372:	401a      	ands	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	621a      	str	r2, [r3, #32]
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	69db      	ldr	r3, [r3, #28]
 800c37c:	613b      	str	r3, [r7, #16]
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	2203      	movs	r2, #3
 800c382:	4393      	bics	r3, r2
 800c384:	613b      	str	r3, [r7, #16]
 800c386:	693a      	ldr	r2, [r7, #16]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4313      	orrs	r3, r2
 800c38c:	613b      	str	r3, [r7, #16]
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	22f0      	movs	r2, #240	@ 0xf0
 800c392:	4393      	bics	r3, r2
 800c394:	613b      	str	r3, [r7, #16]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	011b      	lsls	r3, r3, #4
 800c39a:	22ff      	movs	r2, #255	@ 0xff
 800c39c:	4013      	ands	r3, r2
 800c39e:	693a      	ldr	r2, [r7, #16]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	613b      	str	r3, [r7, #16]
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	4a0b      	ldr	r2, [pc, #44]	@ (800c3d4 <TIM_TI3_SetConfig+0x7c>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	021a      	lsls	r2, r3, #8
 800c3b0:	23a0      	movs	r3, #160	@ 0xa0
 800c3b2:	011b      	lsls	r3, r3, #4
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	4313      	orrs	r3, r2
 800c3ba:	617b      	str	r3, [r7, #20]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	693a      	ldr	r2, [r7, #16]
 800c3c0:	61da      	str	r2, [r3, #28]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	621a      	str	r2, [r3, #32]
 800c3c8:	46c0      	nop			@ (mov r8, r8)
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	b006      	add	sp, #24
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	fffffeff 	.word	0xfffffeff
 800c3d4:	fffff5ff 	.word	0xfffff5ff

0800c3d8 <TIM_TI4_SetConfig>:
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b086      	sub	sp, #24
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	60f8      	str	r0, [r7, #12]
 800c3e0:	60b9      	str	r1, [r7, #8]
 800c3e2:	607a      	str	r2, [r7, #4]
 800c3e4:	603b      	str	r3, [r7, #0]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	6a1b      	ldr	r3, [r3, #32]
 800c3ea:	617b      	str	r3, [r7, #20]
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6a1b      	ldr	r3, [r3, #32]
 800c3f0:	4a18      	ldr	r2, [pc, #96]	@ (800c454 <TIM_TI4_SetConfig+0x7c>)
 800c3f2:	401a      	ands	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	621a      	str	r2, [r3, #32]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	69db      	ldr	r3, [r3, #28]
 800c3fc:	613b      	str	r3, [r7, #16]
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	4a15      	ldr	r2, [pc, #84]	@ (800c458 <TIM_TI4_SetConfig+0x80>)
 800c402:	4013      	ands	r3, r2
 800c404:	613b      	str	r3, [r7, #16]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	021b      	lsls	r3, r3, #8
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	613b      	str	r3, [r7, #16]
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	4a12      	ldr	r2, [pc, #72]	@ (800c45c <TIM_TI4_SetConfig+0x84>)
 800c414:	4013      	ands	r3, r2
 800c416:	613b      	str	r3, [r7, #16]
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	031b      	lsls	r3, r3, #12
 800c41c:	041b      	lsls	r3, r3, #16
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	4313      	orrs	r3, r2
 800c424:	613b      	str	r3, [r7, #16]
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	4a0d      	ldr	r2, [pc, #52]	@ (800c460 <TIM_TI4_SetConfig+0x88>)
 800c42a:	4013      	ands	r3, r2
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	031a      	lsls	r2, r3, #12
 800c432:	23a0      	movs	r3, #160	@ 0xa0
 800c434:	021b      	lsls	r3, r3, #8
 800c436:	4013      	ands	r3, r2
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	4313      	orrs	r3, r2
 800c43c:	617b      	str	r3, [r7, #20]
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	61da      	str	r2, [r3, #28]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	697a      	ldr	r2, [r7, #20]
 800c448:	621a      	str	r2, [r3, #32]
 800c44a:	46c0      	nop			@ (mov r8, r8)
 800c44c:	46bd      	mov	sp, r7
 800c44e:	b006      	add	sp, #24
 800c450:	bd80      	pop	{r7, pc}
 800c452:	46c0      	nop			@ (mov r8, r8)
 800c454:	ffffefff 	.word	0xffffefff
 800c458:	fffffcff 	.word	0xfffffcff
 800c45c:	ffff0fff 	.word	0xffff0fff
 800c460:	ffff5fff 	.word	0xffff5fff

0800c464 <TIM_ITRx_SetConfig>:
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	60fb      	str	r3, [r7, #12]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	4a08      	ldr	r2, [pc, #32]	@ (800c498 <TIM_ITRx_SetConfig+0x34>)
 800c478:	4013      	ands	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	4313      	orrs	r3, r2
 800c482:	2207      	movs	r2, #7
 800c484:	4313      	orrs	r3, r2
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68fa      	ldr	r2, [r7, #12]
 800c48c:	609a      	str	r2, [r3, #8]
 800c48e:	46c0      	nop			@ (mov r8, r8)
 800c490:	46bd      	mov	sp, r7
 800c492:	b004      	add	sp, #16
 800c494:	bd80      	pop	{r7, pc}
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	ffcfff8f 	.word	0xffcfff8f

0800c49c <TIM_ETR_SetConfig>:
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b086      	sub	sp, #24
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	689b      	ldr	r3, [r3, #8]
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	4a09      	ldr	r2, [pc, #36]	@ (800c4d8 <TIM_ETR_SetConfig+0x3c>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	021a      	lsls	r2, r3, #8
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	609a      	str	r2, [r3, #8]
 800c4d0:	46c0      	nop			@ (mov r8, r8)
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	b006      	add	sp, #24
 800c4d6:	bd80      	pop	{r7, pc}
 800c4d8:	ffff00ff 	.word	0xffff00ff

0800c4dc <TIM_CCxChannelCmd>:
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	221f      	movs	r2, #31
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	409a      	lsls	r2, r3
 800c4f2:	0013      	movs	r3, r2
 800c4f4:	617b      	str	r3, [r7, #20]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6a1b      	ldr	r3, [r3, #32]
 800c4fa:	697a      	ldr	r2, [r7, #20]
 800c4fc:	43d2      	mvns	r2, r2
 800c4fe:	401a      	ands	r2, r3
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	621a      	str	r2, [r3, #32]
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	6a1a      	ldr	r2, [r3, #32]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	211f      	movs	r1, #31
 800c50c:	400b      	ands	r3, r1
 800c50e:	6879      	ldr	r1, [r7, #4]
 800c510:	4099      	lsls	r1, r3
 800c512:	000b      	movs	r3, r1
 800c514:	431a      	orrs	r2, r3
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	621a      	str	r2, [r3, #32]
 800c51a:	46c0      	nop			@ (mov r8, r8)
 800c51c:	46bd      	mov	sp, r7
 800c51e:	b006      	add	sp, #24
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <TIM_ResetCallback>:
 800c524:	b580      	push	{r7, lr}
 800c526:	b082      	sub	sp, #8
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2184      	movs	r1, #132	@ 0x84
 800c530:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a4 <TIM_ResetCallback+0x80>)
 800c532:	505a      	str	r2, [r3, r1]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2188      	movs	r1, #136	@ 0x88
 800c538:	4a1b      	ldr	r2, [pc, #108]	@ (800c5a8 <TIM_ResetCallback+0x84>)
 800c53a:	505a      	str	r2, [r3, r1]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	218c      	movs	r1, #140	@ 0x8c
 800c540:	4a1a      	ldr	r2, [pc, #104]	@ (800c5ac <TIM_ResetCallback+0x88>)
 800c542:	505a      	str	r2, [r3, r1]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2190      	movs	r1, #144	@ 0x90
 800c548:	4a19      	ldr	r2, [pc, #100]	@ (800c5b0 <TIM_ResetCallback+0x8c>)
 800c54a:	505a      	str	r2, [r3, r1]
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2194      	movs	r1, #148	@ 0x94
 800c550:	4a18      	ldr	r2, [pc, #96]	@ (800c5b4 <TIM_ResetCallback+0x90>)
 800c552:	505a      	str	r2, [r3, r1]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2198      	movs	r1, #152	@ 0x98
 800c558:	4a17      	ldr	r2, [pc, #92]	@ (800c5b8 <TIM_ResetCallback+0x94>)
 800c55a:	505a      	str	r2, [r3, r1]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	219c      	movs	r1, #156	@ 0x9c
 800c560:	4a16      	ldr	r2, [pc, #88]	@ (800c5bc <TIM_ResetCallback+0x98>)
 800c562:	505a      	str	r2, [r3, r1]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	21a0      	movs	r1, #160	@ 0xa0
 800c568:	4a15      	ldr	r2, [pc, #84]	@ (800c5c0 <TIM_ResetCallback+0x9c>)
 800c56a:	505a      	str	r2, [r3, r1]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	21a4      	movs	r1, #164	@ 0xa4
 800c570:	4a14      	ldr	r2, [pc, #80]	@ (800c5c4 <TIM_ResetCallback+0xa0>)
 800c572:	505a      	str	r2, [r3, r1]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	21a8      	movs	r1, #168	@ 0xa8
 800c578:	4a13      	ldr	r2, [pc, #76]	@ (800c5c8 <TIM_ResetCallback+0xa4>)
 800c57a:	505a      	str	r2, [r3, r1]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	21ac      	movs	r1, #172	@ 0xac
 800c580:	4a12      	ldr	r2, [pc, #72]	@ (800c5cc <TIM_ResetCallback+0xa8>)
 800c582:	505a      	str	r2, [r3, r1]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	21b0      	movs	r1, #176	@ 0xb0
 800c588:	4a11      	ldr	r2, [pc, #68]	@ (800c5d0 <TIM_ResetCallback+0xac>)
 800c58a:	505a      	str	r2, [r3, r1]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	21b4      	movs	r1, #180	@ 0xb4
 800c590:	4a10      	ldr	r2, [pc, #64]	@ (800c5d4 <TIM_ResetCallback+0xb0>)
 800c592:	505a      	str	r2, [r3, r1]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	21b8      	movs	r1, #184	@ 0xb8
 800c598:	4a0f      	ldr	r2, [pc, #60]	@ (800c5d8 <TIM_ResetCallback+0xb4>)
 800c59a:	505a      	str	r2, [r3, r1]
 800c59c:	46c0      	nop			@ (mov r8, r8)
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	b002      	add	sp, #8
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	0800b87d 	.word	0x0800b87d
 800c5a8:	0800b88d 	.word	0x0800b88d
 800c5ac:	0800b8ed 	.word	0x0800b8ed
 800c5b0:	0800b8fd 	.word	0x0800b8fd
 800c5b4:	0800b8ad 	.word	0x0800b8ad
 800c5b8:	0800b8bd 	.word	0x0800b8bd
 800c5bc:	0800b89d 	.word	0x0800b89d
 800c5c0:	0800b8cd 	.word	0x0800b8cd
 800c5c4:	0800b8dd 	.word	0x0800b8dd
 800c5c8:	0800b90d 	.word	0x0800b90d
 800c5cc:	0800c7e5 	.word	0x0800c7e5
 800c5d0:	0800c7f5 	.word	0x0800c7f5
 800c5d4:	0800c805 	.word	0x0800c805
 800c5d8:	0800c815 	.word	0x0800c815

0800c5dc <HAL_TIMEx_MasterConfigSynchronization>:
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b084      	sub	sp, #16
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	223c      	movs	r2, #60	@ 0x3c
 800c5ea:	5c9b      	ldrb	r3, [r3, r2]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d101      	bne.n	800c5f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	e050      	b.n	800c696 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	223c      	movs	r2, #60	@ 0x3c
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	5499      	strb	r1, [r3, r2]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	223d      	movs	r2, #61	@ 0x3d
 800c600:	2102      	movs	r1, #2
 800c602:	5499      	strb	r1, [r3, r2]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	60fb      	str	r3, [r7, #12]
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	689b      	ldr	r3, [r3, #8]
 800c612:	60bb      	str	r3, [r7, #8]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	4a21      	ldr	r2, [pc, #132]	@ (800c6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c61a:	4293      	cmp	r3, r2
 800c61c:	d108      	bne.n	800c630 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	4a20      	ldr	r2, [pc, #128]	@ (800c6a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c622:	4013      	ands	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	2270      	movs	r2, #112	@ 0x70
 800c634:	4393      	bics	r3, r2
 800c636:	60fb      	str	r3, [r7, #12]
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68fa      	ldr	r2, [r7, #12]
 800c63e:	4313      	orrs	r3, r2
 800c640:	60fb      	str	r3, [r7, #12]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68fa      	ldr	r2, [r7, #12]
 800c648:	605a      	str	r2, [r3, #4]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a14      	ldr	r2, [pc, #80]	@ (800c6a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d00a      	beq.n	800c66a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	2380      	movs	r3, #128	@ 0x80
 800c65a:	05db      	lsls	r3, r3, #23
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d004      	beq.n	800c66a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a10      	ldr	r2, [pc, #64]	@ (800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d10c      	bne.n	800c684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800c66a:	68bb      	ldr	r3, [r7, #8]
 800c66c:	2280      	movs	r2, #128	@ 0x80
 800c66e:	4393      	bics	r3, r2
 800c670:	60bb      	str	r3, [r7, #8]
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	68ba      	ldr	r2, [r7, #8]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60bb      	str	r3, [r7, #8]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68ba      	ldr	r2, [r7, #8]
 800c682:	609a      	str	r2, [r3, #8]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	223d      	movs	r2, #61	@ 0x3d
 800c688:	2101      	movs	r1, #1
 800c68a:	5499      	strb	r1, [r3, r2]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	223c      	movs	r2, #60	@ 0x3c
 800c690:	2100      	movs	r1, #0
 800c692:	5499      	strb	r1, [r3, r2]
 800c694:	2300      	movs	r3, #0
 800c696:	0018      	movs	r0, r3
 800c698:	46bd      	mov	sp, r7
 800c69a:	b004      	add	sp, #16
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	46c0      	nop			@ (mov r8, r8)
 800c6a0:	40012c00 	.word	0x40012c00
 800c6a4:	ff0fffff 	.word	0xff0fffff
 800c6a8:	40000400 	.word	0x40000400

0800c6ac <HAL_TIMEx_ConfigBreakDeadTime>:
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	60fb      	str	r3, [r7, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	223c      	movs	r2, #60	@ 0x3c
 800c6be:	5c9b      	ldrb	r3, [r3, r2]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d101      	bne.n	800c6c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e06f      	b.n	800c7a8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	223c      	movs	r2, #60	@ 0x3c
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	5499      	strb	r1, [r3, r2]
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	22ff      	movs	r2, #255	@ 0xff
 800c6d4:	4393      	bics	r3, r2
 800c6d6:	001a      	movs	r2, r3
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4a33      	ldr	r2, [pc, #204]	@ (800c7b0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 800c6e4:	401a      	ands	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	4a30      	ldr	r2, [pc, #192]	@ (800c7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800c6f2:	401a      	ands	r2, r3
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	685b      	ldr	r3, [r3, #4]
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4a2e      	ldr	r2, [pc, #184]	@ (800c7b8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800c700:	401a      	ands	r2, r3
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4313      	orrs	r3, r2
 800c708:	60fb      	str	r3, [r7, #12]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	4a2b      	ldr	r2, [pc, #172]	@ (800c7bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c70e:	401a      	ands	r2, r3
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	691b      	ldr	r3, [r3, #16]
 800c714:	4313      	orrs	r3, r2
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4a29      	ldr	r2, [pc, #164]	@ (800c7c0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c71c:	401a      	ands	r2, r3
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	695b      	ldr	r3, [r3, #20]
 800c722:	4313      	orrs	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4a26      	ldr	r2, [pc, #152]	@ (800c7c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800c72a:	401a      	ands	r2, r3
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c730:	4313      	orrs	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	4a24      	ldr	r2, [pc, #144]	@ (800c7c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c738:	401a      	ands	r2, r3
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	041b      	lsls	r3, r3, #16
 800c740:	4313      	orrs	r3, r2
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	4a21      	ldr	r2, [pc, #132]	@ (800c7cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c748:	401a      	ands	r2, r3
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	4313      	orrs	r3, r2
 800c750:	60fb      	str	r3, [r7, #12]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4a1e      	ldr	r2, [pc, #120]	@ (800c7d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c758:	4293      	cmp	r3, r2
 800c75a:	d11c      	bne.n	800c796 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	4a1d      	ldr	r2, [pc, #116]	@ (800c7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800c760:	401a      	ands	r2, r3
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c766:	051b      	lsls	r3, r3, #20
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4a1a      	ldr	r2, [pc, #104]	@ (800c7d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800c770:	401a      	ands	r2, r3
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	6a1b      	ldr	r3, [r3, #32]
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	4a17      	ldr	r2, [pc, #92]	@ (800c7dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800c77e:	401a      	ands	r2, r3
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c784:	4313      	orrs	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	4a15      	ldr	r2, [pc, #84]	@ (800c7e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800c78c:	401a      	ands	r2, r3
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c792:	4313      	orrs	r3, r2
 800c794:	60fb      	str	r3, [r7, #12]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	645a      	str	r2, [r3, #68]	@ 0x44
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	223c      	movs	r2, #60	@ 0x3c
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	5499      	strb	r1, [r3, r2]
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	0018      	movs	r0, r3
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	b004      	add	sp, #16
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	fffffcff 	.word	0xfffffcff
 800c7b4:	fffffbff 	.word	0xfffffbff
 800c7b8:	fffff7ff 	.word	0xfffff7ff
 800c7bc:	ffffefff 	.word	0xffffefff
 800c7c0:	ffffdfff 	.word	0xffffdfff
 800c7c4:	ffffbfff 	.word	0xffffbfff
 800c7c8:	fff0ffff 	.word	0xfff0ffff
 800c7cc:	efffffff 	.word	0xefffffff
 800c7d0:	40012c00 	.word	0x40012c00
 800c7d4:	ff0fffff 	.word	0xff0fffff
 800c7d8:	feffffff 	.word	0xfeffffff
 800c7dc:	fdffffff 	.word	0xfdffffff
 800c7e0:	dfffffff 	.word	0xdfffffff

0800c7e4 <HAL_TIMEx_CommutCallback>:
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b082      	sub	sp, #8
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	46c0      	nop			@ (mov r8, r8)
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	b002      	add	sp, #8
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <HAL_TIMEx_CommutHalfCpltCallback>:
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	46c0      	nop			@ (mov r8, r8)
 800c7fe:	46bd      	mov	sp, r7
 800c800:	b002      	add	sp, #8
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_TIMEx_BreakCallback>:
 800c804:	b580      	push	{r7, lr}
 800c806:	b082      	sub	sp, #8
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	46c0      	nop			@ (mov r8, r8)
 800c80e:	46bd      	mov	sp, r7
 800c810:	b002      	add	sp, #8
 800c812:	bd80      	pop	{r7, pc}

0800c814 <HAL_TIMEx_Break2Callback>:
 800c814:	b580      	push	{r7, lr}
 800c816:	b082      	sub	sp, #8
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	46c0      	nop			@ (mov r8, r8)
 800c81e:	46bd      	mov	sp, r7
 800c820:	b002      	add	sp, #8
 800c822:	bd80      	pop	{r7, pc}

0800c824 <HAL_UART_Init>:
 800c824:	b580      	push	{r7, lr}
 800c826:	b082      	sub	sp, #8
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <HAL_UART_Init+0x12>
 800c832:	2301      	movs	r3, #1
 800c834:	e055      	b.n	800c8e2 <HAL_UART_Init+0xbe>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2288      	movs	r2, #136	@ 0x88
 800c83a:	589b      	ldr	r3, [r3, r2]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d116      	bne.n	800c86e <HAL_UART_Init+0x4a>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2284      	movs	r2, #132	@ 0x84
 800c844:	2100      	movs	r1, #0
 800c846:	5499      	strb	r1, [r3, r2]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	0018      	movs	r0, r3
 800c84c:	f000 fce0 	bl	800d210 <UART_InitCallbacksToDefault>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	22c4      	movs	r2, #196	@ 0xc4
 800c854:	589b      	ldr	r3, [r3, r2]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d103      	bne.n	800c862 <HAL_UART_Init+0x3e>
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	21c4      	movs	r1, #196	@ 0xc4
 800c85e:	4a23      	ldr	r2, [pc, #140]	@ (800c8ec <HAL_UART_Init+0xc8>)
 800c860:	505a      	str	r2, [r3, r1]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	22c4      	movs	r2, #196	@ 0xc4
 800c866:	589b      	ldr	r3, [r3, r2]
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	0010      	movs	r0, r2
 800c86c:	4798      	blx	r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2288      	movs	r2, #136	@ 0x88
 800c872:	2124      	movs	r1, #36	@ 0x24
 800c874:	5099      	str	r1, [r3, r2]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681a      	ldr	r2, [r3, #0]
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2101      	movs	r1, #1
 800c882:	438a      	bics	r2, r1
 800c884:	601a      	str	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d003      	beq.n	800c896 <HAL_UART_Init+0x72>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	0018      	movs	r0, r3
 800c892:	f000 ff85 	bl	800d7a0 <UART_AdvFeatureConfig>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	0018      	movs	r0, r3
 800c89a:	f000 fd09 	bl	800d2b0 <UART_SetConfig>
 800c89e:	0003      	movs	r3, r0
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d101      	bne.n	800c8a8 <HAL_UART_Init+0x84>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e01c      	b.n	800c8e2 <HAL_UART_Init+0xbe>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	490f      	ldr	r1, [pc, #60]	@ (800c8f0 <HAL_UART_Init+0xcc>)
 800c8b4:	400a      	ands	r2, r1
 800c8b6:	605a      	str	r2, [r3, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	689a      	ldr	r2, [r3, #8]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	212a      	movs	r1, #42	@ 0x2a
 800c8c4:	438a      	bics	r2, r1
 800c8c6:	609a      	str	r2, [r3, #8]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	2101      	movs	r1, #1
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f001 f814 	bl	800d908 <UART_CheckIdleState>
 800c8e0:	0003      	movs	r3, r0
 800c8e2:	0018      	movs	r0, r3
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	b002      	add	sp, #8
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	46c0      	nop			@ (mov r8, r8)
 800c8ec:	08005cf5 	.word	0x08005cf5
 800c8f0:	ffffb7ff 	.word	0xffffb7ff

0800c8f4 <HAL_UART_RegisterCallback>:
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b086      	sub	sp, #24
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	60f8      	str	r0, [r7, #12]
 800c8fc:	607a      	str	r2, [r7, #4]
 800c8fe:	230b      	movs	r3, #11
 800c900:	18fb      	adds	r3, r7, r3
 800c902:	1c0a      	adds	r2, r1, #0
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	2317      	movs	r3, #23
 800c908:	18fb      	adds	r3, r7, r3
 800c90a:	2200      	movs	r2, #0
 800c90c:	701a      	strb	r2, [r3, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d109      	bne.n	800c928 <HAL_UART_RegisterCallback+0x34>
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2290      	movs	r2, #144	@ 0x90
 800c918:	589b      	ldr	r3, [r3, r2]
 800c91a:	2240      	movs	r2, #64	@ 0x40
 800c91c:	431a      	orrs	r2, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2190      	movs	r1, #144	@ 0x90
 800c922:	505a      	str	r2, [r3, r1]
 800c924:	2301      	movs	r3, #1
 800c926:	e08f      	b.n	800ca48 <HAL_UART_RegisterCallback+0x154>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2288      	movs	r2, #136	@ 0x88
 800c92c:	589b      	ldr	r3, [r3, r2]
 800c92e:	2b20      	cmp	r3, #32
 800c930:	d157      	bne.n	800c9e2 <HAL_UART_RegisterCallback+0xee>
 800c932:	230b      	movs	r3, #11
 800c934:	18fb      	adds	r3, r7, r3
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b0c      	cmp	r3, #12
 800c93a:	d845      	bhi.n	800c9c8 <HAL_UART_RegisterCallback+0xd4>
 800c93c:	009a      	lsls	r2, r3, #2
 800c93e:	4b44      	ldr	r3, [pc, #272]	@ (800ca50 <HAL_UART_RegisterCallback+0x15c>)
 800c940:	18d3      	adds	r3, r2, r3
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	469f      	mov	pc, r3
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2194      	movs	r1, #148	@ 0x94
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	505a      	str	r2, [r3, r1]
 800c94e:	e078      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2198      	movs	r1, #152	@ 0x98
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	505a      	str	r2, [r3, r1]
 800c958:	e073      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	219c      	movs	r1, #156	@ 0x9c
 800c95e:	687a      	ldr	r2, [r7, #4]
 800c960:	505a      	str	r2, [r3, r1]
 800c962:	e06e      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	21a0      	movs	r1, #160	@ 0xa0
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	505a      	str	r2, [r3, r1]
 800c96c:	e069      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	21a4      	movs	r1, #164	@ 0xa4
 800c972:	687a      	ldr	r2, [r7, #4]
 800c974:	505a      	str	r2, [r3, r1]
 800c976:	e064      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	21a8      	movs	r1, #168	@ 0xa8
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	505a      	str	r2, [r3, r1]
 800c980:	e05f      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	21ac      	movs	r1, #172	@ 0xac
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	505a      	str	r2, [r3, r1]
 800c98a:	e05a      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	21b0      	movs	r1, #176	@ 0xb0
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	505a      	str	r2, [r3, r1]
 800c994:	e055      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	21b4      	movs	r1, #180	@ 0xb4
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	505a      	str	r2, [r3, r1]
 800c99e:	e050      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	21b8      	movs	r1, #184	@ 0xb8
 800c9a4:	687a      	ldr	r2, [r7, #4]
 800c9a6:	505a      	str	r2, [r3, r1]
 800c9a8:	e04b      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	21bc      	movs	r1, #188	@ 0xbc
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	505a      	str	r2, [r3, r1]
 800c9b2:	e046      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	21c4      	movs	r1, #196	@ 0xc4
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	505a      	str	r2, [r3, r1]
 800c9bc:	e041      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	21c8      	movs	r1, #200	@ 0xc8
 800c9c2:	687a      	ldr	r2, [r7, #4]
 800c9c4:	505a      	str	r2, [r3, r1]
 800c9c6:	e03c      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	2290      	movs	r2, #144	@ 0x90
 800c9cc:	589b      	ldr	r3, [r3, r2]
 800c9ce:	2240      	movs	r2, #64	@ 0x40
 800c9d0:	431a      	orrs	r2, r3
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	2190      	movs	r1, #144	@ 0x90
 800c9d6:	505a      	str	r2, [r3, r1]
 800c9d8:	2317      	movs	r3, #23
 800c9da:	18fb      	adds	r3, r7, r3
 800c9dc:	2201      	movs	r2, #1
 800c9de:	701a      	strb	r2, [r3, #0]
 800c9e0:	e02f      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2288      	movs	r2, #136	@ 0x88
 800c9e6:	589b      	ldr	r3, [r3, r2]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d11e      	bne.n	800ca2a <HAL_UART_RegisterCallback+0x136>
 800c9ec:	230b      	movs	r3, #11
 800c9ee:	18fb      	adds	r3, r7, r3
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	2b0b      	cmp	r3, #11
 800c9f4:	d002      	beq.n	800c9fc <HAL_UART_RegisterCallback+0x108>
 800c9f6:	2b0c      	cmp	r3, #12
 800c9f8:	d005      	beq.n	800ca06 <HAL_UART_RegisterCallback+0x112>
 800c9fa:	e009      	b.n	800ca10 <HAL_UART_RegisterCallback+0x11c>
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	21c4      	movs	r1, #196	@ 0xc4
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	505a      	str	r2, [r3, r1]
 800ca04:	e01d      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	21c8      	movs	r1, #200	@ 0xc8
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	505a      	str	r2, [r3, r1]
 800ca0e:	e018      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2290      	movs	r2, #144	@ 0x90
 800ca14:	589b      	ldr	r3, [r3, r2]
 800ca16:	2240      	movs	r2, #64	@ 0x40
 800ca18:	431a      	orrs	r2, r3
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2190      	movs	r1, #144	@ 0x90
 800ca1e:	505a      	str	r2, [r3, r1]
 800ca20:	2317      	movs	r3, #23
 800ca22:	18fb      	adds	r3, r7, r3
 800ca24:	2201      	movs	r2, #1
 800ca26:	701a      	strb	r2, [r3, #0]
 800ca28:	e00b      	b.n	800ca42 <HAL_UART_RegisterCallback+0x14e>
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	2290      	movs	r2, #144	@ 0x90
 800ca2e:	589b      	ldr	r3, [r3, r2]
 800ca30:	2240      	movs	r2, #64	@ 0x40
 800ca32:	431a      	orrs	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	2190      	movs	r1, #144	@ 0x90
 800ca38:	505a      	str	r2, [r3, r1]
 800ca3a:	2317      	movs	r3, #23
 800ca3c:	18fb      	adds	r3, r7, r3
 800ca3e:	2201      	movs	r2, #1
 800ca40:	701a      	strb	r2, [r3, #0]
 800ca42:	2317      	movs	r3, #23
 800ca44:	18fb      	adds	r3, r7, r3
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	0018      	movs	r0, r3
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	b006      	add	sp, #24
 800ca4e:	bd80      	pop	{r7, pc}
 800ca50:	0800eb7c 	.word	0x0800eb7c

0800ca54 <HAL_UART_Receive_DMA>:
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b088      	sub	sp, #32
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	60f8      	str	r0, [r7, #12]
 800ca5c:	60b9      	str	r1, [r7, #8]
 800ca5e:	1dbb      	adds	r3, r7, #6
 800ca60:	801a      	strh	r2, [r3, #0]
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	228c      	movs	r2, #140	@ 0x8c
 800ca66:	589b      	ldr	r3, [r3, r2]
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	d14a      	bne.n	800cb02 <HAL_UART_Receive_DMA+0xae>
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d003      	beq.n	800ca7a <HAL_UART_Receive_DMA+0x26>
 800ca72:	1dbb      	adds	r3, r7, #6
 800ca74:	881b      	ldrh	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d101      	bne.n	800ca7e <HAL_UART_Receive_DMA+0x2a>
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e042      	b.n	800cb04 <HAL_UART_Receive_DMA+0xb0>
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	689a      	ldr	r2, [r3, #8]
 800ca82:	2380      	movs	r3, #128	@ 0x80
 800ca84:	015b      	lsls	r3, r3, #5
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d109      	bne.n	800ca9e <HAL_UART_Receive_DMA+0x4a>
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	691b      	ldr	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d105      	bne.n	800ca9e <HAL_UART_Receive_DMA+0x4a>
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	2201      	movs	r2, #1
 800ca96:	4013      	ands	r3, r2
 800ca98:	d001      	beq.n	800ca9e <HAL_UART_Receive_DMA+0x4a>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e032      	b.n	800cb04 <HAL_UART_Receive_DMA+0xb0>
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a18      	ldr	r2, [pc, #96]	@ (800cb0c <HAL_UART_Receive_DMA+0xb8>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d020      	beq.n	800caf0 <HAL_UART_Receive_DMA+0x9c>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	685a      	ldr	r2, [r3, #4]
 800cab4:	2380      	movs	r3, #128	@ 0x80
 800cab6:	041b      	lsls	r3, r3, #16
 800cab8:	4013      	ands	r3, r2
 800caba:	d019      	beq.n	800caf0 <HAL_UART_Receive_DMA+0x9c>
 800cabc:	f3ef 8310 	mrs	r3, PRIMASK
 800cac0:	613b      	str	r3, [r7, #16]
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	61fb      	str	r3, [r7, #28]
 800cac6:	2301      	movs	r3, #1
 800cac8:	617b      	str	r3, [r7, #20]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f383 8810 	msr	PRIMASK, r3
 800cad0:	46c0      	nop			@ (mov r8, r8)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2180      	movs	r1, #128	@ 0x80
 800cade:	04c9      	lsls	r1, r1, #19
 800cae0:	430a      	orrs	r2, r1
 800cae2:	601a      	str	r2, [r3, #0]
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	61bb      	str	r3, [r7, #24]
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	f383 8810 	msr	PRIMASK, r3
 800caee:	46c0      	nop			@ (mov r8, r8)
 800caf0:	1dbb      	adds	r3, r7, #6
 800caf2:	881a      	ldrh	r2, [r3, #0]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	0018      	movs	r0, r3
 800cafa:	f001 f81f 	bl	800db3c <UART_Start_Receive_DMA>
 800cafe:	0003      	movs	r3, r0
 800cb00:	e000      	b.n	800cb04 <HAL_UART_Receive_DMA+0xb0>
 800cb02:	2302      	movs	r3, #2
 800cb04:	0018      	movs	r0, r3
 800cb06:	46bd      	mov	sp, r7
 800cb08:	b008      	add	sp, #32
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	40008000 	.word	0x40008000

0800cb10 <HAL_UART_IRQHandler>:
 800cb10:	b5b0      	push	{r4, r5, r7, lr}
 800cb12:	b0aa      	sub	sp, #168	@ 0xa8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	22a4      	movs	r2, #164	@ 0xa4
 800cb20:	18b9      	adds	r1, r7, r2
 800cb22:	600b      	str	r3, [r1, #0]
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	20a0      	movs	r0, #160	@ 0xa0
 800cb2c:	1839      	adds	r1, r7, r0
 800cb2e:	600b      	str	r3, [r1, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	249c      	movs	r4, #156	@ 0x9c
 800cb38:	1939      	adds	r1, r7, r4
 800cb3a:	600b      	str	r3, [r1, #0]
 800cb3c:	0011      	movs	r1, r2
 800cb3e:	18bb      	adds	r3, r7, r2
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4aa5      	ldr	r2, [pc, #660]	@ (800cdd8 <HAL_UART_IRQHandler+0x2c8>)
 800cb44:	4013      	ands	r3, r2
 800cb46:	2298      	movs	r2, #152	@ 0x98
 800cb48:	18bd      	adds	r5, r7, r2
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	18bb      	adds	r3, r7, r2
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d11a      	bne.n	800cb8a <HAL_UART_IRQHandler+0x7a>
 800cb54:	187b      	adds	r3, r7, r1
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	4013      	ands	r3, r2
 800cb5c:	d015      	beq.n	800cb8a <HAL_UART_IRQHandler+0x7a>
 800cb5e:	183b      	adds	r3, r7, r0
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2220      	movs	r2, #32
 800cb64:	4013      	ands	r3, r2
 800cb66:	d105      	bne.n	800cb74 <HAL_UART_IRQHandler+0x64>
 800cb68:	193b      	adds	r3, r7, r4
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	2380      	movs	r3, #128	@ 0x80
 800cb6e:	055b      	lsls	r3, r3, #21
 800cb70:	4013      	ands	r3, r2
 800cb72:	d00a      	beq.n	800cb8a <HAL_UART_IRQHandler+0x7a>
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d100      	bne.n	800cb7e <HAL_UART_IRQHandler+0x6e>
 800cb7c:	e2ea      	b.n	800d154 <HAL_UART_IRQHandler+0x644>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	0010      	movs	r0, r2
 800cb86:	4798      	blx	r3
 800cb88:	e2e4      	b.n	800d154 <HAL_UART_IRQHandler+0x644>
 800cb8a:	2398      	movs	r3, #152	@ 0x98
 800cb8c:	18fb      	adds	r3, r7, r3
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d100      	bne.n	800cb96 <HAL_UART_IRQHandler+0x86>
 800cb94:	e128      	b.n	800cde8 <HAL_UART_IRQHandler+0x2d8>
 800cb96:	239c      	movs	r3, #156	@ 0x9c
 800cb98:	18fb      	adds	r3, r7, r3
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a8f      	ldr	r2, [pc, #572]	@ (800cddc <HAL_UART_IRQHandler+0x2cc>)
 800cb9e:	4013      	ands	r3, r2
 800cba0:	d106      	bne.n	800cbb0 <HAL_UART_IRQHandler+0xa0>
 800cba2:	23a0      	movs	r3, #160	@ 0xa0
 800cba4:	18fb      	adds	r3, r7, r3
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a8d      	ldr	r2, [pc, #564]	@ (800cde0 <HAL_UART_IRQHandler+0x2d0>)
 800cbaa:	4013      	ands	r3, r2
 800cbac:	d100      	bne.n	800cbb0 <HAL_UART_IRQHandler+0xa0>
 800cbae:	e11b      	b.n	800cde8 <HAL_UART_IRQHandler+0x2d8>
 800cbb0:	23a4      	movs	r3, #164	@ 0xa4
 800cbb2:	18fb      	adds	r3, r7, r3
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	4013      	ands	r3, r2
 800cbba:	d012      	beq.n	800cbe2 <HAL_UART_IRQHandler+0xd2>
 800cbbc:	23a0      	movs	r3, #160	@ 0xa0
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	2380      	movs	r3, #128	@ 0x80
 800cbc4:	005b      	lsls	r3, r3, #1
 800cbc6:	4013      	ands	r3, r2
 800cbc8:	d00b      	beq.n	800cbe2 <HAL_UART_IRQHandler+0xd2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	621a      	str	r2, [r3, #32]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2290      	movs	r2, #144	@ 0x90
 800cbd6:	589b      	ldr	r3, [r3, r2]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2190      	movs	r1, #144	@ 0x90
 800cbe0:	505a      	str	r2, [r3, r1]
 800cbe2:	23a4      	movs	r3, #164	@ 0xa4
 800cbe4:	18fb      	adds	r3, r7, r3
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	2202      	movs	r2, #2
 800cbea:	4013      	ands	r3, r2
 800cbec:	d011      	beq.n	800cc12 <HAL_UART_IRQHandler+0x102>
 800cbee:	239c      	movs	r3, #156	@ 0x9c
 800cbf0:	18fb      	adds	r3, r7, r3
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2201      	movs	r2, #1
 800cbf6:	4013      	ands	r3, r2
 800cbf8:	d00b      	beq.n	800cc12 <HAL_UART_IRQHandler+0x102>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	2202      	movs	r2, #2
 800cc00:	621a      	str	r2, [r3, #32]
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2290      	movs	r2, #144	@ 0x90
 800cc06:	589b      	ldr	r3, [r3, r2]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	431a      	orrs	r2, r3
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2190      	movs	r1, #144	@ 0x90
 800cc10:	505a      	str	r2, [r3, r1]
 800cc12:	23a4      	movs	r3, #164	@ 0xa4
 800cc14:	18fb      	adds	r3, r7, r3
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	4013      	ands	r3, r2
 800cc1c:	d011      	beq.n	800cc42 <HAL_UART_IRQHandler+0x132>
 800cc1e:	239c      	movs	r3, #156	@ 0x9c
 800cc20:	18fb      	adds	r3, r7, r3
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2201      	movs	r2, #1
 800cc26:	4013      	ands	r3, r2
 800cc28:	d00b      	beq.n	800cc42 <HAL_UART_IRQHandler+0x132>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2204      	movs	r2, #4
 800cc30:	621a      	str	r2, [r3, #32]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2290      	movs	r2, #144	@ 0x90
 800cc36:	589b      	ldr	r3, [r3, r2]
 800cc38:	2202      	movs	r2, #2
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2190      	movs	r1, #144	@ 0x90
 800cc40:	505a      	str	r2, [r3, r1]
 800cc42:	23a4      	movs	r3, #164	@ 0xa4
 800cc44:	18fb      	adds	r3, r7, r3
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2208      	movs	r2, #8
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	d017      	beq.n	800cc7e <HAL_UART_IRQHandler+0x16e>
 800cc4e:	23a0      	movs	r3, #160	@ 0xa0
 800cc50:	18fb      	adds	r3, r7, r3
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	2220      	movs	r2, #32
 800cc56:	4013      	ands	r3, r2
 800cc58:	d105      	bne.n	800cc66 <HAL_UART_IRQHandler+0x156>
 800cc5a:	239c      	movs	r3, #156	@ 0x9c
 800cc5c:	18fb      	adds	r3, r7, r3
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a5e      	ldr	r2, [pc, #376]	@ (800cddc <HAL_UART_IRQHandler+0x2cc>)
 800cc62:	4013      	ands	r3, r2
 800cc64:	d00b      	beq.n	800cc7e <HAL_UART_IRQHandler+0x16e>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	2208      	movs	r2, #8
 800cc6c:	621a      	str	r2, [r3, #32]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2290      	movs	r2, #144	@ 0x90
 800cc72:	589b      	ldr	r3, [r3, r2]
 800cc74:	2208      	movs	r2, #8
 800cc76:	431a      	orrs	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2190      	movs	r1, #144	@ 0x90
 800cc7c:	505a      	str	r2, [r3, r1]
 800cc7e:	23a4      	movs	r3, #164	@ 0xa4
 800cc80:	18fb      	adds	r3, r7, r3
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	2380      	movs	r3, #128	@ 0x80
 800cc86:	011b      	lsls	r3, r3, #4
 800cc88:	4013      	ands	r3, r2
 800cc8a:	d013      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x1a4>
 800cc8c:	23a0      	movs	r3, #160	@ 0xa0
 800cc8e:	18fb      	adds	r3, r7, r3
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	2380      	movs	r3, #128	@ 0x80
 800cc94:	04db      	lsls	r3, r3, #19
 800cc96:	4013      	ands	r3, r2
 800cc98:	d00c      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x1a4>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	2280      	movs	r2, #128	@ 0x80
 800cca0:	0112      	lsls	r2, r2, #4
 800cca2:	621a      	str	r2, [r3, #32]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2290      	movs	r2, #144	@ 0x90
 800cca8:	589b      	ldr	r3, [r3, r2]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	431a      	orrs	r2, r3
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2190      	movs	r1, #144	@ 0x90
 800ccb2:	505a      	str	r2, [r3, r1]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2290      	movs	r2, #144	@ 0x90
 800ccb8:	589b      	ldr	r3, [r3, r2]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d100      	bne.n	800ccc0 <HAL_UART_IRQHandler+0x1b0>
 800ccbe:	e24b      	b.n	800d158 <HAL_UART_IRQHandler+0x648>
 800ccc0:	23a4      	movs	r3, #164	@ 0xa4
 800ccc2:	18fb      	adds	r3, r7, r3
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	4013      	ands	r3, r2
 800ccca:	d015      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x1e8>
 800cccc:	23a0      	movs	r3, #160	@ 0xa0
 800ccce:	18fb      	adds	r3, r7, r3
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	d106      	bne.n	800cce6 <HAL_UART_IRQHandler+0x1d6>
 800ccd8:	239c      	movs	r3, #156	@ 0x9c
 800ccda:	18fb      	adds	r3, r7, r3
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	2380      	movs	r3, #128	@ 0x80
 800cce0:	055b      	lsls	r3, r3, #21
 800cce2:	4013      	ands	r3, r2
 800cce4:	d008      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x1e8>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d004      	beq.n	800ccf8 <HAL_UART_IRQHandler+0x1e8>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	0010      	movs	r0, r2
 800ccf6:	4798      	blx	r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2290      	movs	r2, #144	@ 0x90
 800ccfc:	589b      	ldr	r3, [r3, r2]
 800ccfe:	2194      	movs	r1, #148	@ 0x94
 800cd00:	187a      	adds	r2, r7, r1
 800cd02:	6013      	str	r3, [r2, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	689b      	ldr	r3, [r3, #8]
 800cd0a:	2240      	movs	r2, #64	@ 0x40
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	2b40      	cmp	r3, #64	@ 0x40
 800cd10:	d004      	beq.n	800cd1c <HAL_UART_IRQHandler+0x20c>
 800cd12:	187b      	adds	r3, r7, r1
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2228      	movs	r2, #40	@ 0x28
 800cd18:	4013      	ands	r3, r2
 800cd1a:	d050      	beq.n	800cdbe <HAL_UART_IRQHandler+0x2ae>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	0018      	movs	r0, r3
 800cd20:	f000 fff2 	bl	800dd08 <UART_EndRxTransfer>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	2240      	movs	r2, #64	@ 0x40
 800cd2c:	4013      	ands	r3, r2
 800cd2e:	2b40      	cmp	r3, #64	@ 0x40
 800cd30:	d13e      	bne.n	800cdb0 <HAL_UART_IRQHandler+0x2a0>
 800cd32:	f3ef 8310 	mrs	r3, PRIMASK
 800cd36:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cd3a:	2090      	movs	r0, #144	@ 0x90
 800cd3c:	183a      	adds	r2, r7, r0
 800cd3e:	6013      	str	r3, [r2, #0]
 800cd40:	2301      	movs	r3, #1
 800cd42:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cd46:	f383 8810 	msr	PRIMASK, r3
 800cd4a:	46c0      	nop			@ (mov r8, r8)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	689a      	ldr	r2, [r3, #8]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2140      	movs	r1, #64	@ 0x40
 800cd58:	438a      	bics	r2, r1
 800cd5a:	609a      	str	r2, [r3, #8]
 800cd5c:	183b      	adds	r3, r7, r0
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cd64:	f383 8810 	msr	PRIMASK, r3
 800cd68:	46c0      	nop			@ (mov r8, r8)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2280      	movs	r2, #128	@ 0x80
 800cd6e:	589b      	ldr	r3, [r3, r2]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d016      	beq.n	800cda2 <HAL_UART_IRQHandler+0x292>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2280      	movs	r2, #128	@ 0x80
 800cd78:	589b      	ldr	r3, [r3, r2]
 800cd7a:	4a1a      	ldr	r2, [pc, #104]	@ (800cde4 <HAL_UART_IRQHandler+0x2d4>)
 800cd7c:	639a      	str	r2, [r3, #56]	@ 0x38
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2280      	movs	r2, #128	@ 0x80
 800cd82:	589b      	ldr	r3, [r3, r2]
 800cd84:	0018      	movs	r0, r3
 800cd86:	f7fb fb3f 	bl	8008408 <HAL_DMA_Abort_IT>
 800cd8a:	1e03      	subs	r3, r0, #0
 800cd8c:	d022      	beq.n	800cdd4 <HAL_UART_IRQHandler+0x2c4>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2280      	movs	r2, #128	@ 0x80
 800cd92:	589b      	ldr	r3, [r3, r2]
 800cd94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	2180      	movs	r1, #128	@ 0x80
 800cd9a:	5852      	ldr	r2, [r2, r1]
 800cd9c:	0010      	movs	r0, r2
 800cd9e:	4798      	blx	r3
 800cda0:	e018      	b.n	800cdd4 <HAL_UART_IRQHandler+0x2c4>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	22a4      	movs	r2, #164	@ 0xa4
 800cda6:	589b      	ldr	r3, [r3, r2]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	0010      	movs	r0, r2
 800cdac:	4798      	blx	r3
 800cdae:	e011      	b.n	800cdd4 <HAL_UART_IRQHandler+0x2c4>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	22a4      	movs	r2, #164	@ 0xa4
 800cdb4:	589b      	ldr	r3, [r3, r2]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	0010      	movs	r0, r2
 800cdba:	4798      	blx	r3
 800cdbc:	e00a      	b.n	800cdd4 <HAL_UART_IRQHandler+0x2c4>
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	22a4      	movs	r2, #164	@ 0xa4
 800cdc2:	589b      	ldr	r3, [r3, r2]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	0010      	movs	r0, r2
 800cdc8:	4798      	blx	r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2290      	movs	r2, #144	@ 0x90
 800cdce:	2100      	movs	r1, #0
 800cdd0:	5099      	str	r1, [r3, r2]
 800cdd2:	e1c1      	b.n	800d158 <HAL_UART_IRQHandler+0x648>
 800cdd4:	46c0      	nop			@ (mov r8, r8)
 800cdd6:	e1bf      	b.n	800d158 <HAL_UART_IRQHandler+0x648>
 800cdd8:	0000080f 	.word	0x0000080f
 800cddc:	10000001 	.word	0x10000001
 800cde0:	04000120 	.word	0x04000120
 800cde4:	0800dfdb 	.word	0x0800dfdb
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d000      	beq.n	800cdf2 <HAL_UART_IRQHandler+0x2e2>
 800cdf0:	e140      	b.n	800d074 <HAL_UART_IRQHandler+0x564>
 800cdf2:	23a4      	movs	r3, #164	@ 0xa4
 800cdf4:	18fb      	adds	r3, r7, r3
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2210      	movs	r2, #16
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	d100      	bne.n	800ce00 <HAL_UART_IRQHandler+0x2f0>
 800cdfe:	e139      	b.n	800d074 <HAL_UART_IRQHandler+0x564>
 800ce00:	23a0      	movs	r3, #160	@ 0xa0
 800ce02:	18fb      	adds	r3, r7, r3
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2210      	movs	r2, #16
 800ce08:	4013      	ands	r3, r2
 800ce0a:	d100      	bne.n	800ce0e <HAL_UART_IRQHandler+0x2fe>
 800ce0c:	e132      	b.n	800d074 <HAL_UART_IRQHandler+0x564>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2210      	movs	r2, #16
 800ce14:	621a      	str	r2, [r3, #32]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	689b      	ldr	r3, [r3, #8]
 800ce1c:	2240      	movs	r2, #64	@ 0x40
 800ce1e:	4013      	ands	r3, r2
 800ce20:	2b40      	cmp	r3, #64	@ 0x40
 800ce22:	d000      	beq.n	800ce26 <HAL_UART_IRQHandler+0x316>
 800ce24:	e0a5      	b.n	800cf72 <HAL_UART_IRQHandler+0x462>
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2280      	movs	r2, #128	@ 0x80
 800ce2a:	589b      	ldr	r3, [r3, r2]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	217e      	movs	r1, #126	@ 0x7e
 800ce32:	187b      	adds	r3, r7, r1
 800ce34:	801a      	strh	r2, [r3, #0]
 800ce36:	187b      	adds	r3, r7, r1
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d100      	bne.n	800ce40 <HAL_UART_IRQHandler+0x330>
 800ce3e:	e18d      	b.n	800d15c <HAL_UART_IRQHandler+0x64c>
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	225c      	movs	r2, #92	@ 0x5c
 800ce44:	5a9b      	ldrh	r3, [r3, r2]
 800ce46:	187a      	adds	r2, r7, r1
 800ce48:	8812      	ldrh	r2, [r2, #0]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d300      	bcc.n	800ce50 <HAL_UART_IRQHandler+0x340>
 800ce4e:	e185      	b.n	800d15c <HAL_UART_IRQHandler+0x64c>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	187a      	adds	r2, r7, r1
 800ce54:	215e      	movs	r1, #94	@ 0x5e
 800ce56:	8812      	ldrh	r2, [r2, #0]
 800ce58:	525a      	strh	r2, [r3, r1]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2280      	movs	r2, #128	@ 0x80
 800ce5e:	589b      	ldr	r3, [r3, r2]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2220      	movs	r2, #32
 800ce66:	4013      	ands	r3, r2
 800ce68:	d170      	bne.n	800cf4c <HAL_UART_IRQHandler+0x43c>
 800ce6a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce72:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ce74:	2301      	movs	r3, #1
 800ce76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ce78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce7a:	f383 8810 	msr	PRIMASK, r3
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	681a      	ldr	r2, [r3, #0]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	49b8      	ldr	r1, [pc, #736]	@ (800d16c <HAL_UART_IRQHandler+0x65c>)
 800ce8c:	400a      	ands	r2, r1
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ce92:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce96:	f383 8810 	msr	PRIMASK, r3
 800ce9a:	46c0      	nop			@ (mov r8, r8)
 800ce9c:	f3ef 8310 	mrs	r3, PRIMASK
 800cea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cea2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cea4:	677b      	str	r3, [r7, #116]	@ 0x74
 800cea6:	2301      	movs	r3, #1
 800cea8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ceaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ceac:	f383 8810 	msr	PRIMASK, r3
 800ceb0:	46c0      	nop			@ (mov r8, r8)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	689a      	ldr	r2, [r3, #8]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2101      	movs	r1, #1
 800cebe:	438a      	bics	r2, r1
 800cec0:	609a      	str	r2, [r3, #8]
 800cec2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cec4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cec6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cec8:	f383 8810 	msr	PRIMASK, r3
 800cecc:	46c0      	nop			@ (mov r8, r8)
 800cece:	f3ef 8310 	mrs	r3, PRIMASK
 800ced2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ced4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ced6:	673b      	str	r3, [r7, #112]	@ 0x70
 800ced8:	2301      	movs	r3, #1
 800ceda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cede:	f383 8810 	msr	PRIMASK, r3
 800cee2:	46c0      	nop			@ (mov r8, r8)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	689a      	ldr	r2, [r3, #8]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2140      	movs	r1, #64	@ 0x40
 800cef0:	438a      	bics	r2, r1
 800cef2:	609a      	str	r2, [r3, #8]
 800cef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cef6:	653b      	str	r3, [r7, #80]	@ 0x50
 800cef8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cefa:	f383 8810 	msr	PRIMASK, r3
 800cefe:	46c0      	nop			@ (mov r8, r8)
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	228c      	movs	r2, #140	@ 0x8c
 800cf04:	2120      	movs	r1, #32
 800cf06:	5099      	str	r1, [r3, r2]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800cf0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf12:	657b      	str	r3, [r7, #84]	@ 0x54
 800cf14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cf18:	2301      	movs	r3, #1
 800cf1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cf1e:	f383 8810 	msr	PRIMASK, r3
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	2110      	movs	r1, #16
 800cf30:	438a      	bics	r2, r1
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf38:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf3a:	f383 8810 	msr	PRIMASK, r3
 800cf3e:	46c0      	nop			@ (mov r8, r8)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2280      	movs	r2, #128	@ 0x80
 800cf44:	589b      	ldr	r3, [r3, r2]
 800cf46:	0018      	movs	r0, r3
 800cf48:	f7fb f9fc 	bl	8008344 <HAL_DMA_Abort>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2202      	movs	r2, #2
 800cf50:	671a      	str	r2, [r3, #112]	@ 0x70
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	22c0      	movs	r2, #192	@ 0xc0
 800cf56:	589b      	ldr	r3, [r3, r2]
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	215c      	movs	r1, #92	@ 0x5c
 800cf5c:	5a51      	ldrh	r1, [r2, r1]
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	205e      	movs	r0, #94	@ 0x5e
 800cf62:	5a12      	ldrh	r2, [r2, r0]
 800cf64:	b292      	uxth	r2, r2
 800cf66:	1a8a      	subs	r2, r1, r2
 800cf68:	b291      	uxth	r1, r2
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	0010      	movs	r0, r2
 800cf6e:	4798      	blx	r3
 800cf70:	e0f4      	b.n	800d15c <HAL_UART_IRQHandler+0x64c>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	225c      	movs	r2, #92	@ 0x5c
 800cf76:	5a99      	ldrh	r1, [r3, r2]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	225e      	movs	r2, #94	@ 0x5e
 800cf7c:	5a9b      	ldrh	r3, [r3, r2]
 800cf7e:	b29a      	uxth	r2, r3
 800cf80:	208e      	movs	r0, #142	@ 0x8e
 800cf82:	183b      	adds	r3, r7, r0
 800cf84:	1a8a      	subs	r2, r1, r2
 800cf86:	801a      	strh	r2, [r3, #0]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	225e      	movs	r2, #94	@ 0x5e
 800cf8c:	5a9b      	ldrh	r3, [r3, r2]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d100      	bne.n	800cf96 <HAL_UART_IRQHandler+0x486>
 800cf94:	e0e4      	b.n	800d160 <HAL_UART_IRQHandler+0x650>
 800cf96:	183b      	adds	r3, r7, r0
 800cf98:	881b      	ldrh	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d100      	bne.n	800cfa0 <HAL_UART_IRQHandler+0x490>
 800cf9e:	e0df      	b.n	800d160 <HAL_UART_IRQHandler+0x650>
 800cfa0:	f3ef 8310 	mrs	r3, PRIMASK
 800cfa4:	60fb      	str	r3, [r7, #12]
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2488      	movs	r4, #136	@ 0x88
 800cfaa:	193a      	adds	r2, r7, r4
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	2301      	movs	r3, #1
 800cfb0:	613b      	str	r3, [r7, #16]
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	f383 8810 	msr	PRIMASK, r3
 800cfb8:	46c0      	nop			@ (mov r8, r8)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	496a      	ldr	r1, [pc, #424]	@ (800d170 <HAL_UART_IRQHandler+0x660>)
 800cfc6:	400a      	ands	r2, r1
 800cfc8:	601a      	str	r2, [r3, #0]
 800cfca:	193b      	adds	r3, r7, r4
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	617b      	str	r3, [r7, #20]
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	f383 8810 	msr	PRIMASK, r3
 800cfd6:	46c0      	nop			@ (mov r8, r8)
 800cfd8:	f3ef 8310 	mrs	r3, PRIMASK
 800cfdc:	61bb      	str	r3, [r7, #24]
 800cfde:	69bb      	ldr	r3, [r7, #24]
 800cfe0:	2484      	movs	r4, #132	@ 0x84
 800cfe2:	193a      	adds	r2, r7, r4
 800cfe4:	6013      	str	r3, [r2, #0]
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	61fb      	str	r3, [r7, #28]
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	f383 8810 	msr	PRIMASK, r3
 800cff0:	46c0      	nop			@ (mov r8, r8)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689a      	ldr	r2, [r3, #8]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	495d      	ldr	r1, [pc, #372]	@ (800d174 <HAL_UART_IRQHandler+0x664>)
 800cffe:	400a      	ands	r2, r1
 800d000:	609a      	str	r2, [r3, #8]
 800d002:	193b      	adds	r3, r7, r4
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	623b      	str	r3, [r7, #32]
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	f383 8810 	msr	PRIMASK, r3
 800d00e:	46c0      	nop			@ (mov r8, r8)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	228c      	movs	r2, #140	@ 0x8c
 800d014:	2120      	movs	r1, #32
 800d016:	5099      	str	r1, [r3, r2]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	675a      	str	r2, [r3, #116]	@ 0x74
 800d024:	f3ef 8310 	mrs	r3, PRIMASK
 800d028:	627b      	str	r3, [r7, #36]	@ 0x24
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	2480      	movs	r4, #128	@ 0x80
 800d02e:	193a      	adds	r2, r7, r4
 800d030:	6013      	str	r3, [r2, #0]
 800d032:	2301      	movs	r3, #1
 800d034:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d038:	f383 8810 	msr	PRIMASK, r3
 800d03c:	46c0      	nop			@ (mov r8, r8)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	2110      	movs	r1, #16
 800d04a:	438a      	bics	r2, r1
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	193b      	adds	r3, r7, r4
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d056:	f383 8810 	msr	PRIMASK, r3
 800d05a:	46c0      	nop			@ (mov r8, r8)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2202      	movs	r2, #2
 800d060:	671a      	str	r2, [r3, #112]	@ 0x70
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	22c0      	movs	r2, #192	@ 0xc0
 800d066:	589b      	ldr	r3, [r3, r2]
 800d068:	183a      	adds	r2, r7, r0
 800d06a:	8811      	ldrh	r1, [r2, #0]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	0010      	movs	r0, r2
 800d070:	4798      	blx	r3
 800d072:	e075      	b.n	800d160 <HAL_UART_IRQHandler+0x650>
 800d074:	23a4      	movs	r3, #164	@ 0xa4
 800d076:	18fb      	adds	r3, r7, r3
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	2380      	movs	r3, #128	@ 0x80
 800d07c:	035b      	lsls	r3, r3, #13
 800d07e:	4013      	ands	r3, r2
 800d080:	d012      	beq.n	800d0a8 <HAL_UART_IRQHandler+0x598>
 800d082:	239c      	movs	r3, #156	@ 0x9c
 800d084:	18fb      	adds	r3, r7, r3
 800d086:	681a      	ldr	r2, [r3, #0]
 800d088:	2380      	movs	r3, #128	@ 0x80
 800d08a:	03db      	lsls	r3, r3, #15
 800d08c:	4013      	ands	r3, r2
 800d08e:	d00b      	beq.n	800d0a8 <HAL_UART_IRQHandler+0x598>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2280      	movs	r2, #128	@ 0x80
 800d096:	0352      	lsls	r2, r2, #13
 800d098:	621a      	str	r2, [r3, #32]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	22b4      	movs	r2, #180	@ 0xb4
 800d09e:	589b      	ldr	r3, [r3, r2]
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	0010      	movs	r0, r2
 800d0a4:	4798      	blx	r3
 800d0a6:	e05e      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d0a8:	23a4      	movs	r3, #164	@ 0xa4
 800d0aa:	18fb      	adds	r3, r7, r3
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2280      	movs	r2, #128	@ 0x80
 800d0b0:	4013      	ands	r3, r2
 800d0b2:	d016      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x5d2>
 800d0b4:	23a0      	movs	r3, #160	@ 0xa0
 800d0b6:	18fb      	adds	r3, r7, r3
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2280      	movs	r2, #128	@ 0x80
 800d0bc:	4013      	ands	r3, r2
 800d0be:	d106      	bne.n	800d0ce <HAL_UART_IRQHandler+0x5be>
 800d0c0:	239c      	movs	r3, #156	@ 0x9c
 800d0c2:	18fb      	adds	r3, r7, r3
 800d0c4:	681a      	ldr	r2, [r3, #0]
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	041b      	lsls	r3, r3, #16
 800d0ca:	4013      	ands	r3, r2
 800d0cc:	d009      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x5d2>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d046      	beq.n	800d164 <HAL_UART_IRQHandler+0x654>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	0010      	movs	r0, r2
 800d0de:	4798      	blx	r3
 800d0e0:	e040      	b.n	800d164 <HAL_UART_IRQHandler+0x654>
 800d0e2:	23a4      	movs	r3, #164	@ 0xa4
 800d0e4:	18fb      	adds	r3, r7, r3
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2240      	movs	r2, #64	@ 0x40
 800d0ea:	4013      	ands	r3, r2
 800d0ec:	d00a      	beq.n	800d104 <HAL_UART_IRQHandler+0x5f4>
 800d0ee:	23a0      	movs	r3, #160	@ 0xa0
 800d0f0:	18fb      	adds	r3, r7, r3
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	2240      	movs	r2, #64	@ 0x40
 800d0f6:	4013      	ands	r3, r2
 800d0f8:	d004      	beq.n	800d104 <HAL_UART_IRQHandler+0x5f4>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	0018      	movs	r0, r3
 800d0fe:	f000 ff85 	bl	800e00c <UART_EndTransmit_IT>
 800d102:	e030      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d104:	23a4      	movs	r3, #164	@ 0xa4
 800d106:	18fb      	adds	r3, r7, r3
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	2380      	movs	r3, #128	@ 0x80
 800d10c:	041b      	lsls	r3, r3, #16
 800d10e:	4013      	ands	r3, r2
 800d110:	d00d      	beq.n	800d12e <HAL_UART_IRQHandler+0x61e>
 800d112:	23a0      	movs	r3, #160	@ 0xa0
 800d114:	18fb      	adds	r3, r7, r3
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	2380      	movs	r3, #128	@ 0x80
 800d11a:	05db      	lsls	r3, r3, #23
 800d11c:	4013      	ands	r3, r2
 800d11e:	d006      	beq.n	800d12e <HAL_UART_IRQHandler+0x61e>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	22bc      	movs	r2, #188	@ 0xbc
 800d124:	589b      	ldr	r3, [r3, r2]
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	0010      	movs	r0, r2
 800d12a:	4798      	blx	r3
 800d12c:	e01b      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d12e:	23a4      	movs	r3, #164	@ 0xa4
 800d130:	18fb      	adds	r3, r7, r3
 800d132:	681a      	ldr	r2, [r3, #0]
 800d134:	2380      	movs	r3, #128	@ 0x80
 800d136:	045b      	lsls	r3, r3, #17
 800d138:	4013      	ands	r3, r2
 800d13a:	d014      	beq.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d13c:	23a0      	movs	r3, #160	@ 0xa0
 800d13e:	18fb      	adds	r3, r7, r3
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	da0f      	bge.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	22b8      	movs	r2, #184	@ 0xb8
 800d14a:	589b      	ldr	r3, [r3, r2]
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	0010      	movs	r0, r2
 800d150:	4798      	blx	r3
 800d152:	e008      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d154:	46c0      	nop			@ (mov r8, r8)
 800d156:	e006      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d158:	46c0      	nop			@ (mov r8, r8)
 800d15a:	e004      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d15c:	46c0      	nop			@ (mov r8, r8)
 800d15e:	e002      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d160:	46c0      	nop			@ (mov r8, r8)
 800d162:	e000      	b.n	800d166 <HAL_UART_IRQHandler+0x656>
 800d164:	46c0      	nop			@ (mov r8, r8)
 800d166:	46bd      	mov	sp, r7
 800d168:	b02a      	add	sp, #168	@ 0xa8
 800d16a:	bdb0      	pop	{r4, r5, r7, pc}
 800d16c:	fffffeff 	.word	0xfffffeff
 800d170:	fffffedf 	.word	0xfffffedf
 800d174:	effffffe 	.word	0xeffffffe

0800d178 <HAL_UART_TxCpltCallback>:
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	46c0      	nop			@ (mov r8, r8)
 800d182:	46bd      	mov	sp, r7
 800d184:	b002      	add	sp, #8
 800d186:	bd80      	pop	{r7, pc}

0800d188 <HAL_UART_TxHalfCpltCallback>:
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	46c0      	nop			@ (mov r8, r8)
 800d192:	46bd      	mov	sp, r7
 800d194:	b002      	add	sp, #8
 800d196:	bd80      	pop	{r7, pc}

0800d198 <HAL_UART_RxCpltCallback>:
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
 800d1a0:	46c0      	nop			@ (mov r8, r8)
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	b002      	add	sp, #8
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <HAL_UART_RxHalfCpltCallback>:
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	46c0      	nop			@ (mov r8, r8)
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	b002      	add	sp, #8
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <HAL_UART_ErrorCallback>:
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	46c0      	nop			@ (mov r8, r8)
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	b002      	add	sp, #8
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <HAL_UART_AbortCpltCallback>:
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	46c0      	nop			@ (mov r8, r8)
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	b002      	add	sp, #8
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <HAL_UART_AbortTransmitCpltCallback>:
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	46c0      	nop			@ (mov r8, r8)
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	b002      	add	sp, #8
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_UART_AbortReceiveCpltCallback>:
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	46c0      	nop			@ (mov r8, r8)
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	b002      	add	sp, #8
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_UARTEx_RxEventCallback>:
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	000a      	movs	r2, r1
 800d202:	1cbb      	adds	r3, r7, #2
 800d204:	801a      	strh	r2, [r3, #0]
 800d206:	46c0      	nop			@ (mov r8, r8)
 800d208:	46bd      	mov	sp, r7
 800d20a:	b002      	add	sp, #8
 800d20c:	bd80      	pop	{r7, pc}
	...

0800d210 <UART_InitCallbacksToDefault>:
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2194      	movs	r1, #148	@ 0x94
 800d21c:	4a18      	ldr	r2, [pc, #96]	@ (800d280 <UART_InitCallbacksToDefault+0x70>)
 800d21e:	505a      	str	r2, [r3, r1]
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2198      	movs	r1, #152	@ 0x98
 800d224:	4a17      	ldr	r2, [pc, #92]	@ (800d284 <UART_InitCallbacksToDefault+0x74>)
 800d226:	505a      	str	r2, [r3, r1]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	219c      	movs	r1, #156	@ 0x9c
 800d22c:	4a16      	ldr	r2, [pc, #88]	@ (800d288 <UART_InitCallbacksToDefault+0x78>)
 800d22e:	505a      	str	r2, [r3, r1]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	21a0      	movs	r1, #160	@ 0xa0
 800d234:	4a15      	ldr	r2, [pc, #84]	@ (800d28c <UART_InitCallbacksToDefault+0x7c>)
 800d236:	505a      	str	r2, [r3, r1]
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	21a4      	movs	r1, #164	@ 0xa4
 800d23c:	4a14      	ldr	r2, [pc, #80]	@ (800d290 <UART_InitCallbacksToDefault+0x80>)
 800d23e:	505a      	str	r2, [r3, r1]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	21a8      	movs	r1, #168	@ 0xa8
 800d244:	4a13      	ldr	r2, [pc, #76]	@ (800d294 <UART_InitCallbacksToDefault+0x84>)
 800d246:	505a      	str	r2, [r3, r1]
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	21ac      	movs	r1, #172	@ 0xac
 800d24c:	4a12      	ldr	r2, [pc, #72]	@ (800d298 <UART_InitCallbacksToDefault+0x88>)
 800d24e:	505a      	str	r2, [r3, r1]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	21b0      	movs	r1, #176	@ 0xb0
 800d254:	4a11      	ldr	r2, [pc, #68]	@ (800d29c <UART_InitCallbacksToDefault+0x8c>)
 800d256:	505a      	str	r2, [r3, r1]
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	21b4      	movs	r1, #180	@ 0xb4
 800d25c:	4a10      	ldr	r2, [pc, #64]	@ (800d2a0 <UART_InitCallbacksToDefault+0x90>)
 800d25e:	505a      	str	r2, [r3, r1]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	21b8      	movs	r1, #184	@ 0xb8
 800d264:	4a0f      	ldr	r2, [pc, #60]	@ (800d2a4 <UART_InitCallbacksToDefault+0x94>)
 800d266:	505a      	str	r2, [r3, r1]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	21bc      	movs	r1, #188	@ 0xbc
 800d26c:	4a0e      	ldr	r2, [pc, #56]	@ (800d2a8 <UART_InitCallbacksToDefault+0x98>)
 800d26e:	505a      	str	r2, [r3, r1]
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	21c0      	movs	r1, #192	@ 0xc0
 800d274:	4a0d      	ldr	r2, [pc, #52]	@ (800d2ac <UART_InitCallbacksToDefault+0x9c>)
 800d276:	505a      	str	r2, [r3, r1]
 800d278:	46c0      	nop			@ (mov r8, r8)
 800d27a:	46bd      	mov	sp, r7
 800d27c:	b002      	add	sp, #8
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	0800d189 	.word	0x0800d189
 800d284:	0800d179 	.word	0x0800d179
 800d288:	0800d1a9 	.word	0x0800d1a9
 800d28c:	0800d199 	.word	0x0800d199
 800d290:	0800d1b9 	.word	0x0800d1b9
 800d294:	0800d1c9 	.word	0x0800d1c9
 800d298:	0800d1d9 	.word	0x0800d1d9
 800d29c:	0800d1e9 	.word	0x0800d1e9
 800d2a0:	0800e069 	.word	0x0800e069
 800d2a4:	0800e079 	.word	0x0800e079
 800d2a8:	0800e089 	.word	0x0800e089
 800d2ac:	0800d1f9 	.word	0x0800d1f9

0800d2b0 <UART_SetConfig>:
 800d2b0:	b5b0      	push	{r4, r5, r7, lr}
 800d2b2:	b090      	sub	sp, #64	@ 0x40
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6278      	str	r0, [r7, #36]	@ 0x24
 800d2b8:	231a      	movs	r3, #26
 800d2ba:	2220      	movs	r2, #32
 800d2bc:	189b      	adds	r3, r3, r2
 800d2be:	19db      	adds	r3, r3, r7
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c6:	689a      	ldr	r2, [r3, #8]
 800d2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	431a      	orrs	r2, r3
 800d2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	431a      	orrs	r2, r3
 800d2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d6:	69db      	ldr	r3, [r3, #28]
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	4ac4      	ldr	r2, [pc, #784]	@ (800d5f4 <UART_SetConfig+0x344>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	0019      	movs	r1, r3
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2ee:	430b      	orrs	r3, r1
 800d2f0:	6013      	str	r3, [r2, #0]
 800d2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	4abf      	ldr	r2, [pc, #764]	@ (800d5f8 <UART_SetConfig+0x348>)
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	0018      	movs	r0, r3
 800d2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d300:	68d9      	ldr	r1, [r3, #12]
 800d302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d304:	681a      	ldr	r2, [r3, #0]
 800d306:	0003      	movs	r3, r0
 800d308:	430b      	orrs	r3, r1
 800d30a:	6053      	str	r3, [r2, #4]
 800d30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	4ab9      	ldr	r2, [pc, #740]	@ (800d5fc <UART_SetConfig+0x34c>)
 800d318:	4293      	cmp	r3, r2
 800d31a:	d004      	beq.n	800d326 <UART_SetConfig+0x76>
 800d31c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31e:	6a1b      	ldr	r3, [r3, #32]
 800d320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d322:	4313      	orrs	r3, r2
 800d324:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	689b      	ldr	r3, [r3, #8]
 800d32c:	4ab4      	ldr	r2, [pc, #720]	@ (800d600 <UART_SetConfig+0x350>)
 800d32e:	4013      	ands	r3, r2
 800d330:	0019      	movs	r1, r3
 800d332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d338:	430b      	orrs	r3, r1
 800d33a:	6093      	str	r3, [r2, #8]
 800d33c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d342:	220f      	movs	r2, #15
 800d344:	4393      	bics	r3, r2
 800d346:	0018      	movs	r0, r3
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	0003      	movs	r3, r0
 800d352:	430b      	orrs	r3, r1
 800d354:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800d356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	4aaa      	ldr	r2, [pc, #680]	@ (800d604 <UART_SetConfig+0x354>)
 800d35c:	4293      	cmp	r3, r2
 800d35e:	d131      	bne.n	800d3c4 <UART_SetConfig+0x114>
 800d360:	4ba9      	ldr	r3, [pc, #676]	@ (800d608 <UART_SetConfig+0x358>)
 800d362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d364:	2203      	movs	r2, #3
 800d366:	4013      	ands	r3, r2
 800d368:	2b03      	cmp	r3, #3
 800d36a:	d01d      	beq.n	800d3a8 <UART_SetConfig+0xf8>
 800d36c:	d823      	bhi.n	800d3b6 <UART_SetConfig+0x106>
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d00c      	beq.n	800d38c <UART_SetConfig+0xdc>
 800d372:	d820      	bhi.n	800d3b6 <UART_SetConfig+0x106>
 800d374:	2b00      	cmp	r3, #0
 800d376:	d002      	beq.n	800d37e <UART_SetConfig+0xce>
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d00e      	beq.n	800d39a <UART_SetConfig+0xea>
 800d37c:	e01b      	b.n	800d3b6 <UART_SetConfig+0x106>
 800d37e:	231b      	movs	r3, #27
 800d380:	2220      	movs	r2, #32
 800d382:	189b      	adds	r3, r3, r2
 800d384:	19db      	adds	r3, r3, r7
 800d386:	2200      	movs	r2, #0
 800d388:	701a      	strb	r2, [r3, #0]
 800d38a:	e071      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d38c:	231b      	movs	r3, #27
 800d38e:	2220      	movs	r2, #32
 800d390:	189b      	adds	r3, r3, r2
 800d392:	19db      	adds	r3, r3, r7
 800d394:	2202      	movs	r2, #2
 800d396:	701a      	strb	r2, [r3, #0]
 800d398:	e06a      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d39a:	231b      	movs	r3, #27
 800d39c:	2220      	movs	r2, #32
 800d39e:	189b      	adds	r3, r3, r2
 800d3a0:	19db      	adds	r3, r3, r7
 800d3a2:	2204      	movs	r2, #4
 800d3a4:	701a      	strb	r2, [r3, #0]
 800d3a6:	e063      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d3a8:	231b      	movs	r3, #27
 800d3aa:	2220      	movs	r2, #32
 800d3ac:	189b      	adds	r3, r3, r2
 800d3ae:	19db      	adds	r3, r3, r7
 800d3b0:	2208      	movs	r2, #8
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	e05c      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d3b6:	231b      	movs	r3, #27
 800d3b8:	2220      	movs	r2, #32
 800d3ba:	189b      	adds	r3, r3, r2
 800d3bc:	19db      	adds	r3, r3, r7
 800d3be:	2210      	movs	r2, #16
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	e055      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a90      	ldr	r2, [pc, #576]	@ (800d60c <UART_SetConfig+0x35c>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d106      	bne.n	800d3dc <UART_SetConfig+0x12c>
 800d3ce:	231b      	movs	r3, #27
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	189b      	adds	r3, r3, r2
 800d3d4:	19db      	adds	r3, r3, r7
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	e049      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	4a86      	ldr	r2, [pc, #536]	@ (800d5fc <UART_SetConfig+0x34c>)
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d13e      	bne.n	800d464 <UART_SetConfig+0x1b4>
 800d3e6:	4b88      	ldr	r3, [pc, #544]	@ (800d608 <UART_SetConfig+0x358>)
 800d3e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d3ea:	23c0      	movs	r3, #192	@ 0xc0
 800d3ec:	011b      	lsls	r3, r3, #4
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	22c0      	movs	r2, #192	@ 0xc0
 800d3f2:	0112      	lsls	r2, r2, #4
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d027      	beq.n	800d448 <UART_SetConfig+0x198>
 800d3f8:	22c0      	movs	r2, #192	@ 0xc0
 800d3fa:	0112      	lsls	r2, r2, #4
 800d3fc:	4293      	cmp	r3, r2
 800d3fe:	d82a      	bhi.n	800d456 <UART_SetConfig+0x1a6>
 800d400:	2280      	movs	r2, #128	@ 0x80
 800d402:	0112      	lsls	r2, r2, #4
 800d404:	4293      	cmp	r3, r2
 800d406:	d011      	beq.n	800d42c <UART_SetConfig+0x17c>
 800d408:	2280      	movs	r2, #128	@ 0x80
 800d40a:	0112      	lsls	r2, r2, #4
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d822      	bhi.n	800d456 <UART_SetConfig+0x1a6>
 800d410:	2b00      	cmp	r3, #0
 800d412:	d004      	beq.n	800d41e <UART_SetConfig+0x16e>
 800d414:	2280      	movs	r2, #128	@ 0x80
 800d416:	00d2      	lsls	r2, r2, #3
 800d418:	4293      	cmp	r3, r2
 800d41a:	d00e      	beq.n	800d43a <UART_SetConfig+0x18a>
 800d41c:	e01b      	b.n	800d456 <UART_SetConfig+0x1a6>
 800d41e:	231b      	movs	r3, #27
 800d420:	2220      	movs	r2, #32
 800d422:	189b      	adds	r3, r3, r2
 800d424:	19db      	adds	r3, r3, r7
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
 800d42a:	e021      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d42c:	231b      	movs	r3, #27
 800d42e:	2220      	movs	r2, #32
 800d430:	189b      	adds	r3, r3, r2
 800d432:	19db      	adds	r3, r3, r7
 800d434:	2202      	movs	r2, #2
 800d436:	701a      	strb	r2, [r3, #0]
 800d438:	e01a      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d43a:	231b      	movs	r3, #27
 800d43c:	2220      	movs	r2, #32
 800d43e:	189b      	adds	r3, r3, r2
 800d440:	19db      	adds	r3, r3, r7
 800d442:	2204      	movs	r2, #4
 800d444:	701a      	strb	r2, [r3, #0]
 800d446:	e013      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d448:	231b      	movs	r3, #27
 800d44a:	2220      	movs	r2, #32
 800d44c:	189b      	adds	r3, r3, r2
 800d44e:	19db      	adds	r3, r3, r7
 800d450:	2208      	movs	r2, #8
 800d452:	701a      	strb	r2, [r3, #0]
 800d454:	e00c      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d456:	231b      	movs	r3, #27
 800d458:	2220      	movs	r2, #32
 800d45a:	189b      	adds	r3, r3, r2
 800d45c:	19db      	adds	r3, r3, r7
 800d45e:	2210      	movs	r2, #16
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e005      	b.n	800d470 <UART_SetConfig+0x1c0>
 800d464:	231b      	movs	r3, #27
 800d466:	2220      	movs	r2, #32
 800d468:	189b      	adds	r3, r3, r2
 800d46a:	19db      	adds	r3, r3, r7
 800d46c:	2210      	movs	r2, #16
 800d46e:	701a      	strb	r2, [r3, #0]
 800d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a61      	ldr	r2, [pc, #388]	@ (800d5fc <UART_SetConfig+0x34c>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d000      	beq.n	800d47c <UART_SetConfig+0x1cc>
 800d47a:	e092      	b.n	800d5a2 <UART_SetConfig+0x2f2>
 800d47c:	231b      	movs	r3, #27
 800d47e:	2220      	movs	r2, #32
 800d480:	189b      	adds	r3, r3, r2
 800d482:	19db      	adds	r3, r3, r7
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	2b08      	cmp	r3, #8
 800d488:	d015      	beq.n	800d4b6 <UART_SetConfig+0x206>
 800d48a:	dc18      	bgt.n	800d4be <UART_SetConfig+0x20e>
 800d48c:	2b04      	cmp	r3, #4
 800d48e:	d00d      	beq.n	800d4ac <UART_SetConfig+0x1fc>
 800d490:	dc15      	bgt.n	800d4be <UART_SetConfig+0x20e>
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <UART_SetConfig+0x1ec>
 800d496:	2b02      	cmp	r3, #2
 800d498:	d005      	beq.n	800d4a6 <UART_SetConfig+0x1f6>
 800d49a:	e010      	b.n	800d4be <UART_SetConfig+0x20e>
 800d49c:	f7fc fdd6 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 800d4a0:	0003      	movs	r3, r0
 800d4a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4a4:	e014      	b.n	800d4d0 <UART_SetConfig+0x220>
 800d4a6:	4b5a      	ldr	r3, [pc, #360]	@ (800d610 <UART_SetConfig+0x360>)
 800d4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4aa:	e011      	b.n	800d4d0 <UART_SetConfig+0x220>
 800d4ac:	f7fc fd42 	bl	8009f34 <HAL_RCC_GetSysClockFreq>
 800d4b0:	0003      	movs	r3, r0
 800d4b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4b4:	e00c      	b.n	800d4d0 <UART_SetConfig+0x220>
 800d4b6:	2380      	movs	r3, #128	@ 0x80
 800d4b8:	021b      	lsls	r3, r3, #8
 800d4ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4bc:	e008      	b.n	800d4d0 <UART_SetConfig+0x220>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d4c2:	231a      	movs	r3, #26
 800d4c4:	2220      	movs	r2, #32
 800d4c6:	189b      	adds	r3, r3, r2
 800d4c8:	19db      	adds	r3, r3, r7
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	46c0      	nop			@ (mov r8, r8)
 800d4d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d100      	bne.n	800d4d8 <UART_SetConfig+0x228>
 800d4d6:	e147      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d4dc:	4b4d      	ldr	r3, [pc, #308]	@ (800d614 <UART_SetConfig+0x364>)
 800d4de:	0052      	lsls	r2, r2, #1
 800d4e0:	5ad3      	ldrh	r3, [r2, r3]
 800d4e2:	0019      	movs	r1, r3
 800d4e4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d4e6:	f7f2 fe0f 	bl	8000108 <__udivsi3>
 800d4ea:	0003      	movs	r3, r0
 800d4ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4f0:	685a      	ldr	r2, [r3, #4]
 800d4f2:	0013      	movs	r3, r2
 800d4f4:	005b      	lsls	r3, r3, #1
 800d4f6:	189b      	adds	r3, r3, r2
 800d4f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d305      	bcc.n	800d50a <UART_SetConfig+0x25a>
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	031b      	lsls	r3, r3, #12
 800d504:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d506:	429a      	cmp	r2, r3
 800d508:	d906      	bls.n	800d518 <UART_SetConfig+0x268>
 800d50a:	231a      	movs	r3, #26
 800d50c:	2220      	movs	r2, #32
 800d50e:	189b      	adds	r3, r3, r2
 800d510:	19db      	adds	r3, r3, r7
 800d512:	2201      	movs	r2, #1
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e127      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d51a:	61bb      	str	r3, [r7, #24]
 800d51c:	2300      	movs	r3, #0
 800d51e:	61fb      	str	r3, [r7, #28]
 800d520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d524:	4b3b      	ldr	r3, [pc, #236]	@ (800d614 <UART_SetConfig+0x364>)
 800d526:	0052      	lsls	r2, r2, #1
 800d528:	5ad3      	ldrh	r3, [r2, r3]
 800d52a:	613b      	str	r3, [r7, #16]
 800d52c:	2300      	movs	r3, #0
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	69b8      	ldr	r0, [r7, #24]
 800d536:	69f9      	ldr	r1, [r7, #28]
 800d538:	f7f2 fe72 	bl	8000220 <__aeabi_uldivmod>
 800d53c:	0002      	movs	r2, r0
 800d53e:	000b      	movs	r3, r1
 800d540:	0e11      	lsrs	r1, r2, #24
 800d542:	021d      	lsls	r5, r3, #8
 800d544:	430d      	orrs	r5, r1
 800d546:	0214      	lsls	r4, r2, #8
 800d548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	085b      	lsrs	r3, r3, #1
 800d54e:	60bb      	str	r3, [r7, #8]
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]
 800d554:	68b8      	ldr	r0, [r7, #8]
 800d556:	68f9      	ldr	r1, [r7, #12]
 800d558:	1900      	adds	r0, r0, r4
 800d55a:	4169      	adcs	r1, r5
 800d55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	603b      	str	r3, [r7, #0]
 800d562:	2300      	movs	r3, #0
 800d564:	607b      	str	r3, [r7, #4]
 800d566:	683a      	ldr	r2, [r7, #0]
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f7f2 fe59 	bl	8000220 <__aeabi_uldivmod>
 800d56e:	0002      	movs	r2, r0
 800d570:	000b      	movs	r3, r1
 800d572:	0013      	movs	r3, r2
 800d574:	633b      	str	r3, [r7, #48]	@ 0x30
 800d576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d578:	23c0      	movs	r3, #192	@ 0xc0
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d309      	bcc.n	800d594 <UART_SetConfig+0x2e4>
 800d580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d582:	2380      	movs	r3, #128	@ 0x80
 800d584:	035b      	lsls	r3, r3, #13
 800d586:	429a      	cmp	r2, r3
 800d588:	d204      	bcs.n	800d594 <UART_SetConfig+0x2e4>
 800d58a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d590:	60da      	str	r2, [r3, #12]
 800d592:	e0e9      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d594:	231a      	movs	r3, #26
 800d596:	2220      	movs	r2, #32
 800d598:	189b      	adds	r3, r3, r2
 800d59a:	19db      	adds	r3, r3, r7
 800d59c:	2201      	movs	r2, #1
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	e0e2      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5a4:	69da      	ldr	r2, [r3, #28]
 800d5a6:	2380      	movs	r3, #128	@ 0x80
 800d5a8:	021b      	lsls	r3, r3, #8
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d000      	beq.n	800d5b0 <UART_SetConfig+0x300>
 800d5ae:	e083      	b.n	800d6b8 <UART_SetConfig+0x408>
 800d5b0:	231b      	movs	r3, #27
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	189b      	adds	r3, r3, r2
 800d5b6:	19db      	adds	r3, r3, r7
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	2b08      	cmp	r3, #8
 800d5bc:	d015      	beq.n	800d5ea <UART_SetConfig+0x33a>
 800d5be:	dc2b      	bgt.n	800d618 <UART_SetConfig+0x368>
 800d5c0:	2b04      	cmp	r3, #4
 800d5c2:	d00d      	beq.n	800d5e0 <UART_SetConfig+0x330>
 800d5c4:	dc28      	bgt.n	800d618 <UART_SetConfig+0x368>
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <UART_SetConfig+0x320>
 800d5ca:	2b02      	cmp	r3, #2
 800d5cc:	d005      	beq.n	800d5da <UART_SetConfig+0x32a>
 800d5ce:	e023      	b.n	800d618 <UART_SetConfig+0x368>
 800d5d0:	f7fc fd3c 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 800d5d4:	0003      	movs	r3, r0
 800d5d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5d8:	e027      	b.n	800d62a <UART_SetConfig+0x37a>
 800d5da:	4b0d      	ldr	r3, [pc, #52]	@ (800d610 <UART_SetConfig+0x360>)
 800d5dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5de:	e024      	b.n	800d62a <UART_SetConfig+0x37a>
 800d5e0:	f7fc fca8 	bl	8009f34 <HAL_RCC_GetSysClockFreq>
 800d5e4:	0003      	movs	r3, r0
 800d5e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5e8:	e01f      	b.n	800d62a <UART_SetConfig+0x37a>
 800d5ea:	2380      	movs	r3, #128	@ 0x80
 800d5ec:	021b      	lsls	r3, r3, #8
 800d5ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5f0:	e01b      	b.n	800d62a <UART_SetConfig+0x37a>
 800d5f2:	46c0      	nop			@ (mov r8, r8)
 800d5f4:	cfff69f3 	.word	0xcfff69f3
 800d5f8:	ffffcfff 	.word	0xffffcfff
 800d5fc:	40008000 	.word	0x40008000
 800d600:	11fff4ff 	.word	0x11fff4ff
 800d604:	40013800 	.word	0x40013800
 800d608:	40021000 	.word	0x40021000
 800d60c:	40004400 	.word	0x40004400
 800d610:	00f42400 	.word	0x00f42400
 800d614:	0800eb64 	.word	0x0800eb64
 800d618:	2300      	movs	r3, #0
 800d61a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d61c:	231a      	movs	r3, #26
 800d61e:	2220      	movs	r2, #32
 800d620:	189b      	adds	r3, r3, r2
 800d622:	19db      	adds	r3, r3, r7
 800d624:	2201      	movs	r2, #1
 800d626:	701a      	strb	r2, [r3, #0]
 800d628:	46c0      	nop			@ (mov r8, r8)
 800d62a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d100      	bne.n	800d632 <UART_SetConfig+0x382>
 800d630:	e09a      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d636:	4b58      	ldr	r3, [pc, #352]	@ (800d798 <UART_SetConfig+0x4e8>)
 800d638:	0052      	lsls	r2, r2, #1
 800d63a:	5ad3      	ldrh	r3, [r2, r3]
 800d63c:	0019      	movs	r1, r3
 800d63e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d640:	f7f2 fd62 	bl	8000108 <__udivsi3>
 800d644:	0003      	movs	r3, r0
 800d646:	005a      	lsls	r2, r3, #1
 800d648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	085b      	lsrs	r3, r3, #1
 800d64e:	18d2      	adds	r2, r2, r3
 800d650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	0019      	movs	r1, r3
 800d656:	0010      	movs	r0, r2
 800d658:	f7f2 fd56 	bl	8000108 <__udivsi3>
 800d65c:	0003      	movs	r3, r0
 800d65e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d662:	2b0f      	cmp	r3, #15
 800d664:	d921      	bls.n	800d6aa <UART_SetConfig+0x3fa>
 800d666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d668:	2380      	movs	r3, #128	@ 0x80
 800d66a:	025b      	lsls	r3, r3, #9
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d21c      	bcs.n	800d6aa <UART_SetConfig+0x3fa>
 800d670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d672:	b29a      	uxth	r2, r3
 800d674:	200e      	movs	r0, #14
 800d676:	2420      	movs	r4, #32
 800d678:	1903      	adds	r3, r0, r4
 800d67a:	19db      	adds	r3, r3, r7
 800d67c:	210f      	movs	r1, #15
 800d67e:	438a      	bics	r2, r1
 800d680:	801a      	strh	r2, [r3, #0]
 800d682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d684:	085b      	lsrs	r3, r3, #1
 800d686:	b29b      	uxth	r3, r3
 800d688:	2207      	movs	r2, #7
 800d68a:	4013      	ands	r3, r2
 800d68c:	b299      	uxth	r1, r3
 800d68e:	1903      	adds	r3, r0, r4
 800d690:	19db      	adds	r3, r3, r7
 800d692:	1902      	adds	r2, r0, r4
 800d694:	19d2      	adds	r2, r2, r7
 800d696:	8812      	ldrh	r2, [r2, #0]
 800d698:	430a      	orrs	r2, r1
 800d69a:	801a      	strh	r2, [r3, #0]
 800d69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	1902      	adds	r2, r0, r4
 800d6a2:	19d2      	adds	r2, r2, r7
 800d6a4:	8812      	ldrh	r2, [r2, #0]
 800d6a6:	60da      	str	r2, [r3, #12]
 800d6a8:	e05e      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d6aa:	231a      	movs	r3, #26
 800d6ac:	2220      	movs	r2, #32
 800d6ae:	189b      	adds	r3, r3, r2
 800d6b0:	19db      	adds	r3, r3, r7
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	701a      	strb	r2, [r3, #0]
 800d6b6:	e057      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d6b8:	231b      	movs	r3, #27
 800d6ba:	2220      	movs	r2, #32
 800d6bc:	189b      	adds	r3, r3, r2
 800d6be:	19db      	adds	r3, r3, r7
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	2b08      	cmp	r3, #8
 800d6c4:	d015      	beq.n	800d6f2 <UART_SetConfig+0x442>
 800d6c6:	dc18      	bgt.n	800d6fa <UART_SetConfig+0x44a>
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	d00d      	beq.n	800d6e8 <UART_SetConfig+0x438>
 800d6cc:	dc15      	bgt.n	800d6fa <UART_SetConfig+0x44a>
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <UART_SetConfig+0x428>
 800d6d2:	2b02      	cmp	r3, #2
 800d6d4:	d005      	beq.n	800d6e2 <UART_SetConfig+0x432>
 800d6d6:	e010      	b.n	800d6fa <UART_SetConfig+0x44a>
 800d6d8:	f7fc fcb8 	bl	800a04c <HAL_RCC_GetPCLK1Freq>
 800d6dc:	0003      	movs	r3, r0
 800d6de:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6e0:	e014      	b.n	800d70c <UART_SetConfig+0x45c>
 800d6e2:	4b2e      	ldr	r3, [pc, #184]	@ (800d79c <UART_SetConfig+0x4ec>)
 800d6e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6e6:	e011      	b.n	800d70c <UART_SetConfig+0x45c>
 800d6e8:	f7fc fc24 	bl	8009f34 <HAL_RCC_GetSysClockFreq>
 800d6ec:	0003      	movs	r3, r0
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f0:	e00c      	b.n	800d70c <UART_SetConfig+0x45c>
 800d6f2:	2380      	movs	r3, #128	@ 0x80
 800d6f4:	021b      	lsls	r3, r3, #8
 800d6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f8:	e008      	b.n	800d70c <UART_SetConfig+0x45c>
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6fe:	231a      	movs	r3, #26
 800d700:	2220      	movs	r2, #32
 800d702:	189b      	adds	r3, r3, r2
 800d704:	19db      	adds	r3, r3, r7
 800d706:	2201      	movs	r2, #1
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	46c0      	nop			@ (mov r8, r8)
 800d70c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d02a      	beq.n	800d768 <UART_SetConfig+0x4b8>
 800d712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d714:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d716:	4b20      	ldr	r3, [pc, #128]	@ (800d798 <UART_SetConfig+0x4e8>)
 800d718:	0052      	lsls	r2, r2, #1
 800d71a:	5ad3      	ldrh	r3, [r2, r3]
 800d71c:	0019      	movs	r1, r3
 800d71e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d720:	f7f2 fcf2 	bl	8000108 <__udivsi3>
 800d724:	0003      	movs	r3, r0
 800d726:	001a      	movs	r2, r3
 800d728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	085b      	lsrs	r3, r3, #1
 800d72e:	18d2      	adds	r2, r2, r3
 800d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	0019      	movs	r1, r3
 800d736:	0010      	movs	r0, r2
 800d738:	f7f2 fce6 	bl	8000108 <__udivsi3>
 800d73c:	0003      	movs	r3, r0
 800d73e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d742:	2b0f      	cmp	r3, #15
 800d744:	d90a      	bls.n	800d75c <UART_SetConfig+0x4ac>
 800d746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d748:	2380      	movs	r3, #128	@ 0x80
 800d74a:	025b      	lsls	r3, r3, #9
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d205      	bcs.n	800d75c <UART_SetConfig+0x4ac>
 800d750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d752:	b29a      	uxth	r2, r3
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	60da      	str	r2, [r3, #12]
 800d75a:	e005      	b.n	800d768 <UART_SetConfig+0x4b8>
 800d75c:	231a      	movs	r3, #26
 800d75e:	2220      	movs	r2, #32
 800d760:	189b      	adds	r3, r3, r2
 800d762:	19db      	adds	r3, r3, r7
 800d764:	2201      	movs	r2, #1
 800d766:	701a      	strb	r2, [r3, #0]
 800d768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d76a:	226a      	movs	r2, #106	@ 0x6a
 800d76c:	2101      	movs	r1, #1
 800d76e:	5299      	strh	r1, [r3, r2]
 800d770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d772:	2268      	movs	r2, #104	@ 0x68
 800d774:	2101      	movs	r1, #1
 800d776:	5299      	strh	r1, [r3, r2]
 800d778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d77a:	2200      	movs	r2, #0
 800d77c:	675a      	str	r2, [r3, #116]	@ 0x74
 800d77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d780:	2200      	movs	r2, #0
 800d782:	679a      	str	r2, [r3, #120]	@ 0x78
 800d784:	231a      	movs	r3, #26
 800d786:	2220      	movs	r2, #32
 800d788:	189b      	adds	r3, r3, r2
 800d78a:	19db      	adds	r3, r3, r7
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	0018      	movs	r0, r3
 800d790:	46bd      	mov	sp, r7
 800d792:	b010      	add	sp, #64	@ 0x40
 800d794:	bdb0      	pop	{r4, r5, r7, pc}
 800d796:	46c0      	nop			@ (mov r8, r8)
 800d798:	0800eb64 	.word	0x0800eb64
 800d79c:	00f42400 	.word	0x00f42400

0800d7a0 <UART_AdvFeatureConfig>:
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ac:	2208      	movs	r2, #8
 800d7ae:	4013      	ands	r3, r2
 800d7b0:	d00b      	beq.n	800d7ca <UART_AdvFeatureConfig+0x2a>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	4a4a      	ldr	r2, [pc, #296]	@ (800d8e4 <UART_AdvFeatureConfig+0x144>)
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	0019      	movs	r1, r3
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	430a      	orrs	r2, r1
 800d7c8:	605a      	str	r2, [r3, #4]
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	d00b      	beq.n	800d7ec <UART_AdvFeatureConfig+0x4c>
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	4a43      	ldr	r2, [pc, #268]	@ (800d8e8 <UART_AdvFeatureConfig+0x148>)
 800d7dc:	4013      	ands	r3, r2
 800d7de:	0019      	movs	r1, r3
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	430a      	orrs	r2, r1
 800d7ea:	605a      	str	r2, [r3, #4]
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	d00b      	beq.n	800d80e <UART_AdvFeatureConfig+0x6e>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	685b      	ldr	r3, [r3, #4]
 800d7fc:	4a3b      	ldr	r2, [pc, #236]	@ (800d8ec <UART_AdvFeatureConfig+0x14c>)
 800d7fe:	4013      	ands	r3, r2
 800d800:	0019      	movs	r1, r3
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	605a      	str	r2, [r3, #4]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d812:	2204      	movs	r2, #4
 800d814:	4013      	ands	r3, r2
 800d816:	d00b      	beq.n	800d830 <UART_AdvFeatureConfig+0x90>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	685b      	ldr	r3, [r3, #4]
 800d81e:	4a34      	ldr	r2, [pc, #208]	@ (800d8f0 <UART_AdvFeatureConfig+0x150>)
 800d820:	4013      	ands	r3, r2
 800d822:	0019      	movs	r1, r3
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	430a      	orrs	r2, r1
 800d82e:	605a      	str	r2, [r3, #4]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d834:	2210      	movs	r2, #16
 800d836:	4013      	ands	r3, r2
 800d838:	d00b      	beq.n	800d852 <UART_AdvFeatureConfig+0xb2>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	4a2c      	ldr	r2, [pc, #176]	@ (800d8f4 <UART_AdvFeatureConfig+0x154>)
 800d842:	4013      	ands	r3, r2
 800d844:	0019      	movs	r1, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	430a      	orrs	r2, r1
 800d850:	609a      	str	r2, [r3, #8]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d856:	2220      	movs	r2, #32
 800d858:	4013      	ands	r3, r2
 800d85a:	d00b      	beq.n	800d874 <UART_AdvFeatureConfig+0xd4>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	689b      	ldr	r3, [r3, #8]
 800d862:	4a25      	ldr	r2, [pc, #148]	@ (800d8f8 <UART_AdvFeatureConfig+0x158>)
 800d864:	4013      	ands	r3, r2
 800d866:	0019      	movs	r1, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	430a      	orrs	r2, r1
 800d872:	609a      	str	r2, [r3, #8]
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d878:	2240      	movs	r2, #64	@ 0x40
 800d87a:	4013      	ands	r3, r2
 800d87c:	d01d      	beq.n	800d8ba <UART_AdvFeatureConfig+0x11a>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	4a1d      	ldr	r2, [pc, #116]	@ (800d8fc <UART_AdvFeatureConfig+0x15c>)
 800d886:	4013      	ands	r3, r2
 800d888:	0019      	movs	r1, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	430a      	orrs	r2, r1
 800d894:	605a      	str	r2, [r3, #4]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d89a:	2380      	movs	r3, #128	@ 0x80
 800d89c:	035b      	lsls	r3, r3, #13
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d10b      	bne.n	800d8ba <UART_AdvFeatureConfig+0x11a>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	4a15      	ldr	r2, [pc, #84]	@ (800d900 <UART_AdvFeatureConfig+0x160>)
 800d8aa:	4013      	ands	r3, r2
 800d8ac:	0019      	movs	r1, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	605a      	str	r2, [r3, #4]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8be:	2280      	movs	r2, #128	@ 0x80
 800d8c0:	4013      	ands	r3, r2
 800d8c2:	d00b      	beq.n	800d8dc <UART_AdvFeatureConfig+0x13c>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	4a0e      	ldr	r2, [pc, #56]	@ (800d904 <UART_AdvFeatureConfig+0x164>)
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	0019      	movs	r1, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	430a      	orrs	r2, r1
 800d8da:	605a      	str	r2, [r3, #4]
 800d8dc:	46c0      	nop			@ (mov r8, r8)
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	b002      	add	sp, #8
 800d8e2:	bd80      	pop	{r7, pc}
 800d8e4:	ffff7fff 	.word	0xffff7fff
 800d8e8:	fffdffff 	.word	0xfffdffff
 800d8ec:	fffeffff 	.word	0xfffeffff
 800d8f0:	fffbffff 	.word	0xfffbffff
 800d8f4:	ffffefff 	.word	0xffffefff
 800d8f8:	ffffdfff 	.word	0xffffdfff
 800d8fc:	ffefffff 	.word	0xffefffff
 800d900:	ff9fffff 	.word	0xff9fffff
 800d904:	fff7ffff 	.word	0xfff7ffff

0800d908 <UART_CheckIdleState>:
 800d908:	b580      	push	{r7, lr}
 800d90a:	b092      	sub	sp, #72	@ 0x48
 800d90c:	af02      	add	r7, sp, #8
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	2290      	movs	r2, #144	@ 0x90
 800d914:	2100      	movs	r1, #0
 800d916:	5099      	str	r1, [r3, r2]
 800d918:	f7f9 f8c0 	bl	8006a9c <HAL_GetTick>
 800d91c:	0003      	movs	r3, r0
 800d91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2208      	movs	r2, #8
 800d928:	4013      	ands	r3, r2
 800d92a:	2b08      	cmp	r3, #8
 800d92c:	d12d      	bne.n	800d98a <UART_CheckIdleState+0x82>
 800d92e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d930:	2280      	movs	r2, #128	@ 0x80
 800d932:	0391      	lsls	r1, r2, #14
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	4a47      	ldr	r2, [pc, #284]	@ (800da54 <UART_CheckIdleState+0x14c>)
 800d938:	9200      	str	r2, [sp, #0]
 800d93a:	2200      	movs	r2, #0
 800d93c:	f000 f88e 	bl	800da5c <UART_WaitOnFlagUntilTimeout>
 800d940:	1e03      	subs	r3, r0, #0
 800d942:	d022      	beq.n	800d98a <UART_CheckIdleState+0x82>
 800d944:	f3ef 8310 	mrs	r3, PRIMASK
 800d948:	627b      	str	r3, [r7, #36]	@ 0x24
 800d94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d94e:	2301      	movs	r3, #1
 800d950:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d954:	f383 8810 	msr	PRIMASK, r3
 800d958:	46c0      	nop			@ (mov r8, r8)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	681a      	ldr	r2, [r3, #0]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	2180      	movs	r1, #128	@ 0x80
 800d966:	438a      	bics	r2, r1
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d970:	f383 8810 	msr	PRIMASK, r3
 800d974:	46c0      	nop			@ (mov r8, r8)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2288      	movs	r2, #136	@ 0x88
 800d97a:	2120      	movs	r1, #32
 800d97c:	5099      	str	r1, [r3, r2]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2284      	movs	r2, #132	@ 0x84
 800d982:	2100      	movs	r1, #0
 800d984:	5499      	strb	r1, [r3, r2]
 800d986:	2303      	movs	r3, #3
 800d988:	e060      	b.n	800da4c <UART_CheckIdleState+0x144>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2204      	movs	r2, #4
 800d992:	4013      	ands	r3, r2
 800d994:	2b04      	cmp	r3, #4
 800d996:	d146      	bne.n	800da26 <UART_CheckIdleState+0x11e>
 800d998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d99a:	2280      	movs	r2, #128	@ 0x80
 800d99c:	03d1      	lsls	r1, r2, #15
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	4a2c      	ldr	r2, [pc, #176]	@ (800da54 <UART_CheckIdleState+0x14c>)
 800d9a2:	9200      	str	r2, [sp, #0]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	f000 f859 	bl	800da5c <UART_WaitOnFlagUntilTimeout>
 800d9aa:	1e03      	subs	r3, r0, #0
 800d9ac:	d03b      	beq.n	800da26 <UART_CheckIdleState+0x11e>
 800d9ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	613b      	str	r3, [r7, #16]
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	f383 8810 	msr	PRIMASK, r3
 800d9c2:	46c0      	nop			@ (mov r8, r8)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	681a      	ldr	r2, [r3, #0]
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4922      	ldr	r1, [pc, #136]	@ (800da58 <UART_CheckIdleState+0x150>)
 800d9d0:	400a      	ands	r2, r1
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d6:	617b      	str	r3, [r7, #20]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f383 8810 	msr	PRIMASK, r3
 800d9de:	46c0      	nop			@ (mov r8, r8)
 800d9e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d9e4:	61bb      	str	r3, [r7, #24]
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	69fb      	ldr	r3, [r7, #28]
 800d9f0:	f383 8810 	msr	PRIMASK, r3
 800d9f4:	46c0      	nop			@ (mov r8, r8)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2101      	movs	r1, #1
 800da02:	438a      	bics	r2, r1
 800da04:	609a      	str	r2, [r3, #8]
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	623b      	str	r3, [r7, #32]
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	f383 8810 	msr	PRIMASK, r3
 800da10:	46c0      	nop			@ (mov r8, r8)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	228c      	movs	r2, #140	@ 0x8c
 800da16:	2120      	movs	r1, #32
 800da18:	5099      	str	r1, [r3, r2]
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2284      	movs	r2, #132	@ 0x84
 800da1e:	2100      	movs	r1, #0
 800da20:	5499      	strb	r1, [r3, r2]
 800da22:	2303      	movs	r3, #3
 800da24:	e012      	b.n	800da4c <UART_CheckIdleState+0x144>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2288      	movs	r2, #136	@ 0x88
 800da2a:	2120      	movs	r1, #32
 800da2c:	5099      	str	r1, [r3, r2]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	228c      	movs	r2, #140	@ 0x8c
 800da32:	2120      	movs	r1, #32
 800da34:	5099      	str	r1, [r3, r2]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	671a      	str	r2, [r3, #112]	@ 0x70
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2284      	movs	r2, #132	@ 0x84
 800da46:	2100      	movs	r1, #0
 800da48:	5499      	strb	r1, [r3, r2]
 800da4a:	2300      	movs	r3, #0
 800da4c:	0018      	movs	r0, r3
 800da4e:	46bd      	mov	sp, r7
 800da50:	b010      	add	sp, #64	@ 0x40
 800da52:	bd80      	pop	{r7, pc}
 800da54:	01ffffff 	.word	0x01ffffff
 800da58:	fffffedf 	.word	0xfffffedf

0800da5c <UART_WaitOnFlagUntilTimeout>:
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	603b      	str	r3, [r7, #0]
 800da68:	1dfb      	adds	r3, r7, #7
 800da6a:	701a      	strb	r2, [r3, #0]
 800da6c:	e051      	b.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800da6e:	69bb      	ldr	r3, [r7, #24]
 800da70:	3301      	adds	r3, #1
 800da72:	d04e      	beq.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800da74:	f7f9 f812 	bl	8006a9c <HAL_GetTick>
 800da78:	0002      	movs	r2, r0
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	69ba      	ldr	r2, [r7, #24]
 800da80:	429a      	cmp	r2, r3
 800da82:	d302      	bcc.n	800da8a <UART_WaitOnFlagUntilTimeout+0x2e>
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d101      	bne.n	800da8e <UART_WaitOnFlagUntilTimeout+0x32>
 800da8a:	2303      	movs	r3, #3
 800da8c:	e051      	b.n	800db32 <UART_WaitOnFlagUntilTimeout+0xd6>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	2204      	movs	r2, #4
 800da96:	4013      	ands	r3, r2
 800da98:	d03b      	beq.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	2b80      	cmp	r3, #128	@ 0x80
 800da9e:	d038      	beq.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b40      	cmp	r3, #64	@ 0x40
 800daa4:	d035      	beq.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	69db      	ldr	r3, [r3, #28]
 800daac:	2208      	movs	r2, #8
 800daae:	4013      	ands	r3, r2
 800dab0:	2b08      	cmp	r3, #8
 800dab2:	d111      	bne.n	800dad8 <UART_WaitOnFlagUntilTimeout+0x7c>
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2208      	movs	r2, #8
 800daba:	621a      	str	r2, [r3, #32]
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	0018      	movs	r0, r3
 800dac0:	f000 f922 	bl	800dd08 <UART_EndRxTransfer>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2290      	movs	r2, #144	@ 0x90
 800dac8:	2108      	movs	r1, #8
 800daca:	5099      	str	r1, [r3, r2]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2284      	movs	r2, #132	@ 0x84
 800dad0:	2100      	movs	r1, #0
 800dad2:	5499      	strb	r1, [r3, r2]
 800dad4:	2301      	movs	r3, #1
 800dad6:	e02c      	b.n	800db32 <UART_WaitOnFlagUntilTimeout+0xd6>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	69da      	ldr	r2, [r3, #28]
 800dade:	2380      	movs	r3, #128	@ 0x80
 800dae0:	011b      	lsls	r3, r3, #4
 800dae2:	401a      	ands	r2, r3
 800dae4:	2380      	movs	r3, #128	@ 0x80
 800dae6:	011b      	lsls	r3, r3, #4
 800dae8:	429a      	cmp	r2, r3
 800daea:	d112      	bne.n	800db12 <UART_WaitOnFlagUntilTimeout+0xb6>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	2280      	movs	r2, #128	@ 0x80
 800daf2:	0112      	lsls	r2, r2, #4
 800daf4:	621a      	str	r2, [r3, #32]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	0018      	movs	r0, r3
 800dafa:	f000 f905 	bl	800dd08 <UART_EndRxTransfer>
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	2290      	movs	r2, #144	@ 0x90
 800db02:	2120      	movs	r1, #32
 800db04:	5099      	str	r1, [r3, r2]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	2284      	movs	r2, #132	@ 0x84
 800db0a:	2100      	movs	r1, #0
 800db0c:	5499      	strb	r1, [r3, r2]
 800db0e:	2303      	movs	r3, #3
 800db10:	e00f      	b.n	800db32 <UART_WaitOnFlagUntilTimeout+0xd6>
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	69db      	ldr	r3, [r3, #28]
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	4013      	ands	r3, r2
 800db1c:	68ba      	ldr	r2, [r7, #8]
 800db1e:	1ad3      	subs	r3, r2, r3
 800db20:	425a      	negs	r2, r3
 800db22:	4153      	adcs	r3, r2
 800db24:	b2db      	uxtb	r3, r3
 800db26:	001a      	movs	r2, r3
 800db28:	1dfb      	adds	r3, r7, #7
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	429a      	cmp	r2, r3
 800db2e:	d09e      	beq.n	800da6e <UART_WaitOnFlagUntilTimeout+0x12>
 800db30:	2300      	movs	r3, #0
 800db32:	0018      	movs	r0, r3
 800db34:	46bd      	mov	sp, r7
 800db36:	b004      	add	sp, #16
 800db38:	bd80      	pop	{r7, pc}
	...

0800db3c <UART_Start_Receive_DMA>:
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b090      	sub	sp, #64	@ 0x40
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	1dbb      	adds	r3, r7, #6
 800db48:	801a      	strh	r2, [r3, #0]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	659a      	str	r2, [r3, #88]	@ 0x58
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	1dba      	adds	r2, r7, #6
 800db54:	215c      	movs	r1, #92	@ 0x5c
 800db56:	8812      	ldrh	r2, [r2, #0]
 800db58:	525a      	strh	r2, [r3, r1]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2290      	movs	r2, #144	@ 0x90
 800db5e:	2100      	movs	r1, #0
 800db60:	5099      	str	r1, [r3, r2]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	228c      	movs	r2, #140	@ 0x8c
 800db66:	2122      	movs	r1, #34	@ 0x22
 800db68:	5099      	str	r1, [r3, r2]
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2280      	movs	r2, #128	@ 0x80
 800db6e:	589b      	ldr	r3, [r3, r2]
 800db70:	2b00      	cmp	r3, #0
 800db72:	d02d      	beq.n	800dbd0 <UART_Start_Receive_DMA+0x94>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2280      	movs	r2, #128	@ 0x80
 800db78:	589b      	ldr	r3, [r3, r2]
 800db7a:	4a40      	ldr	r2, [pc, #256]	@ (800dc7c <UART_Start_Receive_DMA+0x140>)
 800db7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	2280      	movs	r2, #128	@ 0x80
 800db82:	589b      	ldr	r3, [r3, r2]
 800db84:	4a3e      	ldr	r2, [pc, #248]	@ (800dc80 <UART_Start_Receive_DMA+0x144>)
 800db86:	631a      	str	r2, [r3, #48]	@ 0x30
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2280      	movs	r2, #128	@ 0x80
 800db8c:	589b      	ldr	r3, [r3, r2]
 800db8e:	4a3d      	ldr	r2, [pc, #244]	@ (800dc84 <UART_Start_Receive_DMA+0x148>)
 800db90:	635a      	str	r2, [r3, #52]	@ 0x34
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2280      	movs	r2, #128	@ 0x80
 800db96:	589b      	ldr	r3, [r3, r2]
 800db98:	2200      	movs	r2, #0
 800db9a:	639a      	str	r2, [r3, #56]	@ 0x38
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	2280      	movs	r2, #128	@ 0x80
 800dba0:	5898      	ldr	r0, [r3, r2]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	3324      	adds	r3, #36	@ 0x24
 800dba8:	0019      	movs	r1, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbae:	001a      	movs	r2, r3
 800dbb0:	1dbb      	adds	r3, r7, #6
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	f7fa fb40 	bl	8008238 <HAL_DMA_Start_IT>
 800dbb8:	1e03      	subs	r3, r0, #0
 800dbba:	d009      	beq.n	800dbd0 <UART_Start_Receive_DMA+0x94>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2290      	movs	r2, #144	@ 0x90
 800dbc0:	2110      	movs	r1, #16
 800dbc2:	5099      	str	r1, [r3, r2]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	228c      	movs	r2, #140	@ 0x8c
 800dbc8:	2120      	movs	r1, #32
 800dbca:	5099      	str	r1, [r3, r2]
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e050      	b.n	800dc72 <UART_Start_Receive_DMA+0x136>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d019      	beq.n	800dc0c <UART_Start_Receive_DMA+0xd0>
 800dbd8:	f3ef 8310 	mrs	r3, PRIMASK
 800dbdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dbde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe8:	f383 8810 	msr	PRIMASK, r3
 800dbec:	46c0      	nop			@ (mov r8, r8)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2180      	movs	r1, #128	@ 0x80
 800dbfa:	0049      	lsls	r1, r1, #1
 800dbfc:	430a      	orrs	r2, r1
 800dbfe:	601a      	str	r2, [r3, #0]
 800dc00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc02:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc06:	f383 8810 	msr	PRIMASK, r3
 800dc0a:	46c0      	nop			@ (mov r8, r8)
 800dc0c:	f3ef 8310 	mrs	r3, PRIMASK
 800dc10:	613b      	str	r3, [r7, #16]
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc16:	2301      	movs	r3, #1
 800dc18:	617b      	str	r3, [r7, #20]
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f383 8810 	msr	PRIMASK, r3
 800dc20:	46c0      	nop			@ (mov r8, r8)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	689a      	ldr	r2, [r3, #8]
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	2101      	movs	r1, #1
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	609a      	str	r2, [r3, #8]
 800dc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc34:	61bb      	str	r3, [r7, #24]
 800dc36:	69bb      	ldr	r3, [r7, #24]
 800dc38:	f383 8810 	msr	PRIMASK, r3
 800dc3c:	46c0      	nop			@ (mov r8, r8)
 800dc3e:	f3ef 8310 	mrs	r3, PRIMASK
 800dc42:	61fb      	str	r3, [r7, #28]
 800dc44:	69fb      	ldr	r3, [r7, #28]
 800dc46:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc48:	2301      	movs	r3, #1
 800dc4a:	623b      	str	r3, [r7, #32]
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	f383 8810 	msr	PRIMASK, r3
 800dc52:	46c0      	nop			@ (mov r8, r8)
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	689a      	ldr	r2, [r3, #8]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2140      	movs	r1, #64	@ 0x40
 800dc60:	430a      	orrs	r2, r1
 800dc62:	609a      	str	r2, [r3, #8]
 800dc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc66:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc6a:	f383 8810 	msr	PRIMASK, r3
 800dc6e:	46c0      	nop			@ (mov r8, r8)
 800dc70:	2300      	movs	r3, #0
 800dc72:	0018      	movs	r0, r3
 800dc74:	46bd      	mov	sp, r7
 800dc76:	b010      	add	sp, #64	@ 0x40
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	46c0      	nop			@ (mov r8, r8)
 800dc7c:	0800ddd5 	.word	0x0800ddd5
 800dc80:	0800df09 	.word	0x0800df09
 800dc84:	0800df51 	.word	0x0800df51

0800dc88 <UART_EndTxTransfer>:
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b08a      	sub	sp, #40	@ 0x28
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	f3ef 8310 	mrs	r3, PRIMASK
 800dc94:	60bb      	str	r3, [r7, #8]
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	f383 8810 	msr	PRIMASK, r3
 800dca4:	46c0      	nop			@ (mov r8, r8)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	681a      	ldr	r2, [r3, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	21c0      	movs	r1, #192	@ 0xc0
 800dcb2:	438a      	bics	r2, r1
 800dcb4:	601a      	str	r2, [r3, #0]
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	f383 8810 	msr	PRIMASK, r3
 800dcc0:	46c0      	nop			@ (mov r8, r8)
 800dcc2:	f3ef 8310 	mrs	r3, PRIMASK
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	623b      	str	r3, [r7, #32]
 800dccc:	2301      	movs	r3, #1
 800dcce:	61bb      	str	r3, [r7, #24]
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	f383 8810 	msr	PRIMASK, r3
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	689a      	ldr	r2, [r3, #8]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	4908      	ldr	r1, [pc, #32]	@ (800dd04 <UART_EndTxTransfer+0x7c>)
 800dce4:	400a      	ands	r2, r1
 800dce6:	609a      	str	r2, [r3, #8]
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	61fb      	str	r3, [r7, #28]
 800dcec:	69fb      	ldr	r3, [r7, #28]
 800dcee:	f383 8810 	msr	PRIMASK, r3
 800dcf2:	46c0      	nop			@ (mov r8, r8)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2288      	movs	r2, #136	@ 0x88
 800dcf8:	2120      	movs	r1, #32
 800dcfa:	5099      	str	r1, [r3, r2]
 800dcfc:	46c0      	nop			@ (mov r8, r8)
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	b00a      	add	sp, #40	@ 0x28
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	ff7fffff 	.word	0xff7fffff

0800dd08 <UART_EndRxTransfer>:
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b08e      	sub	sp, #56	@ 0x38
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	f3ef 8310 	mrs	r3, PRIMASK
 800dd14:	617b      	str	r3, [r7, #20]
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	61bb      	str	r3, [r7, #24]
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	f383 8810 	msr	PRIMASK, r3
 800dd24:	46c0      	nop			@ (mov r8, r8)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4926      	ldr	r1, [pc, #152]	@ (800ddcc <UART_EndRxTransfer+0xc4>)
 800dd32:	400a      	ands	r2, r1
 800dd34:	601a      	str	r2, [r3, #0]
 800dd36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd38:	61fb      	str	r3, [r7, #28]
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	f383 8810 	msr	PRIMASK, r3
 800dd40:	46c0      	nop			@ (mov r8, r8)
 800dd42:	f3ef 8310 	mrs	r3, PRIMASK
 800dd46:	623b      	str	r3, [r7, #32]
 800dd48:	6a3b      	ldr	r3, [r7, #32]
 800dd4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd52:	f383 8810 	msr	PRIMASK, r3
 800dd56:	46c0      	nop			@ (mov r8, r8)
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	689a      	ldr	r2, [r3, #8]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	491b      	ldr	r1, [pc, #108]	@ (800ddd0 <UART_EndRxTransfer+0xc8>)
 800dd64:	400a      	ands	r2, r1
 800dd66:	609a      	str	r2, [r3, #8]
 800dd68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dd6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd6e:	f383 8810 	msr	PRIMASK, r3
 800dd72:	46c0      	nop			@ (mov r8, r8)
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d118      	bne.n	800ddae <UART_EndRxTransfer+0xa6>
 800dd7c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd80:	60bb      	str	r3, [r7, #8]
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dd86:	2301      	movs	r3, #1
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f383 8810 	msr	PRIMASK, r3
 800dd90:	46c0      	nop			@ (mov r8, r8)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2110      	movs	r1, #16
 800dd9e:	438a      	bics	r2, r1
 800dda0:	601a      	str	r2, [r3, #0]
 800dda2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dda4:	613b      	str	r3, [r7, #16]
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	f383 8810 	msr	PRIMASK, r3
 800ddac:	46c0      	nop			@ (mov r8, r8)
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	228c      	movs	r2, #140	@ 0x8c
 800ddb2:	2120      	movs	r1, #32
 800ddb4:	5099      	str	r1, [r3, r2]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	675a      	str	r2, [r3, #116]	@ 0x74
 800ddc2:	46c0      	nop			@ (mov r8, r8)
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	b00e      	add	sp, #56	@ 0x38
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	46c0      	nop			@ (mov r8, r8)
 800ddcc:	fffffedf 	.word	0xfffffedf
 800ddd0:	effffffe 	.word	0xeffffffe

0800ddd4 <UART_DMAReceiveCplt>:
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b094      	sub	sp, #80	@ 0x50
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	2220      	movs	r2, #32
 800ddea:	4013      	ands	r3, r2
 800ddec:	d16f      	bne.n	800dece <UART_DMAReceiveCplt+0xfa>
 800ddee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddf0:	225e      	movs	r2, #94	@ 0x5e
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	5299      	strh	r1, [r3, r2]
 800ddf6:	f3ef 8310 	mrs	r3, PRIMASK
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de00:	2301      	movs	r3, #1
 800de02:	61fb      	str	r3, [r7, #28]
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f383 8810 	msr	PRIMASK, r3
 800de0a:	46c0      	nop			@ (mov r8, r8)
 800de0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	493b      	ldr	r1, [pc, #236]	@ (800df04 <UART_DMAReceiveCplt+0x130>)
 800de18:	400a      	ands	r2, r1
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800de1e:	623b      	str	r3, [r7, #32]
 800de20:	6a3b      	ldr	r3, [r7, #32]
 800de22:	f383 8810 	msr	PRIMASK, r3
 800de26:	46c0      	nop			@ (mov r8, r8)
 800de28:	f3ef 8310 	mrs	r3, PRIMASK
 800de2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800de2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de30:	647b      	str	r3, [r7, #68]	@ 0x44
 800de32:	2301      	movs	r3, #1
 800de34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de38:	f383 8810 	msr	PRIMASK, r3
 800de3c:	46c0      	nop			@ (mov r8, r8)
 800de3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	689a      	ldr	r2, [r3, #8]
 800de44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	2101      	movs	r1, #1
 800de4a:	438a      	bics	r2, r1
 800de4c:	609a      	str	r2, [r3, #8]
 800de4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de54:	f383 8810 	msr	PRIMASK, r3
 800de58:	46c0      	nop			@ (mov r8, r8)
 800de5a:	f3ef 8310 	mrs	r3, PRIMASK
 800de5e:	633b      	str	r3, [r7, #48]	@ 0x30
 800de60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de62:	643b      	str	r3, [r7, #64]	@ 0x40
 800de64:	2301      	movs	r3, #1
 800de66:	637b      	str	r3, [r7, #52]	@ 0x34
 800de68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de6a:	f383 8810 	msr	PRIMASK, r3
 800de6e:	46c0      	nop			@ (mov r8, r8)
 800de70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	689a      	ldr	r2, [r3, #8]
 800de76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	2140      	movs	r1, #64	@ 0x40
 800de7c:	438a      	bics	r2, r1
 800de7e:	609a      	str	r2, [r3, #8]
 800de80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800de82:	63bb      	str	r3, [r7, #56]	@ 0x38
 800de84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de86:	f383 8810 	msr	PRIMASK, r3
 800de8a:	46c0      	nop			@ (mov r8, r8)
 800de8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de8e:	228c      	movs	r2, #140	@ 0x8c
 800de90:	2120      	movs	r1, #32
 800de92:	5099      	str	r1, [r3, r2]
 800de94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d118      	bne.n	800dece <UART_DMAReceiveCplt+0xfa>
 800de9c:	f3ef 8310 	mrs	r3, PRIMASK
 800dea0:	60fb      	str	r3, [r7, #12]
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dea6:	2301      	movs	r3, #1
 800dea8:	613b      	str	r3, [r7, #16]
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	f383 8810 	msr	PRIMASK, r3
 800deb0:	46c0      	nop			@ (mov r8, r8)
 800deb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	681a      	ldr	r2, [r3, #0]
 800deb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2110      	movs	r1, #16
 800debe:	438a      	bics	r2, r1
 800dec0:	601a      	str	r2, [r3, #0]
 800dec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dec4:	617b      	str	r3, [r7, #20]
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	f383 8810 	msr	PRIMASK, r3
 800decc:	46c0      	nop			@ (mov r8, r8)
 800dece:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded0:	2200      	movs	r2, #0
 800ded2:	671a      	str	r2, [r3, #112]	@ 0x70
 800ded4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ded6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d109      	bne.n	800def0 <UART_DMAReceiveCplt+0x11c>
 800dedc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dede:	22c0      	movs	r2, #192	@ 0xc0
 800dee0:	589b      	ldr	r3, [r3, r2]
 800dee2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dee4:	215c      	movs	r1, #92	@ 0x5c
 800dee6:	5a51      	ldrh	r1, [r2, r1]
 800dee8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800deea:	0010      	movs	r0, r2
 800deec:	4798      	blx	r3
 800deee:	e005      	b.n	800defc <UART_DMAReceiveCplt+0x128>
 800def0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800def2:	22a0      	movs	r2, #160	@ 0xa0
 800def4:	589b      	ldr	r3, [r3, r2]
 800def6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800def8:	0010      	movs	r0, r2
 800defa:	4798      	blx	r3
 800defc:	46c0      	nop			@ (mov r8, r8)
 800defe:	46bd      	mov	sp, r7
 800df00:	b014      	add	sp, #80	@ 0x50
 800df02:	bd80      	pop	{r7, pc}
 800df04:	fffffeff 	.word	0xfffffeff

0800df08 <UART_DMARxHalfCplt>:
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df14:	60fb      	str	r3, [r7, #12]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2201      	movs	r2, #1
 800df1a:	671a      	str	r2, [r3, #112]	@ 0x70
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df20:	2b01      	cmp	r3, #1
 800df22:	d10b      	bne.n	800df3c <UART_DMARxHalfCplt+0x34>
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	22c0      	movs	r2, #192	@ 0xc0
 800df28:	589b      	ldr	r3, [r3, r2]
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	215c      	movs	r1, #92	@ 0x5c
 800df2e:	5a52      	ldrh	r2, [r2, r1]
 800df30:	0852      	lsrs	r2, r2, #1
 800df32:	b291      	uxth	r1, r2
 800df34:	68fa      	ldr	r2, [r7, #12]
 800df36:	0010      	movs	r0, r2
 800df38:	4798      	blx	r3
 800df3a:	e005      	b.n	800df48 <UART_DMARxHalfCplt+0x40>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	229c      	movs	r2, #156	@ 0x9c
 800df40:	589b      	ldr	r3, [r3, r2]
 800df42:	68fa      	ldr	r2, [r7, #12]
 800df44:	0010      	movs	r0, r2
 800df46:	4798      	blx	r3
 800df48:	46c0      	nop			@ (mov r8, r8)
 800df4a:	46bd      	mov	sp, r7
 800df4c:	b004      	add	sp, #16
 800df4e:	bd80      	pop	{r7, pc}

0800df50 <UART_DMAError>:
 800df50:	b580      	push	{r7, lr}
 800df52:	b086      	sub	sp, #24
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df5c:	617b      	str	r3, [r7, #20]
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	2288      	movs	r2, #136	@ 0x88
 800df62:	589b      	ldr	r3, [r3, r2]
 800df64:	613b      	str	r3, [r7, #16]
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	228c      	movs	r2, #140	@ 0x8c
 800df6a:	589b      	ldr	r3, [r3, r2]
 800df6c:	60fb      	str	r3, [r7, #12]
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	2280      	movs	r2, #128	@ 0x80
 800df76:	4013      	ands	r3, r2
 800df78:	2b80      	cmp	r3, #128	@ 0x80
 800df7a:	d10a      	bne.n	800df92 <UART_DMAError+0x42>
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	2b21      	cmp	r3, #33	@ 0x21
 800df80:	d107      	bne.n	800df92 <UART_DMAError+0x42>
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	2256      	movs	r2, #86	@ 0x56
 800df86:	2100      	movs	r1, #0
 800df88:	5299      	strh	r1, [r3, r2]
 800df8a:	697b      	ldr	r3, [r7, #20]
 800df8c:	0018      	movs	r0, r3
 800df8e:	f7ff fe7b 	bl	800dc88 <UART_EndTxTransfer>
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	2240      	movs	r2, #64	@ 0x40
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b40      	cmp	r3, #64	@ 0x40
 800df9e:	d10a      	bne.n	800dfb6 <UART_DMAError+0x66>
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	2b22      	cmp	r3, #34	@ 0x22
 800dfa4:	d107      	bne.n	800dfb6 <UART_DMAError+0x66>
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	225e      	movs	r2, #94	@ 0x5e
 800dfaa:	2100      	movs	r1, #0
 800dfac:	5299      	strh	r1, [r3, r2]
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	0018      	movs	r0, r3
 800dfb2:	f7ff fea9 	bl	800dd08 <UART_EndRxTransfer>
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2290      	movs	r2, #144	@ 0x90
 800dfba:	589b      	ldr	r3, [r3, r2]
 800dfbc:	2210      	movs	r2, #16
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	2190      	movs	r1, #144	@ 0x90
 800dfc4:	505a      	str	r2, [r3, r1]
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	22a4      	movs	r2, #164	@ 0xa4
 800dfca:	589b      	ldr	r3, [r3, r2]
 800dfcc:	697a      	ldr	r2, [r7, #20]
 800dfce:	0010      	movs	r0, r2
 800dfd0:	4798      	blx	r3
 800dfd2:	46c0      	nop			@ (mov r8, r8)
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	b006      	add	sp, #24
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <UART_DMAAbortOnError>:
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b084      	sub	sp, #16
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	225e      	movs	r2, #94	@ 0x5e
 800dfec:	2100      	movs	r1, #0
 800dfee:	5299      	strh	r1, [r3, r2]
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2256      	movs	r2, #86	@ 0x56
 800dff4:	2100      	movs	r1, #0
 800dff6:	5299      	strh	r1, [r3, r2]
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	22a4      	movs	r2, #164	@ 0xa4
 800dffc:	589b      	ldr	r3, [r3, r2]
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	0010      	movs	r0, r2
 800e002:	4798      	blx	r3
 800e004:	46c0      	nop			@ (mov r8, r8)
 800e006:	46bd      	mov	sp, r7
 800e008:	b004      	add	sp, #16
 800e00a:	bd80      	pop	{r7, pc}

0800e00c <UART_EndTransmit_IT>:
 800e00c:	b580      	push	{r7, lr}
 800e00e:	b086      	sub	sp, #24
 800e010:	af00      	add	r7, sp, #0
 800e012:	6078      	str	r0, [r7, #4]
 800e014:	f3ef 8310 	mrs	r3, PRIMASK
 800e018:	60bb      	str	r3, [r7, #8]
 800e01a:	68bb      	ldr	r3, [r7, #8]
 800e01c:	617b      	str	r3, [r7, #20]
 800e01e:	2301      	movs	r3, #1
 800e020:	60fb      	str	r3, [r7, #12]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f383 8810 	msr	PRIMASK, r3
 800e028:	46c0      	nop			@ (mov r8, r8)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	681a      	ldr	r2, [r3, #0]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2140      	movs	r1, #64	@ 0x40
 800e036:	438a      	bics	r2, r1
 800e038:	601a      	str	r2, [r3, #0]
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	613b      	str	r3, [r7, #16]
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f383 8810 	msr	PRIMASK, r3
 800e044:	46c0      	nop			@ (mov r8, r8)
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2288      	movs	r2, #136	@ 0x88
 800e04a:	2120      	movs	r1, #32
 800e04c:	5099      	str	r1, [r3, r2]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2200      	movs	r2, #0
 800e052:	679a      	str	r2, [r3, #120]	@ 0x78
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2298      	movs	r2, #152	@ 0x98
 800e058:	589b      	ldr	r3, [r3, r2]
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	0010      	movs	r0, r2
 800e05e:	4798      	blx	r3
 800e060:	46c0      	nop			@ (mov r8, r8)
 800e062:	46bd      	mov	sp, r7
 800e064:	b006      	add	sp, #24
 800e066:	bd80      	pop	{r7, pc}

0800e068 <HAL_UARTEx_WakeupCallback>:
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	46c0      	nop			@ (mov r8, r8)
 800e072:	46bd      	mov	sp, r7
 800e074:	b002      	add	sp, #8
 800e076:	bd80      	pop	{r7, pc}

0800e078 <HAL_UARTEx_RxFifoFullCallback>:
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	46c0      	nop			@ (mov r8, r8)
 800e082:	46bd      	mov	sp, r7
 800e084:	b002      	add	sp, #8
 800e086:	bd80      	pop	{r7, pc}

0800e088 <HAL_UARTEx_TxFifoEmptyCallback>:
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	46c0      	nop			@ (mov r8, r8)
 800e092:	46bd      	mov	sp, r7
 800e094:	b002      	add	sp, #8
 800e096:	bd80      	pop	{r7, pc}

0800e098 <memset>:
 800e098:	0003      	movs	r3, r0
 800e09a:	1882      	adds	r2, r0, r2
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d100      	bne.n	800e0a2 <memset+0xa>
 800e0a0:	4770      	bx	lr
 800e0a2:	7019      	strb	r1, [r3, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	e7f9      	b.n	800e09c <memset+0x4>

0800e0a8 <__libc_init_array>:
 800e0a8:	b570      	push	{r4, r5, r6, lr}
 800e0aa:	2600      	movs	r6, #0
 800e0ac:	4c0c      	ldr	r4, [pc, #48]	@ (800e0e0 <__libc_init_array+0x38>)
 800e0ae:	4d0d      	ldr	r5, [pc, #52]	@ (800e0e4 <__libc_init_array+0x3c>)
 800e0b0:	1b64      	subs	r4, r4, r5
 800e0b2:	10a4      	asrs	r4, r4, #2
 800e0b4:	42a6      	cmp	r6, r4
 800e0b6:	d109      	bne.n	800e0cc <__libc_init_array+0x24>
 800e0b8:	2600      	movs	r6, #0
 800e0ba:	f000 f823 	bl	800e104 <_init>
 800e0be:	4c0a      	ldr	r4, [pc, #40]	@ (800e0e8 <__libc_init_array+0x40>)
 800e0c0:	4d0a      	ldr	r5, [pc, #40]	@ (800e0ec <__libc_init_array+0x44>)
 800e0c2:	1b64      	subs	r4, r4, r5
 800e0c4:	10a4      	asrs	r4, r4, #2
 800e0c6:	42a6      	cmp	r6, r4
 800e0c8:	d105      	bne.n	800e0d6 <__libc_init_array+0x2e>
 800e0ca:	bd70      	pop	{r4, r5, r6, pc}
 800e0cc:	00b3      	lsls	r3, r6, #2
 800e0ce:	58eb      	ldr	r3, [r5, r3]
 800e0d0:	4798      	blx	r3
 800e0d2:	3601      	adds	r6, #1
 800e0d4:	e7ee      	b.n	800e0b4 <__libc_init_array+0xc>
 800e0d6:	00b3      	lsls	r3, r6, #2
 800e0d8:	58eb      	ldr	r3, [r5, r3]
 800e0da:	4798      	blx	r3
 800e0dc:	3601      	adds	r6, #1
 800e0de:	e7f2      	b.n	800e0c6 <__libc_init_array+0x1e>
 800e0e0:	0800ebb8 	.word	0x0800ebb8
 800e0e4:	0800ebb8 	.word	0x0800ebb8
 800e0e8:	0800ebbc 	.word	0x0800ebbc
 800e0ec:	0800ebb8 	.word	0x0800ebb8

0800e0f0 <memcpy>:
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	b510      	push	{r4, lr}
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d100      	bne.n	800e0fa <memcpy+0xa>
 800e0f8:	bd10      	pop	{r4, pc}
 800e0fa:	5ccc      	ldrb	r4, [r1, r3]
 800e0fc:	54c4      	strb	r4, [r0, r3]
 800e0fe:	3301      	adds	r3, #1
 800e100:	e7f8      	b.n	800e0f4 <memcpy+0x4>
	...

0800e104 <_init>:
 800e104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e106:	46c0      	nop			@ (mov r8, r8)
 800e108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e10a:	bc08      	pop	{r3}
 800e10c:	469e      	mov	lr, r3
 800e10e:	4770      	bx	lr

0800e110 <_fini>:
 800e110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e112:	46c0      	nop			@ (mov r8, r8)
 800e114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e116:	bc08      	pop	{r3}
 800e118:	469e      	mov	lr, r3
 800e11a:	4770      	bx	lr
 800e11c:	0000      	movs	r0, r0
	...

0800e120 <__FLASH_Program_Fast_veneer>:
 800e120:	b401      	push	{r0}
 800e122:	4802      	ldr	r0, [pc, #8]	@ (800e12c <__FLASH_Program_Fast_veneer+0xc>)
 800e124:	4684      	mov	ip, r0
 800e126:	bc01      	pop	{r0}
 800e128:	4760      	bx	ip
 800e12a:	bf00      	nop
 800e12c:	20000459 	.word	0x20000459

Disassembly of section .data:

20000000 <user_preset_0>:
20000000:	407f6e7f 00000000                       .n.@....

20000008 <user_preset_1>:
20000008:	40402840 00000040                       @(@@@...

20000010 <user_preset_2>:
20000010:	007f4000 00000020                       .@.. ...

20000018 <user_preset_3>:
20000018:	7f7f4040 00000064                       @@..d...

20000020 <led_blink_period>:
20000020:	0000012c                                ,...

20000024 <tap_tempo_switch_state_counter.1>:
20000024:	                                         .

20000025 <preset_save_mode_is_inactive.6>:
20000025:	                                         .

20000026 <preset.4>:
20000026:	                                         .

20000027 <first_time.3>:
20000027:	                                         .

20000028 <delay_line>:
	...
20000428:	00010000 00000200                       ........

20000430 <speed_fsm>:
20000430:	00000001                                ....

20000434 <depth_fsm>:
20000434:	00000001                                ....

20000438 <waveshape_fsm>:
20000438:	00000001                                ....

2000043c <symmetry_fsm>:
2000043c:	00000001                                ....

20000440 <phase_fsm>:
20000440:	00000001                                ....

20000444 <IP_CAP_fsm>:
20000444:	00000400                                ....

20000448 <LED_fsm>:
20000448:	00000001                                ....

2000044c <SystemCoreClock>:
2000044c:	00f42400                                .$..

20000450 <uwTickPrio>:
20000450:	00000004                                ....

20000454 <uwTickFreq>:
20000454:	00000001                                ....

20000458 <FLASH_Program_Fast>:
20000458:	b580      	push	{r7, lr}
2000045a:	b088      	sub	sp, #32
2000045c:	af00      	add	r7, sp, #0
2000045e:	6078      	str	r0, [r7, #4]
20000460:	6039      	str	r1, [r7, #0]
20000462:	231f      	movs	r3, #31
20000464:	18fb      	adds	r3, r7, r3
20000466:	2200      	movs	r2, #0
20000468:	701a      	strb	r2, [r3, #0]
2000046a:	687b      	ldr	r3, [r7, #4]
2000046c:	61bb      	str	r3, [r7, #24]
2000046e:	683b      	ldr	r3, [r7, #0]
20000470:	617b      	str	r3, [r7, #20]
20000472:	4b1a      	ldr	r3, [pc, #104]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000474:	695a      	ldr	r2, [r3, #20]
20000476:	4b19      	ldr	r3, [pc, #100]	@ (200004dc <FLASH_Program_Fast+0x84>)
20000478:	2180      	movs	r1, #128	@ 0x80
2000047a:	02c9      	lsls	r1, r1, #11
2000047c:	430a      	orrs	r2, r1
2000047e:	615a      	str	r2, [r3, #20]
20000480:	f3ef 8310 	mrs	r3, PRIMASK
20000484:	60fb      	str	r3, [r7, #12]
20000486:	68fb      	ldr	r3, [r7, #12]
20000488:	613b      	str	r3, [r7, #16]
2000048a:	b672      	cpsid	i
2000048c:	46c0      	nop			@ (mov r8, r8)
2000048e:	e00f      	b.n	200004b0 <FLASH_Program_Fast+0x58>
20000490:	697a      	ldr	r2, [r7, #20]
20000492:	69bb      	ldr	r3, [r7, #24]
20000494:	6812      	ldr	r2, [r2, #0]
20000496:	601a      	str	r2, [r3, #0]
20000498:	697b      	ldr	r3, [r7, #20]
2000049a:	3304      	adds	r3, #4
2000049c:	617b      	str	r3, [r7, #20]
2000049e:	69bb      	ldr	r3, [r7, #24]
200004a0:	3304      	adds	r3, #4
200004a2:	61bb      	str	r3, [r7, #24]
200004a4:	211f      	movs	r1, #31
200004a6:	187b      	adds	r3, r7, r1
200004a8:	781a      	ldrb	r2, [r3, #0]
200004aa:	187b      	adds	r3, r7, r1
200004ac:	3201      	adds	r2, #1
200004ae:	701a      	strb	r2, [r3, #0]
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	781b      	ldrb	r3, [r3, #0]
200004b6:	2b3f      	cmp	r3, #63	@ 0x3f
200004b8:	d9ea      	bls.n	20000490 <FLASH_Program_Fast+0x38>
200004ba:	46c0      	nop			@ (mov r8, r8)
200004bc:	4b07      	ldr	r3, [pc, #28]	@ (200004dc <FLASH_Program_Fast+0x84>)
200004be:	691a      	ldr	r2, [r3, #16]
200004c0:	2380      	movs	r3, #128	@ 0x80
200004c2:	025b      	lsls	r3, r3, #9
200004c4:	4013      	ands	r3, r2
200004c6:	d1f9      	bne.n	200004bc <FLASH_Program_Fast+0x64>
200004c8:	693b      	ldr	r3, [r7, #16]
200004ca:	60bb      	str	r3, [r7, #8]
200004cc:	68bb      	ldr	r3, [r7, #8]
200004ce:	f383 8810 	msr	PRIMASK, r3
200004d2:	46c0      	nop			@ (mov r8, r8)
200004d4:	46c0      	nop			@ (mov r8, r8)
200004d6:	46bd      	mov	sp, r7
200004d8:	b008      	add	sp, #32
200004da:	bd80      	pop	{r7, pc}
200004dc:	40022000 	.word	0x40022000
